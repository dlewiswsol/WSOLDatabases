CREATE PROCEDURE [dbo].[uspIMPORTS_DAILY_SCHEDULE_REPORTING]
 @DATE_BEG          DATETIME
,@DATE_END          DATETIME
,@TENANT_NAME		VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP   VARCHAR(500) --Hid. Def=' '
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM'
,@MINIMUM_HOURS		INTEGER		
,@SHOW_SUBTOTALS	VARCHAR(5) 
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'  MANual,SUBscription
AS
SET NOCOUNT ON    

--  EXECUTE [dbo].[uspIMPORTS_DAILY_SCHEDULE_REPORTING] '09/29/2016','09/29/2016','SABRE','0','DY','HH','20','Y','4','MAN'

--  SELECT * FROM WSOL_TB_IMPORTS_DAILY_SCHEDULE
--  SELECT * FROM YZ_TB_IMPORTS_ASO_INVOICING

DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) 
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) -- + 1
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
END
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

DECLARE
 @MTD_BEG AS DATETIME
,@MTD_END AS DATETIME  --,@YTD_BEG AS DATETIME--,@YTD_END AS DATETIME
SET @MTD_BEG = CAST(CAST(DATEPART(mm,@DTM_BEG) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)
SET @MTD_END = @DTM_END  --SET @YTD_BEG = CAST('01/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)  --THINK _BEG MAKES MORE SENSE THAN _END.--SET @YTD_END = @DTM_END

IF @TIME_INTERVAL IN ('MR','MD') BEGIN  --MONTH DETERMINED BY @DTM_BEG.
	SET @DTM_BEG = @MTD_BEG
	SET @DTM_END = @MTD_END
END

--==================================
SET @TENANT_NAME		= ',' + LTRIM(RTRIM(@TENANT_NAME))      + ','
SET @SCHEDULER_GROUP	= ',' + LTRIM(RTRIM(@SCHEDULER_GROUP)) + ','
--SET @ID_EXT			= ',' + LTRIM(RTRIM(@ID_EXT))          + ','
--SET @CLIENT_USER_ID	= ',' + LTRIM(RTRIM(@CLIENT_USER_ID)) + ','


--==================================
--SET AMOUNT TO MULTIPLY BY:
--==================================
DECLARE @DS DECIMAL(10,2)  --SECONDS TO MULTIPY BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 3600.00		--MULTIPLY HOURS BY 3600  TO GET SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
    SET @DS = 60.00			--MULTIPLY HOURS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
    SET @DS = 1.00			--MULTIPLY HOURS BY 1 TO GET HOURS.
END

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_DAILY_SCHEDULE') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_DAILY_SCHEDULE
END
CREATE TABLE #IMPORTS_DAILY_SCHEDULE
(
 TENANT_NAME					VARCHAR(50)
,AGENT_NAME						VARCHAR(100)
,OFFICIAL_ACL_NAME				VARCHAR(200)
,FIELD_MAP_ID					VARCHAR(50)
,EMPLOYEE_EMAIL					VARCHAR(200)

,STD_TENANT_START_DATE_TIME_KEY INT
,[DATETIME]						DATETIME

,SCHEDULED_TIME					DECIMAL(10,2)
,SCHEDULED_AFTER_CANCELLATION	DECIMAL(10,2)
,CANCELLED_TIME					DECIMAL(10,2)
,CANCELLED_PERCENT				DECIMAL(10,2)
,LOGGED_IN_TIME					DECIMAL(10,2)
,PRODUCTIVE_TIME				DECIMAL(10,2)
,NO_SHOW_TIME					DECIMAL(10,2)
,UNSCHEDULED_TIME				DECIMAL(10,2)
)

INSERT INTO #IMPORTS_DAILY_SCHEDULE
SELECT
 USI.TENANT_NAME						--AS TENANT_NAME
,USI.AGENT_NAME							--AS AGENT_NAME
,USI.OFFICIAL_ACL_NAME					--AS OFFICIAL_ACL_NAME
,USI.FIELD_MAP_ID						--AS FIELD_MAP_ID
,USI.EMPLOYEE_EMAIL						--AS EMPLOYEE_EMAIL

,USI.STD_TENANT_START_DATE_TIME_KEY	
,USI.DATETIME

,(ISNULL(USI.SCHEDULED_TIME					,0.00))
,(ISNULL(USI.SCHEDULED_AFTER_CANCELLATION	,0.00))
,(ISNULL(USI.CANCELLED_TIME					,0.00))
,(ISNULL(USI.CANCELLED_PERCENT				,0.00))
,(ISNULL(USI.LOGGED_IN_TIME					,0.00))
,(ISNULL(USI.PRODUCTIVE_TIME				,0.00))
,USI.NO_SHOW_TIME
,USI.UNSCHEDULED_TIME


--SELECT * FROM WSOL_TB_IMPORTS_DAILY_SCHEDULE
--SELECT * FROM WSOL_TB_IMPORTS_WORK_HOURS_ALL

FROM
(	SELECT	
	 ISNULL(WK.TENANT_NAME							,SC.TENANT_NAME)				AS TENANT_NAME
	--,ISNULL(WK.AGENT_NAME							,SC.AGENT_NAME)					AS AGENT_NAME
	,MAX(ISNULL(WK.AGENT_NAME						,SC.AGENT_NAME))				AS AGENT_NAME
	,MAX(ISNULL(WK.OFFICIAL_ACL_NAME				,SC.OFFICIAL_ACL_NAME))			AS OFFICIAL_ACL_NAME
	,ISNULL(WK.FIELD_MAP_ID							,SC.FIELD_MAP_ID)				AS FIELD_MAP_ID
	,MAX(ISNULL(SC.EMAIL							,WK.EMAIL))						AS EMPLOYEE_EMAIL
	,ISNULL(WK.STD_TENANT_START_DATE_TIME_KEY ,SC.STD_TENANT_START_DATE_TIME_KEY)	AS STD_TENANT_START_DATE_TIME_KEY
	,CASE WHEN @TIME_INTERVAL = 'DY' THEN
		ISNULL(WK.DATETIME ,SC.DATETIME)
		  ELSE
		CAST('1900-01-01' AS DATETIME)
	 END																			AS [DATETIME]

	,SUM(ISNULL(SC.SCHEDULED_HOURS						,0.00))						AS SCHEDULED_TIME
	,SUM(ISNULL(SC.SCHEDULED_AFTER_CANCELLATION_HOURS	,0.00))						AS SCHEDULED_AFTER_CANCELLATION
	,SUM(ISNULL(SC.CANCELLED_HOURS						,0.00))						AS CANCELLED_TIME
	,SUM(ISNULL(SC.CANCELLED_PERCENT					,0.00))						AS CANCELLED_PERCENT
	,SUM(ISNULL(WK.LOGGED_IN_HOURS						,0.00))						AS LOGGED_IN_TIME
	,SUM(ISNULL(WK.PRODUCTIVE_HOURS						,0.00))						AS PRODUCTIVE_TIME
	,NULL																			AS NO_SHOW_TIME
	,NULL																			AS UNSCHEDULED_TIME

	FROM            WSOL_TB_IMPORTS_WORK_HOURS_ALL	WK
	FULL OUTER JOIN	WSOL_TB_IMPORTS_DAILY_SCHEDULE	SC
	
	 ON WK.OFFICIAL_ACL_NAME				= SC.OFFICIAL_ACL_NAME
	AND WK.TENANT_NAME						= SC.TENANT_NAME
	AND WK.FIELD_MAP_ID						= SC.FIELD_MAP_ID
	AND WK.STD_TENANT_START_DATE_TIME_KEY	= SC.STD_TENANT_START_DATE_TIME_KEY

	WHERE ISNULL(WK.DATETIME,SC.DATETIME) >= @DTM_BEG AND ISNULL(WK.DATETIME,SC.DATETIME) <  @DTM_END
	  AND (
--			( @TENANT_NAME		IN (',0,',',,') OR CHARINDEX(',' + RTRIM(WK.TENANT_NAME)  + ',',@TENANT_NAME)	> 0 )
--			OR
		    ( @SCHEDULER_GROUP	IN (',0,',',,') OR CHARINDEX(',' + RTRIM(SC.OFFICIAL_ACL_NAME)	+ ',',@SCHEDULER_GROUP) > 0 )
			OR
			( @SCHEDULER_GROUP  IN (',0,',',,') OR CHARINDEX(',' + RTRIM(WK.OFFICIAL_ACL_NAME)  + ',',@SCHEDULER_GROUP) > 0 )
		  )

	GROUP BY
	 ISNULL(WK.TENANT_NAME						,SC.TENANT_NAME)
--	,ISNULL(WK.AGENT_NAME						,SC.AGENT_NAME)
--	,WK.AGENT_NAME
	--,ISNULL(WK.OFFICIAL_ACL_NAME				,SC.OFFICIAL_ACL_NAME)
	,ISNULL(WK.FIELD_MAP_ID						,SC.FIELD_MAP_ID)
	--,ISNULL(SC.EMAIL							,WK.EMAIL)
	,ISNULL(WK.STD_TENANT_START_DATE_TIME_KEY	,SC.STD_TENANT_START_DATE_TIME_KEY)
	,CASE WHEN @TIME_INTERVAL = 'DY' THEN
		ISNULL(WK.DATETIME ,SC.DATETIME)
		  ELSE
		CAST('1900-01-01' AS DATETIME)
	 END

) USI

-- SELECT * FROM #IMPORTS_DAILY_SCHEDULE

IF OBJECT_ID('TEMPDB..#IMPORTS_DAILY_SCHEDULE_RTN') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_DAILY_SCHEDULE_RTN
END
CREATE TABLE #IMPORTS_DAILY_SCHEDULE_RTN
(
 GRPNO							INT
,TENANT_NAME					VARCHAR(50)
,AGENT_NAME						VARCHAR(100)
,OFFICIAL_ACL_NAME				VARCHAR(200)
,FIELD_MAP_ID					VARCHAR(50)
,EMPLOYEE_EMAIL					VARCHAR(200)

,STD_TENANT_START_DATE_TIME_KEY INT
,[DATETIME]						DATETIME

,SCHEDULED_TIME					DECIMAL(10,2)
,SCHEDULED_AFTER_CANCELLATION	DECIMAL(10,2)
,CANCELLED_TIME					DECIMAL(10,2)
,CANCELLED_PERCENT				DECIMAL(10,2)
,LOGGED_IN_TIME					DECIMAL(10,2)
,PRODUCTIVE_TIME				DECIMAL(10,2)
,NO_SHOW_TIME					DECIMAL(10,2)
,UNSCHEDULED_TIME				DECIMAL(10,2)
)

-- SELECT * FROM #IMPORTS_DAILY_SCHEDULE_RTN

INSERT INTO #IMPORTS_DAILY_SCHEDULE_RTN
SELECT
 20								--AS GRPNO  
,ISNULL(GG.TENANT_NAME						,'') AS TENANT_NAME
,ISNULL(GG.AGENT_NAME						,'') AS AGENT_NAME
,ISNULL(GG.OFFICIAL_ACL_NAME				,'') AS OFFICIAL_ACL_NAME
,ISNULL(GG.FIELD_MAP_ID						,'') AS FIELD_MAP_ID
,ISNULL(GG.EMPLOYEE_EMAIL					,'') AS EMPLOYEE_EMAIL

,ISNULL(GG.STD_TENANT_START_DATE_TIME_KEY	,0 ) AS STD_TENANT_START_DATE_TIME_KEY
,ISNULL(GG.DATETIME							,0 ) AS [DATETIME]

,ISNULL(GG.SCHEDULED_TIME				,0.00) * @DS	AS SCHEDULED_TIME
,ISNULL(GG.SCHEDULED_AFTER_CANCELLATION	,0.00) * @DS	AS SCHEDULED_AFTER_CANCELLATION
,ISNULL(GG.CANCELLED_TIME				,0.00) * @DS	AS CANCELLED_TIME
,ISNULL(GG.CANCELLED_PERCENT			,0.00)			AS CANCELLED_PERCENT
,ISNULL(GG.LOGGED_IN_TIME				,0.00) * @DS	AS LOGGED_IN_TIME
,ISNULL(GG.PRODUCTIVE_TIME				,0.00) * @DS	AS PRODUCTIVE_TIME
,GG.NO_SHOW_TIME										AS NO_SHOW_TIME
,GG.UNSCHEDULED_TIME									AS UNSCHEDULED_TIME

FROM  -- GG STARTS HERE:
(	SELECT
	 MAX(ISNULL(SW.TENANT_NAME		,''))	AS TENANT_NAME
	,MAX(ISNULL(SW.AGENT_NAME		,''))	AS AGENT_NAME
	,ISNULL(SW.OFFICIAL_ACL_NAME	,'')	AS OFFICIAL_ACL_NAME
	,ISNULL(SW.FIELD_MAP_ID			,'')	AS FIELD_MAP_ID
	,MAX(ISNULL(SW.EMPLOYEE_EMAIL	,''))	AS EMPLOYEE_EMAIL
	
	,ISNULL(SW.STD_TENANT_START_DATE_TIME_KEY	,0)		AS STD_TENANT_START_DATE_TIME_KEY
	,ISNULL(SW.DATETIME							,0)		AS [DATETIME]

	,SUM(ISNULL(SW.SCHEDULED_TIME				,0.00)) AS SCHEDULED_TIME
	,SUM(ISNULL(SW.SCHEDULED_AFTER_CANCELLATION	,0.00))	AS SCHEDULED_AFTER_CANCELLATION
	,SUM(ISNULL(SW.CANCELLED_TIME				,0.00))	AS CANCELLED_TIME

	,CASE WHEN SUM(ISNULL(SW.SCHEDULED_TIME ,0.00)) > 0 THEN
			(SUM(ISNULL(SW.CANCELLED_TIME ,0.00)) / SUM(ISNULL(SW.SCHEDULED_TIME ,0.00))) * 100.00
		  ELSE 0.00 END									AS CANCELLED_PERCENT

	,SUM(ISNULL(SW.LOGGED_IN_TIME				,0.00))	AS LOGGED_IN_TIME
	,SUM(ISNULL(SW.PRODUCTIVE_TIME				,0.00))	AS PRODUCTIVE_TIME
	,CASE WHEN SUM(ISNULL(SW.SCHEDULED_AFTER_CANCELLATION,0.00)) - SUM(ISNULL(SW.LOGGED_IN_TIME,0.00)) < 0 THEN NULL
		  ELSE SUM(ISNULL(SW.SCHEDULED_AFTER_CANCELLATION,0.00)) - SUM(ISNULL(SW.LOGGED_IN_TIME,0.00)) END	AS NO_SHOW_TIME
	,CASE WHEN SUM(ISNULL(SW.LOGGED_IN_TIME,0.00)) - SUM(ISNULL(SW.SCHEDULED_AFTER_CANCELLATION,0.00)) < 0 THEN NULL
		  ELSE SUM(ISNULL(SW.LOGGED_IN_TIME,0.00)) - SUM(ISNULL(SW.SCHEDULED_AFTER_CANCELLATION,0.00)) END	AS UNSCHEDULED_TIME
	
	FROM            #IMPORTS_DAILY_SCHEDULE			SW
	INNER JOIN      DATE_TIME					    DT   ON DT.DATE_TIME_KEY              = SW.STD_TENANT_START_DATE_TIME_KEY

	GROUP BY
	 ISNULL(SW.OFFICIAL_ACL_NAME				,'')	--AS OFFICIAL_ACL_NAME
	,ISNULL(SW.FIELD_MAP_ID						,'')	--AS FIELD_MAP_ID
	,ISNULL(SW.STD_TENANT_START_DATE_TIME_KEY	,0 )	--AS STD_TENANT_START_DATE_TIME_KEY
	,ISNULL(SW.DATETIME							,0 )	--AS DATETIME
) GG

--=======================================================================================
--POPULATE TABLE READ BY SSIS TO GET END DATE OF DATA REPORT/FILE HAS BEEN RUN FOR:
--=======================================================================================
INSERT INTO YZ_TB_FILENAMES_FOR_SSIS
(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)

SELECT
 'uspIMPORTS_DAILY_SCHEDULE_REPORTING'  --SQL_JOB_NAME
,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,111),'/','')   --FILENM   YYYYMMDD_...
,dbo.getdate()  --CST_ROW_CREATED_TIME

--=====================================
--RETURN DATASET:
--=====================================
SELECT 
 CASE WHEN @DUR_IN = 'SS' THEN '' ELSE 'F' END AS DUR_FORMAT
,CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
,V.*

FROM      #IMPORTS_DAILY_SCHEDULE_RTN  V

ORDER BY
 V.FIELD_MAP_ID
,V.STD_TENANT_START_DATE_TIME_KEY

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1