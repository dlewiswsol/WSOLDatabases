CREATE PROCEDURE [dbo].[uspIMPORTS_SABRE_INVOICING_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_SABRE_INVOICING_IMPORT]

--  SELECT * FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1

--  Data is originally processed in Eastern timezone but reports are run and pushed in Central timezone.  No modifications needed!

--  Durations in file are in minutes.  Must convert to seconds.  Store as seconds. !!!

--=============================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY =       900704  --SABRE
--=============================================
DELETE FROM YZ_TB_ERRORS_FOUND 
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = 'SABRE_INVOICING'    --  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900704
--=============================================

--==========================================================================================================================================
--USING @WS_ROW_CREATED_TIME FOR ALL INSERTS WILL ALLOW ME TO DELETE SPECIFIC INSERT PROCESSES/FILES.  MOST IMPORTANT!!!  FOR ALL TABLES.
--  IN CASE OF EMERGENCY, CRACK GLASS.
--==========================================================================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.getdate()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===================================================================================

--======================================================================
--HANDLE COLUMN HEADER AND JUNK RECORDS:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_SABRE_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATETIME
,FF_FULL_NAME
,FF_CLIENT_USER_ID
,FF_USERNAME
,FF_LOGIN_ID
,FF_ACD_CALLS
,FF_EXTN_IN_CALLS
,FF_EXTN_OUT_CALLS
,FF_STAFFED_TIME
,FF_AGENT_RING_TIME
,FF_IACD_TIME
,FF_IACW_TIME
,FF_IACW_OUT_TIME
,FF_EXTN_IN_TIME
,FF_EXTN_OUT_TIME
,FF_HOLD_TIME
,FF_IACD_AUX_OUT_TIME
,FF_TOTAL_AUX_TIME
,FF_IAUX_OUT_TIME
,FF_AVAIL_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,ACD_CALLS
,EXTN_IN_CALLS
,EXTN_OUT_CALLS
,STAFFED_TIME
,AGENT_RING_TIME
,IACD_TIME
,IACW_TIME
,IACW_OUT_TIME
,EXTN_IN_TIME
,EXTN_OUT_TIME
,HOLD_TIME
,IACD_AUX_OUT_TIME
,TOTAL_AUX_TIME
,IAUX_OUT_TIME
,AVAIL_TIME
,HANDLED_CALLS
,ADJUSTED_ACW_TIME
,AUTHORIZED_ACW_TIME
,ADJUSTED_HOLD_TIME
,ADJUSTED_NOT_READY_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,PAY_GROUP)
SELECT
 24                     --BAD_IMPORTS_NO  --'Junk Record'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATETIME
,W1.FF_FULL_NAME
,W1.FF_CLIENT_USER_ID
,W1.FF_USERNAME
,W1.FF_LOGIN_ID
,W1.FF_ACD_CALLS
,W1.FF_EXTN_IN_CALLS
,W1.FF_EXTN_OUT_CALLS
,W1.FF_STAFFED_TIME
,W1.FF_AGENT_RING_TIME
,W1.FF_IACD_TIME
,W1.FF_IACW_TIME
,W1.FF_IACW_OUT_TIME
,W1.FF_EXTN_IN_TIME
,W1.FF_EXTN_OUT_TIME
,W1.FF_HOLD_TIME
,W1.FF_IACD_AUX_OUT_TIME
,W1.FF_TOTAL_AUX_TIME
,W1.FF_IAUX_OUT_TIME
,W1.FF_AVAIL_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.ACD_CALLS
,W1.EXTN_IN_CALLS
,W1.EXTN_OUT_CALLS
,W1.STAFFED_TIME
,W1.AGENT_RING_TIME
,W1.IACD_TIME
,W1.IACW_TIME
,W1.IACW_OUT_TIME
,W1.EXTN_IN_TIME
,W1.EXTN_OUT_TIME
,W1.HOLD_TIME
,W1.IACD_AUX_OUT_TIME
,W1.TOTAL_AUX_TIME
,W1.IAUX_OUT_TIME
,W1.AVAIL_TIME
,W1.HANDLED_CALLS
,W1.ADJUSTED_ACW_TIME
,W1.AUTHORIZED_ACW_TIME
,W1.ADJUSTED_HOLD_TIME
,W1.ADJUSTED_NOT_READY_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR
,W1.PAY_GROUP

FROM           WSOL_TB_IMPORTS_SABRE_INVOICING_1    W1
WHERE ISNULL(W1.FF_DATETIME,'') IN ('DateTime','')  OR  ISNULL(W1.FF_USERNAME,'') = ''  OR  ISNULL(W1.FF_FULL_NAME,'') = ''

--======================================================================
--DELETE COLUMN HEADER AND JUNK RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1
WHERE ISNULL(FF_DATETIME,'') IN ('DateTime','')  OR  ISNULL(FF_USERNAME,'') = ''  OR  ISNULL(FF_FULL_NAME,'') = ''
--====================================================================

--===============================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_1) TABLE THAT WEREN'T IN IMPORTED FILE:
--===============================================================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 [DATETIME]        = CASE WHEN RIGHT(FF_DATETIME,2) = 'AM' THEN
							CASE WHEN SUBSTRING(FF_DATETIME, CHARINDEX(',',FF_DATETIME) + 2, 8) = '12:00 AM' THEN
									CAST(LEFT(FF_DATETIME, CHARINDEX(',',FF_DATETIME) - 1) + ' 00:00:00' AS DATETIME)
								 ELSE
									CAST(LEFT(FF_DATETIME, CHARINDEX(',',FF_DATETIME) - 1) + ' ' + SUBSTRING(FF_DATETIME, CHARINDEX(',',FF_DATETIME) + 2, 5) + ':00' AS DATETIME)
								 END
						  WHEN RIGHT(FF_DATETIME,2) = 'PM' THEN
							CASE WHEN SUBSTRING(FF_DATETIME, CHARINDEX(',',FF_DATETIME) + 2, 8) = '12:00 PM' THEN
									CAST(LEFT(FF_DATETIME, CHARINDEX(',',FF_DATETIME) - 1) + ' 12:00:00' AS DATETIME)
								 ELSE
									CAST(LEFT(FF_DATETIME, CHARINDEX(',',FF_DATETIME) - 1) + ' ' + CONVERT(VARCHAR(10),CAST((SUBSTRING(FF_DATETIME, CHARINDEX(',',FF_DATETIME) + 2, 2) + 12) AS INT)) + ':00:00' AS DATETIME)
								 END
						  ELSE '' END
,ACD_CALLS         = CAST(ISNULL(FF_ACD_CALLS        ,'0') AS INTEGER)
,EXTN_IN_CALLS     = CAST(ISNULL(FF_EXTN_IN_CALLS    ,'0') AS INTEGER)
,EXTN_OUT_CALLS    = CAST(ISNULL(FF_EXTN_OUT_CALLS   ,'0') AS INTEGER)
,STAFFED_TIME      = CAST(ISNULL(FF_STAFFED_TIME     ,'0.00') AS DECIMAL(10,2))
,AGENT_RING_TIME   = CAST(ISNULL(FF_AGENT_RING_TIME  ,'0.00') AS DECIMAL(10,2))
,IACD_TIME         = CAST(ISNULL(FF_IACD_TIME        ,'0.00') AS DECIMAL(10,2))
,IACW_TIME         = CAST(ISNULL(FF_IACW_TIME        ,'0.00') AS DECIMAL(10,2))
,IACW_OUT_TIME     = CAST(ISNULL(FF_IACW_OUT_TIME    ,'0.00') AS DECIMAL(10,2))
,EXTN_IN_TIME      = CAST(ISNULL(FF_EXTN_IN_TIME     ,'0.00') AS DECIMAL(10,2))
,EXTN_OUT_TIME     = CAST(ISNULL(FF_EXTN_OUT_TIME    ,'0.00') AS DECIMAL(10,2))
,HOLD_TIME         = CAST(ISNULL(FF_HOLD_TIME        ,'0.00') AS DECIMAL(10,2))
,IACD_AUX_OUT_TIME = CAST(ISNULL(FF_IACD_AUX_OUT_TIME,'0.00') AS DECIMAL(10,2))
,TOTAL_AUX_TIME    = CAST(ISNULL(FF_TOTAL_AUX_TIME   ,'0.00') AS DECIMAL(10,2))
,IAUX_OUT_TIME     = CAST(ISNULL(FF_IAUX_OUT_TIME    ,'0.00') AS DECIMAL(10,2))
,AVAIL_TIME        = CAST(ISNULL(FF_AVAIL_TIME       ,'0.00') AS DECIMAL(10,2))
,TENANT_KEY		   = @TENANT_KEY  --NOT REALLY NECESSARY.

--=============================================================================================
--Need when populating tmp DEW table for insert into _AIA table.
--=============================================================================================
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME

SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN([DATETIME]) FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1))  
--=============================================================================================

--=======================================================================================
-- UPDATE DATE_TIME_KEY
--=======================================================================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM            WSOL_TB_IMPORTS_SABRE_INVOICING_1	I
INNER JOIN      DATE_TIME							DT   ON DT.CAL_DATE = I.[DATETIME]

--=====================================================
--CONVERTING FROM MINUTES TO SECONDS
--=====================================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 STAFFED_TIME             = STAFFED_TIME       * 60
,AGENT_RING_TIME          = AGENT_RING_TIME    * 60
,IACD_TIME                = IACD_TIME          * 60
,IACW_TIME                = IACW_TIME          * 60
,IACW_OUT_TIME            = IACW_OUT_TIME      * 60
,EXTN_IN_TIME             = EXTN_IN_TIME       * 60
,EXTN_OUT_TIME            = EXTN_OUT_TIME      * 60
,HOLD_TIME                = HOLD_TIME          * 60
,IACD_AUX_OUT_TIME        = IACD_AUX_OUT_TIME  * 60
,TOTAL_AUX_TIME           = TOTAL_AUX_TIME     * 60
,IAUX_OUT_TIME            = IAUX_OUT_TIME      * 60
,AVAIL_TIME               = AVAIL_TIME         * 60
--=====================================================

--=========================================================================================================================
--POPULATE ENGINEERED DATA FIELDS
--=========================================================================================================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 HANDLED_CALLS           = ACD_CALLS + EXTN_IN_CALLS + EXTN_OUT_CALLS
,ADJUSTED_ACW_TIME       = CASE WHEN IACW_OUT_TIME     > IACW_TIME      THEN 0 ELSE IACW_TIME - IACW_OUT_TIME      END
,ADJUSTED_HOLD_TIME      = CASE WHEN IACD_AUX_OUT_TIME > HOLD_TIME      THEN 0 ELSE HOLD_TIME - IACD_AUX_OUT_TIME  END
,ADJUSTED_NOT_READY_TIME = CASE WHEN IAUX_OUT_TIME     > TOTAL_AUX_TIME THEN 0 ELSE TOTAL_AUX_TIME - IAUX_OUT_TIME END

--===============================================================================================
--CALCULATE AUTHORIZED ACW TIME (LIMITED TO 1 MINUTE PER CALL)
--===============================================================================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 AUTHORIZED_ACW_TIME = CASE WHEN (ACD_CALLS * 60.0) > ADJUSTED_ACW_TIME THEN ADJUSTED_ACW_TIME
							ELSE (ACD_CALLS * 60.0) END

--===========================================================================
--POPULATE TOTAL TALK TIME
--===========================================================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 TOTAL_TALK              = IACD_TIME + EXTN_OUT_TIME + ADJUSTED_HOLD_TIME

--======================================================================
--HANDLE INVALID DATE/TIME RECORDS:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_SABRE_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATETIME
,FF_FULL_NAME
,FF_CLIENT_USER_ID
,FF_USERNAME
,FF_LOGIN_ID
,FF_ACD_CALLS
,FF_EXTN_IN_CALLS
,FF_EXTN_OUT_CALLS
,FF_STAFFED_TIME
,FF_AGENT_RING_TIME
,FF_IACD_TIME
,FF_IACW_TIME
,FF_IACW_OUT_TIME
,FF_EXTN_IN_TIME
,FF_EXTN_OUT_TIME
,FF_HOLD_TIME
,FF_IACD_AUX_OUT_TIME
,FF_TOTAL_AUX_TIME
,FF_IAUX_OUT_TIME
,FF_AVAIL_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,ACD_CALLS
,EXTN_IN_CALLS
,EXTN_OUT_CALLS
,STAFFED_TIME
,AGENT_RING_TIME
,IACD_TIME
,IACW_TIME
,IACW_OUT_TIME
,EXTN_IN_TIME
,EXTN_OUT_TIME
,HOLD_TIME
,IACD_AUX_OUT_TIME
,TOTAL_AUX_TIME
,IAUX_OUT_TIME
,AVAIL_TIME
,HANDLED_CALLS
,ADJUSTED_ACW_TIME
,AUTHORIZED_ACW_TIME
,ADJUSTED_HOLD_TIME
,ADJUSTED_NOT_READY_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,PAY_GROUP)
SELECT
 26                     --BAD_IMPORTS_NO  --'Invalid Date/Time'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATETIME
,W1.FF_FULL_NAME
,W1.FF_CLIENT_USER_ID
,W1.FF_USERNAME
,W1.FF_LOGIN_ID
,W1.FF_ACD_CALLS
,W1.FF_EXTN_IN_CALLS
,W1.FF_EXTN_OUT_CALLS
,W1.FF_STAFFED_TIME
,W1.FF_AGENT_RING_TIME
,W1.FF_IACD_TIME
,W1.FF_IACW_TIME
,W1.FF_IACW_OUT_TIME
,W1.FF_EXTN_IN_TIME
,W1.FF_EXTN_OUT_TIME
,W1.FF_HOLD_TIME
,W1.FF_IACD_AUX_OUT_TIME
,W1.FF_TOTAL_AUX_TIME
,W1.FF_IAUX_OUT_TIME
,W1.FF_AVAIL_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.ACD_CALLS
,W1.EXTN_IN_CALLS
,W1.EXTN_OUT_CALLS
,W1.STAFFED_TIME
,W1.AGENT_RING_TIME
,W1.IACD_TIME
,W1.IACW_TIME
,W1.IACW_OUT_TIME
,W1.EXTN_IN_TIME
,W1.EXTN_OUT_TIME
,W1.HOLD_TIME
,W1.IACD_AUX_OUT_TIME
,W1.TOTAL_AUX_TIME
,W1.IAUX_OUT_TIME
,W1.AVAIL_TIME
,W1.HANDLED_CALLS
,W1.ADJUSTED_ACW_TIME
,W1.AUTHORIZED_ACW_TIME
,W1.ADJUSTED_HOLD_TIME
,W1.ADJUSTED_NOT_READY_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR
,W1.PAY_GROUP
FROM           WSOL_TB_IMPORTS_SABRE_INVOICING_1    W1
WHERE ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================
--DELETE INVALID DATE/TIME RECORDS:
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================


--======================================================================
--HANDLE DUPLICATES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_SABRE_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATETIME
,FF_FULL_NAME
,FF_CLIENT_USER_ID
,FF_USERNAME
,FF_LOGIN_ID
,FF_ACD_CALLS
,FF_EXTN_IN_CALLS
,FF_EXTN_OUT_CALLS
,FF_STAFFED_TIME
,FF_AGENT_RING_TIME
,FF_IACD_TIME
,FF_IACW_TIME
,FF_IACW_OUT_TIME
,FF_EXTN_IN_TIME
,FF_EXTN_OUT_TIME
,FF_HOLD_TIME
,FF_IACD_AUX_OUT_TIME
,FF_TOTAL_AUX_TIME
,FF_IAUX_OUT_TIME
,FF_AVAIL_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,ACD_CALLS
,EXTN_IN_CALLS
,EXTN_OUT_CALLS
,STAFFED_TIME
,AGENT_RING_TIME
,IACD_TIME
,IACW_TIME
,IACW_OUT_TIME
,EXTN_IN_TIME
,EXTN_OUT_TIME
,HOLD_TIME
,IACD_AUX_OUT_TIME
,TOTAL_AUX_TIME
,IAUX_OUT_TIME
,AVAIL_TIME
,HANDLED_CALLS
,ADJUSTED_ACW_TIME
,AUTHORIZED_ACW_TIME
,ADJUSTED_HOLD_TIME
,ADJUSTED_NOT_READY_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,PAY_GROUP)
SELECT
 21                     --BAD_IMPORTS_NO  --'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATETIME
,W1.FF_FULL_NAME
,W1.FF_CLIENT_USER_ID
,W1.FF_USERNAME
,W1.FF_LOGIN_ID
,W1.FF_ACD_CALLS
,W1.FF_EXTN_IN_CALLS
,W1.FF_EXTN_OUT_CALLS
,W1.FF_STAFFED_TIME
,W1.FF_AGENT_RING_TIME
,W1.FF_IACD_TIME
,W1.FF_IACW_TIME
,W1.FF_IACW_OUT_TIME
,W1.FF_EXTN_IN_TIME
,W1.FF_EXTN_OUT_TIME
,W1.FF_HOLD_TIME
,W1.FF_IACD_AUX_OUT_TIME
,W1.FF_TOTAL_AUX_TIME
,W1.FF_IAUX_OUT_TIME
,W1.FF_AVAIL_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.ACD_CALLS
,W1.EXTN_IN_CALLS
,W1.EXTN_OUT_CALLS
,W1.STAFFED_TIME
,W1.AGENT_RING_TIME
,W1.IACD_TIME
,W1.IACW_TIME
,W1.IACW_OUT_TIME
,W1.EXTN_IN_TIME
,W1.EXTN_OUT_TIME
,W1.HOLD_TIME
,W1.IACD_AUX_OUT_TIME
,W1.TOTAL_AUX_TIME
,W1.IAUX_OUT_TIME
,W1.AVAIL_TIME
,W1.HANDLED_CALLS
,W1.ADJUSTED_ACW_TIME
,W1.AUTHORIZED_ACW_TIME
,W1.ADJUSTED_HOLD_TIME
,W1.ADJUSTED_NOT_READY_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR
,W1.PAY_GROUP
FROM
(	SELECT
	 [DATETIME]
	,FF_USERNAME
	,ROW_NUMBER() over (partition by [DATETIME], FF_USERNAME
                            order by [DATETIME], FF_USERNAME, STAFFED_TIME DESC) ROWNO
	FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1
) TNM
LEFT JOIN      WSOL_TB_IMPORTS_SABRE_INVOICING_1    W1   ON W1.[DATETIME]     = TNM.[DATETIME]
														AND W1.FF_USERNAME    = TNM.FF_USERNAME
WHERE TNM.ROWNO > 1
--======================================================================
--DELETE DUPLICATES:
--======================================================================
DELETE FROM TNM  
FROM
(	SELECT
	 [DATETIME]
	,FF_USERNAME
	,ROW_NUMBER() over (partition by [DATETIME], FF_USERNAME
                            order by [DATETIME], FF_USERNAME, STAFFED_TIME DESC) ROWNO
	FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1
) TNM
WHERE TNM.ROWNO > 1
--======================================================================

--===============================================
--POPULATE AIA AGENT MAPPING DATA
--===============================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 EMAIL              = ISNULL(IAM.EMAIL,'')
,SCHEDULER_ACL_NAME = CASE WHEN ISNULL(IAM.FF_RESOURCE,'') = 'Resource'		THEN 'Sabre Resource Agents'
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'VGR Resource'	THEN 'Sabre VGR Agents'
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'VGR Standard'	THEN 'Sabre VGR Standard Agents'
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'Vantage'		THEN 'Sabre Vantage Agents'
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = ''				THEN 'Sabre Standard Agents'					   
						   ELSE '' END	-- BLANK for 'Standard' OR 'Resource' if 'Resource'
,PAY_GROUP		    = ISNULL(IAM.PAY_GROUP,'')
--,RESOURCE_NAME		= ISNULL(IAM.RESOURCE_NAME,'')
--  SELECT * 
FROM            WSOL_TB_IMPORTS_SABRE_INVOICING_1        I
LEFT JOIN       WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING  IAM  ON IAM.INVOICE_MAP_KEY = I.FF_USERNAME

--===============================================
--POPULATE ID EXTENSION
--===============================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 ID_EXT = CASE WHEN SCHEDULER_ACL_NAME  = 'Sabre Resource Agents'		THEN 'SBR'
			   WHEN SCHEDULER_ACL_NAME  = 'Sabre Standard Agents'		THEN 'SBA'
			   WHEN SCHEDULER_ACL_NAME  = 'Sabre VGR Agents'			THEN 'SBV'
			   WHEN SCHEDULER_ACL_NAME  = 'Sabre VGR Standard Agents'	THEN 'SVA'
			   WHEN SCHEDULER_ACL_NAME	= 'Sabre Vantage Agents'		THEN 'SBT'
			   ELSE '' END 

--====================================================================================================================================
--POPULATE CPROD TIME (READY + TALK + ACW)
--====================================================================================================================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 CPROD                   = CASE WHEN ID_EXT IN ('SBA','SVA','SBT') THEN
								   AVAIL_TIME + (AGENT_RING_TIME + IACD_TIME + EXTN_OUT_TIME + ADJUSTED_HOLD_TIME) + AUTHORIZED_ACW_TIME -- AS OF 6/1/15 PER PROGRAM MANAGEMENT
								WHEN ID_EXT IN ('SBR','SBV') THEN
								   AVAIL_TIME + (AGENT_RING_TIME + IACD_TIME + EXTN_OUT_TIME + ADJUSTED_HOLD_TIME) + ADJUSTED_ACW_TIME + ADJUSTED_NOT_READY_TIME -- ADJ NOT READY TIME INCLUDED AS OF 8/1/15 PER PROG MGMT
								ELSE 0.00 END

--  SELECT * FROM WSOL_TB_IMPORTS_SABRE_SD_INVOICE_GROUPS

--===============================================
--POPULATE INVOICE GROUPS DATA
--===============================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 AIR_DAY_TYPE = CASE WHEN IG.HAS_HOLIDAYS = 'Y' AND
						 (    ISNULL(IH.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) OR
						   ( ISNULL(IHA.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) AND ISNULL(IHA.ID_EXT,'') <> '' )
						 )
					  THEN 'H' ELSE 'S' END  --AS AIR_DAY_TYPE  --H=Holiday  --S=Standard
FROM            WSOL_TB_IMPORTS_SABRE_INVOICING_1				I
INNER JOIN      DATE_TIME										DT   ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY
LEFT JOIN       WSOL_TB_IMPORTS_SABRE_SD_INVOICE_GROUPS			IG   ON IG.ID_EXT              = I.ID_EXT
LEFT JOIN       WSOL_TB_IMPORTS_SABRE_SD_INVOICE_HOLIDAYS		IH   ON IH.HOLIDAY_DATE        = CAST(DT.CAL_DATE_STRING AS DATETIME)
LEFT JOIN       WSOL_TB_IMPORTS_SABRE_SD_INVOICE_HOLIDAYS_ADDL	IHA  ON IHA.HOLIDAY_DATE       = CAST(DT.CAL_DATE_STRING AS DATETIME)
															    AND		IHA.ID_EXT             = I.ID_EXT	

--  SELECT * FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1 WHERE AIR_DAY_TYPE = 'H'
--  SELECT * FROM WSOL_TB_IMPORTS_SABRE_INVOICING   WHERE AIR_DAY_TYPE = 'H'
--  SELECT * FROM WSOL_TB_IMPORTS_SABRE_SD_INVOICE_HOLIDAYS

--===============================================
--POPULATE ADDITIONAL INVOICE GROUPS DATA
--===============================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 AIR_ACW_FONT_COLOR             = 'Black'

,MIN_GUARANTEE_RATE             = ISNULL(IG.MIN_GUARANTEE_RATE,0)           --varies between scheduler acl names.
,MIN_GUARANTEE_TYPE             = ISNULL(IG.MIN_GUARANTEE_TYPE,'')          --varies between scheduler acl names.
,AUTHORIZED_TO_INVOICE_TYPE     = ISNULL(IG.AUTHORIZED_TO_INVOICE_TYPE,'')  --varies between scheduler acl names.

,HAS_HOLIDAYS    = IG.HAS_HOLIDAYS
,INCLUDE_IN_CAS  = IG.INCLUDE_IN_CAS
,READY_FOR_XML   = IG.READY_FOR_XML
,SHOW_ID_EXTS    = IG.SHOW_ID_EXTS
,RESOURCE_NAME   = I.FF_FULL_NAME
FROM            WSOL_TB_IMPORTS_SABRE_INVOICING_1        I
LEFT JOIN       WSOL_TB_IMPORTS_SABRE_SD_INVOICE_GROUPS  IG  ON IG.ID_EXT    = I.ID_EXT
												
--  SELECT * FROM WSOL_TB_IMPORTS_SABRE_SD_INVOICE_GROUPS
	
--===============================================
--SET INVOICE ID
--===============================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 INVOICE_ID         = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
FROM            WSOL_TB_IMPORTS_SABRE_INVOICING_1            AIA 
LEFT JOIN       WSOL_TB_IMPORTS_SABRE_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT

--===============================================
--CALCULATE MINIMUM GUARANTEE
--===============================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 MING = CASE WHEN ISNULL(ID_EXT,'') <> '' THEN 
				 CASE WHEN SCHEDULER_ACL_NAME = 'Sabre Resource Agents'		THEN (40.00 / 60.00) * CPROD
					  WHEN SCHEDULER_ACL_NAME = 'Sabre VGR Agents'			THEN (45.00 / 60.00) * CPROD
					  WHEN SCHEDULER_ACL_NAME = 'Sabre VGR Standard Agents'	THEN (39.00 / 60.00) * CPROD
					  WHEN SCHEDULER_ACL_NAME = 'Sabre Standard Agents'		THEN (39.00 / 60.00) * CPROD
					  WHEN SCHEDULER_ACL_NAME = 'Sabre Vantage Agents'		THEN (39.00 / 60.00) * CPROD END
			 ELSE 0.00 END

--===============================================
--CALCULATE AUTHORIZED TO INVOICE VALUE
--===============================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 AUT2 = CASE WHEN ISNULL(ID_EXT,'') <> '' THEN 
				 CASE WHEN MING > (TOTAL_TALK) THEN MING 
					  ELSE        (TOTAL_TALK) END      --TOTAL_TALK = ADJUSTED_HOLD_TIME + EXTN_OUT_TIME + IACD_TIME
			 ELSE 0.00 END

--==========================================================
--UPDATED AUTHORIZED TO INVOICE VALUE FOR RESOURCE LEADERS
--==========================================================
--UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
-- AUT2 = STAFFED_TIME							-- AS OF 6/1/15 PER PROGRAM MANAGEMENT -- DISABLED AS OF 7/1/15 PER PROGRAM MANAGEMENT
--WHERE ID_EXT = 'SBR'

--====================================================	
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--====================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--Check #1:  ===================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1 )
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + '1) File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #2:  ===================================================================================================
--	SET @RCD_CNT  = (	SELECT COUNT(*) FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1  
--						WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--					)  
--	IF @RCD_CNT > 0 BEGIN
--		SET @MSG1 = @MSG1 + '2) Invalid DATETIME Intervals in SABRE INVOICING IMPORT File.  Import was Cancelled.  Nothing was Imported.   |   ' 
--		SET @ERR_CNT = @ERR_CNT + 1
--	END
--Check #3:  ===================================================================================================
--	SET @RCD_CNT  = (	SELECT COUNT(*) FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1  
--						WHERE ISNULL(FF_USERNAME,'') = ''
--					)  
--	IF @RCD_CNT > 0 BEGIN
--		SET @MSG1 = @MSG1 + '3) Blank USERNAME(s) in SABRE INVOICE IMPORT File exists.  Import was Cancelled.  Nothing was Imported.   |   ' 
--		SET @ERR_CNT = @ERR_CNT + 1
--	END
--Check #n:  ===================================================================================================
--	SET @MSG1 = @MSG1 + '2) Something not right with something.  Import was cancelled.  Nothing was Imported.     '
--	--SET @RCD_CNT = (	SELECT COUNT(*)
--	--					FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1
--	--					WHERE 'something' <> 'somethingelse'
--	--				  )  --If nothing imported in work table, don't need to return error.  That check is done in SSIS currently.

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	--SSIS reads YZ_TB_ERRORS_FOUND table where TENANT_KEY = 900704, and if record exists, outputs results/error_msg field in an email.
	INSERT INTO YZ_TB_ERRORS_FOUND
	(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'SABRE_INVOICING'	--SUB_GROUP_NAME
	,@MSG1				--ERROR_MSG
	--====================================
	GOTO EARLY_EXIT
	--====================================
END
ELSE BEGIN
	INSERT INTO YZ_TB_ERRORS_FOUND
		(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'SABRE_INVOICING'	--SUB_GROUP_NAME
	,''					--ERROR_MSG			--Never make this @MSG1 !!!  Must stay as ''.
	--Do NOT want to go to early exit here because data was good, according to 'checks'!  We want to import data into permanent table.
END

--=============================================
--UPDATED PERMANENT TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING SET
 FF_DATETIME				= W1.FF_DATETIME
,FF_FULL_NAME				= W1.FF_FULL_NAME
,FF_CLIENT_USER_ID			= W1.FF_CLIENT_USER_ID
--,FF_USERNAME				= W1.FF_USERNAME
,FF_LOGIN_ID				= W1.FF_LOGIN_ID
,FF_ACD_CALLS				= W1.FF_ACD_CALLS
,FF_EXTN_IN_CALLS			= W1.FF_EXTN_IN_CALLS
,FF_EXTN_OUT_CALLS			= W1.FF_EXTN_OUT_CALLS
,FF_STAFFED_TIME			= W1.FF_STAFFED_TIME
,FF_AGENT_RING_TIME			= W1.FF_AGENT_RING_TIME
,FF_IACD_TIME				= W1.FF_IACD_TIME
,FF_IACW_TIME				= W1.FF_IACW_TIME
,FF_IACW_OUT_TIME			= W1.FF_IACW_OUT_TIME
,FF_EXTN_IN_TIME			= W1.FF_EXTN_IN_TIME
,FF_EXTN_OUT_TIME			= W1.FF_EXTN_OUT_TIME
,FF_HOLD_TIME				= W1.FF_HOLD_TIME
,FF_IACD_AUX_OUT_TIME		= W1.FF_IACD_AUX_OUT_TIME
,FF_TOTAL_AUX_TIME			= W1.FF_TOTAL_AUX_TIME
,FF_IAUX_OUT_TIME			= W1.FF_IAUX_OUT_TIME
,FF_AVAIL_TIME				= W1.FF_AVAIL_TIME

,SEQNO_ADDED_TIME			= W1.SEQNO_ADDED_TIME
,SEQNO						= W1.SEQNO
,FTP_FILE_NAME				= W1.FTP_FILE_NAME

,[DATETIME]					= W1.[DATETIME]
,ACD_CALLS					= W1.ACD_CALLS
,EXTN_IN_CALLS				= W1.EXTN_IN_CALLS
,EXTN_OUT_CALLS				= W1.EXTN_OUT_CALLS
,STAFFED_TIME				= W1.STAFFED_TIME
,AGENT_RING_TIME			= W1.AGENT_RING_TIME
,IACD_TIME					= W1.IACD_TIME
,IACW_TIME					= W1.IACW_TIME
,IACW_OUT_TIME				= W1.IACW_OUT_TIME
,EXTN_IN_TIME				= W1.EXTN_IN_TIME
,EXTN_OUT_TIME				= W1.EXTN_OUT_TIME
,HOLD_TIME					= W1.HOLD_TIME
,IACD_AUX_OUT_TIME			= W1.IACD_AUX_OUT_TIME
,TOTAL_AUX_TIME				= W1.TOTAL_AUX_TIME
,IAUX_OUT_TIME				= W1.IAUX_OUT_TIME
,AVAIL_TIME					= W1.AVAIL_TIME
,HANDLED_CALLS				= W1.HANDLED_CALLS
,ADJUSTED_ACW_TIME			= W1.ADJUSTED_ACW_TIME
,AUTHORIZED_ACW_TIME		= W1.AUTHORIZED_ACW_TIME
,ADJUSTED_HOLD_TIME			= W1.ADJUSTED_HOLD_TIME
,ADJUSTED_NOT_READY_TIME	= W1.ADJUSTED_NOT_READY_TIME
,TOTAL_TALK					= W1.TOTAL_TALK
,CPROD						= W1.CPROD
,MING						= W1.MING
,AUT2						= W1.AUT2
,EMAIL						= W1.EMAIL
,ID_EXT						= W1.ID_EXT
,SCHEDULER_ACL_NAME			= W1.SCHEDULER_ACL_NAME
,PAY_GROUP					= W1.PAY_GROUP
--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE					= W1.CAL_DATE
,TENANT_KEY					= W1.TENANT_KEY
,AIR_DAY_TYPE				= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR			= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE			= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE			= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE	= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS				= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS				= W1.INCLUDE_IN_CAS
,READY_FOR_XML				= W1.READY_FOR_XML
,SHOW_ID_EXTS				= W1.SHOW_ID_EXTS
,INVOICE_ID					= W1.INVOICE_ID
,RESOURCE_NAME				= W1.RESOURCE_NAME
,AIRITKDUR					= W1.AIRITKDUR
,AIRIACDUR					= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME		= NULL
,WS_ROW_UPDATED_TIME		= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_SABRE_INVOICING_1  W1
INNER JOIN      WSOL_TB_IMPORTS_SABRE_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													  AND G.FF_USERNAME                    = W1.FF_USERNAME
----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_USERNAME                    = W1.FF_USERNAME

--=============================================
--INSERT INTO PERMANENT IMPORT TABLE: 
--=============================================
INSERT INTO WSOL_TB_IMPORTS_SABRE_INVOICING
(FF_DATETIME
,FF_FULL_NAME
,FF_CLIENT_USER_ID
,FF_USERNAME
,FF_LOGIN_ID
,FF_ACD_CALLS
,FF_EXTN_IN_CALLS
,FF_EXTN_OUT_CALLS
,FF_STAFFED_TIME
,FF_AGENT_RING_TIME
,FF_IACD_TIME
,FF_IACW_TIME
,FF_IACW_OUT_TIME
,FF_EXTN_IN_TIME
,FF_EXTN_OUT_TIME
,FF_HOLD_TIME
,FF_IACD_AUX_OUT_TIME
,FF_TOTAL_AUX_TIME
,FF_IAUX_OUT_TIME
,FF_AVAIL_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,ACD_CALLS
,EXTN_IN_CALLS
,EXTN_OUT_CALLS
,STAFFED_TIME
,AGENT_RING_TIME
,IACD_TIME
,IACW_TIME
,IACW_OUT_TIME
,EXTN_IN_TIME
,EXTN_OUT_TIME
,HOLD_TIME
,IACD_AUX_OUT_TIME
,TOTAL_AUX_TIME
,IAUX_OUT_TIME
,AVAIL_TIME
,HANDLED_CALLS
,ADJUSTED_ACW_TIME
,AUTHORIZED_ACW_TIME
,ADJUSTED_HOLD_TIME
,ADJUSTED_NOT_READY_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,PAY_GROUP
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W1.FF_DATETIME
,W1.FF_FULL_NAME
,W1.FF_CLIENT_USER_ID
,W1.FF_USERNAME
,W1.FF_LOGIN_ID
,W1.FF_ACD_CALLS
,W1.FF_EXTN_IN_CALLS
,W1.FF_EXTN_OUT_CALLS
,W1.FF_STAFFED_TIME
,W1.FF_AGENT_RING_TIME
,W1.FF_IACD_TIME
,W1.FF_IACW_TIME
,W1.FF_IACW_OUT_TIME
,W1.FF_EXTN_IN_TIME
,W1.FF_EXTN_OUT_TIME
,W1.FF_HOLD_TIME
,W1.FF_IACD_AUX_OUT_TIME
,W1.FF_TOTAL_AUX_TIME
,W1.FF_IAUX_OUT_TIME
,W1.FF_AVAIL_TIME

,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME

,W1.DATETIME
,W1.ACD_CALLS
,W1.EXTN_IN_CALLS
,W1.EXTN_OUT_CALLS
,W1.STAFFED_TIME
,W1.AGENT_RING_TIME
,W1.IACD_TIME
,W1.IACW_TIME
,W1.IACW_OUT_TIME
,W1.EXTN_IN_TIME
,W1.EXTN_OUT_TIME
,W1.HOLD_TIME
,W1.IACD_AUX_OUT_TIME
,W1.TOTAL_AUX_TIME
,W1.IAUX_OUT_TIME
,W1.AVAIL_TIME
,W1.HANDLED_CALLS
,W1.ADJUSTED_ACW_TIME
,W1.AUTHORIZED_ACW_TIME
,W1.ADJUSTED_HOLD_TIME
,W1.ADJUSTED_NOT_READY_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.PAY_GROUP
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_SABRE_INVOICING_1  W1

LEFT JOIN       WSOL_TB_IMPORTS_SABRE_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													  AND G.FF_USERNAME                    = W1.FF_USERNAME

WHERE (G.FF_USERNAME					IS NULL AND ISNULL(W1.FF_USERNAME,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )


--==================================
SET DATEFIRST 1  -- = Monday
--==================================

--===========================
IF OBJECT_ID('TEMPDB..#DT_EASY_WEEKS') IS NOT NULL BEGIN
   DROP TABLE #DT_EASY_WEEKS
END
CREATE TABLE #DT_EASY_WEEKS
(CAL_DATE_STRING      VARCHAR(10)
,CAL_WEEK_START_DATE  DATETIME
,CAL_WEEK_END_DATE    DATETIME
,PAY_CYCLE_CLOSURE_DATE DATETIME
)
INSERT INTO #DT_EASY_WEEKS
SELECT
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
FROM DATE_TIME DT
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
--WHERE DT.CAL_DATE >= CAST('06/01/2011' AS DATETIME) AND DT.CAL_DATE <  CAST('06/20/2011' AS DATETIME)
GROUP BY 
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
--===========================
UPDATE #DT_EASY_WEEKS SET CAL_WEEK_END_DATE = DATEADD(DD,6,CAL_WEEK_START_DATE)
--110713: WAS: 06/26/2011
UPDATE #DT_EASY_WEEKS SET
 PAY_CYCLE_CLOSURE_DATE = (CASE WHEN (DATEDIFF(DD,CAST('09/29/2013' AS DATETIME),CAL_WEEK_END_DATE) % 14) = 0 THEN
									CAL_WEEK_END_DATE
								ELSE
									DATEADD(DD,7,CAL_WEEK_END_DATE)
								END)
--SELECT * FROM #DT_EASY_WEEKS ORDER BY CAL_DATE_STRING

--==================================--Currently same structure as:  [YZ_TB_AGENT_INVOICE_AUTOMATION]
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA
END
CREATE TABLE #WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA   --Currently same structure as:  [YZ_TB_AGENT_INVOICE_AUTOMATION]
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](50) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[PAY_GROUP] [int] NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.FF_USERNAME  --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING            --[DATE]             
,DT.LABEL_HH24 + ':00'         --HOD_INTERVAL

,AIA.STAFFED_TIME              --AU_DK_LOGGED_IN_DURATION
,AIA.AVAIL_TIME                --AU_DK_AVAILABLE_DURATION

,AIA.AGENT_RING_TIME + AIA.TOTAL_TALK	--AIA.IACD_TIME + AIA.EXTN_OUT_TIME + AIA.ADJUSTED_HOLD_TIME    --AU_DK_TALK_DURATION
,AIA.IACD_TIME                 --AU_DK_IB_TALK_DURATION
,AIA.EXTN_OUT_TIME             --AU_DK_OB_TALK_DURATION

,CASE WHEN AIA.ID_EXT IN ('SBR','SBV')			THEN AIA.ADJUSTED_ACW_TIME + AIA.ADJUSTED_NOT_READY_TIME 
	  WHEN AIA.ID_EXT IN ('SBA','SVA','SBT')	THEN AIA.AUTHORIZED_ACW_TIME
	  ELSE 0.00 END         --AU_DK_CONVENTIONAL_ACW
,AIA.TOTAL_AUX_TIME            --AU_DK_NR_DURATION
,0                             --AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.ADJUSTED_NOT_READY_TIME   --AU_DK_ADJUSTED_NR_DURATION
,AIA.CPROD                     --AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.CPROD                     --AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS  

,0  --AU_DK_XFER_COUNT
,0  --AU_DK_HOLD_COUNT
,0  --AU_DK_CONFERENCE_COUNT
,0  --AU_DK_CONSULT_COUNT
,0  --AU_DK_PUP_COUNT

,AIA.HANDLED_CALLS             --AU_DK_OFFERED_COUNT
,AIA.HANDLED_CALLS             --AU_DK_HANDLED_COUNT        --DISCREPANCY:  P.H. SAYS HANDLED = ACD_CALLS + EXTN_IN_CALLS + EXTN_OUT_CALLS, 
,0							   --AIA.ACD_CALLS				   --+ AIA.EXTN_IN_CALLS   --AU_DK_IB_HANDLE_COUNT
,0							   --AIA.EXTN_IN_CALLS             --AU_DK_OB_HANDLE_COUNT                       YET SAYS AU_DK_OB_HANDLE_COUNT IS SUPPOSE TO BE EXTN_IN_CALLS?  
																		 --IF SO, THEN AU_DK_IB_HANDLE_COUNT SHOULD INCLUDE EXTN_IN_CALLS ???
,0   --AU_DK_RONA_COUNT
,0   --AU_DK_AWR_COUNT

,AIA.MING  --MINIMUM_GUARANTEE
,AIA.AUT2  --AUTHORIZED_TO_INVOICE

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID  --CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID 
,AIA.RESOURCE_NAME
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.PAY_GROUP
,dbo.getdate()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL       --	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
FROM            WSOL_TB_IMPORTS_SABRE_INVOICING_1            AIA 
--Only want to include valid id exts in _AIA table -- id exts that have ming and aut2 formulas and static defaults setup...:
INNER JOIN      WSOL_TB_IMPORTS_SABRE_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      WSOL_TB_IMPORTS_SABRE_SD_INVOICE_GROUPS      CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME									 DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS								 DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')
  AND (ISNULL(AIA.PAY_GROUP,'') = 0)

--=====================================
--UPDATE WSOL_TB_...UV_ANT_AIA TABLE:
--=====================================  --  SELECT TOP 100 * FROM WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA
UPDATE WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA SET
 [PLATFORM]                   = W1.[PLATFORM]
,[STATUS]                     = W1.[STATUS]
--,INVOICE_MAP_KEY              = W1.INVOICE_MAP_KEY
,FIELD_NAME                   = W1.FIELD_NAME
,SCHEDULER_PROJECT_ID         = W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME           = W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION             = W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID      = W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME    = W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID       = W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME     = W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID        = W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID = W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID       = W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY        = W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID            = W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID           = W1.HOLIDAY_INVOICE_ID
,HOLIDAY                      = W1.HOLIDAY
,FILE_FORMAT_OF_PUSH          = W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID = W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL                      = W1.NEW_ACL
,CURRENT_CATS                 = W1.CURRENT_CATS
,CATS_ID                      = W1.CATS_ID
,PATS_ID                      = W1.PATS_ID
,SMART_ELIGIBLE               = W1.SMART_ELIGIBLE
,SMART_TIER_1                 = W1.SMART_TIER_1
,SMART_TIER_2                 = W1.SMART_TIER_2
,SMART_TIER_3                 = W1.SMART_TIER_3
,INTERVAL                     = W1.INTERVAL
,[DATE]                       = W1.[DATE]
,HOD_INTERVAL                 = W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION     = W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION     = W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION          = W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION       = W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION       = W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW       = W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION            = W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT             = W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT             = W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT       = W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT          = W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT              = W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT          = W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT          = W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT        = W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT        = W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT             = W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT              = W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE            = W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE        = W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE             = W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE       = W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
,FTP_FILE_NAME = W1.FTP_FILE_NAME
,EMAIL         = W1.EMAIL

--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE                     = W1.CAL_DATE
,TENANT_KEY                   = W1.TENANT_KEY
,AIR_DAY_TYPE                 = W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR           = W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE           = W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE           = W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE   = W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS                 = W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS               = W1.INCLUDE_IN_CAS
,READY_FOR_XML                = W1.READY_FOR_XML
,SHOW_ID_EXTS                 = W1.SHOW_ID_EXTS
,INVOICE_ID                   = W1.INVOICE_ID
,RESOURCE_NAME                = W1.RESOURCE_NAME

,PAY_GROUP					  = W1.PAY_GROUP
,AIRITKDUR                    = W1.AIRITKDUR
,AIRIACDUR                    = W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME          = @WS_ROW_CREATED_TIME

FROM            #WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA   W1

INNER JOIN      WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													   AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
													   AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )

--================================================
--INSERT TMP TABLE FIELDS INTO WSOL_TB_... TABLE:
--================================================
INSERT INTO [WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.PAY_GROUP
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA   AIA
LEFT JOIN       WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
													   AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
													   AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )


--==========================================================================================================================
--INSERT DATA INTO GLOBAL WORK TABLE FOR WA/SA
--==========================================================================================================================
--SELECT * FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_SABRE_WORK_HOURS_ALL') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_SABRE_WORK_HOURS_ALL
END
CREATE TABLE #WSOL_TB_IMPORTS_SABRE_WORK_HOURS_ALL
(	[TENANT_NAME] [varchar] (100) NOT NULL,
	[OFFICIAL_ACL_NAME] [varchar] (200) NOT NULL,
	[AGENT_NAME] [varchar] (200) NULL,
	[FIELD_MAP_ID] [varchar] (100) NOT NULL,
	[EMAIL] [varchar] (100) NULL,
	[LOGGED_IN_HOURS] [decimal] (10,2) NULL,
	[PRODUCTIVE_HOURS] [decimal] (10,2) NULL,
	[DATETIME] [datetime] NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[FTP_FILE_NAME] [varchar] (100) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL
)

INSERT INTO #WSOL_TB_IMPORTS_SABRE_WORK_HOURS_ALL
SELECT
 'SABRE'
,WT.OFFICIAL_ACL_NAME
,WT.AGENT_NAME
,WT.FIELD_MAP_ID
,WT.EMAIL
,WT.LOGGED_IN_HOURS
,WT.PRODUCTIVE_HOURS
,WT.DATETIME
,WT.STD_TENANT_START_DATE_TIME_KEY
,WT.FTP_FILE_NAME
,WT.WS_ROW_CREATED_TIME
FROM
(	SELECT
	 --TENANT_NAME
	 CASE WHEN W1.SCHEDULER_ACL_NAME = 'Sabre VGR Agents' THEN
			'Sabre Resource Agents'
		  ELSE W1.SCHEDULER_ACL_NAME END						AS OFFICIAL_ACL_NAME
	,W1.RESOURCE_NAME											AS AGENT_NAME
	,W1.FF_USERNAME												AS FIELD_MAP_ID
	,W1.EMAIL													AS [EMAIL]
	,(SUM(W1.STAFFED_TIME)/3600.00)								AS LOGGED_IN_HOURS
	,(SUM(W1.CPROD)/3600.00)										AS PRODUCTIVE_HOURS
	,CAST(CONVERT(VARCHAR(10), W1.[DATETIME], 111) AS DATETIME)	AS [DATETIME]
	,DT.DATE_TIME_DAY_KEY										AS STD_TENANT_START_DATE_TIME_KEY
	,W1.FTP_FILE_NAME											AS FTP_FILE_NAME
	,dbo.getdate()													AS WS_ROW_CREATED_TIME
	
	FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1	W1
	INNER JOIN DATE_TIME					DT		ON DT.DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY

	GROUP BY
	 CASE WHEN W1.SCHEDULER_ACL_NAME = 'Sabre VGR Agents' THEN
			'Sabre Resource Agents'
		  ELSE W1.SCHEDULER_ACL_NAME END
	,W1.RESOURCE_NAME
	,W1.FF_USERNAME
	,W1.EMAIL
	,CAST(CONVERT(VARCHAR(10), W1.[DATETIME], 111) AS DATETIME)
	,DT.DATE_TIME_DAY_KEY
	,W1.FTP_FILE_NAME
) WT

UPDATE WSOL_TB_IMPORTS_WORK_HOURS_ALL SET
 TENANT_NAME					= WTT.TENANT_NAME
--,OFFICIAL_ACL_NAME			= WTT.OFFICIAL_ACL_NAME
,AGENT_NAME						= WTT.AGENT_NAME
--,FIELD_MAP_ID					= WTT.FIELD_MAP_ID
,[EMAIL]						= WTT.EMAIL
,LOGGED_IN_HOURS				= WTT.LOGGED_IN_HOURS
,PRODUCTIVE_HOURS				= WTT.PRODUCTIVE_HOURS
,[DATETIME]						= WTT.DATETIME
--,STD_TENANT_START_DATE_TIME_KEY	= WTT.STD_TENANT_START_DATE_TIME_KEY
,FTP_FILE_NAME					= WTT.FTP_FILE_NAME
--,WS_ROW_CREATED_TIME			= dbo.getdate()
,WS_ROW_UPDATED_TIME			= dbo.getdate()

FROM #WSOL_TB_IMPORTS_SABRE_WORK_HOURS_ALL WTT

INNER JOIN WSOL_TB_IMPORTS_WORK_HOURS_ALL WHR ON WHR.STD_TENANT_START_DATE_TIME_KEY = WTT.STD_TENANT_START_DATE_TIME_KEY
											 AND WHR.FIELD_MAP_ID					= WTT.FIELD_MAP_ID
											 AND WHR.OFFICIAL_ACL_NAME				= WTT.OFFICIAL_ACL_NAME

WHERE WHR.STD_TENANT_START_DATE_TIME_KEY	= WTT.STD_TENANT_START_DATE_TIME_KEY
  AND WHR.FIELD_MAP_ID						= WTT.FIELD_MAP_ID
  AND WHR.OFFICIAL_ACL_NAME					= WTT.OFFICIAL_ACL_NAME

INSERT INTO WSOL_TB_IMPORTS_WORK_HOURS_ALL
SELECT
 WTI.TENANT_NAME
,WTI.OFFICIAL_ACL_NAME
,WTI.AGENT_NAME
,WTI.FIELD_MAP_ID
,WTI.EMAIL
,WTI.LOGGED_IN_HOURS
,WTI.PRODUCTIVE_HOURS
,WTI.DATETIME
,WTI.STD_TENANT_START_DATE_TIME_KEY
,WTI.FTP_FILE_NAME
,WTI.WS_ROW_CREATED_TIME
,NULL
FROM #WSOL_TB_IMPORTS_SABRE_WORK_HOURS_ALL	WTI

LEFT JOIN WSOL_TB_IMPORTS_WORK_HOURS_ALL	WRK  ON WRK.STD_TENANT_START_DATE_TIME_KEY	= WTI.STD_TENANT_START_DATE_TIME_KEY
												AND WRK.FIELD_MAP_ID					= WTI.FIELD_MAP_ID
												AND WRK.OFFICIAL_ACL_NAME				= WTI.OFFICIAL_ACL_NAME

WHERE ( WRK.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(WTI.STD_TENANT_START_DATE_TIME_KEY,0 ) <> 0 )
  AND ( WRK.FIELD_MAP_ID					IS NULL AND ISNULL(WTI.FIELD_MAP_ID,'') <> '' )
  AND ( WRK.OFFICIAL_ACL_NAME				IS NULL AND ISNULL(WTI.OFFICIAL_ACL_NAME,'') <> '' )

--=============================================
EARLY_EXIT:
--=============================================