CREATE PROCEDURE [dbo].[uspIMPORTS_DATALOT_INVOICING_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_DATALOT_INVOICING_IMPORT]

--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1 ORDER BY [DATETIME] DESC

--Durations in file are in minutes.  Must convert to seconds.  Store as seconds. !!!
--  This is anything but 'standard', but it doesn't matter if they don't follow them !!!


--=============================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY =       900700  --DATALOT
--=============================================
DELETE FROM YZ_TB_ERRORS_FOUND 
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = 'DATALOT_INVOICING'    --  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900700
--=============================================

--===================================================================================
--USING @WS_ROW_CREATED_TIME FOR ALL INSERTS WILL ALLOW ME TO DELETE SPECIFIC INSERT PROCESSES/FILES.  MOST IMPORTANT!!!  FOR ALL TABLES.
--  IN CASE OF EMERGENCY, CRACK GLASS.
--===================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.getdate()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===================================================================================

--DELETE FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1 
--WHERE ISNULL(FF_USERNAME,'') IN ('username','')  OR  ISNULL(FF_AGENT_ID,'') = ''  OR  ISNULL(FF_HOUR,'') = ''
--======================================================================
--HANDLE COLUMN HEADER AND JUNK RECORDS:
--======================================================================
INSERT INTO YZ_TB_IMPORTS_DATALOT_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_USERNAME
,FF_AGENT_ID
,FF_DAY
,FF_DATE
,FF_HOUR
,FF_ONLINE_MINS
,FF_CONNECTED_MINS
,FF_WRAP_MINS
,FF_WAITING_MINS
,FF_SUCCESSFUL_XFERS
,FF_INBOUNDS
,FF_OUTBOUNDS
,FF_WRAP_ADJUSTMENT
,FF_TOTAL_XFERS
,FF_3_MIN_XFERS
,FF_3_MIN_RETAIL_XFERS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,INBOUND_CALLS
,OUTBOUND_CALLS
,TOTAL_CALLS
,SUCCESSFUL_TRANSFERS
,ONLINE_TIME
,CONNECTED_TIME
,WRAP_TIME
,WAITING_TIME
,WRAP_ADJ_TIME
,WRAP_ALLOWED
,AUTHORIZED_WRAP
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES
,BILLABLE_TALK
,BILLABLE_WRAP
,AUTHORIZED_TRANSFERS
,TOTAL_TRANSFERS
,THREE_MIN_TRANSFERS
,THREE_MIN_RETAIL_TRANSFERS
,BASE_3_MINUTE_TRANSFER
,[3_MINUTE_TRANSFER_BONUS]
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,PAY_GROUP
,ASA_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,WRAP_MINUTE_RATE
,BASE_3_MINUTE_XFER_RATE
,[3_MINUTE_XFER_BONUS_RATE]
,ELIGIBLE_FOR_XFER_BONUS
,AUTHORIZED_TO_INVOICE_TYPE
,TOTAL_AUTHORIZED_PAY
,TOTAL_AUTHORIZED_XFER_PAY
,HAS_HOLIDAYS
,PAY_RATE_STANDARD
,PAY_RATE_HOLIDAY
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,XFER_ID_EXT
)
SELECT
 24                     --BAD_IMPORTS_NO  --'Junk Record'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE.
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_USERNAME
,W1.FF_AGENT_ID
,W1.FF_DAY
,W1.FF_DATE
,W1.FF_HOUR
,W1.FF_ONLINE_MINS
,W1.FF_CONNECTED_MINS
,W1.FF_WRAP_MINS
,W1.FF_WAITING_MINS
,W1.FF_SUCCESSFUL_XFERS
,W1.FF_INBOUNDS
,W1.FF_OUTBOUNDS
,W1.FF_WRAP_ADJUSTMENT
,W1.FF_TOTAL_XFERS
,W1.FF_3_MIN_XFERS
,W1.FF_3_MIN_RETAIL_XFERS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.INBOUND_CALLS
,W1.OUTBOUND_CALLS
,W1.TOTAL_CALLS
,W1.SUCCESSFUL_TRANSFERS
,W1.ONLINE_TIME
,W1.CONNECTED_TIME
,W1.WRAP_TIME
,W1.WAITING_TIME
,W1.WRAP_ADJ_TIME
,W1.WRAP_ALLOWED
,W1.AUTHORIZED_WRAP
,W1.CPROD
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_MINUTES
,W1.BILLABLE_TALK
,W1.BILLABLE_WRAP
,W1.AUTHORIZED_TRANSFERS
,W1.TOTAL_TRANSFERS
,W1.THREE_MIN_TRANSFERS
,W1.THREE_MIN_RETAIL_TRANSFERS
,W1.BASE_3_MINUTE_TRANSFER
,W1.[3_MINUTE_TRANSFER_BONUS]
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.PAY_GROUP
,W1.ASA_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.WRAP_MINUTE_RATE
,W1.BASE_3_MINUTE_XFER_RATE
,W1.[3_MINUTE_XFER_BONUS_RATE]
,W1.ELIGIBLE_FOR_XFER_BONUS
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.TOTAL_AUTHORIZED_PAY
,W1.TOTAL_AUTHORIZED_XFER_PAY
,W1.HAS_HOLIDAYS
,W1.PAY_RATE_STANDARD
,W1.PAY_RATE_HOLIDAY
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.XFER_ID_EXT

FROM           YZ_TB_IMPORTS_DATALOT_INVOICING_1    W1
WHERE ISNULL(W1.FF_USERNAME,'') IN ('username','')  OR  ISNULL(W1.FF_AGENT_ID,'') = ''  OR  ISNULL(W1.FF_HOUR,'') = ''

--GOOD LUCK EVER PULLING OUT THE CORRECT DATA FROM THE _BAD TABLE TO REIMPORT INTO THE _INVOICING TABLE !!!
--======================================================================
--DELETE COLUMN HEADER AND JUNK RECORDS;
--======================================================================
DELETE FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1
WHERE ISNULL(FF_USERNAME,'') IN ('username','')  OR  ISNULL(FF_AGENT_ID,'') = ''  OR  ISNULL(FF_HOUR,'') = ''
--======================================================================

--TIMEZONE IS IN: ????????

--!!!********************************
--   FF_DATETIME IS TIME OF ACTIVITY WHEN ON THE EAST COAST.  BUT "TIME OF ACTIVITY" SHOULD BE IN CENTRAL TIMEZONE FOR US IN CENTRAL TIMEZONE!!!
--     US/WE IN CENTRAL TIMEZONE CAN'T RUN A REPORT FOR 3PM, WHEN IT IS ONLY 2PM CST TO US/WE (IN CENTRAL TIMEZONE) !!! WE DON'T RUN FUTURE TIME REPORTS.
--!!!********************************
--=============================================
--POPULATE ADDITIONAL FIELDS IN WORK (_1) TABLE THAT WEREN'T IN IMPORTED FILE:
--=============================================
UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
 HOUR_INTERVAL     = CASE WHEN CHARINDEX('12p' ,FF_HOUR) = 1 THEN LEFT(FF_HOUR, 2)
						  WHEN CHARINDEX('12a' ,FF_HOUR) = 1 THEN 0
						  WHEN CHARINDEX('p'   ,FF_HOUR) = 2 THEN LEFT(FF_HOUR, 1) + 12
						  WHEN CHARINDEX('p'   ,FF_HOUR) = 3 THEN LEFT(FF_HOUR, 2) + 12
						  WHEN CHARINDEX('a'   ,FF_HOUR) = 2 THEN LEFT(FF_HOUR, 1)
						  WHEN CHARINDEX('a'   ,FF_HOUR) = 3 THEN LEFT(FF_HOUR, 2)
					      ELSE 35 END														-- VALUE WILL CAUSE ERROR SO WE CAN CATCH INVALID HOUR INTERVALS
,INBOUND_CALLS				= CAST(ISNULL(FF_INBOUNDS         ,'0') AS INTEGER)
,OUTBOUND_CALLS				= CAST(ISNULL(FF_OUTBOUNDS        ,'0') AS INTEGER)
,SUCCESSFUL_TRANSFERS		= CAST(ISNULL(FF_SUCCESSFUL_XFERS ,'0') AS INTEGER)
,ONLINE_TIME				= CAST(ISNULL(FF_ONLINE_MINS      ,'0.00') AS DECIMAL(10,2))
,CONNECTED_TIME				= CAST(ISNULL(FF_CONNECTED_MINS   ,'0.00') AS DECIMAL(10,2))
,WRAP_TIME					= CAST(ISNULL(FF_WRAP_MINS        ,'0.00') AS DECIMAL(10,2))
,WAITING_TIME				= CAST(ISNULL(FF_WAITING_MINS     ,'0.00') AS DECIMAL(10,2))
,WRAP_ADJ_TIME				= CAST(ISNULL(FF_WRAP_ADJUSTMENT  ,'0.00') AS DECIMAL(10,2))
,TOTAL_TRANSFERS			= CAST(ISNULL(FF_TOTAL_XFERS		,'0') AS INTEGER)
,THREE_MIN_TRANSFERS		= CAST(ISNULL(FF_3_MIN_XFERS		,'0') AS INTEGER)
,THREE_MIN_RETAIL_TRANSFERS	= CAST(ISNULL(FF_3_MIN_RETAIL_XFERS	,'0') AS INTEGER)
,TENANT_KEY					= @TENANT_KEY  --NOT REALLY NECESSARY.
,XFER_ID_EXT				= 'DLX'


--===============================================
-- CHANGE NEGATIVE ONLINE MIN VALUES TO ZERO
--===============================================
UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
 ONLINE_TIME = 0
FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1
WHERE ONLINE_TIME < 0

--===============================================
-- UPDATE DATETIME
--===============================================
UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
[DATETIME]			  = CAST(RTRIM(ISNULL(FF_DATE,'01/01/1900')) + ' ' + CAST(HOUR_INTERVAL AS VARCHAR) + ':00:00' AS DATETIME)

--======================================================================
--Need when populating tmp DEW table for insert into _AIA table.
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME

SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN([DATETIME]) FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX([DATETIME]) FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1))  
--======================================================================

--======================================================================
UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM            YZ_TB_IMPORTS_DATALOT_INVOICING_1      I
INNER JOIN      DATE_TIME                          DT   ON DT.CAL_DATE = I.[DATETIME]

--===============================================
-- GENERATE ANY ENGINEERED VALUES
--===============================================
-- SELECT * FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1
UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
 TOTAL_CALLS = INBOUND_CALLS + OUTBOUND_CALLS

--===============================================
-- CALCULATE PAYMENT VALUES
--===============================================
--UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
-- WRAP_ALLOWED = (TOTAL_CALLS * 5.0) / 60.0			-- 5 SECONDS OF WRAP ALLOWED PER CALL CONVERTED TO MINUTES

--UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
-- AUTHORIZED_WRAP = CASE WHEN WRAP_ALLOWED > WRAP_TIME THEN
--						  WRAP_TIME
--						ELSE
--						  WRAP_ALLOWED
--						END

--UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
-- CPROD = CONNECTED_TIME + WAITING_TIME + AUTHORIZED_WRAP
			  
--UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
-- MINIMUM_GUARANTEE = CPROD * (37.0 / 60.0)		-- 37 MINIMUM GUARANTEE

--UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
-- AUTHORIZED_MINUTES   = CASE WHEN MINIMUM_GUARANTEE > (CONNECTED_TIME + AUTHORIZED_WRAP) THEN	-- INCLUDED AUTHORIZED_WRAP AS OF 12/16/15 PER KRISTIE LUOMA
--							   MINIMUM_GUARANTEE
--							 ELSE
--							   CONNECTED_TIME + AUTHORIZED_WRAP									-- INCLUDED AUTHORIZED_WRAP AS OF 12/16/15 PER KRISTIE LUOMA
--							 END
--,AUTHORIZED_TRANSFERS = SUCCESSFUL_TRANSFERS
--,AUTHORIZED_TRANSFERS = THREE_MIN_TRANSFERS

--======================================================================
--HANDLE INVALID DATE/TIME RECORDS:  ( [DATETIME] is joined with DATE_TIME table by cal_date.  If [DATETIME] is not an exact 15 minute interval, issue.)
--======================================================================
INSERT INTO YZ_TB_IMPORTS_DATALOT_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_USERNAME
,FF_AGENT_ID
,FF_DAY
,FF_DATE
,FF_HOUR
,FF_ONLINE_MINS
,FF_CONNECTED_MINS
,FF_WRAP_MINS
,FF_WAITING_MINS
,FF_SUCCESSFUL_XFERS
,FF_INBOUNDS
,FF_OUTBOUNDS
,FF_WRAP_ADJUSTMENT
,FF_TOTAL_XFERS
,FF_3_MIN_XFERS
,FF_3_MIN_RETAIL_XFERS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,INBOUND_CALLS
,OUTBOUND_CALLS
,TOTAL_CALLS
,SUCCESSFUL_TRANSFERS
,ONLINE_TIME
,CONNECTED_TIME
,WRAP_TIME
,WAITING_TIME
,WRAP_ADJ_TIME
,WRAP_ALLOWED
,AUTHORIZED_WRAP
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES
,BILLABLE_TALK
,BILLABLE_WRAP
,AUTHORIZED_TRANSFERS
,TOTAL_TRANSFERS
,THREE_MIN_TRANSFERS
,THREE_MIN_RETAIL_TRANSFERS
,BASE_3_MINUTE_TRANSFER
,[3_MINUTE_TRANSFER_BONUS]
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,PAY_GROUP
,ASA_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,WRAP_MINUTE_RATE
,BASE_3_MINUTE_XFER_RATE
,[3_MINUTE_XFER_BONUS_RATE]
,ELIGIBLE_FOR_XFER_BONUS
,AUTHORIZED_TO_INVOICE_TYPE
,TOTAL_AUTHORIZED_PAY
,TOTAL_AUTHORIZED_XFER_PAY
,HAS_HOLIDAYS
,PAY_RATE_STANDARD
,PAY_RATE_HOLIDAY
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,XFER_ID_EXT
)
SELECT
 26                     --BAD_IMPORTS_NO  --'Invalid Date/Time'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE,  'ACE' FILE.
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_USERNAME
,W1.FF_AGENT_ID
,W1.FF_DAY
,W1.FF_DATE
,W1.FF_HOUR
,W1.FF_ONLINE_MINS
,W1.FF_CONNECTED_MINS
,W1.FF_WRAP_MINS
,W1.FF_WAITING_MINS
,W1.FF_SUCCESSFUL_XFERS
,W1.FF_INBOUNDS
,W1.FF_OUTBOUNDS
,W1.FF_WRAP_ADJUSTMENT
,W1.FF_TOTAL_XFERS
,W1.FF_3_MIN_XFERS
,W1.FF_3_MIN_RETAIL_XFERS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.INBOUND_CALLS
,W1.OUTBOUND_CALLS
,W1.TOTAL_CALLS
,W1.SUCCESSFUL_TRANSFERS
,W1.ONLINE_TIME
,W1.CONNECTED_TIME
,W1.WRAP_TIME
,W1.WAITING_TIME
,W1.WRAP_ADJ_TIME
,W1.WRAP_ALLOWED
,W1.AUTHORIZED_WRAP
,W1.CPROD
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_MINUTES
,W1.BILLABLE_TALK
,W1.BILLABLE_WRAP
,W1.AUTHORIZED_TRANSFERS
,W1.TOTAL_TRANSFERS
,W1.THREE_MIN_TRANSFERS
,W1.THREE_MIN_RETAIL_TRANSFERS
,W1.BASE_3_MINUTE_TRANSFER
,W1.[3_MINUTE_TRANSFER_BONUS]
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.PAY_GROUP
,W1.ASA_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.WRAP_MINUTE_RATE
,W1.BASE_3_MINUTE_XFER_RATE
,W1.[3_MINUTE_XFER_BONUS_RATE]
,W1.ELIGIBLE_FOR_XFER_BONUS
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.TOTAL_AUTHORIZED_PAY
,W1.TOTAL_AUTHORIZED_XFER_PAY
,W1.HAS_HOLIDAYS
,W1.PAY_RATE_STANDARD
,W1.PAY_RATE_HOLIDAY
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.XFER_ID_EXT
FROM           YZ_TB_IMPORTS_DATALOT_INVOICING_1    W1
WHERE ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================
--DELETE INVALID DATE/TIME RECORDS;
--======================================================================
DELETE FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================


--======================================================================
--HANDLE DUPLICATES:
--======================================================================
INSERT INTO YZ_TB_IMPORTS_DATALOT_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_USERNAME
,FF_AGENT_ID
,FF_DAY
,FF_DATE
,FF_HOUR
,FF_ONLINE_MINS
,FF_CONNECTED_MINS
,FF_WRAP_MINS
,FF_WAITING_MINS
,FF_SUCCESSFUL_XFERS
,FF_INBOUNDS
,FF_OUTBOUNDS
,FF_WRAP_ADJUSTMENT
,FF_TOTAL_XFERS
,FF_3_MIN_XFERS
,FF_3_MIN_RETAIL_XFERS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,INBOUND_CALLS
,OUTBOUND_CALLS
,TOTAL_CALLS
,SUCCESSFUL_TRANSFERS
,ONLINE_TIME
,CONNECTED_TIME
,WRAP_TIME
,WAITING_TIME
,WRAP_ADJ_TIME
,WRAP_ALLOWED
,AUTHORIZED_WRAP
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES
,BILLABLE_TALK
,BILLABLE_WRAP
,AUTHORIZED_TRANSFERS
,TOTAL_TRANSFERS
,THREE_MIN_TRANSFERS
,THREE_MIN_RETAIL_TRANSFERS
,BASE_3_MINUTE_TRANSFER
,[3_MINUTE_TRANSFER_BONUS]
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,PAY_GROUP
,ASA_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,WRAP_MINUTE_RATE
,BASE_3_MINUTE_XFER_RATE
,[3_MINUTE_XFER_BONUS_RATE]
,ELIGIBLE_FOR_XFER_BONUS
,AUTHORIZED_TO_INVOICE_TYPE
,TOTAL_AUTHORIZED_PAY
,TOTAL_AUTHORIZED_XFER_PAY
,HAS_HOLIDAYS
,PAY_RATE_STANDARD
,PAY_RATE_HOLIDAY
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,XFER_ID_EXT
)
SELECT
 21                     --BAD_IMPORTS_NO  --'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE,  'ACE' FILE.
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_USERNAME
,W1.FF_AGENT_ID
,W1.FF_DAY
,W1.FF_DATE
,W1.FF_HOUR
,W1.FF_ONLINE_MINS
,W1.FF_CONNECTED_MINS
,W1.FF_WRAP_MINS
,W1.FF_WAITING_MINS
,W1.FF_SUCCESSFUL_XFERS
,W1.FF_INBOUNDS
,W1.FF_OUTBOUNDS
,W1.FF_WRAP_ADJUSTMENT
,W1.FF_TOTAL_XFERS
,W1.FF_3_MIN_XFERS
,W1.FF_3_MIN_RETAIL_XFERS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.INBOUND_CALLS
,W1.OUTBOUND_CALLS
,W1.TOTAL_CALLS
,W1.SUCCESSFUL_TRANSFERS
,W1.ONLINE_TIME
,W1.CONNECTED_TIME
,W1.WRAP_TIME
,W1.WAITING_TIME
,W1.WRAP_ADJ_TIME
,W1.WRAP_ALLOWED
,W1.AUTHORIZED_WRAP
,W1.CPROD
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_MINUTES
,W1.BILLABLE_TALK
,W1.BILLABLE_WRAP
,W1.AUTHORIZED_TRANSFERS
,W1.TOTAL_TRANSFERS
,W1.THREE_MIN_TRANSFERS
,W1.THREE_MIN_RETAIL_TRANSFERS
,W1.BASE_3_MINUTE_TRANSFER
,W1.[3_MINUTE_TRANSFER_BONUS]
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.PAY_GROUP
,W1.ASA_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.WRAP_MINUTE_RATE
,W1.BASE_3_MINUTE_XFER_RATE
,W1.[3_MINUTE_XFER_BONUS_RATE]
,W1.ELIGIBLE_FOR_XFER_BONUS
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.TOTAL_AUTHORIZED_PAY
,W1.TOTAL_AUTHORIZED_XFER_PAY
,W1.HAS_HOLIDAYS
,W1.PAY_RATE_STANDARD
,W1.PAY_RATE_HOLIDAY
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.XFER_ID_EXT
FROM
(	SELECT
	 [DATETIME]
	,FF_AGENT_ID
	,ROW_NUMBER() over (partition by [DATETIME], FF_AGENT_ID
                            order by [DATETIME], FF_AGENT_ID, ONLINE_TIME DESC) ROWNO
	FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1 
) TNM
LEFT JOIN      YZ_TB_IMPORTS_DATALOT_INVOICING_1    W1   ON W1.[DATETIME] = TNM.[DATETIME]
													AND W1.FF_AGENT_ID    = TNM.FF_AGENT_ID
WHERE TNM.ROWNO > 1

--GOOD LUCK EVER PULLING OUT THE CORRECT DATA FROM THE _BAD TABLE TO REIMPORT INTO THE _UV_ TABLES !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
--======================================================================
--DELETE DUPLICATES:
--======================================================================
DELETE FROM TNM  
FROM
(	SELECT
	 [DATETIME]
	,FF_AGENT_ID
	,ROW_NUMBER() over (partition by [DATETIME], FF_AGENT_ID
                            order by [DATETIME], FF_AGENT_ID, ONLINE_TIME DESC) ROWNO
	FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1
) TNM
WHERE TNM.ROWNO > 1
--======================================================================


--===============================================
UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
  EMAIL              = ISNULL(IAM.EMAIL,'')
 ,SCHEDULER_ACL_NAME = ISNULL(IAM.FF_RESOURCE,'')   --BLANK for 'Standard' OR 'Resource' if 'Resource'.  POP'D TEMPORARILY WITH STUFF FROM MAP FILE!
 ,PAY_GROUP		     = ISNULL(IAM.PAY_GROUP,'')
 ,RESOURCE_NAME      = ISNULL(IAM.RESOURCE_NAME,'')
 ,ASA_NAME			 = ISNULL(IAM.FF_ASA_NAME,'')
 FROM            YZ_TB_IMPORTS_DATALOT_INVOICING_1        I
 LEFT JOIN       YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING  IAM  ON IAM.INVOICE_MAP_KEY      = I.FF_AGENT_ID

--===============================================
SET DATEFIRST 1  -- = Monday  
--===============================================  --THE INSANITY OF IT ALL !!!!!!!!

UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
	ID_EXT = CASE WHEN I.SCHEDULER_ACL_NAME = ''		  THEN 'DLS' -- DLS = Datalot Standard Agents
				  WHEN I.SCHEDULER_ACL_NAME = 'Resource'  THEN 'DLR' -- DLR = Datalot Resource Agents
				  WHEN I.SCHEDULER_ACL_NAME = 'Priority'  THEN 'DLP' -- DLP = Datalot Priority
				  ELSE '' END
 FROM            YZ_TB_IMPORTS_DATALOT_INVOICING_1        I     --NO WAY TO JOIN YZ_TB_IMPORTS_DATALOT_SD_INVOICE_GROUPS TABLE TO _1; ABSOLUTELY NONE !@!!!
 INNER JOIN      DATE_TIME                            DT   ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY

--===============================================
UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET     -- SELECT
  AIR_DAY_TYPE = CASE WHEN IG.HAS_HOLIDAYS = 'Y' AND
						 (    ISNULL(IH.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) OR
						   ( ISNULL(IHA.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) AND ISNULL(IHA.ID_EXT,'') <> '' )
						 )
					  THEN 'H' ELSE 'S' END  --AS AIR_DAY_TYPE  --H=Holiday  --S=Standard
 FROM            YZ_TB_IMPORTS_DATALOT_INVOICING_1               I
 INNER JOIN      DATE_TIME                                   DT   ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY
 LEFT JOIN       YZ_TB_IMPORTS_DATALOT_SD_INVOICE_GROUPS         IG   ON IG.ID_EXT              = I.ID_EXT
 LEFT JOIN       YZ_TB_IMPORTS_DATALOT_SD_INVOICE_HOLIDAYS       IH   ON IH.HOLIDAY_DATE        = CAST(DT.CAL_DATE_STRING AS DATETIME)
 LEFT JOIN       YZ_TB_IMPORTS_DATALOT_SD_INVOICE_HOLIDAYS_ADDL  IHA  ON IHA.HOLIDAY_DATE       = CAST(DT.CAL_DATE_STRING AS DATETIME)
															    AND IHA.ID_EXT             = I.ID_EXT	

--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1 WHERE AIR_DAY_TYPE = 'H'
--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_INVOICING   WHERE AIR_DAY_TYPE = 'H'
--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_SD_INVOICE_HOLIDAYS

--===============================================
UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
  AIR_ACW_FONT_COLOR			= 'Black'
 ,MIN_GUARANTEE_RATE			= ISNULL(IG.MIN_GUARANTEE_RATE,0)           --varies between scheduler acl names.
 ,MIN_GUARANTEE_MINUTES			= ISNULL(IG.MIN_GUARANTEE_MINUTES,0)		--EFFECTIVE 4/1/16
 ,MIN_GUARANTEE_TYPE			= ISNULL(IG.MIN_GUARANTEE_TYPE,'')			--varies between scheduler acl names.
 ,WRAP_MINUTE_RATE				= ISNULL(IG.WRAP_MINUTE_RATE,0)				--EFFECTIVE 4/1/16
 ,BASE_3_MINUTE_XFER_RATE		= ISNULL(IG.BASE_3_MINUTE_XFER_RATE,0)		--EFFECTIVE 4/1/16
 ,[3_MINUTE_XFER_BONUS_RATE]	= ISNULL(IG.[3_MINUTE_XFER_BONUS_RATE],0)	--EFFECTIVE 4/1/16
 ,AUTHORIZED_TO_INVOICE_TYPE	= ISNULL(IG.AUTHORIZED_TO_INVOICE_TYPE,'')  --varies between scheduler acl names.
 ,HAS_HOLIDAYS					= IG.HAS_HOLIDAYS
 ,PAY_RATE_STANDARD				= ISNULL(IG.PAY_RATE_STANDARD,0)			--EFFECTIVE 4/1/16
 ,PAY_RATE_HOLIDAY				= ISNULL(IG.PAY_RATE_HOLIDAY,0)				--EFFECTIVE 4/1/16
 ,INCLUDE_IN_CAS				= IG.INCLUDE_IN_CAS
 ,READY_FOR_XML					= IG.READY_FOR_XML
 ,SHOW_ID_EXTS					= IG.SHOW_ID_EXTS
-- ,RESOURCE_NAME   = I.FF_FULL_NAME
 FROM            YZ_TB_IMPORTS_DATALOT_INVOICING_1        I
 LEFT JOIN       YZ_TB_IMPORTS_DATALOT_SD_INVOICE_GROUPS  IG  ON IG.ID_EXT    = I.ID_EXT
												
--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_SD_INVOICE_GROUPS
	
--===============================================
 UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
   INVOICE_ID         = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
  ,SCHEDULER_ACL_NAME = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
 FROM            YZ_TB_IMPORTS_DATALOT_INVOICING_1            AIA 
 LEFT JOIN       YZ_TB_IMPORTS_DATALOT_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT

--====================================================================================================================================
-- UPDATE PAYMENT FIELDS EFFECTIVE 4/1/16
--====================================================================================================================================
-- SELECT * FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1

UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
 AUTHORIZED_TRANSFERS = THREE_MIN_TRANSFERS

UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
 CPROD = CONNECTED_TIME + WAITING_TIME

UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
 MINIMUM_GUARANTEE = CPROD * (MIN_GUARANTEE_MINUTES / 60.00)

UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
 AUTHORIZED_MINUTES = CASE WHEN MINIMUM_GUARANTEE > CONNECTED_TIME THEN
							 MINIMUM_GUARANTEE
						   ELSE
							 CONNECTED_TIME
						   END

UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
 BILLABLE_TALK				= CASE WHEN AIR_DAY_TYPE = 'S' THEN
									AUTHORIZED_MINUTES * PAY_RATE_STANDARD
								   WHEN AIR_DAY_TYPE = 'H' THEN
									AUTHORIZED_MINUTES * PAY_RATE_HOLIDAY
								   ELSE AUTHORIZED_MINUTES * PAY_RATE_STANDARD END

,BILLABLE_WRAP				= TOTAL_CALLS * WRAP_MINUTE_RATE
,BASE_3_MINUTE_TRANSFER		= AUTHORIZED_TRANSFERS * BASE_3_MINUTE_XFER_RATE
,[3_MINUTE_TRANSFER_BONUS]	= AUTHORIZED_TRANSFERS * [3_MINUTE_XFER_BONUS_RATE]

UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
 TOTAL_AUTHORIZED_PAY		= BILLABLE_TALK + BILLABLE_WRAP
,TOTAL_AUTHORIZED_XFER_PAY	= BASE_3_MINUTE_TRANSFER + [3_MINUTE_TRANSFER_BONUS] -- <--------- BONUS MAY NEED TO BE SUBTRACTED IF AGENT DOES NOT ACHIEVE >= 5 XFERS/HR FOR INVOICE PERIOD
																				 -- <--------- CHANGED FROM 6 XFERS/HR TO 5 XFERS/HR EFFECTIVE 11/01/2017


--===============================================  --YOU WANT TO CHANGE THIS, BUT DON'T !!!!!!!  INVOICE GROUPS POPULATED, IT COULD BE CHANGED TO USE...

--=============================================	--Hopefully generic enough for all Tenant SSIS to use!
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=============================================
--DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = @TENANT_KEY  --DONE ABOVE SO NOT SEEING LAST FAILED MESSAGE IF FAILURE BEFORE THIS POINT!!!
--  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900624
--=======================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--SQL won't insert special characters!!!  + CHAR(9)  --CHAR(10) + CHAR(13)
--Check #1:  ===================================================================================================I DON'T THINK THEY ARE PUTTING DUD FILES ON FTP.
	SET @RCD_CNT = (	SELECT COUNT(*) FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1 )
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + '1) File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	--SSIS reads yz_tb_errors_found table where tenant_key = 900543, and if record exists, outputs results/error_msg field in an email.
	INSERT INTO YZ_TB_ERRORS_FOUND
	(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY     --TENANT_KEY
	,'DATALOT_INVOICING'           --SUB_GROUP_NAME
	,@MSG1           --ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	
	--=============================================
	--Have to return a record for SSIS, no matter what, otherwise the f thing needs it's mommy:  Can't figure out how to get SSIS to work otherwise!!!
	INSERT INTO YZ_TB_ERRORS_FOUND
	(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY     --TENANT_KEY
	,'DATALOT_INVOICING'           --SUB_GROUP_NAME
	,''              --ERROR_MSG  --Never make this @MSG1 !!!  Must stay as ''.
	--Do NOT want to got to early exit here because data was good, according to 'checks'!  We want to import data into permanent table.
END
--IN SSIS, WOULD SELECT FROM TABLE WHERE TENANT_KEY = 900??? AND STORE IN SSIS VARIABLE.  IF VARIABLE NOT EMPTY, WILL SEND EMAIL AND END SSIS...
--=============================================

--=============================================
--=============================================
UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING SET
 FF_USERNAME				= W1.FF_USERNAME
,FF_AGENT_ID				= W1.FF_AGENT_ID
,FF_DAY						= W1.FF_DAY
,FF_DATE					= W1.FF_DATE
,FF_HOUR					= W1.FF_HOUR
,FF_ONLINE_MINS				= W1.FF_ONLINE_MINS
,FF_CONNECTED_MINS			= W1.FF_CONNECTED_MINS
,FF_WRAP_MINS				= W1.FF_WRAP_MINS
,FF_WAITING_MINS			= W1.FF_WAITING_MINS
,FF_SUCCESSFUL_XFERS		= W1.FF_SUCCESSFUL_XFERS
,FF_INBOUNDS				= W1.FF_INBOUNDS
,FF_OUTBOUNDS				= W1.FF_OUTBOUNDS
,FF_WRAP_ADJUSTMENT			= W1.FF_WRAP_ADJUSTMENT
,FF_TOTAL_XFERS				= W1.FF_TOTAL_XFERS
,FF_3_MIN_XFERS				= W1.FF_3_MIN_XFERS
,FF_3_MIN_RETAIL_XFERS		= W1.FF_3_MIN_RETAIL_XFERS

,SEQNO_ADDED_TIME			= W1.SEQNO_ADDED_TIME
,SEQNO						= W1.SEQNO
,FTP_FILE_NAME				= W1.FTP_FILE_NAME

,[DATETIME]					= W1.[DATETIME]
,HOUR_INTERVAL				= W1.HOUR_INTERVAL
,INBOUND_CALLS				= W1.INBOUND_CALLS
,OUTBOUND_CALLS				= W1.OUTBOUND_CALLS
,TOTAL_CALLS				= W1.TOTAL_CALLS
,SUCCESSFUL_TRANSFERS		= W1.SUCCESSFUL_TRANSFERS
,ONLINE_TIME				= W1.ONLINE_TIME
,CONNECTED_TIME				= W1.CONNECTED_TIME
,WRAP_TIME					= W1.WRAP_TIME
,WAITING_TIME				= W1.WAITING_TIME
,WRAP_ADJ_TIME				= W1.WRAP_ADJ_TIME
,WRAP_ALLOWED				= W1.WRAP_ALLOWED
,AUTHORIZED_WRAP			= W1.AUTHORIZED_WRAP
,CPROD						= W1.CPROD
,MINIMUM_GUARANTEE			= W1.MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES			= W1.AUTHORIZED_MINUTES
,BILLABLE_TALK				= W1.BILLABLE_TALK
,BILLABLE_WRAP				= W1.BILLABLE_WRAP
,AUTHORIZED_TRANSFERS		= W1.AUTHORIZED_TRANSFERS
,TOTAL_TRANSFERS			= W1.TOTAL_TRANSFERS
,THREE_MIN_TRANSFERS		= W1.THREE_MIN_TRANSFERS
,THREE_MIN_RETAIL_TRANSFERS	= W1.THREE_MIN_RETAIL_TRANSFERS
,BASE_3_MINUTE_TRANSFER		= W1.BASE_3_MINUTE_TRANSFER
,[3_MINUTE_TRANSFER_BONUS]	= W1.[3_MINUTE_TRANSFER_BONUS]
,EMAIL						= W1.EMAIL
,ID_EXT						= W1.ID_EXT
,SCHEDULER_ACL_NAME			= W1.SCHEDULER_ACL_NAME
,PAY_GROUP					= W1.PAY_GROUP
,ASA_NAME					= W1.ASA_NAME
--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE					= W1.CAL_DATE
,TENANT_KEY					= W1.TENANT_KEY
,AIR_DAY_TYPE				= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR			= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE			= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_MINUTES		= W1.MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE			= W1.MIN_GUARANTEE_TYPE
,WRAP_MINUTE_RATE			= W1.WRAP_MINUTE_RATE
,BASE_3_MINUTE_XFER_RATE	= W1.BASE_3_MINUTE_XFER_RATE
,[3_MINUTE_XFER_BONUS_RATE]	= W1.[3_MINUTE_XFER_BONUS_RATE]
,ELIGIBLE_FOR_XFER_BONUS	= W1.ELIGIBLE_FOR_XFER_BONUS
,AUTHORIZED_TO_INVOICE_TYPE = W1.AUTHORIZED_TO_INVOICE_TYPE
,TOTAL_AUTHORIZED_PAY		= W1.TOTAL_AUTHORIZED_PAY
,TOTAL_AUTHORIZED_XFER_PAY	= W1.TOTAL_AUTHORIZED_XFER_PAY
,HAS_HOLIDAYS				= W1.HAS_HOLIDAYS
,PAY_RATE_STANDARD			= W1.PAY_RATE_STANDARD
,PAY_RATE_HOLIDAY			= W1.PAY_RATE_HOLIDAY
,INCLUDE_IN_CAS				= W1.INCLUDE_IN_CAS
,READY_FOR_XML				= W1.READY_FOR_XML
,SHOW_ID_EXTS				= W1.SHOW_ID_EXTS
,INVOICE_ID					= W1.INVOICE_ID
,RESOURCE_NAME				= W1.RESOURCE_NAME
,XFER_ID_EXT				= W1.XFER_ID_EXT				-- USED FOR GENERATING DATA FOR TRANSFER INCENTIVE PAY

--,WS_ROW_CREATED_TIME		= NULL
,WS_ROW_UPDATED_TIME		= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            YZ_TB_IMPORTS_DATALOT_INVOICING_1  W1
----INNER JOIN SHOULD TAKE CARE OF MOST OF THE WORRY IN THE WHERE CLAUSE...
INNER JOIN      YZ_TB_IMPORTS_DATALOT_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
--												  AND G.ID_EXT                         = W1.ID_EXT
									              AND G.FF_AGENT_ID                    = W1.FF_AGENT_ID

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
--  AND G.ID_EXT                         = W1.ID_EXT
  AND G.FF_AGENT_ID                    = W1.FF_AGENT_ID
--IF I DO UPDATE NO MATTER WHAT, THEN I CAN SEE WHEN SAME DATA EXISTED IN MULTIPLE FILES!!!  PLUS ASSUMING LAST ON FTP IS WHAT THEY WANT.
--  AND (    ( G.FF_ACD_CALLS       <> W1.FF_ACD_CALLS )
--		OR ( G.FF_EXTN_OUT_CALLS  <> W1.FF_EXTN_OUT_CALLS )
--		OR ( G.FF_EXTN_IN_CALLS   <> W1.FF_EXTN_IN_CALLS )
--	  )

--AGENT CAN'T BE IN THE SAME TIME INTERVAL MORE THAN ONCE, NO MATTER WHAT THEIR ID_EXT...
--  ID_EXT IS DERIVED FROM THE AIA_AGENT_MAPPING TABLE BY JOINING FF_LOGIN_ID, SO ID_EXT IS IRRELEVANT !!!

--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_INVOICING WHERE ISNULL(ID_EXT,'') = ''
--  ID_EXT IS BLANK FOR ACE AND FOR AGENTS NOT IN THE AIA_AGENT_MAPPING TABLE.


--=============================================
--INSERT INTO PERMANENT IMPORT TABLE: 
--=============================================
INSERT INTO YZ_TB_IMPORTS_DATALOT_INVOICING
(
FF_USERNAME
,FF_AGENT_ID
,FF_DAY
,FF_DATE
,FF_HOUR
,FF_ONLINE_MINS
,FF_CONNECTED_MINS
,FF_WRAP_MINS
,FF_WAITING_MINS
,FF_SUCCESSFUL_XFERS
,FF_INBOUNDS
,FF_OUTBOUNDS
,FF_WRAP_ADJUSTMENT
,FF_TOTAL_XFERS
,FF_3_MIN_XFERS
,FF_3_MIN_RETAIL_XFERS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,INBOUND_CALLS
,OUTBOUND_CALLS
,TOTAL_CALLS
,SUCCESSFUL_TRANSFERS
,ONLINE_TIME
,CONNECTED_TIME
,WRAP_TIME
,WAITING_TIME
,WRAP_ADJ_TIME
,WRAP_ALLOWED
,AUTHORIZED_WRAP
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES
,BILLABLE_TALK
,BILLABLE_WRAP
,AUTHORIZED_TRANSFERS
,TOTAL_TRANSFERS
,THREE_MIN_TRANSFERS
,THREE_MIN_RETAIL_TRANSFERS
,BASE_3_MINUTE_TRANSFER
,[3_MINUTE_TRANSFER_BONUS]
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,PAY_GROUP
,ASA_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,WRAP_MINUTE_RATE
,BASE_3_MINUTE_XFER_RATE
,[3_MINUTE_XFER_BONUS_RATE]
,ELIGIBLE_FOR_XFER_BONUS
,AUTHORIZED_TO_INVOICE_TYPE
,TOTAL_AUTHORIZED_PAY
,TOTAL_AUTHORIZED_XFER_PAY
,HAS_HOLIDAYS
,PAY_RATE_STANDARD
,PAY_RATE_HOLIDAY
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,XFER_ID_EXT
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W1.FF_USERNAME
,W1.FF_AGENT_ID
,W1.FF_DAY
,W1.FF_DATE
,W1.FF_HOUR
,W1.FF_ONLINE_MINS
,W1.FF_CONNECTED_MINS
,W1.FF_WRAP_MINS
,W1.FF_WAITING_MINS
,W1.FF_SUCCESSFUL_XFERS
,W1.FF_INBOUNDS
,W1.FF_OUTBOUNDS
,W1.FF_WRAP_ADJUSTMENT
,W1.FF_TOTAL_XFERS
,W1.FF_3_MIN_XFERS
,W1.FF_3_MIN_RETAIL_XFERS

,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME

,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.INBOUND_CALLS
,W1.OUTBOUND_CALLS
,W1.TOTAL_CALLS
,W1.SUCCESSFUL_TRANSFERS
,W1.ONLINE_TIME
,W1.CONNECTED_TIME
,W1.WRAP_TIME
,W1.WAITING_TIME
,W1.WRAP_ADJ_TIME
,W1.WRAP_ALLOWED
,W1.AUTHORIZED_WRAP
,W1.CPROD
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_MINUTES
,W1.BILLABLE_TALK
,W1.BILLABLE_WRAP
,W1.AUTHORIZED_TRANSFERS
,W1.TOTAL_TRANSFERS
,W1.THREE_MIN_TRANSFERS
,W1.THREE_MIN_RETAIL_TRANSFERS
,W1.BASE_3_MINUTE_TRANSFER
,W1.[3_MINUTE_TRANSFER_BONUS]
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.PAY_GROUP
,W1.ASA_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.WRAP_MINUTE_RATE
,W1.BASE_3_MINUTE_XFER_RATE
,W1.[3_MINUTE_XFER_BONUS_RATE]
,W1.ELIGIBLE_FOR_XFER_BONUS
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.TOTAL_AUTHORIZED_PAY
,W1.TOTAL_AUTHORIZED_XFER_PAY
,W1.HAS_HOLIDAYS
,W1.PAY_RATE_STANDARD
,W1.PAY_RATE_HOLIDAY
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.XFER_ID_EXT

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            YZ_TB_IMPORTS_DATALOT_INVOICING_1  W1

LEFT JOIN       YZ_TB_IMPORTS_DATALOT_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
--												  AND G.ID_EXT                         = W1.ID_EXT
									              AND G.FF_AGENT_ID                    = W1.FF_AGENT_ID

WHERE (G.FF_AGENT_ID                     IS NULL AND ISNULL(W1.FF_AGENT_ID,'') <> '' )
--  AND (G.ID_EXT                          IS NULL AND ISNULL(W1.ID_EXT,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY  IS NULL AND ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )

--IF BLANK ID_EXT, THEY WANT TO SEE IT ON CAR INVOICE REPORTS, BUT NEVER IN XML REPORT/FILE.
--  BLANK ID_EXT ALMOST ALWAYS TRANSLATES INTO MISSING LOGIN_ID IN AIA_AGENT_MAPPING FILE...

--AGENT CAN'T BE IN THE SAME TIME INTERVAL MORE THAN ONCE, NO MATTER WHAT THEIR ID_EXT...
--  ID_EXT IS DERIVED FROM THE AIA_AGENT_MAPPING TABLE BY JOINING FF_LOGIN_ID, SO ID_EXT IS IRRELEVANT !!!

--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_INVOICING WHERE ISNULL(ID_EXT,'') = ''
--  ID_EXT IS BLANK FOR ACE AND FOR AGENTS NOT IN THE AIA_AGENT_MAPPING TABLE.



--==================================
SET DATEFIRST 1  -- = Monday  --SELECT DATEPART(DW,dbo.getdate())  --SELECT @@DATEFIRST AS '1st Day', DATEPART(dw, dbo.getdate()) AS 'Today'
--==================================

--===========================
IF OBJECT_ID('TEMPDB..#DT_EASY_WEEKS') IS NOT NULL BEGIN
   DROP TABLE #DT_EASY_WEEKS
END
CREATE TABLE #DT_EASY_WEEKS
(CAL_DATE_STRING      VARCHAR(10)
,CAL_WEEK_START_DATE  DATETIME
,CAL_WEEK_END_DATE    DATETIME
,PAY_CYCLE_CLOSURE_DATE DATETIME
)
INSERT INTO #DT_EASY_WEEKS
SELECT
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
FROM DATE_TIME DT
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
--WHERE DT.CAL_DATE >= CAST('06/01/2011' AS DATETIME) AND DT.CAL_DATE <  CAST('06/20/2011' AS DATETIME)
GROUP BY 
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
--===========================
UPDATE #DT_EASY_WEEKS SET CAL_WEEK_END_DATE = DATEADD(DD,6,CAL_WEEK_START_DATE)
--110713: WAS: 06/26/2011
UPDATE #DT_EASY_WEEKS SET
 PAY_CYCLE_CLOSURE_DATE = (CASE WHEN (DATEDIFF(DD,CAST('09/29/2013' AS DATETIME),CAL_WEEK_END_DATE) % 14) = 0 THEN
									CAL_WEEK_END_DATE
								ELSE
									DATEADD(DD,7,CAL_WEEK_END_DATE)
								END)
--SELECT * FROM #DT_EASY_WEEKS ORDER BY CAL_DATE_STRING

--==================================--Currently same structure as:  [YZ_TB_AGENT_INVOICE_AUTOMATION]
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA') IS NOT NULL BEGIN
   DROP TABLE #YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA
END
CREATE TABLE #YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA   --Currently same structure as:  [YZ_TB_AGENT_INVOICE_AUTOMATION]
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[TEAM_NAME] [varchar](50)  NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_MINUTES] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[WRAP_MINUTE_RATE] [decimal](6, 3) NULL,
	[BASE_3_MINUTE_XFER_RATE] [decimal](6, 3) NULL,
	[3_MINUTE_XFER_BONUS_RATE] [decimal](6, 3) NULL,
	[ELIGIBLE_FOR_XFER_BONUS] [varchar](1) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[TOTAL_AUTHORIZED_PAY] [decimal](6, 3) NULL,
	[TOTAL_AUTHORIZED_XFER_PAY] [decimal](6, 3) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[PAY_RATE_STANDARD] [decimal](6, 3) NULL,
	[PAY_RATE_HOLIDAY] [decimal](6, 3) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](50) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[PAY_GROUP] [int] NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.FF_AGENT_ID  --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING				--[DATE]             
,DT.LABEL_HH24 + ':00'			--HOD_INTERVAL

,AIA.ONLINE_TIME * 60.00        --AU_DK_LOGGED_IN_DURATION
,AIA.WAITING_TIME * 60.00       --AU_DK_AVAILABLE_DURATION

,AIA.CONNECTED_TIME * 60.00	    --AU_DK_TALK_DURATION
,0								--AU_DK_IB_TALK_DURATION
,0								--AU_DK_OB_TALK_DURATION

,AIA.BILLABLE_WRAP * 60.00		--AU_DK_CONVENTIONAL_ACW  $ (TOTAL_CALLS * WRAP_MINUTE_RATE)
,0					            --AU_DK_NR_DURATION
,0								--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0								--AU_DK_ADJUSTED_NR_DURATION
,AIA.CPROD * 60.00				--AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.CPROD * 60.00				--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS  

,AIA.AUTHORIZED_TRANSFERS		--AU_DK_XFER_COUNT
,0								--AU_DK_HOLD_COUNT
,0								--AU_DK_CONFERENCE_COUNT
,0								--AU_DK_CONSULT_COUNT
,0								--AU_DK_PUP_COUNT

,0					            --AU_DK_OFFERED_COUNT
,AIA.TOTAL_CALLS			    --AU_DK_HANDLED_COUNT
,0								--AU_DK_IB_HANDLE_COUNT
,0					            --AU_DK_OB_HANDLE_COUNT
													
,0								--AU_DK_RONA_COUNT
,0								--AU_DK_AWR_COUNT

,AIA.MINIMUM_GUARANTEE  * 60.00		--MINIMUM_GUARANTEE
,AIA.TOTAL_AUTHORIZED_PAY * 60.00	--AUTHORIZED_TO_INVOICE

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,NULL							--TEAM_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_MINUTES
,AIA.MIN_GUARANTEE_TYPE
,AIA.WRAP_MINUTE_RATE
,AIA.BASE_3_MINUTE_XFER_RATE
,AIA.[3_MINUTE_XFER_BONUS_RATE]
,AIA.ELIGIBLE_FOR_XFER_BONUS
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.TOTAL_AUTHORIZED_PAY
,AIA.TOTAL_AUTHORIZED_XFER_PAY
,AIA.HAS_HOLIDAYS
,AIA.PAY_RATE_STANDARD
,AIA.PAY_RATE_HOLIDAY
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID  --CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID 
,AIA.RESOURCE_NAME
,NULL							--AIA.AIRITKDUR
,NULL							--AIA.AIRIACDUR
,AIA.PAY_GROUP
,dbo.getdate()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL       --	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
--SELECT * FROM YZ_TB_IMPORTS_ATT_SD_AIA_STATIC_DEFAULTS ORDER BY OFFICIAL_WSOL_CLIENT_ID
--SELECT TOP 1000 *
FROM            YZ_TB_IMPORTS_DATALOT_INVOICING_1            AIA 
--Only want to include valid id exts in _AIA table -- id exts that have ming and aut2 formulas and static defaults setup...:
INNER JOIN      YZ_TB_IMPORTS_DATALOT_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      YZ_TB_IMPORTS_DATALOT_SD_INVOICE_GROUPS      CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME                                DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS                           DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')
  AND (ISNULL(AIA.RESOURCE_NAME,'') <> '')

--==================================
--UPDATE YZ_TB_...UV_ANT_AIA TABLE:
--==================================  --  SELECT TOP 100 * FROM YZ_TB_IMPORTS_ATT_UV_ANT_AIA
UPDATE YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA SET
 [PLATFORM]                   = W1.[PLATFORM]
,[STATUS]                     = W1.[STATUS]
--,INVOICE_MAP_KEY              = W1.INVOICE_MAP_KEY
,FIELD_NAME                   = W1.FIELD_NAME
,SCHEDULER_PROJECT_ID         = W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME           = W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION             = W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID      = W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME    = W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID       = W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME     = W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID        = W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID = W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID       = W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY        = W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID            = W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID           = W1.HOLIDAY_INVOICE_ID
,HOLIDAY                      = W1.HOLIDAY
,FILE_FORMAT_OF_PUSH          = W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID = W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL                      = W1.NEW_ACL
,CURRENT_CATS                 = W1.CURRENT_CATS
,CATS_ID                      = W1.CATS_ID
,PATS_ID                      = W1.PATS_ID
,SMART_ELIGIBLE               = W1.SMART_ELIGIBLE
,SMART_TIER_1                 = W1.SMART_TIER_1
,SMART_TIER_2                 = W1.SMART_TIER_2
,SMART_TIER_3                 = W1.SMART_TIER_3
,INTERVAL                     = W1.INTERVAL
,[DATE]                       = W1.[DATE]
,HOD_INTERVAL                 = W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION     = W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION     = W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION          = W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION       = W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION       = W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW       = W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION            = W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT             = W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT             = W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT       = W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT          = W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT              = W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT          = W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT          = W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT        = W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT        = W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT             = W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT              = W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE            = W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE        = W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE             = W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE       = W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
,FTP_FILE_NAME = W1.FTP_FILE_NAME
,TEAM_NAME     = W1.TEAM_NAME
,EMAIL         = W1.EMAIL

--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE                     = W1.CAL_DATE
,TENANT_KEY                   = W1.TENANT_KEY
,AIR_DAY_TYPE                 = W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR           = W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE           = W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_MINUTES		  = W1.MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE           = W1.MIN_GUARANTEE_TYPE
,WRAP_MINUTE_RATE			  = W1.WRAP_MINUTE_RATE
,BASE_3_MINUTE_XFER_RATE	  = W1.BASE_3_MINUTE_XFER_RATE
,[3_MINUTE_XFER_BONUS_RATE]	  = W1.[3_MINUTE_XFER_BONUS_RATE]
,ELIGIBLE_FOR_XFER_BONUS	  = W1.ELIGIBLE_FOR_XFER_BONUS
,AUTHORIZED_TO_INVOICE_TYPE   = W1.AUTHORIZED_TO_INVOICE_TYPE
,TOTAL_AUTHORIZED_PAY		  = W1.TOTAL_AUTHORIZED_PAY
,TOTAL_AUTHORIZED_XFER_PAY	  = W1.TOTAL_AUTHORIZED_XFER_PAY
,HAS_HOLIDAYS                 = W1.HAS_HOLIDAYS
,PAY_RATE_STANDARD			  = W1.PAY_RATE_STANDARD
,PAY_RATE_HOLIDAY			  = W1.PAY_RATE_HOLIDAY
,INCLUDE_IN_CAS               = W1.INCLUDE_IN_CAS
,READY_FOR_XML                = W1.READY_FOR_XML
,SHOW_ID_EXTS                 = W1.SHOW_ID_EXTS
,INVOICE_ID                   = W1.INVOICE_ID
,RESOURCE_NAME                = W1.RESOURCE_NAME

,PAY_GROUP					  = W1.PAY_GROUP
,AIRITKDUR                    = W1.AIRITKDUR
,AIRIACDUR                    = W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME          = @WS_ROW_CREATED_TIME

FROM            #YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA   W1

INNER JOIN      YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
												   AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
												   AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )

--================================================
--INSERT TMP TABLE FIELDS INTO YZ_TB_... TABLE:
--================================================
INSERT INTO [YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.TEAM_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_MINUTES
,AIA.MIN_GUARANTEE_TYPE
,AIA.WRAP_MINUTE_RATE
,AIA.BASE_3_MINUTE_XFER_RATE
,AIA.[3_MINUTE_XFER_BONUS_RATE]
,AIA.ELIGIBLE_FOR_XFER_BONUS
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.TOTAL_AUTHORIZED_PAY
,AIA.TOTAL_AUTHORIZED_XFER_PAY
,AIA.HAS_HOLIDAYS
,AIA.PAY_RATE_STANDARD
,AIA.PAY_RATE_HOLIDAY
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.PAY_GROUP
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA   AIA
LEFT JOIN       YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
												   AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
												   AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )


--==================================================================================================================================
-- INSERT DATA FOR TRANSFER INCENTIVE
--==================================================================================================================================

IF OBJECT_ID('TEMPDB..#YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA_XFER') IS NOT NULL BEGIN
   DROP TABLE #YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA_XFER
END
CREATE TABLE #YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA_XFER   --Currently same structure as:  [YZ_TB_AGENT_INVOICE_AUTOMATION]
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[TEAM_NAME] [varchar](50)  NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_MINUTES] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[WRAP_MINUTE_RATE] [decimal](6, 3) NULL,
	[BASE_3_MINUTE_XFER_RATE] [decimal](6, 3) NULL,
	[3_MINUTE_XFER_BONUS_RATE] [decimal](6, 3) NULL,
	[ELIGIBLE_FOR_XFER_BONUS] [varchar] (1) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[TOTAL_AUTHORIZED_PAY] [decimal](6, 3) NULL,
	[TOTAL_AUTHORIZED_XFER_PAY] [decimal](6, 3) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[PAY_RATE_STANDARD] [decimal](6, 3) NULL,
	[PAY_RATE_HOLIDAY] [decimal](6, 3) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](50) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[PAY_GROUP] [int] NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA_XFER
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.FF_AGENT_ID  --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,'No' AS HOLIDAY							-- NO HOLIDAY PAY FOR DLX ID EXTENSION
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING				--[DATE]             
,DT.LABEL_HH24 + ':00'			--HOD_INTERVAL

,(AIA.ONLINE_TIME + AIA.WRAP_ADJ_TIME) * 60.00		--AU_DK_LOGGED_IN_DURATION -- ONLINE TIME + WRAP ADJUSTMENT TIME
,0				                --AU_DK_AVAILABLE_DURATION

,0							    --AU_DK_TALK_DURATION
,0								--AU_DK_IB_TALK_DURATION
,0								--AU_DK_OB_TALK_DURATION

,0						        --AU_DK_CONVENTIONAL_ACW
,0					            --AU_DK_NR_DURATION
,0								--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0								--AU_DK_ADJUSTED_NR_DURATION
,0								--AU_DK_TOTAL_PRODUCTIVE_DURATION
,0								--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS  

,AIA.AUTHORIZED_TRANSFERS		--AU_DK_XFER_COUNT
,0								--AU_DK_HOLD_COUNT
,0								--AU_DK_CONFERENCE_COUNT
,0								--AU_DK_CONSULT_COUNT
,0								--AU_DK_PUP_COUNT

,0					            --AU_DK_OFFERED_COUNT
,AIA.AUTHORIZED_TRANSFERS		--AU_DK_HANDLED_COUNT
,0								--AU_DK_IB_HANDLE_COUNT
,0					            --AU_DK_OB_HANDLE_COUNT
													
,0								--AU_DK_RONA_COUNT
,0								--AU_DK_AWR_COUNT

,AIA.BASE_3_MINUTE_TRANSFER	   * 60.00		--MINIMUM_GUARANTEE  --MAKE IT LOOKS LIKE SECONDS SO THAT WHEN SERGEY DIVIDES BY 60 IT RESULTS BACK INTO THE ORIGINAL XFER COUNT
,AIA.TOTAL_AUTHORIZED_XFER_PAY * 60.00		--AUTHORIZED_TO_INVOICE  --MAKE IT LOOKS LIKE SECONDS SO THAT WHEN SERGEY DIVIDES BY 60 IT RESULTS BACK INTO THE ORIGINAL XFER COUNT

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,NULL							--TEAM_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_MINUTES
,AIA.MIN_GUARANTEE_TYPE
,AIA.WRAP_MINUTE_RATE
,AIA.BASE_3_MINUTE_XFER_RATE
,AIA.[3_MINUTE_XFER_BONUS_RATE]
,AIA.ELIGIBLE_FOR_XFER_BONUS
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.TOTAL_AUTHORIZED_PAY
,AIA.TOTAL_AUTHORIZED_XFER_PAY
,'N' AS HAS_HOLIDAYS
,AIA.PAY_RATE_STANDARD
,AIA.PAY_RATE_HOLIDAY
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,'Datalot Transfer Incentive R3' AS INVOICE_ID  -- ALWAYS THE SAME FOR THE TRANSFER INCENTIVE *R2 EFFECTIVE 8/1/15 *R3 EFFECTIVE 4/1/16
,AIA.RESOURCE_NAME
,NULL							--AIA.AIRITKDUR
,NULL							--AIA.AIRIACDUR
,AIA.PAY_GROUP
,dbo.getdate()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL       --	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
--SELECT * FROM YZ_TB_IMPORTS_ATT_SD_AIA_STATIC_DEFAULTS ORDER BY OFFICIAL_WSOL_CLIENT_ID
--SELECT TOP 1000 *
FROM            YZ_TB_IMPORTS_DATALOT_INVOICING_1            AIA 
--Only want to include valid id exts in _AIA table -- id exts that have ming and aut2 formulas and static defaults setup...:
INNER JOIN      YZ_TB_IMPORTS_DATALOT_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.XFER_ID_EXT
INNER JOIN      YZ_TB_IMPORTS_DATALOT_SD_INVOICE_GROUPS      CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME                                DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS                           DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')
  AND (ISNULL(AIA.RESOURCE_NAME,'') <> '')

--==================================
--UPDATE YZ_TB_...UV_ANT_AIA TABLE:
--==================================  --  SELECT TOP 100 * FROM YZ_TB_IMPORTS_ATT_UV_ANT_AIA
UPDATE YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA SET
 [PLATFORM]                   = W1.[PLATFORM]
,[STATUS]                     = W1.[STATUS]
--,INVOICE_MAP_KEY              = W1.INVOICE_MAP_KEY
,FIELD_NAME                   = W1.FIELD_NAME
,SCHEDULER_PROJECT_ID         = W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME           = W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION             = W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID      = W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME    = W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID       = W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME     = W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID        = W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID = W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID       = W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY        = W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID            = W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID           = W1.HOLIDAY_INVOICE_ID
,HOLIDAY                      = W1.HOLIDAY
,FILE_FORMAT_OF_PUSH          = W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID = W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL                      = W1.NEW_ACL
,CURRENT_CATS                 = W1.CURRENT_CATS
,CATS_ID                      = W1.CATS_ID
,PATS_ID                      = W1.PATS_ID
,SMART_ELIGIBLE               = W1.SMART_ELIGIBLE
,SMART_TIER_1                 = W1.SMART_TIER_1
,SMART_TIER_2                 = W1.SMART_TIER_2
,SMART_TIER_3                 = W1.SMART_TIER_3
,INTERVAL                     = W1.INTERVAL
,[DATE]                       = W1.[DATE]
,HOD_INTERVAL                 = W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION     = W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION     = W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION          = W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION       = W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION       = W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW       = W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION            = W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT             = W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT             = W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT       = W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT          = W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT              = W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT          = W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT          = W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT        = W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT        = W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT             = W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT              = W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE            = W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE        = W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE             = W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE       = W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
,FTP_FILE_NAME = W1.FTP_FILE_NAME
,TEAM_NAME     = W1.TEAM_NAME
,EMAIL         = W1.EMAIL

--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE                     = W1.CAL_DATE
,TENANT_KEY                   = W1.TENANT_KEY
,AIR_DAY_TYPE                 = W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR           = W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE           = W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_MINUTES		  = W1.MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE           = W1.MIN_GUARANTEE_TYPE
,WRAP_MINUTE_RATE			  = W1.WRAP_MINUTE_RATE
,BASE_3_MINUTE_XFER_RATE	  = W1.BASE_3_MINUTE_XFER_RATE
,[3_MINUTE_XFER_BONUS_RATE]	  = W1.[3_MINUTE_XFER_BONUS_RATE]
,ELIGIBLE_FOR_XFER_BONUS	  = W1.ELIGIBLE_FOR_XFER_BONUS
,AUTHORIZED_TO_INVOICE_TYPE   = W1.AUTHORIZED_TO_INVOICE_TYPE
,TOTAL_AUTHORIZED_PAY		  = W1.TOTAL_AUTHORIZED_PAY
,TOTAL_AUTHORIZED_XFER_PAY	  = W1.TOTAL_AUTHORIZED_XFER_PAY
,HAS_HOLIDAYS                 = W1.HAS_HOLIDAYS
,PAY_RATE_STANDARD			  = W1.PAY_RATE_STANDARD
,PAY_RATE_HOLIDAY			  = W1.PAY_RATE_HOLIDAY
,INCLUDE_IN_CAS               = W1.INCLUDE_IN_CAS
,READY_FOR_XML                = W1.READY_FOR_XML
,SHOW_ID_EXTS                 = W1.SHOW_ID_EXTS
,INVOICE_ID                   = W1.INVOICE_ID
,RESOURCE_NAME                = W1.RESOURCE_NAME

,PAY_GROUP					  = W1.PAY_GROUP
,AIRITKDUR                    = W1.AIRITKDUR
,AIRIACDUR                    = W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME          = @WS_ROW_CREATED_TIME

FROM            #YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA_XFER   W1

INNER JOIN      YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
												   AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
												   AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )

--================================================
--INSERT TMP TABLE FIELDS INTO YZ_TB_... TABLE:
--================================================
INSERT INTO [YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.TEAM_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_MINUTES
,AIA.MIN_GUARANTEE_TYPE
,AIA.WRAP_MINUTE_RATE
,AIA.BASE_3_MINUTE_XFER_RATE
,AIA.[3_MINUTE_XFER_BONUS_RATE]
,AIA.ELIGIBLE_FOR_XFER_BONUS
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.TOTAL_AUTHORIZED_PAY
,AIA.TOTAL_AUTHORIZED_XFER_PAY
,AIA.HAS_HOLIDAYS
,AIA.PAY_RATE_STANDARD
,AIA.PAY_RATE_HOLIDAY
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.PAY_GROUP
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA_XFER   AIA
LEFT JOIN       YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
												   AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
												   AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )

--==========================================================================================================================
--INSERT DATA INTO GLOBAL WORK TABLE FOR WA/SA
--==========================================================================================================================
--SELECT * FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_DATALOT_WORK_HOURS_ALL') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_DATALOT_WORK_HOURS_ALL
END
CREATE TABLE #WSOL_TB_IMPORTS_DATALOT_WORK_HOURS_ALL
(	[TENANT_NAME] [varchar] (100) NOT NULL,
	[OFFICIAL_ACL_NAME] [varchar] (200) NOT NULL,
	[AGENT_NAME] [varchar] (200) NULL,
	[FIELD_MAP_ID] [varchar] (100) NOT NULL,
	[EMAIL] [varchar] (100) NULL,
	[LOGGED_IN_HOURS] [decimal] (10,2) NULL,
	[PRODUCTIVE_HOURS] [decimal] (10,2) NULL,
	[DATETIME] [datetime] NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[FTP_FILE_NAME] [varchar] (100) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL
)

INSERT INTO #WSOL_TB_IMPORTS_DATALOT_WORK_HOURS_ALL
SELECT
 'DATALOT'
,WT.OFFICIAL_ACL_NAME
,WT.AGENT_NAME
,WT.FIELD_MAP_ID
,WT.EMAIL
,WT.LOGGED_IN_HOURS
,WT.PRODUCTIVE_HOURS
,WT.DATETIME
,WT.STD_TENANT_START_DATE_TIME_KEY
,WT.FTP_FILE_NAME
,WT.WS_ROW_CREATED_TIME
FROM
(	SELECT
	 --TENANT_NAME
	 CASE WHEN W1.ID_EXT = 'DLS' THEN
			'Datalot Standard Agents'
		  WHEN W1.ID_EXT = 'DLR' THEN
			'Datalot Resource Agents'
		  WHEN W1.ID_EXT = 'DLP' THEN
		    'Datalot Standard Agents'
		  ELSE W1.SCHEDULER_ACL_NAME END						AS OFFICIAL_ACL_NAME
	,W1.RESOURCE_NAME											AS AGENT_NAME
	,W1.FF_AGENT_ID												AS FIELD_MAP_ID
	,W1.EMAIL													AS [EMAIL]
	,(SUM(W1.ONLINE_TIME) + SUM(W1.WRAP_ADJ_TIME))/60.00		AS LOGGED_IN_HOURS
	,(SUM(W1.ONLINE_TIME) + SUM(W1.WRAP_ADJ_TIME))/60.00		AS PRODUCTIVE_HOURS
	,CAST(CONVERT(VARCHAR(10), W1.[DATETIME], 111) AS DATETIME)	AS [DATETIME]
	,DT.DATE_TIME_DAY_KEY										AS STD_TENANT_START_DATE_TIME_KEY
	,W1.FTP_FILE_NAME											AS FTP_FILE_NAME
	,dbo.getdate()													AS WS_ROW_CREATED_TIME
	
	FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1	W1
	INNER JOIN DATE_TIME					DT		ON DT.DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY

	GROUP BY
	 CASE WHEN W1.ID_EXT = 'DLS' THEN
			'Datalot Standard Agents'
		  WHEN W1.ID_EXT = 'DLR' THEN
			'Datalot Resource Agents'
		  WHEN W1.ID_EXT = 'DLP' THEN
		    'Datalot Standard Agents'
		  ELSE W1.SCHEDULER_ACL_NAME END
	,W1.RESOURCE_NAME
	,W1.FF_AGENT_ID
	,W1.EMAIL
	,CAST(CONVERT(VARCHAR(10), W1.[DATETIME], 111) AS DATETIME)
	,DT.DATE_TIME_DAY_KEY
	,W1.FTP_FILE_NAME
) WT

UPDATE WSOL_TB_IMPORTS_WORK_HOURS_ALL SET
 TENANT_NAME					= WTT.TENANT_NAME
--,OFFICIAL_ACL_NAME			= WTT.OFFICIAL_ACL_NAME
,AGENT_NAME						= WTT.AGENT_NAME
--,FIELD_MAP_ID					= WTT.FIELD_MAP_ID
,[EMAIL]						= WTT.EMAIL
,LOGGED_IN_HOURS				= WTT.LOGGED_IN_HOURS
,PRODUCTIVE_HOURS				= WTT.PRODUCTIVE_HOURS
,[DATETIME]						= WTT.DATETIME
--,STD_TENANT_START_DATE_TIME_KEY	= WTT.STD_TENANT_START_DATE_TIME_KEY
,FTP_FILE_NAME					= WTT.FTP_FILE_NAME
--,WS_ROW_CREATED_TIME			= dbo.getdate()
,WS_ROW_UPDATED_TIME			= dbo.getdate()

FROM #WSOL_TB_IMPORTS_DATALOT_WORK_HOURS_ALL WTT

INNER JOIN WSOL_TB_IMPORTS_WORK_HOURS_ALL WHR ON WHR.STD_TENANT_START_DATE_TIME_KEY = WTT.STD_TENANT_START_DATE_TIME_KEY
											 AND WHR.FIELD_MAP_ID					= WTT.FIELD_MAP_ID
											 AND WHR.OFFICIAL_ACL_NAME				= WTT.OFFICIAL_ACL_NAME

WHERE WHR.STD_TENANT_START_DATE_TIME_KEY	= WTT.STD_TENANT_START_DATE_TIME_KEY
  AND WHR.FIELD_MAP_ID						= WTT.FIELD_MAP_ID
  AND WHR.OFFICIAL_ACL_NAME					= WTT.OFFICIAL_ACL_NAME

INSERT INTO WSOL_TB_IMPORTS_WORK_HOURS_ALL
SELECT
 WTI.TENANT_NAME
,WTI.OFFICIAL_ACL_NAME
,WTI.AGENT_NAME
,WTI.FIELD_MAP_ID
,WTI.EMAIL
,WTI.LOGGED_IN_HOURS
,WTI.PRODUCTIVE_HOURS
,WTI.DATETIME
,WTI.STD_TENANT_START_DATE_TIME_KEY
,WTI.FTP_FILE_NAME
,WTI.WS_ROW_CREATED_TIME
,NULL
FROM #WSOL_TB_IMPORTS_DATALOT_WORK_HOURS_ALL	WTI

LEFT JOIN WSOL_TB_IMPORTS_WORK_HOURS_ALL	WRK  ON WRK.STD_TENANT_START_DATE_TIME_KEY	= WTI.STD_TENANT_START_DATE_TIME_KEY
												AND WRK.FIELD_MAP_ID					= WTI.FIELD_MAP_ID
												AND WRK.OFFICIAL_ACL_NAME				= WTI.OFFICIAL_ACL_NAME

WHERE ( WRK.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(WTI.STD_TENANT_START_DATE_TIME_KEY,0 ) <> 0 )
  AND ( WRK.FIELD_MAP_ID					IS NULL AND ISNULL(WTI.FIELD_MAP_ID,'') <> '' )
  AND ( WRK.OFFICIAL_ACL_NAME				IS NULL AND ISNULL(WTI.OFFICIAL_ACL_NAME,'') <> '' )

--=============================================
EARLY_EXIT:
--=============================================