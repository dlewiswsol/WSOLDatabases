CREATE PROCEDURE [dbo].[uspIMPORTS_MONAT_INVOICING_IMPORT_1]
AS
SET NOCOUNT ON  

--====================================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY = 160  -- Monat Global Corp. CLIENT_ID in WSOL Database
--====================================================
DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND
WHERE TENANT_KEY		= @TENANT_KEY
  AND SUB_GROUP_NAME	= 'MONAT_INVOICING'
  --  SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 160
--=============================================================================

--=============================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = DBO.GETDATE()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--=============================================================================

--SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1 ORDER BY F5
--SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_BAD_1

--=============================================================================
--CLEANUP WORK (_1) TABLE:
--HANDLE Blank Agent Name:
--=============================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_BAD_1
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT
,FF_STATE_START_TIME
,FF_AGENT_STATE
,FF_REASON_CODE
,FF_DURATION
,EVENT_START_TIME
,EVENT_DURATION_SECS
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,INBOUND_CALLS
,OUTBOUND_CALLS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 'AGT'					--BAD_IMPORTS_CODE			-- 'Blank Agent Name'
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME	--WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,NULL	-- INBOUND_CALLS
,NULL	-- OUTBOUND_CALLS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1  W1
WHERE LTRIM(RTRIM(ISNULL(W1.F1,''))) IN ('')
--========================================================================
--DELETE WHERE Blank Agent Name:
--========================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1
WHERE LTRIM(RTRIM(ISNULL(F1,''))) IN ('')

--========================================================================
--DELETE Unknown Durations:
--========================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_BAD_1
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT
,FF_STATE_START_TIME
,FF_AGENT_STATE
,FF_REASON_CODE
,FF_DURATION
,EVENT_START_TIME
,EVENT_DURATION_SECS
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,INBOUND_CALLS
,OUTBOUND_CALLS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 'UNK'					--BAD_IMPORTS_CODE			-- 'UNKnown' Duration
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,NULL	-- INBOUND_CALLS
,NULL	-- OUTBOUND_CALLS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1  W1
WHERE LTRIM(RTRIM(ISNULL(F5,''))) = 'Unknown'
  AND LTRIM(RTRIM(ISNULL(F3,''))) IN ('OffWork','LoggedOut','Unavailable','RingOnNoAnswer','Unknown')

DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1  
WHERE LTRIM(RTRIM(ISNULL(F5,''))) = 'Unknown'
  AND LTRIM(RTRIM(ISNULL(F3,''))) IN ('OffWork','LoggedOut','Unavailable','RingOnNoAnswer','Unknown')

--========================================================================
--DELETE LoggedOut / OffWork States:
--========================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_BAD_1
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT
,FF_STATE_START_TIME
,FF_AGENT_STATE
,FF_REASON_CODE
,FF_DURATION
,EVENT_START_TIME
,EVENT_DURATION_SECS
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,INBOUND_CALLS
,OUTBOUND_CALLS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 'LOS'					--BAD_IMPORTS_CODE			-- 'L'og'O'ut 'S'tate
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,NULL	-- INBOUND_CALLS
,NULL	-- OUTBOUND_CALLS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
--SELECT *
FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1  W1
WHERE LTRIM(RTRIM(ISNULL(F3,''))) IN ('LoggedOut','OffWork')

DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1  
WHERE LTRIM(RTRIM(ISNULL(F3,''))) IN ('LoggedOut','OffWork')

--===========================================================================================================
--HANDLE DUPLICATES:
--===========================================================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_BAD_1
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT
,FF_STATE_START_TIME
,FF_AGENT_STATE
,FF_REASON_CODE
,FF_DURATION
,EVENT_START_TIME
,EVENT_DURATION_SECS
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,INBOUND_CALLS
,OUTBOUND_CALLS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 'DUP'					--BAD_IMPORTS_CODE		--'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE --'ACT'IVITY FILE
,DBO.GETDATE() --@WS_ROW_CREATED_TIME	--WS_ROW_CREATED_TIME
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,NULL	-- INBOUND_CALLS
,NULL	-- OUTBOUND_CALLS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
FROM
(	SELECT
	 F1	-- FF_AGENT
	,F2	-- FF_STATE_START_TIME
	,F3	-- FF_AGENT_STATE
	,F5	-- FF_DURATION
	,ROW_NUMBER() over (partition by F1, F2, F3, F5
                            order by F1, F2, F3, F5, F4 DESC) ROWNO
	FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1
) TNM
LEFT JOIN      WSOL_TB_IMPORTS_MONAT_INVOICING_1_1	W1   ON W1.F1	= TNM.F1	-- FF_AGENT
														AND W1.F2	= TNM.F2	-- FF_STATE_START_TIME
														AND W1.F3	= TNM.F3	-- FF_AGENT_STATE
														AND W1.F5	= TNM.F5	-- FF_DURATION
WHERE TNM.ROWNO > 1
GROUP BY
 W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME

--===========================================================================================================
--DELETE DUPLICATES:
--===========================================================================================================
DELETE FROM TNM
FROM
(	SELECT
	 F1	-- FF_AGENT
	,F2	-- FF_STATE_START_TIME
	,F3	-- FF_AGENT_STATE
	,F5	-- FF_DURATION
	,ROW_NUMBER() over (partition by F1, F2, F3, F5
                            order by F1, F2, F3, F5, F4 DESC) ROWNO
	FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1
) TNM
WHERE TNM.ROWNO > 1

--=============================================================================
--SET EVENT START TIME AND DURATION TO PREPARE FOR PARSING INTO INTERVALS
--=============================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_1_1 SET
 EVENT_START_TIME		= CAST(F2 AS DATETIME)
,EVENT_DURATION_SECS	= CASE WHEN LEN(F5) = 8 THEN
								(
								   (CAST(REPLACE(LEFT(F5, 2),' ','') AS INT) * 3600)
								 + (CAST(REPLACE(SUBSTRING(F5, 4, 2),' ','') AS INT) * 60)
								 + (CAST(REPLACE(RIGHT(RTRIM(F5), 2),' ','') AS INT))
								)
							   ELSE
							    (
								   (CAST(REPLACE(LEFT(F5, 1),' ','') AS INT) * 3600)
								 + (CAST(REPLACE(SUBSTRING(F5, 3, 2),' ','') AS INT) * 60)
								 + (CAST(REPLACE(RIGHT(RTRIM(F5), 2),' ','') AS INT))
								)
						  END

--SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1 ORDER BY SEQNO
--=============================================
--DELETE EVENTS WHERE DURATION = 0.00
--=============================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1 
WHERE EVENT_DURATION_SECS = 0.00

--===========================================================================================================
-- POPULATE ACW WORK TABLE
--===========================================================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_ACW

INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_1_ACW
(
 F1
,F2
,F3
,F4
,F5
,EVENT_START_TIME
,EVENT_DURATION_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1  W1
WHERE F3 = 'AfterCall'

-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_ACW

--======================================================================================================
-- SET AUTHORIZED ACW VALUE
--======================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_1_ACW SET
 EVENT_DURATION_SECS = CASE WHEN EVENT_DURATION_SECS > 300.00 THEN 300.00 ELSE EVENT_DURATION_SECS END
  
--=====================================================================================================================
-- PARSE ACW DATA RECORDS INTO INTERVALS
--=====================================================================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_2_ACW

DECLARE
 @F1  VARCHAR(200)
,@F2  VARCHAR(50)
,@F3  VARCHAR(200)
,@F4  VARCHAR(500)
,@F5  VARCHAR(50) 
,@F6  DATETIME 
,@F7  DECIMAL(10,2) 
,@F8  DATETIME
,@F9  INT
,@F10 VARCHAR(100)
,@F11 INT

DECLARE crsT3 CURSOR FOR   
SELECT
 ISNULL(F1,'')
,ISNULL(F2,'')
,ISNULL(F3,'')
,ISNULL(F4,'')
,ISNULL(F5,'')
,ISNULL(EVENT_START_TIME,'')
,ISNULL(EVENT_DURATION_SECS,0.00)
,ISNULL(SEQNO_ADDED_TIME,'')
,ISNULL(SEQNO,'0')
,ISNULL(FTP_FILE_NAME,'')
,3600											--<<----- DETERMINES THE INTERVAL, 900 = 15 MIN, 1800 = 30 MIN, 3600 = 60 MIN
FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_ACW

OPEN crsT3
FETCH NEXT FROM crsT3   INTO @F1,@F2,@F3,@F4,@F5,@F6,@F7,@F8,@F9,@F10,@F11

WHILE @@FETCH_STATUS = 0 BEGIN
-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_2_ACW ORDER BY SEQNO
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_2_ACW
(FF_AGENT
,FF_STATE_START_TIME
,FF_AGENT_STATE
,FF_REASON_CODE
,FF_DURATION
,EVENT_START_TIME
,EVENT_DURATION_SECS
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 RESULT.FF_AGENT
,RESULT.FF_STATE_START_TIME
,RESULT.FF_AGENT_STATE
,RESULT.FF_REASON_CODE
,RESULT.FF_DURATION
,RESULT.EVENT_START_TIME
,RESULT.EVENT_DURATION_SECS
,RESULT.INTERVAL_START_TIME
,RESULT.INTERVAL_END_TIME
,RESULT.EVENT_DURATION_IN_INTERVAL_SECS
,RESULT.SEQNO_ADDED_TIME
,RESULT.SEQNO
,RESULT.FTP_FILE_NAME
FROM TVF_MONAT_STATES_TO_INTERVALS(@F1,@F2,@F3,@F4,@F5,@F6,@F7,@F8,@F9,@F10,@F11) RESULT

FETCH NEXT FROM crsT3   INTO @F1,@F2,@F3,@F4,@F5,@F6,@F7,@F8,@F9,@F10,@F11
END
CLOSE crsT3
DEALLOCATE crsT3

--===========================================================================================================
-- REMOVE ACW RECORDS THAT ARE OUTSIDE OF BUSINESS HOURS (00:00 - 05:00 CST)
--===========================================================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_2_ACW
WHERE (DATEPART(HH, INTERVAL_START_TIME) >= 1 AND DATEPART(HH, INTERVAL_START_TIME) < 7)

--=============================================================================
-- GROUP ACW DATA BY AGENT & INTERVAL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_3_ACW

INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_3_ACW
(
 FF_AGENT
,FF_AGENT_STATE
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,AUTHORIZED_ACW
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)														
SELECT
 A2.FF_AGENT											AS FF_AGENT
,A2.FF_AGENT_STATE										AS FF_AGENT_STATE
,SUM(ISNULL(A2.EVENT_DURATION_IN_INTERVAL_SECS, 0.00))	AS EVENT_DURATION_IN_INTERVAL_SECS
 
,MAX(A2.SEQNO_ADDED_TIME)								AS SEQNO_ADDED_TIME
,MIN(A2.SEQNO)											AS SEQNO
,MAX(A2.FTP_FILE_NAME)									AS FTP_FILE_NAME

,A2.INTERVAL_START_TIME									AS [DATETIME]
,SUM(ISNULL(A2.EVENT_DURATION_IN_INTERVAL_SECS, 0.00))	AS AUTHORIZED_ACW

,@WS_ROW_CREATED_TIME									AS WS_ROW_CREATED_TIME
,NULL													AS WS_ROW_UPDATED_TIME

FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_2_ACW  A2

GROUP BY
 A2.FF_AGENT
,A2.FF_AGENT_STATE
,A2.INTERVAL_START_TIME

--===========================================================================================================
-- CONVERT DATETIME FROM EASTERN TO CENTRAL TIME
--===========================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_3_ACW SET
 DATETIME = DATEADD(HH, -1, [DATETIME])

-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_3_ACW

--=====================================================================================================================
-- PARSE DATA RECORDS INTO INTERVALS
--=====================================================================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_2

DECLARE
 @FF1  VARCHAR(200)
,@FF2  VARCHAR(50)
,@FF3  VARCHAR(200)
,@FF4  VARCHAR(500)
,@FF5  VARCHAR(50) 
,@FF6  DATETIME 
,@FF7  DECIMAL(10,2) 
,@FF8  DATETIME
,@FF9  INT
,@FF10 VARCHAR(100)
,@FF11 INT

DECLARE crsT4 CURSOR FOR   
SELECT
 ISNULL(F1,'')
,ISNULL(F2,'')
,ISNULL(F3,'')
,ISNULL(F4,'')
,ISNULL(F5,'')
,ISNULL(EVENT_START_TIME,'')
,ISNULL(EVENT_DURATION_SECS,0.00)
,ISNULL(SEQNO_ADDED_TIME,'')
,ISNULL(SEQNO,'0')
,ISNULL(FTP_FILE_NAME,'')
,3600											--<<----- DETERMINES THE INTERVAL, 900 = 15 MIN, 1800 = 30 MIN, 3600 = 60 MIN
FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1

OPEN crsT4
FETCH NEXT FROM crsT4   INTO @FF1,@FF2,@FF3,@FF4,@FF5,@FF6,@FF7,@FF8,@FF9,@FF10,@FF11

WHILE @@FETCH_STATUS = 0 BEGIN
-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_2 ORDER BY SEQNO
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_2
(FF_AGENT
,FF_STATE_START_TIME
,FF_AGENT_STATE
,FF_REASON_CODE
,FF_DURATION
,EVENT_START_TIME
,EVENT_DURATION_SECS
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,INBOUND_CALLS
,OUTBOUND_CALLS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 RESULT.FF_AGENT
,RESULT.FF_STATE_START_TIME
,RESULT.FF_AGENT_STATE
,RESULT.FF_REASON_CODE
,RESULT.FF_DURATION
,RESULT.EVENT_START_TIME
,RESULT.EVENT_DURATION_SECS
,RESULT.INTERVAL_START_TIME
,RESULT.INTERVAL_END_TIME
,RESULT.EVENT_DURATION_IN_INTERVAL_SECS
,NULL	-- INBOUND_CALLS
,NULL	-- OUTBOUND_CALLS
,RESULT.SEQNO_ADDED_TIME
,RESULT.SEQNO
,RESULT.FTP_FILE_NAME
FROM TVF_MONAT_STATES_TO_INTERVALS(@FF1,@FF2,@FF3,@FF4,@FF5,@FF6,@FF7,@FF8,@FF9,@FF10,@FF11) RESULT

FETCH NEXT FROM crsT4   INTO @FF1,@FF2,@FF3,@FF4,@FF5,@FF6,@FF7,@FF8,@FF9,@FF10,@FF11
END
CLOSE crsT4
DEALLOCATE crsT4

--============================================================================================
-- CAPTURE CALL COUNTS
--============================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_2 SET
 INBOUND_CALLS		=	CASE WHEN FF_AGENT_STATE IN ('InCall','DirectCall') THEN
							CASE WHEN CAST(FF_STATE_START_TIME AS DATETIME) = EVENT_START_TIME THEN 1
							ELSE 0 END
						ELSE 0 END
,OUTBOUND_CALLS		=	CASE WHEN FF_AGENT_STATE = 'DirectOutboundDial' THEN
							CASE WHEN CAST(FF_STATE_START_TIME AS DATETIME) = EVENT_START_TIME THEN 1
							ELSE 0 END
						ELSE 0 END

--=============================================================================
-- REMOVE RECORDS THAT ARE OUTSIDE OF BUSINESS HOURS (00:00 - 05:00 CST)
--=============================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_BAD_1
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT
,FF_STATE_START_TIME
,FF_AGENT_STATE
,FF_REASON_CODE
,FF_DURATION
,EVENT_START_TIME
,EVENT_DURATION_SECS
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,INBOUND_CALLS
,OUTBOUND_CALLS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 'OBH'					--BAD_IMPORTS_CODE			-- 'O'utside 'B'usiness 'H'ours
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W2.FF_AGENT
,W2.FF_STATE_START_TIME
,W2.FF_AGENT_STATE
,W2.FF_REASON_CODE
,W2.FF_DURATION
,W2.EVENT_START_TIME
,W2.EVENT_DURATION_SECS
,W2.INTERVAL_START_TIME
,W2.INTERVAL_END_TIME
,W2.EVENT_DURATION_IN_INTERVAL_SECS
,W2.INBOUND_CALLS
,W2.OUTBOUND_CALLS
,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_MONAT_INVOICING_2  W2
WHERE (DATEPART(HH, W2.INTERVAL_START_TIME) >= 1 AND DATEPART(HH, W2.INTERVAL_START_TIME) < 7)

DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_2
WHERE (DATEPART(HH, INTERVAL_START_TIME) >= 1 AND DATEPART(HH, INTERVAL_START_TIME) < 7)


-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_3 ORDER BY SEQNO
--=============================================================================
-- GROUP DATA BY INTERVAL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_3

INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_3
(
 FF_AGENT
,FF_AGENT_STATE
,FF_REASON_CODE
,EVENT_DURATION_SECS
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_TIME

,INBOUND_CALLS
,OUTBOUND_CALLS
,LOGGED_IN_DUR
,AVAILABLE_DUR
,BUSY_DUR
,DIRECT_CALL_DUR
,DIRECT_OB_DIAL_DUR
,OFF_WORK_DUR
,UNKNOWN_DUR
,RONA_DUR
,RONA_SPECIAL_PROJECT_DUR
,RONA_SYSTEM_ISSUES_IT_DUR
,RONA_IDLE_DUR
,RONA_CALL_BACK_DUR
,INCALL_DUR
,INCALL_IDLE_DUR
,INCALL_CALL_BACK_DUR
,INCALL_SPECIAL_PROJECT_DUR
,INCALL_ON_BREAK_DUR
,ACW_DUR
,ACW_ON_BREAK_DUR
,ACW_CALL_BACK_DUR
,ACW_IDLE_DUR
,ACW_SPECIAL_PROJECT_DUR
,ACW_FLOOR_SUPPORT_DUR
,ACW_SYSTEM_ISSUES_IT_DUR
,RING_DUR
,RING_BREAK_DUR
,RING_SPECIAL_PROJECT_DUR
,RING_IDLE_DUR
,RING_SYSTEM_ISSUES_IT_DUR
,RING_CALL_BACK_DUR
,UNAVAILABLE_DUR
,UNAVAILABLE_ON_BREAK_DUR
,UNAVAILABLE_CALL_BACK_DUR
,UNAVAILABLE_IDLE_DUR
,UNAVAILABLE_PERSONAL_TIME_DUR
,UNAVAILABLE_RR_DUR
,UNAVAILABLE_SPECIAL_PROJECT_DUR
,UNAVAILABLE_FLOOR_SUPPORT_DUR
,UNAVAILABLE_SYSTEM_ISSUES_IT_DUR
,UNAVAILABLE_EMAIL_DUR
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W2.FF_AGENT
,W2.FF_AGENT_STATE
,W2.FF_REASON_CODE
,SUM(ISNULL(W2.EVENT_DURATION_SECS				,0.00))
,SUM(ISNULL(W2.EVENT_DURATION_IN_INTERVAL_SECS	,0.00))
,MAX(W2.SEQNO_ADDED_TIME)
,MIN(W2.SEQNO)
,W2.FTP_FILE_NAME

,NULL								--AS RESOURCE_NAME
,W2.INTERVAL_START_TIME				--AS DATETIME
,NULL								--AS HOUR_INTERVAL
,NULL								--AS EMPLOYEE_ID
,NULL								--AS STD_TENANT_START_TIME

,SUM(ISNULL(W2.INBOUND_CALLS	,0))--AS INBOUND_CALLS
,SUM(ISNULL(W2.OUTBOUND_CALLS	,0))--AS OUTBOUND_CALLS
,NULL								--AS LOGGED_IN_DUR
,NULL								--AS AVAILABLE_DUR
,NULL								--AS BUSY_DUR
,NULL								--AS DIRECT_CALL_DUR
,NULL								--AS DIRECT_OB_DIAL_DUR
,NULL								--AS OFF_WORK_DUR
,NULL								--AS UNKNOWN_DUR
,NULL								--AS RONA_DUR
,NULL								--AS RONA_SPECIAL_PROJECT_DUR
,NULL								--AS RONA_SYSTEM_ISSUES_ID_DUR
,NULL								--AS RONA_IDLE_DUR
,NULL								--AS RONA_CALL_BACK_DUR
,NULL								--AS INCALL_DUR
,NULL								--AS INCALL_IDLE_DUR
,NULL								--AS INCALL_CALL_BACK_DUR
,NULL								--AS INCALL_SPECIAL_PROJECT_DUR
,NULL								--AS INCALL_ON_BREAK_DUR
,NULL								--AS ACW_DUR
,NULL								--AS ACW_ON_BREAK_DUR
,NULL								--AS ACW_CALL_BACK_DUR
,NULL								--AS ACW_IDLE_DUR
,NULL								--AS ACW_SPECIAL_PROJECT_DUR
,NULL								--AS ACW_FLOOR_SUPPORT_DUR
,NULL								--AS ACW_SYSTEM_ISSUES_IT_DUR
,NULL								--AS RING_DUR
,NULL								--AS RING_BREAK_DUR
,NULL								--AS RING_SPECIAL_PROJECT_DUR
,NULL								--AS RING_IDLE_DUR
,NULL								--AS RING_SYSTEM_ISSUES_IT_DUR
,NULL								--AS RING_CALL_BACK_DUR
,NULL								--AS UNAVAILABLE_DUR
,NULL								--AS UNAVAILABLE_ON_BREAK_DUR
,NULL								--AS UNAVAILABLE_CALL_BACK_DUR
,NULL								--AS UNAVAILABLE_IDLE_DUR
,NULL								--AS UNAVAILABLE_PERSONAL_TIME_DUR
,NULL								--AS UNAVAILABLE_RR_DUR
,NULL								--AS UNAVAILABLE_SPECIAL_PROJECT_DUR
,NULL								--AS UNAVAILABLE_FLOOR_SUPPORT_DUR
,NULL								--AS UNAVAILABLE_SYSTEM_ISSUES_IT_DUR
,NULL								--AS UNAVAILABLE_EMAIL_DUR

,DBO.GETDATE() --@WS_ROW_CREATED_TIME				--[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL								--[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_2  W2

GROUP BY
 W2.FF_AGENT
,W2.FF_AGENT_STATE
,W2.FF_REASON_CODE
,W2.FTP_FILE_NAME
,W2.INTERVAL_START_TIME

ORDER BY
 MIN(W2.SEQNO)

-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_3 ORDER BY SEQNO

--==================================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_3) TABLE THAT WEREN'T IN IMPORTED FILE:
--==================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_3 SET
 HOUR_INTERVAL = DATEPART(HH, [DATETIME])

--========================================================================================
-- AGENT STATES
--========================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_3 SET
 AVAILABLE_DUR		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Available'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,BUSY_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Busy'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,DIRECT_CALL_DUR	= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'DirectCall'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,DIRECT_OB_DIAL_DUR	= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'DirectOutboundDial'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,OFF_WORK_DUR		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'OffWork'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END	
,UNKNOWN_DUR		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Unknown'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,RONA_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'RingOnNoAnswer'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,INCALL_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'InCall'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,ACW_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'AfterCall'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,RING_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Ringing'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,UNAVAILABLE_DUR	= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Unavailable'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END

-- AGENT STATES BY REASON CODE

,RONA_SPECIAL_PROJECT_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,''))) = 'RingOnNoAnswer'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'Special Project%'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2))
									  ELSE 0.00 END
,RONA_SYSTEM_ISSUES_IT_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,''))) = 'RingOnNoAnswer'
					  						AND LTRIM(RTRIM(FF_REASON_CODE))			= 'System Issues/IT'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,RONA_IDLE_DUR						= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'RingOnNoAnswer'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'IDLE%'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,RONA_CALL_BACK_DUR					= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'RingOnNoAnswer'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'Call Back%'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,INCALL_IDLE_DUR					= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'InCall'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'IDLE%'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,INCALL_CALL_BACK_DUR				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'InCall'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'Call Back%'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,INCALL_SPECIAL_PROJECT_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'InCall'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'Special Project%'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,INCALL_ON_BREAK_DUR				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'InCall'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE '%Break%'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,ACW_ON_BREAK_DUR					= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'AfterCall'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE '%Break%'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,ACW_CALL_BACK_DUR					= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'AfterCall'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'Call Back%'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,ACW_IDLE_DUR						= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'AfterCall'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'IDLE%'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,ACW_SPECIAL_PROJECT_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'AfterCall'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'Special Project%'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,ACW_FLOOR_SUPPORT_DUR				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'AfterCall'
											AND LTRIM(RTRIM(FF_REASON_CODE))			= 'Floor Support'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,ACW_SYSTEM_ISSUES_IT_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'AfterCall'
											AND LTRIM(RTRIM(FF_REASON_CODE))			= 'System Issues/IT'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,RING_BREAK_DUR						= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Ringing'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE '%Break%'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,RING_SPECIAL_PROJECT_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Ringing'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'Special Project%'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,RING_IDLE_DUR						= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Ringing'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'IDLE%'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,RING_SYSTEM_ISSUES_IT_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Ringing'
											AND LTRIM(RTRIM(FF_REASON_CODE))			= 'System Issues/IT'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,RING_CALL_BACK_DUR					= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Ringing'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'Call Back%'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,UNAVAILABLE_ON_BREAK_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Unavailable'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE '%Break%'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,UNAVAILABLE_CALL_BACK_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Unavailable'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'Call Back%'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,UNAVAILABLE_IDLE_DUR				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Unavailable'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'IDLE%'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,UNAVAILABLE_PERSONAL_TIME_DUR		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Unavailable'
											AND LTRIM(RTRIM(FF_REASON_CODE))			= 'Personal Time'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,UNAVAILABLE_RR_DUR					= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Unavailable'
											AND LTRIM(RTRIM(FF_REASON_CODE))			= 'RR'					THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,UNAVAILABLE_SPECIAL_PROJECT_DUR	= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Unavailable'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'Special Project%'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,UNAVAILABLE_FLOOR_SUPPORT_DUR		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Unavailable'
											AND LTRIM(RTRIM(FF_REASON_CODE))			= 'Floor Support'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,UNAVAILABLE_SYSTEM_ISSUES_IT_DUR	= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Unavailable'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'System Issues/IT'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,UNAVAILABLE_EMAIL_DUR				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Unavailable'
											AND LTRIM(RTRIM(FF_REASON_CODE))			= 'Email only'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END


-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4 ORDER BY SEQNO

--=============================================================================
-- GROUP DATA BY AGENT & INTERVAL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4

INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_4
(
 FF_AGENT
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_TIME
,INBOUND_CALLS
,OUTBOUND_CALLS
,TOTAL_CALLS
,LOGGED_IN_DUR
,AVAILABLE_DUR
,BUSY_DUR
,DIRECT_CALL_DUR
,DIRECT_OB_DIAL_DUR
,OFF_WORK_DUR
,UNKNOWN_DUR
,RONA_DUR
,RONA_SPECIAL_PROJECT_DUR
,RONA_SYSTEM_ISSUES_IT_DUR
,RONA_IDLE_DUR
,RONA_CALL_BACK_DUR
,INCALL_DUR
,INCALL_IDLE_DUR
,INCALL_CALL_BACK_DUR
,INCALL_SPECIAL_PROJECT_DUR
,INCALL_ON_BREAK_DUR
,ACW_DUR
,AUTHORIZED_ACW_DUR
,ACW_ON_BREAK_DUR
,ACW_CALL_BACK_DUR
,ACW_IDLE_DUR
,ACW_SPECIAL_PROJECT_DUR
,ACW_FLOOR_SUPPORT_DUR
,ACW_SYSTEM_ISSUES_IT_DUR
,RING_DUR
,RING_BREAK_DUR
,RING_SPECIAL_PROJECT_DUR
,RING_IDLE_DUR
,RING_SYSTEM_ISSUES_IT_DUR
,RING_CALL_BACK_DUR
,UNAVAILABLE_DUR
,UNAVAILABLE_ON_BREAK_DUR
,UNAVAILABLE_CALL_BACK_DUR
,UNAVAILABLE_IDLE_DUR
,UNAVAILABLE_PERSONAL_TIME_DUR
,UNAVAILABLE_RR_DUR
,UNAVAILABLE_SPECIAL_PROJECT_DUR
,UNAVAILABLE_FLOOR_SUPPORT_DUR
,UNAVAILABLE_SYSTEM_ISSUES_IT_DUR
,UNAVAILABLE_EMAIL_DUR
,TOTAL_AVAILABLE
,TOTAL_RING
,TOTAL_TALK
,TOTAL_ACW
,TOTAL_UNAVAILABLE
,TOTAL_RONA
,HANDLE_TIME
,CPROD
,AUTHORIZED
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)														
SELECT
 W3.FF_AGENT											AS FF_AGENT
,SUM(ISNULL(W3.EVENT_DURATION_IN_INTERVAL_SECS, 0.00))	AS EVENT_DURATION_IN_INTERVAL_SECS
 
,MAX(W3.SEQNO_ADDED_TIME)								AS SEQNO_ADDED_TIME
,MIN(W3.SEQNO)											AS SEQNO
,MAX(W3.FTP_FILE_NAME)									AS FTP_FILE_NAME

,NULL													AS RESOURCE_NAME
,W3.[DATETIME]											AS [DATETIME]
,W3.HOUR_INTERVAL										AS HOUR_INTERVAL
,NULL													AS EMPLOYEE_ID
,W3.[DATETIME]											AS STD_TENANT_START_TIME

,SUM(ISNULL(W3.INBOUND_CALLS					,0))	AS INBOUND_CALLS
,SUM(ISNULL(W3.OUTBOUND_CALLS					,0))	AS OUTBOUND_CALLS
,NULL													AS TOTAL_CALLS

,SUM(ISNULL(W3.LOGGED_IN_DUR					,0.00))	AS LOGGED_IN_DUR
,SUM(ISNULL(W3.AVAILABLE_DUR					,0.00))	AS AVAILABLE_DUR
,SUM(ISNULL(W3.BUSY_DUR							,0.00))	AS BUSY_DUR
,SUM(ISNULL(W3.DIRECT_CALL_DUR					,0.00))	AS DIRECT_CALL_DUR
,SUM(ISNULL(W3.DIRECT_OB_DIAL_DUR				,0.00)) AS DIRECT_OB_DIAL_DUR
,SUM(ISNULL(W3.OFF_WORK_DUR						,0.00))	AS OFF_WORK_DUR
,SUM(ISNULL(W3.UNKNOWN_DUR						,0.00))	AS UNKNOWN_DUR
,SUM(ISNULL(W3.RONA_DUR							,0.00))	AS RONA_DUR
,SUM(ISNULL(W3.RONA_SPECIAL_PROJECT_DUR			,0.00))	AS RONA_SPECIAL_PROJECT_DUR
,SUM(ISNULL(W3.RONA_SYSTEM_ISSUES_IT_DUR		,0.00))	AS RONA_SYSTEM_ISSUES_IT_DUR
,SUM(ISNULL(W3.RONA_IDLE_DUR					,0.00))	AS RONA_IDLE_DUR
,SUM(ISNULL(W3.RONA_CALL_BACK_DUR				,0.00))	AS RONA_CALL_BACK_DUR
,SUM(ISNULL(W3.INCALL_DUR						,0.00))	AS INCALL_DUR
,SUM(ISNULL(W3.INCALL_IDLE_DUR					,0.00))	AS INCALL_IDLE_DUR
,SUM(ISNULL(W3.INCALL_CALL_BACK_DUR				,0.00))	AS INCALL_CALL_BACK_DUR
,SUM(ISNULL(W3.INCALL_SPECIAL_PROJECT_DUR		,0.00))	AS INCALL_SPECIAL_PROJECT_DUR
,SUM(ISNULL(W3.INCALL_ON_BREAK_DUR				,0.00))	AS INCALL_ON_BREAK_DUR
,SUM(ISNULL(W3.ACW_DUR							,0.00))	AS ACW_DUR
,NULL													AS AUTHORIZED_ACW_DUR
,SUM(ISNULL(W3.ACW_ON_BREAK_DUR					,0.00))	AS ACW_ON_BREAK_DUR
,SUM(ISNULL(W3.ACW_CALL_BACK_DUR				,0.00))	AS ACW_CALL_BACK_DUR
,SUM(ISNULL(W3.ACW_IDLE_DUR						,0.00))	AS ACW_IDLE_DUR
,SUM(ISNULL(W3.ACW_SPECIAL_PROJECT_DUR			,0.00))	AS ACW_SPECIAL_PROJECT_DUR
,SUM(ISNULL(W3.ACW_FLOOR_SUPPORT_DUR			,0.00))	AS ACW_FLOOR_SUPPORT_DUR
,SUM(ISNULL(W3.ACW_SYSTEM_ISSUES_IT_DUR			,0.00))	AS ACW_SYSTEM_ISSUES_IT_DUR
,SUM(ISNULL(W3.RING_DUR							,0.00))	AS RING_DUR
,SUM(ISNULL(W3.RING_BREAK_DUR					,0.00))	AS RING_BREAK_DUR
,SUM(ISNULL(W3.RING_SPECIAL_PROJECT_DUR			,0.00))	AS RING_SPECIAL_PROJECT_DUR
,SUM(ISNULL(W3.RING_IDLE_DUR					,0.00))	AS RING_IDLE_DUR
,SUM(ISNULL(W3.RING_SYSTEM_ISSUES_IT_DUR		,0.00))	AS RING_SYSTEM_ISSUES_IT_DUR
,SUM(ISNULL(W3.RING_CALL_BACK_DUR				,0.00))	AS RING_CALL_BACK_DUR
,SUM(ISNULL(W3.UNAVAILABLE_DUR					,0.00))	AS UNAVAILABLE_DUR
,SUM(ISNULL(W3.UNAVAILABLE_ON_BREAK_DUR			,0.00))	AS UNAVAILABLE_ON_BREAK_DUR
,SUM(ISNULL(W3.UNAVAILABLE_CALL_BACK_DUR		,0.00))	AS UNAVAILABLE_CALL_BACK_DUR
,SUM(ISNULL(W3.UNAVAILABLE_IDLE_DUR				,0.00))	AS UNAVAILABLE_IDLE_DUR
,SUM(ISNULL(W3.UNAVAILABLE_PERSONAL_TIME_DUR	,0.00))	AS UNAVAILABLE_PERSONAL_TIME_DUR
,SUM(ISNULL(W3.UNAVAILABLE_RR_DUR				,0.00))	AS UNAVAILABLE_RR_DUR
,SUM(ISNULL(W3.UNAVAILABLE_SPECIAL_PROJECT_DUR	,0.00))	AS UNAVAILABLE_SPECIAL_PROJECT_DUR
,SUM(ISNULL(W3.UNAVAILABLE_FLOOR_SUPPORT_DUR	,0.00))	AS UNAVAILABLE_FLOOR_SUPPORT_DUR
,SUM(ISNULL(W3.UNAVAILABLE_SYSTEM_ISSUES_IT_DUR	,0.00))	AS UNAVAILABLE_SYSTEM_ISSUES_IT_DUR
,SUM(ISNULL(W3.UNAVAILABLE_EMAIL_DUR			,0.00))	AS UNAVAILABLE_EMAIL_DUR
,NULL													AS TOTAL_AVAILABLE
,NULL													AS TOTAL_RING
,NULL													AS TOTAL_TALK
,NULL													AS TOTAL_ACW
,NULL													AS TOTAL_UNAVAILABLE
,NULL													AS TOTAL_RONA
,NULL													AS HANDLE_TIME
,NULL													AS CPROD
,NULL													AS AUTHORIZED

,NULL													AS EMAIL
,NULL													AS ID_EXT
,NULL													AS SCHEDULER_ACL_NAME
,NULL													AS STD_TENANT_START_DATE_TIME_KEY
,NULL													AS CAL_DATE
,160													AS TENANT_KEY
,NULL													AS AIR_DAY_TYPE
,NULL													AS AIR_ACW_FONT_COLOR
,NULL													AS MIN_GUARANTEE_MINUTES
,NULL													AS MIN_GUARANTEE_TYPE
,NULL													AS AUTHORIZED_TO_INVOICE_TYPE
,NULL													AS HAS_HOLIDAYS
,NULL													AS INCLUDE_IN_CAS
,NULL													AS READY_FOR_XML
,NULL													AS SHOW_ID_EXTS
,NULL													AS INVOICE_ID

,@WS_ROW_CREATED_TIME									AS WS_ROW_CREATED_TIME
,NULL													AS WS_ROW_UPDATED_TIME

FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_3  W3

GROUP BY
 W3.FF_AGENT
,W3.[DATETIME]
,W3.HOUR_INTERVAL

ORDER BY
 MIN(W3.SEQNO)

--========================================================================
--UPDATE ADDITIONAL FIELDS IN WORK (_4) TABLE
--========================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 RESOURCE_NAME	= ISNULL(FF_AGENT,'')
,EMPLOYEE_ID	= ISNULL(FF_AGENT,'')
,TOTAL_CALLS	= INBOUND_CALLS + OUTBOUND_CALLS

--CONVERT DATETIME VALUES FROM EASTERN TO CENTRAL TIME
,[DATETIME]				= DATEADD(HH, -1, [DATETIME])
,STD_TENANT_START_TIME	= DATEADD(HH, -1, [DATETIME])

UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 HOUR_INTERVAL = DATEPART(HH, [DATETIME])

--=================================================================================================
--SET DATE_TIME KEY
--=================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_4      I
INNER JOIN      DATE_TIME                             DT   ON DT.CAL_DATE = I.[DATETIME]

-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4 ORDER BY SEQNO

--=================================================================================================
-- POPULATE AUTHORIZED_ACW_DUR FROM ACW WORK TABLE
--=================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 AUTHORIZED_ACW_DUR = ISNULL(A3.AUTHORIZED_ACW,0.00)
--SELECT *
FROM  WSOL_TB_IMPORTS_MONAT_INVOICING_3_ACW	A3
INNER JOIN WSOL_TB_IMPORTS_MONAT_INVOICING_4	W4 ON A3.FF_AGENT	 =  W4.FF_AGENT
												  AND A3.[DATETIME]	 =  W4.[DATETIME]

UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 AUTHORIZED_ACW_DUR = ISNULL(AUTHORIZED_ACW_DUR, 0.00)

--=================================================================================================
--UPDATE ADDITIONAL TOTALS FOR INVOICING
--=================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 TOTAL_AVAILABLE	= AVAILABLE_DUR
,TOTAL_RING			= RING_DUR
,TOTAL_TALK			= DIRECT_CALL_DUR + INCALL_DUR + DIRECT_OB_DIAL_DUR
,TOTAL_ACW			= CASE WHEN ACW_DUR < AUTHORIZED_ACW_DUR THEN ACW_DUR
						   ELSE AUTHORIZED_ACW_DUR END
,TOTAL_RONA			= RONA_DUR
,TOTAL_UNAVAILABLE	= UNAVAILABLE_SPECIAL_PROJECT_DUR + UNAVAILABLE_SYSTEM_ISSUES_IT_DUR + UNAVAILABLE_CALL_BACK_DUR  + UNAVAILABLE_EMAIL_DUR -- BILLABLE TIME
					  -- UNAVAILABLE_FLOOR_SUPPORT_DUR ADDED FOR RESOURCE AGENTS BELOW

UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 LOGGED_IN_DUR	= AVAILABLE_DUR + DIRECT_CALL_DUR + ISNULL(DIRECT_OB_DIAL_DUR,0.00) + RONA_DUR + INCALL_DUR + ACW_DUR + RING_DUR + UNAVAILABLE_DUR
,HANDLE_TIME	= DIRECT_CALL_DUR + ISNULL(DIRECT_OB_DIAL_DUR,0.00) + INCALL_DUR + ACW_DUR + RING_DUR

-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4 ORDER BY SEQNO

--=============================================================================
--SET SQL AGENT MAPPING FIELDS
--=============================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
  EMAIL			= ISNULL(IAM.EMAIL,'')
 ,ID_EXT		= CASE WHEN IAM.INVOICE_GROUP = 'RES' THEN 'MRA'
					   WHEN IAM.INVOICE_GROUP = 'FC'  THEN 'MFC'
					   WHEN IAM.INVOICE_GROUP = ''	  THEN 'MSA'
					   ELSE '' END
-- ,PAY_GROUP		= ISNULL(IAM.PAY_GROUP,0)
 ,RESOURCE_NAME	= ISNULL(IAM.RESOURCE_NAME,'')
 FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_4			I
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING	IAM  ON IAM.INVOICE_MAP_KEY = I.FF_AGENT

--==================================================================================
--ONLY RESOURCE AGENTS CAN BILL FOR UNAVAILABLE - FLOOR SUPPORT TIME
--==================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 TOTAL_UNAVAILABLE = TOTAL_UNAVAILABLE + UNAVAILABLE_FLOOR_SUPPORT_DUR
WHERE ID_EXT = 'MRA'

UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 SCHEDULER_ACL_NAME = CASE WHEN ID_EXT = 'MRA' THEN 'Monat Global Resource Agents'
						   WHEN ID_EXT = 'MFC' THEN 'Monat Global French Canadian Standard Agents'
						   WHEN ID_EXT = 'MSA' THEN 'Monat Global Standard Agents'
						   ELSE '' END

--=================================================================================================
--UPDATE FOR WEEKEND RATES
--=================================================================================================
SET DATEFIRST 1  -- = Monday  

UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 ID_EXT = CASE WHEN (ID_EXT IN ('MFC','MSA') AND DATEPART(dw, [DATETIME]) IN (6, 7)) THEN
				CASE WHEN ID_EXT = 'MFC' THEN 'MFW'
				     WHEN ID_EXT = 'MSA' THEN 'MSW'
					 ELSE ID_EXT
				END
			   ELSE ID_EXT
		  END

--==================================================================================
--CONTINUE INVOICE FIELD UPDATES
--==================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET --SELECT
  AIR_DAY_TYPE = CASE WHEN IG.HAS_HOLIDAYS = 'Y' AND
						 (    ISNULL(IH.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) OR
						   ( ISNULL(IHA.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) AND ISNULL(IHA.ID_EXT,'') <> '' )
						 )
					  THEN 'H' ELSE 'S' END  --AS AIR_DAY_TYPE  --H=Holiday  --S=Standard
 FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_4				I
 INNER JOIN      DATE_TIME										DT   ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_INVOICE_GROUPS		IG   ON IG.ID_EXT              = I.ID_EXT
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_INVOICE_HOLIDAYS		IH   ON IH.HOLIDAY_DATE        = CAST(DT.CAL_DATE_STRING AS DATETIME)
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_INVOICE_HOLIDAYS_ADDL	IHA  ON IHA.HOLIDAY_DATE       = CAST(DT.CAL_DATE_STRING AS DATETIME)
																	AND IHA.ID_EXT             = I.ID_EXT

--==================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
  AIR_ACW_FONT_COLOR             = 'Black'
 ,MIN_GUARANTEE_MINUTES          = ISNULL(IG.MIN_GUARANTEE_MINUTES,0)        --varies between scheduler acl names.
 ,MIN_GUARANTEE_TYPE             = ISNULL(IG.MIN_GUARANTEE_TYPE,'')          --varies between scheduler acl names.
 ,AUTHORIZED_TO_INVOICE_TYPE     = ISNULL(IG.AUTHORIZED_TO_INVOICE_TYPE,'')  --varies between scheduler acl names.

 ,HAS_HOLIDAYS    = IG.HAS_HOLIDAYS
 ,INCLUDE_IN_CAS  = IG.INCLUDE_IN_CAS
 ,READY_FOR_XML   = IG.READY_FOR_XML
 ,SHOW_ID_EXTS    = IG.SHOW_ID_EXTS
 FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_4			I
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_INVOICE_GROUPS	IG  ON IG.ID_EXT    = I.ID_EXT

--==================================================================================
 UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
   INVOICE_ID         = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
--  ,SCHEDULER_ACL_NAME = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
 FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_4	            AIA 
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_AIA_STATIC_DEFAULTS	AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT

--================================
--DATA INTEGRITY CHECK(S):
--================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''

--Check #1:  ============================================================================================================================================================
	SET @RCD_CNT = ( SELECT COUNT(*) FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4 )
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #1 FAILED! - File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #2:  ============================================================================================================================================================
	SET @RCD_CNT = ( SELECT COUNT(*) FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4 WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0 )  
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #2 FAILED! - Invalid DATETIME intervals in MONAT INVOICING IMPORT File.  Import was Cancelled.  Nothing was Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #3:  ============================================================================================================================================================
	SET @RCD_CNT = ( SELECT COUNT(*) FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4 WHERE ISNULL(FF_AGENT,'') = '' )  
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #3 FAILED! - Blank AGENT NAME(s) in MONAT INVOICING IMPORT File exist(s).  Import was Cancelled.  Nothing was Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END

--======================= ********** INSERT INTO PERMANENT TABLE (IF NO ERRORS FOUND), OR SKIP AND GO TO END (ERRORS FOUND) ********** ==================================
IF @ERR_CNT > 0 BEGIN
INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
(
 TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'MONAT_INVOICING'	--SUB_GROUP_NAME
	,@MSG1				--ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	--MUST RETURN AT LEAST ONE RECORD TO SSIS
INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'MONAT_INVOICING'	--SUB_GROUP_NAME
	,''					--ERROR_MSG
END
--=======================================================================================================================================================================

--==================================================================================
-- CALCULATE PAYMENT VALUES
--==================================================================================
-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4 ORDER BY SEQNO
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 CPROD = TOTAL_AVAILABLE + TOTAL_RING + TOTAL_TALK + TOTAL_ACW + TOTAL_UNAVAILABLE

UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 AUTHORIZED	= CASE WHEN CPROD > 3600.00 THEN 3600.00 ELSE CPROD END	

--===============================================
SET DATEFIRST 1  -- = Monday  
--===============================================
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME
,@DTM_MAX  DATETIME

SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN([DATETIME]) FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4))
SET @DTM_MAX = DATEADD(hh, 0,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4))


--=============================================================================
-- UPDATE PERMANENT TABLE - IF DATA FROM SAME DATA SOURCE (FTP FILE)
--=============================================================================

UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_NEW SET
-- FF_AGENT							= W4.FF_AGENT
 EVENT_DURATION_IN_INTERVAL_SECS	= W4.EVENT_DURATION_IN_INTERVAL_SECS

,SEQNO_ADDED_TIME					= W4.SEQNO_ADDED_TIME
,SEQNO								= W4.SEQNO
,FTP_FILE_NAME						= W4.FTP_FILE_NAME

,RESOURCE_NAME						= W4.RESOURCE_NAME					
,[DATETIME]							= W4.[DATETIME]
,HOUR_INTERVAL						= W4.HOUR_INTERVAL
,EMPLOYEE_ID						= W4.EMPLOYEE_ID
,STD_TENANT_START_TIME				= W4.STD_TENANT_START_TIME

,INBOUND_CALLS						= W4.INBOUND_CALLS
,OUTBOUND_CALLS						= W4.OUTBOUND_CALLS
,TOTAL_CALLS						= W4.TOTAL_CALLS

,LOGGED_IN_DUR						= W4.LOGGED_IN_DUR
,AVAILABLE_DUR						= W4.AVAILABLE_DUR
,BUSY_DUR							= W4.BUSY_DUR
,DIRECT_CALL_DUR					= W4.DIRECT_CALL_DUR
,DIRECT_OB_DIAL_DUR					= W4.DIRECT_OB_DIAL_DUR
,OFF_WORK_DUR						= W4.OFF_WORK_DUR
,UNKNOWN_DUR						= W4.UNKNOWN_DUR
,RONA_DUR							= W4.RONA_DUR
,RONA_SPECIAL_PROJECT_DUR			= W4.RONA_SPECIAL_PROJECT_DUR
,RONA_SYSTEM_ISSUES_IT_DUR			= W4.RONA_SYSTEM_ISSUES_IT_DUR
,RONA_IDLE_DUR						= W4.RONA_IDLE_DUR
,RONA_CALL_BACK_DUR					= W4.RONA_CALL_BACK_DUR
,INCALL_DUR							= W4.INCALL_DUR
,INCALL_IDLE_DUR					= W4.INCALL_IDLE_DUR
,INCALL_CALL_BACK_DUR				= W4.INCALL_CALL_BACK_DUR
,INCALL_SPECIAL_PROJECT_DUR			= W4.INCALL_SPECIAL_PROJECT_DUR
,INCALL_ON_BREAK_DUR				= W4.INCALL_ON_BREAK_DUR
,ACW_DUR							= W4.ACW_DUR
,AUTHORIZED_ACW_DUR					= W4.AUTHORIZED_ACW_DUR
,ACW_ON_BREAK_DUR					= W4.ACW_ON_BREAK_DUR
,ACW_CALL_BACK_DUR					= W4.ACW_CALL_BACK_DUR
,ACW_IDLE_DUR						= W4.ACW_IDLE_DUR
,ACW_SPECIAL_PROJECT_DUR			= W4.ACW_SPECIAL_PROJECT_DUR
,ACW_FLOOR_SUPPORT_DUR				= W4.ACW_FLOOR_SUPPORT_DUR
,ACW_SYSTEM_ISSUES_IT_DUR			= W4.ACW_SYSTEM_ISSUES_IT_DUR
,RING_DUR							= W4.RING_DUR
,RING_BREAK_DUR						= W4.RING_BREAK_DUR
,RING_SPECIAL_PROJECT_DUR			= W4.RING_SPECIAL_PROJECT_DUR
,RING_IDLE_DUR						= W4.RING_IDLE_DUR
,RING_SYSTEM_ISSUES_IT_DUR			= W4.RING_SYSTEM_ISSUES_IT_DUR
,RING_CALL_BACK_DUR					= W4.RING_CALL_BACK_DUR
,UNAVAILABLE_DUR					= W4.UNAVAILABLE_DUR
,UNAVAILABLE_ON_BREAK_DUR			= W4.UNAVAILABLE_ON_BREAK_DUR
,UNAVAILABLE_CALL_BACK_DUR			= W4.UNAVAILABLE_CALL_BACK_DUR
,UNAVAILABLE_IDLE_DUR				= W4.UNAVAILABLE_IDLE_DUR
,UNAVAILABLE_PERSONAL_TIME_DUR		= W4.UNAVAILABLE_PERSONAL_TIME_DUR
,UNAVAILABLE_RR_DUR					= W4.UNAVAILABLE_RR_DUR
,UNAVAILABLE_SPECIAL_PROJECT_DUR	= W4.UNAVAILABLE_SPECIAL_PROJECT_DUR
,UNAVAILABLE_FLOOR_SUPPORT_DUR		= W4.UNAVAILABLE_FLOOR_SUPPORT_DUR
,UNAVAILABLE_SYSTEM_ISSUES_IT_DUR	= W4.UNAVAILABLE_SYSTEM_ISSUES_IT_DUR
,UNAVAILABLE_EMAIL_DUR				= W4.UNAVAILABLE_EMAIL_DUR
,TOTAL_AVAILABLE					= W4.TOTAL_AVAILABLE
,TOTAL_RING							= W4.TOTAL_RING
,TOTAL_TALK							= W4.TOTAL_TALK
,TOTAL_ACW							= W4.TOTAL_ACW
,TOTAL_UNAVAILABLE					= W4.TOTAL_UNAVAILABLE
,TOTAL_RONA							= W4.TOTAL_RONA
,HANDLE_TIME						= W4.HANDLE_TIME
,CPROD								= W4.CPROD
,AUTHORIZED							= W4.AUTHORIZED
,EMAIL								= W4.EMAIL
--,ID_EXT							= W4.ID_EXT
,SCHEDULER_ACL_NAME					= W4.SCHEDULER_ACL_NAME
--,STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W4.CAL_DATE
,TENANT_KEY							= W4.TENANT_KEY
,AIR_DAY_TYPE						= W4.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W4.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES				= W4.MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE					= W4.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W4.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W4.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W4.INCLUDE_IN_CAS
,READY_FOR_XML						= W4.READY_FOR_XML
,SHOW_ID_EXTS						= W4.SHOW_ID_EXTS
--,INVOICE_ID						= W4.INVOICE_ID
,WS_ROW_CREATED_TIME				= NULL
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_4		W4
INNER JOIN      WSOL_TB_IMPORTS_MONAT_INVOICING_NEW		G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
														   AND G.FF_AGENT						= W4.FF_AGENT
														   AND G.ID_EXT							= W4.ID_EXT
														   AND G.INVOICE_ID						= W4.INVOICE_ID

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_AGENT						= W4.FF_AGENT
  AND G.ID_EXT							= W4.ID_EXT
  AND G.INVOICE_ID						= W4.INVOICE_ID
--  AND G.FTP_FILE_NAME					= W4.FTP_FILE_NAME	--<<<<< ONLY RECORDS FROM THE SAME FTP FILE

--=============================================================================
-- UPDATE PERMANENT TABLE - IF DATA FROM DIFFERENT DATA SOURCE (FTP FILE)
--=============================================================================
/*
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_NEW SET
-- FF_AGENT							= W4.FF_AGENT
 EVENT_DURATION_IN_INTERVAL_SECS	= CAST(G.EVENT_DURATION_IN_INTERVAL_SECS AS INT) + CAST(W4.EVENT_DURATION_IN_INTERVAL_SECS AS INT)

,SEQNO_ADDED_TIME					= W4.SEQNO_ADDED_TIME
,SEQNO								= W4.SEQNO
,FTP_FILE_NAME						= W4.FTP_FILE_NAME

,RESOURCE_NAME						= W4.RESOURCE_NAME					
,[DATETIME]							= W4.[DATETIME]
,HOUR_INTERVAL						= W4.HOUR_INTERVAL
,EMPLOYEE_ID						= W4.EMPLOYEE_ID
,STD_TENANT_START_TIME				= W4.STD_TENANT_START_TIME

,INBOUND_CALLS						= G.INBOUND_CALLS						+ W4.INBOUND_CALLS			
,OUTBOUND_CALLS						= G.OUTBOUND_CALLS						+ W4.OUTBOUND_CALLS
,TOTAL_CALLS						= G.TOTAL_CALLS							+ W4.TOTAL_CALLS

,LOGGED_IN_DUR						= G.LOGGED_IN_DUR						+ W4.LOGGED_IN_DUR
,AVAILABLE_DUR						= G.AVAILABLE_DUR						+ W4.AVAILABLE_DUR
,BUSY_DUR							= G.BUSY_DUR							+ W4.BUSY_DUR
,DIRECT_CALL_DUR					= G.DIRECT_CALL_DUR						+ W4.DIRECT_CALL_DUR
,DIRECT_OB_DIAL_DUR					= G.DIRECT_OB_DIAL_DUR					+ W4.DIRECT_OB_DIAL_DUR
,OFF_WORK_DUR						= G.OFF_WORK_DUR						+ W4.OFF_WORK_DUR
,UNKNOWN_DUR						= G.UNKNOWN_DUR							+ W4.UNKNOWN_DUR
,RONA_DUR							= G.RONA_DUR							+ W4.RONA_DUR
,RONA_SPECIAL_PROJECT_DUR			= G.RONA_SPECIAL_PROJECT_DUR			+ W4.RONA_SPECIAL_PROJECT_DUR
,RONA_SYSTEM_ISSUES_IT_DUR			= G.RONA_SYSTEM_ISSUES_IT_DUR			+ W4.RONA_SYSTEM_ISSUES_IT_DUR
,RONA_IDLE_DUR						= G.RONA_IDLE_DUR						+ W4.RONA_IDLE_DUR
,RONA_CALL_BACK_DUR					= G.RONA_CALL_BACK_DUR					+ W4.RONA_CALL_BACK_DUR
,INCALL_DUR							= G.INCALL_DUR							+ W4.INCALL_DUR
,INCALL_IDLE_DUR					= G.INCALL_IDLE_DUR						+ W4.INCALL_IDLE_DUR
,INCALL_CALL_BACK_DUR				= G.INCALL_CALL_BACK_DUR				+ W4.INCALL_CALL_BACK_DUR
,INCALL_SPECIAL_PROJECT_DUR			= G.INCALL_SPECIAL_PROJECT_DUR			+ W4.INCALL_SPECIAL_PROJECT_DUR
,INCALL_ON_BREAK_DUR				= G.INCALL_ON_BREAK_DUR					+ W4.INCALL_ON_BREAK_DUR
,ACW_DUR							= G.ACW_DUR								+ W4.ACW_DUR
,AUTHORIZED_ACW_DUR					= G.AUTHORIZED_ACW_DUR					+ W4.AUTHORIZED_ACW_DUR
,ACW_ON_BREAK_DUR					= G.ACW_ON_BREAK_DUR					+ W4.ACW_ON_BREAK_DUR
,ACW_CALL_BACK_DUR					= G.ACW_CALL_BACK_DUR					+ W4.ACW_CALL_BACK_DUR
,ACW_IDLE_DUR						= G.ACW_IDLE_DUR						+ W4.ACW_IDLE_DUR
,ACW_SPECIAL_PROJECT_DUR			= G.ACW_SPECIAL_PROJECT_DUR				+ W4.ACW_SPECIAL_PROJECT_DUR
,ACW_FLOOR_SUPPORT_DUR				= G.ACW_FLOOR_SUPPORT_DUR				+ W4.ACW_FLOOR_SUPPORT_DUR
,ACW_SYSTEM_ISSUES_IT_DUR			= G.ACW_SYSTEM_ISSUES_IT_DUR			+ W4.ACW_SYSTEM_ISSUES_IT_DUR
,RING_DUR							= G.RING_DUR							+ W4.RING_DUR
,RING_BREAK_DUR						= G.RING_BREAK_DUR						+ W4.RING_BREAK_DUR
,RING_SPECIAL_PROJECT_DUR			= G.RING_SPECIAL_PROJECT_DUR			+ W4.RING_SPECIAL_PROJECT_DUR
,RING_IDLE_DUR						= G.RING_IDLE_DUR						+ W4.RING_IDLE_DUR
,RING_SYSTEM_ISSUES_IT_DUR			= G.RING_SYSTEM_ISSUES_IT_DUR			+ W4.RING_SYSTEM_ISSUES_IT_DUR
,RING_CALL_BACK_DUR					= G.RING_CALL_BACK_DUR					+ W4.RING_CALL_BACK_DUR
,UNAVAILABLE_DUR					= G.UNAVAILABLE_DUR						+ W4.UNAVAILABLE_DUR
,UNAVAILABLE_ON_BREAK_DUR			= G.UNAVAILABLE_ON_BREAK_DUR			+ W4.UNAVAILABLE_ON_BREAK_DUR
,UNAVAILABLE_CALL_BACK_DUR			= G.UNAVAILABLE_CALL_BACK_DUR			+ W4.UNAVAILABLE_CALL_BACK_DUR
,UNAVAILABLE_IDLE_DUR				= G.UNAVAILABLE_IDLE_DUR				+ W4.UNAVAILABLE_IDLE_DUR
,UNAVAILABLE_PERSONAL_TIME_DUR		= G.UNAVAILABLE_PERSONAL_TIME_DUR		+ W4.UNAVAILABLE_PERSONAL_TIME_DUR
,UNAVAILABLE_RR_DUR					= G.UNAVAILABLE_RR_DUR					+ W4.UNAVAILABLE_RR_DUR
,UNAVAILABLE_SPECIAL_PROJECT_DUR	= G.UNAVAILABLE_SPECIAL_PROJECT_DUR		+ W4.UNAVAILABLE_SPECIAL_PROJECT_DUR
,UNAVAILABLE_FLOOR_SUPPORT_DUR		= G.UNAVAILABLE_FLOOR_SUPPORT_DUR		+ W4.UNAVAILABLE_FLOOR_SUPPORT_DUR
,UNAVAILABLE_SYSTEM_ISSUES_IT_DUR	= G.UNAVAILABLE_SYSTEM_ISSUES_IT_DUR	+ W4.UNAVAILABLE_SYSTEM_ISSUES_IT_DUR
,UNAVAILABLE_EMAIL_DUR				= G.UNAVAILABLE_EMAIL_DUR				+ W4.UNAVAILABLE_EMAIL_DUR
,TOTAL_AVAILABLE					= G.TOTAL_AVAILABLE						+ W4.TOTAL_AVAILABLE
,TOTAL_RING							= G.TOTAL_RING							+ W4.TOTAL_RING
,TOTAL_TALK							= G.TOTAL_TALK							+ W4.TOTAL_TALK
,TOTAL_ACW							= G.TOTAL_ACW							+ W4.TOTAL_ACW
,TOTAL_UNAVAILABLE					= G.TOTAL_UNAVAILABLE					+ W4.TOTAL_UNAVAILABLE
,TOTAL_RONA							= G.TOTAL_RONA							+ W4.TOTAL_RONA
,CPROD								= G.CPROD								+ W4.CPROD
,AUTHORIZED							= G.AUTHORIZED							+ W4.AUTHORIZED
,EMAIL								= W4.EMAIL
--,ID_EXT							= W4.ID_EXT
,SCHEDULER_ACL_NAME					= W4.SCHEDULER_ACL_NAME
--,STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W4.CAL_DATE
,TENANT_KEY							= W4.TENANT_KEY
,AIR_DAY_TYPE						= W4.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W4.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES				= W4.MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE					= W4.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W4.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W4.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W4.INCLUDE_IN_CAS
,READY_FOR_XML						= W4.READY_FOR_XML
,SHOW_ID_EXTS						= W4.SHOW_ID_EXTS
--,INVOICE_ID						= W4.INVOICE_ID
,WS_ROW_CREATED_TIME				= G.WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_4		W4
INNER JOIN      WSOL_TB_IMPORTS_MONAT_INVOICING_NEW		G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
														   AND G.FF_AGENT						= W4.FF_AGENT
														   AND G.ID_EXT							= W4.ID_EXT
														   AND G.INVOICE_ID						= W4.INVOICE_ID

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY	 = W4.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_AGENT						 = W4.FF_AGENT
  AND G.ID_EXT							 = W4.ID_EXT
  AND G.INVOICE_ID						 = W4.INVOICE_ID
  AND G.FTP_FILE_NAME					<> W4.FTP_FILE_NAME  --<<<< ONLY RECORDS FROM A DIFFERENT FTP FILE
*/
--==========================================
--INSERT INTO PERMANENT IMPORT TABLE: 
--==========================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_NEW
(FF_AGENT
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_TIME
,INBOUND_CALLS
,OUTBOUND_CALLS
,TOTAL_CALLS
,LOGGED_IN_DUR
,AVAILABLE_DUR
,BUSY_DUR
,DIRECT_CALL_DUR
,DIRECT_OB_DIAL_DUR
,OFF_WORK_DUR
,UNKNOWN_DUR
,RONA_DUR
,RONA_SPECIAL_PROJECT_DUR
,RONA_SYSTEM_ISSUES_IT_DUR
,RONA_IDLE_DUR
,RONA_CALL_BACK_DUR
,INCALL_DUR
,INCALL_IDLE_DUR
,INCALL_CALL_BACK_DUR
,INCALL_SPECIAL_PROJECT_DUR
,INCALL_ON_BREAK_DUR
,ACW_DUR
,AUTHORIZED_ACW_DUR
,ACW_ON_BREAK_DUR
,ACW_CALL_BACK_DUR
,ACW_IDLE_DUR
,ACW_SPECIAL_PROJECT_DUR
,ACW_FLOOR_SUPPORT_DUR
,ACW_SYSTEM_ISSUES_IT_DUR
,RING_DUR
,RING_BREAK_DUR
,RING_SPECIAL_PROJECT_DUR
,RING_IDLE_DUR
,RING_SYSTEM_ISSUES_IT_DUR
,RING_CALL_BACK_DUR
,UNAVAILABLE_DUR
,UNAVAILABLE_ON_BREAK_DUR
,UNAVAILABLE_CALL_BACK_DUR
,UNAVAILABLE_IDLE_DUR
,UNAVAILABLE_PERSONAL_TIME_DUR
,UNAVAILABLE_RR_DUR
,UNAVAILABLE_SPECIAL_PROJECT_DUR
,UNAVAILABLE_FLOOR_SUPPORT_DUR
,UNAVAILABLE_SYSTEM_ISSUES_IT_DUR
,UNAVAILABLE_EMAIL_DUR
,TOTAL_AVAILABLE
,TOTAL_RING
,TOTAL_TALK
,TOTAL_ACW
,TOTAL_UNAVAILABLE
,TOTAL_RONA
,HANDLE_TIME
,CPROD
,AUTHORIZED
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W4.FF_AGENT
,W4.EVENT_DURATION_IN_INTERVAL_SECS
,W4.SEQNO_ADDED_TIME
,W4.SEQNO
,W4.FTP_FILE_NAME
,W4.RESOURCE_NAME
,W4.[DATETIME]
,W4.HOUR_INTERVAL
,W4.EMPLOYEE_ID
,W4.STD_TENANT_START_TIME
,W4.INBOUND_CALLS
,W4.OUTBOUND_CALLS
,W4.TOTAL_CALLS
,W4.LOGGED_IN_DUR
,W4.AVAILABLE_DUR
,W4.BUSY_DUR
,W4.DIRECT_CALL_DUR
,W4.DIRECT_OB_DIAL_DUR
,W4.OFF_WORK_DUR
,W4.UNKNOWN_DUR
,W4.RONA_DUR
,W4.RONA_SPECIAL_PROJECT_DUR
,W4.RONA_SYSTEM_ISSUES_IT_DUR
,W4.RONA_IDLE_DUR
,W4.RONA_CALL_BACK_DUR
,W4.INCALL_DUR
,W4.INCALL_IDLE_DUR
,W4.INCALL_CALL_BACK_DUR
,W4.INCALL_SPECIAL_PROJECT_DUR
,W4.INCALL_ON_BREAK_DUR
,W4.ACW_DUR
,W4.AUTHORIZED_ACW_DUR
,W4.ACW_ON_BREAK_DUR
,W4.ACW_CALL_BACK_DUR
,W4.ACW_IDLE_DUR
,W4.ACW_SPECIAL_PROJECT_DUR
,W4.ACW_FLOOR_SUPPORT_DUR
,W4.ACW_SYSTEM_ISSUES_IT_DUR
,W4.RING_DUR
,W4.RING_BREAK_DUR
,W4.RING_SPECIAL_PROJECT_DUR
,W4.RING_IDLE_DUR
,W4.RING_SYSTEM_ISSUES_IT_DUR
,W4.RING_CALL_BACK_DUR
,W4.UNAVAILABLE_DUR
,W4.UNAVAILABLE_ON_BREAK_DUR
,W4.UNAVAILABLE_CALL_BACK_DUR
,W4.UNAVAILABLE_IDLE_DUR
,W4.UNAVAILABLE_PERSONAL_TIME_DUR
,W4.UNAVAILABLE_RR_DUR
,W4.UNAVAILABLE_SPECIAL_PROJECT_DUR
,W4.UNAVAILABLE_FLOOR_SUPPORT_DUR
,W4.UNAVAILABLE_SYSTEM_ISSUES_IT_DUR
,W4.UNAVAILABLE_EMAIL_DUR
,W4.TOTAL_AVAILABLE
,W4.TOTAL_RING
,W4.TOTAL_TALK
,W4.TOTAL_ACW
,W4.TOTAL_UNAVAILABLE
,W4.TOTAL_RONA
,W4.HANDLE_TIME
,W4.CPROD
,W4.AUTHORIZED
,W4.EMAIL
,W4.ID_EXT
,W4.SCHEDULER_ACL_NAME
,W4.STD_TENANT_START_DATE_TIME_KEY
,W4.CAL_DATE
,W4.TENANT_KEY
,W4.AIR_DAY_TYPE
,W4.AIR_ACW_FONT_COLOR
,W4.MIN_GUARANTEE_MINUTES
,W4.MIN_GUARANTEE_TYPE
,W4.AUTHORIZED_TO_INVOICE_TYPE
,W4.HAS_HOLIDAYS
,W4.INCLUDE_IN_CAS
,W4.READY_FOR_XML
,W4.SHOW_ID_EXTS
,W4.INVOICE_ID

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_4		W4

LEFT JOIN       WSOL_TB_IMPORTS_MONAT_INVOICING_NEW		G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
														   AND G.FF_AGENT						= W4.FF_AGENT
														   AND G.ID_EXT							= W4.ID_EXT
														   AND G.INVOICE_ID						= W4.INVOICE_ID
														 
WHERE ( G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W4.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( G.FF_AGENT							IS NULL AND ISNULL(W4.FF_AGENT,'') <> '' )
  AND ( G.ID_EXT							IS NULL AND ISNULL(W4.ID_EXT,'') <> '' )
  AND ( G.INVOICE_ID						IS NULL AND ISNULL(W4.INVOICE_ID,'') <> '' )

-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_NEW
--==========================================
SET DATEFIRST 1  -- = Monday  
--==========================================

--===============================================================================================================================
IF OBJECT_ID('TEMPDB..#DT_EASY_WEEKS') IS NOT NULL BEGIN
   DROP TABLE #DT_EASY_WEEKS
END
CREATE TABLE #DT_EASY_WEEKS
(CAL_DATE_STRING      VARCHAR(10)
,CAL_WEEK_START_DATE  DATETIME
,CAL_WEEK_END_DATE    DATETIME
,PAY_CYCLE_CLOSURE_DATE DATETIME
)
INSERT INTO #DT_EASY_WEEKS
SELECT
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
FROM DATE_TIME DT
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
GROUP BY 
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE 
--===========================
UPDATE #DT_EASY_WEEKS SET CAL_WEEK_END_DATE = DATEADD(DD,6,CAL_WEEK_START_DATE)
UPDATE #DT_EASY_WEEKS SET
 PAY_CYCLE_CLOSURE_DATE = (CASE WHEN (DATEDIFF(DD,CAST('04/27/2014' AS DATETIME),CAL_WEEK_END_DATE) % 14) = 0 THEN
									CAL_WEEK_END_DATE
								ELSE
									DATEADD(DD,7,CAL_WEEK_END_DATE)
								END)


--====================================================================================================================================
--CREATE TEMP TABLE TO HOLD NORMALIZED DATA STRUCTURE
--====================================================================================================================================
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA
END
CREATE TABLE #WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](100) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.FF_AGENT  --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING				--[DATE]             
,DT.LABEL_HH24 + ':00'			--HOD_INTERVAL

,AIA.LOGGED_IN_DUR										--AU_DK_LOGGED_IN_DURATION
,AIA.AVAILABLE_DUR										--AU_DK_AVAILABLE_DURATION

,AIA.RING_DUR + AIA.INCALL_DUR + AIA.DIRECT_OB_DIAL_DUR + DIRECT_CALL_DUR	--AU_DK_TALK_DURATION
,0														--AU_DK_IB_TALK_DURATION
,0														--AU_DK_OB_TALK_DURATION

,AIA.TOTAL_ACW											--AU_DK_CONVENTIONAL_ACW
,AIA.UNAVAILABLE_DUR							 		--AU_DK_NR_DURATION
,0														--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0														--AU_DK_ADJUSTED_NR_DURATION
,AIA.CPROD												--AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.CPROD												--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS  

,0		--AU_DK_XFER_COUNT
,0		--AU_DK_HOLD_COUNT
,0		--AU_DK_CONFERENCE_COUNT
,0		--AU_DK_CONSULT_COUNT
,0		--AU_DK_PUP_COUNT

,0		--AU_DK_OFFERED_COUNT
,0		--AU_DK_HANDLED_COUNT
,0		--AU_DK_IB_HANDLE_COUNT
,0		--AU_DK_OB_HANDLE_COUNT
													
,0		--AU_DK_RONA_COUNT
,0		--AU_DK_AWR_COUNT

,AIA.AUTHORIZED	--MINIMUM_GUARANTEE
,AIA.AUTHORIZED	--AUTHORIZED_TO_INVOICE

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_MINUTES
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID  --CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID 
,AIA.RESOURCE_NAME
,NULL			--AIA.AIRITKDUR
,NULL			--AIA.AIRIACDUR
,DBO.GETDATE()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL			--	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
--SELECT TOP 1000 *
FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_4            AIA 
INNER JOIN      WSOL_TB_IMPORTS_MONAT_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      WSOL_TB_IMPORTS_MONAT_SD_INVOICE_GROUPS      CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME									 DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS								DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')
  AND (ISNULL(AIA.RESOURCE_NAME,'') <> '')
  AND AIA.AUTHORIZED <> 0.00											--<<<<<---- FILTER OUT RECORDS WHERE AUTHORIZED TIME = 0.00


--============================================================================================
--UPDATE WSOL_TB_...UV_ANT_AIA TABLE - IF DATA FROM THE SAME DATA SOURCE (FTP FILE)
--============================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA SET
 [PLATFORM]							= W1.[PLATFORM]
,[STATUS]							= W1.[STATUS]
--,INVOICE_MAP_KEY					= W1.INVOICE_MAP_KEY
,FIELD_NAME							= W1.FIELD_NAME
,SCHEDULER_PROJECT_ID				= W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME					= W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION					= W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID			= W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME			= W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID				= W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME			= W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID			= W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID	= W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID		= W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY			= W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID					= W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID					= W1.HOLIDAY_INVOICE_ID
,HOLIDAY							= W1.HOLIDAY
,FILE_FORMAT_OF_PUSH				= W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID		= W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL							= W1.NEW_ACL
,CURRENT_CATS						= W1.CURRENT_CATS
,CATS_ID							= W1.CATS_ID
,PATS_ID							= W1.PATS_ID
,SMART_ELIGIBLE						= W1.SMART_ELIGIBLE
,SMART_TIER_1						= W1.SMART_TIER_1
,SMART_TIER_2						= W1.SMART_TIER_2
,SMART_TIER_3						= W1.SMART_TIER_3
,INTERVAL							= W1.INTERVAL
,[DATE]								= W1.[DATE]
,HOD_INTERVAL						= W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION			= W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION			= W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION				= W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION				= W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION				= W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW				= W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION					= W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT					= W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT					= W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT				= W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT				= W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT					= W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT				= W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT				= W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT				= W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT				= W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT					= W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT					= W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE					= W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE				= W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE					= W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE				= W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
,FTP_FILE_NAME						= W1.FTP_FILE_NAME
,EMAIL								= W1.EMAIL

--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W1.CAL_DATE
,TENANT_KEY							= W1.TENANT_KEY
,AIR_DAY_TYPE						= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE					= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE					= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W1.INCLUDE_IN_CAS
,READY_FOR_XML						= W1.READY_FOR_XML
,SHOW_ID_EXTS						= W1.SHOW_ID_EXTS
,INVOICE_ID							= W1.INVOICE_ID
,RESOURCE_NAME						= W1.RESOURCE_NAME

,AIRITKDUR							= W1.AIRITKDUR
,AIRIACDUR							= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

FROM            #WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA   W1

INNER JOIN      WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													   AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
													   AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )
--  AND ( UV.FTP_FILE_NAME				  = W1.FTP_FILE_NAME )		--<<<<< ONLY RECORDS FROM THE SAME FTP FILE

/*
--============================================================================================
--UPDATE WSOL_TB_...UV_ANT_AIA TABLE - IF DATA FROM DIFFERENT DATA SOURCE (FTP FILE) :
--============================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA SET
 [PLATFORM]							= W1.[PLATFORM]
,[STATUS]							= W1.[STATUS]
--,INVOICE_MAP_KEY					= W1.INVOICE_MAP_KEY
,FIELD_NAME							= W1.FIELD_NAME
,SCHEDULER_PROJECT_ID				= W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME					= W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION					= W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID			= W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME			= W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID				= W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME			= W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID			= W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID	= W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID		= W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY			= W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID					= W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID					= W1.HOLIDAY_INVOICE_ID
,HOLIDAY							= W1.HOLIDAY
,FILE_FORMAT_OF_PUSH				= W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID		= W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL							= W1.NEW_ACL
,CURRENT_CATS						= W1.CURRENT_CATS
,CATS_ID							= W1.CATS_ID
,PATS_ID							= W1.PATS_ID
,SMART_ELIGIBLE						= W1.SMART_ELIGIBLE
,SMART_TIER_1						= W1.SMART_TIER_1
,SMART_TIER_2						= W1.SMART_TIER_2
,SMART_TIER_3						= W1.SMART_TIER_3
,INTERVAL							= W1.INTERVAL
,[DATE]								= W1.[DATE]
,HOD_INTERVAL						= W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION			= UV.AU_DK_LOGGED_IN_DURATION			+ W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION			= UV.AU_DK_AVAILABLE_DURATION			+ W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION				= UV.AU_DK_TALK_DURATION				+ W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION				= UV.AU_DK_IB_TALK_DURATION				+ W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION				= UV.AU_DK_OB_TALK_DURATION				+ W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW				= UV.AU_DK_CONVENTIONAL_ACW				+ W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION					= UV.AU_DK_NR_DURATION					+ W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = UV.AU_DK_PSEUDO_PRODUCTIVE_DURATION	+ W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = UV.AU_DK_ADJUSTED_NR_DURATION			+ W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = UV.AU_DK_TOTAL_PRODUCTIVE_DURATION	+ W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = UV.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS	+ W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT					= UV.AU_DK_XFER_COUNT					+ W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT					= UV.AU_DK_HOLD_COUNT					+ W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT				= UV.AU_DK_CONFERENCE_COUNT				+ W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT				= UV.AU_DK_CONSULT_COUNT				+ W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT					= UV.AU_DK_PUP_COUNT					+ W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT				= UV.AU_DK_OFFERED_COUNT				+ W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT				= UV.AU_DK_HANDLED_COUNT				+ W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT				= UV.AU_DK_IB_HANDLE_COUNT				+ W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT				= UV.AU_DK_OB_HANDLE_COUNT				+ W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT					= UV.AU_DK_RONA_COUNT					+ W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT					= UV.AU_DK_AWR_COUNT					+ W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE					= UV.MINIMUM_GUARANTEE					+ W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE				= UV.AUTHORIZED_TO_INVOICE				+ W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE					= W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE				= W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
,FTP_FILE_NAME						= W1.FTP_FILE_NAME
,EMAIL								= W1.EMAIL

--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W1.CAL_DATE
,TENANT_KEY							= W1.TENANT_KEY
,AIR_DAY_TYPE						= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE					= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE					= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W1.INCLUDE_IN_CAS
,READY_FOR_XML						= W1.READY_FOR_XML
,SHOW_ID_EXTS						= W1.SHOW_ID_EXTS
,INVOICE_ID							= W1.INVOICE_ID
,RESOURCE_NAME						= W1.RESOURCE_NAME

,AIRITKDUR							= W1.AIRITKDUR
,AIRIACDUR							= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

FROM            #WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA   W1

INNER JOIN      WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													   AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
													   AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )
  AND ( UV.FTP_FILE_NAME				 <> W1.FTP_FILE_NAME )		--<<<<< ONLY RECORDS FROM A DIFFERENT FTP FILE
*/
--=====================================================
--INSERT TMP TABLE FIELDS INTO WSOL_TB_... TABLE:
--=====================================================
INSERT INTO [WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA   AIA
LEFT JOIN       WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
													   AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
												       AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )


--===============================================
EARLY_EXIT:
--===============================================