
CREATE PROCEDURE [dbo].[uspIMPORTS_DATALOT_INVOICING_IMPORT_UPDATE]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PROCESS_TYPE       VARCHAR(4)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_DATALOT_INVOICING_IMPORT_UPDATE] '12/16/2016','12/31/2016','MANU'

--========================================
-- SET DATE VARIABLES
--========================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @PROCESS_TYPE = 'AUTO'
	BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE 
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),DATEADD(DD,-1,DBO.GETDATE()),101) AS DATETIME)	-- SET TO YESTERDAY --CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE 
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--	SELECT @DTM_BEG, @DTM_END
--	SELECT * FROM YZ_TB_IMPORTS_DATALOT_INVOICING ORDER BY [DATETIME] DESC
--=========================================================================
--CREATE TMP TABLE:
--=========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_DATALOT_INVOICING_XFERS_PER_HOUR') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_DATALOT_INVOICING_XFERS_PER_HOUR
END
CREATE TABLE #IMPORTS_DATALOT_INVOICING_XFERS_PER_HOUR
(AGENT_ID						VARCHAR(50)
,LOGGED_IN_TIME					DECIMAL(10,2)
,THREE_MINUTE_XFERS				INT
,THREE_MINUTE_XFERS_PER_HOUR	DECIMAL(10,2)
,ELIGIBLE_FOR_XFER_BONUS		VARCHAR(1)
)

--========================================================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================================================
    INSERT INTO #IMPORTS_DATALOT_INVOICING_XFERS_PER_HOUR
	SELECT 
	 UA.AGENT_ID						AS AGENT_ID
	,ISNULL(UA.LOGGED_IN_TIME,0.00)		AS LOGGED_IN_TIME
	,ISNULL(UA.THREE_MINUTE_XFERS,0)	AS THREE_MINUTE_XFERS
	,UA.THREE_MINUTE_XFERS_PER_HOUR		AS THREE_MINUTE_XFERS_PER_HOUR
	,UA.ELIGIBLE_FOR_XFER_BONUS			AS ELIGIBLE_FOR_XFER_BONUS
	FROM
	(	SELECT
		 C.FF_AGENT_ID									AS AGENT_ID
		,( SUM(ISNULL(C.ONLINE_TIME,0.00)) + 
		   SUM(ISNULL(C.WRAP_ADJ_TIME,0.00)) ) / 60.0	AS LOGGED_IN_TIME
		,SUM(ISNULL(C.AUTHORIZED_TRANSFERS,0))			AS THREE_MINUTE_XFERS
		,NULL											AS THREE_MINUTE_XFERS_PER_HOUR
		,NULL											AS ELIGIBLE_FOR_XFER_BONUS
		--SELECT TOP 100 *

		FROM            YZ_TB_IMPORTS_DATALOT_INVOICING		C
		INNER JOIN      DATE_TIME							DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 C.FF_AGENT_ID
	) UA

UPDATE #IMPORTS_DATALOT_INVOICING_XFERS_PER_HOUR SET
 THREE_MINUTE_XFERS_PER_HOUR = THREE_MINUTE_XFERS / LOGGED_IN_TIME

UPDATE #IMPORTS_DATALOT_INVOICING_XFERS_PER_HOUR SET
 ELIGIBLE_FOR_XFER_BONUS = CASE WHEN THREE_MINUTE_XFERS_PER_HOUR >= 5 THEN 'Y'		--<<<<<<<<<<< SET XFER PER HOUR THRESHOLD HERE --<<<<<<<<<<<<<<
								ELSE 'N' END


--SELECT * FROM #IMPORTS_DATALOT_INVOICING_XFERS_PER_HOUR
--SELECT * FROM  YZ_TB_IMPORTS_DATALOT_INVOICING
--=============================================
--UPDATE PERMANENT INVOICE TABLE
--=============================================
UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING SET
 ELIGIBLE_FOR_XFER_BONUS	= TMP1.ELIGIBLE_FOR_XFER_BONUS
,WS_ROW_UPDATED_TIME		= DBO.GETDATE()
--  SELECT *
FROM            #IMPORTS_DATALOT_INVOICING_XFERS_PER_HOUR	TMP1
INNER JOIN      YZ_TB_IMPORTS_DATALOT_INVOICING				G   ON G.FF_AGENT_ID	= TMP1.AGENT_ID
--															   AND G.ID_EXT			= TMP1.ID_EXT

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.FF_AGENT_ID	= TMP1.AGENT_ID
--  AND G.ID_EXT		= TMP1.ID_EXT
  AND ( G.[DATETIME] >= @DTM_BEG AND G.[DATETIME] <  @DTM_END )

/*
--=============================================
--UPDATE PERMANENT UV INVOICE TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA SET
 INVOICE_ID				= TMP1.INVOICE_ID
,INVOICE_SYSTEM_ID		= TMP1.INVOICE_ID
,WS_ROW_UPDATED_TIME	= DBO.GETDATE()
--  SELECT *
FROM            #IMPORTS_EGENCIA_INVOICING_AGGREGATE_CPROD	TMP1
INNER JOIN      WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA			U   ON U.INVOICE_MAP_KEY	= TMP1.LOGIN_ID
															   AND U.ACD_ID_EXTENSION	= TMP1.ID_EXT

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE U.INVOICE_MAP_KEY		= TMP1.LOGIN_ID
  AND U.ACD_ID_EXTENSION	= TMP1.ID_EXT
  AND ( U.CAL_DATE >= @DTM_BEG AND U.CAL_DATE <  @DTM_END )
  AND U.HOLIDAY <> 'Yes'
  --AND ISNULL(U.INVOICE_SYSTEM_ID,'') = ''

*/

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1