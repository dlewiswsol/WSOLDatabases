
CREATE PROCEDURE [dbo].[uspWSOL_SSRS_SCHEDULE_STAFFING_BY_PROGRAM]
 @DATE_BEG				DATETIME
,@DATE_END				DATETIME
,@SUPPRESS_ZEROS		VARCHAR(5)	  --Vis. Def='0'
,@ONLY_SCHEDULED_TIME	VARCHAR(5)	  --Hid. Def='0'
,@CLIENT_ID				VARCHAR(2500) --Vis. Def='ALL'
,@PROGRAM_ID			VARCHAR(2500) --Vis. Def='ALL'
,@INTERVAL				VARCHAR(1)	  --Vis. Def='H'
,@DUR_IN				VARCHAR(1)	  --Vis. Def='M'
,@PSW					VARCHAR(10)   --Hid. Def='NONE'
,@EXECUTIONER			VARCHAR(3)    --Hid. Def='MAN'  MANual,SUBscription
,@RPT_TYPE				VARCHAR(3)    --Hid. Def='DLY'  
AS
BEGIN
SET NOCOUNT ON 

--  EXECUTE [dbo].[uspWSOL_SSRS_SCHEDULE_STAFFING_BY_PROGRAM] '08/30/2017','08/30/2017','0','0','141','2519','T','S','','MAN','DLY'

--=============================================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--=============================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
	IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'WKL' BEGIN	--WEEKLY - Run report for 7 days from current day to current day.
			--Dates passed in are for PREVIOUS DAY:
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)				-- @DATE_BEG already starting at yesterday's date.
		SET @DTM_BEG = CASE WHEN DATEPART(DW,@DTM_BEG) = 1 THEN @DTM_BEG				-- MONDAY
							ELSE DATEADD(DD,-6,@DTM_BEG) END								-- SET START DATE TO PAST MONDAY
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)				-- + 1 --DONE BELOW. 

		IF @DTM_END >  DBO.GETDATE() - 1 BEGIN											--DBO.GETDATE() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),DBO.GETDATE() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'DLY' BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)
		SET @DTM_BEG = DATEADD(DD, +1, @DTM_BEG)										-- SET DATE TO TODAY
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)
		SET @DTM_END = DATEADD(DD, +1, @DTM_END)										-- SET DATE TO TODAY
	END
	ELSE BEGIN  --DAILY - Run report for YESTERDAY, 1 Day ONLY.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)				--@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)				-- + 1 --done below.
	END

SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==========================================
	--	SET AMOUNT TO DIVIDE DURATIONS BY:
--==========================================
	DECLARE @DS DECIMAL(10,2)
	IF @DUR_IN = 'S' BEGIN
		SET @DS = 900.00
	END
	IF @DUR_IN = 'M' BEGIN
		SET @DS = 15.00
	END
	IF @DUR_IN = 'H' BEGIN
		SET @DS = 0.25
	END

--==========================================
	-- SET AMOUNT TO DIVIDE INTERVALS BY:
--==========================================
	DECLARE @DI DECIMAL(10,2)
	IF @INTERVAL = 'D' BEGIN
		SET @DI = 96.00
	END
	IF @INTERVAL = 'H' BEGIN
		SET @DI = 4.00
	END
	IF @INTERVAL = 'T' BEGIN
		SET @DI = 2.00
	END
	IF @INTERVAL = 'F' BEGIN
		SET @DI = 1.00
	END

--==================================================================================
--	CREATE TEMP TABLE TO HOLD SCHEDULE DATA
--==================================================================================
IF OBJECT_ID('TEMPDB..#WSOL_FUNCTION_SCHEDULE_STAFF_DETAILS') IS NOT NULL BEGIN
   DROP TABLE #WSOL_FUNCTION_SCHEDULE_STAFF_DETAILS
END
CREATE TABLE #WSOL_FUNCTION_SCHEDULE_STAFF_DETAILS
(SCHEDULE_DATE					DATETIME
,INTERVAL_START					CHAR(5)
,SCHEDULE_DATE_INT				DATETIME
,CLIENT_ID						VARCHAR(50)
,CLIENT_NAME					VARCHAR(200)
,PROGRAM_ID						VARCHAR(50)
,[PROGRAM_NAME]					VARCHAR(200)
,COMMITTED_TIME					DECIMAL(10,2)
,CANCELLED_TIME					DECIMAL(10,2)
,SCHEDULED_TIME					DECIMAL(10,2)
)

INSERT INTO #WSOL_FUNCTION_SCHEDULE_STAFF_DETAILS
(
  SCHEDULE_DATE
 ,INTERVAL_START
 ,SCHEDULE_DATE_INT
 ,CLIENT_ID
 ,CLIENT_NAME
 ,PROGRAM_ID
 ,[PROGRAM_NAME]
 ,COMMITTED_TIME
 ,CANCELLED_TIME
 ,SCHEDULED_TIME
)
SELECT
  RESULT.SCHEDULE_DATE
 ,RESULT.INTERVAL_START
 ,RESULT.SCHEDULE_DATE_INT
 ,RESULT.CLIENT_ID
 ,RESULT.CLIENT_NAME
 ,RESULT.PROGRAM_ID
 ,RESULT.[PROGRAM_NAME]
 ,(SUM(RESULT.SCHEDULED_TIME)  / @DS) / @DI													AS COMMITTED_TIME
 ,(SUM(RESULT.CANCELLED_TIME)  / @DS) / @DI													AS CANCELLED_TIME
 ,((SUM(RESULT.SCHEDULED_TIME) / @DS) / @DI) + ((SUM(RESULT.CANCELLED_TIME) / @DS) / @DI)	AS SCHEDULED_TIME
FROM
 TVF_WSOL_SCHEDULE_DATA_BY_INTERVALS(@DTM_BEG, @DTM_END, @INTERVAL, @DUR_IN, @CLIENT_ID, @PROGRAM_ID) RESULT	--<<<<< DEFAULTING TO 30 MINUTE INTERVALS IN SECONDS
GROUP BY
 RESULT.SCHEDULE_DATE
,RESULT.INTERVAL_START
,RESULT.SCHEDULE_DATE_INT
,RESULT.CLIENT_ID
,RESULT.CLIENT_NAME
,RESULT.PROGRAM_ID
,RESULT.[PROGRAM_NAME]

--SELECT * FROM #WSOL_FUNCTION_SCHEDULE_STAFF_DETAILS ORDER BY [PROGRAM_NAME], SCHEDULE_DATE_INT

--==================================================================================
--	CREATE TEMP TABLE TO HOLD SCHEDULE DATA BY TYPE
--==================================================================================
IF OBJECT_ID('TEMPDB..#WSOL_FUNCTION_SCHEDULE_DATA_DETAILS') IS NOT NULL BEGIN
   DROP TABLE #WSOL_FUNCTION_SCHEDULE_DATA_DETAILS
END
CREATE TABLE #WSOL_FUNCTION_SCHEDULE_DATA_DETAILS
(SCHEDULE_DATE					DATETIME
,INTERVAL_START					CHAR(5)
,SCHEDULE_DATE_INT				DATETIME
,CLIENT_ID						VARCHAR(50)
,CLIENT_NAME					VARCHAR(200)
,PROGRAM_ID						VARCHAR(50)
,[PROGRAM_NAME]					VARCHAR(200)
,SCHEDULED_TIME_ORIGINAL		DECIMAL(10,2)
,SCHEDULED_TIME_ADDITIONAL		DECIMAL(10,2)
,REDUCED_TIME_CLIENT			DECIMAL(10,2)
,REDUCED_TIME_WSOL				DECIMAL(10,2)
)

INSERT INTO #WSOL_FUNCTION_SCHEDULE_DATA_DETAILS
(
  SCHEDULE_DATE
 ,INTERVAL_START
 ,SCHEDULE_DATE_INT
 ,CLIENT_ID
 ,CLIENT_NAME
 ,PROGRAM_ID
 ,[PROGRAM_NAME]
 ,SCHEDULED_TIME_ORIGINAL
 ,SCHEDULED_TIME_ADDITIONAL
 ,REDUCED_TIME_CLIENT
 ,REDUCED_TIME_WSOL
)
SELECT
  RESULT.SCHEDULE_DATE
 ,RESULT.INTERVAL_START
 ,RESULT.SCHEDULE_DATE_INT
 ,RESULT.CLIENT_ID
 ,RESULT.CLIENT_NAME
 ,RESULT.PROGRAM_ID
 ,RESULT.[PROGRAM_NAME]
 ,(SUM(RESULT.SCHEDULED_TIME_ORIGINAL	) / @DS) / @DI	AS SCHEDULED_TIME_ORIGINAL
 ,(SUM(RESULT.SCHEDULED_TIME_ADDITIONAL	) / @DS) / @DI	AS SCHEDULED_TIME_ADDITIONAL
 ,(SUM(RESULT.REDUCED_TIME_CLIENT		) / @DS) / @DI	AS REDUCED_TIME_CLIENT
 ,(SUM(RESULT.REDUCED_TIME_WSOL			) / @DS) / @DI	AS REDUCED_TIME_WSOL
FROM
 TVF_WSOL_SCHEDULE_TYPE_DATA_BY_INTERVALS(@DTM_BEG, @DTM_END, @INTERVAL, @DUR_IN, @CLIENT_ID, @PROGRAM_ID) RESULT	--<<<<< DEFAULTING TO 30 MINUTE INTERVALS IN SECONDS
GROUP BY
 RESULT.SCHEDULE_DATE
,RESULT.INTERVAL_START
,RESULT.SCHEDULE_DATE_INT
,RESULT.CLIENT_ID
,RESULT.CLIENT_NAME
,RESULT.PROGRAM_ID
,RESULT.[PROGRAM_NAME]

--SELECT * FROM #WSOL_FUNCTION_SCHEDULE_DATA_DETAILS ORDER BY [PROGRAM_NAME], SCHEDULE_DATE_INT

 --================================================================================================
 --	CREATE TEMP TABLE TO HOLD RESULTS
 --================================================================================================
 IF OBJECT_ID('TEMPDB..#WSOL_SSRS_STAFFING_DATA') IS NOT NULL BEGIN
   DROP TABLE #WSOL_SSRS_STAFFING_DATA
END
CREATE TABLE #WSOL_SSRS_STAFFING_DATA
(DATE_TIME					DATETIME
,INTERVAL_START				CHAR(5)
,CLIENT_ID					VARCHAR(50)
,CLIENT_NAME				VARCHAR(200)
,PROGRAM_ID					VARCHAR(50)
,[PROGRAM_NAME]				VARCHAR(200)
,SCHEDULED_TIME_ORIGINAL	DECIMAL(10,2)
,SCHEDULED_TIME_ADDITIONAL	DECIMAL(10,2)
,REDUCED_TIME_CLIENT		DECIMAL(10,2)
,REDUCED_TIME_WSOL			DECIMAL(10,2)
,SCHEDULED_TIME				DECIMAL(10,2)
,CANCELLED_TIME				DECIMAL(10,2)
,COMMITTED_TIME				DECIMAL(10,2)
)

INSERT INTO #WSOL_SSRS_STAFFING_DATA
SELECT
 DAT.DATE_TIME
,DAT.INTERVAL_START
,DAT.CLIENT_ID
,DAT.CLIENT_NAME
,DAT.PROGRAM_ID
,DAT.[PROGRAM_NAME]
,DAT.SCHEDULED_TIME_ORIGINAL
,DAT.SCHEDULED_TIME_ADDITIONAL
,DAT.REDUCED_TIME_CLIENT
,DAT.REDUCED_TIME_WSOL
,DAT.SCHEDULED_TIME
,DAT.CANCELLED_TIME
,DAT.COMMITTED_TIME
FROM
(	
	SELECT
	 ISNULL(TYP.SCHEDULE_DATE_INT	,SCH.SCHEDULE_DATE_INT)			AS DATE_TIME
	/*
	,/*CASE WHEN @INTERVAL = 'T' THEN */
				CASE WHEN CONVERT(VARCHAR(2),DATEPART(HH,ISNULL(TYP.SCHEDULE_DATE_INT, SCH.SCHEDULE_DATE_INT))) < 10 THEN
						CASE WHEN CONVERT(VARCHAR(2),DATEPART(MI,ISNULL(TYP.SCHEDULE_DATE_INT, SCH.SCHEDULE_DATE_INT))) IN (0,15)  THEN
								CONCAT('0',CONVERT(VARCHAR(2),DATEPART(HH,ISNULL(TYP.SCHEDULE_DATE_INT, SCH.SCHEDULE_DATE_INT))),':00')
							 WHEN CONVERT(VARCHAR(2),DATEPART(MI,ISNULL(TYP.SCHEDULE_DATE_INT, SCH.SCHEDULE_DATE_INT))) IN (30,45) THEN
								CONCAT('0',CONVERT(VARCHAR(2),DATEPART(HH,ISNULL(TYP.SCHEDULE_DATE_INT, SCH.SCHEDULE_DATE_INT))),':30')
						END
					 ELSE
						CASE WHEN CONVERT(VARCHAR(2),DATEPART(MI,ISNULL(TYP.SCHEDULE_DATE_INT, SCH.SCHEDULE_DATE_INT))) IN (0,15)  THEN
								CONCAT(CONVERT(VARCHAR(2),DATEPART(HH,ISNULL(TYP.SCHEDULE_DATE_INT, SCH.SCHEDULE_DATE_INT))),':00')
							 WHEN CONVERT(VARCHAR(2),DATEPART(MI,ISNULL(TYP.SCHEDULE_DATE_INT, SCH.SCHEDULE_DATE_INT))) IN (30,45) THEN
								CONCAT(CONVERT(VARCHAR(2),DATEPART(HH,ISNULL(TYP.SCHEDULE_DATE_INT, SCH.SCHEDULE_DATE_INT))),':30')
						END
				END												AS INTERVAL_START	*/

	,ISNULL(TYP.INTERVAL_START			,SCH.INTERVAL_START)	AS INTERVAL_START
	,ISNULL(TYP.CLIENT_ID				,SCH.CLIENT_ID)			AS CLIENT_ID
	,ISNULL(TYP.CLIENT_NAME				,SCH.CLIENT_NAME)		AS CLIENT_NAME
	,ISNULL(TYP.PROGRAM_ID				,SCH.PROGRAM_ID)		AS PROGRAM_ID
	,ISNULL(TYP.[PROGRAM_NAME]			,SCH.[PROGRAM_NAME])	AS [PROGRAM_NAME]
	,ISNULL(SUM(TYP.SCHEDULED_TIME_ORIGINAL)	,0.00)			AS SCHEDULED_TIME_ORIGINAL
	,ISNULL(SUM(TYP.SCHEDULED_TIME_ADDITIONAL)	,0.00)			AS SCHEDULED_TIME_ADDITIONAL
	,ISNULL(SUM(TYP.REDUCED_TIME_CLIENT)		,0.00)			AS REDUCED_TIME_CLIENT
	,ISNULL(SUM(TYP.REDUCED_TIME_WSOL)			,0.00)			AS REDUCED_TIME_WSOL
	,ISNULL(SUM(SCH.SCHEDULED_TIME)				,0.00)			AS SCHEDULED_TIME
	,ISNULL(SUM(SCH.CANCELLED_TIME)				,0.00)			AS CANCELLED_TIME
	,ISNULL(SUM(SCH.COMMITTED_TIME)				,0.00)			AS COMMITTED_TIME

FROM #WSOL_FUNCTION_SCHEDULE_DATA_DETAILS TYP
FULL OUTER JOIN #WSOL_FUNCTION_SCHEDULE_STAFF_DETAILS SCH ON TYP.SCHEDULE_DATE_INT	= SCH.SCHEDULE_DATE_INT
														AND TYP.CLIENT_ID			= SCH.CLIENT_ID
														AND TYP.PROGRAM_ID			= SCH.PROGRAM_ID
GROUP BY
 ISNULL(TYP.SCHEDULE_DATE_INT	,SCH.SCHEDULE_DATE_INT)
,ISNULL(TYP.INTERVAL_START		,SCH.INTERVAL_START)
,ISNULL(TYP.CLIENT_ID			,SCH.CLIENT_ID)
,ISNULL(TYP.CLIENT_NAME			,SCH.CLIENT_NAME)
,ISNULL(TYP.PROGRAM_ID			,SCH.PROGRAM_ID)
,ISNULL(TYP.[PROGRAM_NAME]		,SCH.[PROGRAM_NAME])
) DAT

--SELECT * FROM #WSOL_SSRS_STAFFING_DATA ORDER BY [PROGRAM_NAME] , DATE_TIME

/*
--================================================================================================
 --	CREATE TEMP TABLE TO HOLD RESULTS
 --================================================================================================
 IF OBJECT_ID('TEMPDB..#WSOL_SSRS_SCHEDULE_ADHERENCE_WORK_ADHERENCE_RESULTS') IS NOT NULL BEGIN
   DROP TABLE #WSOL_SSRS_SCHEDULE_ADHERENCE_WORK_ADHERENCE_RESULTS
END
CREATE TABLE #WSOL_SSRS_SCHEDULE_ADHERENCE_WORK_ADHERENCE_RESULTS
(RESOURCE_NAME				VARCHAR(300)
,CORPORATE_NAME				VARCHAR(500)
,IDAGENT					VARCHAR(20)
,CATS_ID					VARCHAR(20)
,EMAIL_ADDRESS				VARCHAR(250)
,DATE_TIME					DATETIME
,INTERVAL_START				VARCHAR(2)
,CLIENT_ID					VARCHAR(20)
,CLIENT_NAME				VARCHAR(150)
,COMMITTED_TIME				DECIMAL(10,2)
,CANCELLED_TIME				DECIMAL(10,2)
,SCHEDULED_TIME				DECIMAL(10,2)
,LOGGED_IN_TIME				DECIMAL(10,2)
,PRODUCTIVE_TIME			DECIMAL(10,2)
,SCHEDULE_ADHERENCE			DECIMAL(10,4)
,WORK_ADHERENCE				DECIMAL(10,4)
,NO_SHOW_TIME				DECIMAL(10,2)
,UNSCHEDULED_TIME			DECIMAL(10,2)
,CANCELLED_PERCENT			DECIMAL(10,4)
,CANCELLED_PERCENT_MODIFIED	DECIMAL(10,4)
)

INSERT INTO #WSOL_SSRS_SCHEDULE_ADHERENCE_WORK_ADHERENCE_RESULTS
SELECT
 DAT.RESOURCE_NAME
,DAT.CORPORATE_NAME
,DAT.IDAGENT
,DAT.CATS_ID
,DAT.EMAIL_ADDRESS
,DAT.DATE_TIME
,DAT.INTERVAL_START
,DAT.CLIENT_ID
,DAT.CLIENT_NAME
,DAT.COMMITTED_TIME
,DAT.CANCELLED_TIME
,DAT.SCHEDULED_TIME
,DAT.LOGGED_IN_TIME
,DAT.PRODUCTIVE_TIME
,DAT.SCHEDULE_ADHERENCE
,DAT.WORK_ADHERENCE
,DAT.NO_SHOW_TIME
,DAT.UNSCHEDULED_TIME
,DAT.CANCELLED_PERCENT
,DAT.CANCELLED_PERCENT_MODIFIED
FROM
(	
	SELECT
	 RES.RESOURCE_NAME						AS RESOURCE_NAME
	,RES.CORPORATE_NAME						AS CORPORATE_NAME
	,RES.IDAGENT							AS IDAGENT
	,RES.CATS_ID							AS CATS_ID
	,RES.EMAIL_ADDRESS						AS EMAIL_ADDRESS
	,CASE WHEN @INTERVAL = 'D' THEN
			CAST(CONVERT(DATE, RES.DATE_TIME) AS DATETIME)
		  ELSE
			RES.DATE_TIME
	 END					AS DATE_TIME
	,CASE WHEN @INTERVAL = 'D' THEN '00'
		  ELSE RES.INTERVAL_START
	 END									AS INTERVAL_START
	,RES.CLIENT_ID							AS CLIENT_ID
	,RES.CLIENT_NAME						AS CLIENT_NAME
	,ISNULL(SUM(RES.COMMITTED_TIME)	,0.00)	AS COMMITTED_TIME
	,ISNULL(SUM(RES.CANCELLED_TIME)	,0.00)	AS CANCELLED_TIME
	,ISNULL(SUM(RES.SCHEDULED_TIME)	,0.00)	AS SCHEDULED_TIME
	,ISNULL(SUM(RES.LOGGED_IN_TIME)	,0.00)	AS LOGGED_IN_TIME
	,ISNULL(SUM(RES.PRODUCTIVE_TIME),0.00)	AS PRODUCTIVE_TIME
	,CASE WHEN ISNULL(SUM(RES.SCHEDULED_TIME),0.00) > 0.00 THEN
			( ISNULL(SUM(RES.LOGGED_IN_TIME),0.00) / ISNULL(SUM(RES.SCHEDULED_TIME),0.00) )
		  ELSE 0.00
	 END													AS SCHEDULE_ADHERENCE
	,CASE WHEN ISNULL(SUM(RES.COMMITTED_TIME),0.00) > 0.00 THEN
			( ISNULL(SUM(RES.PRODUCTIVE_TIME),0.00) / ISNULL(SUM(RES.COMMITTED_TIME),0.00) )
		  ELSE 0.00
	 END													AS WORK_ADHERENCE
	,NULLIF(ISNULL(SUM(RES.NO_SHOW_TIME)	,0.00),0)			AS NO_SHOW_TIME
	,NULLIF(ISNULL(SUM(RES.UNSCHEDULED_TIME),0.00),0)			AS UNSCHEDULED_TIME
	,CASE WHEN ISNULL(SUM(RES.SCHEDULED_TIME),0.00) > 0.00 THEN
			CASE WHEN ISNULL(SUM(RES.CANCELLED_TIME),0.00) > 0.00 THEN
				   ( ISNULL(SUM(RES.CANCELLED_TIME),0.00) / ISNULL(SUM(RES.SCHEDULED_TIME),0.00) )
				 ELSE NULL END
		  ELSE NULL
	 END													AS CANCELLED_PERCENT
	,CASE WHEN ISNULL(SUM(RES.SCHEDULED_TIME),0.00) > 0.00 THEN
			CASE WHEN ISNULL(SUM(RES.NO_SHOW_TIME),0.00) > 0.00 THEN
				   ( (ISNULL(SUM(RES.CANCELLED_TIME),0.00) + ISNULL(SUM(RES.NO_SHOW_TIME),0.00)) / ISNULL(SUM(RES.SCHEDULED_TIME),0.00) )
			/*CASE WHEN ( ISNULL(SUM(RES.COMMITTED_TIME),0.00) - ISNULL(SUM(RES.LOGGED_IN_TIME),0.00) ) > 0.00 THEN
				   ( ISNULL(SUM(RES.CANCELLED_TIME),0.00) + ISNULL(SUM(RES.COMMITTED_TIME),0.00) - ISNULL(SUM(RES.LOGGED_IN_TIME),0.00) ) / ISNULL(SUM(RES.SCHEDULED_TIME),0.00) */
				 ELSE NULL
			END
				   
		  ELSE NULL
	 END													AS CANCELLED_PERCENT_MODIFIED

FROM #WSOL_SSRS_SCHEDULE_ADHERENCE_WORK_ADHERENCE RES
GROUP BY
 RES.RESOURCE_NAME
,RES.CORPORATE_NAME
,RES.IDAGENT
,RES.CATS_ID
,RES.EMAIL_ADDRESS
,CASE WHEN @INTERVAL = 'D' THEN
			CAST(CONVERT(DATE, RES.DATE_TIME) AS DATETIME)
		  ELSE
			RES.DATE_TIME
 END
,CASE WHEN @INTERVAL = 'D' THEN '00'
		  ELSE RES.INTERVAL_START
 END	
,RES.CLIENT_ID
,RES.CLIENT_NAME
) DAT



--=================================================================================================
--	RETURN DATASET:
--=================================================================================================
/*
IF @SUPPRESS_ZEROS = 1

	BEGIN

		IF @ONLY_SCHEDULED_TIME = 1
		
		BEGIN
		SELECT 
		 CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
		,V.*
		FROM	#WSOL_SSRS_SCHEDULE_DETAILS		V
		WHERE   V.SCHEDULED_TIME > 0.00
		ORDER BY 
		 V.SCHEDULE_DATE
		,V.RESOURCE_NAME
		END

		ELSE BEGIN
		SELECT 
		 CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
		,V.*
		FROM	#WSOL_SSRS_SCHEDULE_DETAILS		V
		WHERE ( V.SCHEDULED_TIME > 0.00 OR V.CANCELLED_TIME > 0.00)
		ORDER BY 
		 V.SCHEDULE_DATE
		,V.RESOURCE_NAME
		END

	END
	ELSE BEGIN
		
		IF @ONLY_SCHEDULED_TIME = 1
		
		BEGIN
		SELECT 
		 CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
		,V.*
		FROM	#WSOL_SSRS_SCHEDULE_DETAILS		V
		WHERE   V.SCHEDULED_TIME > 0.00
		ORDER BY 
		 V.SCHEDULE_DATE
		,V.RESOURCE_NAME
		END

		ELSE BEGIN
		SELECT 
		 CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
		,V.*
		FROM	#WSOL_SSRS_SCHEDULE_DETAILS		V
		ORDER BY 
		 V.SCHEDULE_DATE
		,V.RESOURCE_NAME
		END

	END	
*/
--SELECT * FROM #WSOL_SSRS_SCHEDULE_ADHERENCE_WORK_ADHERENCE ORDER BY RESOURCE_NAME

SELECT
 CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
,V.RESOURCE_NAME
,V.CORPORATE_NAME
,V.IDAGENT
,V.CATS_ID
,V.EMAIL_ADDRESS
,V.DATE_TIME
,V.INTERVAL_START
,V.CLIENT_ID
,V.CLIENT_NAME
,CAST(V.COMMITTED_TIME	/ @DS	AS DECIMAL(10,2))	AS COMMITTED_TIME
,CAST(V.CANCELLED_TIME	/ @DS	AS DECIMAL(10,2))	AS CANCELLED_TIME
,CAST(V.SCHEDULED_TIME	/ @DS	AS DECIMAL(10,2))	AS SCHEDULED_TIME
,CAST(V.LOGGED_IN_TIME	/ @DS	AS DECIMAL(10,2))	AS LOGGED_IN_TIME
,CAST(V.PRODUCTIVE_TIME	/ @DS	AS DECIMAL(10,2))	AS PRODUCTIVE_TIME
,V.SCHEDULE_ADHERENCE
,V.WORK_ADHERENCE
,CAST(V.NO_SHOW_TIME	/ @DS	AS DECIMAL(10,2))	AS NO_SHOW_TIME
,CAST(V.UNSCHEDULED_TIME/ @DS	AS DECIMAL(10,2))	AS UNSCHEDULED_TIME
,V.CANCELLED_PERCENT
,V.CANCELLED_PERCENT_MODIFIED
FROM #WSOL_SSRS_SCHEDULE_ADHERENCE_WORK_ADHERENCE_RESULTS V
ORDER BY
 V.CLIENT_ID
,V.RESOURCE_NAME
,V.DATE_TIME
,V.INTERVAL_START
*/

SELECT
 CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
,V.*
FROM #WSOL_SSRS_STAFFING_DATA V
ORDER BY
 V.CLIENT_NAME
,V.[PROGRAM_NAME]
,V.DATE_TIME
,V.INTERVAL_START
--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1

END

GO