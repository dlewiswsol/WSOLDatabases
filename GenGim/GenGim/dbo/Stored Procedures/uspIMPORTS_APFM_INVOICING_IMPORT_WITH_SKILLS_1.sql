CREATE PROCEDURE [dbo].[uspIMPORTS_APFM_INVOICING_IMPORT_WITH_SKILLS]
AS
SET NOCOUNT ON  

--====================================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY =       900626  --APFM TENANT KEY 
--====================================================
DELETE FROM YZ_TB_ERRORS_FOUND 
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = 'APFM_INVOICING'
--SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900626
--=============================================================================

--=============================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.getdate()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--=============================================================================

--SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_1

--=============================================================================
--CLEANUP WORK (_1) TABLE:
--HANDLE Blank Agent Name and COM Team Members...:
--=============================================================================
INSERT INTO WSOL_TB_IMPORTS_APFM_INVOICING_BAD_1
(BAD_IMPORTS_NO,BAD_IMPORTS_FILE_TYPE,WS_ROW_CREATED_TIME,FF_DATE,FF_HOUR,FF_SKILL_AVAILABILITY,FF_AGENT_NAME,FF_STATE,FF_REASON_CODE,FF_AGENT_STATE_TIME
,FF_TIMESTAMP,SEQNO_ADDED_TIME,SEQNO,FTP_FILE_NAME)
SELECT
 24                     --BAD_IMPORTS_NO			--'Blank Agent Name'
,'NAN'                  --BAD_IMPORTS_RECORD_TYPE	--'N'o 'A'gent 'N'ame
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_APFM_INVOICING_1  W1
WHERE LTRIM(RTRIM(ISNULL(W1.F4,''))) IN ('')
--========================================================================
--DELETE WHERE Blank Agent Name:
--========================================================================
DELETE FROM WSOL_TB_IMPORTS_APFM_INVOICING_1  
WHERE LTRIM(RTRIM(ISNULL(F4,''))) IN ('')

--========================================================================
--HANDLE Header Row:
--========================================================================
INSERT INTO WSOL_TB_IMPORTS_APFM_INVOICING_BAD_1
(BAD_IMPORTS_NO,BAD_IMPORTS_FILE_TYPE,WS_ROW_CREATED_TIME,FF_DATE,FF_HOUR,FF_SKILL_AVAILABILITY,FF_AGENT_NAME,FF_STATE,FF_REASON_CODE,FF_AGENT_STATE_TIME
,FF_TIMESTAMP,SEQNO_ADDED_TIME,SEQNO,FTP_FILE_NAME)
SELECT
 23                     --BAD_IMPORTS_NO			--'Header Row'
,'HRW'                  --BAD_IMPORTS_RECORD_TYPE	--'H'eader 'R'o'W'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_APFM_INVOICING_1  W1
WHERE LTRIM(RTRIM(ISNULL(W1.F1,''))) IN ('','DATE')
--========================================================================
--DELETE WHERE Header Row:
--========================================================================
DELETE FROM WSOL_TB_IMPORTS_APFM_INVOICING_1  
WHERE LTRIM(RTRIM(ISNULL(F1,''))) IN ('','DATE')

--========================================================================
--DELETE Logout States:
--========================================================================
INSERT INTO WSOL_TB_IMPORTS_APFM_INVOICING_BAD_1
(BAD_IMPORTS_NO,BAD_IMPORTS_FILE_TYPE,WS_ROW_CREATED_TIME,FF_DATE,FF_HOUR,FF_SKILL_AVAILABILITY,FF_AGENT_NAME,FF_STATE,FF_REASON_CODE,FF_AGENT_STATE_TIME
,FF_TIMESTAMP,SEQNO_ADDED_TIME,SEQNO,FTP_FILE_NAME)
SELECT
 30                     --BAD_IMPORTS_NO			--'NON-BILLABLE STATE'
,'LOS'                  --BAD_IMPORTS_RECORD_TYPE	--'L'og'O'ut 'S'tate
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_APFM_INVOICING_1  W1
WHERE LTRIM(RTRIM(ISNULL(F5,''))) = 'Logout'

DELETE FROM WSOL_TB_IMPORTS_APFM_INVOICING_1  
WHERE LTRIM(RTRIM(ISNULL(F5,''))) = 'Logout'
													
--======================================================================================================
--POPULATE SKILL AVAILABILITY ON ALL ROWS
--======================================================================================================
ADD_SKILL:
DELETE FROM WSOL_TB_IMPORTS_APFM_INVOICING_2	--WORK TABLE TO HOLD RECORDS WITH COMPLETE DATA.
--======================================================================================================
DECLARE
 @F1 VARCHAR(50)
,@F2 VARCHAR(50)
,@F3 VARCHAR(500)
,@F4 VARCHAR(100)
,@F5 VARCHAR(50)
,@F6 VARCHAR(50)
,@F7 VARCHAR(50)
,@F8 VARCHAR(50)
,@SEQNO_ADDED_TIME DATETIME
,@SEQNO INT
,@FTP_FILE_NAME VARCHAR(100)
,@FF_SKILL VARCHAR(500)

SET @FF_SKILL = 'Y83JJ99390n-+'

DECLARE crsT2 CURSOR FOR
SELECT
 ISNULL(F1,'')
,ISNULL(F2,'')
,ISNULL(F3,'')
,ISNULL(F4,'')
,ISNULL(F5,'')
,ISNULL(F6,'')
,ISNULL(F7,'')
,ISNULL(F8,'')
,ISNULL(SEQNO_ADDED_TIME,'')
,ISNULL(SEQNO,0)
,ISNULL(FTP_FILE_NAME,'')
FROM WSOL_TB_IMPORTS_APFM_INVOICING_1

OPEN crsT2
FETCH NEXT FROM crsT2 INTO @F1,@F2,@F3,@F4,@F5,@F6,@F7,@F8,@SEQNO_ADDED_TIME,@SEQNO,@FTP_FILE_NAME

WHILE @@FETCH_STATUS = 0 BEGIN
	IF ISNULL(@F3,'') <> '' BEGIN
		SET @FF_SKILL = @F3
		INSERT INTO WSOL_TB_IMPORTS_APFM_INVOICING_2
		(FF1
		,FF2
		,FF3
		,FF4
		,FF5
		,FF6
		,FF7
		,FF8
		,EVENT_START_TIME
		,EVENT_DURATION_SECS
		,SEQNO_ADDED_TIME
		,SEQNO
		,FTP_FILE_NAME
		)
		VALUES
		(@F1,@F2,@FF_SKILL,@F4,@F5,@F6,@F7,@F8,NULL,NULL,@SEQNO_ADDED_TIME,@SEQNO,@FTP_FILE_NAME)
	END
	ELSE BEGIN

		INSERT INTO WSOL_TB_IMPORTS_APFM_INVOICING_2
		(FF1
		,FF2
		,FF3
		,FF4
		,FF5
		,FF6
		,FF7
		,FF8
		,EVENT_START_TIME
		,EVENT_DURATION_SECS
		,SEQNO_ADDED_TIME
		,SEQNO
		,FTP_FILE_NAME
		)
		VALUES
		(@F1,@F2,@FF_SKILL,@F4,@F5,@F6,@F7,@F8,NULL,NULL,@SEQNO_ADDED_TIME,@SEQNO,@FTP_FILE_NAME)

	END

	FETCH NEXT FROM crsT2 INTO @F1,@F2,@F3,@F4,@F5,@F6,@F7,@F8,@SEQNO_ADDED_TIME,@SEQNO,@FTP_FILE_NAME
END
CLOSE crsT2
DEALLOCATE crsT2

--=============================================================================
--CORRECT SKILL FOR NOT READY-NOT READY RECORDS
--=============================================================================
UPDATE W2 SET
 W2.FF3 = WT2.FF3
,W2.EVENT_START_TIME = dbo.getdate()
FROM WSOL_TB_IMPORTS_APFM_INVOICING_2 WT2
INNER JOIN WSOL_TB_IMPORTS_APFM_INVOICING_2 W2		ON WT2.FF4 = W2.FF4		--AGENT_NAME
												   AND WT2.FF8 = W2.FF8		--TIMESTAMP
													   
WHERE W2.FF5	= 'Not Ready'
  AND W2.FF6	= 'Not Ready'
  AND W2.FF4	= WT2.FF4
  AND W2.FF8	= WT2.FF8
  AND WT2.FF5   = 'Login'

--SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_1
--SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_BAD_1 WHERE FF_STATE = 'Login'
--SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_2 ORDER BY SEQNO
--SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_2 WHERE FF5 = 'Not Ready' AND FF6 = 'Not Ready' ORDER BY SEQNO

--=============================================================================
--SET EVENT START TIME AND DURATION TO PREPARE FOR PARSING INTO INTERVALS
--=============================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_2 SET
 EVENT_START_TIME		= CAST(FF1 + ' ' + RIGHT(FF8,8) AS DATETIME)
,EVENT_DURATION_SECS	= CAST
						  (
						    (CAST(REPLACE(REPLACE(SUBSTRING(FF7,1,2),':',''),' ','') AS INT) * 3600)
			              + (CAST(REPLACE(SUBSTRING(FF7,CHARINDEX(':',FF7) + 1,2),' ','') AS INT) * 60)
			              + (CAST(REPLACE(RIGHT(RTRIM(FF7),2),' ','') AS INT))
						  AS DECIMAL(10,2)
						  )

--=============================================
--DELETE EVENTS WHERE DURATION = 0.00
--=============================================
DELETE FROM WSOL_TB_IMPORTS_APFM_INVOICING_2 
WHERE EVENT_DURATION_SECS = 0.00

--=====================================================================================================================
-- PARSE DATA RECORDS INTO INTERVALS
--=====================================================================================================================
DELETE FROM WSOL_TB_IMPORTS_APFM_INVOICING_3

DECLARE
 @FF1  VARCHAR(50)
,@FF2  VARCHAR(50)
,@FF3  VARCHAR(500)
,@FF4  VARCHAR(100)
,@FF5  VARCHAR(50) 
,@FF6  VARCHAR(50)
,@FF7  VARCHAR(50) 
,@FF8  VARCHAR(50) 
,@FF9  DATETIME 
,@FF10 DECIMAL(10,2) 
,@FF11 DATETIME
,@FF12 INT
,@FF13 VARCHAR(100)
,@FF14 INT

DECLARE crsT3 CURSOR FOR   
SELECT
 ISNULL(FF1,'')
,ISNULL(FF2,'')
,ISNULL(FF3,'')
,ISNULL(FF4,'')
,ISNULL(FF5,'')
,ISNULL(FF6,'')
,ISNULL(FF7,'')
,ISNULL(FF8,'')
,ISNULL(EVENT_START_TIME,'')
,ISNULL(EVENT_DURATION_SECS,0.00)
,ISNULL(SEQNO_ADDED_TIME,'')
,ISNULL(SEQNO,'0')
,ISNULL(FTP_FILE_NAME,'')
,3600											--<<----- DETERMINES THE INTERVAL, 900 = 15 MIN, 1800 = 30 MIN, 3600 = 60 MIN
FROM WSOL_TB_IMPORTS_APFM_INVOICING_2

OPEN crsT3
FETCH NEXT FROM crsT3   INTO @FF1,@FF2,@FF3,@FF4,@FF5,@FF6,@FF7,@FF8,@FF9,@FF10,@FF11,@FF12,@FF13,@FF14

WHILE @@FETCH_STATUS = 0 BEGIN
	 -- SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_3 ORDER BY SEQNO
		INSERT INTO WSOL_TB_IMPORTS_APFM_INVOICING_3
		(FF_DATE
,FF_HOUR
,FF_SKILL_AVAILABILITY
,FF_AGENT_NAME
,FF_STATE
,FF_REASON_CODE
,FF_AGENT_STATE_TIME
,FF_TIMESTAMP
,EVENT_START_TIME
,EVENT_DURATION_SECS
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
		SELECT RESULT.FF_DATE
,RESULT.FF_HOUR
,RESULT.FF_SKILL_AVAILABILITY
,RESULT.FF_AGENT_NAME
,RESULT.FF_STATE
,RESULT.FF_REASON_CODE
,RESULT.FF_AGENT_STATE_TIME
,RESULT.FF_TIMESTAMP
,RESULT.EVENT_START_TIME
,RESULT.EVENT_DURATION_SECS
,RESULT.INTERVAL_START_TIME
,RESULT.INTERVAL_END_TIME
,RESULT.EVENT_DURATION_IN_INTERVAL_SECS
,RESULT.SEQNO_ADDED_TIME
,RESULT.SEQNO
,RESULT.FTP_FILE_NAME
		FROM TVF_APFM_FIVE9_STATES_TO_INTERVALS(@FF1,@FF2,@FF3,@FF4,@FF5,@FF6,@FF7,@FF8,@FF9,@FF10,@FF11,@FF12,@FF13,@FF14) RESULT

    FETCH NEXT FROM crsT3   INTO @FF1,@FF2,@FF3,@FF4,@FF5,@FF6,@FF7,@FF8,@FF9,@FF10,@FF11,@FF12,@FF13,@FF14
END
CLOSE crsT3
DEALLOCATE crsT3

-- SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_3 ORDER BY SEQNO
--=============================================================================
-- GROUP DATA BY INTERVAL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_APFM_INVOICING_4

INSERT INTO WSOL_TB_IMPORTS_APFM_INVOICING_4
(
FF_DATE
,FF_HOUR
,FF_SKILL_AVAILABILITY
,FF_AGENT_NAME
,FF_STATE
,FF_REASON_CODE
,EVENT_DURATION_SECS
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_TIME
,BILLABLE_SKILL_Y_N
,LOGGED_IN_DUR
,READY_DUR
,RING_DUR
,ON_CALL_DUR
,ON_CALL_SILENT_DUR
,ACW_DUR
,ON_PARK_DUR
,ON_VOICEMAIL_DUR
,ON_PREVIEW_DUR
,NRD_ACW_DUR
,NRD_TASK_COMP_DUR
,NRD_SYSTEM_OBC_DUR
,ON_HOLD_DUR
,NRD_TRAINING_DUR
,NRD_MEETING_DUR
,NRD_MANDATORY_REPORTING_DUR
,NRD_MANUAL_OBC_DUR
,NRD_ACW_AGENT_DUR
,NRD_OFFLINE_VENDOR_UNPAID_DUR
,NRD_REASON_4_DUR
,NOT_READY_BILLABLE
,NOT_READY_NON_BILLABLE
,NON_BILLABLE_SKILL_DUR
,NON_BILLABLE_STATE_REASON_DUR
,BILLABLE_CLIENT
,TOTAL_TALK
,TOTAL_ACW
,AUTHORIZED
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W3.FF_DATE
,W3.FF_HOUR
,W3.FF_SKILL_AVAILABILITY
,W3.FF_AGENT_NAME
,W3.FF_STATE
,W3.FF_REASON_CODE
,SUM(ISNULL(W3.EVENT_DURATION_SECS				,0.00))
,SUM(ISNULL(W3.EVENT_DURATION_IN_INTERVAL_SECS	,0.00))
,MAX(W3.SEQNO_ADDED_TIME)
,MIN(W3.SEQNO)
,W3.FTP_FILE_NAME

,NULL						--AS RESOURCE_NAME
,W3.INTERVAL_START_TIME		--AS DATETIME
,NULL						--AS HOUR_INTERVAL
,NULL						--AS EMPLOYEE_ID
,NULL						--AS STD_TENANT_START_TIME
,NULL						--AS BILLABLE_SKILL_Y_N
,NULL						--AS LOGGED_IN_DUR
,NULL						--AS READY_DUR
,NULL						--AS RING_DUR
,NULL						--AS ON_CALL_DUR
,NULL						--AS ON_CALL_SILENT_DUR
,NULL						--AS ACW_DUR
,NULL						--AS ON_PARK_DUR
,NULL						--AS ON_VOICEMAIL_DUR
,NULL						--AS ON_PREVIEW_DUR
,NULL						--AS NRD_ACW_DUR
,NULL						--AS NRD_TASK_COMP_DUR
,NULL						--AS NRD_SYSTEM_OBC_DUR
,NULL						--AS ON_HOLD_DUR
,NULL						--AS NRD_TRAINING_DUR
,NULL						--AS NRD_MEETING_DUR
,NULL						--AS NRD_MANDATORY_REPORTING_DUR
,NULL						--AS NRD_MANUAL_OBC_DUR
,NULL						--AS NRD_ACW_AGENT_DUR
,NULL						--AS NRD_OFFLINE_VENDOR_UNPAID_DUR
,NULL						--AS NRD_REASON_4_DUR
,NULL						--AS NOT_READY_BILLABLE
,NULL						--AS NOT_READY_NON_BILLABLE
,NULL						--AS NON_BILLABLE_SKILL_DUR
,NULL						--AS NON_BILLABLE_STATE_REASON_DUR
,NULL						--AS BILLABLE_CLIENT
,NULL						--AS TOTAL_TALK
,NULL						--AS TOTAL_ACW
,NULL						--AS AUTHORIZED
,NULL						--AS EMAIL
,NULL						--AS ID_EXT
,NULL						--AS SCHEDULER_ACL_NAME
,NULL						--AS STD_TENANT_START_DATE_TIME_KEY
,NULL						--AS CAL_DATE
,351						--AS TENANT_KEY
,NULL						--AS AIR_DAY_TYPE
,NULL						--AS AIR_ACW_FONT_COLOR
,NULL						--AS MIN_GUARANTEE_RATE
,NULL						--AS MIN_GUARANTEE_TYPE
,NULL						--AS AUTHORIZED_TO_INVOICE_TYPE
,NULL						--AS HAS_HOLIDAYS
,NULL						--AS INCLUDE_IN_CAS
,NULL						--AS READY_FOR_XML
,NULL						--AS W2.SHOW_ID_EXTS
,NULL						--AS INVOICE_ID

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_APFM_INVOICING_3  W3

GROUP BY
 W3.FF_DATE
,W3.FF_HOUR
,W3.FF_SKILL_AVAILABILITY
,W3.FF_AGENT_NAME
,W3.FF_STATE
,W3.FF_REASON_CODE
,W3.FTP_FILE_NAME
,W3.INTERVAL_START_TIME

ORDER BY
 MIN(W3.SEQNO)

-- SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_4 ORDER BY SEQNO

--==================================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_4) TABLE THAT WEREN'T IN IMPORTED FILE:
--==================================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
 HOUR_INTERVAL			 = DATEPART(HH, [DATETIME])

--========================================================================
--SET NON-BILLABLE / BILLABLE SKILLS FLAG
--========================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
 BILLABLE_SKILL_Y_N = CASE WHEN ISNULL(FF_SKILL_AVAILABILITY,'') NOT IN
 (
  'CS AOR'
 ,'CS LS Level 1'
 ,'CS LS Level 2'
 ,'CS LS Level 3'
 ,'CS Senior Advisor'
 ,'CS AOR, CS AOR SN referral'			-- EFFECTIVE 8/16/15
 ,'CS LS Level 3, CS AOR SN referral'	-- EFFECTIVE 8/16/15
 ,'CS AOR SN referral'					-- EFFECTIVE 8/16/15
 ,'CS AOR Exit'							-- EFFECTIVE 8/16/15
 ,'CS LS Level 2, HC Susan Bishop'
--,'CS LS Level 2, CS AOR SN referral'	-- ONLY 3/31/16 DUE TO AGENT ERROR PER BRANDON M.
 ,'CS LS Level 3, CS AOR'				-- EFFECTIVE 04/04/16 PER BRANDON M.
 ,'CS LS Level 2, CS AOR'				-- EFFECTIVE 04/06/16 PER BRANDON M.
 ,'OS Main'								-- EFFECTIVE 05/17/16 PER BRANDON M.
 ,'CS LS Level 2, Training OS OppGen'	-- EFFECTIVE 05/21/16 PER BRANDON M.
 ,'OS PB2B'								-- EFFECTIVE 05/23/16 PER BRANDON M.
 ,'CS LS Level 3, OS Main'				-- EFFECTIVE 05/26/16 PER BRANDON M.
 ,'OS Main, OS PB2B'					-- EFFECTIVE 06/09/16 PER BRANDON M.
 ,'CS LS Level 2, OS Main'				-- EFFECTIVE 06/10/16 PER BRANDON M.
 ,'CS AOR, OS Main'						-- EFFECTIVE 06/12/16 PER BRANDON M.
 ,'CS Spanish'							-- EFFECTIVE 06/14/16 PER BRANDON M.
 ,'CS AOR, OS PB2B'						-- EFFECTIVE 10/24/16 PER BRANDON M.
 ,'CS AOR SN referral, OS Main'			-- EFFECTIVE 11/21/16 PER BRANDON M.
 ,'CS LS Level 3, OS PB2B'				-- EFFECTIVE 12/04/16 PER BRANDON M.
 ,'OS OB Project'						-- EFFECTIVE 12/21/16 PER BRANDON M.
 ,'CS AOR 2'							-- EFFECTIVE 12/19/17 PER BRANDON M.
 ,'OS SZ Legacy'						-- EFFECTIVE 01/05/18 PER BRANDON M.
 ) 
 THEN 'N'
 ELSE 'Y' END

--========================================================================================
-- AGENT BILLABLE STATES
--========================================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
 READY_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))  = 'Ready'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,RING_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))  = 'Ringing'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,ON_CALL_DUR		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))  = 'On Call'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,ON_CALL_SILENT_DUR = CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))  = 'On Call (Silent)'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END	
,ACW_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))  = 'After Call Work'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,ON_PARK_DUR		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))  = 'On Park'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,ON_PREVIEW_DUR		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))  = 'On Preview'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END


,NRD_ACW_DUR					= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))   = 'Not Ready'
										AND LTRIM(RTRIM(FF_REASON_CODE))		= 'After Call Work'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								  ELSE 0.00 END
,NRD_TASK_COMP_DUR				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))   = 'Not Ready'
					  					AND LTRIM(RTRIM(FF_REASON_CODE))		= 'Task Completion'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								  ELSE 0.00 END
,NRD_SYSTEM_OBC_DUR				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))	= 'Not Ready'
										AND LTRIM(RTRIM(FF_REASON_CODE))		= 'System_OBC'					THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								  ELSE 0.00 END
,NRD_MANDATORY_REPORTING_DUR	= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))	= 'Not Ready'
										AND LTRIM(RTRIM(FF_REASON_CODE))		= 'Mandatory Reporting'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								  ELSE 0.00 END
,NRD_MANUAL_OBC_DUR				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))	= 'Not Ready'
										AND LTRIM(RTRIM(FF_REASON_CODE))		= 'Manual_OBC'					THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								  ELSE 0.00 END
,NRD_ACW_AGENT_DUR				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))	= 'Not Ready'
										AND LTRIM(RTRIM(FF_REASON_CODE))		= 'After Call Work - Agent'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								  ELSE 0.00 END
,NRD_OFFLINE_VENDOR_UNPAID_DUR	= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))	= 'Not Ready'
										AND LTRIM(RTRIM(FF_REASON_CODE))		= 'Offline_Vendor Unpaid'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								  ELSE 0.00 END

--=========================================================================================
-- AGENT STATES THAT ARE TRACKED/REPORTED BUT NOT AGENT BILLABLE
--=========================================================================================
,LOGGED_IN_DUR		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))		= 'Login'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,ON_VOICEMAIL_DUR	= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))		= 'On Voicemail'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2))
					  ELSE 0.00 END															-- NON-BILLABLE AS OF 3/1/15
,ON_HOLD_DUR		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))		= 'On Hold'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2))
					  ELSE 0.00 END															-- TIME ALREADY INCLUDED IN ON CALL STATE

,NRD_TRAINING_DUR   = CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))      = 'Not Ready'
						   AND LTRIM(RTRIM(ISNULL(FF_REASON_CODE,''))) = 'Training'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2))
				      ELSE 0.00 END															-- CLIENT WILL PAY BUT NOT AGENT BILLABLE  -- CLIENT WILL NOT PAY AS OF 3/1/15
,NRD_MEETING_DUR    = CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))      = 'Not Ready'
					       AND LTRIM(RTRIM(ISNULL(FF_REASON_CODE,''))) = 'Meeting'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2))
				      ELSE 0.00 END															-- CLIENT WILL PAY BUT NOT AGENT BILLABLE  -- CLIENT WILL NOT PAY AS OF 3/1/15
--========================================================================
--UPDATE ADDITIONAL TOTALS FOR INVOICING
--========================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
 NOT_READY_BILLABLE		= NRD_ACW_DUR + NRD_TASK_COMP_DUR + NRD_SYSTEM_OBC_DUR + NRD_MANDATORY_REPORTING_DUR + NRD_MANUAL_OBC_DUR -- + NRD_ACW_AGENT_DUR	-- ALL INCLUDED BELOW IN TOTAL_ACW AS WELL
,NOT_READY_NON_BILLABLE	= NRD_TRAINING_DUR + NRD_MEETING_DUR
,TOTAL_TALK				= RING_DUR + ON_PREVIEW_DUR + ON_CALL_DUR + ON_CALL_SILENT_DUR + ON_PARK_DUR -- + ON_VOICEMAIL_DUR - ON_PREVIEW_DUR ADDED ON 12/1/15
,TOTAL_ACW				= ACW_DUR + NRD_ACW_DUR + NRD_TASK_COMP_DUR + NRD_SYSTEM_OBC_DUR + NRD_MANDATORY_REPORTING_DUR + NRD_MANUAL_OBC_DUR -- + NRD_ACW_AGENT_DUR
WHERE BILLABLE_SKILL_Y_N = 'Y'

UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
 AUTHORIZED			= READY_DUR + TOTAL_TALK + TOTAL_ACW -- + NOT_READY_BILLABLE
,BILLABLE_CLIENT	= READY_DUR + TOTAL_TALK + TOTAL_ACW
WHERE BILLABLE_SKILL_Y_N = 'Y'

--========================================================================
--SET DATE_TIME KEY
--========================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM            WSOL_TB_IMPORTS_APFM_INVOICING_4      I
INNER JOIN      DATE_TIME                             DT   ON DT.CAL_DATE = I.DATETIME

-- SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_4 ORDER BY SEQNO

--========================================================================
--SET NON-BILLABLE SKILLS TOTAL
--========================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
 NON_BILLABLE_SKILL_DUR = CASE WHEN (BILLABLE_SKILL_Y_N = 'N' AND FF_STATE <> 'Login') THEN 
								CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2))
							   ELSE 0.00 END

--========================================================================
--SET NON-BILLABLE STATE/REASON TOTAL
--========================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
 NON_BILLABLE_STATE_REASON_DUR = 
 CASE WHEN ISNULL(FF_STATE,'') NOT IN
 (
  'Ready'
 ,'Ringing'
 ,'On Call'
 ,'On Call (Silent)'	-- Added as Billable Agent and Billable Client effective 3/1/15
 ,'After Call Work'
 ,'On Park'
 ,'On Hold'
-- ,'On Voicemail'		-- Removed from Billable Agent effective 3/1/15
 ,'Not Ready'			-- Not Ready States will be based on Reason Code
 ,'Login'			
 ,'On Preview'			-- Added as Billable Agent effective 12/1/15
 ) 
	  THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2))
	  WHEN ISNULL(FF_STATE,'') = 'Not Ready'
	   AND ISNULL(FF_REASON_CODE,'') NOT IN
	   (
		'After Call Work'
		-- ,'Training',				-- Removed from Billable Client effective 3/1/15
		-- ,'Meeting',				-- Removed from Billable Client effective 3/1/15
		,'Task Completion'
		,'System_OBC'
		,'Mandatory Reporting'		-- Added as Billable Agent and Billable Client effective 3/1/15
		,'Manual_OBC'				-- Added as Billable Agent and Billable Client effective 3/1/15
		,'After Call Work - Agent'	-- Temporary Billable Agent
		,'Offline_Vendor Unpaid'	-- Added as Billable Agent Effective 7/16/15
	   )
	  THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2))
	  ELSE 0.00 END

--=============================================================================
--SET SQL AGENT MAPPING FIELDS
--=============================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
  EMAIL              = ISNULL(IAM.EMAIL,'')
 ,SCHEDULER_ACL_NAME = ISNULL(IAM.FF_OFFICIAL_ACL_NAME,'')
 ,RESOURCE_NAME		 = ISNULL(IAM.RESOURCE_NAME,'')
 FROM		WSOL_TB_IMPORTS_APFM_INVOICING_4        I
 LEFT JOIN	YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING  IAM  ON IAM.INVOICE_MAP_KEY = I.FF_AGENT_NAME
 --WHERE		I.BILLABLE_SKILL_Y_N = 'Y'	 

-- SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_4 WHERE BILLABLE_SKILL_Y_N = 'N' ORDER BY SEQNO

--==================================================================================
--ONLY RESOURCE AGENTS CAN BILL FOR OFFLINE VENDOR UNPAID
--==================================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
 NOT_READY_BILLABLE = NOT_READY_BILLABLE + NRD_OFFLINE_VENDOR_UNPAID_DUR
,TOTAL_ACW			= TOTAL_ACW + NRD_OFFLINE_VENDOR_UNPAID_DUR
,AUTHORIZED			= AUTHORIZED + NRD_OFFLINE_VENDOR_UNPAID_DUR
,BILLABLE_CLIENT	= BILLABLE_CLIENT + NRD_OFFLINE_VENDOR_UNPAID_DUR
WHERE SCHEDULER_ACL_NAME = 'APFM Resource Agents'
  AND BILLABLE_SKILL_Y_N = 'Y'

--==================================================================================
--CONTINUE INVOICE FIELD UPDATES
--==================================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
	ID_EXT = CASE WHEN (I.SCHEDULER_ACL_NAME = 'APFM Standard Agents' AND BILLABLE_SKILL_Y_N = 'Y')  THEN 
					CASE WHEN I.FF_SKILL_AVAILABILITY IN ('CS AOR'
														 ,'CS AOR, CS AOR SN referral'
														 ,'CS AOR SN referral'
														 ,'CS AOR Exit'
														 ,'CS AOR 2'
														 ,'CS LS Level 3, CS AOR SN referral') THEN 'AP6'	--APFM AOR
						 ELSE 'AP2' END		--APFM Standard Agents
				  WHEN (I.SCHEDULER_ACL_NAME = 'APFM Standard Agents R2' AND BILLABLE_SKILL_Y_N = 'Y') THEN
					CASE WHEN I.FF_SKILL_AVAILABILITY IN ('CS AOR'
														 ,'CS AOR, CS AOR SN referral'
														 ,'CS AOR SN referral'
														 ,'CS AOR Exit'
														 ,'CS AOR 2'
														 ,'CS LS Level 3, CS AOR SN referral') THEN 'AP6'	--APFM AOR
						ELSE 'AP4' END		--APRM Standard Agents
				  WHEN (I.SCHEDULER_ACL_NAME = 'APFM Resource Agents' AND BILLABLE_SKILL_Y_N = 'Y')  THEN 'AP5'	--APFM Resource Agents
				  ELSE '' END
 FROM            WSOL_TB_IMPORTS_APFM_INVOICING_4	I
 INNER JOIN      DATE_TIME							DT   ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY

--==================================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET --SELECT
  AIR_DAY_TYPE = CASE WHEN IG.HAS_HOLIDAYS = 'Y' AND
						 (    ISNULL(IH.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) OR
						   ( ISNULL(IHA.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) AND ISNULL(IHA.ID_EXT,'') <> '' )
						 )
					  THEN 'H' ELSE 'S' END  --AS AIR_DAY_TYPE  --H=Holiday  --S=Standard
 FROM            WSOL_TB_IMPORTS_APFM_INVOICING_4				I
 INNER JOIN      DATE_TIME										DT   ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY
 LEFT JOIN       YZ_TB_IMPORTS_APFM_SD_INVOICE_GROUPS			IG   ON IG.ID_EXT              = I.ID_EXT
 LEFT JOIN       YZ_TB_IMPORTS_APFM_SD_INVOICE_HOLIDAYS			IH   ON IH.HOLIDAY_DATE        = CAST(DT.CAL_DATE_STRING AS DATETIME)
 LEFT JOIN       YZ_TB_IMPORTS_APFM_SD_INVOICE_HOLIDAYS_ADDL	IHA  ON IHA.HOLIDAY_DATE       = CAST(DT.CAL_DATE_STRING AS DATETIME)
																	AND IHA.ID_EXT             = I.ID_EXT

--==================================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
  AIR_ACW_FONT_COLOR             = 'Black'
 ,MIN_GUARANTEE_RATE             = ISNULL(IG.MIN_GUARANTEE_RATE,0)           --varies between scheduler acl names.
 ,MIN_GUARANTEE_TYPE             = ISNULL(IG.MIN_GUARANTEE_TYPE,'')          --varies between scheduler acl names.
 ,AUTHORIZED_TO_INVOICE_TYPE     = ISNULL(IG.AUTHORIZED_TO_INVOICE_TYPE,'')  --varies between scheduler acl names.

 ,HAS_HOLIDAYS    = IG.HAS_HOLIDAYS
 ,INCLUDE_IN_CAS  = IG.INCLUDE_IN_CAS
 ,READY_FOR_XML   = IG.READY_FOR_XML
 ,SHOW_ID_EXTS    = IG.SHOW_ID_EXTS
 FROM            WSOL_TB_IMPORTS_APFM_INVOICING_4        I
 LEFT JOIN       YZ_TB_IMPORTS_APFM_SD_INVOICE_GROUPS	 IG  ON IG.ID_EXT    = I.ID_EXT

--==================================================================================
 UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
   INVOICE_ID         = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
--  ,SCHEDULER_ACL_NAME = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
 FROM            WSOL_TB_IMPORTS_APFM_INVOICING_4	            AIA 
 LEFT JOIN       YZ_TB_IMPORTS_APFM_SD_AIA_STATIC_DEFAULTS		AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT

--================================
--DATA INTEGRITY CHECK(S):
--================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''

--Check #1:  ============================================================================================================================================================
	SET @RCD_CNT = ( SELECT COUNT(*) FROM WSOL_TB_IMPORTS_APFM_INVOICING_4 )
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #1 FAILED! - File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #2:  ============================================================================================================================================================
	SET @RCD_CNT = ( SELECT COUNT(*) FROM WSOL_TB_IMPORTS_APFM_INVOICING_4 WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0 )  
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #2 FAILED! - Invalid DATETIME intervals in APFM INVOICING IMPORT File.  Import was Cancelled.  Nothing was Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #3:  ============================================================================================================================================================
	SET @RCD_CNT = ( SELECT COUNT(*) FROM WSOL_TB_IMPORTS_APFM_INVOICING_4 WHERE ISNULL(FF_AGENT_NAME,'') = '' )  
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #3 FAILED! - Blank AGENT NAME(s) in APFM INVOICING IMPORT File exist(s).  Import was Cancelled.  Nothing was Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #4:  ============================================================================================================================================================
	SET @RCD_CNT = ( SELECT COUNT(*) FROM WSOL_TB_IMPORTS_APFM_INVOICING_4 WHERE ISNULL(FF_SKILL_AVAILABILITY,'') = '' 
																		      OR ISNULL(FF_SKILL_AVAILABILITY,'') = 'Y83JJ99390n-+' )
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #4 FAILED! - Invalid or Missing Skill in APFM INVOICING IMPORT File exist(s).  Import was Cancelled.  Nothing was Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END

--======================= ********** INSERT INTO PERMANENT TABLE (IF NO ERRORS FOUND), OR SKIP AND GO TO END (ERRORS FOUND) ********** ==================================
--SET @ERR_CNT = 0
--SET @MSG1 = ''
IF @ERR_CNT > 0 BEGIN
	INSERT INTO YZ_TB_ERRORS_FOUND(
	TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'APFM_INVOICING'	--SUB_GROUP_NAME
	,@MSG1				--ERROR_MSG
	--======================================
	GOTO EARLY_EXIT
	--======================================
END
ELSE BEGIN
	INSERT INTO YZ_TB_ERRORS_FOUND
	(
	TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'APFM_INVOICING'	--SUB_GROUP_NAME
	,''					--ERROR_MSG       --NEVER SET THIS TO @MSG1 !!!  MUST BE SET TO ''.
END
--=======================================================================================================================================================================

--SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_4 ORDER BY SEQNO
--=============================================================================
-- GROUP DATA BY AGENT & SKILL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_APFM_INVOICING_5

INSERT INTO WSOL_TB_IMPORTS_APFM_INVOICING_5
(
FF_DATE
,FF_HOUR
,FF_SKILL_AVAILABILITY
,FF_AGENT_NAME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_TIME
,BILLABLE_SKILL_Y_N
,LOGGED_IN_DUR
,READY_DUR
,RING_DUR
,ON_CALL_DUR
,ON_CALL_SILENT_DUR
,ACW_DUR
,ON_PARK_DUR
,ON_VOICEMAIL_DUR
,ON_PREVIEW_DUR
,NRD_ACW_DUR
,NRD_TASK_COMP_DUR
,NRD_SYSTEM_OBC_DUR
,ON_HOLD_DUR
,NRD_TRAINING_DUR
,NRD_MEETING_DUR
,NRD_MANDATORY_REPORTING_DUR
,NRD_MANUAL_OBC_DUR
,NRD_ACW_AGENT_DUR
,NRD_OFFLINE_VENDOR_UNPAID_DUR
,NRD_REASON_4_DUR
,NOT_READY_BILLABLE
,NOT_READY_NON_BILLABLE
,NON_BILLABLE_SKILL_DUR
,NON_BILLABLE_STATE_REASON_DUR
,BILLABLE_CLIENT
,TOTAL_TALK
,TOTAL_ACW
,AUTHORIZED
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 MAX(W4.FF_DATE)					AS FF_DATE
,MAX(W4.FF_HOUR)					AS FF_HOUR
,W4.FF_SKILL_AVAILABILITY			AS FF_SKILL_AVAILABILITY
,W4.FF_AGENT_NAME					AS FF_AGENT_NAME

,MAX(W4.SEQNO_ADDED_TIME)			AS SEQNO_ADDED_TIME
,MIN(W4.SEQNO)						AS SEQNO
,MAX(W4.FTP_FILE_NAME)				AS FTP_FILE_NAME

,MAX(ISNULL(W4.RESOURCE_NAME,''))	AS RESOURCE_NAME
,MAX(W4.DATETIME)					AS [DATETIME]
,MAX(W4.HOUR_INTERVAL)				AS HOUR_INTERVAL
,MAX(W4.FF_AGENT_NAME)				AS EMPLOYEE_ID
,MAX(W4.DATETIME)					AS STD_TENANT_START_TIME
,MAX(W4.BILLABLE_SKILL_Y_N)			AS BILLABLE_SKILL_Y_N

,SUM(ISNULL(W4.LOGGED_IN_DUR					,0.00))	AS LOGGED_IN_DUR
,SUM(ISNULL(W4.READY_DUR						,0.00))	AS READY_DUR
,SUM(ISNULL(W4.RING_DUR							,0.00))	AS RING_DUR
,SUM(ISNULL(W4.ON_CALL_DUR						,0.00))	AS ON_CALL_DUR
,SUM(ISNULL(W4.ON_CALL_SILENT_DUR				,0.00))	AS ON_CALL_SILENT_DUR
,SUM(ISNULL(W4.ACW_DUR							,0.00))	AS ACW_DUR
,SUM(ISNULL(W4.ON_PARK_DUR						,0.00))	AS ON_PARK_DUR
,SUM(ISNULL(W4.ON_VOICEMAIL_DUR					,0.00))	AS ON_VOICEMAIL_DUR
,SUM(ISNULL(W4.ON_PREVIEW_DUR					,0.00))	AS ON_PREVIEW_DUR
,SUM(ISNULL(W4.NRD_ACW_DUR						,0.00))	AS NRD_ACW_DUR
,SUM(ISNULL(W4.NRD_TASK_COMP_DUR				,0.00))	AS NRD_TASK_COMP_DUR
,SUM(ISNULL(W4.NRD_SYSTEM_OBC_DUR				,0.00))	AS NRD_SYSTEM_OBC_DUR
,SUM(ISNULL(W4.ON_HOLD_DUR						,0.00))	AS ON_HOLD_DUR
,SUM(ISNULL(W4.NRD_TRAINING_DUR					,0.00))	AS NRD_TRAINING_DUR
,SUM(ISNULL(W4.NRD_MEETING_DUR					,0.00))	AS NRD_MEETING_DUR
,SUM(ISNULL(W4.NRD_MANDATORY_REPORTING_DUR		,0.00))	AS NRD_MANDATORY_REPORTING_DUR
,SUM(ISNULL(W4.NRD_MANUAL_OBC_DUR				,0.00))	AS NRD_MANUAL_OBC_DUR
,SUM(ISNULL(W4.NRD_ACW_AGENT_DUR				,0.00))	AS NRD_ACW_AGENT_DUR
,SUM(ISNULL(W4.NRD_OFFLINE_VENDOR_UNPAID_DUR	,0.00))	AS NRD_OFFLINE_VENDOR_UNPAID_DUR
,SUM(ISNULL(W4.NRD_REASON_4_DUR					,0.00))	AS NRD_REASON_4_DUR
,SUM(ISNULL(W4.NOT_READY_BILLABLE				,0.00))	AS NOT_READY_BILLABLE
,SUM(ISNULL(W4.NOT_READY_NON_BILLABLE			,0.00))	AS NOT_READY_NON_BILLABLE
,SUM(ISNULL(W4.NON_BILLABLE_SKILL_DUR			,0.00))	AS NON_BILLABLE_SKILL_DUR
,SUM(ISNULL(W4.NON_BILLABLE_STATE_REASON_DUR	,0.00))	AS NON_BILLABLE_STATE_REASON_DUR
,SUM(ISNULL(W4.BILLABLE_CLIENT					,0.00))	AS BILLABLE_CLIENT
,SUM(ISNULL(W4.TOTAL_TALK						,0.00))	AS TOTAL_TALK
,SUM(ISNULL(W4.TOTAL_ACW						,0.00))	AS TOTAL_ACW
,SUM(ISNULL(W4.AUTHORIZED						,0.00))	AS AUTHORIZED

,MAX(ISNULL(W4.EMAIL							,''  ))	AS EMAIL
,MAX(ISNULL(W4.ID_EXT							,''	 ))	AS ID_EXT
,MAX(ISNULL(W4.SCHEDULER_ACL_NAME				,''	 ))	AS SCHEDULER_ACL_NAME
,W4.STD_TENANT_START_DATE_TIME_KEY						AS STD_TENANT_START_DATE_TIME_KEY
,MAX(W4.CAL_DATE									 )	AS CAL_DATE
,MAX(ISNULL(W4.TENANT_KEY						,''	 ))	AS TENANT_KEY
,MAX(ISNULL(W4.AIR_DAY_TYPE						,''	 ))	AS AIR_DAY_TYPE
,MAX(ISNULL(W4.AIR_ACW_FONT_COLOR				,''  ))	AS AIR_ACW_FONT_COLOR
,MAX(ISNULL(W4.MIN_GUARANTEE_RATE				,0.00))	AS MIN_GUARANTEE_RATE
,MAX(ISNULL(W4.MIN_GUARANTEE_TYPE				,''	 ))	AS MIN_GUARANTEE_TYPE
,MAX(ISNULL(W4.AUTHORIZED_TO_INVOICE_TYPE		,''	 ))	AS AUTHORIZED_TO_INVOICE_TYPE
,MAX(ISNULL(W4.HAS_HOLIDAYS						,''	 )) AS HAS_HOLIDAYS
,MAX(ISNULL(W4.INCLUDE_IN_CAS					,''	 )) AS INCLUDE_IN_CAS
,MAX(ISNULL(W4.READY_FOR_XML					,''	 )) AS READY_FOR_XML
,MAX(ISNULL(W4.SHOW_ID_EXTS						,''	 ))	AS SHOW_ID_EXTS
,MAX(ISNULL(W4.INVOICE_ID						,''	 )) AS INVOICE_ID

,@WS_ROW_CREATED_TIME									AS WS_ROW_CREATED_TIME
,NULL													AS WS_ROW_UPDATED_TIME

FROM            WSOL_TB_IMPORTS_APFM_INVOICING_4  W4

GROUP BY
 W4.FF_SKILL_AVAILABILITY
,W4.FF_AGENT_NAME
,W4.STD_TENANT_START_DATE_TIME_KEY

ORDER BY
 MIN(W4.SEQNO)


--=====================================================================================================================
--Helps with LEFT OUTER JOIN when breaking up ftp file records into 15 minute intervals:
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME
SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN(STD_TENANT_START_TIME) FROM WSOL_TB_IMPORTS_APFM_INVOICING_5))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX(STD_TENANT_START_TIME) FROM WSOL_TB_IMPORTS_APFM_INVOICING_5))  
--=====================================================================================================================

--SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_5 ORDER BY SEQNO
--SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_5 WHERE BILLABLE_SKILL_Y_N = 'N' ORDER BY SEQNO

--==========================================
-- UPDATE PERMANENT TABLE
--==========================================

UPDATE WSOL_TB_IMPORTS_APFM_INVOICING SET
 FF_DATE						= W5.FF_DATE
,FF_HOUR						= W5.FF_HOUR
--,FF_SKILL_AVAILABILITY			= W5.FF_SKILL_AVAILABILITY
--,FF_AGENT_NAME					= W5.FF_AGENT_NAME

,SEQNO_ADDED_TIME				= W5.SEQNO_ADDED_TIME
,SEQNO							= W5.SEQNO
,FTP_FILE_NAME					= W5.FTP_FILE_NAME

,RESOURCE_NAME					= W5.RESOURCE_NAME					
,[DATETIME]						= W5.[DATETIME]
,HOUR_INTERVAL					= W5.HOUR_INTERVAL
,EMPLOYEE_ID					= W5.EMPLOYEE_ID
,STD_TENANT_START_TIME			= W5.STD_TENANT_START_TIME
,BILLABLE_SKILL_Y_N				= W5.BILLABLE_SKILL_Y_N
,LOGGED_IN_DUR					= W5.LOGGED_IN_DUR
,READY_DUR						= W5.READY_DUR
,RING_DUR						= W5.RING_DUR
,ON_CALL_DUR					= W5.ON_CALL_DUR
,ON_CALL_SILENT_DUR				= W5.ON_CALL_SILENT_DUR
,ACW_DUR						= W5.ACW_DUR
,ON_PARK_DUR					= W5.ON_PARK_DUR
,ON_VOICEMAIL_DUR				= W5.ON_VOICEMAIL_DUR
,ON_PREVIEW_DUR					= W5.ON_PREVIEW_DUR
,NRD_ACW_DUR					= W5.NRD_ACW_DUR
,NRD_TASK_COMP_DUR				= W5.NRD_TASK_COMP_DUR
,NRD_SYSTEM_OBC_DUR				= W5.NRD_SYSTEM_OBC_DUR
,ON_HOLD_DUR					= W5.ON_HOLD_DUR
,NRD_TRAINING_DUR				= W5.NRD_TRAINING_DUR
,NRD_MEETING_DUR				= W5.NRD_MEETING_DUR
,NRD_MANDATORY_REPORTING_DUR	= W5.NRD_MANDATORY_REPORTING_DUR
,NRD_MANUAL_OBC_DUR			    = W5.NRD_MANUAL_OBC_DUR
,NRD_ACW_AGENT_DUR			    = W5.NRD_ACW_AGENT_DUR
,NRD_OFFLINE_VENDOR_UNPAID_DUR  = W5.NRD_OFFLINE_VENDOR_UNPAID_DUR
,NRD_REASON_4_DUR				= W5.NRD_REASON_4_DUR
,NOT_READY_BILLABLE				= W5.NOT_READY_BILLABLE
,NOT_READY_NON_BILLABLE			= W5.NOT_READY_NON_BILLABLE
,NON_BILLABLE_SKILL_DUR			= W5.NON_BILLABLE_SKILL_DUR
,NON_BILLABLE_STATE_REASON_DUR	= W5.NON_BILLABLE_STATE_REASON_DUR
,BILLABLE_CLIENT				= W5.BILLABLE_CLIENT
,TOTAL_TALK						= W5.TOTAL_TALK
,TOTAL_ACW						= W5.TOTAL_ACW
,AUTHORIZED						= W5.AUTHORIZED
,EMAIL							= W5.EMAIL
,ID_EXT							= W5.ID_EXT
,SCHEDULER_ACL_NAME				= W5.SCHEDULER_ACL_NAME
--,STD_TENANT_START_DATE_TIME_KEY = W5.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE						= W5.CAL_DATE
,TENANT_KEY						= W5.TENANT_KEY
,AIR_DAY_TYPE					= W5.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR				= W5.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE				= W5.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE				= W5.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE		= W5.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS					= W5.HAS_HOLIDAYS
,INCLUDE_IN_CAS					= W5.INCLUDE_IN_CAS
,READY_FOR_XML					= W5.READY_FOR_XML
,SHOW_ID_EXTS					= W5.SHOW_ID_EXTS
,INVOICE_ID						= W5.INVOICE_ID

,WS_ROW_CREATED_TIME			= NULL
,WS_ROW_UPDATED_TIME			= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_APFM_INVOICING_5  W5
INNER JOIN      WSOL_TB_IMPORTS_APFM_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W5.STD_TENANT_START_DATE_TIME_KEY
													 AND G.FF_AGENT_NAME					= W5.FF_AGENT_NAME
													 AND G.FF_SKILL_AVAILABILITY			= W5.FF_SKILL_AVAILABILITY

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY	= W5.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_AGENT_NAME					= W5.FF_AGENT_NAME
  AND G.FF_SKILL_AVAILABILITY			= W5.FF_SKILL_AVAILABILITY


--==========================================
--INSERT INTO PERMANENT IMPORT TABLE: 
--==========================================
INSERT INTO WSOL_TB_IMPORTS_APFM_INVOICING
(FF_DATE
,FF_HOUR
,FF_SKILL_AVAILABILITY
,FF_AGENT_NAME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_TIME
,BILLABLE_SKILL_Y_N
,LOGGED_IN_DUR
,READY_DUR
,RING_DUR
,ON_CALL_DUR
,ON_CALL_SILENT_DUR
,ACW_DUR
,ON_PARK_DUR
,ON_VOICEMAIL_DUR
,ON_PREVIEW_DUR
,NRD_ACW_DUR
,NRD_TASK_COMP_DUR
,NRD_SYSTEM_OBC_DUR
,ON_HOLD_DUR
,NRD_TRAINING_DUR
,NRD_MEETING_DUR
,NRD_MANDATORY_REPORTING_DUR
,NRD_MANUAL_OBC_DUR
,NRD_ACW_AGENT_DUR
,NRD_OFFLINE_VENDOR_UNPAID_DUR
,NRD_REASON_4_DUR
,NOT_READY_BILLABLE
,NOT_READY_NON_BILLABLE
,NON_BILLABLE_SKILL_DUR
,NON_BILLABLE_STATE_REASON_DUR
,BILLABLE_CLIENT
,TOTAL_TALK
,TOTAL_ACW
,AUTHORIZED
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W5.FF_DATE
,W5.FF_HOUR
,W5.FF_SKILL_AVAILABILITY
,W5.FF_AGENT_NAME

,W5.SEQNO_ADDED_TIME
,W5.SEQNO
,W5.FTP_FILE_NAME

,W5.RESOURCE_NAME
,W5.[DATETIME]
,W5.HOUR_INTERVAL
,W5.EMPLOYEE_ID
,W5.STD_TENANT_START_TIME
,W5.BILLABLE_SKILL_Y_N
,W5.LOGGED_IN_DUR
,W5.READY_DUR
,W5.RING_DUR
,W5.ON_CALL_DUR
,W5.ON_CALL_SILENT_DUR
,W5.ACW_DUR
,W5.ON_PARK_DUR
,W5.ON_VOICEMAIL_DUR
,W5.ON_PREVIEW_DUR
,W5.NRD_ACW_DUR
,W5.NRD_TASK_COMP_DUR
,W5.NRD_SYSTEM_OBC_DUR
,W5.ON_HOLD_DUR
,W5.NRD_TRAINING_DUR
,W5.NRD_MEETING_DUR
,W5.NRD_MANDATORY_REPORTING_DUR
,W5.NRD_MANUAL_OBC_DUR
,W5.NRD_ACW_AGENT_DUR
,W5.NRD_OFFLINE_VENDOR_UNPAID_DUR
,W5.NRD_REASON_4_DUR
,W5.NOT_READY_BILLABLE
,W5.NOT_READY_NON_BILLABLE
,W5.NON_BILLABLE_SKILL_DUR
,W5.NON_BILLABLE_STATE_REASON_DUR
,W5.BILLABLE_CLIENT
,W5.TOTAL_TALK
,W5.TOTAL_ACW
,W5.AUTHORIZED
,W5.EMAIL
,W5.ID_EXT
,W5.SCHEDULER_ACL_NAME
,W5.STD_TENANT_START_DATE_TIME_KEY
,W5.CAL_DATE
,W5.TENANT_KEY
,W5.AIR_DAY_TYPE
,W5.AIR_ACW_FONT_COLOR
,W5.MIN_GUARANTEE_RATE
,W5.MIN_GUARANTEE_TYPE
,W5.AUTHORIZED_TO_INVOICE_TYPE
,W5.HAS_HOLIDAYS
,W5.INCLUDE_IN_CAS
,W5.READY_FOR_XML
,W5.SHOW_ID_EXTS
,W5.INVOICE_ID

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_APFM_INVOICING_5  W5

LEFT JOIN       WSOL_TB_IMPORTS_APFM_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W5.STD_TENANT_START_DATE_TIME_KEY
													 AND G.FF_AGENT_NAME					= W5.FF_AGENT_NAME
													 AND G.FF_SKILL_AVAILABILITY			= W5.FF_SKILL_AVAILABILITY	
														 
WHERE ( G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W5.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( G.FF_AGENT_NAME						IS NULL AND ISNULL(W5.FF_AGENT_NAME,'') <> '' )
  AND ( G.FF_SKILL_AVAILABILITY				IS NULL AND ISNULL(W5.FF_SKILL_AVAILABILITY,'') <> '' )


--==========================================
SET DATEFIRST 1  -- = Monday  
--==========================================

--===============================================================================================================================
IF OBJECT_ID('TEMPDB..#DT_EASY_WEEKS') IS NOT NULL BEGIN
   DROP TABLE #DT_EASY_WEEKS
END
CREATE TABLE #DT_EASY_WEEKS
(CAL_DATE_STRING      VARCHAR(10)
,CAL_WEEK_START_DATE  DATETIME
,CAL_WEEK_END_DATE    DATETIME
,PAY_CYCLE_CLOSURE_DATE DATETIME
)
INSERT INTO #DT_EASY_WEEKS
SELECT
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
FROM DATE_TIME DT
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
GROUP BY 
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE 
--===========================
UPDATE #DT_EASY_WEEKS SET CAL_WEEK_END_DATE = DATEADD(DD,6,CAL_WEEK_START_DATE)
UPDATE #DT_EASY_WEEKS SET
 PAY_CYCLE_CLOSURE_DATE = (CASE WHEN (DATEDIFF(DD,CAST('04/27/2014' AS DATETIME),CAL_WEEK_END_DATE) % 14) = 0 THEN
									CAL_WEEK_END_DATE
								ELSE
									DATEADD(DD,7,CAL_WEEK_END_DATE)
								END)

-- SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING ORDER BY SEQNO
-- SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING WHERE BILLABLE_SKILL_Y_N = 'N' ORDER BY SEQNO

--SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_5 ORDER BY SEQNO
--=============================================================================
-- GROUP DATA BY AGENT & INTERVAL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_APFM_INVOICING_6

INSERT INTO WSOL_TB_IMPORTS_APFM_INVOICING_6
(
FF_DATE
,FF_HOUR
,FF_AGENT_NAME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_TIME
,LOGGED_IN_DUR
,READY_DUR
,RING_DUR
,ON_CALL_DUR
,ON_CALL_SILENT_DUR
,ACW_DUR
,ON_PARK_DUR
,ON_VOICEMAIL_DUR
,ON_PREVIEW_DUR
,NRD_ACW_DUR
,NRD_TASK_COMP_DUR
,NRD_SYSTEM_OBC_DUR
,ON_HOLD_DUR
,NRD_TRAINING_DUR
,NRD_MEETING_DUR
,NRD_MANDATORY_REPORTING_DUR
,NRD_MANUAL_OBC_DUR
,NRD_ACW_AGENT_DUR
,NRD_OFFLINE_VENDOR_UNPAID_DUR
,NRD_REASON_4_DUR
,NOT_READY_BILLABLE
,NOT_READY_NON_BILLABLE
,NON_BILLABLE_SKILL_DUR
,NON_BILLABLE_STATE_REASON_DUR
,BILLABLE_CLIENT
,TOTAL_TALK
,TOTAL_ACW
,AUTHORIZED
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 MAX(W4.FF_DATE)					AS FF_DATE
,MAX(W4.FF_HOUR)					AS FF_HOUR
,W4.FF_AGENT_NAME					AS FF_AGENT_NAME

,MAX(W4.SEQNO_ADDED_TIME)			AS SEQNO_ADDED_TIME
,MIN(W4.SEQNO)						AS SEQNO
,MAX(W4.FTP_FILE_NAME)				AS FTP_FILE_NAME

,MAX(ISNULL(W4.RESOURCE_NAME,''))	AS RESOURCE_NAME
,MAX(W4.DATETIME)					AS [DATETIME]
,MAX(W4.HOUR_INTERVAL)				AS HOUR_INTERVAL
,MAX(W4.FF_AGENT_NAME)				AS EMPLOYEE_ID
,MAX(W4.DATETIME)					AS STD_TENANT_START_TIME

,SUM(ISNULL(W4.LOGGED_IN_DUR					,0.00))	AS LOGGED_IN_DUR
,SUM(ISNULL(W4.READY_DUR						,0.00))	AS READY_DUR
,SUM(ISNULL(W4.RING_DUR							,0.00))	AS RING_DUR
,SUM(ISNULL(W4.ON_CALL_DUR						,0.00))	AS ON_CALL_DUR
,SUM(ISNULL(W4.ON_CALL_SILENT_DUR				,0.00))	AS ON_CALL_SILENT_DUR
,SUM(ISNULL(W4.ACW_DUR							,0.00))	AS ACW_DUR
,SUM(ISNULL(W4.ON_PARK_DUR						,0.00))	AS ON_PARK_DUR
,SUM(ISNULL(W4.ON_VOICEMAIL_DUR					,0.00))	AS ON_VOICEMAIL_DUR
,SUM(ISNULL(W4.ON_PREVIEW_DUR					,0.00))	AS ON_PREVIEW_DUR
,SUM(ISNULL(W4.NRD_ACW_DUR						,0.00))	AS NRD_ACW_DUR
,SUM(ISNULL(W4.NRD_TASK_COMP_DUR				,0.00))	AS NRD_TASK_COMP_DUR
,SUM(ISNULL(W4.NRD_SYSTEM_OBC_DUR				,0.00))	AS NRD_SYSTEM_OBC_DUR
,SUM(ISNULL(W4.ON_HOLD_DUR						,0.00))	AS ON_HOLD_DUR
,SUM(ISNULL(W4.NRD_TRAINING_DUR					,0.00))	AS NRD_TRAINING_DUR
,SUM(ISNULL(W4.NRD_MEETING_DUR					,0.00))	AS NRD_MEETING_DUR
,SUM(ISNULL(W4.NRD_MANDATORY_REPORTING_DUR		,0.00))	AS NRD_MANDATORY_REPORTING_DUR
,SUM(ISNULL(W4.NRD_MANUAL_OBC_DUR				,0.00))	AS NRD_MANUAL_OBC_DUR
,SUM(ISNULL(W4.NRD_ACW_AGENT_DUR				,0.00))	AS NRD_ACW_AGENT_DUR
,SUM(ISNULL(W4.NRD_OFFLINE_VENDOR_UNPAID_DUR	,0.00))	AS NRD_OFFLINE_VENDOR_UNPAID_DUR
,SUM(ISNULL(W4.NRD_REASON_4_DUR					,0.00))	AS NRD_REASON_4_DUR
,SUM(ISNULL(W4.NOT_READY_BILLABLE				,0.00))	AS NOT_READY_BILLABLE
,SUM(ISNULL(W4.NOT_READY_NON_BILLABLE			,0.00))	AS NOT_READY_NON_BILLABLE
,SUM(ISNULL(W4.NON_BILLABLE_SKILL_DUR			,0.00))	AS NON_BILLABLE_SKILL_DUR
,SUM(ISNULL(W4.NON_BILLABLE_STATE_REASON_DUR	,0.00))	AS NON_BILLABLE_STATE_REASON_DUR
,SUM(ISNULL(W4.BILLABLE_CLIENT					,0.00))	AS BILLABLE_CLIENT
,SUM(ISNULL(W4.TOTAL_TALK						,0.00))	AS TOTAL_TALK
,SUM(ISNULL(W4.TOTAL_ACW						,0.00))	AS TOTAL_ACW
,SUM(ISNULL(W4.AUTHORIZED						,0.00))	AS AUTHORIZED

,MAX(ISNULL(W4.EMAIL							,''  ))	AS EMAIL
,ISNULL(W4.ID_EXT								,''	 )	AS ID_EXT
,MAX(ISNULL(W4.SCHEDULER_ACL_NAME				,''	 ))	AS SCHEDULER_ACL_NAME
,W4.STD_TENANT_START_DATE_TIME_KEY						AS STD_TENANT_START_DATE_TIME_KEY
,MAX(W4.CAL_DATE									 )	AS CAL_DATE
,MAX(ISNULL(W4.TENANT_KEY						,''	 ))	AS TENANT_KEY
,MAX(ISNULL(W4.AIR_DAY_TYPE						,''	 ))	AS AIR_DAY_TYPE
,MAX(ISNULL(W4.AIR_ACW_FONT_COLOR				,''  ))	AS AIR_ACW_FONT_COLOR
,MAX(ISNULL(W4.MIN_GUARANTEE_RATE				,0.00))	AS MIN_GUARANTEE_RATE
,MAX(ISNULL(W4.MIN_GUARANTEE_TYPE				,''	 ))	AS MIN_GUARANTEE_TYPE
,MAX(ISNULL(W4.AUTHORIZED_TO_INVOICE_TYPE		,''	 ))	AS AUTHORIZED_TO_INVOICE_TYPE
,MAX(ISNULL(W4.HAS_HOLIDAYS						,''	 )) AS HAS_HOLIDAYS
,MAX(ISNULL(W4.INCLUDE_IN_CAS					,''	 )) AS INCLUDE_IN_CAS
,MAX(ISNULL(W4.READY_FOR_XML					,''	 )) AS READY_FOR_XML
,MAX(ISNULL(W4.SHOW_ID_EXTS						,''	 ))	AS SHOW_ID_EXTS
,MAX(ISNULL(W4.INVOICE_ID						,''	 )) AS INVOICE_ID

,@WS_ROW_CREATED_TIME									AS WS_ROW_CREATED_TIME
,NULL													AS WS_ROW_UPDATED_TIME

FROM            WSOL_TB_IMPORTS_APFM_INVOICING_4  W4

GROUP BY
 W4.FF_AGENT_NAME
,W4.ID_EXT
,W4.STD_TENANT_START_DATE_TIME_KEY

ORDER BY
 MIN(W4.SEQNO)

-- SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_6 ORDER BY SEQNO
--====================================================================================================================================
--CREATE TEMP TABLE TO HOLD NORMALIZED DATA STRUCTURE
--====================================================================================================================================
IF OBJECT_ID('TEMPDB..#WSOL_IMPORTS_APFM_UV_ANT_AIA') IS NOT NULL BEGIN
   DROP TABLE #WSOL_IMPORTS_APFM_UV_ANT_AIA
END
CREATE TABLE #WSOL_IMPORTS_APFM_UV_ANT_AIA
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[AU_DK_LOGGED_IN_DURATION] [int] NULL,
	[AU_DK_AVAILABLE_DURATION] [int] NULL,
	[AU_DK_TALK_DURATION] [int] NULL,
	[AU_DK_IB_TALK_DURATION] [int] NULL,
	[AU_DK_OB_TALK_DURATION] [int] NULL,
	[AU_DK_CONVENTIONAL_ACW] [int] NULL,
	[AU_DK_NR_DURATION] [int] NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [int] NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [int] NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [int] NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [int] NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,      --Needs to be dec() because of "* rate".  All other durs should be int.
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,  --Needs to be dec() because of "* rate".  All other durs should be int.
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](50) NULL,
	[RESOURCE_NAME] [varchar](100) NULL

	,AIRITKDUR           INT  --Invoice TalK (ITK):  What they/paul h. wants to see on invoicing reports under the col hdr of 'Talk':--Agent Invoice Report value (AIR):
	,AIRIACDUR           INT  --Invoice ACW (IAC):   What they/paul h. wants to see on invoicing reports under the col hdr of 'ACW':--Agent Invoice Report value (AIR):

	,[WS_ROW_CREATED_TIME] [datetime] NULL
	,[WS_ROW_UPDATED_TIME] [datetime] NULL
)
INSERT INTO #WSOL_IMPORTS_APFM_UV_ANT_AIA
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]
,AIA.FF_AGENT_NAME  --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING						--[DATE]             
,DT.LABEL_HH24 + ':00'					--HOD_INTERVAL

,AIA.LOGGED_IN_DUR						--AU_DK_LOGGED_IN_DURATION
,AIA.READY_DUR							--AU_DK_AVAILABLE_DURATION

,AIA.TOTAL_TALK							--AIA.RING_DUR + AIA.ON_PREVIEW_DUR + AIA.ON_CALL_DUR + AIA.ON_PARK_DUR + AIA.ON_VOICEMAIL_DUR --AU_DK_TALK_DURATION
,0										--AU_DK_IB_TALK_DURATION
,0										--AU_DK_OB_TALK_DURATION

,AIA.TOTAL_ACW							--AIA.ACW_DUR + AIA.NRD_ACW_DUR + AIA.NRD_TASK_COMP_DUR + AIA.NRD_SYSTEM_OBC_DUR	 --AU_DK_CONVENTIONAL_ACW
,0										--AU_DK_NR_DURATION
,0										--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0										--AU_DK_ADJUSTED_NR_DURATION
,AIA.AUTHORIZED							--AIA.READY_DUR + AIA.TOTAL_TALK + AIA.TOTAL_ACW + AIA.NOT_READY_BILLABLE	--AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AUTHORIZED							--AIA.READY_DUR + AIA.TOTAL_TALK + AIA.TOTAL_ACW + AIA.NOT_READY_BILLABLE	--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS  

,0  --AU_DK_XFER_COUNT
,0  --AU_DK_HOLD_COUNT
,0  --AU_DK_CONFERENCE_COUNT
,0  --AU_DK_CONSULT_COUNT
,0  --AU_DK_PUP_COUNT

,0  --AU_DK_OFFERED_COUNT
,0  --AU_DK_HANDLED_COUNT
,0  --AU_DK_IB_HANDLE_COUNT
,0  --AU_DK_OB_HANDLE_COUNT
			
,0   --AU_DK_RONA_COUNT
,0   --AU_DK_AWR_COUNT

,AIA.AUTHORIZED  --MINIMUM_GUARANTEE
,AIA.AUTHORIZED  --AUTHORIZED_TO_INVOICE

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID  --CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID 
,AIA.RESOURCE_NAME
,AIA.TOTAL_TALK --AIRITKDUR
,AIA.TOTAL_ACW  --AIRIACDUR
,dbo.getdate()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL       --	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
FROM            WSOL_TB_IMPORTS_APFM_INVOICING_6            AIA 

--ONLY WANT TO INLCUDE VALID ID EXTS IN AIA TABLE -- ID EXTS THAT HAVE INVOICE FORMULAS SET UP
INNER JOIN      YZ_TB_IMPORTS_APFM_SD_AIA_STATIC_DEFAULTS	AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      YZ_TB_IMPORTS_APFM_SD_INVOICE_GROUPS	    CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME									DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS								DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')

--==========================================
--UPDATE WSOL_TB_...UV_ANT_AIA TABLE:
--==========================================  --  SELECT TOP 100 * FROM WSOL_TB_IMPORTS_APFM_UV_ANT_AIA
UPDATE WSOL_TB_IMPORTS_APFM_UV_ANT_AIA SET
 [PLATFORM]					  = W1.[PLATFORM]
,[STATUS]                     = W1.[STATUS]
,INVOICE_MAP_KEY              = W1.INVOICE_MAP_KEY
,FIELD_NAME                   = W1.FIELD_NAME
,SCHEDULER_PROJECT_ID         = W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME           = W1.SCHEDULER_ACL_NAME
,ACD_ID_EXTENSION             = W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID      = W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME    = W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID       = W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME     = W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID        = W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID = W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID       = W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY        = W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID            = W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID           = W1.HOLIDAY_INVOICE_ID
,HOLIDAY                      = W1.HOLIDAY
,FILE_FORMAT_OF_PUSH          = W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID = W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL                      = W1.NEW_ACL
,CURRENT_CATS                 = W1.CURRENT_CATS
,CATS_ID                      = W1.CATS_ID
,PATS_ID                      = W1.PATS_ID
,SMART_ELIGIBLE               = W1.SMART_ELIGIBLE
,SMART_TIER_1                 = W1.SMART_TIER_1
,SMART_TIER_2                 = W1.SMART_TIER_2
,SMART_TIER_3                 = W1.SMART_TIER_3
,INTERVAL                     = W1.INTERVAL
,[DATE]                       = W1.[DATE]
,HOD_INTERVAL                 = W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION     = W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION     = W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION          = W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION       = W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION       = W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW       = W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION            = W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT             = W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT             = W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT       = W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT          = W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT              = W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT          = W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT          = W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT        = W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT        = W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT             = W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT              = W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE            = W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE        = W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE             = W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE       = W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
,FTP_FILE_NAME				  = W1.FTP_FILE_NAME	
,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE                     = W1.CAL_DATE
,TENANT_KEY                   = W1.TENANT_KEY
,AIR_DAY_TYPE                 = W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR           = W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE           = W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE           = W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE   = W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS                 = W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS               = W1.INCLUDE_IN_CAS
,READY_FOR_XML                = W1.READY_FOR_XML
,SHOW_ID_EXTS                 = W1.SHOW_ID_EXTS
,INVOICE_ID                   = W1.INVOICE_ID
,RESOURCE_NAME                = W1.RESOURCE_NAME

,AIRITKDUR                    = W1.AIRITKDUR
,AIRIACDUR                    = W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME          = @WS_ROW_CREATED_TIME

FROM            #WSOL_IMPORTS_APFM_UV_ANT_AIA       W1
INNER JOIN      WSOL_TB_IMPORTS_APFM_UV_ANT_AIA  UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													AND UV.TENANT_KEY                     = W1.TENANT_KEY
													AND UV.SCHEDULER_ACL_NAME	          = W1.SCHEDULER_ACL_NAME
												    AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.TENANT_KEY                     = W1.TENANT_KEY )
  AND ( UV.SCHEDULER_ACL_NAME             = W1.SCHEDULER_ACL_NAME )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )     

--===============================================
--INSERT TMP TABLE FIELDS INTO YZ_TB_... TABLE:
--===============================================
INSERT INTO WSOL_TB_IMPORTS_APFM_UV_ANT_AIA
SELECT 
 W1.[PLATFORM]
,W1.[STATUS]
,W1.INVOICE_MAP_KEY
,W1.FIELD_NAME
,W1.SCHEDULER_PROJECT_ID
,W1.SCHEDULER_ACL_NAME
,W1.ACD_ID_EXTENSION
,W1.OFFICIAL_WSOL_CLIENT_ID
,W1.OFFICIAL_WSOL_CLIENT_NAME
,W1.OFFICIAL_ACD_CLIENT_ID
,W1.OFFICIAL_ACD_CLIENT_NAME
,W1.PRIMARY_PROJECT_MANAGER_ID
,W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,W1.AGENT_TECHNOLOGY_MANAGER_ID
,W1.CONTRACTOR_SUPPORT_PATHWAY
,W1.INVOICE_SYSTEM_ID
,W1.HOLIDAY_INVOICE_ID
,W1.HOLIDAY
,W1.FILE_FORMAT_OF_PUSH
,W1.AGENT_PREPARATION_INVOICE_ID
,W1.NEW_ACL
,W1.CURRENT_CATS
,W1.CATS_ID
,W1.PATS_ID
,W1.SMART_ELIGIBLE
,W1.SMART_TIER_1
,W1.SMART_TIER_2
,W1.SMART_TIER_3
,W1.INTERVAL
,W1.[DATE]
,W1.HOD_INTERVAL
,W1.AU_DK_LOGGED_IN_DURATION
,W1.AU_DK_AVAILABLE_DURATION
,W1.AU_DK_TALK_DURATION
,W1.AU_DK_IB_TALK_DURATION
,W1.AU_DK_OB_TALK_DURATION
,W1.AU_DK_CONVENTIONAL_ACW
,W1.AU_DK_NR_DURATION
,W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,W1.AU_DK_ADJUSTED_NR_DURATION
,W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,W1.AU_DK_XFER_COUNT
,W1.AU_DK_HOLD_COUNT
,W1.AU_DK_CONFERENCE_COUNT
,W1.AU_DK_CONSULT_COUNT
,W1.AU_DK_PUP_COUNT
,W1.AU_DK_OFFERED_COUNT
,W1.AU_DK_HANDLED_COUNT
,W1.AU_DK_IB_HANDLE_COUNT
,W1.AU_DK_OB_HANDLE_COUNT
,W1.AU_DK_RONA_COUNT
,W1.AU_DK_AWR_COUNT
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_TO_INVOICE
,W1.WEEK_ENDING_DATE
,W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
,W1.FTP_FILE_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE                   
,W1.TENANT_KEY                 
,W1.AIR_DAY_TYPE               
,W1.AIR_ACW_FONT_COLOR         
,W1.MIN_GUARANTEE_RATE         
,W1.MIN_GUARANTEE_TYPE         
,W1.AUTHORIZED_TO_INVOICE_TYPE 
,W1.HAS_HOLIDAYS               
,W1.INCLUDE_IN_CAS             
,W1.READY_FOR_XML              
,W1.SHOW_ID_EXTS               
,W1.INVOICE_ID                 
,W1.RESOURCE_NAME              

,W1.AIRITKDUR              
,W1.AIRIACDUR              

,W1.WS_ROW_CREATED_TIME
,NULL  --WS_ROW_UPDATED_TIME

FROM        #WSOL_IMPORTS_APFM_UV_ANT_AIA		W1
LEFT JOIN	WSOL_TB_IMPORTS_APFM_UV_ANT_AIA		UV  ON UV.STD_TENANT_START_DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY
											AND UV.TENANT_KEY								= W1.TENANT_KEY
											AND UV.SCHEDULER_ACL_NAME						= W1.SCHEDULER_ACL_NAME
											AND UV.INVOICE_MAP_KEY							= W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 ) 
  AND ( UV.TENANT_KEY                     IS NULL AND ISNULL(W1.TENANT_KEY,'') <> '' )
  AND ( UV.SCHEDULER_ACL_NAME             IS NULL AND ISNULL(W1.SCHEDULER_ACL_NAME,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(W1.INVOICE_MAP_KEY,'') <> '' )

--==========================================================================================================================
--INSERT DATA INTO GLOBAL WORK TABLE FOR WA/SA
--==========================================================================================================================
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_APFM_WORK_HOURS_ALL') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_APFM_WORK_HOURS_ALL
END
CREATE TABLE #WSOL_TB_IMPORTS_APFM_WORK_HOURS_ALL
(	[TENANT_NAME] [varchar] (100) NOT NULL,
	[OFFICIAL_ACL_NAME] [varchar] (200) NOT NULL,
	[AGENT_NAME] [varchar] (200) NULL,
	[FIELD_MAP_ID] [varchar] (100) NOT NULL,
	[EMAIL] [varchar] (100) NULL,
	[LOGGED_IN_HOURS] [decimal] (10,2) NULL,
	[PRODUCTIVE_HOURS] [decimal] (10,2) NULL,
	[DATETIME] [datetime] NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[FTP_FILE_NAME] [varchar] (100) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL
)

INSERT INTO #WSOL_TB_IMPORTS_APFM_WORK_HOURS_ALL
SELECT
 'APFM'
,WT.OFFICIAL_ACL_NAME
,WT.AGENT_NAME
,WT.FIELD_MAP_ID
,WT.EMAIL
,WT.LOGGED_IN_HOURS
,WT.PRODUCTIVE_HOURS
,WT.DATETIME
,WT.STD_TENANT_START_DATE_TIME_KEY
,WT.FTP_FILE_NAME
,WT.WS_ROW_CREATED_TIME
FROM
(	SELECT
	 --TENANT_NAME
	 CASE WHEN W6.SCHEDULER_ACL_NAME = 'APFM Standard Agents R2' THEN
			'APFM Standard Agents'
		  ELSE W6.SCHEDULER_ACL_NAME END						AS OFFICIAL_ACL_NAME
	,W6.RESOURCE_NAME											AS AGENT_NAME
	,W6.EMPLOYEE_ID												AS FIELD_MAP_ID
	,W6.EMAIL													AS [EMAIL]
	,SUM(W6.LOGGED_IN_DUR)/3600.00								AS LOGGED_IN_HOURS
	,SUM(W6.AUTHORIZED)   /3600.00								AS PRODUCTIVE_HOURS
	,CAST(CONVERT(VARCHAR(10), W6.[DATETIME], 111) AS DATETIME)	AS [DATETIME]
	,DT.DATE_TIME_DAY_KEY										AS STD_TENANT_START_DATE_TIME_KEY
	,W6.FTP_FILE_NAME											AS FTP_FILE_NAME
	,dbo.getdate()													AS WS_ROW_CREATED_TIME
	
	FROM WSOL_TB_IMPORTS_APFM_INVOICING_6	W6
	INNER JOIN DATE_TIME					DT		ON DT.DATE_TIME_KEY	= W6.STD_TENANT_START_DATE_TIME_KEY

	GROUP BY
	 W6.SCHEDULER_ACL_NAME
	,W6.RESOURCE_NAME
	,W6.EMPLOYEE_ID
	,W6.EMAIL
	,CAST(CONVERT(VARCHAR(10), W6.[DATETIME], 111) AS DATETIME)
	,DT.DATE_TIME_DAY_KEY
	,W6.FTP_FILE_NAME
) WT

UPDATE WSOL_TB_IMPORTS_WORK_HOURS_ALL SET
 TENANT_NAME					= WTT.TENANT_NAME
--,OFFICIAL_ACL_NAME			= WTT.OFFICIAL_ACL_NAME
,AGENT_NAME						= WTT.AGENT_NAME
--,FIELD_MAP_ID					= WTT.FIELD_MAP_ID
,[EMAIL]						= WTT.EMAIL
,LOGGED_IN_HOURS				= WTT.LOGGED_IN_HOURS
,PRODUCTIVE_HOURS				= WTT.PRODUCTIVE_HOURS
,[DATETIME]						= WTT.DATETIME
--,STD_TENANT_START_DATE_TIME_KEY	= WTT.STD_TENANT_START_DATE_TIME_KEY
,FTP_FILE_NAME					= WTT.FTP_FILE_NAME
--,WS_ROW_CREATED_TIME			= dbo.getdate()
,WS_ROW_UPDATED_TIME			= dbo.getdate()

FROM #WSOL_TB_IMPORTS_APFM_WORK_HOURS_ALL WTT

INNER JOIN WSOL_TB_IMPORTS_WORK_HOURS_ALL WHR ON WHR.STD_TENANT_START_DATE_TIME_KEY = WTT.STD_TENANT_START_DATE_TIME_KEY
											 AND WHR.FIELD_MAP_ID					= WTT.FIELD_MAP_ID
											 AND WHR.OFFICIAL_ACL_NAME				= WTT.OFFICIAL_ACL_NAME

WHERE WHR.STD_TENANT_START_DATE_TIME_KEY	= WTT.STD_TENANT_START_DATE_TIME_KEY
  AND WHR.FIELD_MAP_ID						= WTT.FIELD_MAP_ID
  AND WHR.OFFICIAL_ACL_NAME					= WTT.OFFICIAL_ACL_NAME

INSERT INTO WSOL_TB_IMPORTS_WORK_HOURS_ALL
SELECT
 WTI.TENANT_NAME
,WTI.OFFICIAL_ACL_NAME
,WTI.AGENT_NAME
,WTI.FIELD_MAP_ID
,WTI.EMAIL
,WTI.LOGGED_IN_HOURS
,WTI.PRODUCTIVE_HOURS
,WTI.DATETIME
,WTI.STD_TENANT_START_DATE_TIME_KEY
,WTI.FTP_FILE_NAME
,WTI.WS_ROW_CREATED_TIME
,NULL
FROM #WSOL_TB_IMPORTS_APFM_WORK_HOURS_ALL	WTI

LEFT JOIN WSOL_TB_IMPORTS_WORK_HOURS_ALL	WRK  ON WRK.STD_TENANT_START_DATE_TIME_KEY	= WTI.STD_TENANT_START_DATE_TIME_KEY
												AND WRK.FIELD_MAP_ID					= WTI.FIELD_MAP_ID
												AND WRK.OFFICIAL_ACL_NAME				= WTI.OFFICIAL_ACL_NAME

WHERE ( WRK.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(WTI.STD_TENANT_START_DATE_TIME_KEY,0 ) <> 0 )
  AND ( WRK.FIELD_MAP_ID					IS NULL AND ISNULL(WTI.FIELD_MAP_ID,'') <> '' )
  AND ( WRK.OFFICIAL_ACL_NAME				IS NULL AND ISNULL(WTI.OFFICIAL_ACL_NAME,'') <> '' )

--===============================================
EARLY_EXIT:
--===============================================