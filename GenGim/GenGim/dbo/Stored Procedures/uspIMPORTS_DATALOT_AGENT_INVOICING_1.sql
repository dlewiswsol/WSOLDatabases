CREATE PROCEDURE [dbo].[uspIMPORTS_DATALOT_AGENT_INVOICING]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300) --Hid. Def=' '
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'  MANual,SUBscription
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='INV'
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='INV'  
AS
SET NOCOUNT ON    

--  EXECUTE [dbo].[uspIMPORTS_DATALOT_AGENT_INVOICING] '05/23/2014','06/05/2014','0','0','0','0','HR','Y','SS','NM','Y','4','MAN','INV','INV'

--060614: INVOICE_ID IS WHAT IS SUPPOSE TO SHOW ON THE CAR/CAS SRS INVOICE REPORTS AS THE GROUP!!!!

--@TIME_INTERVAL:  Can only show invoicing report at hour level or higher !!!

--Durations in FTP FILE are in minutes.  Then converted to seconds during cleanup.  So, this report can pull by secs, mins, and hrs now.

--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_SD_INVOICE_GROUPS
--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA
    
--TMP:  FOR RUNNING SQL JOBS FOR PREVIOUS DAYS:  
--SET @DATE_BEG = '05/23/2014'
--SET @DATE_END = '06/05/2014'

--==================================--SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) 
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) -- + 1
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
END
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

DECLARE
 @MTD_BEG AS DATETIME
,@MTD_END AS DATETIME  --,@YTD_BEG AS DATETIME--,@YTD_END AS DATETIME
SET @MTD_BEG = CAST(CAST(DATEPART(mm,@DTM_BEG) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)
SET @MTD_END = @DTM_END  --SET @YTD_BEG = CAST('01/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)  --THINK _BEG MAKES MORE SENSE THAN _END.--SET @YTD_END = @DTM_END
--==================================
	--                                                         MD=Month with daily totals.   MR=Month, NO Daily totals.
	--                                                         DR=Date Range, NO daily totals.  
	--                                                           The 'M' in MD,MR needed, to know that month is wanted, so @MTD_BEG and @MTD_END can be set correctly...
	--     @DLY_ AND @MTD_ ARE USED TO DETERMINE WHAT DAYS TO SHOW IN THE DIFFERENT ROWS OF DATA.

--@EXECUTIONER FROM SUBSCRIPTION WILL PASS IN 'MR' OR 'MD'.  OTHERWISE WILL BE 'DY' OR 'DR' WHEN MANUAL.

IF @TIME_INTERVAL IN ('MR','MD') BEGIN  --MONTH DETERMINED BY @DTM_BEG.
	SET @DTM_BEG = @MTD_BEG
	SET @DTM_END = @MTD_END
END

--==================================
--SET @TENANT_KEY      = ',' + LTRIM(RTRIM(@TENANT_KEY))      + ','
----SET @SCHEDULER_GROUP = ',' + LTRIM(RTRIM(@SCHEDULER_GROUP)) + ','
--SET @ID_EXT          = ',' + LTRIM(RTRIM(@ID_EXT))          + ','


--==================================
--SET AMOUNT TO DIVIDE BY:
--==================================
DECLARE @DS DECIMAL(10,2)  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.00     --DIVIDE SECONDS BY 1  TO GET SAME, SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
    SET @DS = 60.00    --DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
    SET @DS = 3600.00  --DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_DATALOT_AGENT_INVOICING') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_DATALOT_AGENT_INVOICING
END
CREATE TABLE #IMPORTS_DATALOT_AGENT_INVOICING
(TENANT_NAME            VARCHAR(50)
,ID_EXT                 VARCHAR(3)
,SCHEDULER_ACL_NAME     VARCHAR(100)  
,EMPLOYEE_ID            VARCHAR(50)
,[EMAIL]				VARCHAR(100)   
,STD_TENANT_START_DATE_TIME_KEY INT
,RESOURCE_NAME          VARCHAR(100)
,CATS_ID				VARCHAR(50)
,ASA_NAME				VARCHAR(100)

,AIR_DAY_TYPE				varchar(1)
,AIR_ACW_FONT_COLOR			varchar(50)
,MIN_GUARANTEE_RATE			decimal(6,3)
,MIN_GUARANTEE_MINUTES		decimal(6,3)
,MIN_GUARANTEE_TYPE			varchar(50)
,WRAP_MINUTE_RATE			decimal(6,3)
,BASE_3_MINUTE_XFER_RATE	decimal(6,3)
,[3_MINUTE_XFER_BONUS_RATE]	decimal(6,3)
,ELIGIBLE_FOR_XFER_BONUS	varchar(1)
,AUTHORIZED_TO_INVOICE_TYPE varchar(50)
,TOTAL_AUTHORIZED_PAY		decimal(6,3)
,TOTAL_AUTHORIZED_XFER_PAY	decimal(6,3)
,HAS_HOLIDAYS				varchar(1)
,PAY_RATE_STANDARD			decimal(6,3)
,PAY_RATE_HOLIDAY			decimal(6,3)
,INCLUDE_IN_CAS				varchar(1)
,READY_FOR_XML				varchar(1)
,SHOW_ID_EXTS				varchar(1)
,
[INBOUND_CALLS] [int] NULL,
[OUTBOUND_CALLS] [int] NULL,
[TOTAL_CALLS] [int] NULL,
[SUCCESSFUL_TRANSFERS] [int] NULL,
[ONLINE_TIME] [decimal](10, 2) NULL,
[CONNECTED_TIME] [decimal](10, 2) NULL,
[WRAP_TIME] [decimal](10, 2) NULL,
[WAITING_TIME] [decimal](10, 2) NULL,
[WRAP_ADJ_TIME] [decimal] (10, 2) NULL,
[WRAP_ALLOWED] [decimal] (10, 2) NULL,
[AUTHORIZED_WRAP] [decimal] (10, 2) NULL,
[CPROD] [decimal] (10, 2) NULL,
[MINIMUM_GUARANTEE] [decimal] (10, 2) NULL,
[AUTHORIZED_MINUTES] [decimal](10, 2) NULL,
[BILLABLE_TALK] [decimal](6, 3) NULL,
[BILLABLE_WRAP] [decimal](6, 3) NULL,
[AUTHORIZED_TRANSFERS] [int] NULL,
[TOTAL_TRANSFERS] [int] NULL,
[THREE_MIN_TRANSFERS] [int] NULL,
[THREE_MIN_RETAIL_TRANSFERS] [int] NULL,
[BASE_3_MINUTE_TRANSFER] [decimal](6, 3) NULL,
[3_MINUTE_TRANSFER_BONUS] [decimal](6, 3) NULL,
)

INSERT INTO #IMPORTS_DATALOT_AGENT_INVOICING
SELECT
 'Datalot'  --T.TENANT_NAME
,''  --UAA.ACD_ID_EXTENSION
,UAA.SCHEDULER_ACL_NAME
,UAA.EMPLOYEE_ID
,UAA.EMAIL
,UAA.STD_TENANT_START_DATE_TIME_KEY
,UAA.RESOURCE_NAME
,UAA.CATS_ID
,UAA.ASA_NAME

,(ISNULL(UAA.AIR_DAY_TYPE,''))					--AS AIR_DAY_TYPE
,(ISNULL(UAA.AIR_ACW_FONT_COLOR,''))			--AS AIR_ACW_FONT_COLOR
,(ISNULL(UAA.MIN_GUARANTEE_RATE,0.000))			--AS MIN_GUARANTEE_RATE
,(ISNULL(UAA.MIN_GUARANTEE_MINUTES,0.000))		--AS MIN_GUARANTEE_MINUTES
,(ISNULL(UAA.MIN_GUARANTEE_TYPE,''))			--AS MIN_GUARANTEE_TYPE
,(ISNULL(UAA.WRAP_MINUTE_RATE,0.000))			--AS WRAP_MINUTE_RATE
,(ISNULL(UAA.BASE_3_MINUTE_XFER_RATE,0.000))	--AS BASE_3_MINUTE_XFER_RATE
,(ISNULL(UAA.[3_MINUTE_XFER_BONUS_RATE],0.000))	--AS [3_MINUTE_XFER_BONUS_RATE]
,(ISNULL(UAA.ELIGIBLE_FOR_XFER_BONUS,''))		--AS ELIGIBLE_FOR_XFER_BONUS
,(ISNULL(UAA.AUTHORIZED_TO_INVOICE_TYPE,''))	--AS AUTHORIZED_TO_INVOICE_TYPE
,(ISNULL(UAA.TOTAL_AUTHORIZED_PAY,0.000))		--AS TOTAL_AUTHORIZED_PAY
,(ISNULL(UAA.TOTAL_AUTHORIZED_XFER_PAY,0.000))	--AS TOTAL_AUTHORIZED_XFER_PAY
,(ISNULL(UAA.HAS_HOLIDAYS,''))					--AS HAS_HOLIDAYS
,(ISNULL(UAA.PAY_RATE_STANDARD,0.000))			--AS PAY_RATE_STANDARD
,(ISNULL(UAA.PAY_RATE_HOLIDAY,0.000))			--AS PAY_RATE_HOLIDAY
,(ISNULL(UAA.INCLUDE_IN_CAS,''))				--AS INCLUDE_IN_CAS
,(ISNULL(UAA.READY_FOR_XML,''))					--AS READY_FOR_XML
,(ISNULL(UAA.SHOW_ID_EXTS,''))					--AS SHOW_ID_EXTS

,(ISNULL(UAA.INBOUND_CALLS,0))
,(ISNULL(UAA.OUTBOUND_CALLS,0))
,(ISNULL(UAA.TOTAL_CALLS,0))
,(ISNULL(UAA.SUCCESSFUL_TRANSFERS,0))
,(ISNULL(UAA.ONLINE_TIME,0))
,(ISNULL(UAA.CONNECTED_TIME,0))
,(ISNULL(UAA.WRAP_TIME,0))
,(ISNULL(UAA.WAITING_TIME,0))
,(ISNULL(UAA.WRAP_ADJ_TIME,0))
,(ISNULL(UAA.WRAP_ALLOWED,0))
,(ISNULL(UAA.AUTHORIZED_WRAP,0))
,(ISNULL(UAA.CPROD,0))
,(ISNULL(UAA.MINIMUM_GUARANTEE,0))
,(ISNULL(UAA.AUTHORIZED_MINUTES,0))
,(ISNULL(UAA.BILLABLE_TALK,0.000))
,(ISNULL(UAA.BILLABLE_WRAP,0.000))
,(ISNULL(UAA.AUTHORIZED_TRANSFERS,0))
,(ISNULL(UAA.TOTAL_TRANSFERS,0))
,(ISNULL(UAA.THREE_MIN_TRANSFERS,0))
,(ISNULL(UAA.THREE_MIN_RETAIL_TRANSFERS,0))
,(ISNULL(UAA.BASE_3_MINUTE_TRANSFER,0.000))
,(ISNULL(UAA.[3_MINUTE_TRANSFER_BONUS],0.000))

--DATASOURCES FOR DURATION FIELDS, IN SECONDS, IN HOUR INTERVALS:
--    GROUPED JUST ENOUGH TO BE ABLE TO JOIN DATASOURCES TOGETHER, AND AT MOST BASIC INTERVAL!
FROM
(	SELECT	
	-- UA.TENANT_KEY
	 ''  AS ACD_ID_EXTENSION
	--,UA.INVOICE_ID  AS SCHEDULER_ACL_NAME  --UA.SCHEDULER_ACL_NAME --060614: INVOICE_ID IS WHAT IS SUPPOSE TO SHOW ON THE CAR/CAS SRS INVOICE REPORTS AS THE GROUP!!!!
	,UA.SCHEDULER_ACL_NAME							AS SCHEDULER_ACL_NAME
	,UA.FF_AGENT_ID									AS EMPLOYEE_ID
	,MAX(UA.EMAIL)									AS EMAIL
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,MAX(UA.RESOURCE_NAME)								AS RESOURCE_NAME
	,ISNULL(CI.AGENT_ID,'')								AS CATS_ID
	,MAX(UA.ASA_NAME)									AS ASA_NAME
	,MAX(UA.AIR_DAY_TYPE)								AS AIR_DAY_TYPE
	,'BLACK'											AS AIR_ACW_FONT_COLOR
	,0													AS MIN_GUARANTEE_RATE
	,MAX(UA.MIN_GUARANTEE_MINUTES)						AS MIN_GUARANTEE_MINUTES
	,''													AS MIN_GUARANTEE_TYPE
	,MAX(WRAP_MINUTE_RATE)								AS WRAP_MINUTE_RATE
	,MAX(BASE_3_MINUTE_XFER_RATE)						AS BASE_3_MINUTE_XFER_RATE
	,MAX([3_MINUTE_XFER_BONUS_RATE])					AS [3_MINUTE_XFER_BONUS_RATE]
	,MAX(ELIGIBLE_FOR_XFER_BONUS)						AS ELIGIBLE_FOR_XFER_BONUS
	,''													AS AUTHORIZED_TO_INVOICE_TYPE
	,SUM(ISNULL(UA.TOTAL_AUTHORIZED_PAY,0.000))			AS TOTAL_AUTHORIZED_PAY
	,SUM(ISNULL(UA.TOTAL_AUTHORIZED_XFER_PAY,0.000))	AS TOTAL_AUTHORIZED_XFER_PAY
	,'Y'												AS HAS_HOLIDAYS
	,MAX(PAY_RATE_STANDARD)								AS PAY_RATE_STANDARD
	,MAX(PAY_RATE_HOLIDAY)								AS PAY_RATE_HOLIDAY
	,''													AS INCLUDE_IN_CAS
	,''													AS READY_FOR_XML
	,''													AS SHOW_ID_EXTS

	,SUM(ISNULL(UA.INBOUND_CALLS,0))				AS INBOUND_CALLS
	,SUM(ISNULL(UA.OUTBOUND_CALLS,0))				AS OUTBOUND_CALLS
	,SUM(ISNULL(UA.TOTAL_CALLS,0))					AS TOTAL_CALLS
	,SUM(ISNULL(UA.SUCCESSFUL_TRANSFERS,0))			AS SUCCESSFUL_TRANSFERS
	,SUM(ISNULL(UA.ONLINE_TIME,0)) * 60.00			AS ONLINE_TIME			-- CONVERT TO SECONDS
	,SUM(ISNULL(UA.CONNECTED_TIME,0)) * 60.00		AS CONNECTED_TIME		-- CONVERT TO SECONDS
	,SUM(ISNULL(UA.WRAP_TIME,0)) * 60.00			AS WRAP_TIME			-- CONVERT TO SECONDS
	,SUM(ISNULL(UA.WAITING_TIME,0)) * 60.00			AS WAITING_TIME			-- CONVERT TO SECONDS
	,SUM(ISNULL(UA.WRAP_ADJ_TIME,0)) * 60.00		AS WRAP_ADJ_TIME		-- CONVERT TO SECONDS
	,SUM(ISNULL(UA.WRAP_ALLOWED,0)) * 60.00			AS WRAP_ALLOWED			-- CONVERT TO SECONDS
	,SUM(ISNULL(UA.AUTHORIZED_WRAP,0)) * 60.00		AS AUTHORIZED_WRAP		-- CONVERT TO SECONDS
	,SUM(ISNULL(UA.CPROD,0)) * 60.00				AS CPROD				-- CONVERT TO SECONDS
	,SUM(ISNULL(UA.MINIMUM_GUARANTEE,0)) * 60.00	AS MINIMUM_GUARANTEE	-- CONVERT TO SECONDS
	,SUM(ISNULL(UA.AUTHORIZED_MINUTES,0)) * 60.00	AS AUTHORIZED_MINUTES	-- CONVERT TO SECONDS
	,SUM(ISNULL(UA.BILLABLE_TALK,0.000))			AS BILLABLE_TALK
	,SUM(ISNULL(UA.BILLABLE_WRAP,0.000))			AS BILLABLE_WRAP
	,SUM(ISNULL(UA.AUTHORIZED_TRANSFERS,0))			AS AUTHORIZED_TRANSFERS
	,SUM(ISNULL(UA.TOTAL_TRANSFERS,0))				AS TOTAL_TRANSFERS
	,SUM(ISNULL(UA.THREE_MIN_TRANSFERS,0))			AS THREE_MIN_TRANSFERS
	,SUM(ISNULL(UA.THREE_MIN_RETAIL_TRANSFERS,0.000))	AS THREE_MIN_RETAIL_TRANSFERS
	,SUM(ISNULL(UA.BASE_3_MINUTE_TRANSFER,0.000))		AS BASE_3_MINUTE_TRANSFER
	,SUM(ISNULL(UA.[3_MINUTE_TRANSFER_BONUS],0.000))	AS [3_MINUTE_TRANSFER_BONUS]
	
	--  SELECT *
	FROM            YZ_TB_IMPORTS_DATALOT_INVOICING     UA
	INNER JOIN      DATE_TIME                           DT  ON DT.DATE_TIME_KEY		= UA.STD_TENANT_START_DATE_TIME_KEY
	LEFT JOIN		WSOL_VW_CATS_IDS					CI	ON CI.SCHEDULER_ACL		= CASE WHEN UA.ID_EXT = 'DLS' THEN 'Datalot Standard Agents'
																						   WHEN UA.ID_EXT = 'DLP' THEN 'Datalot Standard Agents'
																						   WHEN UA.ID_EXT = 'DLR' THEN 'Datalot Resource AGents' END
														   AND CI.FIELD_MAP_ID		= UA.FF_AGENT_ID 

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
--	  AND ISNULL(UA.RESOURCE_NAME,'') <> ''
		
	GROUP BY 
	 UA.SCHEDULER_ACL_NAME
	,UA.FF_AGENT_ID
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,CI.AGENT_ID
) UAA

--==============================================================
--==============================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_DATALOT_AGENT_INVOICING_RTN') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_DATALOT_AGENT_INVOICING_RTN
END
CREATE TABLE #IMPORTS_DATALOT_AGENT_INVOICING_RTN
(GRPNO                 INT
,TENANT_NAME           VARCHAR(50)
,ID_EXT                VARCHAR(3)
,SCHEDULER_ACL_NAME    VARCHAR(100)
,EMPLOYEE_ID           VARCHAR(50)
,EMAIL				   VARCHAR(100)
,RESOURCE_NAME         VARCHAR(100)
,CATS_ID			   VARCHAR(50)
,ASA_NAME			   VARCHAR(100)
,CAL_YEAR_MONTH_NUM    VARCHAR(10)
,DATE_INTERVAL         VARCHAR(50)
,TIME_INTERVAL         VARCHAR(10)

,AIR_DAY_TYPE					varchar(1)
,AIR_ACW_FONT_COLOR				varchar(50)
,MIN_GUARANTEE_RATE				decimal(6,3)
,MIN_GUARANTEE_MINUTES			decimal(6,3)
,MIN_GUARANTEE_TYPE				varchar(50)
,WRAP_MINUTE_RATE				decimal(6,3)
,BASE_3_MINUTE_XFER_RATE		decimal(6,3)
,[3_MINUTE_XFER_BONUS_RATE]		decimal(6,3)
,ELIGIBLE_FOR_XFER_BONUS		varchar(1)
,AUTHORIZED_TO_INVOICE_TYPE		varchar(50)
,TOTAL_AUTHORIZED_PAY			decimal(6,3)
,TOTAL_AUTHORIZED_XFER_PAY		decimal(6,3)
,HAS_HOLIDAYS					varchar(1)
,PAY_RATE_STANDARD				decimal(6,3)
,PAY_RATE_HOLIDAY				decimal(6,3)
,INCLUDE_IN_CAS					varchar(1)
,READY_FOR_XML					varchar(1)
,SHOW_ID_EXTS					varchar(1)

,AIR_HOLIDAY_IN        VARCHAR(1)
,ALL_AUTHORIZED_TIME   DECIMAL(10,2)
,ALL_AUTHORIZED_XFERS  INT

,
[INBOUND_CALLS] [int] NULL,
[OUTBOUND_CALLS] [int] NULL,
[TOTAL_CALLS] [int] NULL,
[SUCCESSFUL_TRANSFERS] [int] NULL,
[ONLINE_TIME] [decimal](10, 2) NULL,
[CONNECTED_TIME] [decimal](10, 2) NULL,
[WRAP_TIME] [decimal](10, 2) NULL,
[WAITING_TIME] [decimal](10, 2) NULL,
[WRAP_ADJ_TIME] [decimal](10, 2) NULL,
[WRAP_ALLOWED] [decimal](10, 2) NULL,
[AUTHORIZED_WRAP] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
[AUTHORIZED_MINUTES] [decimal](10, 2) NULL,
[BILLABLE_TALK] [decimal](6, 3) NULL,
[BILLABLE_WRAP] [decimal](6, 3) NULL,
[AUTHORIZED_TRANSFERS] [int] NULL,
[TOTAL_TRANSFERS] [int] NULL,
[THREE_MIN_TRANSFERS] [int] NULL,
[THREE_MIN_RETAIL_TRANSFERS] [int] NULL,
[BASE_3_MINUTE_TRANSFER] [decimal](6, 3) NULL,
[3_MINUTE_TRANSFER_BONUS] [decimal](6, 3) NULL
)
--==================================
--IF @DUR_IN = 'SS' BEGIN
--	ALTER TABLE #IMPORTS_DATALOT_AGENT_INVOICING_RTN ALTER COLUMN ALLREDDUR     INT
--
--	ALTER TABLE #IMPORTS_DATALOT_AGENT_INVOICING_RTN ALTER COLUMN AIRITKDUR     INT
--	ALTER TABLE #IMPORTS_DATALOT_AGENT_INVOICING_RTN ALTER COLUMN AIRIACDUR     INT
--	--Never!  ALTER TABLE #IMPORTS_DATALOT_AGENT_INVOICING_RTN ALTER COLUMN AIRIMGDUR     INT  --Should always stay dec().
--	--Never!  ALTER TABLE #IMPORTS_DATALOT_AGENT_INVOICING_RTN ALTER COLUMN AIRIAIDUR     INT  --Should always stay dec().
--
--	--Never!  ALTER TABLE #IMPORTS_DATALOT_AGENT_INVOICING_RTN ALTER COLUMN ALL_AIRIAIDUR INT  --Should always stay dec().
--END
--==================================
INSERT INTO #IMPORTS_DATALOT_AGENT_INVOICING_RTN
SELECT
 20								--AS GRPNO  
,ISNULL(GG.TENANT_NAME       ,'') AS TENANT_NAME
,ISNULL(GG.ID_EXT            ,'') AS ID_EXT
,ISNULL(GG.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
,ISNULL(GG.EMPLOYEE_ID       ,'') AS EMPLOYEE_ID
,ISNULL(GG.EMAIL			 ,'') AS EMAIL
,ISNULL(GG.RESOURCE_NAME     ,'') AS RESOURCE_NAME
,ISNULL(GG.CATS_ID			 ,'') AS CATS_ID
,ISNULL(GG.ASA_NAME			 ,'') AS ASA_NAME
,ISNULL(GG.CAL_YEAR_MONTH_NUM,'') AS CAL_YEAR_MONTH_NUM
,ISNULL(GG.DI                ,'') AS DI
,ISNULL(GG.TI                ,'') AS TI

,(GG.AIR_DAY_TYPE)					AS AIR_DAY_TYPE
,(GG.AIR_ACW_FONT_COLOR)			AS AIR_ACW_FONT_COLOR
,(GG.MIN_GUARANTEE_RATE)			AS MIN_GUARANTEE_RATE
,(GG.MIN_GUARANTEE_MINUTES)			AS MIN_GUARANTEE_MINUTES
,(GG.MIN_GUARANTEE_TYPE)			AS MIN_GUARANTEE_TYPE
,(GG.WRAP_MINUTE_RATE)				AS WRAP_MINUTE_RATE
,(GG.BASE_3_MINUTE_XFER_RATE)		AS BASE_3_MINUTE_XFER_RATE
,(GG.[3_MINUTE_XFER_BONUS_RATE])	AS [3_MINUTE_XFER_BONUS_RATE]
,(GG.ELIGIBLE_FOR_XFER_BONUS)		AS ELIGIBLE_FOR_XFER_BONUS
,(GG.AUTHORIZED_TO_INVOICE_TYPE)	AS AUTHORIZED_TO_INVOICE_TYPE
,(GG.TOTAL_AUTHORIZED_PAY)			AS TOTAL_AUTHORIZED_PAY
,(GG.TOTAL_AUTHORIZED_XFER_PAY)		AS TOTAL_AUTHORIZED_XFER_PAY
,(GG.HAS_HOLIDAYS)					AS HAS_HOLIDAYS
,(GG.PAY_RATE_STANDARD)				AS PAY_RATE_STANDARD
,(GG.PAY_RATE_HOLIDAY)				AS PAY_RATE_HOLIDAY
,(GG.INCLUDE_IN_CAS)				AS INCLUDE_IN_CAS
,(GG.READY_FOR_XML)					AS READY_FOR_XML
,(GG.SHOW_ID_EXTS)					AS SHOW_ID_EXTS

,'' --AS AIR_HOLIDAY_IN
,0  --AS ALL_AUTHORIZED_TIME
,0  --AS ALL_AUTHORIZED_XFERS

,(ISNULL(GG.INBOUND_CALLS,0))        AS INBOUND_CALLS
,(ISNULL(GG.OUTBOUND_CALLS,0))       AS OUTBOUND_CALLS
,(ISNULL(GG.TOTAL_CALLS,0))			 AS TOTAL_CALLS
,(ISNULL(GG.SUCCESSFUL_TRANSFERS,0)) AS SUCCESSFUL_TRANSFERS

,CAST((ISNULL(GG.ONLINE_TIME		,0)) / @DS AS DECIMAL(10,2)) AS ONLINE_TIME
,CAST((ISNULL(GG.CONNECTED_TIME		,0)) / @DS AS DECIMAL(10,2)) AS CONNECTED_TIME
,CAST((ISNULL(GG.WRAP_TIME			,0)) / @DS AS DECIMAL(10,2)) AS WRAP_TIME
,CAST((ISNULL(GG.WAITING_TIME		,0)) / @DS AS DECIMAL(10,2)) AS WAITING_TIME
,CAST((ISNULL(GG.WRAP_ADJ_TIME		,0)) / @DS AS DECIMAL(10,2)) AS WRAP_ADJ_TIME
,CAST((ISNULL(GG.WRAP_ALLOWED		,0)) / @DS AS DECIMAL(10,2)) AS WRAP_ALLOWED
,CAST((ISNULL(GG.AUTHORIZED_WRAP	,0)) / @DS AS DECIMAL(10,2)) AS AUTHORIZED_WRAP
,CAST((ISNULL(GG.CPROD				,0)) / @DS AS DECIMAL(10,2)) AS CPROD
,CAST((ISNULL(GG.MINIMUM_GUARANTEE	,0)) / @DS AS DECIMAL(10,2)) AS MINIMUM_GUARANTEE
,CAST((ISNULL(GG.AUTHORIZED_MINUTES	,0)) / @DS AS DECIMAL(10,2)) AS AUTHORIZED_MINUTES

,(ISNULL(GG.BILLABLE_TALK,0.000))			AS BILLABLE_TALK
,(ISNULL(GG.BILLABLE_WRAP,0.000))			AS BILLABLE_WRAP
,(ISNULL(GG.AUTHORIZED_TRANSFERS,0))		AS AUTHORIZED_TRANSFERS
,(ISNULL(GG.TOTAL_TRANSFERS,0))				AS TOTAL_TRANSFERS
,(ISNULL(GG.THREE_MIN_TRANSFERS,0))			AS THREE_MIN_TRANSFERS
,(ISNULL(GG.THREE_MIN_RETAIL_TRANSFERS,0))	AS THREE_MIN_RETAIL_TRANSFERS
,(ISNULL(GG.BASE_3_MINUTE_TRANSFER,0.000))		AS BASE_3_MINUTE_TRANSFER
,(ISNULL(GG.[3_MINUTE_TRANSFER_BONUS],0.000))	AS [3_MINUTE_TRANSFER_BONUS]

FROM  -- GG STARTS HERE:
(	SELECT
	 ISNULL(SW.TENANT_NAME,'')        AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  AS EMPLOYEE_ID
	,ISNULL(SW.EMAIL,'')			  AS EMAIL
	,MAX(RESOURCE_NAME)               AS RESOURCE_NAME
	,ISNULL(SW.CATS_ID,'')			  AS CATS_ID
	,MAX(ASA_NAME)					  AS ASA_NAME

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) AS TI

	,MAX(SW.AIR_DAY_TYPE)								AS AIR_DAY_TYPE
	,MAX(SW.AIR_ACW_FONT_COLOR)							AS AIR_ACW_FONT_COLOR
	,MAX(SW.MIN_GUARANTEE_RATE)							AS MIN_GUARANTEE_RATE
	,MAX(SW.MIN_GUARANTEE_MINUTES)						AS MIN_GUARANTEE_MINUTES
	,MAX(SW.MIN_GUARANTEE_TYPE)							AS MIN_GUARANTEE_TYPE
	,MAX(SW.WRAP_MINUTE_RATE)							AS WRAP_MINUTE_RATE
	,MAX(SW.BASE_3_MINUTE_XFER_RATE)					AS BASE_3_MINUTE_XFER_RATE
	,MAX(SW.[3_MINUTE_XFER_BONUS_RATE])					AS [3_MINUTE_XFER_BONUS_RATE]
	,MAX(SW.ELIGIBLE_FOR_XFER_BONUS)					AS ELIGIBLE_FOR_XFER_BONUS
	,MAX(SW.AUTHORIZED_TO_INVOICE_TYPE)					AS AUTHORIZED_TO_INVOICE_TYPE
	,SUM(ISNULL(SW.TOTAL_AUTHORIZED_PAY,0.000))			AS TOTAL_AUTHORIZED_PAY
	,SUM(ISNULL(SW.TOTAL_AUTHORIZED_XFER_PAY,0.000))	AS TOTAL_AUTHORIZED_XFER_PAY
	,MAX(SW.HAS_HOLIDAYS)								AS HAS_HOLIDAYS
	,MAX(SW.PAY_RATE_STANDARD)							AS PAY_RATE_STANDARD
	,MAX(SW.PAY_RATE_HOLIDAY)							AS PAY_RATE_HOLIDAY
	,MAX(SW.INCLUDE_IN_CAS)								AS INCLUDE_IN_CAS
	,MAX(SW.READY_FOR_XML)								AS READY_FOR_XML
	,MAX(SW.SHOW_ID_EXTS)								AS SHOW_ID_EXTS

	,SUM(ISNULL(SW.INBOUND_CALLS,0))				AS INBOUND_CALLS
	,SUM(ISNULL(SW.OUTBOUND_CALLS,0))				AS OUTBOUND_CALLS
	,SUM(ISNULL(SW.TOTAL_CALLS,0))					AS TOTAL_CALLS
	,SUM(ISNULL(SW.SUCCESSFUL_TRANSFERS,0))			AS SUCCESSFUL_TRANSFERS
	,SUM(ISNULL(SW.ONLINE_TIME,0))					AS ONLINE_TIME
	,SUM(ISNULL(SW.CONNECTED_TIME,0))				AS CONNECTED_TIME
	,SUM(ISNULL(SW.WRAP_TIME,0))					AS WRAP_TIME
	,SUM(ISNULL(SW.WAITING_TIME,0))					AS WAITING_TIME
	,SUM(ISNULL(SW.WRAP_ADJ_TIME,0))				AS WRAP_ADJ_TIME
	,SUM(ISNULL(SW.WRAP_ALLOWED,0))					AS WRAP_ALLOWED
	,SUM(ISNULL(SW.AUTHORIZED_WRAP,0))				AS AUTHORIZED_WRAP
	,SUM(ISNULL(SW.CPROD,0))						AS CPROD
	,SUM(ISNULL(SW.MINIMUM_GUARANTEE,0))			AS MINIMUM_GUARANTEE
	,SUM(ISNULL(SW.AUTHORIZED_MINUTES,0))			AS AUTHORIZED_MINUTES
	,SUM(ISNULL(SW.BILLABLE_TALK,0.000))			AS BILLABLE_TALK
	,SUM(ISNULL(SW.BILLABLE_WRAP,0.000))			AS BILLABLE_WRAP
	,SUM(ISNULL(SW.AUTHORIZED_TRANSFERS,0))			AS AUTHORIZED_TRANSFERS
	,SUM(ISNULL(SW.TOTAL_TRANSFERS,0))				AS TOTAL_TRANSFERS
	,SUM(ISNULL(SW.THREE_MIN_TRANSFERS,0))			AS THREE_MIN_TRANSFERS
	,SUM(ISNULL(SW.THREE_MIN_RETAIL_TRANSFERS,0))		AS THREE_MIN_RETAIL_TRANSFERS
	,SUM(ISNULL(SW.BASE_3_MINUTE_TRANSFER,0.000))		AS BASE_3_MINUTE_TRANSFER
	,SUM(ISNULL(SW.[3_MINUTE_TRANSFER_BONUS],0.000))	AS [3_MINUTE_TRANSFER_BONUS]

	FROM            #IMPORTS_DATALOT_AGENT_INVOICING          SW
	INNER JOIN      DATE_TIME					              DT   ON DT.DATE_TIME_KEY              = SW.STD_TENANT_START_DATE_TIME_KEY
													 
	--WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END		  --AND (@TENANT_KEY   IN ('0','') OR SW.TENANT_KEY   = CAST(@TENANT_KEY AS INT) )

	GROUP BY 
	 ISNULL(SW.TENANT_NAME,'')        --AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             --AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') --AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  --AS EMPLOYEE_ID
	,ISNULL(SW.EMAIL,'')			  --AS EMAIL
	,ISNULL(SW.CATS_ID,'')			  --AS CATS_ID

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) --AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) --AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) --AS TI

	--,(ISNULL(SW.FF_FULL_NAME,''))         --AS FF_FULL_NAME
	--,(ISNULL(SW.FF_LOGIN_ID,''))          --AS FF_LOGIN_ID

) GG



--==================================
--IS A HOLIDAY DATE IN THE MIX:
--==================================
DECLARE @HOLIDAY_IN VARCHAR(1)
SET @HOLIDAY_IN = 'N'
DECLARE @I INT
SET @I = (SELECT COUNT(*) FROM #IMPORTS_DATALOT_AGENT_INVOICING_RTN WHERE AIR_DAY_TYPE = 'H')  --  AND INCLUDE_IN_CAS = 'Y')
IF @I > 0 BEGIN
	SET @HOLIDAY_IN = 'Y'
END
--==================================
UPDATE #IMPORTS_DATALOT_AGENT_INVOICING_RTN SET
 AIR_HOLIDAY_IN = @HOLIDAY_IN

--======================================================
--UPDATE TOTALS LINE ON REPORT FOR STANDARD AND HOLIDAY:
--======================================================
UPDATE #IMPORTS_DATALOT_AGENT_INVOICING_RTN SET
 ALL_AUTHORIZED_TIME = ISNULL(LOJ.ALL_AUTHORIZED_TIME,0.0)
FROM #IMPORTS_DATALOT_AGENT_INVOICING_RTN TA
LEFT OUTER JOIN
(	SELECT
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
	,SUM(AUTHORIZED_MINUTES) AS ALL_AUTHORIZED_TIME
	FROM #IMPORTS_DATALOT_AGENT_INVOICING_RTN 
	GROUP BY 
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
) LOJ ON LOJ.SCHEDULER_ACL_NAME = TA.SCHEDULER_ACL_NAME
	 AND LOJ.EMPLOYEE_ID        = TA.EMPLOYEE_ID
	 AND LOJ.AIR_DAY_TYPE       = TA.AIR_DAY_TYPE


UPDATE #IMPORTS_DATALOT_AGENT_INVOICING_RTN SET
 ALL_AUTHORIZED_XFERS = ISNULL(LOJ.ALL_AUTHORIZED_XFERS,0)
FROM #IMPORTS_DATALOT_AGENT_INVOICING_RTN TA
LEFT OUTER JOIN
(	SELECT
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
	,SUM(AUTHORIZED_TRANSFERS) AS ALL_AUTHORIZED_XFERS
	FROM #IMPORTS_DATALOT_AGENT_INVOICING_RTN 
	GROUP BY 
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
) LOJ ON LOJ.SCHEDULER_ACL_NAME = TA.SCHEDULER_ACL_NAME
	 AND LOJ.EMPLOYEE_ID        = TA.EMPLOYEE_ID
	 AND LOJ.AIR_DAY_TYPE       = TA.AIR_DAY_TYPE

--==================================
--RETURN DATA
--==================================
--==================================
--POPULATE TABLE READ BY SSIS TO GET END DATE OF DATA REPORT/FILE HAS BEEN RUN FOR:
--==================================
INSERT INTO YZ_TB_FILENAMES_FOR_SSIS
(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
SELECT
 'uspIMPORTS_DATALOT_AGENT_INVOICING'  --SQL_JOB_NAME
,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,111),'/','')   --FILENM   YYYYMMDD_...
,dbo.getdate()  --CST_ROW_CREATED_TIME

--=====================================
--RETURN DATASET:
--=====================================
SELECT 
 CASE WHEN @DUR_IN = 'SS' THEN '' ELSE 'F' END AS DUR_FORMAT
,CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
,V.*

FROM      #IMPORTS_DATALOT_AGENT_INVOICING_RTN  V

ORDER BY 
 V.GRPNO
,V.SCHEDULER_ACL_NAME
,V.EMPLOYEE_ID
,V.CAL_YEAR_MONTH_NUM
,V.DATE_INTERVAL
,V.TIME_INTERVAL  --SINCE IN MILITARY TIME!




--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1