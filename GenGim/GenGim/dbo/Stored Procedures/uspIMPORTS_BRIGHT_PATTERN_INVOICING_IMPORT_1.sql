CREATE PROCEDURE [dbo].[uspIMPORTS_BRIGHT_PATTERN_INVOICING_IMPORT]
AS
SET NOCOUNT ON  

--====================================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY = 900905  -- BRIGHT PATTERN
--====================================================
DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND
WHERE TENANT_KEY		= @TENANT_KEY
  AND SUB_GROUP_NAME	= 'BRIGHT_PATTERN_INVOICING'
  --  SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 900905
--=============================================================================

--=============================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = DBO.GETDATE()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--=============================================================================

--SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1 ORDER BY SEQNO
--SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD

--=============================================================================
-- CORRECT ERROR IN AGENT NAME
--=============================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1 SET
 F3 = 'Geri'
WHERE F2 = 'gstephensaca'
  AND F3 = 'Shameka'
  AND F5 = 'Asurion Agents'

--=============================================================================
-- UPDATE LOGIN ID FOR RESOURCE AGENTS MAKING OB VM CALLS
--=============================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1 SET
 F2 = CASE WHEN F2 = 'khouserinr2'	THEN 'khouserinr'
		   WHEN F2 = 'aesquedainr2'	THEN 'aesquedainr'
		   ELSE F2 END
,F3 = CASE WHEN F3 = 'Katelyn2'		THEN 'Katelyn'
		   WHEN F3 = 'Anna2'		THEN 'Anna'
		   ELSE F3 END

--=============================================================================
-- CORRECT ERROR IN LOGIN ID
--=============================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1 SET
 F2 = CASE WHEN ( F2 = 'mcgowanaca'			AND F4 = 'Mcgowan_ACA' )		THEN 'amcgowanaca'
		   WHEN ( F2 = 'vobbmitchellaca'	AND F4 = 'CobbMitchell_ACA' )	THEN 'vcobbmitchellaca'
		   WHEN ( F2 = 'lmehtaaca'			AND F4 = 'Mehta_ACA' )			THEN 'amehtaaca'
		   ELSE F2 END

--=============================================================================
--CLEANUP WORK (_1) TABLE:
--HANDLE Blank LoginID (F2):
--=============================================================================
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_TIME
,FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DURATION
,FF_DETAIL
,FF_SERVICE
,FF_MEDIA_TYPE
,FF_GLOBAL_ID
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,PARENT_SEQNO
)
SELECT
 'AGT'					--BAD_IMPORTS_CODE			-- 'Blank LoginID'
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME	--WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.F9
,W1.F10
,W1.F11
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,W1.EVENT_END_TIME
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,NULL	-- PARENT_SEQNO
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1  W1
WHERE LTRIM(RTRIM(ISNULL(W1.F2,''))) IN ('')
--========================================================================
--DELETE WHERE Blank LoginID (F2):
--========================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1
WHERE LTRIM(RTRIM(ISNULL(F2,''))) IN ('')

--========================================================================
--HANDLE ZERO Durations:
--========================================================================
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_TIME
,FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DURATION
,FF_DETAIL
,FF_SERVICE
,FF_MEDIA_TYPE
,FF_GLOBAL_ID
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,PARENT_SEQNO
)
SELECT
 'ZER'					--BAD_IMPORTS_CODE			-- 'ZER'o Duration
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.F9
,W1.F10
,W1.F11
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,W1.EVENT_END_TIME
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,NULL	-- PARENT_SEQNO
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1  W1
WHERE LTRIM(RTRIM(ISNULL(W1.F7,''))) = '00:00:00'
--========================================================================
--DELETE ZERO DURATION RECORDS FROM WORK TABLE
--========================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1  
WHERE LTRIM(RTRIM(ISNULL(F7,''))) = '00:00:00'


--SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1 ORDER BY SEQNO
--SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
--========================================================================
--HANDLE NR-LogOut States:
--========================================================================
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_TIME
,FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DURATION
,FF_DETAIL
,FF_SERVICE
,FF_MEDIA_TYPE
,FF_GLOBAL_ID
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,PARENT_SEQNO
)
SELECT
 'LOS'					--BAD_IMPORTS_CODE			-- 'L'og'O'ut 'S'tate
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.F9
,W1.F10
,W1.F11
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,W1.EVENT_END_TIME
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,NULL	-- PARENT_SEQNO
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1  W1
WHERE ( LTRIM(RTRIM(ISNULL(W1.F6,''))) = 'NR' AND LTRIM(RTRIM(ISNULL(W1.F8,''))) = 'Logout' )
--========================================================================
--DELETE NR-Logout RECORDS FROM WORK TABLE
--========================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1
WHERE ( LTRIM(RTRIM(ISNULL(F6,''))) = 'NR' AND LTRIM(RTRIM(ISNULL(F8,''))) = 'Logout' )


--SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1 ORDER BY SEQNO
--SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
--========================================================================
--HANDLE Administrator and Client Records:
--========================================================================
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_TIME
,FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DURATION
,FF_DETAIL
,FF_SERVICE
,FF_MEDIA_TYPE
,FF_GLOBAL_ID
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,PARENT_SEQNO
)
SELECT
 'ADM'					--BAD_IMPORTS_CODE			-- 'ADM'inistrator Record
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.F9
,W1.F10
,W1.F11
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,W1.EVENT_END_TIME
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,NULL	-- PARENT_SEQNO
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1  W1
WHERE LTRIM(RTRIM(ISNULL(W1.F5,''))) IN ('Administrators','i9 Client Access')
--========================================================================
--DELETE ADMINISTRATOR AND CLIENT RECORDS FROM WORK TABLE
--========================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1
WHERE LTRIM(RTRIM(ISNULL(F5,''))) IN ('Administrators','i9 Client Access')


--========================================================================
--HANDLE CUSTOMER CALLBACK CHAT RECORDS (i9 Sports):
--========================================================================
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_TIME
,FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DURATION
,FF_DETAIL
,FF_SERVICE
,FF_MEDIA_TYPE
,FF_GLOBAL_ID
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,PARENT_SEQNO
)
SELECT
 'CHT'					--BAD_IMPORTS_CODE			-- 'CHaT' Record
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.F9
,W1.F10
,W1.F11
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,W1.EVENT_END_TIME
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,NULL	-- PARENT_SEQNO
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1  W1
WHERE LTRIM(RTRIM(ISNULL(W1.F5	,''))) = 'i9 Sports Agents'
  AND LTRIM(RTRIM(ISNULL(W1.F10	,''))) = 'CHAT'
  AND LTRIM(RTRIM(ISNULL(W1.F9	,''))) = 'i9 Sports - Customer Callbacks'
--========================================================================
--DELETE CUSTOMER CALLBACK CHAT RECORDS (i9 SPORTS) FROM WORK TABLE
--========================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1
WHERE LTRIM(RTRIM(ISNULL(F5	,''))) = 'i9 Sports Agents'
  AND LTRIM(RTRIM(ISNULL(F10,''))) = 'CHAT'
  AND LTRIM(RTRIM(ISNULL(F9	,''))) = 'i9 Sports - Customer Callbacks'


--===========================================================================================================
--HANDLE DUPLICATES:
--===========================================================================================================
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_TIME
,FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DURATION
,FF_DETAIL
,FF_SERVICE
,FF_MEDIA_TYPE
,FF_GLOBAL_ID
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,PARENT_SEQNO
)
SELECT
 'DUP'					--BAD_IMPORTS_CODE		--'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME	--WS_ROW_CREATED_TIME
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.F9
,W1.F10
,W1.F11
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,W1.EVENT_END_TIME
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,NULL	-- PARENT_SEQNO
FROM
(	SELECT
	 F1	 -- FF_TIME
	,F2	 -- FF_LOGIN_ID
	,F3	 -- FF_AGENT_FIRST_NAME
	,F4	 -- FF_AGENT_LAST_NAME
	,F5  -- FF_TEAM
	,F6  -- FF_ACTIVITY
	,F7  -- FF_DURATION
	,F8  -- FF_DETAIL
	,F9  -- FF_SERVICE
	,F10 -- FF_MEDIA_TYPE
	,F11 -- FF_GLOBAL_ID
	,ROW_NUMBER() over (partition by F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11
                            order by F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, SEQNO DESC) ROWNO
	FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1
) TNM
LEFT JOIN      WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1	W1   ON W1.F1	= TNM.F1	-- FF_TIME
																AND W1.F2	= TNM.F2	-- FF_LOGIN_ID
																AND W1.F3	= TNM.F3	-- FF_AGENT_FIRST_NAME
																AND W1.F4	= TNM.F4	-- FF_AGENT_LAST_NAME
																AND W1.F5	= TNM.F5	-- FF_TEAM
																AND W1.F6	= TNM.F6	-- FF_ACTIVITY
																AND W1.F7	= TNM.F7	-- FF_DURATION
																AND W1.F8	= TNM.F8	-- FF_DETAIL
																AND W1.F9	= TNM.F9	-- FF_SERVICE
																AND W1.F10	= TNM.F10	-- FF_MEDIA_TYPE
																AND W1.F11	= TNM.F11	-- FF_GLOBAL_ID
WHERE TNM.ROWNO > 1
GROUP BY
 W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.F9
,W1.F10
,W1.F11
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,W1.EVENT_END_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME

--===========================================================================================================
--DELETE DUPLICATE RECORDS FROM WORK TABLE:
--===========================================================================================================
DELETE FROM TNM
FROM
(	SELECT
	 F1	-- FF_TIME
	,F2	-- FF_LOGIN_ID
	,F3	-- FF_AGENT_FIRST_NAME
	,F4	-- FF_AGENT_LAST_NAME
	,F5  -- FF_TEAM
	,F6  -- FF_ACTIVITY
	,F7  -- FF_DURATION
	,F8  -- FF_DETAIL
	,F9  -- FF_SERVICE
	,F10 -- FF_MEDIA_TYPE
	,F11 -- FF_GLOBAL_ID
	,ROW_NUMBER() over (partition by F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11
                            order by F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, SEQNO DESC) ROWNO
	FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1
) TNM
WHERE TNM.ROWNO > 1

--SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1 ORDER BY SEQNO
--SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
--=============================================================================
--SET EVENT START TIME AND DURATION TO PREPARE FOR PARSING INTO INTERVALS
--=============================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1 SET
 EVENT_START_TIME		= CAST(F1 AS DATETIME)
,EVENT_DURATION_SECS	= (   CAST(LEFT(F7, 2) AS INT) * 3600
							+ CAST(SUBSTRING(F7, 4, 2) AS INT) * 60
							+ CAST(RIGHT(RTRIM(F7), 2) AS INT)
						  )
--=============================================================================
--SET EVENT END TIME TO USE FOR OUTBOUND AND RONA RECORDS
--=============================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1 SET
 EVENT_END_TIME			= DATEADD(SS, EVENT_DURATION_SECS, EVENT_START_TIME)

--=============================================================================
--COPY WORK TABLE DATA TO PARENT-CHILD WORK TABLE
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_PC

INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_PC
(
 F1
,F2
,F3
,F4
,F5
,F6
,F7
,F8
,F9
,F10
,F11
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,PARENT_SEQNO
)
SELECT
 W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.F9
,W1.F10
,W1.F11
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,W1.EVENT_END_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,NULL	--AS PARENT_SEQNO
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1  W1

--===============================================================================================================================
--OBTAIN PARENT SEQNO FROM WORK (W1) TABLE
--===============================================================================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_PC SET
 PARENT_SEQNO = W1.SEQNO
--SELECT *
FROM  WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_PC	PC
INNER JOIN WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1	W1 ON PC.F2				  =  W1.F2				--LOGIN_ID
														  AND PC.F3				  =  W1.F3				--AGENT_FIRST_NAME
														  AND PC.F4				  =  W1.F4				--AGENT_LAST_NAME
														  AND PC.F5				  =	 W1.F5				--TEAM
														  AND PC.F11			  =  W1.F11				--GLOBAL_ID
														  AND PC.EVENT_START_TIME >= W1.EVENT_START_TIME
														  AND PC.EVENT_START_TIME <  W1.EVENT_END_TIME
														  AND PC.SEQNO			  <> W1.SEQNO

--========================================================================
--CLEAR OUT ORIGINAL WORK TABLE
--========================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1

--===============================================================================================================================
--REMOVE RECORDS THAT HAVE A PARENT RECORD
--==================================================================================
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_TIME
,FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DURATION
,FF_DETAIL
,FF_SERVICE
,FF_MEDIA_TYPE
,FF_GLOBAL_ID
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,PARENT_SEQNO
)
SELECT
 'CHI'					--BAD_IMPORTS_CODE			-- 'CHI'ld Record
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,PC.F1
,PC.F2
,PC.F3
,PC.F4
,PC.F5
,PC.F6
,PC.F7
,PC.F8
,PC.F9
,PC.F10
,PC.F11
,PC.EVENT_START_TIME
,PC.EVENT_DURATION_SECS
,PC.EVENT_END_TIME
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,PC.SEQNO_ADDED_TIME
,PC.SEQNO
,PC.FTP_FILE_NAME
,PC.PARENT_SEQNO
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_PC  PC
WHERE PC.PARENT_SEQNO IS NOT NULL
--==================================================================================
--DELETE RECORDS THAT HAVE A PARENT RECORD FROM PARENT-CHILD WORK TABLE
--==================================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_PC
WHERE PARENT_SEQNO IS NOT NULL

--========================================================================
--INSERT TRUE PARENT RECORDS BACK INTO WORK (W1) TABLE
--========================================================================
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1
(
 F1
,F2
,F3
,F4
,F5
,F6
,F7
,F8
,F9
,F10
,F11
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 PC.F1
,PC.F2
,PC.F3
,PC.F4
,PC.F5
,PC.F6
,PC.F7
,PC.F8
,PC.F9
,PC.F10
,PC.F11
,PC.EVENT_START_TIME
,PC.EVENT_DURATION_SECS
,PC.EVENT_END_TIME
,PC.SEQNO_ADDED_TIME
,PC.SEQNO
,PC.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_PC  PC

--=============================================================================
--COPY WORK TABLE DATA TO CALL COUNT WORK TABLE
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC

INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC
(
 F1
,F2
,F3
,F4
,F5
,F6
,F7
,F8
,F9
,F10
,F11
,[DATETIME]
,INBOUND_CALL
,OUTBOUND_CALL
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.F9
,W1.F10
,W1.F11
,NULL	-- AS DATETIME
,NULL	-- AS INBOUND_CALL
,NULL	-- AS OUTBOUND_CALL
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
--SELECT *
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1  W1
WHERE ISNULL(F11,'') <> ''
  AND ISNULL(F6 ,'') <> 'After Call Work'

-- SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC3 ORDER BY SEQNO
--=============================================================================
-- UPDATE FIELDS IN CALL COUNT WORK TABLE
--=============================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC SET
 [DATETIME]		= CAST(CONVERT(VARCHAR(13), CAST(F1 AS DATETIME), 120) + ':00:00' AS DATETIME)
,INBOUND_CALL	= CASE WHEN ISNULL(F6,'') = 'Inbound'	THEN 1 ELSE 0 END
,OUTBOUND_CALL	= CASE WHEN ISNULL(F6,'') = 'Outbound'	THEN 1 ELSE 0 END

--=============================================================================
--GROUP CALL COUNT DATA BY AGENT, GLOBAL_ID, AND HOUR INTERVAL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC2

INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC2
(
 LOGIN_ID
,AGENT_FIRST_NAME
,AGENT_LAST_NAME
,TEAM
,MEDIA_TYPE
,GLOBAL_ID
,[DATETIME]
,INBOUND_CALLS
,OUTBOUND_CALLS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 CC.F2
,CC.F3
,CC.F4
,CC.F5
,CC.F10
,CC.F11
,CC.[DATETIME]
,MAX(ISNULL(CC.INBOUND_CALL	,0))
,MAX(ISNULL(CC.OUTBOUND_CALL,0))
,MIN(CC.SEQNO_ADDED_TIME)
,MIN(CC.SEQNO)
,CC.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC  CC
GROUP BY
 CC.F2
,CC.F3
,CC.F4
,CC.F5
,CC.F10
,CC.F11
,CC.[DATETIME]
,CC.FTP_FILE_NAME

--=============================================================================
--GROUP CALL COUNT DATA BY AGENT AND HOUR INTERVAL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC3

INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC3
(
 LOGIN_ID
,AGENT_FIRST_NAME
,AGENT_LAST_NAME
,TEAM
,MEDIA_TYPE
,[DATETIME]
,INBOUND_CALLS
,OUTBOUND_CALLS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 CC2.LOGIN_ID
,CC2.AGENT_FIRST_NAME
,CC2.AGENT_LAST_NAME
,CC2.TEAM
,CC2.MEDIA_TYPE
,CC2.[DATETIME]
,SUM(ISNULL(CC2.INBOUND_CALLS	,0))
,SUM(ISNULL(CC2.OUTBOUND_CALLS	,0))
,MIN(CC2.SEQNO_ADDED_TIME)
,MIN(CC2.SEQNO)
,CC2.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC2  CC2
GROUP BY
 CC2.LOGIN_ID
,CC2.AGENT_FIRST_NAME
,CC2.AGENT_LAST_NAME
,CC2.TEAM
,CC2.MEDIA_TYPE
,CC2.[DATETIME]
,CC2.FTP_FILE_NAME

--=====================================================================================================================
-- PARSE DATA RECORDS INTO INTERVALS
--=====================================================================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2

DECLARE
 @F1  VARCHAR(50)
,@F2  VARCHAR(50)
,@F3  VARCHAR(50)
,@F4  VARCHAR(50)
,@F5  VARCHAR(50)
,@F6  VARCHAR(50)
,@F7  VARCHAR(50)
,@F8  VARCHAR(50)
,@F9  VARCHAR(200)
,@F10 VARCHAR(50)
,@F11 VARCHAR(100)
,@F12 DATETIME 
,@F13 DECIMAL(10,2)
,@F14 DATETIME
,@F15 DATETIME
,@F16 INT
,@F17 VARCHAR(100)
,@F18 INT

DECLARE crsT3 CURSOR FOR   
SELECT
 ISNULL(F1 ,'')
,ISNULL(F2 ,'')
,ISNULL(F3 ,'')
,ISNULL(F4 ,'')
,ISNULL(F5 ,'')
,ISNULL(F6 ,'')
,ISNULL(F7 ,'')
,ISNULL(F8 ,'')
,ISNULL(F9 ,'')
,ISNULL(F10,'')
,ISNULL(F11,'')
,ISNULL(EVENT_START_TIME,'')
,ISNULL(EVENT_DURATION_SECS,0.00)
,ISNULL(EVENT_END_TIME,'')
,ISNULL(SEQNO_ADDED_TIME,'')
,ISNULL(SEQNO,'0')
,ISNULL(FTP_FILE_NAME,'')
,3600											--<<----- DETERMINES THE INTERVAL, 900 = 15 MIN, 1800 = 30 MIN, 3600 = 60 MIN
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1

OPEN crsT3
FETCH NEXT FROM crsT3   INTO @F1,@F2,@F3,@F4,@F5,@F6,@F7,@F8,@F9,@F10,@F11,@F12,@F13,@F14,@F15,@F16,@F17,@F18

WHILE @@FETCH_STATUS = 0 BEGIN
-- SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2 ORDER BY SEQNO
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2
(FF_TIME
,FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DURATION
,FF_DETAIL
,FF_SERVICE
,FF_MEDIA_TYPE
,FF_GLOBAL_ID
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 RESULT.FF_TIME
,RESULT.FF_LOGIN_ID
,RESULT.FF_AGENT_FIRST_NAME
,RESULT.FF_AGENT_LAST_NAME
,RESULT.FF_TEAM
,RESULT.FF_ACTIVITY
,RESULT.FF_DURATION
,RESULT.FF_DETAIL
,RESULT.FF_SERVICE
,RESULT.FF_MEDIA_TYPE
,RESULT.FF_GLOBAL_ID
,RESULT.EVENT_START_TIME
,RESULT.EVENT_DURATION_SECS
,RESULT.EVENT_END_TIME
,RESULT.INTERVAL_START_TIME
,RESULT.INTERVAL_END_TIME
,RESULT.EVENT_DURATION_IN_INTERVAL_SECS
,RESULT.SEQNO_ADDED_TIME
,RESULT.SEQNO
,RESULT.FTP_FILE_NAME
FROM TVF_BRIGHT_PATTERN_STATES_TO_INTERVALS(@F1,@F2,@F3,@F4,@F5,@F6,@F7,@F8,@F9,@F10,@F11,@F12,@F13,@F14,@F15,@F16,@F17,@F18) RESULT

FETCH NEXT FROM crsT3   INTO @F1,@F2,@F3,@F4,@F5,@F6,@F7,@F8,@F9,@F10,@F11,@F12,@F13,@F14,@F15,@F16,@F17,@F18
END
CLOSE crsT3
DEALLOCATE crsT3


--=============================================================================
--	REMOVE AFTER-HOURS RECORDS FOR i9 SPORTS
--	HOURS OF OPERATION = M-F 8AM - 9PM CT
--=============================================================================
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_TIME
,FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DURATION
,FF_DETAIL
,FF_SERVICE
,FF_MEDIA_TYPE
,FF_GLOBAL_ID
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,PARENT_SEQNO
)
SELECT
 'OBH'					--BAD_IMPORTS_CODE			-- 'O'utside 'B'usiness 'H'ours
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W2.FF_TIME
,W2.FF_LOGIN_ID
,W2.FF_AGENT_FIRST_NAME
,W2.FF_AGENT_LAST_NAME
,W2.FF_TEAM
,W2.FF_ACTIVITY
,W2.FF_DURATION
,W2.FF_DETAIL
,W2.FF_SERVICE
,W2.FF_MEDIA_TYPE
,W2.FF_GLOBAL_ID
,W2.EVENT_START_TIME
,W2.EVENT_DURATION_SECS
,W2.EVENT_END_TIME
,W2.INTERVAL_START_TIME
,W2.INTERVAL_END_TIME
,W2.EVENT_DURATION_IN_INTERVAL_SECS
,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME
,NULL	-- PARENT_SEQNO
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2  W2
WHERE ISNULL(W2.FF_TEAM,'') = 'i9 Sports Agents'
  AND DATEPART(HH, W2.INTERVAL_START_TIME) IN (22,23,0,1,2,3,4,5,6,7)
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2
WHERE ISNULL(FF_TEAM,'') = 'i9 Sports Agents'
  AND DATEPART(HH, INTERVAL_START_TIME) IN (22,23,0,1,2,3,4,5,6,7)

-- SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2 ORDER BY SEQNO

--=============================================================================
--	REMOVE WEEKEND RECORDS FOR i9 SPORTS
--	HOURS OF OPERATION = M-F 8AM - 9PM CT
--=============================================================================
SET DATEFIRST 1

INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_TIME
,FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DURATION
,FF_DETAIL
,FF_SERVICE
,FF_MEDIA_TYPE
,FF_GLOBAL_ID
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,PARENT_SEQNO
)
SELECT
 'OBH'					--BAD_IMPORTS_CODE			-- 'O'utside 'B'usiness 'H'ours
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W2.FF_TIME
,W2.FF_LOGIN_ID
,W2.FF_AGENT_FIRST_NAME
,W2.FF_AGENT_LAST_NAME
,W2.FF_TEAM
,W2.FF_ACTIVITY
,W2.FF_DURATION
,W2.FF_DETAIL
,W2.FF_SERVICE
,W2.FF_MEDIA_TYPE
,W2.FF_GLOBAL_ID
,W2.EVENT_START_TIME
,W2.EVENT_DURATION_SECS
,W2.EVENT_END_TIME
,W2.INTERVAL_START_TIME
,W2.INTERVAL_END_TIME
,W2.EVENT_DURATION_IN_INTERVAL_SECS
,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME
,NULL	-- PARENT_SEQNO
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2  W2
WHERE ISNULL(W2.FF_TEAM,'') = 'i9 Sports Agents'
  AND DATEPART(WEEKDAY,W2.INTERVAL_START_TIME) IN (6,7) -- SATURDAY AND SUNDAY
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2
WHERE ISNULL(FF_TEAM,'') = 'i9 Sports Agents'
  AND DATEPART(WEEKDAY,INTERVAL_START_TIME) IN (6,7) -- SATURDAY AND SUNDAY

-- SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2 ORDER BY SEQNO
-- SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3 ORDER BY SEQNO
--=============================================================================
-- GROUP DATA BY ACTIVITY/DETAIL AND INTERVAL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3

INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3
(
 FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DETAIL
,FF_MEDIA_TYPE
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME

,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_TIME

,LOGGED_IN_TIME
,READY_TIME
,INBOUND_VOICE_TIME
,OUTBOUND_VOICE_TIME
,ACW_VOICE_TIME
,NOT_READY_TIME
,NOT_READY_BREAK_TIME
,NOT_READY_NO_ANSWER_TIME
,SUPERVISION_TIME
,UNKNOWN_TIME

,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W2.FF_LOGIN_ID
,W2.FF_AGENT_FIRST_NAME
,W2.FF_AGENT_LAST_NAME
,W2.FF_TEAM
,W2.FF_ACTIVITY
,W2.FF_DETAIL
,W2.FF_MEDIA_TYPE

,SUM(ISNULL(W2.EVENT_DURATION_IN_INTERVAL_SECS	,0.00))
,MAX(W2.SEQNO_ADDED_TIME)
,MIN(W2.SEQNO)
,W2.FTP_FILE_NAME

,NULL						--AS RESOURCE_NAME
,W2.INTERVAL_START_TIME		--AS DATETIME
,NULL						--AS HOUR_INTERVAL
,NULL						--AS EMPLOYEE_ID
,NULL						--AS STD_TENANT_START_TIME

,NULL						--AS LOGGED_IN_TIME
,NULL						--AS READY_TIME
,NULL						--AS INBOUND_VOICE_TIME
,NULL						--AS OUTBOUND_VOICE_TIME
,NULL						--AS ACW_VOICE_TIME
,NULL						--AS NOT_READY_TIME
,NULL						--AS NOT_READY_BREAK_TIME
,NULL						--AS NOT_READY_NO_ANSWER_TIME
,NULL						--AS SUPERVISION_TIME
,NULL						--AS UNKNOWN_TIME

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2  W2

GROUP BY
 W2.FF_LOGIN_ID
,W2.FF_AGENT_FIRST_NAME
,W2.FF_AGENT_LAST_NAME
,W2.FF_TEAM
,W2.FF_ACTIVITY
,W2.FF_DETAIL
,W2.FF_MEDIA_TYPE
,W2.FTP_FILE_NAME
,W2.INTERVAL_START_TIME

ORDER BY
 MIN(W2.SEQNO)

-- SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3 ORDER BY SEQNO

--==================================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_3) TABLE THAT WEREN'T IN IMPORTED FILE:
--==================================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3 SET
 HOUR_INTERVAL = DATEPART(HH, [DATETIME])
,EMPLOYEE_ID = CASE WHEN CHARINDEX('_', FF_AGENT_LAST_NAME) > 0 THEN
					  LOWER(LEFT(FF_AGENT_FIRST_NAME,1)) + LOWER(LEFT(FF_AGENT_LAST_NAME,CHARINDEX('_',FF_AGENT_LAST_NAME) - 1)) + RIGHT(FF_AGENT_LAST_NAME,3)
					ELSE
					  LOWER(LEFT(FF_AGENT_FIRST_NAME,1)) + LOWER(FF_AGENT_LAST_NAME)
					END
,STD_TENANT_START_TIME = [DATETIME]

UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3 SET
 EMPLOYEE_ID = 'anjohnsonACA'
WHERE FF_AGENT_FIRST_NAME = 'Antoinette'
  AND FF_AGENT_LAST_NAME = 'Johnson_ACA'

UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3 SET
 EMPLOYEE_ID = CASE WHEN (FF_LOGIN_ID = 'crjonesaca'	AND FF_AGENT_FIRST_NAME = 'Crystal'	) THEN 'crjonesACA' 
					WHEN (FF_LOGIN_ID = 'tetayloraca'	AND FF_AGENT_FIRST_NAME = 'Taylor'	) THEN 'tetaylorACA'
					WHEN (FF_LOGIN_ID = 'tsmithaca'		AND FF_AGENT_FIRST_NAME = 'Tamatha'	) THEN 'tsmithACA'
					WHEN (FF_LOGIN_ID = 'vclementiaca'	AND FF_AGENT_FIRST_NAME = 'Vincent'	) THEN 'vclementiACA'
					WHEN (FF_LOGIN_ID = 'ptorresaca'	AND FF_AGENT_FIRST_NAME = 'Paola'	) THEN 'ptorresACA'
					WHEN (FF_LOGIN_ID = 'stsampsonaca'	AND FF_AGENT_FIRST_NAME = 'Stephen'	) THEN 'stsampsonACA'
					WHEN (FF_LOGIN_ID = 'chwilliamsaca' AND FF_AGENT_FIRST_NAME = 'Chezare'	) THEN 'chwilliamsACA'
					WHEN (FF_LOGIN_ID = 'kwentzinb'		AND FF_AGENT_FIRST_NAME = 'Krista'	) THEN 'kwentzINB'
					WHEN (FF_LOGIN_ID = 'bferrignoinb'	AND FF_AGENT_FIRST_NAME = 'Brigitte') THEN 'bferrignoINB'
					WHEN (FF_LOGIN_ID = 'alongoriainb'	AND FF_AGENT_FIRST_NAME = 'Ashley'	) THEN 'alongoriaINB'
					ELSE EMPLOYEE_ID END

--========================================================================================
-- AGENT STATES (ACTIVITY)
--========================================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3 SET
 READY_TIME			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,'')))  = 'Ready'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,SUPERVISION_TIME	= CASE WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,'')))  = 'SUPERVISION'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END

-- AGENT STATES (ACTIVITY) BY MEDIA TYPE

,INBOUND_VOICE_TIME			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,''))) = 'Inbound'
									AND LTRIM(RTRIM(FF_MEDIA_TYPE))	= 'VOICE'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2))
								   ELSE 0.00 END
,OUTBOUND_VOICE_TIME		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,''))) = 'Outbound'
					  				AND LTRIM(RTRIM(FF_MEDIA_TYPE))	= 'VOICE'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								   ELSE 0.00 END
,ACW_VOICE_TIME				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,''))) = 'After Call Work'
					  				AND LTRIM(RTRIM(FF_MEDIA_TYPE))	= 'VOICE'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								   ELSE 0.00 END

-- AGENT STATES (ACTIVITY) BY REASON (DETAIL)

,NOT_READY_TIME				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,''))) = 'NR'
					  				AND LTRIM(RTRIM(FF_DETAIL))	= 'Not ready'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								   ELSE 0.00 END
,NOT_READY_BREAK_TIME		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,''))) = 'NR'
					  				AND LTRIM(RTRIM(FF_DETAIL))	= 'Break'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								   ELSE 0.00 END
,NOT_READY_NO_ANSWER_TIME	= CASE WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,''))) = 'NR'
					  				AND LTRIM(RTRIM(FF_DETAIL))	= 'No answer'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								   ELSE 0.00 END

-- CAPTURE UNKNOWN TIME FOR REPORTING

,UNKNOWN_TIME				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,''))) IN ('Inbound','Outbound','After Call Work')
					  				AND LTRIM(RTRIM(FF_MEDIA_TYPE))	<> 'VOICE'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								   WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,''))) = 'NR'
					  				AND LTRIM(RTRIM(FF_DETAIL))	NOT IN ('Not ready','Break','No answer') THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								   WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,''))) NOT IN ('Inbound','Outbound','After Call Work','NR','Ready','SUPERVISION') THEN
									CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								   ELSE 0.00 END


--=============================================================================
-- GROUP DATA BY AGENT & INTERVAL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4

INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4
(
 FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_TIME
,INBOUND_CALLS
,OUTBOUND_CALLS
,TOTAL_CALLS
,LOGGED_IN_TIME
,READY_TIME
,INBOUND_VOICE_TIME
,OUTBOUND_VOICE_TIME
,ACW_VOICE_TIME
,NOT_READY_TIME
,NOT_READY_BREAK_TIME
,NOT_READY_NO_ANSWER_TIME
,SUPERVISION_TIME
,UNKNOWN_TIME
,TOTAL_TALK_TIME
,TOTAL_NOT_READY_TIME
,AUTHORIZED_ACW_TIME
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)														
SELECT
 W3.FF_LOGIN_ID											AS FF_LOGIN_ID
,W3.FF_AGENT_FIRST_NAME									AS FF_AGENT_FIRST_NAME
,W3.FF_AGENT_LAST_NAME									AS FF_AGENT_LAST_NAME
,W3.FF_TEAM												AS FF_TEAM
,SUM(ISNULL(W3.EVENT_DURATION_IN_INTERVAL_SECS, 0.00))	AS EVENT_DURATION_IN_INTERVAL_SECS
 
,MAX(W3.SEQNO_ADDED_TIME)								AS SEQNO_ADDED_TIME
,MIN(W3.SEQNO)											AS SEQNO
,MAX(W3.FTP_FILE_NAME)									AS FTP_FILE_NAME

,NULL													AS RESOURCE_NAME
,W3.[DATETIME]											AS [DATETIME]
,W3.HOUR_INTERVAL										AS HOUR_INTERVAL
,W3.EMPLOYEE_ID											AS EMPLOYEE_ID
,W3.[DATETIME]											AS STD_TENANT_START_TIME

,NULL													AS INBOUND_CALLS
,NULL													AS OUTBOUND_CALLS
,NULL													AS TOTAL_CALLS

,NULL													AS LOGGED_IN_TIME
,SUM(ISNULL(W3.READY_TIME						,0.00))	AS READY_TIME
,SUM(ISNULL(W3.INBOUND_VOICE_TIME				,0.00))	AS INBOUND_VOICE_TIME
,SUM(ISNULL(W3.OUTBOUND_VOICE_TIME				,0.00))	AS OUTBOUND_VOICE_TIME
,SUM(ISNULL(W3.ACW_VOICE_TIME					,0.00))	AS ACW_VOICE_TIME
,SUM(ISNULL(W3.NOT_READY_TIME					,0.00))	AS NOT_READY_TIME
,SUM(ISNULL(W3.NOT_READY_BREAK_TIME				,0.00))	AS NOT_READY_BREAK_TIME
,SUM(ISNULL(W3.NOT_READY_NO_ANSWER_TIME			,0.00))	AS NOT_READY_NO_ANSWER_TIME
,SUM(ISNULL(W3.SUPERVISION_TIME					,0.00)) AS SUPERVISION_TIME
,SUM(ISNULL(W3.UNKNOWN_TIME						,0.00))	AS UNKNOWN_TIME

,NULL													AS AUTHORIZED_ACW_TIME
,NULL													AS TOTAL_TALK_TIME
,NULL													AS TOTAL_NOT_READY_TIME
,NULL													AS CPROD
,NULL													AS MINIMUM_GUARANTEE
,NULL													AS AUTHORIZED

,NULL													AS EMAIL
,NULL													AS ID_EXT
,NULL													AS SCHEDULER_ACL_NAME
,NULL													AS STD_TENANT_START_DATE_TIME_KEY
,NULL													AS CAL_DATE
,NULL													AS TENANT_KEY
,NULL													AS AIR_DAY_TYPE
,NULL													AS AIR_ACW_FONT_COLOR
,NULL													AS MIN_GUARANTEE_MINUTES
,NULL													AS MIN_GUARANTEE_TYPE
,NULL													AS AUTHORIZED_TO_INVOICE_TYPE
,NULL													AS HAS_HOLIDAYS
,NULL													AS INCLUDE_IN_CAS
,NULL													AS READY_FOR_XML
,NULL													AS SHOW_ID_EXTS
,NULL													AS INVOICE_ID

,@WS_ROW_CREATED_TIME									AS WS_ROW_CREATED_TIME
,NULL													AS WS_ROW_UPDATED_TIME
-- SELECT *
FROM            WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3  W3

GROUP BY
 W3.FF_LOGIN_ID
,W3.FF_AGENT_FIRST_NAME
,W3.FF_AGENT_LAST_NAME
,W3.FF_TEAM
,W3.[DATETIME]
,W3.HOUR_INTERVAL
,W3.EMPLOYEE_ID

ORDER BY
 MIN(W3.SEQNO)

-- SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 ORDER BY SEQNO
--========================================================================
--UPDATE ADDITIONAL FIELDS IN WORK (_4) TABLE
--========================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 RESOURCE_NAME			= CASE WHEN CHARINDEX('_',FF_AGENT_LAST_NAME) > 0 THEN
								FF_AGENT_FIRST_NAME + ' ' + LEFT(FF_AGENT_LAST_NAME,CHARINDEX('_',FF_AGENT_LAST_NAME) - 1)
							   ELSE
								FF_AGENT_FIRST_NAME + ' ' + FF_AGENT_LAST_NAME
							   END
,TOTAL_TALK_TIME		= INBOUND_VOICE_TIME + OUTBOUND_VOICE_TIME
,TOTAL_NOT_READY_TIME	= NOT_READY_TIME + NOT_READY_BREAK_TIME + NOT_READY_NO_ANSWER_TIME

UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 LOGGED_IN_TIME			= READY_TIME + TOTAL_TALK_TIME + ACW_VOICE_TIME + TOTAL_NOT_READY_TIME + SUPERVISION_TIME + UNKNOWN_TIME

--========================================================================
--SET DATE_TIME KEY
--========================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
-- SELECT *
FROM            WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4      I
INNER JOIN      DATE_TIME								        DT   ON DT.CAL_DATE = I.[DATETIME]

--============================================================================================
--DETERMINE ID EXTENSION
--============================================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 ID_EXT = CASE WHEN CHARINDEX('_', FF_AGENT_LAST_NAME) = 0 THEN ''
			   WHEN RIGHT(FF_AGENT_LAST_NAME, 3) NOT IN ('ACA','AMA','ARA','ASA','AOA','INS','INR','INB') THEN ''
			   ELSE RIGHT(FF_AGENT_LAST_NAME, 3) END

--===========================================================================================================================================
--POPULATE CALL COUNTS
--===========================================================================================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 INBOUND_CALLS	= ISNULL(CC3.INBOUND_CALLS ,0)
,OUTBOUND_CALLS	= ISNULL(CC3.OUTBOUND_CALLS,0)
--SELECT *
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4				I
LEFT JOIN	WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC3	CC3 ON CC3.LOGIN_ID			= I.FF_LOGIN_ID
															   AND CC3.AGENT_FIRST_NAME	= I.FF_AGENT_FIRST_NAME
															   AND CC3.AGENT_LAST_NAME	= I.FF_AGENT_LAST_NAME
															   AND CC3.TEAM				= I.FF_TEAM
															   AND CC3.[DATETIME]		= I.[DATETIME]

UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 TOTAL_CALLS = INBOUND_CALLS + OUTBOUND_CALLS

--===========================================================================================================================================
--SET ANY HOLIDAY FLAGS
--===========================================================================================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 AIR_DAY_TYPE = CASE WHEN IG.HAS_HOLIDAYS = 'Y' AND
						 (    ISNULL(IH.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) OR
						   ( ISNULL(IHA.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) AND ISNULL(IHA.ID_EXT,'') <> '' )
						 )
					  THEN 'H' ELSE 'S' END  --AS AIR_DAY_TYPE  --H=Holiday  --S=Standard
FROM            WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4               I
INNER JOIN      DATE_TIME												 DT   ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY
LEFT JOIN       WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_INVOICE_GROUPS         IG   ON IG.ID_EXT              = I.ID_EXT
LEFT JOIN       WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_INVOICE_HOLIDAYS       IH   ON IH.HOLIDAY_DATE        = CAST(DT.CAL_DATE_STRING AS DATETIME)
LEFT JOIN       WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_INVOICE_HOLIDAYS_ADDL  IHA  ON IHA.HOLIDAY_DATE       = CAST(DT.CAL_DATE_STRING AS DATETIME)
																			 AND IHA.ID_EXT             = I.ID_EXT
																	 
--===========================================================================================================================================
--SET INVOICING FIELDS
--===========================================================================================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 TENANT_KEY						= ISNULL(IG.TENANT_KEY,'')
,SCHEDULER_ACL_NAME				= ISNULL(IG.SCHEDULER_ACL_NAME,'')
,AIR_ACW_FONT_COLOR             = 'Black'

,MIN_GUARANTEE_MINUTES          = ISNULL(IG.MIN_GUARANTEE_MINUTES,0)        --varies between scheduler acl names.
,MIN_GUARANTEE_TYPE             = ISNULL(IG.MIN_GUARANTEE_TYPE,'')          --varies between scheduler acl names.
,AUTHORIZED_TO_INVOICE_TYPE     = ISNULL(IG.AUTHORIZED_TO_INVOICE_TYPE,'')  --varies between scheduler acl names.

,HAS_HOLIDAYS    = IG.HAS_HOLIDAYS
,INCLUDE_IN_CAS  = IG.INCLUDE_IN_CAS
,READY_FOR_XML   = IG.READY_FOR_XML
,SHOW_ID_EXTS    = IG.SHOW_ID_EXTS
--SELECT *
FROM            WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4        I
LEFT JOIN       WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_INVOICE_GROUPS  IG  ON IG.ID_EXT    = I.ID_EXT

--=====================================================================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 INVOICE_ID  = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
--,TENANT_NAME = AIASD.OFFICIAL_ACD_CLIENT_NAME 
FROM          WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4				AIA 
LEFT JOIN     WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_AIA_STATIC_DEFAULTS		AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT

--================================
--DATA INTEGRITY CHECK(S):
--================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''

--Check #1:  ============================================================================================================================================================
	SET @RCD_CNT = ( SELECT COUNT(*) FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 )
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #1 FAILED! - File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #2:  ============================================================================================================================================================
	SET @RCD_CNT = ( SELECT COUNT(*) FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0 )  
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #2 FAILED! - Invalid DATETIME intervals in BRIGHT PATTERN INVOICING IMPORT File.  Import was Cancelled.  Nothing was Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #3:  ============================================================================================================================================================
	SET @RCD_CNT = ( SELECT COUNT(*) FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 WHERE ISNULL(FF_LOGIN_ID,'') = '')  
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #3 FAILED! - Blank AGENT LOGIN ID(s) in BRIGHT PATTERN INVOICING IMPORT File exist(s).  Import was Cancelled.  Nothing was Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #4:  ============================================================================================================================================================
	-- SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 WHERE ISNULL(FF_LOGIN_ID,'') <> LOWER(ISNULL(EMPLOYEE_ID,''))
	SET @RCD_CNT = ( SELECT COUNT(*) 
					 FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 
					 WHERE ISNULL(FF_LOGIN_ID,'') <> LOWER(ISNULL(EMPLOYEE_ID,''))
					   AND RESOURCE_NAME NOT IN ('Rory Slaughter','Christina Gerding','Jeff Innis','Ruth Kowalczyk','Rebecca Hargis','Oscar Galvan','Kathryn Roxo') 
				   )  
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #4 FAILED! - AGENT LOGIN ID(s) in BRIGHT PATTERN INVOICING IMPORT File DO NOT MATCH EMPLOYEE IDs.  Import was Cancelled.  Nothing was Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
	
--======================= ********** INSERT INTO PERMANENT TABLE (IF NO ERRORS FOUND), OR SKIP AND GO TO END (ERRORS FOUND) ********** ==================================
IF @ERR_CNT > 0 BEGIN
INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
(
 TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY				--TENANT_KEY
	,'BRIGHT_PATTERN_INVOICING'	--SUB_GROUP_NAME
	,@MSG1						--ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	--MUST RETURN AT LEAST ONE RECORD TO SSIS
INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY				--TENANT_KEY
	,'BRIGHT_PATTERN_INVOICING'	--SUB_GROUP_NAME
	,''							--ERROR_MSG
END
--=======================================================================================================================================================================

--====================================================================================================
-- POPULATE ADDITIONAL INVOICE FIELDS
--====================================================================================================
---->> AUTHORIZED WRAP (i9 SPORTS)
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 AUTHORIZED_ACW_TIME = CASE WHEN FF_TEAM = 'i9 Sports Agents' THEN	-- i9 SPORTS
							 CASE WHEN (TOTAL_CALLS * 120.00) > ACW_VOICE_TIME THEN
									ACW_VOICE_TIME
								  ELSE
									TOTAL_CALLS * 120.00 END	-- TWO MINUTES OF WRAP ALLOWED PER CALL
						ELSE ACW_VOICE_TIME END	-- ALL OTHER PROGRAMS
 
---->> CPROD
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 CPROD = CASE WHEN MIN_GUARANTEE_TYPE = 'RB'  THEN
				   READY_TIME + TOTAL_TALK_TIME + SUPERVISION_TIME
			  WHEN MIN_GUARANTEE_TYPE = 'RBW' THEN
				   READY_TIME + TOTAL_TALK_TIME + SUPERVISION_TIME + AUTHORIZED_ACW_TIME
			  ELSE 0.00 END
			  
---->> MINIMUM GUARANTEE  
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 MINIMUM_GUARANTEE = CPROD * (MIN_GUARANTEE_MINUTES / 60.00)

---->> AUTHORIZED MINUTES
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 AUTHORIZED = CASE WHEN AUTHORIZED_TO_INVOICE_TYPE = 'B' THEN
					CASE WHEN MINIMUM_GUARANTEE > (TOTAL_TALK_TIME) THEN
							MINIMUM_GUARANTEE
						 ELSE (TOTAL_TALK_TIME) END
					ELSE 0.00 END

--======================================================================================================
-- SET INVOICE FIELDS TO ZERO FOR WSOL ASAs
--======================================================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 AUTHORIZED = 0.00
WHERE RESOURCE_NAME = 'Joann Lopez_AOA'

--======================================================================================================
-- SET AUTHORIZED TO ZERO FOR TIME OUTSIDE BUSINESS HOURS FOR ASURION AGENTS
--======================================================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 AUTHORIZED = 0.00
WHERE HOUR_INTERVAL IN (0,1,2,3,4,5)
  AND FF_TEAM = 'Asurion Agents'


-- SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4
--=============================================================================
-- INSERT DATA INTO PERMANENT TABLE (UPDATE)
--=============================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING SET
-- FF_LOGIN_ID						= W4.FF_LOGIN_ID
-- FF_AGENT_FIRST_NAME				= W4.FF_AGENT_FIRST_NAME
-- FF_AGENT_LAST_NAME				= W4.FF_AGENT_LAST_NAME
-- FF_TEAM							= W4.FF_TEAM
 EVENT_DURATION_IN_INTERVAL_SECS	= W4.EVENT_DURATION_IN_INTERVAL_SECS

,SEQNO_ADDED_TIME					= W4.SEQNO_ADDED_TIME
,SEQNO								= W4.SEQNO
,FTP_FILE_NAME						= W4.FTP_FILE_NAME

,RESOURCE_NAME						= W4.RESOURCE_NAME					
,[DATETIME]							= W4.[DATETIME]
,HOUR_INTERVAL						= W4.HOUR_INTERVAL
,EMPLOYEE_ID						= W4.EMPLOYEE_ID
,STD_TENANT_START_TIME				= W4.STD_TENANT_START_TIME

,INBOUND_CALLS						= W4.INBOUND_CALLS
,OUTBOUND_CALLS						= W4.OUTBOUND_CALLS
,TOTAL_CALLS						= W4.TOTAL_CALLS

,LOGGED_IN_TIME						= W4.LOGGED_IN_TIME
,READY_TIME							= W4.READY_TIME
,INBOUND_VOICE_TIME					= W4.INBOUND_VOICE_TIME
,OUTBOUND_VOICE_TIME				= W4.OUTBOUND_VOICE_TIME
,ACW_VOICE_TIME						= W4.ACW_VOICE_TIME
,NOT_READY_TIME						= W4.NOT_READY_TIME
,NOT_READY_BREAK_TIME				= W4.NOT_READY_BREAK_TIME
,NOT_READY_NO_ANSWER_TIME			= W4.NOT_READY_NO_ANSWER_TIME
,SUPERVISION_TIME					= W4.SUPERVISION_TIME
,UNKNOWN_TIME						= W4.UNKNOWN_TIME
,TOTAL_TALK_TIME					= W4.TOTAL_TALK_TIME
,TOTAL_NOT_READY_TIME				= W4.TOTAL_NOT_READY_TIME
,AUTHORIZED_ACW_TIME				= W4.AUTHORIZED_ACW_TIME
,CPROD								= W4.CPROD
,MINIMUM_GUARANTEE					= W4.MINIMUM_GUARANTEE
,AUTHORIZED							= W4.AUTHORIZED

,EMAIL								= W4.EMAIL
--,ID_EXT							= W4.ID_EXT
,SCHEDULER_ACL_NAME					= W4.SCHEDULER_ACL_NAME
--,STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W4.CAL_DATE
,TENANT_KEY							= W4.TENANT_KEY
,AIR_DAY_TYPE						= W4.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W4.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES				= W4.MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE					= W4.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W4.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W4.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W4.INCLUDE_IN_CAS
,READY_FOR_XML						= W4.READY_FOR_XML
,SHOW_ID_EXTS						= W4.SHOW_ID_EXTS
--,INVOICE_ID						= W4.INVOICE_ID
--,WS_ROW_CREATED_TIME				= NULL
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4		W4
INNER JOIN      WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING		G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
																   AND G.FF_LOGIN_ID					= W4.FF_LOGIN_ID
																   AND G.FF_AGENT_FIRST_NAME			= W4.FF_AGENT_FIRST_NAME
																   AND G.FF_AGENT_LAST_NAME				= W4.FF_AGENT_LAST_NAME
																   AND G.FF_TEAM						= W4.FF_TEAM
																   AND G.ID_EXT							= W4.ID_EXT
																   AND G.INVOICE_ID						= W4.INVOICE_ID

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_LOGIN_ID						= W4.FF_LOGIN_ID
  AND G.FF_AGENT_FIRST_NAME				= W4.FF_AGENT_FIRST_NAME
  AND G.FF_AGENT_LAST_NAME				= W4.FF_AGENT_LAST_NAME
  AND G.FF_TEAM							= W4.FF_TEAM
  AND G.ID_EXT							= W4.ID_EXT
  AND G.INVOICE_ID						= W4.INVOICE_ID


--==========================================
--INSERT INTO PERMANENT IMPORT TABLE: 
--==========================================
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING
(FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_TIME
,INBOUND_CALLS
,OUTBOUND_CALLS
,TOTAL_CALLS
,LOGGED_IN_TIME
,READY_TIME
,INBOUND_VOICE_TIME
,OUTBOUND_VOICE_TIME
,ACW_VOICE_TIME
,NOT_READY_TIME
,NOT_READY_BREAK_TIME
,NOT_READY_NO_ANSWER_TIME
,SUPERVISION_TIME
,UNKNOWN_TIME
,TOTAL_TALK_TIME
,TOTAL_NOT_READY_TIME
,AUTHORIZED_ACW_TIME
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W4.FF_LOGIN_ID
,W4.FF_AGENT_FIRST_NAME
,W4.FF_AGENT_LAST_NAME
,W4.FF_TEAM
,W4.EVENT_DURATION_IN_INTERVAL_SECS
,W4.SEQNO_ADDED_TIME
,W4.SEQNO
,W4.FTP_FILE_NAME
,W4.RESOURCE_NAME
,W4.[DATETIME]
,W4.HOUR_INTERVAL
,W4.EMPLOYEE_ID
,W4.STD_TENANT_START_TIME
,W4.INBOUND_CALLS
,W4.OUTBOUND_CALLS
,W4.TOTAL_CALLS
,W4.LOGGED_IN_TIME
,W4.READY_TIME
,W4.INBOUND_VOICE_TIME
,W4.OUTBOUND_VOICE_TIME
,W4.ACW_VOICE_TIME
,W4.NOT_READY_TIME
,W4.NOT_READY_BREAK_TIME
,W4.NOT_READY_NO_ANSWER_TIME
,W4.SUPERVISION_TIME
,W4.UNKNOWN_TIME
,W4.TOTAL_TALK_TIME
,W4.TOTAL_NOT_READY_TIME
,W4.AUTHORIZED_ACW_TIME
,W4.CPROD
,W4.MINIMUM_GUARANTEE
,W4.AUTHORIZED
,W4.EMAIL
,W4.ID_EXT
,W4.SCHEDULER_ACL_NAME
,W4.STD_TENANT_START_DATE_TIME_KEY
,W4.CAL_DATE
,W4.TENANT_KEY
,W4.AIR_DAY_TYPE
,W4.AIR_ACW_FONT_COLOR
,W4.MIN_GUARANTEE_MINUTES
,W4.MIN_GUARANTEE_TYPE
,W4.AUTHORIZED_TO_INVOICE_TYPE
,W4.HAS_HOLIDAYS
,W4.INCLUDE_IN_CAS
,W4.READY_FOR_XML
,W4.SHOW_ID_EXTS
,W4.INVOICE_ID

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4		W4

LEFT JOIN       WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING		G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
																   AND G.FF_LOGIN_ID					= W4.FF_LOGIN_ID
																   AND G.FF_AGENT_FIRST_NAME			= W4.FF_AGENT_FIRST_NAME
																   AND G.FF_AGENT_LAST_NAME				= W4.FF_AGENT_LAST_NAME
																   AND G.FF_TEAM						= W4.FF_TEAM
																   AND G.ID_EXT							= W4.ID_EXT
																   AND G.INVOICE_ID						= W4.INVOICE_ID
														 
WHERE ( G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W4.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( G.FF_LOGIN_ID						IS NULL AND ISNULL(W4.FF_LOGIN_ID			,'') <> '' )
  AND ( G.FF_AGENT_FIRST_NAME				IS NULL AND ISNULL(W4.FF_AGENT_FIRST_NAME	,'') <> '' )
  AND ( G.FF_AGENT_LAST_NAME				IS NULL AND ISNULL(W4.FF_AGENT_LAST_NAME	,'') <> '' )
  AND ( G.FF_TEAM							IS NULL AND ISNULL(W4.FF_TEAM				,'') <> '' )
--  AND ( G.ID_EXT							IS NULL AND ISNULL(W4.ID_EXT				,'') <> '' )
--  AND ( G.INVOICE_ID						IS NULL AND ISNULL(W4.INVOICE_ID			,'') <> '' )

-- SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING

--===============================================
SET DATEFIRST 1  -- = Monday  
--===============================================
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME

SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN([DATETIME]) FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4))  
--===============================================================================================================================
IF OBJECT_ID('TEMPDB..#DT_EASY_WEEKS') IS NOT NULL BEGIN
   DROP TABLE #DT_EASY_WEEKS
END
CREATE TABLE #DT_EASY_WEEKS
(CAL_DATE_STRING      VARCHAR(10)
,CAL_WEEK_START_DATE  DATETIME
,CAL_WEEK_END_DATE    DATETIME
,PAY_CYCLE_CLOSURE_DATE DATETIME
)
INSERT INTO #DT_EASY_WEEKS
SELECT
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
FROM DATE_TIME DT
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
GROUP BY 
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE 
--===========================
UPDATE #DT_EASY_WEEKS SET CAL_WEEK_END_DATE = DATEADD(DD,6,CAL_WEEK_START_DATE)
UPDATE #DT_EASY_WEEKS SET
 PAY_CYCLE_CLOSURE_DATE = (CASE WHEN (DATEDIFF(DD,CAST('04/27/2014' AS DATETIME),CAL_WEEK_END_DATE) % 14) = 0 THEN
									CAL_WEEK_END_DATE
								ELSE
									DATEADD(DD,7,CAL_WEEK_END_DATE)
								END)


--====================================================================================================================================
--CREATE TEMP TABLE TO HOLD NORMALIZED DATA STRUCTURE
--====================================================================================================================================
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA
END
CREATE TABLE #WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](50) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[PAY_GROUP] [int] NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.EMPLOYEE_ID  --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING     --[DATE]             
,DT.LABEL_HH24 + ':00'  --HOD_INTERVAL

,ISNULL(AIA.LOGGED_IN_TIME		,0)	--AU_DK_LOGGED_IN_DURATION				--DATA IS IN SECONDS
,ISNULL(AIA.READY_TIME			,0)	--AU_DK_AVAILABLE_DURATION				--DATA IS IN SECONDS

,ISNULL(AIA.TOTAL_TALK_TIME		,0)	--AU_DK_TALK_DURATION					--DATA IS IN SECONDS
,ISNULL(AIA.INBOUND_VOICE_TIME	,0)	--AU_DK_IB_TALK_DURATION				--DATA IS IN SECONDS
,ISNULL(AIA.OUTBOUND_VOICE_TIME	,0)	--AU_DK_OB_TALK_DURATION				--DATA IS IN SECONDS

,ISNULL(AIA.AUTHORIZED_ACW_TIME	,0)	--AU_DK_CONVENTIONAL_ACW				--DATA IS IN SECONDS
,ISNULL(AIA.TOTAL_NOT_READY_TIME,0)	--AU_DK_NR_DURATION						--DATA IS IN SECONDS
,0									--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0									--AU_DK_ADJUSTED_NR_DURATION
,ISNULL(AIA.CPROD, 0)				--AU_DK_TOTAL_PRODUCTIVE_DURATION		--DATA IS IN SECONDS
,ISNULL(AIA.CPROD, 0)				--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS	--DATA IS IN SECONDS

,0  --AU_DK_XFER_COUNT
,0  --AU_DK_HOLD_COUNT
,0  --AU_DK_CONFERENCE_COUNT
,0  --AU_DK_CONSULT_COUNT
,0  --AU_DK_PUP_COUNT

,0  --AU_DK_OFFERED_COUNT
,0  --AU_DK_HANDLED_COUNT
,AIA.INBOUND_CALLS					--AU_DK_IB_HANDLE_COUNT
,AIA.OUTBOUND_CALLS					--AU_DK_OB_HANDLE_COUNT
						
,0  --AU_DK_RONA_COUNT
,0  --AU_DK_AWR_COUNT

,ISNULL(AIA.MINIMUM_GUARANTEE	, 0)	--MINIMUM_GUARANTEE			--DATA IS IN SECONDS
,ISNULL(AIA.AUTHORIZED			, 0)	--AUTHORIZED_TO_INVOICE		--DATA IS IN SECONDS

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_MINUTES
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID		--CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID 
,AIA.RESOURCE_NAME
,0					--AIRITKDUR
,0					--AIRIACDUR
,0					--PAY_GROUP
,DBO.GETDATE()		--[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL				--[WS_ROW_UPDATED_TIME] [datetime] NULL
	
--SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_AIA_STATIC_DEFAULTS ORDER BY OFFICIAL_WSOL_CLIENT_ID
--SELECT TOP 1000 *
FROM            WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4            AIA
 
--ONLY WANT TO INCLUDE VALID ID_EXT IN _AIA TABLE -- ID EXTS THAT HAVE MINIMUM GUARANTEE AND AUTHORIZED MINUTE FORMULAS AND STATIC DEFAULTS SET UP
INNER JOIN      WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_INVOICE_GROUPS      CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME											  DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS										  DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')
--AND (ISNULL(AIA.PAY_GROUP,'') = 0)  -- THIS CAN BE SET TO ONLY INCLUDE CERTAIN PAY GROUPS IN THE XML PUSH

--  INNER JOIN TO AIASD TABLE INSURES ONLY RECORDS WITH VALID ID EXTENSIONS ARE PUT IN _AIA TABLE/XML REPORT/FILE...
--  SAME FOR INVOICE_GROUPS...

--  SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING WHERE ISNULL(ID_EXT,'') = ''


--===================================================================
--UPDATE YZ_TB_...UV_ANT_AIA TABLE:
--===================================================================
--SELECT TOP 100 * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA SET
 [PLATFORM]							= W1.[PLATFORM]
,[STATUS]							= W1.[STATUS]
--,INVOICE_MAP_KEY					= W1.INVOICE_MAP_KEY
,FIELD_NAME							= W1.FIELD_NAME
,SCHEDULER_PROJECT_ID				= W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME					= W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION					= W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID			= W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME			= W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID				= W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME			= W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID			= W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID	= W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID		= W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY			= W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID					= W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID					= W1.HOLIDAY_INVOICE_ID
,HOLIDAY							= W1.HOLIDAY
,FILE_FORMAT_OF_PUSH				= W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID		= W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL							= W1.NEW_ACL
,CURRENT_CATS						= W1.CURRENT_CATS
,CATS_ID							= W1.CATS_ID
,PATS_ID							= W1.PATS_ID
,SMART_ELIGIBLE						= W1.SMART_ELIGIBLE
,SMART_TIER_1						= W1.SMART_TIER_1
,SMART_TIER_2						= W1.SMART_TIER_2
,SMART_TIER_3						= W1.SMART_TIER_3
,INTERVAL							= W1.INTERVAL
,[DATE]								= W1.[DATE]
,HOD_INTERVAL						= W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION			= W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION			= W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION				= W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION				= W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION				= W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW				= W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION					= W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT					= W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT					= W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT				= W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT				= W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT					= W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT				= W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT				= W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT				= W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT				= W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT					= W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT					= W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE					= W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE				= W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE					= W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE				= W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:

,FTP_FILE_NAME						= W1.FTP_FILE_NAME
,EMAIL								= W1.EMAIL
--,STD_TENANT_START_DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W1.CAL_DATE
,TENANT_KEY							= W1.TENANT_KEY
,AIR_DAY_TYPE						= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE					= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE					= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W1.INCLUDE_IN_CAS
,READY_FOR_XML						= W1.READY_FOR_XML
,SHOW_ID_EXTS						= W1.SHOW_ID_EXTS
,INVOICE_ID							= W1.INVOICE_ID
,RESOURCE_NAME						= W1.RESOURCE_NAME

,PAY_GROUP							= W1.PAY_GROUP
,AIRITKDUR							= W1.AIRITKDUR
,AIRIACDUR							= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

FROM            #WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA   W1

INNER JOIN      WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
																AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
																AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )


--================================================
--INSERT TMP TABLE FIELDS INTO YZ_TB_... TABLE:
--================================================
INSERT INTO [WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.PAY_GROUP
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA   AIA
LEFT JOIN       WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
																AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
																AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )


--===============================================
EARLY_EXIT:
--===============================================