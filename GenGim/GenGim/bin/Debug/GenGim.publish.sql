/*
Deployment script for gengim_new

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "gengim_new"
:setvar DefaultFilePrefix "gengim_new"
:setvar DefaultDataPath "C:\Users\lewisda\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"
:setvar DefaultLogPath "C:\Users\lewisda\AppData\Local\Microsoft\Microsoft SQL Server Local DB\Instances\MSSQLLocalDB"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
PRINT N'Creating [dbo].[BackgroundsOnline]...';


GO
CREATE TABLE [dbo].[BackgroundsOnline] (
    [id]             BIGINT        IDENTITY (1, 1) NOT NULL,
    [applicantID]    BIGINT        NOT NULL,
    [token]          VARCHAR (255) NULL,
    [orderID]        INT           NULL,
    [status]         VARCHAR (50)  NULL,
    [statusID]       INT           NULL,
    [creationdate]   DATETIME      NULL,
    [completiondate] DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[DATE_TIME]...';


GO
CREATE TABLE [dbo].[DATE_TIME] (
    [DATE_TIME_KEY]                 INT          NOT NULL,
    [DATE_TIME_30MIN_KEY]           INT          NULL,
    [DATE_TIME_HOUR_KEY]            INT          NOT NULL,
    [DATE_TIME_DAY_KEY]             INT          NOT NULL,
    [DATE_TIME_WEEK_KEY]            INT          NOT NULL,
    [DATE_TIME_MONTH_KEY]           INT          NOT NULL,
    [DATE_TIME_QUARTER_KEY]         INT          NOT NULL,
    [DATE_TIME_YEAR_KEY]            INT          NOT NULL,
    [DATE_TIME_NEXT_KEY]            INT          NOT NULL,
    [DATE_TIME_NEXT_30MIN_KEY]      INT          NULL,
    [DATE_TIME_NEXT_HOUR_KEY]       INT          NOT NULL,
    [DATE_TIME_NEXT_DAY_KEY]        INT          NOT NULL,
    [DATE_TIME_NEXT_WEEK_KEY]       INT          NOT NULL,
    [DATE_TIME_NEXT_MONTH_KEY]      INT          NOT NULL,
    [DATE_TIME_NEXT_QUARTER_KEY]    INT          NOT NULL,
    [DATE_TIME_NEXT_YEAR_KEY]       INT          NOT NULL,
    [CREATE_AUDIT_KEY]              INT          NOT NULL,
    [UPDATE_AUDIT_KEY]              INT          NOT NULL,
    [CAL_DATE]                      DATETIME     NULL,
    [CAL_DATE_STRING]               VARCHAR (64) NULL,
    [CAL_DAY_NUM_IN_WEEK]           SMALLINT     NULL,
    [CAL_DAY_NAME]                  VARCHAR (32) NULL,
    [CAL_DAY_NUM_IN_MONTH]          SMALLINT     NULL,
    [CAL_DAY_NUM_IN_YEAR]           SMALLINT     NULL,
    [CAL_LAST_DAY_IN_WEEK]          NUMERIC (1)  NULL,
    [CAL_LAST_DAY_IN_MONTH]         NUMERIC (1)  NULL,
    [CAL_WEEK_NUM_IN_YEAR]          SMALLINT     NULL,
    [WEEK_YEAR]                     SMALLINT     NULL,
    [CAL_YEAR_WEEK_NUM]             VARCHAR (32) NULL,
    [CAL_WEEK_START_DATE]           DATETIME     NULL,
    [CAL_WEEK_END_DATE]             DATETIME     NULL,
    [CAL_MONTH_NUM_IN_YEAR]         SMALLINT     NULL,
    [CAL_MONTH_NUM_IN_YEAR_STRING]  VARCHAR (32) NULL,
    [CAL_YEAR_MONTH_DAY_NUM]        VARCHAR (32) NULL,
    [CAL_MONTH_NAME]                VARCHAR (32) NULL,
    [CAL_YEAR_MONTH]                VARCHAR (32) NULL,
    [CAL_YEAR_MONTH_NUM]            VARCHAR (32) NULL,
    [CAL_QUARTER_NUM_IN_YEAR]       SMALLINT     NULL,
    [CAL_YEAR_QUARTER]              VARCHAR (32) NULL,
    [CAL_HALF_NUM_IN_YEAR]          SMALLINT     NULL,
    [CAL_YEAR_HALF_YEAR]            VARCHAR (32) NULL,
    [CAL_YEAR_NUM]                  SMALLINT     NULL,
    [CAL_YEAR_STRING]               VARCHAR (32) NULL,
    [CAL_SHORT_YEAR_STRING]         VARCHAR (32) NULL,
    [CAL_HOUR_NUM_IN_DAY]           SMALLINT     NULL,
    [CAL_HOUR_NUM_IN_DAY_STRING]    VARCHAR (32) NULL,
    [CAL_HOUR_24_NUM_IN_DAY]        SMALLINT     NULL,
    [CAL_HOUR_24_NUM_IN_DAY_STRING] VARCHAR (32) NULL,
    [CAL_MINUTE_NUM_IN_HOUR]        SMALLINT     NULL,
    [CAL_30MINUTE_NUM_IN_HOUR]      SMALLINT     NULL,
    [LABEL_YYYY]                    VARCHAR (32) NULL,
    [LABEL_YYYY_QQ]                 VARCHAR (32) NULL,
    [LABEL_YYYY_MM]                 VARCHAR (32) NULL,
    [LABEL_YYYY_WE]                 VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD]              VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD_HH]           VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD_HH24]         VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD_HH_30MI]      VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD_HH24_30MI]    VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD_HH_MI]        VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD_HH24_MI]      VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD_HH_15INT]     VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD_HH24_15INT]   VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD_HH_30INT]     VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD_HH24_30INT]   VARCHAR (32) NULL,
    [LABEL_QQ]                      VARCHAR (32) NULL,
    [LABEL_MM]                      VARCHAR (32) NULL,
    [LABEL_WE]                      VARCHAR (32) NULL,
    [LABEL_DD]                      VARCHAR (32) NULL,
    [LABEL_HH]                      VARCHAR (32) NULL,
    [LABEL_HH24]                    VARCHAR (32) NULL,
    [LABEL_30MI]                    VARCHAR (32) NULL,
    [LABEL_MI]                      VARCHAR (32) NULL,
    [TIME_INTERVAL_15_MINUTE]       VARCHAR (16) NULL,
    [TIME_INTERVAL_30_MINUTE]       VARCHAR (16) NULL,
    [TIME_INTERVAL_60_MINUTE]       VARCHAR (16) NULL,
    [TIME_INTERVAL_15_MINUTE_NUM]   INT          NULL,
    [TIME_INTERVAL_30_MINUTE_NUM]   INT          NULL,
    [TIME_INTERVAL_60_MINUTE_NUM]   INT          NULL,
    [AMPM_INDICATOR]                VARCHAR (4)  NULL,
    [RUNNING_YEAR_NUM]              INT          NULL,
    [RUNNING_QUARTER_NUM]           INT          NULL,
    [RUNNING_MONTH_NUM]             INT          NULL,
    [RUNNING_WEEK_NUM]              INT          NULL,
    [RUNNING_DAY_NUM]               INT          NULL,
    [RUNNING_HOUR_NUM]              INT          NULL,
    [RUNNING_30MIN_NUM]             INT          NULL,
    [GMT_ROW_CREATED_TIME]          DATETIME     NULL,
    [GMT_ROW_UPDATED_TIME]          DATETIME     NULL,
    [PURGE_FLAG]                    NUMERIC (1)  NULL,
    [ID]                            INT          IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_DATE_TIME] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_DATE_TIME] UNIQUE NONCLUSTERED ([DATE_TIME_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[DATE_TIME_backup_2018data]...';


GO
CREATE TABLE [dbo].[DATE_TIME_backup_2018data] (
    [DATE_TIME_KEY]                 INT          NOT NULL,
    [DATE_TIME_30MIN_KEY]           INT          NULL,
    [DATE_TIME_HOUR_KEY]            INT          NOT NULL,
    [DATE_TIME_DAY_KEY]             INT          NOT NULL,
    [DATE_TIME_WEEK_KEY]            INT          NOT NULL,
    [DATE_TIME_MONTH_KEY]           INT          NOT NULL,
    [DATE_TIME_QUARTER_KEY]         INT          NOT NULL,
    [DATE_TIME_YEAR_KEY]            INT          NOT NULL,
    [DATE_TIME_NEXT_KEY]            INT          NOT NULL,
    [DATE_TIME_NEXT_30MIN_KEY]      INT          NULL,
    [DATE_TIME_NEXT_HOUR_KEY]       INT          NOT NULL,
    [DATE_TIME_NEXT_DAY_KEY]        INT          NOT NULL,
    [DATE_TIME_NEXT_WEEK_KEY]       INT          NOT NULL,
    [DATE_TIME_NEXT_MONTH_KEY]      INT          NOT NULL,
    [DATE_TIME_NEXT_QUARTER_KEY]    INT          NOT NULL,
    [DATE_TIME_NEXT_YEAR_KEY]       INT          NOT NULL,
    [CREATE_AUDIT_KEY]              INT          NOT NULL,
    [UPDATE_AUDIT_KEY]              INT          NOT NULL,
    [CAL_DATE]                      DATETIME     NULL,
    [CAL_DATE_STRING]               VARCHAR (64) NULL,
    [CAL_DAY_NUM_IN_WEEK]           SMALLINT     NULL,
    [CAL_DAY_NAME]                  VARCHAR (32) NULL,
    [CAL_DAY_NUM_IN_MONTH]          SMALLINT     NULL,
    [CAL_DAY_NUM_IN_YEAR]           SMALLINT     NULL,
    [CAL_LAST_DAY_IN_WEEK]          NUMERIC (1)  NULL,
    [CAL_LAST_DAY_IN_MONTH]         NUMERIC (1)  NULL,
    [CAL_WEEK_NUM_IN_YEAR]          SMALLINT     NULL,
    [WEEK_YEAR]                     SMALLINT     NULL,
    [CAL_YEAR_WEEK_NUM]             VARCHAR (32) NULL,
    [CAL_WEEK_START_DATE]           DATETIME     NULL,
    [CAL_WEEK_END_DATE]             DATETIME     NULL,
    [CAL_MONTH_NUM_IN_YEAR]         SMALLINT     NULL,
    [CAL_MONTH_NUM_IN_YEAR_STRING]  VARCHAR (32) NULL,
    [CAL_YEAR_MONTH_DAY_NUM]        VARCHAR (32) NULL,
    [CAL_MONTH_NAME]                VARCHAR (32) NULL,
    [CAL_YEAR_MONTH]                VARCHAR (32) NULL,
    [CAL_YEAR_MONTH_NUM]            VARCHAR (32) NULL,
    [CAL_QUARTER_NUM_IN_YEAR]       SMALLINT     NULL,
    [CAL_YEAR_QUARTER]              VARCHAR (32) NULL,
    [CAL_HALF_NUM_IN_YEAR]          SMALLINT     NULL,
    [CAL_YEAR_HALF_YEAR]            VARCHAR (32) NULL,
    [CAL_YEAR_NUM]                  SMALLINT     NULL,
    [CAL_YEAR_STRING]               VARCHAR (32) NULL,
    [CAL_SHORT_YEAR_STRING]         VARCHAR (32) NULL,
    [CAL_HOUR_NUM_IN_DAY]           SMALLINT     NULL,
    [CAL_HOUR_NUM_IN_DAY_STRING]    VARCHAR (32) NULL,
    [CAL_HOUR_24_NUM_IN_DAY]        SMALLINT     NULL,
    [CAL_HOUR_24_NUM_IN_DAY_STRING] VARCHAR (32) NULL,
    [CAL_MINUTE_NUM_IN_HOUR]        SMALLINT     NULL,
    [CAL_30MINUTE_NUM_IN_HOUR]      SMALLINT     NULL,
    [LABEL_YYYY]                    VARCHAR (32) NULL,
    [LABEL_YYYY_QQ]                 VARCHAR (32) NULL,
    [LABEL_YYYY_MM]                 VARCHAR (32) NULL,
    [LABEL_YYYY_WE]                 VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD]              VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD_HH]           VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD_HH24]         VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD_HH_30MI]      VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD_HH24_30MI]    VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD_HH_MI]        VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD_HH24_MI]      VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD_HH_15INT]     VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD_HH24_15INT]   VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD_HH_30INT]     VARCHAR (32) NULL,
    [LABEL_YYYY_MM_DD_HH24_30INT]   VARCHAR (32) NULL,
    [LABEL_QQ]                      VARCHAR (32) NULL,
    [LABEL_MM]                      VARCHAR (32) NULL,
    [LABEL_WE]                      VARCHAR (32) NULL,
    [LABEL_DD]                      VARCHAR (32) NULL,
    [LABEL_HH]                      VARCHAR (32) NULL,
    [LABEL_HH24]                    VARCHAR (32) NULL,
    [LABEL_30MI]                    VARCHAR (32) NULL,
    [LABEL_MI]                      VARCHAR (32) NULL,
    [TIME_INTERVAL_15_MINUTE]       VARCHAR (16) NULL,
    [TIME_INTERVAL_30_MINUTE]       VARCHAR (16) NULL,
    [TIME_INTERVAL_60_MINUTE]       VARCHAR (16) NULL,
    [TIME_INTERVAL_15_MINUTE_NUM]   INT          NULL,
    [TIME_INTERVAL_30_MINUTE_NUM]   INT          NULL,
    [TIME_INTERVAL_60_MINUTE_NUM]   INT          NULL,
    [AMPM_INDICATOR]                VARCHAR (4)  NULL,
    [RUNNING_YEAR_NUM]              INT          NULL,
    [RUNNING_QUARTER_NUM]           INT          NULL,
    [RUNNING_MONTH_NUM]             INT          NULL,
    [RUNNING_WEEK_NUM]              INT          NULL,
    [RUNNING_DAY_NUM]               INT          NULL,
    [RUNNING_HOUR_NUM]              INT          NULL,
    [RUNNING_30MIN_NUM]             INT          NULL,
    [GMT_ROW_CREATED_TIME]          DATETIME     NULL,
    [GMT_ROW_UPDATED_TIME]          DATETIME     NULL,
    [PURGE_FLAG]                    NUMERIC (1)  NULL,
    [ID]                            INT          NOT NULL
);


GO
PRINT N'Creating [dbo].[david]...';


GO
CREATE TABLE [dbo].[david] (
    [Id]      INT          NOT NULL,
    [[name]]] VARCHAR (50) NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[HIREIQ_CATS_IMPORT]...';


GO
CREATE TABLE [dbo].[HIREIQ_CATS_IMPORT] (
    [ID]                NUMERIC (20)   NOT NULL,
    [CANDIDATEFULLNAME] VARCHAR (200)  NOT NULL,
    [CANDIDATEEMAIL]    VARCHAR (200)  NOT NULL,
    [REVIEWINGLINK]     VARCHAR (4000) NOT NULL,
    [COMPLETEDDATE]     VARCHAR (100)  NOT NULL,
    [RISKBAND]          VARCHAR (1000) NOT NULL,
    [QUIZSCORE]         VARCHAR (100)  NOT NULL,
    [WORDSPERMINUTE]    VARCHAR (100)  NOT NULL,
    [ERRORRATE]         VARCHAR (100)  NOT NULL,
    [LANGUAGEIQSCORE]   VARCHAR (100)  NOT NULL,
    [IDAPPLICANT]       NUMERIC (20)   NOT NULL,
    [CREATOR]           NUMERIC (20)   NOT NULL,
    [CREATED]           DATETIME2 (0)  NOT NULL
);


GO
PRINT N'Creating [dbo].[HireIQResult]...';


GO
CREATE TABLE [dbo].[HireIQResult] (
    [ID]                BIGINT         NOT NULL,
    [IDAPPLICANT]       NUMERIC (20)   NOT NULL,
    [CANDIDATEFULLNAME] VARCHAR (200)  NOT NULL,
    [CANDIDATEEMAIL]    VARCHAR (200)  NOT NULL,
    [SCREENID]          BIGINT         NOT NULL,
    [STATE]             VARCHAR (100)  NULL,
    [APPLYURL]          VARCHAR (4000) NOT NULL,
    [OVERALLSCORE]      VARCHAR (100)  NULL,
    [QUALIFIERSSCORE]   VARCHAR (100)  NULL,
    [QUIZSCORE]         VARCHAR (100)  NULL,
    [TYPINGSCORE]       VARCHAR (100)  NULL,
    [LANGUAGEIQSCORE]   VARCHAR (100)  NULL,
    [PHONESCREENSCORE]  VARCHAR (100)  NULL,
    [REVIEWINGLINK]     VARCHAR (4000) NULL,
    [CREATEDDATE]       DATETIME2 (0)  NULL,
    [RISKBAND]          VARCHAR (1000) NULL,
    [WORDSPERMINUTE]    VARCHAR (100)  NULL,
    [ERRORRATE]         VARCHAR (100)  NULL,
    [COMPLETEDDATE]     DATETIME2 (0)  NULL
);


GO
PRINT N'Creating [dbo].[HireIQResultArchived]...';


GO
CREATE TABLE [dbo].[HireIQResultArchived] (
    [ID]                BIGINT         NOT NULL,
    [IDAPPLICANT]       NUMERIC (20)   NOT NULL,
    [CANDIDATEFULLNAME] VARCHAR (200)  NOT NULL,
    [CANDIDATEEMAIL]    VARCHAR (200)  NOT NULL,
    [SCREENID]          BIGINT         NOT NULL,
    [STATE]             VARCHAR (100)  NULL,
    [APPLYURL]          VARCHAR (4000) NOT NULL,
    [OVERALLSCORE]      VARCHAR (100)  NULL,
    [QUALIFIERSSCORE]   VARCHAR (100)  NULL,
    [QUIZSCORE]         VARCHAR (100)  NULL,
    [TYPINGSCORE]       VARCHAR (100)  NULL,
    [LANGUAGEIQSCORE]   VARCHAR (100)  NULL,
    [PHONESCREENSCORE]  VARCHAR (100)  NULL,
    [REVIEWINGLINK]     VARCHAR (4000) NULL,
    [CREATEDDATE]       DATETIME2 (0)  NULL,
    [RISKBAND]          VARCHAR (1000) NULL,
    [WORDSPERMINUTE]    VARCHAR (100)  NULL,
    [ERRORRATE]         VARCHAR (100)  NULL,
    [COMPLETEDDATE]     DATETIME2 (0)  NULL
);


GO
PRINT N'Creating [dbo].[icims_import]...';


GO
CREATE TABLE [dbo].[icims_import] (
    [id]            BIGINT        NOT NULL,
    [PSystemID]     VARCHAR (250) NOT NULL,
    [PExternalID]   VARCHAR (250) NOT NULL,
    [JSystemID]     VARCHAR (250) NOT NULL,
    [JExternalID]   VARCHAR (250) NOT NULL,
    [ClientName]    VARCHAR (250) NOT NULL,
    [FirstName]     VARCHAR (250) NOT NULL,
    [MiddleName]    VARCHAR (250) NOT NULL,
    [LastName]      VARCHAR (250) NOT NULL,
    [Email]         VARCHAR (250) NOT NULL,
    [Number]        VARCHAR (250) NOT NULL,
    [Title]         VARCHAR (250) NOT NULL,
    [DateSubmitted] VARCHAR (250) NOT NULL,
    [Source]        VARCHAR (250) NOT NULL,
    [SourceChannel] VARCHAR (250) NOT NULL,
    [Address]       VARCHAR (250) NOT NULL,
    [Address2]      VARCHAR (250) NOT NULL,
    [City]          VARCHAR (250) NOT NULL,
    [State]         VARCHAR (250) NOT NULL,
    [PostalCode]    VARCHAR (250) NOT NULL,
    [Country]       VARCHAR (250) NOT NULL,
    [Status]        VARCHAR (250) NOT NULL,
    [Bin]           VARCHAR (250) NOT NULL,
    [WorkflowID]    VARCHAR (250) NOT NULL,
    [CreatedDate]   VARCHAR (250) NOT NULL,
    [UpdatedDate]   VARCHAR (250) NOT NULL,
    [applicant_id]  BIGINT        NOT NULL,
    [created]       DATETIME2 (0) NOT NULL
);


GO
PRINT N'Creating [dbo].[icims_person]...';


GO
CREATE TABLE [dbo].[icims_person] (
    [id]                 BIGINT        NOT NULL,
    [icims_import_id]    BIGINT        NOT NULL,
    [PSystemID]          VARCHAR (250) NOT NULL,
    [PExternalID]        VARCHAR (250) NOT NULL,
    [JSystemID]          VARCHAR (250) NOT NULL,
    [JExternalID]        VARCHAR (250) NOT NULL,
    [FirstName]          VARCHAR (250) NOT NULL,
    [MiddleName]         VARCHAR (250) NOT NULL,
    [LastName]           VARCHAR (250) NOT NULL,
    [ApplicatCorpName]   VARCHAR (250) NOT NULL,
    [OverallCatsStatus]  VARCHAR (250) NOT NULL,
    [Email]              VARCHAR (250) NOT NULL,
    [AlternativeEmail]   VARCHAR (250) NOT NULL,
    [WsolEmail]          VARCHAR (250) NOT NULL,
    [CatsAgentId]        VARCHAR (250) NOT NULL,
    [Number]             VARCHAR (250) NOT NULL,
    [ApplicationNumber]  VARCHAR (250) NOT NULL,
    [MobileNumber]       VARCHAR (250) NOT NULL,
    [MobileTermsCond]    VARCHAR (250) NOT NULL,
    [OfficApplStartDate] VARCHAR (250) NOT NULL,
    [TechScanDate]       VARCHAR (250) NOT NULL,
    [BandwidthTier]      VARCHAR (250) NOT NULL,
    [OperatingSystem]    VARCHAR (250) NOT NULL,
    [OsStatus]           VARCHAR (250) NOT NULL,
    [HireIQAssessDate]   VARCHAR (250) NOT NULL,
    [Address]            VARCHAR (250) NOT NULL,
    [Address2]           VARCHAR (250) NOT NULL,
    [City]               VARCHAR (250) NOT NULL,
    [State]              VARCHAR (250) NOT NULL,
    [PostalCode]         VARCHAR (250) NOT NULL,
    [Country]            VARCHAR (250) NOT NULL,
    [PairingStatus]      VARCHAR (8)   NOT NULL,
    [ResumeStatus]       VARCHAR (250) NOT NULL,
    [reportStatus]       VARCHAR (4)   NOT NULL,
    [reportDate]         DATETIME2 (0) NOT NULL
);


GO
PRINT N'Creating [dbo].[WSOL_CATSID_new_SalesForce_AGENTID]...';


GO
CREATE TABLE [dbo].[WSOL_CATSID_new_SalesForce_AGENTID] (
    [SalesforceID]            NTEXT         COLLATE Latin1_General_CS_AS NULL,
    [CatsID]                  INT           NOT NULL,
    [FirstName]               VARCHAR (250) NOT NULL,
    [MiddleName]              VARCHAR (250) NOT NULL,
    [LastName]                VARCHAR (250) NOT NULL,
    [VirtualTalentStatusCode] VARCHAR (50)  NOT NULL
);


GO
PRINT N'Creating [dbo].[WSOL_TB_BACKGROUNDS_ONLINE]...';


GO
CREATE TABLE [dbo].[WSOL_TB_BACKGROUNDS_ONLINE] (
    [id]             BIGINT        IDENTITY (1, 1) NOT NULL,
    [applicantID]    BIGINT        NOT NULL,
    [token]          VARCHAR (255) NULL,
    [orderID]        INT           NULL,
    [status]         VARCHAR (50)  NULL,
    [statusID]       INT           NULL,
    [creationdate]   DATETIME      NULL,
    [completiondate] DATETIME      NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_FILENAMES_FOR_SSIS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_FILENAMES_FOR_SSIS] (
    [SQL_JOB_NAME]         VARCHAR (100) NOT NULL,
    [FILENM]               VARCHAR (50)  NOT NULL,
    [CST_ROW_CREATED_TIME] DATETIME      NULL,
    [ID]                   INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_FILENAMES_FOR_SSIS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_HIREIQ_CATS_IMPORT]...';


GO
CREATE TABLE [dbo].[WSOL_TB_HIREIQ_CATS_IMPORT] (
    [ID]                NUMERIC (20)   NOT NULL,
    [CANDIDATEFULLNAME] VARCHAR (200)  NOT NULL,
    [CANDIDATEEMAIL]    VARCHAR (200)  NOT NULL,
    [REVIEWINGLINK]     VARCHAR (4000) NOT NULL,
    [COMPLETEDDATE]     VARCHAR (100)  NOT NULL,
    [RISKBAND]          VARCHAR (1000) NOT NULL,
    [QUIZSCORE]         VARCHAR (100)  NOT NULL,
    [WORDSPERMINUTE]    VARCHAR (100)  NOT NULL,
    [ERRORRATE]         VARCHAR (100)  NOT NULL,
    [LANGUAGEIQSCORE]   VARCHAR (100)  NOT NULL,
    [IDAPPLICANT]       NUMERIC (20)   NOT NULL,
    [CREATOR]           NUMERIC (20)   NOT NULL,
    [CREATED]           DATETIME2 (0)  NOT NULL
);


GO
PRINT N'Creating [dbo].[WSOL_TB_HIREIQ_RESULT]...';


GO
CREATE TABLE [dbo].[WSOL_TB_HIREIQ_RESULT] (
    [ID]                BIGINT         IDENTITY (1, 1) NOT NULL,
    [IDAPPLICANT]       NUMERIC (20)   NOT NULL,
    [CANDIDATEFULLNAME] VARCHAR (200)  NOT NULL,
    [CANDIDATEEMAIL]    VARCHAR (200)  NOT NULL,
    [SCREENID]          BIGINT         NOT NULL,
    [STATE]             VARCHAR (100)  NULL,
    [APPLYURL]          VARCHAR (4000) NOT NULL,
    [OVERALLSCORE]      VARCHAR (100)  NULL,
    [QUALIFIERSSCORE]   VARCHAR (100)  NULL,
    [QUIZSCORE]         VARCHAR (100)  NULL,
    [TYPINGSCORE]       VARCHAR (100)  NULL,
    [LANGUAGEIQSCORE]   VARCHAR (100)  NULL,
    [PHONESCREENSCORE]  VARCHAR (100)  NULL,
    [REVIEWINGLINK]     VARCHAR (4000) NULL,
    [CREATEDDATE]       DATETIME2 (0)  NULL,
    [RISKBAND]          VARCHAR (1000) NULL,
    [WORDSPERMINUTE]    VARCHAR (100)  NULL,
    [ERRORRATE]         VARCHAR (100)  NULL,
    [COMPLETEDDATE]     DATETIME2 (0)  NULL,
    CONSTRAINT [HireIQResult_p1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_HIREIQ_RESULT_ARCHIVED]...';


GO
CREATE TABLE [dbo].[WSOL_TB_HIREIQ_RESULT_ARCHIVED] (
    [ID]                BIGINT         NOT NULL,
    [IDAPPLICANT]       NUMERIC (20)   NOT NULL,
    [CANDIDATEFULLNAME] VARCHAR (200)  NOT NULL,
    [CANDIDATEEMAIL]    VARCHAR (200)  NOT NULL,
    [SCREENID]          BIGINT         NOT NULL,
    [STATE]             VARCHAR (100)  NULL,
    [APPLYURL]          VARCHAR (4000) NOT NULL,
    [OVERALLSCORE]      VARCHAR (100)  NULL,
    [QUALIFIERSSCORE]   VARCHAR (100)  NULL,
    [QUIZSCORE]         VARCHAR (100)  NULL,
    [TYPINGSCORE]       VARCHAR (100)  NULL,
    [LANGUAGEIQSCORE]   VARCHAR (100)  NULL,
    [PHONESCREENSCORE]  VARCHAR (100)  NULL,
    [REVIEWINGLINK]     VARCHAR (4000) NULL,
    [CREATEDDATE]       DATETIME2 (0)  NULL,
    [RISKBAND]          VARCHAR (1000) NULL,
    [WORDSPERMINUTE]    VARCHAR (100)  NULL,
    [ERRORRATE]         VARCHAR (100)  NULL,
    [COMPLETEDDATE]     DATETIME2 (0)  NULL
);


GO
PRINT N'Creating [dbo].[WSOL_TB_ICIMS_APPLICANT_CATS_DATA]...';


GO
CREATE TABLE [dbo].[WSOL_TB_ICIMS_APPLICANT_CATS_DATA] (
    [id]                 BIGINT        IDENTITY (1, 1) NOT NULL,
    [icims_import_id]    BIGINT        NOT NULL,
    [PSystemID]          VARCHAR (250) NOT NULL,
    [PExternalID]        VARCHAR (250) NOT NULL,
    [JSystemID]          VARCHAR (250) NOT NULL,
    [JExternalID]        VARCHAR (250) NOT NULL,
    [FirstName]          VARCHAR (250) NOT NULL,
    [MiddleName]         VARCHAR (250) NOT NULL,
    [LastName]           VARCHAR (250) NOT NULL,
    [ApplicatCorpName]   VARCHAR (250) NOT NULL,
    [OverallCatsStatus]  VARCHAR (250) NOT NULL,
    [Email]              VARCHAR (250) NOT NULL,
    [AlternativeEmail]   VARCHAR (250) NOT NULL,
    [WsolEmail]          VARCHAR (250) NOT NULL,
    [CatsAgentId]        VARCHAR (250) NOT NULL,
    [Number]             VARCHAR (250) NOT NULL,
    [ApplicationNumber]  VARCHAR (250) NOT NULL,
    [MobileNumber]       VARCHAR (250) NOT NULL,
    [MobileTermsCond]    VARCHAR (250) NOT NULL,
    [OfficApplStartDate] VARCHAR (250) NOT NULL,
    [TechScanDate]       VARCHAR (250) NOT NULL,
    [BandwidthTier]      VARCHAR (250) NOT NULL,
    [OperatingSystem]    VARCHAR (250) NOT NULL,
    [OsStatus]           VARCHAR (250) NOT NULL,
    [HireIQAssessDate]   VARCHAR (250) NOT NULL,
    [Address]            VARCHAR (250) NOT NULL,
    [Address2]           VARCHAR (250) NOT NULL,
    [City]               VARCHAR (250) NOT NULL,
    [State]              VARCHAR (250) NOT NULL,
    [PostalCode]         VARCHAR (250) NOT NULL,
    [Country]            VARCHAR (250) NOT NULL,
    [PairingStatus]      VARCHAR (8)   NOT NULL,
    [ResumeStatus]       VARCHAR (250) NOT NULL,
    [reportStatus]       VARCHAR (4)   NOT NULL,
    [reportDate]         DATETIME2 (0) NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_ICIMS_APPLICANT_DATA]...';


GO
CREATE TABLE [dbo].[WSOL_TB_ICIMS_APPLICANT_DATA] (
    [id]            BIGINT        IDENTITY (1, 1) NOT NULL,
    [PSystemID]     VARCHAR (250) NOT NULL,
    [PExternalID]   VARCHAR (250) NOT NULL,
    [JSystemID]     VARCHAR (250) NOT NULL,
    [JExternalID]   VARCHAR (250) NOT NULL,
    [ClientName]    VARCHAR (250) NOT NULL,
    [FirstName]     VARCHAR (250) NOT NULL,
    [MiddleName]    VARCHAR (250) NOT NULL,
    [LastName]      VARCHAR (250) NOT NULL,
    [Email]         VARCHAR (250) NOT NULL,
    [Number]        VARCHAR (250) NOT NULL,
    [Title]         VARCHAR (250) NOT NULL,
    [DateSubmitted] VARCHAR (250) NOT NULL,
    [Source]        VARCHAR (250) NOT NULL,
    [SourceChannel] VARCHAR (250) NOT NULL,
    [Address]       VARCHAR (250) NOT NULL,
    [Address2]      VARCHAR (250) NOT NULL,
    [City]          VARCHAR (250) NOT NULL,
    [State]         VARCHAR (250) NOT NULL,
    [PostalCode]    VARCHAR (250) NOT NULL,
    [Country]       VARCHAR (250) NOT NULL,
    [Status]        VARCHAR (250) NOT NULL,
    [Bin]           VARCHAR (250) NOT NULL,
    [WorkflowID]    VARCHAR (250) NOT NULL,
    [CreatedDate]   VARCHAR (250) NOT NULL,
    [UpdatedDate]   VARCHAR (250) NOT NULL,
    [applicant_id]  BIGINT        NOT NULL,
    [created]       DATETIME2 (0) NOT NULL,
    PRIMARY KEY CLUSTERED ([id] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORT_ERRORS_FOUND]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORT_ERRORS_FOUND] (
    [TENANT_KEY]     INT            NOT NULL,
    [SUB_GROUP_NAME] VARCHAR (100)  NULL,
    [ERROR_MSG]      VARCHAR (1500) NULL,
    [ID]             INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORT_ERRORS_FOUND] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_APFM_INVOICING]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_APFM_INVOICING] (
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_HOUR]                        VARCHAR (50)    NULL,
    [FF_SKILL_AVAILABILITY]          VARCHAR (500)   NOT NULL,
    [FF_AGENT_NAME]                  VARCHAR (100)   NOT NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [EMPLOYEE_ID]                    VARCHAR (50)    NULL,
    [STD_TENANT_START_TIME]          DATETIME        NULL,
    [BILLABLE_SKILL_Y_N]             CHAR (1)        NULL,
    [LOGGED_IN_DUR]                  DECIMAL (10, 2) NULL,
    [READY_DUR]                      DECIMAL (10, 2) NULL,
    [RING_DUR]                       DECIMAL (10, 2) NULL,
    [ON_CALL_DUR]                    DECIMAL (10, 2) NULL,
    [ON_CALL_SILENT_DUR]             DECIMAL (10, 2) NULL,
    [ACW_DUR]                        DECIMAL (10, 2) NULL,
    [ON_PARK_DUR]                    DECIMAL (10, 2) NULL,
    [ON_VOICEMAIL_DUR]               DECIMAL (10, 2) NULL,
    [ON_PREVIEW_DUR]                 DECIMAL (10, 2) NULL,
    [NRD_ACW_DUR]                    DECIMAL (10, 2) NULL,
    [NRD_TASK_COMP_DUR]              DECIMAL (10, 2) NULL,
    [NRD_SYSTEM_OBC_DUR]             DECIMAL (10, 2) NULL,
    [ON_HOLD_DUR]                    DECIMAL (10, 2) NULL,
    [NRD_TRAINING_DUR]               DECIMAL (10, 2) NULL,
    [NRD_MEETING_DUR]                DECIMAL (10, 2) NULL,
    [NRD_MANDATORY_REPORTING_DUR]    DECIMAL (10, 2) NULL,
    [NRD_MANUAL_OBC_DUR]             DECIMAL (10, 2) NULL,
    [NRD_ACW_AGENT_DUR]              DECIMAL (10, 2) NULL,
    [NRD_OFFLINE_VENDOR_UNPAID_DUR]  DECIMAL (10, 2) NULL,
    [NRD_REASON_4_DUR]               DECIMAL (10, 2) NULL,
    [NOT_READY_BILLABLE]             DECIMAL (10, 2) NULL,
    [NOT_READY_NON_BILLABLE]         DECIMAL (10, 2) NULL,
    [NON_BILLABLE_SKILL_DUR]         DECIMAL (10, 2) NULL,
    [NON_BILLABLE_STATE_REASON_DUR]  DECIMAL (10, 2) NULL,
    [BILLABLE_CLIENT]                DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                     DECIMAL (10, 2) NULL,
    [TOTAL_ACW]                      DECIMAL (10, 2) NULL,
    [AUTHORIZED]                     DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NOT NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NOT NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]             DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (50)    NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME        NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_APFM_INVOICING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_APFM_INVOICING] UNIQUE NONCLUSTERED ([FF_SKILL_AVAILABILITY] ASC, [FF_AGENT_NAME] ASC, [ID_EXT] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_APFM_INVOICING_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_APFM_INVOICING_0_Audit] (
    [FF_DATE]               VARCHAR (50)  NULL,
    [FF_HOUR]               VARCHAR (50)  NULL,
    [FF_SKILL_AVAILABILITY] VARCHAR (500) NULL,
    [FF_AGENT_NAME]         VARCHAR (100) NULL,
    [FF_STATE]              VARCHAR (50)  NULL,
    [FF_REASON_CODE]        VARCHAR (50)  NULL,
    [FF_AGENT_STATE_TIME]   VARCHAR (50)  NULL,
    [FF_TIMESTAMP]          VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]      DATETIME      NOT NULL,
    [SEQNO]                 INT           NOT NULL,
    [FTP_FILE_NAME]         VARCHAR (100) NOT NULL,
    [ID]                    INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_APFM_INVOICING_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_APFM_INVOICING_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_APFM_INVOICING_1] (
    [F1]               VARCHAR (50)  NULL,
    [F2]               VARCHAR (50)  NULL,
    [F3]               VARCHAR (500) NULL,
    [F4]               VARCHAR (100) NULL,
    [F5]               VARCHAR (50)  NULL,
    [F6]               VARCHAR (50)  NULL,
    [F7]               VARCHAR (50)  NULL,
    [F8]               VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME] DATETIME      NOT NULL,
    [SEQNO]            INT           NOT NULL,
    [FTP_FILE_NAME]    VARCHAR (100) NULL,
    [ID]               INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_APFM_INVOICING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_APFM_INVOICING_2]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_APFM_INVOICING_2] (
    [FF1]                 VARCHAR (50)    NULL,
    [FF2]                 VARCHAR (50)    NULL,
    [FF3]                 VARCHAR (500)   NULL,
    [FF4]                 VARCHAR (100)   NULL,
    [FF5]                 VARCHAR (50)    NULL,
    [FF6]                 VARCHAR (50)    NULL,
    [FF7]                 VARCHAR (50)    NULL,
    [FF8]                 VARCHAR (50)    NULL,
    [EVENT_START_TIME]    DATETIME        NULL,
    [EVENT_DURATION_SECS] DECIMAL (10, 2) NULL,
    [SEQNO_ADDED_TIME]    DATETIME        NOT NULL,
    [SEQNO]               INT             NOT NULL,
    [FTP_FILE_NAME]       VARCHAR (100)   NULL,
    [ID]                  INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_APFM_INVOICING_2] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_APFM_INVOICING_3]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_APFM_INVOICING_3] (
    [FF_DATE]                         VARCHAR (50)    NULL,
    [FF_HOUR]                         VARCHAR (50)    NULL,
    [FF_SKILL_AVAILABILITY]           VARCHAR (500)   NULL,
    [FF_AGENT_NAME]                   VARCHAR (100)   NULL,
    [FF_STATE]                        VARCHAR (50)    NULL,
    [FF_REASON_CODE]                  VARCHAR (50)    NULL,
    [FF_AGENT_STATE_TIME]             VARCHAR (50)    NULL,
    [FF_TIMESTAMP]                    VARCHAR (50)    NULL,
    [EVENT_START_TIME]                DATETIME        NULL,
    [EVENT_DURATION_SECS]             DECIMAL (10, 2) NULL,
    [INTERVAL_START_TIME]             DATETIME        NOT NULL,
    [INTERVAL_END_TIME]               DATETIME        NOT NULL,
    [EVENT_DURATION_IN_INTERVAL_SECS] FLOAT (53)      NOT NULL,
    [SEQNO_ADDED_TIME]                DATETIME        NOT NULL,
    [SEQNO]                           INT             NOT NULL,
    [FTP_FILE_NAME]                   VARCHAR (100)   NULL,
    [ID]                              INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_APFM_INVOICING_3] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_APFM_INVOICING_4]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_APFM_INVOICING_4] (
    [FF_DATE]                         VARCHAR (50)    NULL,
    [FF_HOUR]                         VARCHAR (50)    NULL,
    [FF_SKILL_AVAILABILITY]           VARCHAR (500)   NULL,
    [FF_AGENT_NAME]                   VARCHAR (100)   NULL,
    [FF_STATE]                        VARCHAR (50)    NULL,
    [FF_REASON_CODE]                  VARCHAR (50)    NULL,
    [EVENT_DURATION_SECS]             DECIMAL (10, 2) NULL,
    [EVENT_DURATION_IN_INTERVAL_SECS] FLOAT (53)      NULL,
    [SEQNO_ADDED_TIME]                DATETIME        NOT NULL,
    [SEQNO]                           INT             NOT NULL,
    [FTP_FILE_NAME]                   VARCHAR (100)   NULL,
    [RESOURCE_NAME]                   VARCHAR (100)   NULL,
    [DATETIME]                        DATETIME        NULL,
    [HOUR_INTERVAL]                   INT             NULL,
    [EMPLOYEE_ID]                     VARCHAR (50)    NULL,
    [STD_TENANT_START_TIME]           DATETIME        NULL,
    [BILLABLE_SKILL_Y_N]              CHAR (1)        NULL,
    [LOGGED_IN_DUR]                   DECIMAL (10, 2) NULL,
    [READY_DUR]                       DECIMAL (10, 2) NULL,
    [RING_DUR]                        DECIMAL (10, 2) NULL,
    [ON_CALL_DUR]                     DECIMAL (10, 2) NULL,
    [ON_CALL_SILENT_DUR]              DECIMAL (10, 2) NULL,
    [ACW_DUR]                         DECIMAL (10, 2) NULL,
    [ON_PARK_DUR]                     DECIMAL (10, 2) NULL,
    [ON_VOICEMAIL_DUR]                DECIMAL (10, 2) NULL,
    [ON_PREVIEW_DUR]                  DECIMAL (10, 2) NULL,
    [NRD_ACW_DUR]                     DECIMAL (10, 2) NULL,
    [NRD_TASK_COMP_DUR]               DECIMAL (10, 2) NULL,
    [NRD_SYSTEM_OBC_DUR]              DECIMAL (10, 2) NULL,
    [ON_HOLD_DUR]                     DECIMAL (10, 2) NULL,
    [NRD_TRAINING_DUR]                DECIMAL (10, 2) NULL,
    [NRD_MEETING_DUR]                 DECIMAL (10, 2) NULL,
    [NRD_MANDATORY_REPORTING_DUR]     DECIMAL (10, 2) NULL,
    [NRD_MANUAL_OBC_DUR]              DECIMAL (10, 2) NULL,
    [NRD_ACW_AGENT_DUR]               DECIMAL (10, 2) NULL,
    [NRD_OFFLINE_VENDOR_UNPAID_DUR]   DECIMAL (10, 2) NULL,
    [NRD_REASON_4_DUR]                DECIMAL (10, 2) NULL,
    [NOT_READY_BILLABLE]              DECIMAL (10, 2) NULL,
    [NOT_READY_NON_BILLABLE]          DECIMAL (10, 2) NULL,
    [NON_BILLABLE_SKILL_DUR]          DECIMAL (10, 2) NULL,
    [NON_BILLABLE_STATE_REASON_DUR]   DECIMAL (10, 2) NULL,
    [BILLABLE_CLIENT]                 DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                      DECIMAL (10, 2) NULL,
    [TOTAL_ACW]                       DECIMAL (10, 2) NULL,
    [AUTHORIZED]                      DECIMAL (10, 2) NULL,
    [EMAIL]                           VARCHAR (100)   NULL,
    [ID_EXT]                          VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]              VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]  INT             NULL,
    [CAL_DATE]                        DATETIME        NULL,
    [TENANT_KEY]                      INT             NULL,
    [AIR_DAY_TYPE]                    VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]              VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]              DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]              VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]      VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                    VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                  VARCHAR (1)     NULL,
    [READY_FOR_XML]                   VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                    VARCHAR (1)     NULL,
    [INVOICE_ID]                      VARCHAR (50)    NULL,
    [WS_ROW_CREATED_TIME]             DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]             DATETIME        NULL,
    [ID]                              INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_APFM_INVOICING_4] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_APFM_INVOICING_5]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_APFM_INVOICING_5] (
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_HOUR]                        VARCHAR (50)    NULL,
    [FF_SKILL_AVAILABILITY]          VARCHAR (500)   NOT NULL,
    [FF_AGENT_NAME]                  VARCHAR (100)   NOT NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [EMPLOYEE_ID]                    VARCHAR (50)    NULL,
    [STD_TENANT_START_TIME]          DATETIME        NULL,
    [BILLABLE_SKILL_Y_N]             CHAR (1)        NULL,
    [LOGGED_IN_DUR]                  DECIMAL (10, 2) NULL,
    [READY_DUR]                      DECIMAL (10, 2) NULL,
    [RING_DUR]                       DECIMAL (10, 2) NULL,
    [ON_CALL_DUR]                    DECIMAL (10, 2) NULL,
    [ON_CALL_SILENT_DUR]             DECIMAL (10, 2) NULL,
    [ACW_DUR]                        DECIMAL (10, 2) NULL,
    [ON_PARK_DUR]                    DECIMAL (10, 2) NULL,
    [ON_VOICEMAIL_DUR]               DECIMAL (10, 2) NULL,
    [ON_PREVIEW_DUR]                 DECIMAL (10, 2) NULL,
    [NRD_ACW_DUR]                    DECIMAL (10, 2) NULL,
    [NRD_TASK_COMP_DUR]              DECIMAL (10, 2) NULL,
    [NRD_SYSTEM_OBC_DUR]             DECIMAL (10, 2) NULL,
    [ON_HOLD_DUR]                    DECIMAL (10, 2) NULL,
    [NRD_TRAINING_DUR]               DECIMAL (10, 2) NULL,
    [NRD_MEETING_DUR]                DECIMAL (10, 2) NULL,
    [NRD_MANDATORY_REPORTING_DUR]    DECIMAL (10, 2) NULL,
    [NRD_MANUAL_OBC_DUR]             DECIMAL (10, 2) NULL,
    [NRD_ACW_AGENT_DUR]              DECIMAL (10, 2) NULL,
    [NRD_OFFLINE_VENDOR_UNPAID_DUR]  DECIMAL (10, 2) NULL,
    [NRD_REASON_4_DUR]               DECIMAL (10, 2) NULL,
    [NOT_READY_BILLABLE]             DECIMAL (10, 2) NULL,
    [NOT_READY_NON_BILLABLE]         DECIMAL (10, 2) NULL,
    [NON_BILLABLE_SKILL_DUR]         DECIMAL (10, 2) NULL,
    [NON_BILLABLE_STATE_REASON_DUR]  DECIMAL (10, 2) NULL,
    [BILLABLE_CLIENT]                DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                     DECIMAL (10, 2) NULL,
    [TOTAL_ACW]                      DECIMAL (10, 2) NULL,
    [AUTHORIZED]                     DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NOT NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NOT NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]             DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (50)    NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME        NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_APFM_INVOICING_5] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_APFM_INVOICING_6]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_APFM_INVOICING_6] (
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_HOUR]                        VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                  VARCHAR (100)   NOT NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [EMPLOYEE_ID]                    VARCHAR (50)    NULL,
    [STD_TENANT_START_TIME]          DATETIME        NULL,
    [LOGGED_IN_DUR]                  DECIMAL (10, 2) NULL,
    [READY_DUR]                      DECIMAL (10, 2) NULL,
    [RING_DUR]                       DECIMAL (10, 2) NULL,
    [ON_CALL_DUR]                    DECIMAL (10, 2) NULL,
    [ON_CALL_SILENT_DUR]             DECIMAL (10, 2) NULL,
    [ACW_DUR]                        DECIMAL (10, 2) NULL,
    [ON_PARK_DUR]                    DECIMAL (10, 2) NULL,
    [ON_VOICEMAIL_DUR]               DECIMAL (10, 2) NULL,
    [ON_PREVIEW_DUR]                 DECIMAL (10, 2) NULL,
    [NRD_ACW_DUR]                    DECIMAL (10, 2) NULL,
    [NRD_TASK_COMP_DUR]              DECIMAL (10, 2) NULL,
    [NRD_SYSTEM_OBC_DUR]             DECIMAL (10, 2) NULL,
    [ON_HOLD_DUR]                    DECIMAL (10, 2) NULL,
    [NRD_TRAINING_DUR]               DECIMAL (10, 2) NULL,
    [NRD_MEETING_DUR]                DECIMAL (10, 2) NULL,
    [NRD_MANDATORY_REPORTING_DUR]    DECIMAL (10, 2) NULL,
    [NRD_MANUAL_OBC_DUR]             DECIMAL (10, 2) NULL,
    [NRD_ACW_AGENT_DUR]              DECIMAL (10, 2) NULL,
    [NRD_OFFLINE_VENDOR_UNPAID_DUR]  DECIMAL (10, 2) NULL,
    [NRD_REASON_4_DUR]               DECIMAL (10, 2) NULL,
    [NOT_READY_BILLABLE]             DECIMAL (10, 2) NULL,
    [NOT_READY_NON_BILLABLE]         DECIMAL (10, 2) NULL,
    [NON_BILLABLE_SKILL_DUR]         DECIMAL (10, 2) NULL,
    [NON_BILLABLE_STATE_REASON_DUR]  DECIMAL (10, 2) NULL,
    [BILLABLE_CLIENT]                DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                     DECIMAL (10, 2) NULL,
    [TOTAL_ACW]                      DECIMAL (10, 2) NULL,
    [AUTHORIZED]                     DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NOT NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NOT NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]             DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (50)    NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME        NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_APFM_INVOICING_6] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_APFM_INVOICING_BAD_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_APFM_INVOICING_BAD_1] (
    [BAD_IMPORTS_NO]        TINYINT       NOT NULL,
    [BAD_IMPORTS_FILE_TYPE] VARCHAR (3)   NULL,
    [WS_ROW_CREATED_TIME]   DATETIME      NOT NULL,
    [FF_DATE]               VARCHAR (50)  NULL,
    [FF_HOUR]               VARCHAR (50)  NULL,
    [FF_SKILL_AVAILABILITY] VARCHAR (500) NULL,
    [FF_AGENT_NAME]         VARCHAR (100) NULL,
    [FF_STATE]              VARCHAR (50)  NULL,
    [FF_REASON_CODE]        VARCHAR (50)  NULL,
    [FF_AGENT_STATE_TIME]   VARCHAR (50)  NULL,
    [FF_TIMESTAMP]          VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]      DATETIME      NOT NULL,
    [SEQNO]                 INT           NOT NULL,
    [FTP_FILE_NAME]         VARCHAR (100) NOT NULL,
    [ID]                    INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_APFM_INVOICING_BAD_1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_APFM_INVOICING_BAD_1] UNIQUE NONCLUSTERED ([BAD_IMPORTS_NO] ASC, [WS_ROW_CREATED_TIME] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_APFM_UV_ANT_AIA]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_APFM_UV_ANT_AIA] (
    [PLATFORM]                           VARCHAR (50)    NULL,
    [STATUS]                             VARCHAR (50)    NULL,
    [INVOICE_MAP_KEY]                    VARCHAR (50)    NOT NULL,
    [FIELD_NAME]                         VARCHAR (50)    NULL,
    [SCHEDULER_PROJECT_ID]               VARCHAR (50)    NULL,
    [SCHEDULER_ACL_NAME]                 VARCHAR (50)    NOT NULL,
    [ACD_ID_EXTENSION]                   VARCHAR (50)    NOT NULL,
    [OFFICIAL_WSOL_CLIENT_ID]            VARCHAR (50)    NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]          VARCHAR (50)    NULL,
    [OFFICIAL_ACD_CLIENT_ID]             VARCHAR (50)    NOT NULL,
    [OFFICIAL_ACD_CLIENT_NAME]           VARCHAR (50)    NULL,
    [PRIMARY_PROJECT_MANAGER_ID]         VARCHAR (150)   NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID]  VARCHAR (150)   NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]        VARCHAR (150)   NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]         VARCHAR (150)   NULL,
    [INVOICE_SYSTEM_ID]                  VARCHAR (50)    NOT NULL,
    [HOLIDAY_INVOICE_ID]                 VARCHAR (50)    NOT NULL,
    [HOLIDAY]                            VARCHAR (50)    NOT NULL,
    [FILE_FORMAT_OF_PUSH]                VARCHAR (50)    NULL,
    [AGENT_PREPARATION_INVOICE_ID]       VARCHAR (50)    NULL,
    [NEW_ACL]                            VARCHAR (50)    NULL,
    [CURRENT_CATS]                       VARCHAR (50)    NULL,
    [CATS_ID]                            VARCHAR (50)    NULL,
    [PATS_ID]                            VARCHAR (50)    NULL,
    [SMART_ELIGIBLE]                     VARCHAR (50)    NULL,
    [SMART_TIER_1]                       VARCHAR (50)    NULL,
    [SMART_TIER_2]                       VARCHAR (50)    NULL,
    [SMART_TIER_3]                       VARCHAR (50)    NULL,
    [INTERVAL]                           VARCHAR (50)    NULL,
    [DATE]                               VARCHAR (50)    NULL,
    [HOD_INTERVAL]                       VARCHAR (50)    NULL,
    [AU_DK_LOGGED_IN_DURATION]           INT             NULL,
    [AU_DK_AVAILABLE_DURATION]           INT             NULL,
    [AU_DK_TALK_DURATION]                INT             NULL,
    [AU_DK_IB_TALK_DURATION]             INT             NULL,
    [AU_DK_OB_TALK_DURATION]             INT             NULL,
    [AU_DK_CONVENTIONAL_ACW]             INT             NULL,
    [AU_DK_NR_DURATION]                  INT             NULL,
    [AU_DK_PSEUDO_PRODUCTIVE_DURATION]   INT             NULL,
    [AU_DK_ADJUSTED_NR_DURATION]         INT             NULL,
    [AU_DK_TOTAL_PRODUCTIVE_DURATION]    INT             NULL,
    [AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] INT             NULL,
    [AU_DK_XFER_COUNT]                   INT             NULL,
    [AU_DK_HOLD_COUNT]                   INT             NULL,
    [AU_DK_CONFERENCE_COUNT]             INT             NULL,
    [AU_DK_CONSULT_COUNT]                INT             NULL,
    [AU_DK_PUP_COUNT]                    INT             NULL,
    [AU_DK_OFFERED_COUNT]                INT             NULL,
    [AU_DK_HANDLED_COUNT]                INT             NULL,
    [AU_DK_IB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_OB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_RONA_COUNT]                   INT             NULL,
    [AU_DK_AWR_COUNT]                    INT             NULL,
    [MINIMUM_GUARANTEE]                  DECIMAL (10, 2) NULL,
    [AUTHORIZED_TO_INVOICE]              DECIMAL (10, 2) NULL,
    [WEEK_ENDING_DATE]                   VARCHAR (10)    NULL,
    [PAY_CYCLE_CLOSURE_DATE]             VARCHAR (10)    NULL,
    [FTP_FILE_NAME]                      VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]     INT             NOT NULL,
    [CAL_DATE]                           DATETIME        NULL,
    [TENANT_KEY]                         INT             NOT NULL,
    [AIR_DAY_TYPE]                       VARCHAR (1)     NOT NULL,
    [AIR_ACW_FONT_COLOR]                 VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]                 DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                 VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]         VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                       VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                     VARCHAR (1)     NULL,
    [READY_FOR_XML]                      VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                       VARCHAR (1)     NULL,
    [INVOICE_ID]                         VARCHAR (50)    NULL,
    [RESOURCE_NAME]                      VARCHAR (100)   NULL,
    [AIRITKDUR]                          INT             NULL,
    [AIRIACDUR]                          INT             NULL,
    [WS_ROW_CREATED_TIME]                DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                DATETIME        NULL,
    [ID]                                 INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_APFM_UV_ANT_AIA] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_APFM_UV_ANT_AIA] UNIQUE NONCLUSTERED ([INVOICE_MAP_KEY] ASC, [SCHEDULER_ACL_NAME] ASC, [ACD_ID_EXTENSION] ASC, [HOLIDAY] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [TENANT_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING] (
    [FF_LOGIN_ID]                     VARCHAR (50)    NULL,
    [FF_AGENT_FIRST_NAME]             VARCHAR (50)    NULL,
    [FF_AGENT_LAST_NAME]              VARCHAR (50)    NULL,
    [FF_TEAM]                         VARCHAR (50)    NULL,
    [EVENT_DURATION_IN_INTERVAL_SECS] FLOAT (53)      NULL,
    [SEQNO_ADDED_TIME]                DATETIME        NOT NULL,
    [SEQNO]                           INT             NOT NULL,
    [FTP_FILE_NAME]                   VARCHAR (100)   NULL,
    [RESOURCE_NAME]                   VARCHAR (100)   NULL,
    [DATETIME]                        DATETIME        NULL,
    [HOUR_INTERVAL]                   INT             NULL,
    [EMPLOYEE_ID]                     VARCHAR (50)    NULL,
    [STD_TENANT_START_TIME]           DATETIME        NULL,
    [INBOUND_CALLS]                   INT             NULL,
    [OUTBOUND_CALLS]                  INT             NULL,
    [TOTAL_CALLS]                     INT             NULL,
    [LOGGED_IN_TIME]                  DECIMAL (10, 2) NULL,
    [READY_TIME]                      DECIMAL (10, 2) NULL,
    [INBOUND_VOICE_TIME]              DECIMAL (10, 2) NULL,
    [OUTBOUND_VOICE_TIME]             DECIMAL (10, 2) NULL,
    [ACW_VOICE_TIME]                  DECIMAL (10, 2) NULL,
    [NOT_READY_TIME]                  DECIMAL (10, 2) NULL,
    [NOT_READY_BREAK_TIME]            DECIMAL (10, 2) NULL,
    [NOT_READY_NO_ANSWER_TIME]        DECIMAL (10, 2) NULL,
    [SUPERVISION_TIME]                DECIMAL (10, 2) NULL,
    [UNKNOWN_TIME]                    DECIMAL (10, 2) NULL,
    [TOTAL_TALK_TIME]                 DECIMAL (10, 2) NULL,
    [TOTAL_NOT_READY_TIME]            DECIMAL (10, 2) NULL,
    [AUTHORIZED_ACW_TIME]             DECIMAL (10, 2) NULL,
    [CPROD]                           DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]               DECIMAL (10, 2) NULL,
    [AUTHORIZED]                      DECIMAL (10, 2) NULL,
    [EMAIL]                           VARCHAR (100)   NULL,
    [ID_EXT]                          VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]              VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]  INT             NULL,
    [CAL_DATE]                        DATETIME        NULL,
    [TENANT_KEY]                      INT             NULL,
    [AIR_DAY_TYPE]                    VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]              VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]           DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]              VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]      VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                    VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                  VARCHAR (1)     NULL,
    [READY_FOR_XML]                   VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                    VARCHAR (1)     NULL,
    [INVOICE_ID]                      VARCHAR (500)   NULL,
    [WS_ROW_CREATED_TIME]             DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]             DATETIME        NULL,
    [ID]                              INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING] UNIQUE NONCLUSTERED ([FF_LOGIN_ID] ASC, [FF_AGENT_FIRST_NAME] ASC, [FF_AGENT_LAST_NAME] ASC, [FF_TEAM] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [ID_EXT] ASC, [INVOICE_ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_0_Audit] (
    [FF_TIME]             VARCHAR (50)  NULL,
    [FF_LOGIN_ID]         VARCHAR (50)  NULL,
    [FF_AGENT_FIRST_NAME] VARCHAR (50)  NULL,
    [FF_AGENT_LAST_NAME]  VARCHAR (50)  NULL,
    [FF_TEAM]             VARCHAR (50)  NULL,
    [FF_ACTIVITY]         VARCHAR (50)  NULL,
    [FF_DURATION]         VARCHAR (50)  NULL,
    [FF_DETAIL]           VARCHAR (50)  NULL,
    [FF_SERVICE]          VARCHAR (200) NULL,
    [FF_MEDIA_TYPE]       VARCHAR (50)  NULL,
    [FF_GLOBAL_ID]        VARCHAR (100) NULL,
    [SEQNO_ADDED_TIME]    DATETIME      NOT NULL,
    [SEQNO]               INT           NOT NULL,
    [FTP_FILE_NAME]       VARCHAR (100) NOT NULL,
    [ID]                  INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_0_Audit] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1] (
    [F1]                  VARCHAR (50)    NULL,
    [F2]                  VARCHAR (50)    NULL,
    [F3]                  VARCHAR (50)    NULL,
    [F4]                  VARCHAR (50)    NULL,
    [F5]                  VARCHAR (50)    NULL,
    [F6]                  VARCHAR (50)    NULL,
    [F7]                  VARCHAR (50)    NULL,
    [F8]                  VARCHAR (50)    NULL,
    [F9]                  VARCHAR (200)   NULL,
    [F10]                 VARCHAR (50)    NULL,
    [F11]                 VARCHAR (100)   NULL,
    [EVENT_START_TIME]    DATETIME        NULL,
    [EVENT_DURATION_SECS] DECIMAL (10, 2) NULL,
    [EVENT_END_TIME]      DATETIME        NULL,
    [SEQNO_ADDED_TIME]    DATETIME        NOT NULL,
    [SEQNO]               INT             NOT NULL,
    [FTP_FILE_NAME]       VARCHAR (100)   NOT NULL,
    [ID]                  INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC] (
    [F1]               VARCHAR (50)  NULL,
    [F2]               VARCHAR (50)  NULL,
    [F3]               VARCHAR (50)  NULL,
    [F4]               VARCHAR (50)  NULL,
    [F5]               VARCHAR (50)  NULL,
    [F6]               VARCHAR (50)  NULL,
    [F7]               VARCHAR (50)  NULL,
    [F8]               VARCHAR (50)  NULL,
    [F9]               VARCHAR (200) NULL,
    [F10]              VARCHAR (50)  NULL,
    [F11]              VARCHAR (100) NULL,
    [DATETIME]         DATETIME      NULL,
    [INBOUND_CALL]     INT           NULL,
    [OUTBOUND_CALL]    INT           NULL,
    [SEQNO_ADDED_TIME] DATETIME      NOT NULL,
    [SEQNO]            INT           NOT NULL,
    [FTP_FILE_NAME]    VARCHAR (100) NOT NULL,
    [ID]               INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC2]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC2] (
    [LOGIN_ID]         VARCHAR (50)  NULL,
    [AGENT_FIRST_NAME] VARCHAR (50)  NULL,
    [AGENT_LAST_NAME]  VARCHAR (50)  NULL,
    [TEAM]             VARCHAR (50)  NULL,
    [MEDIA_TYPE]       VARCHAR (50)  NULL,
    [GLOBAL_ID]        VARCHAR (100) NULL,
    [DATETIME]         DATETIME      NULL,
    [INBOUND_CALLS]    INT           NULL,
    [OUTBOUND_CALLS]   INT           NULL,
    [SEQNO_ADDED_TIME] DATETIME      NOT NULL,
    [SEQNO]            INT           NOT NULL,
    [FTP_FILE_NAME]    VARCHAR (100) NOT NULL,
    [ID]               INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC2] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC3]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC3] (
    [LOGIN_ID]         VARCHAR (50)  NULL,
    [AGENT_FIRST_NAME] VARCHAR (50)  NULL,
    [AGENT_LAST_NAME]  VARCHAR (50)  NULL,
    [TEAM]             VARCHAR (50)  NULL,
    [MEDIA_TYPE]       VARCHAR (50)  NULL,
    [DATETIME]         DATETIME      NULL,
    [INBOUND_CALLS]    INT           NULL,
    [OUTBOUND_CALLS]   INT           NULL,
    [SEQNO_ADDED_TIME] DATETIME      NOT NULL,
    [SEQNO]            INT           NOT NULL,
    [FTP_FILE_NAME]    VARCHAR (100) NOT NULL,
    [ID]               INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC3] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_PC]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_PC] (
    [F1]                  VARCHAR (50)    NULL,
    [F2]                  VARCHAR (50)    NULL,
    [F3]                  VARCHAR (50)    NULL,
    [F4]                  VARCHAR (50)    NULL,
    [F5]                  VARCHAR (50)    NULL,
    [F6]                  VARCHAR (50)    NULL,
    [F7]                  VARCHAR (50)    NULL,
    [F8]                  VARCHAR (50)    NULL,
    [F9]                  VARCHAR (200)   NULL,
    [F10]                 VARCHAR (50)    NULL,
    [F11]                 VARCHAR (100)   NULL,
    [EVENT_START_TIME]    DATETIME        NULL,
    [EVENT_DURATION_SECS] DECIMAL (10, 2) NULL,
    [EVENT_END_TIME]      DATETIME        NULL,
    [SEQNO_ADDED_TIME]    DATETIME        NOT NULL,
    [SEQNO]               INT             NOT NULL,
    [FTP_FILE_NAME]       VARCHAR (100)   NOT NULL,
    [PARENT_SEQNO]        INT             NULL,
    [ID]                  INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_PC] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2] (
    [FF_TIME]                         VARCHAR (50)    NULL,
    [FF_LOGIN_ID]                     VARCHAR (50)    NULL,
    [FF_AGENT_FIRST_NAME]             VARCHAR (50)    NULL,
    [FF_AGENT_LAST_NAME]              VARCHAR (50)    NULL,
    [FF_TEAM]                         VARCHAR (50)    NULL,
    [FF_ACTIVITY]                     VARCHAR (50)    NULL,
    [FF_DURATION]                     VARCHAR (50)    NULL,
    [FF_DETAIL]                       VARCHAR (50)    NULL,
    [FF_SERVICE]                      VARCHAR (200)   NULL,
    [FF_MEDIA_TYPE]                   VARCHAR (50)    NULL,
    [FF_GLOBAL_ID]                    VARCHAR (100)   NULL,
    [EVENT_START_TIME]                DATETIME        NULL,
    [EVENT_DURATION_SECS]             DECIMAL (10, 2) NULL,
    [EVENT_END_TIME]                  DATETIME        NULL,
    [INTERVAL_START_TIME]             DATETIME        NOT NULL,
    [INTERVAL_END_TIME]               DATETIME        NOT NULL,
    [EVENT_DURATION_IN_INTERVAL_SECS] FLOAT (53)      NOT NULL,
    [SEQNO_ADDED_TIME]                DATETIME        NOT NULL,
    [SEQNO]                           INT             NOT NULL,
    [FTP_FILE_NAME]                   VARCHAR (100)   NULL,
    [ID]                              INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3] (
    [FF_LOGIN_ID]                     VARCHAR (50)    NULL,
    [FF_AGENT_FIRST_NAME]             VARCHAR (50)    NULL,
    [FF_AGENT_LAST_NAME]              VARCHAR (50)    NULL,
    [FF_TEAM]                         VARCHAR (50)    NULL,
    [FF_ACTIVITY]                     VARCHAR (50)    NULL,
    [FF_DETAIL]                       VARCHAR (50)    NULL,
    [FF_MEDIA_TYPE]                   VARCHAR (50)    NULL,
    [EVENT_DURATION_IN_INTERVAL_SECS] FLOAT (53)      NULL,
    [SEQNO_ADDED_TIME]                DATETIME        NOT NULL,
    [SEQNO]                           INT             NOT NULL,
    [FTP_FILE_NAME]                   VARCHAR (100)   NULL,
    [RESOURCE_NAME]                   VARCHAR (100)   NULL,
    [DATETIME]                        DATETIME        NULL,
    [HOUR_INTERVAL]                   INT             NULL,
    [EMPLOYEE_ID]                     VARCHAR (50)    NULL,
    [STD_TENANT_START_TIME]           DATETIME        NULL,
    [LOGGED_IN_TIME]                  DECIMAL (10, 2) NULL,
    [READY_TIME]                      DECIMAL (10, 2) NULL,
    [INBOUND_VOICE_TIME]              DECIMAL (10, 2) NULL,
    [OUTBOUND_VOICE_TIME]             DECIMAL (10, 2) NULL,
    [ACW_VOICE_TIME]                  DECIMAL (10, 2) NULL,
    [NOT_READY_TIME]                  DECIMAL (10, 2) NULL,
    [NOT_READY_BREAK_TIME]            DECIMAL (10, 2) NULL,
    [NOT_READY_NO_ANSWER_TIME]        DECIMAL (10, 2) NULL,
    [SUPERVISION_TIME]                DECIMAL (10, 2) NULL,
    [UNKNOWN_TIME]                    DECIMAL (10, 2) NULL,
    [WS_ROW_CREATED_TIME]             DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]             DATETIME        NULL,
    [ID]                              INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4] (
    [FF_LOGIN_ID]                     VARCHAR (50)    NULL,
    [FF_AGENT_FIRST_NAME]             VARCHAR (50)    NULL,
    [FF_AGENT_LAST_NAME]              VARCHAR (50)    NULL,
    [FF_TEAM]                         VARCHAR (50)    NULL,
    [EVENT_DURATION_IN_INTERVAL_SECS] FLOAT (53)      NULL,
    [SEQNO_ADDED_TIME]                DATETIME        NOT NULL,
    [SEQNO]                           INT             NOT NULL,
    [FTP_FILE_NAME]                   VARCHAR (100)   NULL,
    [RESOURCE_NAME]                   VARCHAR (100)   NULL,
    [DATETIME]                        DATETIME        NULL,
    [HOUR_INTERVAL]                   INT             NULL,
    [EMPLOYEE_ID]                     VARCHAR (50)    NULL,
    [STD_TENANT_START_TIME]           DATETIME        NULL,
    [INBOUND_CALLS]                   INT             NULL,
    [OUTBOUND_CALLS]                  INT             NULL,
    [TOTAL_CALLS]                     INT             NULL,
    [LOGGED_IN_TIME]                  DECIMAL (10, 2) NULL,
    [READY_TIME]                      DECIMAL (10, 2) NULL,
    [INBOUND_VOICE_TIME]              DECIMAL (10, 2) NULL,
    [OUTBOUND_VOICE_TIME]             DECIMAL (10, 2) NULL,
    [ACW_VOICE_TIME]                  DECIMAL (10, 2) NULL,
    [NOT_READY_TIME]                  DECIMAL (10, 2) NULL,
    [NOT_READY_BREAK_TIME]            DECIMAL (10, 2) NULL,
    [NOT_READY_NO_ANSWER_TIME]        DECIMAL (10, 2) NULL,
    [SUPERVISION_TIME]                DECIMAL (10, 2) NULL,
    [UNKNOWN_TIME]                    DECIMAL (10, 2) NULL,
    [TOTAL_TALK_TIME]                 DECIMAL (10, 2) NULL,
    [TOTAL_NOT_READY_TIME]            DECIMAL (10, 2) NULL,
    [AUTHORIZED_ACW_TIME]             DECIMAL (10, 2) NULL,
    [CPROD]                           DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]               DECIMAL (10, 2) NULL,
    [AUTHORIZED]                      DECIMAL (10, 2) NULL,
    [EMAIL]                           VARCHAR (100)   NULL,
    [ID_EXT]                          VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]              VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]  INT             NULL,
    [CAL_DATE]                        DATETIME        NULL,
    [TENANT_KEY]                      INT             NULL,
    [AIR_DAY_TYPE]                    VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]              VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]           DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]              VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]      VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                    VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                  VARCHAR (1)     NULL,
    [READY_FOR_XML]                   VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                    VARCHAR (1)     NULL,
    [INVOICE_ID]                      VARCHAR (500)   NULL,
    [WS_ROW_CREATED_TIME]             DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]             DATETIME        NULL,
    [ID]                              INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD] (
    [BAD_IMPORTS_CODE]                VARCHAR (3)     NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]           VARCHAR (3)     NULL,
    [WS_ROW_CREATED_TIME]             DATETIME        NOT NULL,
    [FF_TIME]                         VARCHAR (50)    NULL,
    [FF_LOGIN_ID]                     VARCHAR (50)    NULL,
    [FF_AGENT_FIRST_NAME]             VARCHAR (50)    NULL,
    [FF_AGENT_LAST_NAME]              VARCHAR (50)    NULL,
    [FF_TEAM]                         VARCHAR (50)    NULL,
    [FF_ACTIVITY]                     VARCHAR (50)    NULL,
    [FF_DURATION]                     VARCHAR (50)    NULL,
    [FF_DETAIL]                       VARCHAR (50)    NULL,
    [FF_SERVICE]                      VARCHAR (200)   NULL,
    [FF_MEDIA_TYPE]                   VARCHAR (50)    NULL,
    [FF_GLOBAL_ID]                    VARCHAR (100)   NULL,
    [EVENT_START_TIME]                DATETIME        NULL,
    [EVENT_DURATION_SECS]             DECIMAL (10, 2) NULL,
    [EVENT_END_TIME]                  DATETIME        NULL,
    [INTERVAL_START_TIME]             DATETIME        NULL,
    [INTERVAL_END_TIME]               DATETIME        NULL,
    [EVENT_DURATION_IN_INTERVAL_SECS] FLOAT (53)      NULL,
    [SEQNO_ADDED_TIME]                DATETIME        NOT NULL,
    [SEQNO]                           INT             NOT NULL,
    [FTP_FILE_NAME]                   VARCHAR (100)   NOT NULL,
    [PARENT_SEQNO]                    INT             NULL,
    [ID]                              INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD] UNIQUE NONCLUSTERED ([BAD_IMPORTS_CODE] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC, [WS_ROW_CREATED_TIME] ASC, [INTERVAL_START_TIME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_AIA_STATIC_DEFAULTS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_AIA_STATIC_DEFAULTS] (
    [PLATFORM]                          VARCHAR (50)  NULL,
    [STATUS]                            VARCHAR (50)  NULL,
    [INVOICE_MAP_KEY]                   VARCHAR (50)  NULL,
    [FIELD_NAME]                        VARCHAR (50)  NULL,
    [SCHEDULER_PROJECT_ID]              VARCHAR (50)  NULL,
    [SCHEDULER_ACL_NAME]                VARCHAR (50)  NULL,
    [ACD_ID_EXTENSION]                  VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_ID]           VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]         VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_ID]            VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_NAME]          VARCHAR (50)  NULL,
    [PRIMARY_PROJECT_MANAGER_ID]        VARCHAR (150) NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID] VARCHAR (150) NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]       VARCHAR (150) NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]        VARCHAR (150) NULL,
    [INVOICE_SYSTEM_ID]                 VARCHAR (50)  NULL,
    [HOLIDAY_INVOICE_ID]                VARCHAR (50)  NULL,
    [HOLIDAY]                           VARCHAR (50)  NULL,
    [FILE_FORMAT_OF_PUSH]               VARCHAR (50)  NULL,
    [AGENT_PREPARATION_INVOICE_ID]      VARCHAR (50)  NULL,
    [NEW_ACL]                           VARCHAR (50)  NULL,
    [CURRENT_CATS]                      VARCHAR (50)  NULL,
    [CATS_ID]                           VARCHAR (50)  NULL,
    [PATS_ID]                           VARCHAR (50)  NULL,
    [SMART_ELIGIBLE]                    VARCHAR (50)  NULL,
    [SMART_TIER_1]                      VARCHAR (50)  NULL,
    [SMART_TIER_2]                      VARCHAR (50)  NULL,
    [SMART_TIER_3]                      VARCHAR (50)  NULL,
    [INTERVAL]                          VARCHAR (50)  NULL,
    [TENANT_KEY]                        INT           NULL,
    [WS_ROW_CREATED_TIME]               DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]               DATETIME      NULL,
    [ID]                                INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_AIA_STATIC_DEFAULTS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_INVOICE_GROUPS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_INVOICE_GROUPS] (
    [SCHEDULER_ACL_NAME]               VARCHAR (100)  NOT NULL,
    [ID_EXT]                           VARCHAR (3)    NOT NULL,
    [TENANT_KEY]                       INT            NOT NULL,
    [include_in_cas]                   VARCHAR (1)    NOT NULL,
    [ready_for_xml]                    VARCHAR (1)    NULL,
    [has_holidays]                     VARCHAR (1)    NOT NULL,
    [show_id_exts]                     VARCHAR (1)    NOT NULL,
    [include_in_universe_agent_invo]   VARCHAR (1)    NULL,
    [include_in_wsinet_usage]          VARCHAR (1)    NULL,
    [include_in_wslive_billing]        VARCHAR (1)    NULL,
    [include_in_olympics]              VARCHAR (1)    NULL,
    [include_in_novatel]               VARCHAR (1)    NULL,
    [include_in_wsol_exports]          VARCHAR (1)    NULL,
    [min_guarantee_minutes]            DECIMAL (6, 3) NULL,
    [min_guarantee_type]               VARCHAR (50)   NULL,
    [authorized_to_invoice_type]       VARCHAR (50)   NULL,
    [min_guarantee_flds]               VARCHAR (150)  NULL,
    [minguar_form]                     VARCHAR (500)  NULL,
    [invoice_formula]                  VARCHAR (500)  NULL,
    [pay_rate_standard]                DECIMAL (6, 3) NULL,
    [pay_rate_holiday]                 DECIMAL (6, 3) NULL,
    [is_client_team]                   VARCHAR (1)    NULL,
    [is_production_team]               VARCHAR (1)    NULL,
    [client_billing_master_group_name] VARCHAR (150)  NULL,
    [DLY_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [MTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WS_START_TIME]                    DATETIME       NULL,
    [WS_END_TIME]                      DATETIME       NULL,
    [WS_ROW_CREATED_TIME]              DATETIME       NULL,
    [WS_ROW_UPDATED_TIME]              DATETIME       NULL,
    [ID]                               INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_INVOICE_GROUPS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_INVOICE_HOLIDAYS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_INVOICE_HOLIDAYS] (
    [HOLIDAY_DATE] SMALLDATETIME NOT NULL,
    [ID]           INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICE_HOLIDAYS] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICE_HOLIDAYS] UNIQUE NONCLUSTERED ([HOLIDAY_DATE] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_INVOICE_HOLIDAYS_ADDL]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_INVOICE_HOLIDAYS_ADDL] (
    [HOLIDAY_DATE] DATETIME    NOT NULL,
    [ID_EXT]       VARCHAR (3) NOT NULL,
    [ID]           INT         IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_INVOICE_HOLIDAYS_ADDL] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA] (
    [PLATFORM]                           VARCHAR (50)    NULL,
    [STATUS]                             VARCHAR (50)    NULL,
    [INVOICE_MAP_KEY]                    VARCHAR (50)    NOT NULL,
    [FIELD_NAME]                         VARCHAR (50)    NULL,
    [SCHEDULER_PROJECT_ID]               VARCHAR (50)    NULL,
    [SCHEDULER_ACL_NAME]                 VARCHAR (50)    NOT NULL,
    [ACD_ID_EXTENSION]                   VARCHAR (50)    NOT NULL,
    [OFFICIAL_WSOL_CLIENT_ID]            VARCHAR (50)    NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]          VARCHAR (50)    NULL,
    [OFFICIAL_ACD_CLIENT_ID]             VARCHAR (50)    NOT NULL,
    [OFFICIAL_ACD_CLIENT_NAME]           VARCHAR (50)    NULL,
    [PRIMARY_PROJECT_MANAGER_ID]         VARCHAR (150)   NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID]  VARCHAR (150)   NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]        VARCHAR (150)   NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]         VARCHAR (150)   NULL,
    [INVOICE_SYSTEM_ID]                  VARCHAR (50)    NOT NULL,
    [HOLIDAY_INVOICE_ID]                 VARCHAR (50)    NOT NULL,
    [HOLIDAY]                            VARCHAR (50)    NOT NULL,
    [FILE_FORMAT_OF_PUSH]                VARCHAR (50)    NULL,
    [AGENT_PREPARATION_INVOICE_ID]       VARCHAR (50)    NULL,
    [NEW_ACL]                            VARCHAR (50)    NULL,
    [CURRENT_CATS]                       VARCHAR (50)    NULL,
    [CATS_ID]                            VARCHAR (50)    NULL,
    [PATS_ID]                            VARCHAR (50)    NULL,
    [SMART_ELIGIBLE]                     VARCHAR (50)    NULL,
    [SMART_TIER_1]                       VARCHAR (50)    NULL,
    [SMART_TIER_2]                       VARCHAR (50)    NULL,
    [SMART_TIER_3]                       VARCHAR (50)    NULL,
    [INTERVAL]                           VARCHAR (50)    NULL,
    [DATE]                               VARCHAR (50)    NULL,
    [HOD_INTERVAL]                       VARCHAR (50)    NULL,
    [AU_DK_LOGGED_IN_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_AVAILABLE_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_TALK_DURATION]                DECIMAL (10, 2) NULL,
    [AU_DK_IB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_OB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_CONVENTIONAL_ACW]             DECIMAL (10, 2) NULL,
    [AU_DK_NR_DURATION]                  DECIMAL (10, 2) NULL,
    [AU_DK_PSEUDO_PRODUCTIVE_DURATION]   DECIMAL (10, 2) NULL,
    [AU_DK_ADJUSTED_NR_DURATION]         DECIMAL (10, 2) NULL,
    [AU_DK_TOTAL_PRODUCTIVE_DURATION]    DECIMAL (10, 2) NULL,
    [AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] DECIMAL (10, 2) NULL,
    [AU_DK_XFER_COUNT]                   INT             NULL,
    [AU_DK_HOLD_COUNT]                   INT             NULL,
    [AU_DK_CONFERENCE_COUNT]             INT             NULL,
    [AU_DK_CONSULT_COUNT]                INT             NULL,
    [AU_DK_PUP_COUNT]                    INT             NULL,
    [AU_DK_OFFERED_COUNT]                INT             NULL,
    [AU_DK_HANDLED_COUNT]                INT             NULL,
    [AU_DK_IB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_OB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_RONA_COUNT]                   INT             NULL,
    [AU_DK_AWR_COUNT]                    INT             NULL,
    [MINIMUM_GUARANTEE]                  DECIMAL (10, 2) NULL,
    [AUTHORIZED_TO_INVOICE]              DECIMAL (10, 2) NULL,
    [WEEK_ENDING_DATE]                   VARCHAR (10)    NULL,
    [PAY_CYCLE_CLOSURE_DATE]             VARCHAR (10)    NULL,
    [FTP_FILE_NAME]                      VARCHAR (100)   NOT NULL,
    [EMAIL]                              VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]     INT             NOT NULL,
    [CAL_DATE]                           DATETIME        NULL,
    [TENANT_KEY]                         INT             NOT NULL,
    [AIR_DAY_TYPE]                       VARCHAR (1)     NOT NULL,
    [AIR_ACW_FONT_COLOR]                 VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]                 DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                 VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]         VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                       VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                     VARCHAR (1)     NULL,
    [READY_FOR_XML]                      VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                       VARCHAR (1)     NULL,
    [INVOICE_ID]                         VARCHAR (50)    NULL,
    [RESOURCE_NAME]                      VARCHAR (100)   NULL,
    [PAY_GROUP]                          INT             NULL,
    [AIRITKDUR]                          DECIMAL (10, 2) NULL,
    [AIRIACDUR]                          DECIMAL (10, 2) NULL,
    [WS_ROW_CREATED_TIME]                DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                DATETIME        NULL,
    [ID]                                 INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA] UNIQUE NONCLUSTERED ([INVOICE_MAP_KEY] ASC, [SCHEDULER_ACL_NAME] ASC, [ACD_ID_EXTENSION] ASC, [HOLIDAY] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [TENANT_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_DAILY_SCHEDULE]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_DAILY_SCHEDULE] (
    [FF_OFFICIAL_ACL_NAME]               VARCHAR (200)   NULL,
    [FF_ROLE]                            VARCHAR (50)    NULL,
    [FF_FIELD_MAP_ID]                    VARCHAR (100)   NULL,
    [FF_EMAIL]                           VARCHAR (100)   NULL,
    [FF_AGENT_NAME]                      VARCHAR (200)   NULL,
    [FF_SCHEDULED_HOURS]                 VARCHAR (50)    NULL,
    [FF_WORKED_HOURS]                    VARCHAR (50)    NULL,
    [FF_CANCELLED_HOURS]                 VARCHAR (50)    NULL,
    [FF_CANCELLED_PERCENT]               VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]                   DATETIME        NOT NULL,
    [SEQNO]                              INT             NOT NULL,
    [FTP_FILE_NAME]                      VARCHAR (100)   NOT NULL,
    [DATETIME]                           DATETIME        NULL,
    [STD_TENANT_START_DATE_TIME_KEY]     INT             NOT NULL,
    [TENANT_NAME]                        VARCHAR (50)    NULL,
    [OFFICIAL_ACL_NAME]                  VARCHAR (200)   NOT NULL,
    [ROLE]                               VARCHAR (50)    NULL,
    [FIELD_MAP_ID]                       VARCHAR (100)   NOT NULL,
    [EMAIL]                              VARCHAR (100)   NULL,
    [AGENT_NAME]                         VARCHAR (200)   NULL,
    [SCHEDULED_HOURS]                    DECIMAL (10, 2) NULL,
    [SCHEDULED_AFTER_CANCELLATION_HOURS] DECIMAL (10, 2) NULL,
    [CANCELLED_HOURS]                    DECIMAL (10, 2) NULL,
    [CANCELLED_PERCENT]                  DECIMAL (10, 2) NULL,
    [WS_ROW_CREATED_TIME]                DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                DATETIME        NULL,
    [ID]                                 INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_DAILY_SCHEDULE] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_DAILY_SCHEDULE] UNIQUE NONCLUSTERED ([STD_TENANT_START_DATE_TIME_KEY] ASC, [OFFICIAL_ACL_NAME] ASC, [FIELD_MAP_ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_DAILY_SCHEDULE_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_DAILY_SCHEDULE_0_Audit] (
    [FF_OFFICIAL_ACL_NAME] VARCHAR (200) NULL,
    [FF_ROLE]              VARCHAR (50)  NULL,
    [FF_FIELD_MAP_ID]      VARCHAR (100) NULL,
    [FF_EMAIL]             VARCHAR (100) NULL,
    [FF_AGENT_NAME]        VARCHAR (200) NOT NULL,
    [FF_SCHEDULED_HOURS]   VARCHAR (50)  NULL,
    [FF_WORKED_HOURS]      VARCHAR (50)  NULL,
    [FF_CANCELLED_HOURS]   VARCHAR (50)  NULL,
    [FF_CANCELLED_PERCENT] VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]     DATETIME      NOT NULL,
    [SEQNO]                INT           NOT NULL,
    [FTP_FILE_NAME]        VARCHAR (100) NOT NULL,
    [ID]                   INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_DAILY_SCHEDULE_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_DAILY_SCHEDULE_0_Audit] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_DAILY_SCHEDULE_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_DAILY_SCHEDULE_1] (
    [FF_OFFICIAL_ACL_NAME]               VARCHAR (200)   NULL,
    [FF_ROLE]                            VARCHAR (50)    NULL,
    [FF_FIELD_MAP_ID]                    VARCHAR (100)   NULL,
    [FF_EMAIL]                           VARCHAR (100)   NULL,
    [FF_AGENT_NAME]                      VARCHAR (200)   NULL,
    [FF_SCHEDULED_HOURS]                 VARCHAR (50)    NULL,
    [FF_WORKED_HOURS]                    VARCHAR (50)    NULL,
    [FF_CANCELLED_HOURS]                 VARCHAR (50)    NULL,
    [FF_CANCELLED_PERCENT]               VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]                   DATETIME        NOT NULL,
    [SEQNO]                              INT             NOT NULL,
    [FTP_FILE_NAME]                      VARCHAR (100)   NOT NULL,
    [DATETIME]                           DATETIME        NULL,
    [STD_TENANT_START_DATE_TIME_KEY]     INT             NULL,
    [TENANT_NAME]                        VARCHAR (50)    NULL,
    [OFFICIAL_ACL_NAME]                  VARCHAR (200)   NULL,
    [ROLE]                               VARCHAR (50)    NULL,
    [FIELD_MAP_ID]                       VARCHAR (100)   NULL,
    [EMAIL]                              VARCHAR (100)   NULL,
    [AGENT_NAME]                         VARCHAR (200)   NULL,
    [SCHEDULED_HOURS]                    DECIMAL (10, 2) NULL,
    [SCHEDULED_AFTER_CANCELLATION_HOURS] DECIMAL (10, 2) NULL,
    [CANCELLED_HOURS]                    DECIMAL (10, 2) NULL,
    [CANCELLED_PERCENT]                  DECIMAL (10, 2) NULL,
    [ID]                                 INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_DAILY_SCHEDULE_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_DAILY_SCHEDULE_2]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_DAILY_SCHEDULE_2] (
    [FF_OFFICIAL_ACL_NAME]               VARCHAR (200)   NULL,
    [FF_ROLE]                            VARCHAR (50)    NULL,
    [FF_FIELD_MAP_ID]                    VARCHAR (100)   NULL,
    [FF_EMAIL]                           VARCHAR (100)   NULL,
    [FF_AGENT_NAME]                      VARCHAR (200)   NULL,
    [FF_SCHEDULED_HOURS]                 VARCHAR (50)    NULL,
    [FF_WORKED_HOURS]                    VARCHAR (50)    NULL,
    [FF_CANCELLED_HOURS]                 VARCHAR (50)    NULL,
    [FF_CANCELLED_PERCENT]               VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]                   DATETIME        NOT NULL,
    [SEQNO]                              INT             NOT NULL,
    [FTP_FILE_NAME]                      VARCHAR (100)   NOT NULL,
    [DATETIME]                           DATETIME        NULL,
    [STD_TENANT_START_DATE_TIME_KEY]     INT             NOT NULL,
    [TENANT_NAME]                        VARCHAR (50)    NULL,
    [OFFICIAL_ACL_NAME]                  VARCHAR (200)   NOT NULL,
    [ROLE]                               VARCHAR (50)    NULL,
    [FIELD_MAP_ID]                       VARCHAR (100)   NOT NULL,
    [EMAIL]                              VARCHAR (100)   NULL,
    [AGENT_NAME]                         VARCHAR (200)   NULL,
    [SCHEDULED_HOURS]                    DECIMAL (10, 2) NULL,
    [SCHEDULED_AFTER_CANCELLATION_HOURS] DECIMAL (10, 2) NULL,
    [CANCELLED_HOURS]                    DECIMAL (10, 2) NULL,
    [CANCELLED_PERCENT]                  DECIMAL (10, 2) NULL,
    [ID]                                 INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_DAILY_SCHEDULE_2] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_DAILY_SCHEDULE_BAD]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_DAILY_SCHEDULE_BAD] (
    [BAD_IMPORTS_NO]                     TINYINT         NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]              VARCHAR (3)     NULL,
    [WS_ROW_CREATED_TIME]                DATETIME        NOT NULL,
    [FF_OFFICIAL_ACL_NAME]               VARCHAR (200)   NULL,
    [FF_ROLE]                            VARCHAR (50)    NULL,
    [FF_FIELD_MAP_ID]                    VARCHAR (100)   NULL,
    [FF_EMAIL]                           VARCHAR (100)   NULL,
    [FF_AGENT_NAME]                      VARCHAR (200)   NULL,
    [FF_SCHEDULED_HOURS]                 VARCHAR (50)    NULL,
    [FF_WORKED_HOURS]                    VARCHAR (50)    NULL,
    [FF_CANCELLED_HOURS]                 VARCHAR (50)    NULL,
    [FF_CANCELLED_PERCENT]               VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]                   DATETIME        NOT NULL,
    [SEQNO]                              INT             NOT NULL,
    [FTP_FILE_NAME]                      VARCHAR (100)   NOT NULL,
    [DATETIME]                           DATETIME        NULL,
    [STD_TENANT_START_DATE_TIME_KEY]     INT             NULL,
    [TENANT_NAME]                        VARCHAR (50)    NULL,
    [OFFICIAL_ACL_NAME]                  VARCHAR (200)   NULL,
    [ROLE]                               VARCHAR (50)    NULL,
    [FIELD_MAP_ID]                       VARCHAR (100)   NULL,
    [EMAIL]                              VARCHAR (100)   NULL,
    [AGENT_NAME]                         VARCHAR (200)   NULL,
    [SCHEDULED_HOURS]                    DECIMAL (10, 2) NULL,
    [SCHEDULED_AFTER_CANCELLATION_HOURS] DECIMAL (10, 2) NULL,
    [CANCELLED_HOURS]                    DECIMAL (10, 2) NULL,
    [CANCELLED_PERCENT]                  DECIMAL (10, 2) NULL,
    [ID]                                 INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_DAILY_SCHEDULE_BAD] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_DAILY_SCHEDULE_BAD] UNIQUE NONCLUSTERED ([BAD_IMPORTS_NO] ASC, [WS_ROW_CREATED_TIME] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_DATALOT_AGG_PERFORMANCE]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_DATALOT_AGG_PERFORMANCE] (
    [FF_LOCATION]                    VARCHAR (50)  NULL,
    [FF_OUTBOUND_CAMPAIGN]           VARCHAR (100) NULL,
    [FF_DIAL_NUMBER]                 VARCHAR (50)  NULL,
    [FF_COUNT]                       VARCHAR (50)  NULL,
    [FF_XFERS]                       VARCHAR (50)  NULL,
    [FF_BILLABLE_XFER]               VARCHAR (50)  NULL,
    [FF_XFER_RATE]                   VARCHAR (50)  NULL,
    [FF_BILLABLE_PERCENTAGE]         VARCHAR (50)  NULL,
    [FF_BILLABLE_XFER_RATE]          VARCHAR (50)  NULL,
    [FF_3_MIN_XFERS]                 VARCHAR (50)  NULL,
    [FF_EXPECTED_3_MIN_XFERS]        VARCHAR (50)  NULL,
    [FF_EXCESS_3MIN_XFER]            VARCHAR (50)  NULL,
    [FF_3_MIN_RATE]                  VARCHAR (50)  NULL,
    [FF_EXCESS_RATE]                 VARCHAR (50)  NULL,
    [FF_RETAIL_3_MIN_XFERS]          VARCHAR (50)  NULL,
    [FF_RETAIL_3_MIN_RATE]           VARCHAR (50)  NULL,
    [DATA_DATE]                      DATETIME      NULL,
    [SEQNO_ADDED_TIME]               DATETIME      NOT NULL,
    [SEQNO]                          INT           NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100) NOT NULL,
    [DATETIME]                       DATETIME      NULL,
    [HOUR_INTERVAL]                  VARCHAR (50)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT           NULL,
    [TENANT_KEY]                     INT           NULL,
    [WS_ROW_CREATED_TIME]            DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME      NULL,
    [ID]                             INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_DATALOT_AGG_PERFORMANCE] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_DATALOT_AGG_PERFORMANCE_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_DATALOT_AGG_PERFORMANCE_0_Audit] (
    [FF_LOCATION]             VARCHAR (50)  NULL,
    [FF_OUTBOUND_CAMPAIGN]    VARCHAR (100) NULL,
    [FF_DIAL_NUMBER]          VARCHAR (50)  NULL,
    [FF_COUNT]                VARCHAR (50)  NULL,
    [FF_XFERS]                VARCHAR (50)  NULL,
    [FF_BILLABLE_XFER]        VARCHAR (50)  NULL,
    [FF_XFER_RATE]            VARCHAR (50)  NULL,
    [FF_BILLABLE_PERCENTAGE]  VARCHAR (50)  NULL,
    [FF_BILLABLE_XFER_RATE]   VARCHAR (50)  NULL,
    [FF_3_MIN_XFERS]          VARCHAR (50)  NULL,
    [FF_EXPECTED_3_MIN_XFERS] VARCHAR (50)  NULL,
    [FF_EXCESS_3MIN_XFER]     VARCHAR (50)  NULL,
    [FF_3_MIN_RATE]           VARCHAR (50)  NULL,
    [FF_EXCESS_RATE]          VARCHAR (50)  NULL,
    [FF_RETAIL_3_MIN_XFERS]   VARCHAR (50)  NULL,
    [FF_RETAIL_3_MIN_RATE]    VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]        DATETIME      NOT NULL,
    [SEQNO]                   INT           NOT NULL,
    [FTP_FILE_NAME]           VARCHAR (100) NOT NULL,
    [ID]                      INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_DATALOT_AGG_PERFORMANCE_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_DATALOT_AGG_PERFORMANCE_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_DATALOT_AGG_PERFORMANCE_1] (
    [FF_LOCATION]                    VARCHAR (50)  NULL,
    [FF_OUTBOUND_CAMPAIGN]           VARCHAR (100) NULL,
    [FF_DIAL_NUMBER]                 VARCHAR (50)  NULL,
    [FF_COUNT]                       VARCHAR (50)  NULL,
    [FF_XFERS]                       VARCHAR (50)  NULL,
    [FF_BILLABLE_XFER]               VARCHAR (50)  NULL,
    [FF_XFER_RATE]                   VARCHAR (50)  NULL,
    [FF_BILLABLE_PERCENTAGE]         VARCHAR (50)  NULL,
    [FF_BILLABLE_XFER_RATE]          VARCHAR (50)  NULL,
    [FF_3_MIN_XFERS]                 VARCHAR (50)  NULL,
    [FF_EXPECTED_3_MIN_XFERS]        VARCHAR (50)  NULL,
    [FF_EXCESS_3MIN_XFER]            VARCHAR (50)  NULL,
    [FF_3_MIN_RATE]                  VARCHAR (50)  NULL,
    [FF_EXCESS_RATE]                 VARCHAR (50)  NULL,
    [FF_RETAIL_3_MIN_XFERS]          VARCHAR (50)  NULL,
    [FF_RETAIL_3_MIN_RATE]           VARCHAR (50)  NULL,
    [DATA_DATE]                      DATETIME      NULL,
    [SEQNO_ADDED_TIME]               DATETIME      NOT NULL,
    [SEQNO]                          INT           NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100) NOT NULL,
    [DATETIME]                       DATETIME      NULL,
    [HOUR_INTERVAL]                  VARCHAR (50)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT           NULL,
    [TENANT_KEY]                     INT           NULL,
    [ID]                             INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_DATALOT_AGG_PERFORMANCE_1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_DATALOT_AGG_PERFORMANCE_1] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_DATALOT_REP_SCORECARD]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_DATALOT_REP_SCORECARD] (
    [FF_ID]                          VARCHAR (50)  NULL,
    [FF_AGENT_ID]                    VARCHAR (50)  NULL,
    [FF_AGENT_FIRST_NAME]            VARCHAR (50)  NULL,
    [FF_AGENT_LAST_NAME]             VARCHAR (50)  NULL,
    [FF_AGENT_LOCATION]              VARCHAR (50)  NULL,
    [FF_TEAM]                        VARCHAR (50)  NULL,
    [FF_CALLS]                       VARCHAR (50)  NULL,
    [FF_EXPECTED_3_MIN_XFERS]        VARCHAR (50)  NULL,
    [FF_3_MIN_XFERS]                 VARCHAR (50)  NULL,
    [FF_EXCESS_3MIN_XFER]            VARCHAR (50)  NULL,
    [FF_INBOUND_EXCESS_3MIN_XFER]    VARCHAR (50)  NULL,
    [FF_OUTBOUND_EXCESS_3MIN_XFER]   VARCHAR (50)  NULL,
    [DATA_DATE]                      DATETIME      NULL,
    [SEQNO_ADDED_TIME]               DATETIME      NOT NULL,
    [SEQNO]                          INT           NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100) NOT NULL,
    [DATETIME]                       DATETIME      NULL,
    [HOUR_INTERVAL]                  VARCHAR (50)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT           NULL,
    [TENANT_KEY]                     INT           NULL,
    [WS_ROW_CREATED_TIME]            DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME      NULL,
    [ID]                             INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_DATALOT_REP_SCORECARD] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_DATALOT_REP_SCORECARD_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_DATALOT_REP_SCORECARD_0_Audit] (
    [FF_ID]                        VARCHAR (50)  NULL,
    [FF_AGENT_ID]                  VARCHAR (50)  NULL,
    [FF_AGENT_FIRST_NAME]          VARCHAR (50)  NULL,
    [FF_AGENT_LAST_NAME]           VARCHAR (50)  NULL,
    [FF_AGENT_LOCATION]            VARCHAR (50)  NULL,
    [FF_TEAM]                      VARCHAR (50)  NULL,
    [FF_CALLS]                     VARCHAR (50)  NULL,
    [FF_EXPECTED_3_MIN_XFERS]      VARCHAR (50)  NULL,
    [FF_3_MIN_XFERS]               VARCHAR (50)  NULL,
    [FF_EXCESS_3MIN_XFER]          VARCHAR (50)  NULL,
    [FF_INBOUND_EXCESS_3MIN_XFER]  VARCHAR (50)  NULL,
    [FF_OUTBOUND_EXCESS_3MIN_XFER] VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]             DATETIME      NOT NULL,
    [SEQNO]                        INT           NOT NULL,
    [FTP_FILE_NAME]                VARCHAR (100) NOT NULL,
    [ID]                           INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_DATALOT_REP_SCORECARD_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_DATALOT_REP_SCORECARD_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_DATALOT_REP_SCORECARD_1] (
    [FF_ID]                          VARCHAR (50)  NULL,
    [FF_AGENT_ID]                    VARCHAR (50)  NULL,
    [FF_AGENT_FIRST_NAME]            VARCHAR (50)  NULL,
    [FF_AGENT_LAST_NAME]             VARCHAR (50)  NULL,
    [FF_AGENT_LOCATION]              VARCHAR (50)  NULL,
    [FF_TEAM]                        VARCHAR (50)  NULL,
    [FF_CALLS]                       VARCHAR (50)  NULL,
    [FF_EXPECTED_3_MIN_XFERS]        VARCHAR (50)  NULL,
    [FF_3_MIN_XFERS]                 VARCHAR (50)  NULL,
    [FF_EXCESS_3MIN_XFER]            VARCHAR (50)  NULL,
    [FF_INBOUND_EXCESS_3MIN_XFER]    VARCHAR (50)  NULL,
    [FF_OUTBOUND_EXCESS_3MIN_XFER]   VARCHAR (50)  NULL,
    [DATA_DATE]                      DATETIME      NULL,
    [SEQNO_ADDED_TIME]               DATETIME      NOT NULL,
    [SEQNO]                          INT           NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100) NOT NULL,
    [DATETIME]                       DATETIME      NULL,
    [HOUR_INTERVAL]                  VARCHAR (50)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT           NULL,
    [TENANT_KEY]                     INT           NULL,
    [ID]                             INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_DATALOT_REP_SCORECARD_1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_DATALOT_REP_SCORECARD_1] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING] (
    [INVOICE_MAP_KEY]      VARCHAR (100) NOT NULL,
    [SKILL]                VARCHAR (50)  NOT NULL,
    [EMAIL_ADDRESS]        VARCHAR (100) NULL,
    [EFFECTIVE_DATE]       DATETIME      NULL,
    [RESOURCE_NAME]        VARCHAR (100) NULL,
    [FTP_FILE_NAME]        VARCHAR (100) NULL,
    [CST_ROW_CREATED_TIME] DATETIME      NOT NULL,
    [CST_ROW_UPDATED_TIME] DATETIME      NULL,
    [ID]                   INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING] UNIQUE NONCLUSTERED ([RESOURCE_NAME] ASC, [SKILL] ASC, [INVOICE_MAP_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_1] (
    [INVOICE_MAP_KEY]      VARCHAR (50)  NOT NULL,
    [FF_SKILL]             VARCHAR (50)  NOT NULL,
    [FF_EMAIL_ADDRESS]     VARCHAR (100) NULL,
    [FF_EFFECTIVE_DATE]    VARCHAR (50)  NULL,
    [FF_OFFICIAL_ACL_NAME] VARCHAR (100) NULL,
    [FTP_FILE_NAME]        VARCHAR (100) NULL,
    [ID]                   INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_ERRORS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_ERRORS] (
    [INVOICE_MAP_KEY]       VARCHAR (100)  NOT NULL,
    [SKILL]                 VARCHAR (50)   NOT NULL,
    [EMAIL_ADDRESS]         VARCHAR (100)  NULL,
    [EFFECTIVE_DATE]        DATETIME       NULL,
    [RESOURCE_NAME]         VARCHAR (100)  NULL,
    [FTP_FILE_NAME]         VARCHAR (100)  NULL,
    [WS_ROW_CREATED_TIME]   DATETIME       NULL,
    [IMPORT_SUB_GROUP_NAME] VARCHAR (100)  NULL,
    [ERROR_TAG]             VARCHAR (50)   NULL,
    [ERROR_MSG]             VARCHAR (2500) NULL,
    [ID]                    INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_ERRORS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_ASPECT_EXCEPTIONS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_ASPECT_EXCEPTIONS] (
    [FF_REPORT_DATE]                 VARCHAR (50)  NULL,
    [FF_REPORT_NAME]                 VARCHAR (50)  NULL,
    [FF_RUN_DATES]                   VARCHAR (50)  NULL,
    [FF_EMPLOYEE_GROUP]              VARCHAR (50)  NULL,
    [FF_NOMINAL_DATE]                VARCHAR (50)  NULL,
    [FF_CODE]                        VARCHAR (50)  NULL,
    [FF_HEADER_01]                   VARCHAR (50)  NULL,
    [FF_HEADER_02]                   VARCHAR (50)  NULL,
    [FF_HEADER_03]                   VARCHAR (50)  NULL,
    [FF_HEADER_04]                   VARCHAR (50)  NULL,
    [FF_HEADER_05]                   VARCHAR (50)  NULL,
    [FF_EMPLOYEE_NAME]               VARCHAR (50)  NULL,
    [FF_START_TIME]                  VARCHAR (50)  NULL,
    [FF_EXCEEDS_DATE]                VARCHAR (50)  NULL,
    [FF_STOP_TIME]                   VARCHAR (50)  NULL,
    [FF_DURATION]                    VARCHAR (50)  NULL,
    [FF_MEMO]                        VARCHAR (50)  NULL,
    [FF_SYSTEM_NAME]                 VARCHAR (50)  NULL,
    [FF_PAGE_FOOTER]                 VARCHAR (50)  NULL,
    [FF_FOOTER]                      VARCHAR (50)  NULL,
    [DATA_DATE]                      DATETIME      NULL,
    [SEQNO_ADDED_TIME]               DATETIME      NOT NULL,
    [SEQNO]                          INT           NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100) NOT NULL,
    [DATETIME]                       DATETIME      NULL,
    [HOUR_INTERVAL]                  VARCHAR (50)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT           NULL,
    [TENANT_KEY]                     INT           NULL,
    [RESOURCE_NAME]                  VARCHAR (100) NULL,
    [WS_ROW_CREATED_TIME]            DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME      NULL,
    [ID]                             INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_ASPECT_EXCEPTIONS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_ASPECT_EXCEPTIONS_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_ASPECT_EXCEPTIONS_0_Audit] (
    [FF_REPORT_DATE]    VARCHAR (50)  NULL,
    [FF_REPORT_NAME]    VARCHAR (50)  NULL,
    [FF_RUN_DATES]      VARCHAR (50)  NULL,
    [FF_EMPLOYEE_GROUP] VARCHAR (50)  NULL,
    [FF_NOMINAL_DATE]   VARCHAR (50)  NULL,
    [FF_CODE]           VARCHAR (50)  NULL,
    [FF_HEADER_01]      VARCHAR (50)  NULL,
    [FF_HEADER_02]      VARCHAR (50)  NULL,
    [FF_HEADER_03]      VARCHAR (50)  NULL,
    [FF_HEADER_04]      VARCHAR (50)  NULL,
    [FF_HEADER_05]      VARCHAR (50)  NULL,
    [FF_BLANK_01]       VARCHAR (50)  NULL,
    [FF_BLANK_02]       VARCHAR (50)  NULL,
    [FF_BLANK_03]       VARCHAR (50)  NULL,
    [FF_BLANK_04]       VARCHAR (50)  NULL,
    [FF_BLANK_05]       VARCHAR (50)  NULL,
    [FF_BLANK_06]       VARCHAR (50)  NULL,
    [FF_BLANK_07]       VARCHAR (50)  NULL,
    [FF_EMPLOYEE_NAME]  VARCHAR (50)  NULL,
    [FF_BLANK_08]       VARCHAR (50)  NULL,
    [FF_START_TIME]     VARCHAR (50)  NULL,
    [FF_EXCEEDS_DATE]   VARCHAR (50)  NULL,
    [FF_STOP_TIME]      VARCHAR (50)  NULL,
    [FF_DURATION]       VARCHAR (50)  NULL,
    [FF_MEMO]           VARCHAR (50)  NULL,
    [FF_BLANK_09]       VARCHAR (50)  NULL,
    [FF_BLANK_10]       VARCHAR (50)  NULL,
    [FF_BLANK_11]       VARCHAR (50)  NULL,
    [FF_BLANK_12]       VARCHAR (50)  NULL,
    [FF_BLANK_13]       VARCHAR (50)  NULL,
    [FF_BLANK_14]       VARCHAR (50)  NULL,
    [FF_BLANK_15]       VARCHAR (50)  NULL,
    [FF_BLANK_16]       VARCHAR (50)  NULL,
    [FF_SYSTEM_NAME]    VARCHAR (50)  NULL,
    [FF_PAGE_FOOTER]    VARCHAR (50)  NULL,
    [FF_FOOTER]         VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]  DATETIME      NOT NULL,
    [SEQNO]             INT           NOT NULL,
    [FTP_FILE_NAME]     VARCHAR (100) NOT NULL,
    [ID]                INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_ASPECT_EXCEPTIONS_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_ASPECT_EXCEPTIONS_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_ASPECT_EXCEPTIONS_1] (
    [FF_REPORT_DATE]                 VARCHAR (50)  NULL,
    [FF_REPORT_NAME]                 VARCHAR (50)  NULL,
    [FF_RUN_DATES]                   VARCHAR (50)  NULL,
    [FF_EMPLOYEE_GROUP]              VARCHAR (50)  NULL,
    [FF_NOMINAL_DATE]                VARCHAR (50)  NULL,
    [FF_CODE]                        VARCHAR (50)  NULL,
    [FF_HEADER_01]                   VARCHAR (50)  NULL,
    [FF_HEADER_02]                   VARCHAR (50)  NULL,
    [FF_HEADER_03]                   VARCHAR (50)  NULL,
    [FF_HEADER_04]                   VARCHAR (50)  NULL,
    [FF_HEADER_05]                   VARCHAR (50)  NULL,
    [FF_EMPLOYEE_NAME]               VARCHAR (50)  NULL,
    [FF_START_TIME]                  VARCHAR (50)  NULL,
    [FF_EXCEEDS_DATE]                VARCHAR (50)  NULL,
    [FF_STOP_TIME]                   VARCHAR (50)  NULL,
    [FF_DURATION]                    VARCHAR (50)  NULL,
    [FF_MEMO]                        VARCHAR (50)  NULL,
    [FF_SYSTEM_NAME]                 VARCHAR (50)  NULL,
    [FF_PAGE_FOOTER]                 VARCHAR (50)  NULL,
    [FF_FOOTER]                      VARCHAR (50)  NULL,
    [DATA_DATE]                      DATETIME      NULL,
    [SEQNO_ADDED_TIME]               DATETIME      NOT NULL,
    [SEQNO]                          INT           NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100) NOT NULL,
    [DATETIME]                       DATETIME      NULL,
    [HOUR_INTERVAL]                  VARCHAR (50)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT           NULL,
    [TENANT_KEY]                     INT           NULL,
    [ID]                             INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_ASPECT_EXCEPTIONS_1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_EGENCIA_ASPECT_EXCEPTIONS_1] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_CMS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_CMS] (
    [FF_DATE]                        VARCHAR (50)  NULL,
    [FF_LOGIN_ID]                    VARCHAR (50)  NULL,
    [FF_TIME]                        VARCHAR (50)  NULL,
    [FF_SPLIT_SKILL]                 VARCHAR (50)  NULL,
    [FF_ACD_CALLS]                   VARCHAR (50)  NULL,
    [FF_RINGTIME]                    VARCHAR (50)  NULL,
    [FF_ACD_TIME]                    VARCHAR (50)  NULL,
    [FF_HOLD_TIME]                   VARCHAR (50)  NULL,
    [FF_HOLD_ACD_TIME]               VARCHAR (50)  NULL,
    [FF_ACW_ATTACHED]                VARCHAR (50)  NULL,
    [FF_ACW_OUT_TIME]                VARCHAR (50)  NULL,
    [FF_AUX_OUT_TIME]                VARCHAR (50)  NULL,
    [FF_ACW_OUT_CALLS]               VARCHAR (50)  NULL,
    [FF_AUX_OUT_CALLS]               VARCHAR (50)  NULL,
    [FF_ACW_ALL]                     VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]               DATETIME      NOT NULL,
    [SEQNO]                          INT           NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100) NOT NULL,
    [DATETIME]                       DATETIME      NULL,
    [HOUR_INTERVAL]                  VARCHAR (50)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT           NULL,
    [TENANT_KEY]                     INT           NULL,
    [RESOURCE_NAME]                  VARCHAR (100) NULL,
    [EMAIL]                          VARCHAR (100) NULL,
    [WS_ROW_CREATED_TIME]            DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME      NULL,
    [ID]                             INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_CMS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_CMS_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_CMS_0_Audit] (
    [FF_DATE]          VARCHAR (50)  NULL,
    [FF_LOGIN_ID]      VARCHAR (50)  NULL,
    [FF_TIME]          VARCHAR (50)  NULL,
    [FF_SPLIT_SKILL]   VARCHAR (50)  NULL,
    [FF_ACD_CALLS]     VARCHAR (50)  NULL,
    [FF_RINGTIME]      VARCHAR (50)  NULL,
    [FF_ACD_TIME]      VARCHAR (50)  NULL,
    [FF_HOLD_TIME]     VARCHAR (50)  NULL,
    [FF_HOLD_ACD_TIME] VARCHAR (50)  NULL,
    [FF_ACW_ATTACHED]  VARCHAR (50)  NULL,
    [FF_ACW_OUT_TIME]  VARCHAR (50)  NULL,
    [FF_AUX_OUT_TIME]  VARCHAR (50)  NULL,
    [FF_ACW_OUT_CALLS] VARCHAR (50)  NULL,
    [FF_AUX_OUT_CALLS] VARCHAR (50)  NULL,
    [FF_ACW_ALL]       VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME] DATETIME      NOT NULL,
    [SEQNO]            INT           NOT NULL,
    [FTP_FILE_NAME]    VARCHAR (100) NOT NULL,
    [ID]               INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_CMS_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_CMS_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_CMS_1] (
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_LOGIN_ID]                    VARCHAR (50)    NULL,
    [FF_TIME]                        VARCHAR (50)    NULL,
    [FF_SPLIT_SKILL]                 VARCHAR (50)    NULL,
    [FF_ACD_CALLS]                   VARCHAR (50)    NULL,
    [FF_RINGTIME]                    VARCHAR (50)    NULL,
    [FF_ACD_TIME]                    VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                   VARCHAR (50)    NULL,
    [FF_HOLD_ACD_TIME]               VARCHAR (50)    NULL,
    [FF_ACW_ATTACHED]                VARCHAR (50)    NULL,
    [FF_ACW_OUT_TIME]                VARCHAR (50)    NULL,
    [FF_AUX_OUT_TIME]                VARCHAR (50)    NULL,
    [FF_ACW_OUT_CALLS]               VARCHAR (50)    NULL,
    [FF_AUX_OUT_CALLS]               VARCHAR (50)    NULL,
    [FF_ACW_ALL]                     VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [DATETIME_PT]                    DATETIME        NULL,
    [DATETIME_CT]                    DATETIME        NULL,
    [HOUR_INTERVAL]                  VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [EMPLOYEE_ID]                    VARCHAR (50)    NULL,
    [RESOURCE_NAME]                  VARCHAR (200)   NULL,
    [SPLIT_SKILL]                    VARCHAR (50)    NULL,
    [ACD_CALLS]                      INT             NULL,
    [ACW_OUT_CALLS]                  INT             NULL,
    [AUX_OUT_CALLS]                  INT             NULL,
    [RING_TIME]                      DECIMAL (10, 2) NULL,
    [ACD_TIME]                       DECIMAL (10, 2) NULL,
    [HOLD_TIME]                      DECIMAL (10, 2) NULL,
    [HOLD_ACD_TIME]                  DECIMAL (10, 2) NULL,
    [ACW_ATTACHED_TIME]              DECIMAL (10, 2) NULL,
    [ACW_OUT_TIME]                   DECIMAL (10, 2) NULL,
    [AUX_OUT_TIME]                   DECIMAL (10, 2) NULL,
    [ACW_ALL_TIME]                   DECIMAL (10, 2) NULL,
    [HANDLE_TIME_WITH_ATTACHED_ACW]  DECIMAL (10, 2) NULL,
    [HANDLE_TIME_ALL_ACW]            DECIMAL (10, 2) NULL,
    [TENANT_KEY]                     INT             NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_CMS_1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_EGENCIA_CMS_1] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_CMS_BAD]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_CMS_BAD] (
    [BAD_IMPORTS_CODE]               VARCHAR (3)     NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]          VARCHAR (3)     NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NOT NULL,
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_LOGIN_ID]                    VARCHAR (50)    NULL,
    [FF_TIME]                        VARCHAR (50)    NULL,
    [FF_SPLIT_SKILL]                 VARCHAR (50)    NULL,
    [FF_ACD_CALLS]                   VARCHAR (50)    NULL,
    [FF_RINGTIME]                    VARCHAR (50)    NULL,
    [FF_ACD_TIME]                    VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                   VARCHAR (50)    NULL,
    [FF_HOLD_ACD_TIME]               VARCHAR (50)    NULL,
    [FF_ACW_ATTACHED]                VARCHAR (50)    NULL,
    [FF_ACW_OUT_TIME]                VARCHAR (50)    NULL,
    [FF_AUX_OUT_TIME]                VARCHAR (50)    NULL,
    [FF_ACW_OUT_CALLS]               VARCHAR (50)    NULL,
    [FF_AUX_OUT_CALLS]               VARCHAR (50)    NULL,
    [FF_ACW_ALL]                     VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [DATETIME_PT]                    DATETIME        NULL,
    [DATETIME_CT]                    DATETIME        NULL,
    [HOUR_INTERVAL]                  VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [EMPLOYEE_ID]                    VARCHAR (50)    NULL,
    [RESOURCE_NAME]                  VARCHAR (200)   NULL,
    [SPLIT_SKILL]                    VARCHAR (50)    NULL,
    [ACD_CALLS]                      INT             NULL,
    [ACW_OUT_CALLS]                  INT             NULL,
    [AUX_OUT_CALLS]                  INT             NULL,
    [RING_TIME]                      DECIMAL (10, 2) NULL,
    [ACD_TIME]                       DECIMAL (10, 2) NULL,
    [HOLD_TIME]                      DECIMAL (10, 2) NULL,
    [HOLD_ACD_TIME]                  DECIMAL (10, 2) NULL,
    [ACW_ATTACHED_TIME]              DECIMAL (10, 2) NULL,
    [ACW_OUT_TIME]                   DECIMAL (10, 2) NULL,
    [AUX_OUT_TIME]                   DECIMAL (10, 2) NULL,
    [ACW_ALL_TIME]                   DECIMAL (10, 2) NULL,
    [HANDLE_TIME_WITH_ATTACHED_ACW]  DECIMAL (10, 2) NULL,
    [HANDLE_TIME_ALL_ACW]            DECIMAL (10, 2) NULL,
    [TENANT_KEY]                     INT             NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_CMS_BAD] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_EGENCIA_CMS_BAD] UNIQUE NONCLUSTERED ([BAD_IMPORTS_CODE] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC, [DATETIME] ASC, [HOUR_INTERVAL] ASC, [WS_ROW_CREATED_TIME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_INVOICING]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_INVOICING] (
    [FF_LOGIN_ID]                    VARCHAR (200)   NOT NULL,
    [FF_HOUR]                        VARCHAR (50)    NULL,
    [FF_STAFFED_TIME]                VARCHAR (50)    NULL,
    [FF_AVAIL_TIME]                  VARCHAR (50)    NULL,
    [FF_ACD_TIME]                    VARCHAR (50)    NULL,
    [FF_OTHER_TIME]                  VARCHAR (50)    NULL,
    [FF_ACW_TIME]                    VARCHAR (50)    NULL,
    [FF_AGENT_RING_TIME]             VARCHAR (50)    NULL,
    [FF_AUX_TIME]                    VARCHAR (50)    NULL,
    [FF_AUX_0_DEFAULT]               VARCHAR (50)    NULL,
    [FF_AUX_1_BREAK]                 VARCHAR (50)    NULL,
    [FF_AUX_2_COACHING]              VARCHAR (50)    NULL,
    [FF_AUX_3_MEETING]               VARCHAR (50)    NULL,
    [FF_AUX_4_PROJECT]               VARCHAR (50)    NULL,
    [FF_AUX_5_EGE_TRAINING]          VARCHAR (50)    NULL,
    [FF_AUX_6_OUTBOUND]              VARCHAR (50)    NULL,
    [FF_AUX_7_EMAIL]                 VARCHAR (50)    NULL,
    [FF_AUX_8_QUEUE_WORK]            VARCHAR (50)    NULL,
    [FF_AUX_9_SYSTEM_DOWN]           VARCHAR (50)    NULL,
    [FF_AUX_10_EXCHANGE]             VARCHAR (50)    NULL,
    [FF_AUX_11_PERSONAL]             VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_12]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_13]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_14]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_15]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_16]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_17]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_18]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_19]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_20]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_21]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_22]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_23]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_24]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_25]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_26]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_27]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_28]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_29]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_30]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_31]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_32]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_33]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_34]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_35]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_36]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_37]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_38]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_39]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_40]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_41]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_42]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_43]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_44]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_45]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_46]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_47]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_48]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_49]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_50]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_51]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_52]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_53]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_54]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_55]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_56]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_57]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_58]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_59]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_60]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_61]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_62]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_63]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_64]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_65]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_66]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_67]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_68]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_69]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_70]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_71]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_72]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_73]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_74]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_75]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_76]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_77]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_78]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_79]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_80]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_81]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_82]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_83]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_84]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_85]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_86]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_87]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_88]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_89]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_90]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_91]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_92]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_93]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_94]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_95]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_96]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_97]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_98]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_99]               VARCHAR (50)    NULL,
    [CMS_GROUP]                      VARCHAR (100)   NULL,
    [DATA_DATE]                      VARCHAR (50)    NULL,
    [DATETIME_CT]                    DATETIME        NULL,
    [DATETIME_PT]                    DATETIME        NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [STAFFED_SECS]                   DECIMAL (10, 2) NULL,
    [AVAILABLE_SECS]                 DECIMAL (10, 2) NULL,
    [ACD_SECS]                       DECIMAL (10, 2) NULL,
    [OTHER_SECS]                     DECIMAL (10, 2) NULL,
    [ACW_SECS]                       DECIMAL (10, 2) NULL,
    [RING_SECS]                      DECIMAL (10, 2) NULL,
    [AUX_0_DEFAULT_SECS]             DECIMAL (10, 2) NULL,
    [AUX_1_BREAK_SECS]               DECIMAL (10, 2) NULL,
    [AUX_2_COACHING_SECS]            DECIMAL (10, 2) NULL,
    [AUX_3_MEETING_SECS]             DECIMAL (10, 2) NULL,
    [AUX_4_PROJECT_SECS]             DECIMAL (10, 2) NULL,
    [AUX_5_EGE_TRAINING_SECS]        DECIMAL (10, 2) NULL,
    [AUX_6_OUTBOUND_SECS]            DECIMAL (10, 2) NULL,
    [AUX_7_EMAIL_SECS]               DECIMAL (10, 2) NULL,
    [AUX_8_QUEUE_WORK_SECS]          DECIMAL (10, 2) NULL,
    [AUX_9_SYSTEM_DOWN_SECS]         DECIMAL (10, 2) NULL,
    [AUX_10_EXCHANGE_SECS]           DECIMAL (10, 2) NULL,
    [AUX_11_PERSONAL_SECS]           DECIMAL (10, 2) NULL,
    [AUX_34_SECS]                    DECIMAL (10, 2) NULL,
    [AUX_35_SECS]                    DECIMAL (10, 2) NULL,
    [AUX_37_SECS]                    DECIMAL (10, 2) NULL,
    [AUX_40_SECS]                    DECIMAL (10, 2) NULL,
    [OUTBOUND_SECS]                  DECIMAL (10, 2) NULL,
    [EMAIL_SECS]                     DECIMAL (10, 2) NULL,
    [PROJECT_SECS]                   DECIMAL (10, 2) NULL,
    [MEETING_SECS]                   DECIMAL (10, 2) NULL,
    [TOTAL_AUX_SECS]                 DECIMAL (10, 2) NULL,
    [PROD_BILLING_SECS]              DECIMAL (10, 2) NULL,
    [AUTHORIZED_CSAT_SAT_KEY_SECS]   DECIMAL (10, 2) NULL,
    [AUTHORIZED_RESOURCE_SECS]       DECIMAL (10, 2) NULL,
    [LINE_OF_BUSINESS]               VARCHAR (100)   NULL,
    [WEEKEND]                        CHAR (1)        NULL,
    [CPROD]                          DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]              DECIMAL (10, 2) NULL,
    [AUTHORIZED_MINUTES]             DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NOT NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NOT NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]          DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME        NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_INVOICING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_EGENCIA_INVOICING] UNIQUE NONCLUSTERED ([FF_LOGIN_ID] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [ID_EXT] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_INVOICING_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_INVOICING_0_Audit] (
    [FF_LOGIN_ID]           VARCHAR (200) NULL,
    [FF_HOUR]               VARCHAR (50)  NULL,
    [FF_STAFFED_TIME]       VARCHAR (50)  NULL,
    [FF_AVAIL_TIME]         VARCHAR (50)  NULL,
    [FF_ACD_TIME]           VARCHAR (50)  NULL,
    [FF_OTHER_TIME]         VARCHAR (50)  NULL,
    [FF_ACW_TIME]           VARCHAR (50)  NULL,
    [FF_AGENT_RING_TIME]    VARCHAR (50)  NULL,
    [FF_AUX_TIME]           VARCHAR (50)  NULL,
    [FF_AUX_0_DEFAULT]      VARCHAR (50)  NULL,
    [FF_AUX_1_BREAK]        VARCHAR (50)  NULL,
    [FF_AUX_2_COACHING]     VARCHAR (50)  NULL,
    [FF_AUX_3_MEETING]      VARCHAR (50)  NULL,
    [FF_AUX_4_PROJECT]      VARCHAR (50)  NULL,
    [FF_AUX_5_EGE_TRAINING] VARCHAR (50)  NULL,
    [FF_AUX_6_OUTBOUND]     VARCHAR (50)  NULL,
    [FF_AUX_7_EMAIL]        VARCHAR (50)  NULL,
    [FF_AUX_8_QUEUE_WORK]   VARCHAR (50)  NULL,
    [FF_AUX_9_SYSTEM_DOWN]  VARCHAR (50)  NULL,
    [FF_AUX_10_EXCHANGE]    VARCHAR (50)  NULL,
    [FF_AUX_11_PERSONAL]    VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_12]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_13]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_14]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_15]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_16]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_17]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_18]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_19]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_20]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_21]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_22]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_23]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_24]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_25]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_26]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_27]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_28]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_29]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_30]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_31]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_32]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_33]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_34]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_35]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_36]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_37]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_38]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_39]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_40]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_41]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_42]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_43]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_44]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_45]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_46]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_47]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_48]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_49]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_50]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_51]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_52]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_53]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_54]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_55]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_56]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_57]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_58]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_59]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_60]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_61]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_62]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_63]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_64]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_65]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_66]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_67]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_68]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_69]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_70]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_71]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_72]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_73]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_74]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_75]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_76]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_77]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_78]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_79]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_80]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_81]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_82]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_83]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_84]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_85]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_86]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_87]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_88]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_89]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_90]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_91]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_92]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_93]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_94]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_95]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_96]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_97]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_98]      VARCHAR (50)  NULL,
    [FF_TI_AUXTIME_99]      VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]      DATETIME      NOT NULL,
    [SEQNO]                 INT           NOT NULL,
    [FTP_FILE_NAME]         VARCHAR (100) NOT NULL,
    [ID]                    INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_INVOICING_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_EGENCIA_INVOICING_0_Audit] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_INVOICING_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_INVOICING_1] (
    [FF_LOGIN_ID]                    VARCHAR (200)   NULL,
    [FF_HOUR]                        VARCHAR (50)    NULL,
    [FF_STAFFED_TIME]                VARCHAR (50)    NULL,
    [FF_AVAIL_TIME]                  VARCHAR (50)    NULL,
    [FF_ACD_TIME]                    VARCHAR (50)    NULL,
    [FF_OTHER_TIME]                  VARCHAR (50)    NULL,
    [FF_ACW_TIME]                    VARCHAR (50)    NULL,
    [FF_AGENT_RING_TIME]             VARCHAR (50)    NULL,
    [FF_AUX_TIME]                    VARCHAR (50)    NULL,
    [FF_AUX_0_DEFAULT]               VARCHAR (50)    NULL,
    [FF_AUX_1_BREAK]                 VARCHAR (50)    NULL,
    [FF_AUX_2_COACHING]              VARCHAR (50)    NULL,
    [FF_AUX_3_MEETING]               VARCHAR (50)    NULL,
    [FF_AUX_4_PROJECT]               VARCHAR (50)    NULL,
    [FF_AUX_5_EGE_TRAINING]          VARCHAR (50)    NULL,
    [FF_AUX_6_OUTBOUND]              VARCHAR (50)    NULL,
    [FF_AUX_7_EMAIL]                 VARCHAR (50)    NULL,
    [FF_AUX_8_QUEUE_WORK]            VARCHAR (50)    NULL,
    [FF_AUX_9_SYSTEM_DOWN]           VARCHAR (50)    NULL,
    [FF_AUX_10_EXCHANGE]             VARCHAR (50)    NULL,
    [FF_AUX_11_PERSONAL]             VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_12]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_13]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_14]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_15]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_16]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_17]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_18]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_19]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_20]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_21]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_22]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_23]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_24]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_25]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_26]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_27]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_28]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_29]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_30]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_31]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_32]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_33]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_34]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_35]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_36]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_37]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_38]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_39]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_40]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_41]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_42]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_43]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_44]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_45]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_46]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_47]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_48]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_49]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_50]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_51]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_52]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_53]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_54]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_55]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_56]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_57]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_58]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_59]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_60]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_61]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_62]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_63]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_64]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_65]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_66]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_67]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_68]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_69]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_70]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_71]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_72]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_73]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_74]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_75]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_76]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_77]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_78]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_79]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_80]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_81]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_82]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_83]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_84]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_85]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_86]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_87]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_88]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_89]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_90]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_91]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_92]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_93]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_94]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_95]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_96]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_97]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_98]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_99]               VARCHAR (50)    NULL,
    [CMS_GROUP]                      VARCHAR (100)   NULL,
    [DATA_DATE]                      VARCHAR (50)    NULL,
    [DATETIME_CT]                    DATETIME        NULL,
    [DATETIME_PT]                    DATETIME        NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [STAFFED_SECS]                   DECIMAL (10, 2) NULL,
    [AVAILABLE_SECS]                 DECIMAL (10, 2) NULL,
    [ACD_SECS]                       DECIMAL (10, 2) NULL,
    [OTHER_SECS]                     DECIMAL (10, 2) NULL,
    [ACW_SECS]                       DECIMAL (10, 2) NULL,
    [RING_SECS]                      DECIMAL (10, 2) NULL,
    [AUX_0_DEFAULT_SECS]             DECIMAL (10, 2) NULL,
    [AUX_1_BREAK_SECS]               DECIMAL (10, 2) NULL,
    [AUX_2_COACHING_SECS]            DECIMAL (10, 2) NULL,
    [AUX_3_MEETING_SECS]             DECIMAL (10, 2) NULL,
    [AUX_4_PROJECT_SECS]             DECIMAL (10, 2) NULL,
    [AUX_5_EGE_TRAINING_SECS]        DECIMAL (10, 2) NULL,
    [AUX_6_OUTBOUND_SECS]            DECIMAL (10, 2) NULL,
    [AUX_7_EMAIL_SECS]               DECIMAL (10, 2) NULL,
    [AUX_8_QUEUE_WORK_SECS]          DECIMAL (10, 2) NULL,
    [AUX_9_SYSTEM_DOWN_SECS]         DECIMAL (10, 2) NULL,
    [AUX_10_EXCHANGE_SECS]           DECIMAL (10, 2) NULL,
    [AUX_11_PERSONAL_SECS]           DECIMAL (10, 2) NULL,
    [AUX_34_SECS]                    DECIMAL (10, 2) NULL,
    [AUX_35_SECS]                    DECIMAL (10, 2) NULL,
    [AUX_37_SECS]                    DECIMAL (10, 2) NULL,
    [AUX_40_SECS]                    DECIMAL (10, 2) NULL,
    [OUTBOUND_SECS]                  DECIMAL (10, 2) NULL,
    [EMAIL_SECS]                     DECIMAL (10, 2) NULL,
    [PROJECT_SECS]                   DECIMAL (10, 2) NULL,
    [MEETING_SECS]                   DECIMAL (10, 2) NULL,
    [TOTAL_AUX_SECS]                 DECIMAL (10, 2) NULL,
    [PROD_BILLING_SECS]              DECIMAL (10, 2) NULL,
    [AUTHORIZED_CSAT_SAT_KEY_SECS]   DECIMAL (10, 2) NULL,
    [AUTHORIZED_RESOURCE_SECS]       DECIMAL (10, 2) NULL,
    [LINE_OF_BUSINESS]               VARCHAR (100)   NULL,
    [WEEKEND]                        CHAR (1)        NULL,
    [CPROD]                          DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]              DECIMAL (10, 2) NULL,
    [AUTHORIZED_MINUTES]             DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]          DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_INVOICING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_INVOICING_2]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_INVOICING_2] (
    [FF_LOGIN_ID]                    VARCHAR (200)   NULL,
    [FF_HOUR]                        VARCHAR (50)    NULL,
    [FF_STAFFED_TIME]                VARCHAR (50)    NULL,
    [FF_AVAIL_TIME]                  VARCHAR (50)    NULL,
    [FF_ACD_TIME]                    VARCHAR (50)    NULL,
    [FF_OTHER_TIME]                  VARCHAR (50)    NULL,
    [FF_ACW_TIME]                    VARCHAR (50)    NULL,
    [FF_AGENT_RING_TIME]             VARCHAR (50)    NULL,
    [FF_AUX_TIME]                    VARCHAR (50)    NULL,
    [FF_AUX_0_DEFAULT]               VARCHAR (50)    NULL,
    [FF_AUX_1_BREAK]                 VARCHAR (50)    NULL,
    [FF_AUX_2_COACHING]              VARCHAR (50)    NULL,
    [FF_AUX_3_MEETING]               VARCHAR (50)    NULL,
    [FF_AUX_4_PROJECT]               VARCHAR (50)    NULL,
    [FF_AUX_5_EGE_TRAINING]          VARCHAR (50)    NULL,
    [FF_AUX_6_OUTBOUND]              VARCHAR (50)    NULL,
    [FF_AUX_7_EMAIL]                 VARCHAR (50)    NULL,
    [FF_AUX_8_QUEUE_WORK]            VARCHAR (50)    NULL,
    [FF_AUX_9_SYSTEM_DOWN]           VARCHAR (50)    NULL,
    [FF_AUX_10_EXCHANGE]             VARCHAR (50)    NULL,
    [FF_AUX_11_PERSONAL]             VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_12]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_13]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_14]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_15]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_16]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_17]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_18]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_19]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_20]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_21]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_22]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_23]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_24]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_25]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_26]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_27]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_28]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_29]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_30]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_31]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_32]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_33]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_34]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_35]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_36]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_37]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_38]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_39]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_40]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_41]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_42]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_43]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_44]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_45]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_46]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_47]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_48]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_49]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_50]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_51]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_52]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_53]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_54]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_55]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_56]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_57]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_58]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_59]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_60]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_61]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_62]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_63]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_64]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_65]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_66]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_67]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_68]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_69]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_70]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_71]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_72]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_73]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_74]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_75]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_76]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_77]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_78]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_79]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_80]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_81]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_82]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_83]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_84]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_85]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_86]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_87]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_88]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_89]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_90]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_91]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_92]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_93]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_94]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_95]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_96]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_97]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_98]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_99]               VARCHAR (50)    NULL,
    [CMS_GROUP]                      VARCHAR (100)   NULL,
    [DATA_DATE]                      VARCHAR (50)    NULL,
    [DATETIME_CT]                    DATETIME        NULL,
    [DATETIME_PT]                    DATETIME        NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [STAFFED_SECS]                   DECIMAL (10, 2) NULL,
    [AVAILABLE_SECS]                 DECIMAL (10, 2) NULL,
    [ACD_SECS]                       DECIMAL (10, 2) NULL,
    [OTHER_SECS]                     DECIMAL (10, 2) NULL,
    [ACW_SECS]                       DECIMAL (10, 2) NULL,
    [RING_SECS]                      DECIMAL (10, 2) NULL,
    [AUX_0_DEFAULT_SECS]             DECIMAL (10, 2) NULL,
    [AUX_1_BREAK_SECS]               DECIMAL (10, 2) NULL,
    [AUX_2_COACHING_SECS]            DECIMAL (10, 2) NULL,
    [AUX_3_MEETING_SECS]             DECIMAL (10, 2) NULL,
    [AUX_4_PROJECT_SECS]             DECIMAL (10, 2) NULL,
    [AUX_5_EGE_TRAINING_SECS]        DECIMAL (10, 2) NULL,
    [AUX_6_OUTBOUND_SECS]            DECIMAL (10, 2) NULL,
    [AUX_7_EMAIL_SECS]               DECIMAL (10, 2) NULL,
    [AUX_8_QUEUE_WORK_SECS]          DECIMAL (10, 2) NULL,
    [AUX_9_SYSTEM_DOWN_SECS]         DECIMAL (10, 2) NULL,
    [AUX_10_EXCHANGE_SECS]           DECIMAL (10, 2) NULL,
    [AUX_11_PERSONAL_SECS]           DECIMAL (10, 2) NULL,
    [AUX_34_SECS]                    DECIMAL (10, 2) NULL,
    [AUX_35_SECS]                    DECIMAL (10, 2) NULL,
    [AUX_37_SECS]                    DECIMAL (10, 2) NULL,
    [AUX_40_SECS]                    DECIMAL (10, 2) NULL,
    [OUTBOUND_SECS]                  DECIMAL (10, 2) NULL,
    [EMAIL_SECS]                     DECIMAL (10, 2) NULL,
    [PROJECT_SECS]                   DECIMAL (10, 2) NULL,
    [MEETING_SECS]                   DECIMAL (10, 2) NULL,
    [TOTAL_AUX_SECS]                 DECIMAL (10, 2) NULL,
    [PROD_BILLING_SECS]              DECIMAL (10, 2) NULL,
    [AUTHORIZED_CSAT_SAT_KEY_SECS]   DECIMAL (10, 2) NULL,
    [AUTHORIZED_RESOURCE_SECS]       DECIMAL (10, 2) NULL,
    [LINE_OF_BUSINESS]               VARCHAR (100)   NULL,
    [WEEKEND]                        CHAR (1)        NULL,
    [CPROD]                          DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]              DECIMAL (10, 2) NULL,
    [AUTHORIZED_MINUTES]             DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]          DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME        NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_INVOICING_2] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_INVOICING_BAD]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_INVOICING_BAD] (
    [BAD_IMPORTS_CODE]               VARCHAR (3)     NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]          VARCHAR (3)     NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NOT NULL,
    [FF_LOGIN_ID]                    VARCHAR (200)   NULL,
    [FF_HOUR]                        VARCHAR (50)    NULL,
    [FF_STAFFED_TIME]                VARCHAR (50)    NULL,
    [FF_AVAIL_TIME]                  VARCHAR (50)    NULL,
    [FF_ACD_TIME]                    VARCHAR (50)    NULL,
    [FF_OTHER_TIME]                  VARCHAR (50)    NULL,
    [FF_ACW_TIME]                    VARCHAR (50)    NULL,
    [FF_AGENT_RING_TIME]             VARCHAR (50)    NULL,
    [FF_AUX_TIME]                    VARCHAR (50)    NULL,
    [FF_AUX_0_DEFAULT]               VARCHAR (50)    NULL,
    [FF_AUX_1_BREAK]                 VARCHAR (50)    NULL,
    [FF_AUX_2_COACHING]              VARCHAR (50)    NULL,
    [FF_AUX_3_MEETING]               VARCHAR (50)    NULL,
    [FF_AUX_4_PROJECT]               VARCHAR (50)    NULL,
    [FF_AUX_5_EGE_TRAINING]          VARCHAR (50)    NULL,
    [FF_AUX_6_OUTBOUND]              VARCHAR (50)    NULL,
    [FF_AUX_7_EMAIL]                 VARCHAR (50)    NULL,
    [FF_AUX_8_QUEUE_WORK]            VARCHAR (50)    NULL,
    [FF_AUX_9_SYSTEM_DOWN]           VARCHAR (50)    NULL,
    [FF_AUX_10_EXCHANGE]             VARCHAR (50)    NULL,
    [FF_AUX_11_PERSONAL]             VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_12]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_13]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_14]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_15]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_16]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_17]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_18]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_19]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_20]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_21]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_22]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_23]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_24]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_25]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_26]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_27]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_28]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_29]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_30]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_31]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_32]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_33]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_34]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_35]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_36]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_37]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_38]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_39]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_40]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_41]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_42]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_43]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_44]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_45]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_46]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_47]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_48]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_49]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_50]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_51]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_52]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_53]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_54]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_55]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_56]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_57]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_58]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_59]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_60]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_61]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_62]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_63]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_64]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_65]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_66]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_67]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_68]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_69]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_70]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_71]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_72]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_73]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_74]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_75]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_76]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_77]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_78]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_79]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_80]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_81]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_82]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_83]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_84]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_85]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_86]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_87]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_88]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_89]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_90]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_91]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_92]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_93]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_94]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_95]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_96]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_97]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_98]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_99]               VARCHAR (50)    NULL,
    [CMS_GROUP]                      VARCHAR (100)   NULL,
    [DATA_DATE]                      VARCHAR (50)    NULL,
    [DATETIME_CT]                    DATETIME        NULL,
    [DATETIME_PT]                    DATETIME        NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [STAFFED_SECS]                   DECIMAL (10, 2) NULL,
    [AVAILABLE_SECS]                 DECIMAL (10, 2) NULL,
    [ACD_SECS]                       DECIMAL (10, 2) NULL,
    [OTHER_SECS]                     DECIMAL (10, 2) NULL,
    [ACW_SECS]                       DECIMAL (10, 2) NULL,
    [RING_SECS]                      DECIMAL (10, 2) NULL,
    [AUX_0_DEFAULT_SECS]             DECIMAL (10, 2) NULL,
    [AUX_1_BREAK_SECS]               DECIMAL (10, 2) NULL,
    [AUX_2_COACHING_SECS]            DECIMAL (10, 2) NULL,
    [AUX_3_MEETING_SECS]             DECIMAL (10, 2) NULL,
    [AUX_4_PROJECT_SECS]             DECIMAL (10, 2) NULL,
    [AUX_5_EGE_TRAINING_SECS]        DECIMAL (10, 2) NULL,
    [AUX_6_OUTBOUND_SECS]            DECIMAL (10, 2) NULL,
    [AUX_7_EMAIL_SECS]               DECIMAL (10, 2) NULL,
    [AUX_8_QUEUE_WORK_SECS]          DECIMAL (10, 2) NULL,
    [AUX_9_SYSTEM_DOWN_SECS]         DECIMAL (10, 2) NULL,
    [AUX_10_EXCHANGE_SECS]           DECIMAL (10, 2) NULL,
    [AUX_11_PERSONAL_SECS]           DECIMAL (10, 2) NULL,
    [AUX_34_SECS]                    DECIMAL (10, 2) NULL,
    [AUX_35_SECS]                    DECIMAL (10, 2) NULL,
    [AUX_37_SECS]                    DECIMAL (10, 2) NULL,
    [AUX_40_SECS]                    DECIMAL (10, 2) NULL,
    [OUTBOUND_SECS]                  DECIMAL (10, 2) NULL,
    [EMAIL_SECS]                     DECIMAL (10, 2) NULL,
    [PROJECT_SECS]                   DECIMAL (10, 2) NULL,
    [MEETING_SECS]                   DECIMAL (10, 2) NULL,
    [TOTAL_AUX_SECS]                 DECIMAL (10, 2) NULL,
    [PROD_BILLING_SECS]              DECIMAL (10, 2) NULL,
    [AUTHORIZED_CSAT_SAT_KEY_SECS]   DECIMAL (10, 2) NULL,
    [AUTHORIZED_RESOURCE_SECS]       DECIMAL (10, 2) NULL,
    [LINE_OF_BUSINESS]               VARCHAR (100)   NULL,
    [WEEKEND]                        CHAR (1)        NULL,
    [CPROD]                          DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]              DECIMAL (10, 2) NULL,
    [AUTHORIZED_MINUTES]             DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]          DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_INVOICING_BAD] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_EGENCIA_INVOICING_BAD] UNIQUE NONCLUSTERED ([BAD_IMPORTS_CODE] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC, [DATETIME] ASC, [HOUR_INTERVAL] ASC, [WS_ROW_CREATED_TIME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_QA]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_QA] (
    [FF_TYPE]                              VARCHAR (50)  NULL,
    [FF_EVALUATOR_NAME]                    VARCHAR (100) NULL,
    [FF_EVALUATION_CREATION_DATE]          VARCHAR (50)  NULL,
    [FF_EVALUATION_MODIFICATION_DATE]      VARCHAR (50)  NULL,
    [FF_EVALUATED_NAME]                    VARCHAR (100) NULL,
    [FF_SCORE]                             VARCHAR (50)  NULL,
    [FF_REQUIRES_CALIBRATION]              VARCHAR (50)  NULL,
    [FF_REVIEWED_BY_EVALUATOR]             VARCHAR (50)  NULL,
    [FF_REVIEWED_BY_AGENT]                 VARCHAR (50)  NULL,
    [FF_EVALUATION_TYPE_DESCRIPTION]       VARCHAR (50)  NULL,
    [FF_BOUND_CONTACT_START_TIME]          VARCHAR (50)  NULL,
    [FF_BOUND_INTERACTION_START_TIME]      VARCHAR (50)  NULL,
    [FF_BASIC_SCORE]                       VARCHAR (50)  NULL,
    [FF_CALIBRATION_SCORE]                 VARCHAR (50)  NULL,
    [FF_EVALUATED_AGENT_ID]                VARCHAR (50)  NULL,
    [FF_EVALUATED_FIRST_NAME]              VARCHAR (50)  NULL,
    [FF_EVALUATED_LAST_NAME]               VARCHAR (50)  NULL,
    [FF_EVALUATION_COMMENT]                VARCHAR (500) NULL,
    [FF_EVALUATION_CREATED_BY_USER_ID]     VARCHAR (50)  NULL,
    [FF_EVALUATION_ID]                     VARCHAR (50)  NULL,
    [FF_EVALUATION_SITE_ID]                VARCHAR (50)  NULL,
    [FF_EVALUATOR_FIRST_NAME]              VARCHAR (50)  NULL,
    [FF_EVALUATOR_LAST_NAME]               VARCHAR (50)  NULL,
    [FF_FORM_ID]                           VARCHAR (50)  NULL,
    [FF_FORM_NAME]                         VARCHAR (50)  NULL,
    [FF_IS_CALIBRATION]                    VARCHAR (50)  NULL,
    [FF_ITEM_ADDED_ON]                     VARCHAR (50)  NULL,
    [FF_ORIGINAL_EVALUATION_TYPE]          VARCHAR (50)  NULL,
    [FF_QPLAN_TASK_NAME]                   VARCHAR (50)  NULL,
    [FF_QUALITY_PLAN_ID]                   VARCHAR (50)  NULL,
    [FF_QUALITY_PLAN_NAME]                 VARCHAR (50)  NULL,
    [FF_SEGMENT_ID_ATTACHED_TO_EVALUATION] VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]                     DATETIME      NOT NULL,
    [SEQNO]                                INT           NOT NULL,
    [FTP_FILE_NAME]                        VARCHAR (100) NOT NULL,
    [DATETIME]                             DATETIME      NULL,
    [HOUR_INTERVAL]                        VARCHAR (50)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY]       INT           NULL,
    [TENANT_KEY]                           INT           NULL,
    [RESOURCE_NAME]                        VARCHAR (100) NULL,
    [EMAIL]                                VARCHAR (100) NULL,
    [WS_ROW_CREATED_TIME]                  DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]                  DATETIME      NULL,
    [ID]                                   INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_QA] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_QA_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_QA_0_Audit] (
    [FF_TYPE]                              VARCHAR (50)  NULL,
    [FF_EVALUATOR_NAME]                    VARCHAR (100) NULL,
    [FF_EVALUATION_CREATION_DATE]          VARCHAR (50)  NULL,
    [FF_EVALUATION_MODIFICATION_DATE]      VARCHAR (50)  NULL,
    [FF_EVALUATED_NAME]                    VARCHAR (100) NULL,
    [FF_SCORE]                             VARCHAR (50)  NULL,
    [FF_REQUIRES_CALIBRATION]              VARCHAR (50)  NULL,
    [FF_REVIEWED_BY_EVALUATOR]             VARCHAR (50)  NULL,
    [FF_REVIEWED_BY_AGENT]                 VARCHAR (50)  NULL,
    [FF_EVALUATION_TYPE_DESCRIPTION]       VARCHAR (50)  NULL,
    [FF_BOUND_CONTACT_START_TIME]          VARCHAR (50)  NULL,
    [FF_BOUND_INTERACTION_START_TIME]      VARCHAR (50)  NULL,
    [FF_BASIC_SCORE]                       VARCHAR (50)  NULL,
    [FF_CALIBRATION_SCORE]                 VARCHAR (50)  NULL,
    [FF_EVALUATED_AGENT_ID]                VARCHAR (50)  NULL,
    [FF_EVALUATED_FIRST_NAME]              VARCHAR (50)  NULL,
    [FF_EVALUATED_LAST_NAME]               VARCHAR (50)  NULL,
    [FF_EVALUATION_COMMENT]                VARCHAR (500) NULL,
    [FF_EVALUATION_CREATED_BY_USER_ID]     VARCHAR (50)  NULL,
    [FF_EVALUATION_ID]                     VARCHAR (50)  NULL,
    [FF_EVALUATION_SITE_ID]                VARCHAR (50)  NULL,
    [FF_EVALUATOR_FIRST_NAME]              VARCHAR (50)  NULL,
    [FF_EVALUATOR_LAST_NAME]               VARCHAR (50)  NULL,
    [FF_FORM_ID]                           VARCHAR (50)  NULL,
    [FF_FORM_NAME]                         VARCHAR (50)  NULL,
    [FF_IS_CALIBRATION]                    VARCHAR (50)  NULL,
    [FF_ITEM_ADDED_ON]                     VARCHAR (50)  NULL,
    [FF_ORIGINAL_EVALUATION_TYPE]          VARCHAR (50)  NULL,
    [FF_QPLAN_TASK_NAME]                   VARCHAR (50)  NULL,
    [FF_QUALITY_PLAN_ID]                   VARCHAR (50)  NULL,
    [FF_QUALITY_PLAN_NAME]                 VARCHAR (50)  NULL,
    [FF_SEGMENT_ID_ATTACHED_TO_EVALUATION] VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]                     DATETIME      NOT NULL,
    [SEQNO]                                INT           NOT NULL,
    [FTP_FILE_NAME]                        VARCHAR (100) NOT NULL,
    [ID]                                   INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_QA_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_QA_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_QA_1] (
    [FF_TYPE]                              VARCHAR (50)  NULL,
    [FF_EVALUATOR_NAME]                    VARCHAR (100) NULL,
    [FF_EVALUATION_CREATION_DATE]          VARCHAR (50)  NULL,
    [FF_EVALUATION_MODIFICATION_DATE]      VARCHAR (50)  NULL,
    [FF_EVALUATED_NAME]                    VARCHAR (100) NULL,
    [FF_SCORE]                             VARCHAR (50)  NULL,
    [FF_REQUIRES_CALIBRATION]              VARCHAR (50)  NULL,
    [FF_REVIEWED_BY_EVALUATOR]             VARCHAR (50)  NULL,
    [FF_REVIEWED_BY_AGENT]                 VARCHAR (50)  NULL,
    [FF_EVALUATION_TYPE_DESCRIPTION]       VARCHAR (50)  NULL,
    [FF_BOUND_CONTACT_START_TIME]          VARCHAR (50)  NULL,
    [FF_BOUND_INTERACTION_START_TIME]      VARCHAR (50)  NULL,
    [FF_BASIC_SCORE]                       VARCHAR (50)  NULL,
    [FF_CALIBRATION_SCORE]                 VARCHAR (50)  NULL,
    [FF_EVALUATED_AGENT_ID]                VARCHAR (50)  NULL,
    [FF_EVALUATED_FIRST_NAME]              VARCHAR (50)  NULL,
    [FF_EVALUATED_LAST_NAME]               VARCHAR (50)  NULL,
    [FF_EVALUATION_COMMENT]                VARCHAR (500) NULL,
    [FF_EVALUATION_CREATED_BY_USER_ID]     VARCHAR (50)  NULL,
    [FF_EVALUATION_ID]                     VARCHAR (50)  NULL,
    [FF_EVALUATION_SITE_ID]                VARCHAR (50)  NULL,
    [FF_EVALUATOR_FIRST_NAME]              VARCHAR (50)  NULL,
    [FF_EVALUATOR_LAST_NAME]               VARCHAR (50)  NULL,
    [FF_FORM_ID]                           VARCHAR (50)  NULL,
    [FF_FORM_NAME]                         VARCHAR (50)  NULL,
    [FF_IS_CALIBRATION]                    VARCHAR (50)  NULL,
    [FF_ITEM_ADDED_ON]                     VARCHAR (50)  NULL,
    [FF_ORIGINAL_EVALUATION_TYPE]          VARCHAR (50)  NULL,
    [FF_QPLAN_TASK_NAME]                   VARCHAR (50)  NULL,
    [FF_QUALITY_PLAN_ID]                   VARCHAR (50)  NULL,
    [FF_QUALITY_PLAN_NAME]                 VARCHAR (50)  NULL,
    [FF_SEGMENT_ID_ATTACHED_TO_EVALUATION] VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]                     DATETIME      NOT NULL,
    [SEQNO]                                INT           NOT NULL,
    [FTP_FILE_NAME]                        VARCHAR (100) NOT NULL,
    [DATETIME]                             DATETIME      NULL,
    [HOUR_INTERVAL]                        VARCHAR (50)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY]       INT           NULL,
    [TENANT_KEY]                           INT           NULL,
    [ID]                                   INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_QA_1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_EGENCIA_QA_1] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_SA_WA]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_SA_WA] (
    [FF_LOGIN_ID]                    VARCHAR (200)   NOT NULL,
    [FF_HOUR]                        VARCHAR (50)    NULL,
    [FF_STAFFED_TIME]                VARCHAR (50)    NULL,
    [FF_AVAIL_TIME]                  VARCHAR (50)    NULL,
    [FF_ACD_TIME]                    VARCHAR (50)    NULL,
    [FF_OTHER_TIME]                  VARCHAR (50)    NULL,
    [FF_ACW_TIME]                    VARCHAR (50)    NULL,
    [FF_AGENT_RING_TIME]             VARCHAR (50)    NULL,
    [FF_AUX_TIME]                    VARCHAR (50)    NULL,
    [FF_AUX_0_DEFAULT]               VARCHAR (50)    NULL,
    [FF_AUX_1_BREAK]                 VARCHAR (50)    NULL,
    [FF_AUX_2_COACHING]              VARCHAR (50)    NULL,
    [FF_AUX_3_MEETING]               VARCHAR (50)    NULL,
    [FF_AUX_4_PROJECT]               VARCHAR (50)    NULL,
    [FF_AUX_5_EGE_TRAINING]          VARCHAR (50)    NULL,
    [FF_AUX_6_OUTBOUND]              VARCHAR (50)    NULL,
    [FF_AUX_7_EMAIL]                 VARCHAR (50)    NULL,
    [FF_AUX_8_QUEUE_WORK]            VARCHAR (50)    NULL,
    [FF_AUX_9_SYSTEM_DOWN]           VARCHAR (50)    NULL,
    [FF_AUX_10_EXCHANGE]             VARCHAR (50)    NULL,
    [FF_AUX_11_PERSONAL]             VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_12]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_13]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_14]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_15]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_16]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_17]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_18]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_19]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_20]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_21]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_22]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_23]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_24]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_25]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_26]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_27]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_28]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_29]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_30]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_31]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_32]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_33]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_34]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_35]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_36]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_37]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_38]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_39]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_40]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_41]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_42]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_43]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_44]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_45]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_46]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_47]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_48]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_49]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_50]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_51]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_52]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_53]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_54]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_55]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_56]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_57]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_58]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_59]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_60]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_61]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_62]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_63]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_64]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_65]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_66]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_67]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_68]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_69]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_70]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_71]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_72]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_73]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_74]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_75]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_76]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_77]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_78]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_79]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_80]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_81]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_82]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_83]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_84]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_85]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_86]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_87]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_88]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_89]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_90]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_91]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_92]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_93]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_94]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_95]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_96]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_97]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_98]               VARCHAR (50)    NULL,
    [FF_TI_AUXTIME_99]               VARCHAR (50)    NULL,
    [CMS_GROUP]                      VARCHAR (100)   NULL,
    [DATA_DATE]                      VARCHAR (50)    NULL,
    [DATETIME_CT]                    DATETIME        NULL,
    [DATETIME_PT]                    DATETIME        NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [STAFFED_SECS]                   DECIMAL (10, 2) NULL,
    [AVAILABLE_SECS]                 DECIMAL (10, 2) NULL,
    [ACD_SECS]                       DECIMAL (10, 2) NULL,
    [OTHER_SECS]                     DECIMAL (10, 2) NULL,
    [ACW_SECS]                       DECIMAL (10, 2) NULL,
    [RING_SECS]                      DECIMAL (10, 2) NULL,
    [AUX_0_DEFAULT_SECS]             DECIMAL (10, 2) NULL,
    [AUX_1_BREAK_SECS]               DECIMAL (10, 2) NULL,
    [AUX_2_COACHING_SECS]            DECIMAL (10, 2) NULL,
    [AUX_3_MEETING_SECS]             DECIMAL (10, 2) NULL,
    [AUX_4_PROJECT_SECS]             DECIMAL (10, 2) NULL,
    [AUX_5_EGE_TRAINING_SECS]        DECIMAL (10, 2) NULL,
    [AUX_6_OUTBOUND_SECS]            DECIMAL (10, 2) NULL,
    [AUX_7_EMAIL_SECS]               DECIMAL (10, 2) NULL,
    [AUX_8_QUEUE_WORK_SECS]          DECIMAL (10, 2) NULL,
    [AUX_9_SYSTEM_DOWN_SECS]         DECIMAL (10, 2) NULL,
    [AUX_10_EXCHANGE_SECS]           DECIMAL (10, 2) NULL,
    [AUX_11_PERSONAL_SECS]           DECIMAL (10, 2) NULL,
    [AUX_34_SECS]                    DECIMAL (10, 2) NULL,
    [AUX_35_SECS]                    DECIMAL (10, 2) NULL,
    [AUX_37_SECS]                    DECIMAL (10, 2) NULL,
    [AUX_40_SECS]                    DECIMAL (10, 2) NULL,
    [OUTBOUND_SECS]                  DECIMAL (10, 2) NULL,
    [EMAIL_SECS]                     DECIMAL (10, 2) NULL,
    [PROJECT_SECS]                   DECIMAL (10, 2) NULL,
    [MEETING_SECS]                   DECIMAL (10, 2) NULL,
    [TOTAL_AUX_SECS]                 DECIMAL (10, 2) NULL,
    [PROD_BILLING_SECS]              DECIMAL (10, 2) NULL,
    [AUTHORIZED_CSAT_SAT_KEY_SECS]   DECIMAL (10, 2) NULL,
    [AUTHORIZED_RESOURCE_SECS]       DECIMAL (10, 2) NULL,
    [LINE_OF_BUSINESS]               VARCHAR (100)   NULL,
    [WEEKEND]                        CHAR (1)        NULL,
    [CPROD]                          DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]              DECIMAL (10, 2) NULL,
    [AUTHORIZED_MINUTES]             DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NOT NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NOT NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]          DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME        NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_SA_WA] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_EGENCIA_SA_WA] UNIQUE NONCLUSTERED ([FF_LOGIN_ID] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [ID_EXT] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_SD_AIA_STATIC_DEFAULTS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_SD_AIA_STATIC_DEFAULTS] (
    [PLATFORM]                          VARCHAR (50)  NULL,
    [STATUS]                            VARCHAR (50)  NULL,
    [INVOICE_MAP_KEY]                   VARCHAR (50)  NULL,
    [FIELD_NAME]                        VARCHAR (100) NULL,
    [SCHEDULER_PROJECT_ID]              VARCHAR (50)  NULL,
    [SCHEDULER_ACL_NAME]                VARCHAR (100) NULL,
    [ACD_ID_EXTENSION]                  VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_ID]           VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]         VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_ID]            VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_NAME]          VARCHAR (50)  NULL,
    [PRIMARY_PROJECT_MANAGER_ID]        VARCHAR (150) NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID] VARCHAR (150) NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]       VARCHAR (150) NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]        VARCHAR (150) NULL,
    [INVOICE_SYSTEM_ID]                 VARCHAR (100) NULL,
    [HOLIDAY_INVOICE_ID]                VARCHAR (100) NULL,
    [HOLIDAY]                           VARCHAR (50)  NULL,
    [FILE_FORMAT_OF_PUSH]               VARCHAR (50)  NULL,
    [AGENT_PREPARATION_INVOICE_ID]      VARCHAR (50)  NULL,
    [NEW_ACL]                           VARCHAR (100) NULL,
    [CURRENT_CATS]                      VARCHAR (50)  NULL,
    [CATS_ID]                           VARCHAR (50)  NULL,
    [PATS_ID]                           VARCHAR (50)  NULL,
    [SMART_ELIGIBLE]                    VARCHAR (50)  NULL,
    [SMART_TIER_1]                      VARCHAR (50)  NULL,
    [SMART_TIER_2]                      VARCHAR (50)  NULL,
    [SMART_TIER_3]                      VARCHAR (50)  NULL,
    [INTERVAL]                          VARCHAR (50)  NULL,
    [TENANT_KEY]                        INT           NULL,
    [WS_ROW_CREATED_TIME]               DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]               DATETIME      NULL,
    [ID]                                INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_SD_AIA_STATIC_DEFAULTS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_SD_INVOICE_GROUPS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_SD_INVOICE_GROUPS] (
    [SCHEDULER_ACL_NAME]               VARCHAR (100)  NOT NULL,
    [ID_EXT]                           VARCHAR (3)    NOT NULL,
    [TENANT_KEY]                       INT            NOT NULL,
    [include_in_cas]                   VARCHAR (1)    NOT NULL,
    [ready_for_xml]                    VARCHAR (1)    NULL,
    [has_holidays]                     VARCHAR (1)    NOT NULL,
    [show_id_exts]                     VARCHAR (1)    NOT NULL,
    [include_in_universe_agent_invo]   VARCHAR (1)    NULL,
    [include_in_wsinet_usage]          VARCHAR (1)    NULL,
    [include_in_wslive_billing]        VARCHAR (1)    NULL,
    [include_in_olympics]              VARCHAR (1)    NULL,
    [include_in_novatel]               VARCHAR (1)    NULL,
    [include_in_wsol_exports]          VARCHAR (1)    NULL,
    [min_guarantee_minutes]            DECIMAL (6, 3) NULL,
    [min_guarantee_type]               VARCHAR (50)   NULL,
    [authorized_to_invoice_type]       VARCHAR (50)   NULL,
    [min_guarantee_flds]               VARCHAR (150)  NULL,
    [minguar_form]                     VARCHAR (500)  NULL,
    [invoice_formula]                  VARCHAR (500)  NULL,
    [pay_rate_standard]                DECIMAL (6, 3) NULL,
    [pay_rate_holiday]                 DECIMAL (6, 3) NULL,
    [is_client_team]                   VARCHAR (1)    NULL,
    [is_production_team]               VARCHAR (1)    NULL,
    [client_billing_master_group_name] VARCHAR (150)  NULL,
    [DLY_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [MTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WS_START_TIME]                    DATETIME       NULL,
    [WS_END_TIME]                      DATETIME       NULL,
    [WS_ROW_CREATED_TIME]              DATETIME       NULL,
    [WS_ROW_UPDATED_TIME]              DATETIME       NULL,
    [ID]                               INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_SD_INVOICE_GROUPS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_SD_INVOICE_HOLIDAYS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_SD_INVOICE_HOLIDAYS] (
    [HOLIDAY_DATE] SMALLDATETIME NOT NULL,
    [ID]           INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_INVOICE_HOLIDAYS] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_EGENCIA_INVOICE_HOLIDAYS] UNIQUE NONCLUSTERED ([HOLIDAY_DATE] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_SD_INVOICE_HOLIDAYS_ADDL]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_SD_INVOICE_HOLIDAYS_ADDL] (
    [HOLIDAY_DATE] DATETIME    NOT NULL,
    [ID_EXT]       VARCHAR (3) NOT NULL,
    [ID]           INT         IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_SD_INVOICE_HOLIDAYS_ADDL] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_EGENCIA_SD_INVOICE_HOLIDAYS_ADDL] UNIQUE NONCLUSTERED ([HOLIDAY_DATE] ASC, [ID_EXT] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA] (
    [PLATFORM]                           VARCHAR (50)    NULL,
    [STATUS]                             VARCHAR (50)    NULL,
    [INVOICE_MAP_KEY]                    VARCHAR (50)    NOT NULL,
    [FIELD_NAME]                         VARCHAR (100)   NULL,
    [SCHEDULER_PROJECT_ID]               VARCHAR (50)    NULL,
    [SCHEDULER_ACL_NAME]                 VARCHAR (100)   NULL,
    [ACD_ID_EXTENSION]                   VARCHAR (50)    NOT NULL,
    [OFFICIAL_WSOL_CLIENT_ID]            VARCHAR (50)    NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]          VARCHAR (50)    NULL,
    [OFFICIAL_ACD_CLIENT_ID]             VARCHAR (50)    NOT NULL,
    [OFFICIAL_ACD_CLIENT_NAME]           VARCHAR (50)    NULL,
    [PRIMARY_PROJECT_MANAGER_ID]         VARCHAR (150)   NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID]  VARCHAR (150)   NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]        VARCHAR (150)   NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]         VARCHAR (150)   NULL,
    [INVOICE_SYSTEM_ID]                  VARCHAR (100)   NULL,
    [HOLIDAY_INVOICE_ID]                 VARCHAR (100)   NULL,
    [HOLIDAY]                            VARCHAR (50)    NOT NULL,
    [FILE_FORMAT_OF_PUSH]                VARCHAR (50)    NULL,
    [AGENT_PREPARATION_INVOICE_ID]       VARCHAR (50)    NULL,
    [NEW_ACL]                            VARCHAR (50)    NULL,
    [CURRENT_CATS]                       VARCHAR (50)    NULL,
    [CATS_ID]                            VARCHAR (50)    NULL,
    [PATS_ID]                            VARCHAR (50)    NULL,
    [SMART_ELIGIBLE]                     VARCHAR (50)    NULL,
    [SMART_TIER_1]                       VARCHAR (50)    NULL,
    [SMART_TIER_2]                       VARCHAR (50)    NULL,
    [SMART_TIER_3]                       VARCHAR (50)    NULL,
    [INTERVAL]                           VARCHAR (50)    NULL,
    [DATE]                               VARCHAR (50)    NULL,
    [HOD_INTERVAL]                       VARCHAR (50)    NULL,
    [AU_DK_LOGGED_IN_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_AVAILABLE_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_TALK_DURATION]                DECIMAL (10, 2) NULL,
    [AU_DK_IB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_OB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_CONVENTIONAL_ACW]             DECIMAL (10, 2) NULL,
    [AU_DK_NR_DURATION]                  DECIMAL (10, 2) NULL,
    [AU_DK_PSEUDO_PRODUCTIVE_DURATION]   DECIMAL (10, 2) NULL,
    [AU_DK_ADJUSTED_NR_DURATION]         DECIMAL (10, 2) NULL,
    [AU_DK_TOTAL_PRODUCTIVE_DURATION]    DECIMAL (10, 2) NULL,
    [AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] DECIMAL (10, 2) NULL,
    [AU_DK_XFER_COUNT]                   INT             NULL,
    [AU_DK_HOLD_COUNT]                   INT             NULL,
    [AU_DK_CONFERENCE_COUNT]             INT             NULL,
    [AU_DK_CONSULT_COUNT]                INT             NULL,
    [AU_DK_PUP_COUNT]                    INT             NULL,
    [AU_DK_OFFERED_COUNT]                INT             NULL,
    [AU_DK_HANDLED_COUNT]                INT             NULL,
    [AU_DK_IB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_OB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_RONA_COUNT]                   INT             NULL,
    [AU_DK_AWR_COUNT]                    INT             NULL,
    [MINIMUM_GUARANTEE]                  DECIMAL (10, 2) NULL,
    [AUTHORIZED_TO_INVOICE]              DECIMAL (10, 2) NULL,
    [WEEK_ENDING_DATE]                   VARCHAR (10)    NULL,
    [PAY_CYCLE_CLOSURE_DATE]             VARCHAR (10)    NULL,
    [FTP_FILE_NAME]                      VARCHAR (100)   NOT NULL,
    [EMAIL]                              VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]     INT             NOT NULL,
    [CAL_DATE]                           DATETIME        NULL,
    [TENANT_KEY]                         INT             NOT NULL,
    [AIR_DAY_TYPE]                       VARCHAR (1)     NOT NULL,
    [AIR_ACW_FONT_COLOR]                 VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]                 DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                 VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]         VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                       VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                     VARCHAR (1)     NULL,
    [READY_FOR_XML]                      VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                       VARCHAR (1)     NULL,
    [INVOICE_ID]                         VARCHAR (100)   NULL,
    [RESOURCE_NAME]                      VARCHAR (100)   NULL,
    [AIRITKDUR]                          DECIMAL (10, 2) NULL,
    [AIRIACDUR]                          DECIMAL (10, 2) NULL,
    [WS_ROW_CREATED_TIME]                DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                DATETIME        NULL,
    [ID]                                 INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA] UNIQUE NONCLUSTERED ([INVOICE_MAP_KEY] ASC, [SCHEDULER_ACL_NAME] ASC, [ACD_ID_EXTENSION] ASC, [HOLIDAY] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [TENANT_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING] (
    [RESOURCE_NAME]        VARCHAR (100) NULL,
    [EMAIL]                VARCHAR (100) NULL,
    [INVOICE_MAP_KEY]      VARCHAR (50)  NOT NULL,
    [INVOICE_GROUP]        VARCHAR (50)  NOT NULL,
    [FTP_FILE_NAME]        VARCHAR (100) NULL,
    [CST_ROW_CREATED_TIME] DATETIME      NOT NULL,
    [CST_ROW_UPDATED_TIME] DATETIME      NULL,
    [ID]                   INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING] UNIQUE NONCLUSTERED ([INVOICE_MAP_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_1] (
    [RESOURCE_NAME]    VARCHAR (100) NULL,
    [FF_EMAIL_ADDRESS] VARCHAR (100) NULL,
    [INVOICE_MAP_KEY]  VARCHAR (50)  NOT NULL,
    [FF_INVOICE_GROUP] VARCHAR (50)  NULL,
    [FTP_FILE_NAME]    VARCHAR (100) NULL,
    [ID]               INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_ERRORS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_ERRORS] (
    [RESOURCE_NAME]         VARCHAR (100)  NULL,
    [EMAIL]                 VARCHAR (100)  NULL,
    [INVOICE_MAP_KEY]       VARCHAR (50)   NOT NULL,
    [INVOICE_GROUP]         VARCHAR (100)  NOT NULL,
    [FTP_FILE_NAME]         VARCHAR (100)  NULL,
    [WS_ROW_CREATED_TIME]   DATETIME       NULL,
    [IMPORT_SUB_GROUP_NAME] VARCHAR (100)  NULL,
    [ERROR_TAG]             VARCHAR (50)   NULL,
    [ERROR_MSG]             VARCHAR (2500) NULL,
    [ID]                    INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_ERRORS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GA_INVOICING]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GA_INVOICING] (
    [FF_RECORD_ID]                    VARCHAR (100)   NULL,
    [FF_DATE]                         VARCHAR (50)    NULL,
    [FF_AGENT_ID]                     VARCHAR (50)    NOT NULL,
    [FF_AGENT_NAME]                   VARCHAR (100)   NOT NULL,
    [SEQNO_ADDED_TIME]                DATETIME        NOT NULL,
    [SEQNO]                           INT             NOT NULL,
    [FTP_FILE_NAME]                   VARCHAR (100)   NOT NULL,
    [RESOURCE_NAME]                   VARCHAR (100)   NULL,
    [DATETIME]                        DATETIME        NULL,
    [HOUR_INTERVAL]                   INT             NULL,
    [EMPLOYEE_ID]                     VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY]  INT             NOT NULL,
    [LOGGED_IN_SECS]                  DECIMAL (10, 2) NULL,
    [READY_SECS]                      DECIMAL (10, 2) NULL,
    [READY_FOR_OUTBOUND_SECS]         DECIMAL (10, 2) NULL,
    [AWAY_SECS]                       DECIMAL (10, 2) NULL,
    [AWAY_BREAK_SECS]                 DECIMAL (10, 2) NULL,
    [AWAY_COMFORT_BREAK_SECS]         DECIMAL (10, 2) NULL,
    [BUSY_OUTBOUND_SECS]              DECIMAL (10, 2) NULL,
    [BUSY_INTERNAL_SECS]              DECIMAL (10, 2) NULL,
    [CALL_TRANSFERRED_SECS]           DECIMAL (10, 2) NULL,
    [WRAP_UP_AUTO_SECS]               DECIMAL (10, 2) NULL,
    [WRAP_UP_MANUAL_SECS]             DECIMAL (10, 2) NULL,
    [LOGGED_OUT_SECS]                 DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_SECS]              DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_PAPERWORK_SECS]    DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_LUNCH_SECS]        DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_TRAINING_SECS]     DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_MEETING_SECS]      DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_TEAM_MEETING_SECS] DECIMAL (10, 2) NULL,
    [TOTAL_READY_SECS]                DECIMAL (10, 2) NULL,
    [TOTAL_BUSY_SECS]                 DECIMAL (10, 2) NULL,
    [TOTAL_AWAY_SECS]                 DECIMAL (10, 2) NULL,
    [TOTAL_WRAP_SECS]                 DECIMAL (10, 2) NULL,
    [TOTAL_EXTENDED_AWAY_SECS]        DECIMAL (10, 2) NULL,
    [OUTBOUND_CALLS]                  INT             NULL,
    [CALLS_TRANSFERRED]               INT             NULL,
    [CPROD]                           DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]               DECIMAL (10, 2) NULL,
    [AUTHORIZED_SECS]                 DECIMAL (10, 2) NULL,
    [EMAIL]                           VARCHAR (100)   NULL,
    [ID_EXT]                          VARCHAR (3)     NOT NULL,
    [SCHEDULER_ACL_NAME]              VARCHAR (50)    NULL,
    [CAL_DATE]                        DATETIME        NULL,
    [TENANT_KEY]                      INT             NULL,
    [AIR_DAY_TYPE]                    VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]              VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]           DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]              VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]      VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                    VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                  VARCHAR (1)     NULL,
    [READY_FOR_XML]                   VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                    VARCHAR (1)     NULL,
    [INVOICE_ID]                      VARCHAR (50)    NOT NULL,
    [WS_ROW_CREATED_TIME]             DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]             DATETIME        NULL,
    [ID]                              INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GA_INVOICING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_GA_INVOICING] UNIQUE NONCLUSTERED ([FF_AGENT_ID] ASC, [FF_AGENT_NAME] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [ID_EXT] ASC, [INVOICE_ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GA_INVOICING_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GA_INVOICING_0_Audit] (
    [FF_RECORD_ID]      VARCHAR (100) NULL,
    [FF_DATE]           VARCHAR (50)  NULL,
    [FF_AGENT_ID]       VARCHAR (50)  NULL,
    [FF_AGENT_NAME]     VARCHAR (100) NULL,
    [FF_EVENT_KEY]      VARCHAR (200) NULL,
    [FF_START_TIME]     VARCHAR (50)  NULL,
    [FF_AGENT_STATE]    VARCHAR (100) NULL,
    [FF_STATE_DURATION] VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]  DATETIME      NOT NULL,
    [SEQNO]             INT           NOT NULL,
    [FTP_FILE_NAME]     VARCHAR (100) NOT NULL,
    [ID]                INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GA_INVOICING_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_GA_INVOICING_0_Audit] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GA_INVOICING_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GA_INVOICING_1] (
    [FF1]                 VARCHAR (100) NULL,
    [FF2]                 VARCHAR (50)  NULL,
    [FF3]                 VARCHAR (50)  NULL,
    [FF4]                 VARCHAR (100) NULL,
    [FF5]                 VARCHAR (200) NULL,
    [FF6]                 VARCHAR (50)  NULL,
    [FF7]                 VARCHAR (100) NULL,
    [FF8]                 VARCHAR (50)  NULL,
    [EVENT_START_TIME]    DATETIME      NULL,
    [EVENT_DURATION_SECS] FLOAT (53)    NULL,
    [SEQNO_ADDED_TIME]    DATETIME      NOT NULL,
    [SEQNO]               INT           NOT NULL,
    [FTP_FILE_NAME]       VARCHAR (100) NOT NULL,
    [ID]                  INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GA_INVOICING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GA_INVOICING_2]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GA_INVOICING_2] (
    [FF_RECORD_ID]                    VARCHAR (100)   NULL,
    [FF_DATE]                         VARCHAR (50)    NULL,
    [FF_AGENT_ID]                     VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                   VARCHAR (100)   NULL,
    [FF_EVENT_KEY]                    VARCHAR (200)   NULL,
    [FF_EVENT_START_TIME]             VARCHAR (50)    NULL,
    [FF_AGENT_STATE]                  VARCHAR (100)   NULL,
    [FF_EVENT_DURATION]               VARCHAR (50)    NULL,
    [EVENT_START_TIME]                DATETIME        NULL,
    [EVENT_DURATION_SECS]             DECIMAL (10, 2) NULL,
    [INTERVAL_START_TIME]             DATETIME        NOT NULL,
    [INTERVAL_END_TIME]               DATETIME        NOT NULL,
    [EVENT_DURATION_IN_INTERVAL_SECS] FLOAT (53)      NOT NULL,
    [SEQNO_ADDED_TIME]                DATETIME        NOT NULL,
    [SEQNO]                           INT             NOT NULL,
    [FTP_FILE_NAME]                   VARCHAR (100)   NOT NULL,
    [OUTBOUND_CALLS]                  INT             NULL,
    [CALLS_TRANSFERRED]               INT             NULL,
    [ID]                              INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GA_INVOICING_2] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GA_INVOICING_3]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GA_INVOICING_3] (
    [FF_RECORD_ID]                    VARCHAR (100)   NULL,
    [FF_DATE]                         VARCHAR (50)    NULL,
    [FF_AGENT_ID]                     VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                   VARCHAR (100)   NULL,
    [FF_EVENT_KEY]                    VARCHAR (200)   NULL,
    [FF_EVENT_START_TIME]             VARCHAR (50)    NULL,
    [FF_AGENT_STATE]                  VARCHAR (100)   NULL,
    [FF_EVENT_DURATION]               VARCHAR (50)    NULL,
    [EVENT_DURATION_SECS]             DECIMAL (10, 2) NULL,
    [EVENT_DURATION_IN_INTERVAL_SECS] FLOAT (53)      NOT NULL,
    [SEQNO_ADDED_TIME]                DATETIME        NOT NULL,
    [SEQNO]                           INT             NOT NULL,
    [FTP_FILE_NAME]                   VARCHAR (100)   NOT NULL,
    [RESOURCE_NAME]                   VARCHAR (100)   NULL,
    [DATETIME]                        DATETIME        NULL,
    [HOUR_INTERVAL]                   INT             NULL,
    [EMPLOYEE_ID]                     VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY]  INT             NULL,
    [LOGGED_IN_SECS]                  DECIMAL (10, 2) NULL,
    [READY_SECS]                      DECIMAL (10, 2) NULL,
    [READY_FOR_OUTBOUND_SECS]         DECIMAL (10, 2) NULL,
    [AWAY_SECS]                       DECIMAL (10, 2) NULL,
    [AWAY_BREAK_SECS]                 DECIMAL (10, 2) NULL,
    [AWAY_COMFORT_BREAK_SECS]         DECIMAL (10, 2) NULL,
    [BUSY_OUTBOUND_SECS]              DECIMAL (10, 2) NULL,
    [BUSY_INTERNAL_SECS]              DECIMAL (10, 2) NULL,
    [CALL_TRANSFERRED_SECS]           DECIMAL (10, 2) NULL,
    [WRAP_UP_AUTO_SECS]               DECIMAL (10, 2) NULL,
    [WRAP_UP_MANUAL_SECS]             DECIMAL (10, 2) NULL,
    [LOGGED_OUT_SECS]                 DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_SECS]              DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_PAPERWORK_SECS]    DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_LUNCH_SECS]        DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_TRAINING_SECS]     DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_MEETING_SECS]      DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_TEAM_MEETING_SECS] DECIMAL (10, 2) NULL,
    [TOTAL_READY_SECS]                DECIMAL (10, 2) NULL,
    [TOTAL_BUSY_SECS]                 DECIMAL (10, 2) NULL,
    [TOTAL_AWAY_SECS]                 DECIMAL (10, 2) NULL,
    [TOTAL_WRAP_SECS]                 DECIMAL (10, 2) NULL,
    [TOTAL_EXTENDED_AWAY_SECS]        DECIMAL (10, 2) NULL,
    [OUTBOUND_CALLS]                  INT             NULL,
    [CALLS_TRANSFERRED]               INT             NULL,
    [CPROD]                           DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]               DECIMAL (10, 2) NULL,
    [AUTHORIZED_SECS]                 DECIMAL (10, 2) NULL,
    [EMAIL]                           VARCHAR (100)   NULL,
    [ID_EXT]                          VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]              VARCHAR (50)    NULL,
    [CAL_DATE]                        DATETIME        NULL,
    [TENANT_KEY]                      INT             NULL,
    [AIR_DAY_TYPE]                    VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]              VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]           DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]              VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]      VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                    VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                  VARCHAR (1)     NULL,
    [READY_FOR_XML]                   VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                    VARCHAR (1)     NULL,
    [INVOICE_ID]                      VARCHAR (50)    NULL,
    [WS_ROW_CREATED_TIME]             DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]             DATETIME        NULL,
    [ID]                              INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GA_INVOICING_3] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GA_INVOICING_4]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GA_INVOICING_4] (
    [FF_RECORD_ID]                    VARCHAR (100)   NULL,
    [FF_DATE]                         VARCHAR (50)    NULL,
    [FF_AGENT_ID]                     VARCHAR (50)    NOT NULL,
    [FF_AGENT_NAME]                   VARCHAR (100)   NOT NULL,
    [SEQNO_ADDED_TIME]                DATETIME        NOT NULL,
    [SEQNO]                           INT             NOT NULL,
    [FTP_FILE_NAME]                   VARCHAR (100)   NOT NULL,
    [RESOURCE_NAME]                   VARCHAR (100)   NULL,
    [DATETIME]                        DATETIME        NULL,
    [HOUR_INTERVAL]                   INT             NULL,
    [EMPLOYEE_ID]                     VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY]  INT             NOT NULL,
    [LOGGED_IN_SECS]                  DECIMAL (10, 2) NULL,
    [READY_SECS]                      DECIMAL (10, 2) NULL,
    [READY_FOR_OUTBOUND_SECS]         DECIMAL (10, 2) NULL,
    [AWAY_SECS]                       DECIMAL (10, 2) NULL,
    [AWAY_BREAK_SECS]                 DECIMAL (10, 2) NULL,
    [AWAY_COMFORT_BREAK_SECS]         DECIMAL (10, 2) NULL,
    [BUSY_OUTBOUND_SECS]              DECIMAL (10, 2) NULL,
    [BUSY_INTERNAL_SECS]              DECIMAL (10, 2) NULL,
    [CALL_TRANSFERRED_SECS]           DECIMAL (10, 2) NULL,
    [WRAP_UP_AUTO_SECS]               DECIMAL (10, 2) NULL,
    [WRAP_UP_MANUAL_SECS]             DECIMAL (10, 2) NULL,
    [LOGGED_OUT_SECS]                 DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_SECS]              DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_PAPERWORK_SECS]    DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_LUNCH_SECS]        DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_TRAINING_SECS]     DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_MEETING_SECS]      DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_TEAM_MEETING_SECS] DECIMAL (10, 2) NULL,
    [TOTAL_READY_SECS]                DECIMAL (10, 2) NULL,
    [TOTAL_BUSY_SECS]                 DECIMAL (10, 2) NULL,
    [TOTAL_AWAY_SECS]                 DECIMAL (10, 2) NULL,
    [TOTAL_WRAP_SECS]                 DECIMAL (10, 2) NULL,
    [TOTAL_EXTENDED_AWAY_SECS]        DECIMAL (10, 2) NULL,
    [OUTBOUND_CALLS]                  INT             NULL,
    [CALLS_TRANSFERRED]               INT             NULL,
    [CPROD]                           DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]               DECIMAL (10, 2) NULL,
    [AUTHORIZED_SECS]                 DECIMAL (10, 2) NULL,
    [EMAIL]                           VARCHAR (100)   NULL,
    [ID_EXT]                          VARCHAR (3)     NOT NULL,
    [SCHEDULER_ACL_NAME]              VARCHAR (50)    NULL,
    [CAL_DATE]                        DATETIME        NULL,
    [TENANT_KEY]                      INT             NULL,
    [AIR_DAY_TYPE]                    VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]              VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]           DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]              VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]      VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                    VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                  VARCHAR (1)     NULL,
    [READY_FOR_XML]                   VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                    VARCHAR (1)     NULL,
    [INVOICE_ID]                      VARCHAR (50)    NOT NULL,
    [WS_ROW_CREATED_TIME]             DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]             DATETIME        NULL,
    [ID]                              INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GA_INVOICING_4] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_GA_INVOICING_4] UNIQUE NONCLUSTERED ([FF_AGENT_ID] ASC, [FF_AGENT_NAME] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [ID_EXT] ASC, [INVOICE_ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GA_INVOICING_BAD]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GA_INVOICING_BAD] (
    [BAD_IMPORTS_CODE]                VARCHAR (3)     NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]           VARCHAR (3)     NULL,
    [FF_RECORD_ID]                    VARCHAR (100)   NULL,
    [FF_DATE]                         VARCHAR (50)    NULL,
    [FF_AGENT_ID]                     VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                   VARCHAR (100)   NULL,
    [FF_EVENT_KEY]                    VARCHAR (200)   NULL,
    [FF_EVENT_START_TIME]             VARCHAR (50)    NULL,
    [FF_AGENT_STATE]                  VARCHAR (100)   NULL,
    [FF_EVENT_DURATION]               VARCHAR (50)    NULL,
    [EVENT_DURATION_SECS]             DECIMAL (10, 2) NULL,
    [EVENT_DURATION_IN_INTERVAL_SECS] FLOAT (53)      NOT NULL,
    [SEQNO_ADDED_TIME]                DATETIME        NOT NULL,
    [SEQNO]                           INT             NOT NULL,
    [FTP_FILE_NAME]                   VARCHAR (100)   NOT NULL,
    [RESOURCE_NAME]                   VARCHAR (100)   NULL,
    [DATETIME]                        DATETIME        NOT NULL,
    [HOUR_INTERVAL]                   INT             NULL,
    [EMPLOYEE_ID]                     VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY]  INT             NULL,
    [LOGGED_IN_SECS]                  DECIMAL (10, 2) NULL,
    [READY_SECS]                      DECIMAL (10, 2) NULL,
    [READY_FOR_OUTBOUND_SECS]         DECIMAL (10, 2) NULL,
    [AWAY_SECS]                       DECIMAL (10, 2) NULL,
    [AWAY_BREAK_SECS]                 DECIMAL (10, 2) NULL,
    [AWAY_COMFORT_BREAK_SECS]         DECIMAL (10, 2) NULL,
    [BUSY_OUTBOUND_SECS]              DECIMAL (10, 2) NULL,
    [BUSY_INTERNAL_SECS]              DECIMAL (10, 2) NULL,
    [CALL_TRANSFERRED_SECS]           DECIMAL (10, 2) NULL,
    [WRAP_UP_AUTO_SECS]               DECIMAL (10, 2) NULL,
    [WRAP_UP_MANUAL_SECS]             DECIMAL (10, 2) NULL,
    [LOGGED_OUT_SECS]                 DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_SECS]              DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_PAPERWORK_SECS]    DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_LUNCH_SECS]        DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_TRAINING_SECS]     DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_MEETING_SECS]      DECIMAL (10, 2) NULL,
    [EXTENDED_AWAY_TEAM_MEETING_SECS] DECIMAL (10, 2) NULL,
    [TOTAL_READY_SECS]                DECIMAL (10, 2) NULL,
    [TOTAL_BUSY_SECS]                 DECIMAL (10, 2) NULL,
    [TOTAL_AWAY_SECS]                 DECIMAL (10, 2) NULL,
    [TOTAL_WRAP_SECS]                 DECIMAL (10, 2) NULL,
    [TOTAL_EXTENDED_AWAY_SECS]        DECIMAL (10, 2) NULL,
    [OUTBOUND_CALLS]                  INT             NULL,
    [CALLS_TRANSFERRED]               INT             NULL,
    [CPROD]                           DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]               DECIMAL (10, 2) NULL,
    [AUTHORIZED_SECS]                 DECIMAL (10, 2) NULL,
    [EMAIL]                           VARCHAR (100)   NULL,
    [ID_EXT]                          VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]              VARCHAR (50)    NULL,
    [CAL_DATE]                        DATETIME        NULL,
    [TENANT_KEY]                      INT             NULL,
    [AIR_DAY_TYPE]                    VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]              VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]              DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]              VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]      VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                    VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                  VARCHAR (1)     NULL,
    [READY_FOR_XML]                   VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                    VARCHAR (1)     NULL,
    [INVOICE_ID]                      VARCHAR (50)    NULL,
    [WS_ROW_CREATED_TIME]             DATETIME        NOT NULL,
    [WS_ROW_UPDATED_TIME]             DATETIME        NULL,
    [ID]                              INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GA_INVOICING_BAD] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_GA_INVOICING_BAD] UNIQUE NONCLUSTERED ([BAD_IMPORTS_CODE] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC, [DATETIME] ASC, [WS_ROW_CREATED_TIME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GA_SD_AIA_STATIC_DEFAULTS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GA_SD_AIA_STATIC_DEFAULTS] (
    [PLATFORM]                          VARCHAR (50)  NULL,
    [STATUS]                            VARCHAR (50)  NULL,
    [INVOICE_MAP_KEY]                   VARCHAR (50)  NULL,
    [FIELD_NAME]                        VARCHAR (50)  NULL,
    [SCHEDULER_PROJECT_ID]              VARCHAR (50)  NULL,
    [SCHEDULER_ACL_NAME]                VARCHAR (50)  NULL,
    [ACD_ID_EXTENSION]                  VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_ID]           VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]         VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_ID]            VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_NAME]          VARCHAR (50)  NULL,
    [PRIMARY_PROJECT_MANAGER_ID]        VARCHAR (150) NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID] VARCHAR (150) NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]       VARCHAR (150) NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]        VARCHAR (150) NULL,
    [INVOICE_SYSTEM_ID]                 VARCHAR (50)  NULL,
    [HOLIDAY_INVOICE_ID]                VARCHAR (50)  NULL,
    [HOLIDAY]                           VARCHAR (50)  NULL,
    [FILE_FORMAT_OF_PUSH]               VARCHAR (50)  NULL,
    [AGENT_PREPARATION_INVOICE_ID]      VARCHAR (50)  NULL,
    [NEW_ACL]                           VARCHAR (50)  NULL,
    [CURRENT_CATS]                      VARCHAR (50)  NULL,
    [CATS_ID]                           VARCHAR (50)  NULL,
    [PATS_ID]                           VARCHAR (50)  NULL,
    [SMART_ELIGIBLE]                    VARCHAR (50)  NULL,
    [SMART_TIER_1]                      VARCHAR (50)  NULL,
    [SMART_TIER_2]                      VARCHAR (50)  NULL,
    [SMART_TIER_3]                      VARCHAR (50)  NULL,
    [INTERVAL]                          VARCHAR (50)  NULL,
    [TENANT_KEY]                        INT           NULL,
    [WS_ROW_CREATED_TIME]               DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]               DATETIME      NULL,
    [ID]                                INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GA_SD_AIA_STATIC_DEFAULTS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GA_SD_INVOICE_GROUPS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GA_SD_INVOICE_GROUPS] (
    [SCHEDULER_ACL_NAME]               VARCHAR (100)  NOT NULL,
    [ID_EXT]                           VARCHAR (3)    NOT NULL,
    [TENANT_KEY]                       INT            NOT NULL,
    [include_in_cas]                   VARCHAR (1)    NOT NULL,
    [ready_for_xml]                    VARCHAR (1)    NULL,
    [has_holidays]                     VARCHAR (1)    NOT NULL,
    [show_id_exts]                     VARCHAR (1)    NOT NULL,
    [include_in_universe_agent_invo]   VARCHAR (1)    NULL,
    [include_in_wsinet_usage]          VARCHAR (1)    NULL,
    [include_in_wslive_billing]        VARCHAR (1)    NULL,
    [include_in_olympics]              VARCHAR (1)    NULL,
    [include_in_novatel]               VARCHAR (1)    NULL,
    [include_in_wsol_exports]          VARCHAR (1)    NULL,
    [min_guarantee_minutes]            DECIMAL (6, 3) NULL,
    [min_guarantee_type]               VARCHAR (50)   NULL,
    [authorized_to_invoice_type]       VARCHAR (50)   NULL,
    [min_guarantee_flds]               VARCHAR (150)  NULL,
    [minguar_form]                     VARCHAR (500)  NULL,
    [invoice_formula]                  VARCHAR (500)  NULL,
    [pay_rate_standard]                DECIMAL (6, 3) NULL,
    [pay_rate_holiday]                 DECIMAL (6, 3) NULL,
    [is_client_team]                   VARCHAR (1)    NULL,
    [is_production_team]               VARCHAR (1)    NULL,
    [client_billing_master_group_name] VARCHAR (150)  NULL,
    [DLY_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [MTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WS_START_TIME]                    DATETIME       NULL,
    [WS_END_TIME]                      DATETIME       NULL,
    [WS_ROW_CREATED_TIME]              DATETIME       NULL,
    [WS_ROW_UPDATED_TIME]              DATETIME       NULL,
    [ID]                               INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GA_SD_INVOICE_GROUPS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GA_SD_INVOICE_HOLIDAYS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GA_SD_INVOICE_HOLIDAYS] (
    [HOLIDAY_DATE] SMALLDATETIME NOT NULL,
    [ID]           INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GA_INVOICE_HOLIDAYS] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_GA_INVOICE_HOLIDAYS] UNIQUE NONCLUSTERED ([HOLIDAY_DATE] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GA_SD_INVOICE_HOLIDAYS_ADDL]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GA_SD_INVOICE_HOLIDAYS_ADDL] (
    [HOLIDAY_DATE] DATETIME    NOT NULL,
    [ID_EXT]       VARCHAR (3) NOT NULL,
    [ID]           INT         IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GA_SD_INVOICE_HOLIDAYS_ADDL] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GA_UV_ANT_AIA]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GA_UV_ANT_AIA] (
    [PLATFORM]                           VARCHAR (50)    NULL,
    [STATUS]                             VARCHAR (50)    NULL,
    [INVOICE_MAP_KEY]                    VARCHAR (50)    NOT NULL,
    [FIELD_NAME]                         VARCHAR (50)    NULL,
    [SCHEDULER_PROJECT_ID]               VARCHAR (50)    NULL,
    [SCHEDULER_ACL_NAME]                 VARCHAR (50)    NOT NULL,
    [ACD_ID_EXTENSION]                   VARCHAR (50)    NOT NULL,
    [OFFICIAL_WSOL_CLIENT_ID]            VARCHAR (50)    NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]          VARCHAR (50)    NULL,
    [OFFICIAL_ACD_CLIENT_ID]             VARCHAR (50)    NOT NULL,
    [OFFICIAL_ACD_CLIENT_NAME]           VARCHAR (50)    NULL,
    [PRIMARY_PROJECT_MANAGER_ID]         VARCHAR (150)   NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID]  VARCHAR (150)   NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]        VARCHAR (150)   NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]         VARCHAR (150)   NULL,
    [INVOICE_SYSTEM_ID]                  VARCHAR (50)    NOT NULL,
    [HOLIDAY_INVOICE_ID]                 VARCHAR (50)    NOT NULL,
    [HOLIDAY]                            VARCHAR (50)    NOT NULL,
    [FILE_FORMAT_OF_PUSH]                VARCHAR (50)    NULL,
    [AGENT_PREPARATION_INVOICE_ID]       VARCHAR (50)    NULL,
    [NEW_ACL]                            VARCHAR (50)    NULL,
    [CURRENT_CATS]                       VARCHAR (50)    NULL,
    [CATS_ID]                            VARCHAR (50)    NULL,
    [PATS_ID]                            VARCHAR (50)    NULL,
    [SMART_ELIGIBLE]                     VARCHAR (50)    NULL,
    [SMART_TIER_1]                       VARCHAR (50)    NULL,
    [SMART_TIER_2]                       VARCHAR (50)    NULL,
    [SMART_TIER_3]                       VARCHAR (50)    NULL,
    [INTERVAL]                           VARCHAR (50)    NULL,
    [DATE]                               VARCHAR (50)    NULL,
    [HOD_INTERVAL]                       VARCHAR (50)    NULL,
    [AU_DK_LOGGED_IN_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_AVAILABLE_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_TALK_DURATION]                DECIMAL (10, 2) NULL,
    [AU_DK_IB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_OB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_CONVENTIONAL_ACW]             DECIMAL (10, 2) NULL,
    [AU_DK_NR_DURATION]                  DECIMAL (10, 2) NULL,
    [AU_DK_PSEUDO_PRODUCTIVE_DURATION]   DECIMAL (10, 2) NULL,
    [AU_DK_ADJUSTED_NR_DURATION]         DECIMAL (10, 2) NULL,
    [AU_DK_TOTAL_PRODUCTIVE_DURATION]    DECIMAL (10, 2) NULL,
    [AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] DECIMAL (10, 2) NULL,
    [AU_DK_XFER_COUNT]                   INT             NULL,
    [AU_DK_HOLD_COUNT]                   INT             NULL,
    [AU_DK_CONFERENCE_COUNT]             INT             NULL,
    [AU_DK_CONSULT_COUNT]                INT             NULL,
    [AU_DK_PUP_COUNT]                    INT             NULL,
    [AU_DK_OFFERED_COUNT]                INT             NULL,
    [AU_DK_HANDLED_COUNT]                INT             NULL,
    [AU_DK_IB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_OB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_RONA_COUNT]                   INT             NULL,
    [AU_DK_AWR_COUNT]                    INT             NULL,
    [MINIMUM_GUARANTEE]                  DECIMAL (10, 2) NULL,
    [AUTHORIZED_TO_INVOICE]              DECIMAL (10, 2) NULL,
    [WEEK_ENDING_DATE]                   VARCHAR (10)    NULL,
    [PAY_CYCLE_CLOSURE_DATE]             VARCHAR (10)    NULL,
    [FTP_FILE_NAME]                      VARCHAR (100)   NOT NULL,
    [EMAIL]                              VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]     INT             NOT NULL,
    [CAL_DATE]                           DATETIME        NULL,
    [TENANT_KEY]                         INT             NOT NULL,
    [AIR_DAY_TYPE]                       VARCHAR (1)     NOT NULL,
    [AIR_ACW_FONT_COLOR]                 VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]                 DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                 VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]         VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                       VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                     VARCHAR (1)     NULL,
    [READY_FOR_XML]                      VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                       VARCHAR (1)     NULL,
    [INVOICE_ID]                         VARCHAR (50)    NULL,
    [RESOURCE_NAME]                      VARCHAR (100)   NULL,
    [AIRITKDUR]                          DECIMAL (10, 2) NULL,
    [AIRIACDUR]                          DECIMAL (10, 2) NULL,
    [WS_ROW_CREATED_TIME]                DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                DATETIME        NULL,
    [ID]                                 INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GA_UV_ANT_AIA] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_GA_UV_ANT_AIA] UNIQUE NONCLUSTERED ([INVOICE_MAP_KEY] ASC, [SCHEDULER_ACL_NAME] ASC, [ACD_ID_EXTENSION] ASC, [HOLIDAY] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [TENANT_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING] (
    [FF_DATE]                               VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]                VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                         VARCHAR (100)   NOT NULL,
    [FF_UNAVAILABLE_CODE]                   VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                         VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                          VARCHAR (50)    NOT NULL,
    [FF_LOGIN_TIME]                         VARCHAR (50)    NULL,
    [FF_AVAILABLE_TIME]                     VARCHAR (50)    NULL,
    [FF_UNAVAILABLE_TIME_MINUS_ACW]         VARCHAR (50)    NULL,
    [FF_TALK_TIME]                          VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                          VARCHAR (50)    NULL,
    [FF_ACW_TIME]                           VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]                      DATETIME        NOT NULL,
    [SEQNO]                                 INT             NOT NULL,
    [FTP_FILE_NAME]                         VARCHAR (100)   NOT NULL,
    [DATETIME]                              DATETIME        NULL,
    [HOUR_INTERVAL]                         INT             NULL,
    [AGENT_NAME]                            VARCHAR (50)    NULL,
    [SKILL_NAME]                            VARCHAR (50)    NULL,
    [TEAM_NAME]                             VARCHAR (50)    NULL,
    [LOGIN_TIME]                            DECIMAL (10, 2) NULL,
    [AVAILABLE_TIME]                        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SYSTEM_PENDING_TIME]       DECIMAL (10, 2) NULL,
    [UNAVAILABLE_HELD_PARTY_ABANDONED_TIME] DECIMAL (10, 2) NULL,
    [UNAVAILABLE_DEDICATED_RESOURCE_TIME]   DECIMAL (10, 2) NULL,
    [UNAVAILABLE_TIME_MINUS_ACW]            DECIMAL (10, 2) NULL,
    [TALK_TIME]                             DECIMAL (10, 2) NULL,
    [HOLD_TIME]                             DECIMAL (10, 2) NULL,
    [ACW_TIME]                              DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]               DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                            DECIMAL (10, 2) NULL,
    [CPROD]                                 DECIMAL (10, 2) NULL,
    [MING]                                  DECIMAL (10, 2) NULL,
    [AUT2]                                  DECIMAL (10, 2) NULL,
    [EMAIL]                                 VARCHAR (100)   NULL,
    [ID_EXT]                                VARCHAR (3)     NOT NULL,
    [SCHEDULER_ACL_NAME]                    VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY]        INT             NOT NULL,
    [CAL_DATE]                              DATETIME        NULL,
    [TENANT_KEY]                            INT             NULL,
    [AIR_DAY_TYPE]                          VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]                    VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]                    DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                    VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]            VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                          VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                        VARCHAR (1)     NULL,
    [READY_FOR_XML]                         VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                          VARCHAR (1)     NULL,
    [INVOICE_ID]                            VARCHAR (50)    NULL,
    [RESOURCE_NAME]                         VARCHAR (100)   NULL,
    [AIRITKDUR]                             INT             NULL,
    [AIRIACDUR]                             INT             NULL,
    [PAY_GROUP]                             INT             NULL,
    [WS_ROW_CREATED_TIME]                   DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                   DATETIME        NULL,
    [ID]                                    INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GAR_INVOICING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_GAR_INVOICING] UNIQUE NONCLUSTERED ([FF_AGENT_NAME] ASC, [ID_EXT] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING_0_Audit] (
    [FF_DATE]                       VARCHAR (50)  NULL,
    [FF_INTERVAL_30_MINUTES]        VARCHAR (50)  NULL,
    [FF_AGENT_NAME]                 VARCHAR (100) NULL,
    [FF_UNAVAILABLE_CODE]           VARCHAR (100) NULL,
    [FF_SKILL_NAME]                 VARCHAR (50)  NULL,
    [FF_TEAM_NAME]                  VARCHAR (50)  NOT NULL,
    [FF_LOGIN_TIME]                 VARCHAR (50)  NULL,
    [FF_AVAILABLE_TIME]             VARCHAR (50)  NULL,
    [FF_UNAVAILABLE_TIME_MINUS_ACW] VARCHAR (50)  NULL,
    [FF_TALK_TIME]                  VARCHAR (50)  NULL,
    [FF_HOLD_TIME]                  VARCHAR (50)  NULL,
    [FF_ACW_TIME]                   VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]              DATETIME      NOT NULL,
    [SEQNO]                         INT           NOT NULL,
    [FTP_FILE_NAME]                 VARCHAR (100) NOT NULL,
    [ID]                            INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GAR_INVOICING_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_GAR_INVOICING_0_Audit] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING_1] (
    [FF_DATE]                               VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]                VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                         VARCHAR (100)   NULL,
    [FF_UNAVAILABLE_CODE]                   VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                         VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                          VARCHAR (50)    NOT NULL,
    [FF_LOGIN_TIME]                         VARCHAR (50)    NULL,
    [FF_AVAILABLE_TIME]                     VARCHAR (50)    NULL,
    [FF_UNAVAILABLE_TIME_MINUS_ACW]         VARCHAR (50)    NULL,
    [FF_TALK_TIME]                          VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                          VARCHAR (50)    NULL,
    [FF_ACW_TIME]                           VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]                      DATETIME        NOT NULL,
    [SEQNO]                                 INT             NOT NULL,
    [FTP_FILE_NAME]                         VARCHAR (100)   NOT NULL,
    [DATETIME]                              DATETIME        NULL,
    [HOUR_INTERVAL]                         INT             NULL,
    [AGENT_NAME]                            VARCHAR (50)    NULL,
    [SKILL_NAME]                            VARCHAR (50)    NULL,
    [TEAM_NAME]                             VARCHAR (50)    NULL,
    [LOGIN_TIME]                            DECIMAL (10, 2) NULL,
    [AVAILABLE_TIME]                        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SYSTEM_PENDING_TIME]       DECIMAL (10, 2) NULL,
    [UNAVAILABLE_HELD_PARTY_ABANDONED_TIME] DECIMAL (10, 2) NULL,
    [UNAVAILABLE_DEDICATED_RESOURCE_TIME]   DECIMAL (10, 2) NULL,
    [UNAVAILABLE_TIME_MINUS_ACW]            DECIMAL (10, 2) NULL,
    [TALK_TIME]                             DECIMAL (10, 2) NULL,
    [HOLD_TIME]                             DECIMAL (10, 2) NULL,
    [ACW_TIME]                              DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]               DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                            DECIMAL (10, 2) NULL,
    [CPROD]                                 DECIMAL (10, 2) NULL,
    [MING]                                  DECIMAL (10, 2) NULL,
    [AUT2]                                  DECIMAL (10, 2) NULL,
    [EMAIL]                                 VARCHAR (100)   NULL,
    [ID_EXT]                                VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]                    VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY]        INT             NULL,
    [CAL_DATE]                              DATETIME        NULL,
    [TENANT_KEY]                            INT             NULL,
    [AIR_DAY_TYPE]                          VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]                    VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]                    DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                    VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]            VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                          VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                        VARCHAR (1)     NULL,
    [READY_FOR_XML]                         VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                          VARCHAR (1)     NULL,
    [INVOICE_ID]                            VARCHAR (50)    NULL,
    [RESOURCE_NAME]                         VARCHAR (100)   NULL,
    [AIRITKDUR]                             INT             NULL,
    [AIRIACDUR]                             INT             NULL,
    [PAY_GROUP]                             INT             NULL,
    [ID]                                    INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GAR_INVOICING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING_2]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING_2] (
    [FF_DATE]                               VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]                VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                         VARCHAR (100)   NULL,
    [FF_UNAVAILABLE_CODE]                   VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                         VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                          VARCHAR (50)    NOT NULL,
    [FF_LOGIN_TIME]                         DECIMAL (10, 2) NULL,
    [FF_AVAILABLE_TIME]                     DECIMAL (10, 2) NULL,
    [FF_UNAVAILABLE_TIME_MINUS_ACW]         DECIMAL (10, 2) NULL,
    [FF_TALK_TIME]                          DECIMAL (10, 2) NULL,
    [FF_HOLD_TIME]                          DECIMAL (10, 2) NULL,
    [FF_ACW_TIME]                           DECIMAL (10, 2) NULL,
    [SEQNO_ADDED_TIME]                      DATETIME        NOT NULL,
    [SEQNO]                                 INT             NOT NULL,
    [FTP_FILE_NAME]                         VARCHAR (100)   NOT NULL,
    [DATETIME]                              DATETIME        NULL,
    [HOUR_INTERVAL]                         INT             NULL,
    [AGENT_NAME]                            VARCHAR (50)    NULL,
    [SKILL_NAME]                            VARCHAR (50)    NULL,
    [TEAM_NAME]                             VARCHAR (50)    NULL,
    [LOGIN_TIME]                            DECIMAL (10, 2) NULL,
    [AVAILABLE_TIME]                        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SYSTEM_PENDING_TIME]       DECIMAL (10, 2) NULL,
    [UNAVAILABLE_HELD_PARTY_ABANDONED_TIME] DECIMAL (10, 2) NULL,
    [UNAVAILABLE_DEDICATED_RESOURCE_TIME]   DECIMAL (10, 2) NULL,
    [UNAVAILABLE_TIME_MINUS_ACW]            DECIMAL (10, 2) NULL,
    [TALK_TIME]                             DECIMAL (10, 2) NULL,
    [HOLD_TIME]                             DECIMAL (10, 2) NULL,
    [ACW_TIME]                              DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]               DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                            DECIMAL (10, 2) NULL,
    [CPROD]                                 DECIMAL (10, 2) NULL,
    [MING]                                  DECIMAL (10, 2) NULL,
    [AUT2]                                  DECIMAL (10, 2) NULL,
    [EMAIL]                                 VARCHAR (100)   NULL,
    [ID_EXT]                                VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]                    VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY]        INT             NULL,
    [CAL_DATE]                              DATETIME        NULL,
    [TENANT_KEY]                            INT             NULL,
    [AIR_DAY_TYPE]                          VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]                    VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]                    DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                    VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]            VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                          VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                        VARCHAR (1)     NULL,
    [READY_FOR_XML]                         VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                          VARCHAR (1)     NULL,
    [INVOICE_ID]                            VARCHAR (50)    NULL,
    [RESOURCE_NAME]                         VARCHAR (100)   NULL,
    [AIRITKDUR]                             INT             NULL,
    [AIRIACDUR]                             INT             NULL,
    [PAY_GROUP]                             INT             NULL,
    [WS_ROW_CREATED_TIME]                   DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                   DATETIME        NULL,
    [ID]                                    INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GAR_INVOICING_2] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING_BAD]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING_BAD] (
    [BAD_IMPORTS_NO]                        TINYINT         NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]                 VARCHAR (3)     NULL,
    [WS_ROW_CREATED_TIME]                   DATETIME        NOT NULL,
    [FF_DATE]                               VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]                VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                         VARCHAR (100)   NULL,
    [FF_UNAVAILABLE_CODE]                   VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                         VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                          VARCHAR (50)    NOT NULL,
    [FF_LOGIN_TIME]                         VARCHAR (50)    NULL,
    [FF_AVAILABLE_TIME]                     VARCHAR (50)    NULL,
    [FF_UNAVAILABLE_TIME_MINUS_ACW]         VARCHAR (50)    NULL,
    [FF_TALK_TIME]                          VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                          VARCHAR (50)    NULL,
    [FF_ACW_TIME]                           VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]                      DATETIME        NOT NULL,
    [SEQNO]                                 INT             NOT NULL,
    [FTP_FILE_NAME]                         VARCHAR (100)   NOT NULL,
    [DATETIME]                              DATETIME        NULL,
    [HOUR_INTERVAL]                         INT             NULL,
    [AGENT_NAME]                            VARCHAR (50)    NULL,
    [SKILL_NAME]                            VARCHAR (50)    NULL,
    [TEAM_NAME]                             VARCHAR (50)    NULL,
    [LOGIN_TIME]                            DECIMAL (10, 2) NULL,
    [AVAILABLE_TIME]                        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SYSTEM_PENDING_TIME]       DECIMAL (10, 2) NULL,
    [UNAVAILABLE_HELD_PARTY_ABANDONED_TIME] DECIMAL (10, 2) NULL,
    [UNAVAILABLE_DEDICATED_RESOURCE_TIME]   DECIMAL (10, 2) NULL,
    [UNAVAILABLE_TIME_MINUS_ACW]            DECIMAL (10, 2) NULL,
    [TALK_TIME]                             DECIMAL (10, 2) NULL,
    [HOLD_TIME]                             DECIMAL (10, 2) NULL,
    [ACW_TIME]                              DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]               DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                            DECIMAL (10, 2) NULL,
    [CPROD]                                 DECIMAL (10, 2) NULL,
    [MING]                                  DECIMAL (10, 2) NULL,
    [AUT2]                                  DECIMAL (10, 2) NULL,
    [EMAIL]                                 VARCHAR (100)   NULL,
    [ID_EXT]                                VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]                    VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY]        INT             NULL,
    [CAL_DATE]                              DATETIME        NULL,
    [TENANT_KEY]                            INT             NULL,
    [AIR_DAY_TYPE]                          VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]                    VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]                    DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                    VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]            VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                          VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                        VARCHAR (1)     NULL,
    [READY_FOR_XML]                         VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                          VARCHAR (1)     NULL,
    [INVOICE_ID]                            VARCHAR (50)    NULL,
    [RESOURCE_NAME]                         VARCHAR (100)   NULL,
    [AIRITKDUR]                             INT             NULL,
    [AIRIACDUR]                             INT             NULL,
    [PAY_GROUP]                             INT             NULL,
    [ID]                                    INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GAR_INVOICING_BAD] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_GAR_INVOICING_BAD] UNIQUE NONCLUSTERED ([BAD_IMPORTS_NO] ASC, [WS_ROW_CREATED_TIME] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING_BAD_2]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING_BAD_2] (
    [BAD_IMPORTS_CODE]                      VARCHAR (3)     NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]                 VARCHAR (3)     NULL,
    [WS_ROW_CREATED_TIME]                   DATETIME        NOT NULL,
    [FF_DATE]                               VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]                VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                         VARCHAR (100)   NULL,
    [FF_UNAVAILABLE_CODE]                   VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                         VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                          VARCHAR (50)    NOT NULL,
    [FF_LOGIN_TIME]                         VARCHAR (50)    NULL,
    [FF_AVAILABLE_TIME]                     VARCHAR (50)    NULL,
    [FF_UNAVAILABLE_TIME_MINUS_ACW]         VARCHAR (50)    NULL,
    [FF_TALK_TIME]                          VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                          VARCHAR (50)    NULL,
    [FF_ACW_TIME]                           VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]                      DATETIME        NOT NULL,
    [SEQNO]                                 INT             NOT NULL,
    [FTP_FILE_NAME]                         VARCHAR (100)   NOT NULL,
    [DATETIME]                              DATETIME        NULL,
    [HOUR_INTERVAL]                         INT             NULL,
    [AGENT_NAME]                            VARCHAR (50)    NULL,
    [SKILL_NAME]                            VARCHAR (50)    NULL,
    [TEAM_NAME]                             VARCHAR (50)    NULL,
    [LOGIN_TIME]                            DECIMAL (10, 2) NULL,
    [AVAILABLE_TIME]                        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SYSTEM_PENDING_TIME]       DECIMAL (10, 2) NULL,
    [UNAVAILABLE_HELD_PARTY_ABANDONED_TIME] DECIMAL (10, 2) NULL,
    [UNAVAILABLE_DEDICATED_RESOURCE_TIME]   DECIMAL (10, 2) NULL,
    [UNAVAILABLE_TIME_MINUS_ACW]            DECIMAL (10, 2) NULL,
    [TALK_TIME]                             DECIMAL (10, 2) NULL,
    [HOLD_TIME]                             DECIMAL (10, 2) NULL,
    [ACW_TIME]                              DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]               DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                            DECIMAL (10, 2) NULL,
    [CPROD]                                 DECIMAL (10, 2) NULL,
    [MING]                                  DECIMAL (10, 2) NULL,
    [AUT2]                                  DECIMAL (10, 2) NULL,
    [EMAIL]                                 VARCHAR (100)   NULL,
    [ID_EXT]                                VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]                    VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY]        INT             NULL,
    [CAL_DATE]                              DATETIME        NULL,
    [TENANT_KEY]                            INT             NULL,
    [AIR_DAY_TYPE]                          VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]                    VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]                    DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                    VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]            VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                          VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                        VARCHAR (1)     NULL,
    [READY_FOR_XML]                         VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                          VARCHAR (1)     NULL,
    [INVOICE_ID]                            VARCHAR (50)    NULL,
    [RESOURCE_NAME]                         VARCHAR (100)   NULL,
    [AIRITKDUR]                             INT             NULL,
    [AIRIACDUR]                             INT             NULL,
    [PAY_GROUP]                             INT             NULL,
    [ROW_CREATED_TIME]                      DATETIME        NULL,
    [ROW_UPDATED_TIME]                      DATETIME        NULL,
    [ID]                                    INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GAR_INVOICING_BAD_2] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_GAR_INVOICING_BAD_2] UNIQUE NONCLUSTERED ([BAD_IMPORTS_CODE] ASC, [WS_ROW_CREATED_TIME] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND] (
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]         VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                  VARCHAR (100)   NOT NULL,
    [FF_SKILL_NAME]                  VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                   VARCHAR (50)    NOT NULL,
    [FF_CONTACT_ID]                  VARCHAR (50)    NULL,
    [FF_MASTER_CONTACT_ID]           VARCHAR (50)    NULL,
    [FF_TALK_TIME]                   VARCHAR (50)    NULL,
    [FF_ACW_TIME]                    VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                   VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [AGENT_NAME]                     VARCHAR (50)    NULL,
    [SKILL_NAME]                     VARCHAR (50)    NULL,
    [TEAM_NAME]                      VARCHAR (50)    NULL,
    [TALK_TIME]                      DECIMAL (10, 2) NULL,
    [ACW_TIME]                       DECIMAL (10, 2) NULL,
    [HOLD_TIME]                      DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]        DECIMAL (10, 2) NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NOT NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME        NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND] UNIQUE NONCLUSTERED ([FF_AGENT_NAME] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_0_Audit] (
    [FF_DATE]                VARCHAR (50)  NULL,
    [FF_INTERVAL_30_MINUTES] VARCHAR (50)  NULL,
    [FF_AGENT_NAME]          VARCHAR (100) NULL,
    [FF_SKILL_NAME]          VARCHAR (50)  NULL,
    [FF_TEAM_NAME]           VARCHAR (50)  NOT NULL,
    [FF_CONTACT_ID]          VARCHAR (50)  NULL,
    [FF_MASTER_CONTACT_ID]   VARCHAR (50)  NULL,
    [FF_TALK_TIME]           VARCHAR (50)  NULL,
    [FF_ACW_TIME]            VARCHAR (50)  NULL,
    [FF_HOLD_TIME]           VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]       DATETIME      NOT NULL,
    [SEQNO]                  INT           NOT NULL,
    [FTP_FILE_NAME]          VARCHAR (100) NOT NULL,
    [ID]                     INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_0_Audit] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1] (
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]         VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                  VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                  VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                   VARCHAR (50)    NOT NULL,
    [FF_CONTACT_ID]                  VARCHAR (50)    NULL,
    [FF_MASTER_CONTACT_ID]           VARCHAR (50)    NULL,
    [FF_TALK_TIME]                   VARCHAR (50)    NULL,
    [FF_ACW_TIME]                    VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                   VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [AGENT_NAME]                     VARCHAR (50)    NULL,
    [SKILL_NAME]                     VARCHAR (50)    NULL,
    [TEAM_NAME]                      VARCHAR (50)    NULL,
    [TALK_TIME]                      DECIMAL (10, 2) NULL,
    [ACW_TIME]                       DECIMAL (10, 2) NULL,
    [HOLD_TIME]                      DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]        DECIMAL (10, 2) NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_2]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_2] (
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]         VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                  VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                  VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                   VARCHAR (50)    NOT NULL,
    [FF_CONTACT_ID]                  VARCHAR (50)    NULL,
    [FF_MASTER_CONTACT_ID]           VARCHAR (50)    NULL,
    [FF_TALK_TIME]                   DECIMAL (10, 2) NULL,
    [FF_ACW_TIME]                    DECIMAL (10, 2) NULL,
    [FF_HOLD_TIME]                   DECIMAL (10, 2) NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [AGENT_NAME]                     VARCHAR (50)    NULL,
    [SKILL_NAME]                     VARCHAR (50)    NULL,
    [TEAM_NAME]                      VARCHAR (50)    NULL,
    [TALK_TIME]                      DECIMAL (10, 2) NULL,
    [ACW_TIME]                       DECIMAL (10, 2) NULL,
    [HOLD_TIME]                      DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]        DECIMAL (10, 2) NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME        NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_2] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_BAD]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_BAD] (
    [BAD_IMPORTS_NO]                 TINYINT         NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]          VARCHAR (3)     NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NOT NULL,
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]         VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                  VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                  VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                   VARCHAR (50)    NOT NULL,
    [FF_CONTACT_ID]                  VARCHAR (50)    NULL,
    [FF_MASTER_CONTACT_ID]           VARCHAR (50)    NULL,
    [FF_TALK_TIME]                   VARCHAR (50)    NULL,
    [FF_ACW_TIME]                    VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                   VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [AGENT_NAME]                     VARCHAR (50)    NULL,
    [SKILL_NAME]                     VARCHAR (50)    NULL,
    [TEAM_NAME]                      VARCHAR (50)    NULL,
    [TALK_TIME]                      DECIMAL (10, 2) NULL,
    [ACW_TIME]                       DECIMAL (10, 2) NULL,
    [HOLD_TIME]                      DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]        DECIMAL (10, 2) NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_BAD] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_BAD] UNIQUE NONCLUSTERED ([BAD_IMPORTS_NO] ASC, [WS_ROW_CREATED_TIME] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GAR_SD_AIA_STATIC_DEFAULTS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GAR_SD_AIA_STATIC_DEFAULTS] (
    [PLATFORM]                          VARCHAR (50)  NULL,
    [STATUS]                            VARCHAR (50)  NULL,
    [INVOICE_MAP_KEY]                   VARCHAR (50)  NULL,
    [FIELD_NAME]                        VARCHAR (50)  NULL,
    [SCHEDULER_PROJECT_ID]              VARCHAR (50)  NULL,
    [SCHEDULER_ACL_NAME]                VARCHAR (50)  NULL,
    [ACD_ID_EXTENSION]                  VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_ID]           VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]         VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_ID]            VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_NAME]          VARCHAR (50)  NULL,
    [PRIMARY_PROJECT_MANAGER_ID]        VARCHAR (150) NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID] VARCHAR (150) NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]       VARCHAR (150) NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]        VARCHAR (150) NULL,
    [INVOICE_SYSTEM_ID]                 VARCHAR (50)  NULL,
    [HOLIDAY_INVOICE_ID]                VARCHAR (50)  NULL,
    [HOLIDAY]                           VARCHAR (50)  NULL,
    [FILE_FORMAT_OF_PUSH]               VARCHAR (50)  NULL,
    [AGENT_PREPARATION_INVOICE_ID]      VARCHAR (50)  NULL,
    [NEW_ACL]                           VARCHAR (50)  NULL,
    [CURRENT_CATS]                      VARCHAR (50)  NULL,
    [CATS_ID]                           VARCHAR (50)  NULL,
    [PATS_ID]                           VARCHAR (50)  NULL,
    [SMART_ELIGIBLE]                    VARCHAR (50)  NULL,
    [SMART_TIER_1]                      VARCHAR (50)  NULL,
    [SMART_TIER_2]                      VARCHAR (50)  NULL,
    [SMART_TIER_3]                      VARCHAR (50)  NULL,
    [INTERVAL]                          VARCHAR (50)  NULL,
    [TENANT_KEY]                        INT           NULL,
    [WS_ROW_CREATED_TIME]               DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]               DATETIME      NULL,
    [ID]                                INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GAR_SD_AIA_STATIC_DEFAULTS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GAR_SD_INVOICE_GROUPS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GAR_SD_INVOICE_GROUPS] (
    [SCHEDULER_ACL_NAME]               VARCHAR (100)  NOT NULL,
    [ID_EXT]                           VARCHAR (3)    NOT NULL,
    [TENANT_KEY]                       INT            NOT NULL,
    [include_in_cas]                   VARCHAR (1)    NOT NULL,
    [ready_for_xml]                    VARCHAR (1)    NULL,
    [has_holidays]                     VARCHAR (1)    NOT NULL,
    [show_id_exts]                     VARCHAR (1)    NOT NULL,
    [include_in_universe_agent_invo]   VARCHAR (1)    NULL,
    [include_in_wsinet_usage]          VARCHAR (1)    NULL,
    [include_in_wslive_billing]        VARCHAR (1)    NULL,
    [include_in_olympics]              VARCHAR (1)    NULL,
    [include_in_novatel]               VARCHAR (1)    NULL,
    [include_in_wsol_exports]          VARCHAR (1)    NULL,
    [min_guarantee_rate]               DECIMAL (6, 3) NULL,
    [min_guarantee_type]               VARCHAR (50)   NULL,
    [authorized_to_invoice_type]       VARCHAR (50)   NULL,
    [min_guarantee_flds]               VARCHAR (150)  NULL,
    [minguar_form]                     VARCHAR (500)  NULL,
    [invoice_formula]                  VARCHAR (500)  NULL,
    [pay_rate_standard]                DECIMAL (6, 3) NULL,
    [pay_rate_holiday]                 DECIMAL (6, 3) NULL,
    [is_client_team]                   VARCHAR (1)    NULL,
    [is_production_team]               VARCHAR (1)    NULL,
    [client_billing_master_group_name] VARCHAR (150)  NULL,
    [DLY_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [MTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WS_START_TIME]                    DATETIME       NULL,
    [WS_END_TIME]                      DATETIME       NULL,
    [WS_ROW_CREATED_TIME]              DATETIME       NULL,
    [WS_ROW_UPDATED_TIME]              DATETIME       NULL,
    [ID]                               INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GAR_SD_INVOICE_GROUPS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GAR_SD_INVOICE_HOLIDAYS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GAR_SD_INVOICE_HOLIDAYS] (
    [HOLIDAY_DATE] SMALLDATETIME NOT NULL,
    [ID]           INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GAR_SD_INVOICE_HOLIDAYS] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_GAR_INVOICE_HOLIDAYS] UNIQUE NONCLUSTERED ([HOLIDAY_DATE] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GAR_SD_INVOICE_HOLIDAYS_ADDL]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GAR_SD_INVOICE_HOLIDAYS_ADDL] (
    [HOLIDAY_DATE] DATETIME    NOT NULL,
    [ID_EXT]       VARCHAR (3) NOT NULL,
    [ID]           INT         IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GAR_SD_INVOICE_HOLIDAYS_ADDL] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_GAR_UV_ANT_AIA]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_GAR_UV_ANT_AIA] (
    [PLATFORM]                           VARCHAR (50)    NULL,
    [STATUS]                             VARCHAR (50)    NULL,
    [INVOICE_MAP_KEY]                    VARCHAR (50)    NOT NULL,
    [FIELD_NAME]                         VARCHAR (50)    NULL,
    [SCHEDULER_PROJECT_ID]               VARCHAR (50)    NULL,
    [SCHEDULER_ACL_NAME]                 VARCHAR (50)    NOT NULL,
    [ACD_ID_EXTENSION]                   VARCHAR (50)    NOT NULL,
    [OFFICIAL_WSOL_CLIENT_ID]            VARCHAR (50)    NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]          VARCHAR (50)    NULL,
    [OFFICIAL_ACD_CLIENT_ID]             VARCHAR (50)    NOT NULL,
    [OFFICIAL_ACD_CLIENT_NAME]           VARCHAR (50)    NULL,
    [PRIMARY_PROJECT_MANAGER_ID]         VARCHAR (150)   NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID]  VARCHAR (150)   NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]        VARCHAR (150)   NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]         VARCHAR (150)   NULL,
    [INVOICE_SYSTEM_ID]                  VARCHAR (50)    NOT NULL,
    [HOLIDAY_INVOICE_ID]                 VARCHAR (50)    NOT NULL,
    [HOLIDAY]                            VARCHAR (50)    NOT NULL,
    [FILE_FORMAT_OF_PUSH]                VARCHAR (50)    NULL,
    [AGENT_PREPARATION_INVOICE_ID]       VARCHAR (50)    NULL,
    [NEW_ACL]                            VARCHAR (50)    NULL,
    [CURRENT_CATS]                       VARCHAR (50)    NULL,
    [CATS_ID]                            VARCHAR (50)    NULL,
    [PATS_ID]                            VARCHAR (50)    NULL,
    [SMART_ELIGIBLE]                     VARCHAR (50)    NULL,
    [SMART_TIER_1]                       VARCHAR (50)    NULL,
    [SMART_TIER_2]                       VARCHAR (50)    NULL,
    [SMART_TIER_3]                       VARCHAR (50)    NULL,
    [INTERVAL]                           VARCHAR (50)    NULL,
    [DATE]                               VARCHAR (50)    NULL,
    [HOD_INTERVAL]                       VARCHAR (50)    NULL,
    [AU_DK_LOGGED_IN_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_AVAILABLE_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_TALK_DURATION]                DECIMAL (10, 2) NULL,
    [AU_DK_IB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_OB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_CONVENTIONAL_ACW]             DECIMAL (10, 2) NULL,
    [AU_DK_NR_DURATION]                  DECIMAL (10, 2) NULL,
    [AU_DK_PSEUDO_PRODUCTIVE_DURATION]   DECIMAL (10, 2) NULL,
    [AU_DK_ADJUSTED_NR_DURATION]         DECIMAL (10, 2) NULL,
    [AU_DK_TOTAL_PRODUCTIVE_DURATION]    DECIMAL (10, 2) NULL,
    [AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] DECIMAL (10, 2) NULL,
    [AU_DK_XFER_COUNT]                   INT             NULL,
    [AU_DK_HOLD_COUNT]                   INT             NULL,
    [AU_DK_CONFERENCE_COUNT]             INT             NULL,
    [AU_DK_CONSULT_COUNT]                INT             NULL,
    [AU_DK_PUP_COUNT]                    INT             NULL,
    [AU_DK_OFFERED_COUNT]                INT             NULL,
    [AU_DK_HANDLED_COUNT]                INT             NULL,
    [AU_DK_IB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_OB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_RONA_COUNT]                   INT             NULL,
    [AU_DK_AWR_COUNT]                    INT             NULL,
    [MINIMUM_GUARANTEE]                  DECIMAL (10, 2) NULL,
    [AUTHORIZED_TO_INVOICE]              DECIMAL (10, 2) NULL,
    [WEEK_ENDING_DATE]                   VARCHAR (10)    NULL,
    [PAY_CYCLE_CLOSURE_DATE]             VARCHAR (10)    NULL,
    [FTP_FILE_NAME]                      VARCHAR (100)   NOT NULL,
    [EMAIL]                              VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]     INT             NOT NULL,
    [CAL_DATE]                           DATETIME        NULL,
    [TENANT_KEY]                         INT             NOT NULL,
    [AIR_DAY_TYPE]                       VARCHAR (1)     NOT NULL,
    [AIR_ACW_FONT_COLOR]                 VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]                 DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                 VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]         VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                       VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                     VARCHAR (1)     NULL,
    [READY_FOR_XML]                      VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                       VARCHAR (1)     NULL,
    [INVOICE_ID]                         VARCHAR (50)    NULL,
    [RESOURCE_NAME]                      VARCHAR (100)   NULL,
    [PAY_GROUP]                          INT             NULL,
    [AIRITKDUR]                          DECIMAL (10, 2) NULL,
    [AIRIACDUR]                          DECIMAL (10, 2) NULL,
    [WS_ROW_CREATED_TIME]                DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                DATETIME        NULL,
    [ID]                                 INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_GAR_UV_ANT_AIA] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_GAR_UV_ANT_AIA] UNIQUE NONCLUSTERED ([INVOICE_MAP_KEY] ASC, [SCHEDULER_ACL_NAME] ASC, [ACD_ID_EXTENSION] ASC, [HOLIDAY] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [TENANT_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_HUMACH_INVOICING]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_HUMACH_INVOICING] (
    [FF_AGENT_FIRST_NAME]                                 VARCHAR (100)   NULL,
    [FF_AGENT_LAST_NAME]                                  VARCHAR (100)   NULL,
    [FF_AGENT_ID]                                         VARCHAR (50)    NOT NULL,
    [FF_CUSTOMER_NAME]                                    VARCHAR (100)   NULL,
    [FF_CUSTOMER_ID]                                      VARCHAR (50)    NOT NULL,
    [FF_INTERVAL]                                         VARCHAR (50)    NULL,
    [FF_AGENT_PERFORMANCE_INTERVAL_ID]                    VARCHAR (50)    NULL,
    [FF_INTERVAL_START_TS]                                DATETIME        NULL,
    [FF_AGENT_LOGIN_START_TS]                             DATETIME        NULL,
    [FF_STATE_LOGGED_IN_SECS]                             DECIMAL (10, 2) NULL,
    [FF_STATE_READY_SECS]                                 DECIMAL (10, 2) NULL,
    [FF_STATE_ASSIGNED_SECS]                              DECIMAL (10, 2) NULL,
    [FF_STATE_BUSY_SECS]                                  DECIMAL (10, 2) NULL,
    [FF_STATE_NR_SECS]                                    DECIMAL (10, 2) NULL,
    [FF_STATE_NR_01_SECS]                                 DECIMAL (10, 2) NULL,
    [FF_STATE_NR_02_SECS]                                 DECIMAL (10, 2) NULL,
    [FF_STATE_NR_03_SECS]                                 DECIMAL (10, 2) NULL,
    [FF_STATE_NR_04_SECS]                                 DECIMAL (10, 2) NULL,
    [FF_STATE_NR_05_SECS]                                 DECIMAL (10, 2) NULL,
    [FF_STATE_NR_06_SECS]                                 DECIMAL (10, 2) NULL,
    [FF_STATE_NR_07_SECS]                                 DECIMAL (10, 2) NULL,
    [FF_STATE_DIAL_PENDING_SECS]                          DECIMAL (10, 2) NULL,
    [FF_STATE_UNKNOWN_SECS]                               DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS]                  DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS]           DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_IN_AGT_ANS_SECS]                       DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS]                  DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS]       DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS]       DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS]                   DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS]  DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS]              DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS]      DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS]      DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS] DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT]                    INT             NULL,
    [FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT]             INT             NULL,
    [FF_Q_IN_CALLS_IN_AGT_ANS_CT]                         INT             NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT]                     INT             NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT]                  INT             NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT]                    INT             NULL,
    [FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT]                INT             NULL,
    [FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT]                   INT             NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT]                  INT             NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT]              INT             NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS]               DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS]       DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS]       DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS]                 DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS]             DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS]                DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS]                 DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS]  DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS]                  DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS]                 DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS] DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS]               DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS]                DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS]      DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS]      DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS]              DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS]            DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS]                DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS]      DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS]      DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS]                 DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS] DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS]             DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_IN_AGT_ANS_SECS]                      DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS]          DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS]                  DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS]                 DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS]               DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS]              DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS]                DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS]      DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_IN_AGT_ANS_SECS]                      DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS]                  DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS]      DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS]           DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS] DECIMAL (10, 2) NULL,
    [SEQNO_ADDED_TIME]                                    DATETIME        NOT NULL,
    [SEQNO]                                               INT             NOT NULL,
    [FTP_FILE_NAME]                                       VARCHAR (100)   NOT NULL,
    [DATETIME]                                            DATETIME        NULL,
    [HOUR_INTERVAL]                                       INT             NULL,
    [RESOURCE_NAME]                                       VARCHAR (100)   NULL,
    [LOGGED_IN_SECS]                                      DECIMAL (10, 2) NULL,
    [READY_SECS]                                          DECIMAL (10, 2) NULL,
    [ASSIGNED_SECS]                                       DECIMAL (10, 2) NULL,
    [BUSY_SECS]                                           DECIMAL (10, 2) NULL,
    [NOT_READY_SECS]                                      DECIMAL (10, 2) NULL,
    [AGENT_UNRESPONSIVE_SECS]                             DECIMAL (10, 2) NULL,
    [POST_LOGIN_SECS]                                     DECIMAL (10, 2) NULL,
    [BREAK_SECS]                                          DECIMAL (10, 2) NULL,
    [WRAP_SECS]                                           DECIMAL (10, 2) NULL,
    [NR_05_SECS]                                          DECIMAL (10, 2) NULL,
    [NR_06_SECS]                                          DECIMAL (10, 2) NULL,
    [NR_07_SECS]                                          DECIMAL (10, 2) NULL,
    [DIAL_PENDING_SECS]                                   DECIMAL (10, 2) NULL,
    [STATE_UNKNOWN_SECS]                                  DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ASSIGNED_SECS]                     DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS]              DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ANS_SECS]                          DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_AGT_CALLS_TRANS_SECS]                     DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS]          DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS]          DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_AGT_CALLS_HOLD_SECS]                      DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS]     DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS]                 DECIMAL (10, 2) NULL,
    [NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS]         DECIMAL (10, 2) NULL,
    [NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS]         DECIMAL (10, 2) NULL,
    [NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS]    DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ASSIGNED_CT]                       DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT]                DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ANS_CT]                            DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_AGT_CALLS_HOLD_CT]                        DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT]                     DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_AGT_CALLS_TRANS_CT]                       DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT]                   DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_COMPLETED_CT]                      DECIMAL (10, 2) NULL,
    [NON_Q_CALLS_OUT_AGT_CALL_ANS_CT]                     DECIMAL (10, 2) NULL,
    [NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT]                 DECIMAL (10, 2) NULL,
    [TOTAL_CALLS]                                         DECIMAL (10, 2) NULL,
    [AUTHORIZED_WRAP]                                     DECIMAL (10, 2) NULL,
    [CPROD]                                               DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]                                   DECIMAL (10, 2) NULL,
    [AUTHORIZED_MINUTES]                                  DECIMAL (10, 2) NULL,
    [EMAIL]                                               VARCHAR (100)   NULL,
    [ID_EXT]                                              VARCHAR (3)     NOT NULL,
    [SCHEDULER_ACL_NAME]                                  VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY]                      INT             NOT NULL,
    [CAL_DATE]                                            DATETIME        NULL,
    [TENANT_KEY]                                          INT             NULL,
    [AIR_DAY_TYPE]                                        VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]                                  VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]                               DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                                  VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]                          VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                                        VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                                      VARCHAR (1)     NULL,
    [READY_FOR_XML]                                       VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                                        VARCHAR (1)     NULL,
    [INVOICE_ID]                                          VARCHAR (50)    NOT NULL,
    [WS_ROW_CREATED_TIME]                                 DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                                 DATETIME        NULL,
    [ID]                                                  INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_HUMACH_INVOICING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_HUMACH_INVOICING] UNIQUE NONCLUSTERED ([FF_AGENT_ID] ASC, [FF_CUSTOMER_ID] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [INVOICE_ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_HUMACH_INVOICING_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_HUMACH_INVOICING_0_Audit] (
    [FF_Q_OUT_DIAL_AGT_ASSIGNED_CT]                       VARCHAR (50)  NULL,
    [FF_STATE_DIAL_PENDING_CT]                            VARCHAR (50)  NULL,
    [FF_STATE_NR_10_CT]                                   VARCHAR (100) NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS]               VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS]       VARCHAR (50)  NOT NULL,
    [FF_STATE_NR_14_CT]                                   VARCHAR (50)  NULL,
    [FF_STATE_NR_18_CT]                                   VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT]                   VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_AGT_CALLS_HOLD_CT]                    VARCHAR (50)  NULL,
    [FF_STATE_NR_05_SECS]                                 VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS]               VARCHAR (50)  NULL,
    [FF_STATE_BUSY_SECS]                                  VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_IN_AGT_ANS_CT]                         VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS]       VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS]                 VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS]      VARCHAR (50)  NULL,
    [FF_STATE_NR_13_SECS]                                 VARCHAR (50)  NULL,
    [FF_STATE_NR_17_NAME]                                 VARCHAR (50)  NULL,
    [FF_AGENT_FIRST_NAME]                                 VARCHAR (100) NULL,
    [FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS]                  VARCHAR (50)  NULL,
    [FF_STATE_READY_CT]                                   VARCHAR (50)  NULL,
    [FF_STATE_NR_09_NAME]                                 VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS] VARCHAR (50)  NULL,
    [FF_STATE_LOGGED_IN_SECS]                             VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_AGT_CALLS_ON_HOLD_CT]                 VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_CT]                 VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT]                    VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS]               VARCHAR (50)  NULL,
    [FF_STATE_NR_07_NAME]                                 VARCHAR (50)  NULL,
    [FF_AGENT_ID]                                         VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS]  VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_CT]                  VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_ATTEMPT_CT]               VARCHAR (50)  NULL,
    [FF_STATE_NR_15 SECS]                                 VARCHAR (50)  NULL,
    [FF_STATE_BUSY_CT]                                    VARCHAR (50)  NULL,
    [FF_CUSTOMER_NAME]                                    VARCHAR (100) NULL,
    [FF_STATE_NR_10_NAME]                                 VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS]      VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS]                VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS]      VARCHAR (50)  NULL,
    [FF_STATE_NR_07_CT]                                   VARCHAR (50)  NULL,
    [FF_STATE_NR_19_NAME]                                 VARCHAR (50)  NULL,
    [FF_STATE_ASSIGNED_CT]                                VARCHAR (50)  NULL,
    [FF_INTERVAL]                                         VARCHAR (50)  NULL,
    [FF_STATE_NR_03_CT]                                   VARCHAR (50)  NULL,
    [FF_STATE_NR_03_SECS]                                 VARCHAR (50)  NULL,
    [FF_NON_Q_DIALS_AGT_ASSIGNED_CT]                      VARCHAR (50)  NULL,
    [FF_STATE_UNKNOWN_SECS]                               VARCHAR (50)  NULL,
    [FF_STATE_NR_13_NAME]                                 VARCHAR (50)  NULL,
    [FF_STATE_NR_17_SECS]                                 VARCHAR (50)  NULL,
    [FF_AGENT_PERFORMANCE_INTERVAL_ID]                    VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS]             VARCHAR (50)  NULL,
    [FF_STATE_NR_13_CT]                                   VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT]                  VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_CT]            VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_CT]               VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS]      VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS]                  VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS]              VARCHAR (50)  NULL,
    [FF_STATE_NR_17_CT]                                   VARCHAR (50)  NULL,
    [FF_STATE_NR_08_SECS]                                 VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_IN_AGT_COMPLETED_CT]                  VARCHAR (50)  NULL,
    [FF_STATE_ASSIGNED_SECS]                              VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_IN_AGT_ANS_SECS]                      VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS]      VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS]              VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT]             VARCHAR (50)  NULL,
    [FF_NON_Q_DIALS_AGT_ABORTED_CT]                       VARCHAR (50)  NULL,
    [FF_STATE_DIAL_PENDING_SECS]                          VARCHAR (50)  NULL,
    [FF_STATE_NR_04_NAME]                                 VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_CT]             VARCHAR (50)  NULL,
    [FF_STATE_NR_01_SECS]                                 VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS]                  VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS]      VARCHAR (50)  NULL,
    [FF_INTERVAL_START_TS]                                VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_AGT_CALLS_TRANS_CT]                   VARCHAR (50)  NULL,
    [FF_STATE_UNKNOWN_CT]                                 VARCHAR (50)  NULL,
    [FF_STATE_NR_10_SECS]                                 VARCHAR (50)  NULL,
    [FF_STATE_NR_02_NAME]                                 VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_CT]                VARCHAR (50)  NULL,
    [FF_STATE_NR_19_SECS]                                 VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS]                 VARCHAR (50)  NULL,
    [FF_STATE_NR_06_SECS]                                 VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS]              VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_CT]                 VARCHAR (50)  NULL,
    [FF_STATE_NR_06_CT]                                   VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT]                    VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS]      VARCHAR (50)  NULL,
    [FF_STATE_NR_15_NAME]                                 VARCHAR (50)  NULL,
    [FF_STATE_NR_02_CT]                                   VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_AGT_CALLS_ON_HOLD_CT]                 VARCHAR (50)  NULL,
    [FF_STATE_NR_12_CT]                                   VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_CT]              VARCHAR (50)  NULL,
    [FF_STATE_NR_12_SECS]                                 VARCHAR (50)  NULL,
    [FF_STATE_NR_18_NAME]                                 VARCHAR (50)  NULL,
    [FF_STATE_NR_16_CT]                                   VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_CT]                  VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS]                   VARCHAR (50)  NULL,
    [FF_STATE_NR_04_SECS]                                 VARCHAR (50)  NULL,
    [FF_STATE_NR_01_NAME]                                 VARCHAR (50)  NULL,
    [FF_STATE_NR_08-NAME]                                 VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS]                 VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT]                     VARCHAR (50)  NULL,
    [FF_STATE_NR_14_SECS]                                 VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_IN_AGT_ATTEMPT_CT]                    VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS]       VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS] VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS]                VARCHAR (50)  NULL,
    [FF_STATE_NR_20_CT]                                   VARCHAR (50)  NULL,
    [FF_AGENT_LAST_NAME]                                  VARCHAR (100) NULL,
    [FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS]             VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_CT]                   VARCHAR (50)  NULL,
    [FF_STATE_LOGGED_IN_CT]                               VARCHAR (50)  NULL,
    [FF_Q_IN_DIALS_AGT_ASSIGNED_CT]                       VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CT]                  VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_ATTEMPT_CT]              VARCHAR (50)  NULL,
    [FF_STATE_READY_SECS]                                 VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_IN_AGT_ANS_SECS]                      VARCHAR (50)  NULL,
    [FF_STATE_NR_02_SECS]                                 VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS]       VARCHAR (50)  NULL,
    [FF_STATE_NR_CT]                                      VARCHAR (50)  NULL,
    [FF_STATE_NR_16_SECS]                                 VARCHAR (50)  NULL,
    [FF_STATE_NR_09_CT]                                   VARCHAR (50)  NULL,
    [FF_STATE_NR_06_NAME]                                 VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS]                  VARCHAR (50)  NULL,
    [FF_CUSTOMER_ID]                                      VARCHAR (50)  NULL,
    [FF_STATE_NR_05_CT]                                   VARCHAR (50)  NULL,
    [FF_STATE_NR_20_SECS]                                 VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_AGT_CALLS_TRANS_CT]                   VARCHAR (50)  NULL,
    [FF_STATE_NR_01_CT]                                   VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_IN_AGT_ANS_CT]                        VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS]           VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS]            VARCHAR (50)  NULL,
    [FF_Q_OUT_DIALS_AGT_ABORTED_CT]                       VARCHAR (50)  NULL,
    [FF_STATE_NR_11_NAME]                                 VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS]          VARCHAR (50)  NULL,
    [FF_STATE_NR_11_CT]                                   VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_CT]                   VARCHAR (50)  NULL,
    [FF_STATE_NR_15_CT]                                   VARCHAR (50)  NULL,
    [FF_STATE_NR_05_NAME]                                 VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS] VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_CT]                 VARCHAR (50)  NULL,
    [FF_STATE_NR_19_CT]                                   VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS]                VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS]                 VARCHAR (50)  NULL,
    [FF_STATE_NR_12_NAME]                                 VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS]           VARCHAR (50)  NULL,
    [FF_Q_IN_DIALS_AGT_ABORTED_CT]                        VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS]                 VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_IN_AGT_ANS_CT]                        VARCHAR (50)  NULL,
    [FF_STATE_NR_14_NAME]                                 VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS]                  VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_CT]               VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT]                VARCHAR (50)  NULL,
    [FF_STATE_NR_09_SECS]                                 VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_CT]                VARCHAR (50)  NULL,
    [FF_STATE_NR_18_SECS]                                 VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS]  VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CT]                   VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_CT]                  VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CT]                  VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS]      VARCHAR (50)  NULL,
    [FF_STATE_NR_SECS]                                    VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_AGT_CALLS_HOLD_CT]                    VARCHAR (50)  NULL,
    [FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS]                VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT]              VARCHAR (50)  NULL,
    [FF_STATE_NR_16_NAME]                                 VARCHAR (50)  NULL,
    [FF_AGENT_LOGIN_START_TS]                             VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT]                  VARCHAR (50)  NULL,
    [FF_STATE_NR_20_NAME]                                 VARCHAR (50)  NULL,
    [FF_STATE_NR_08_CT]                                   VARCHAR (50)  NULL,
    [FF_STATE_LOGGED_OUT_CT]                              VARCHAR (50)  NULL,
    [FF_STATE_NR_03_NAME]                                 VARCHAR (50)  NULL,
    [FF_STATE_NR_11_SECS]                                 VARCHAR (50)  NULL,
    [FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS] VARCHAR (50)  NULL,
    [FF_Q_IN_CALLS_IN_AGT_ANS_SECS]                       VARCHAR (50)  NULL,
    [FF_STATE_NR_04_CT]                                   VARCHAR (50)  NULL,
    [FF_STATE_NR_07_SECS]                                 VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]                                    DATETIME      NOT NULL,
    [SEQNO]                                               INT           NOT NULL,
    [FTP_FILE_NAME]                                       VARCHAR (100) NOT NULL,
    [ID]                                                  INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_HUMACH_INVOICING_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_HUMACH_INVOICING_0_Audit] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_HUMACH_INVOICING_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_HUMACH_INVOICING_1] (
    [FF_AGENT_FIRST_NAME]                                 VARCHAR (100)   NULL,
    [FF_AGENT_LAST_NAME]                                  VARCHAR (100)   NULL,
    [FF_AGENT_ID]                                         VARCHAR (50)    NULL,
    [FF_CUSTOMER_NAME]                                    VARCHAR (100)   NULL,
    [FF_CUSTOMER_ID]                                      VARCHAR (50)    NULL,
    [FF_INTERVAL]                                         VARCHAR (50)    NULL,
    [FF_AGENT_PERFORMANCE_INTERVAL_ID]                    VARCHAR (50)    NULL,
    [FF_INTERVAL_START_TS]                                VARCHAR (50)    NULL,
    [FF_AGENT_LOGIN_START_TS]                             VARCHAR (50)    NULL,
    [FF_STATE_LOGGED_IN_SECS]                             VARCHAR (50)    NULL,
    [FF_STATE_READY_SECS]                                 VARCHAR (50)    NULL,
    [FF_STATE_ASSIGNED_SECS]                              VARCHAR (50)    NULL,
    [FF_STATE_BUSY_SECS]                                  VARCHAR (50)    NULL,
    [FF_STATE_NR_SECS]                                    VARCHAR (50)    NULL,
    [FF_STATE_NR_01_SECS]                                 VARCHAR (50)    NULL,
    [FF_STATE_NR_02_SECS]                                 VARCHAR (50)    NULL,
    [FF_STATE_NR_03_SECS]                                 VARCHAR (50)    NULL,
    [FF_STATE_NR_04_SECS]                                 VARCHAR (50)    NULL,
    [FF_STATE_NR_05_SECS]                                 VARCHAR (50)    NULL,
    [FF_STATE_NR_06_SECS]                                 VARCHAR (50)    NULL,
    [FF_STATE_NR_07_SECS]                                 VARCHAR (50)    NULL,
    [FF_STATE_DIAL_PENDING_SECS]                          VARCHAR (50)    NULL,
    [FF_STATE_UNKNOWN_SECS]                               VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS]                  VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS]           VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_ANS_SECS]                       VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS]                  VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS]       VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS]       VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS]                   VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS]  VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS]              VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS]      VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS]      VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS] VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT]                    VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT]             VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_ANS_CT]                         VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT]                     VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT]                  VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT]                    VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT]                VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT]                   VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT]                  VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT]              VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS]               VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS]       VARCHAR (50)    NOT NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS]       VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS]                 VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS]             VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS]                VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS]                 VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS]  VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS]                  VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS]                 VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS] VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS]               VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS]                VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS]      VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS]      VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS]              VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS]            VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS]                VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS]      VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS]      VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS]                 VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS] VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS]             VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_IN_AGT_ANS_SECS]                      VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS]          VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS]                  VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS]                 VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS]               VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS]              VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS]                VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS]      VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_IN_AGT_ANS_SECS]                      VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS]                  VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS]      VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS]           VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS] VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]                                    DATETIME        NOT NULL,
    [SEQNO]                                               INT             NOT NULL,
    [FTP_FILE_NAME]                                       VARCHAR (100)   NOT NULL,
    [DATETIME]                                            DATETIME        NULL,
    [HOUR_INTERVAL]                                       INT             NULL,
    [RESOURCE_NAME]                                       VARCHAR (100)   NULL,
    [LOGGED_IN_SECS]                                      DECIMAL (10, 2) NULL,
    [READY_SECS]                                          DECIMAL (10, 2) NULL,
    [ASSIGNED_SECS]                                       DECIMAL (10, 2) NULL,
    [BUSY_SECS]                                           DECIMAL (10, 2) NULL,
    [NOT_READY_SECS]                                      DECIMAL (10, 2) NULL,
    [AGENT_UNRESPONSIVE_SECS]                             DECIMAL (10, 2) NULL,
    [POST_LOGIN_SECS]                                     DECIMAL (10, 2) NULL,
    [BREAK_SECS]                                          DECIMAL (10, 2) NULL,
    [WRAP_SECS]                                           DECIMAL (10, 2) NULL,
    [NR_05_SECS]                                          DECIMAL (10, 2) NULL,
    [NR_06_SECS]                                          DECIMAL (10, 2) NULL,
    [NR_07_SECS]                                          DECIMAL (10, 2) NULL,
    [DIAL_PENDING_SECS]                                   DECIMAL (10, 2) NULL,
    [STATE_UNKNOWN_SECS]                                  DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ASSIGNED_SECS]                     DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS]              DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ANS_SECS]                          DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_AGT_CALLS_TRANS_SECS]                     DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS]          DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS]          DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_AGT_CALLS_HOLD_SECS]                      DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS]     DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS]                 DECIMAL (10, 2) NULL,
    [NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS]         DECIMAL (10, 2) NULL,
    [NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS]         DECIMAL (10, 2) NULL,
    [NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS]    DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ASSIGNED_CT]                       DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT]                DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ANS_CT]                            DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_AGT_CALLS_HOLD_CT]                        DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT]                     DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_AGT_CALLS_TRANS_CT]                       DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT]                   DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_COMPLETED_CT]                      DECIMAL (10, 2) NULL,
    [NON_Q_CALLS_OUT_AGT_CALL_ANS_CT]                     DECIMAL (10, 2) NULL,
    [NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT]                 DECIMAL (10, 2) NULL,
    [TOTAL_CALLS]                                         DECIMAL (10, 2) NULL,
    [AUTHORIZED_WRAP]                                     DECIMAL (10, 2) NULL,
    [CPROD]                                               DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]                                   DECIMAL (10, 2) NULL,
    [AUTHORIZED_MINUTES]                                  DECIMAL (10, 2) NULL,
    [EMAIL]                                               VARCHAR (100)   NULL,
    [ID_EXT]                                              VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]                                  VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY]                      INT             NULL,
    [CAL_DATE]                                            DATETIME        NULL,
    [TENANT_KEY]                                          INT             NULL,
    [AIR_DAY_TYPE]                                        VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]                                  VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]                               DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                                  VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]                          VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                                        VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                                      VARCHAR (1)     NULL,
    [READY_FOR_XML]                                       VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                                        VARCHAR (1)     NULL,
    [INVOICE_ID]                                          VARCHAR (50)    NULL,
    [ID]                                                  INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_HUMACH_INVOICING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_HUMACH_INVOICING_2]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_HUMACH_INVOICING_2] (
    [FF_AGENT_FIRST_NAME]                                 VARCHAR (100)   NULL,
    [FF_AGENT_LAST_NAME]                                  VARCHAR (100)   NULL,
    [FF_AGENT_ID]                                         VARCHAR (50)    NULL,
    [FF_CUSTOMER_NAME]                                    VARCHAR (100)   NULL,
    [FF_CUSTOMER_ID]                                      VARCHAR (50)    NULL,
    [FF_INTERVAL]                                         VARCHAR (50)    NULL,
    [FF_AGENT_PERFORMANCE_INTERVAL_ID]                    VARCHAR (50)    NULL,
    [FF_INTERVAL_START_TS]                                DATETIME        NULL,
    [FF_AGENT_LOGIN_START_TS]                             DATETIME        NULL,
    [FF_STATE_LOGGED_IN_SECS]                             DECIMAL (10, 2) NULL,
    [FF_STATE_READY_SECS]                                 DECIMAL (10, 2) NULL,
    [FF_STATE_ASSIGNED_SECS]                              DECIMAL (10, 2) NULL,
    [FF_STATE_BUSY_SECS]                                  DECIMAL (10, 2) NULL,
    [FF_STATE_NR_SECS]                                    DECIMAL (10, 2) NULL,
    [FF_STATE_NR_01_SECS]                                 DECIMAL (10, 2) NULL,
    [FF_STATE_NR_02_SECS]                                 DECIMAL (10, 2) NULL,
    [FF_STATE_NR_03_SECS]                                 DECIMAL (10, 2) NULL,
    [FF_STATE_NR_04_SECS]                                 DECIMAL (10, 2) NULL,
    [FF_STATE_NR_05_SECS]                                 DECIMAL (10, 2) NULL,
    [FF_STATE_NR_06_SECS]                                 DECIMAL (10, 2) NULL,
    [FF_STATE_NR_07_SECS]                                 DECIMAL (10, 2) NULL,
    [FF_STATE_DIAL_PENDING_SECS]                          DECIMAL (10, 2) NULL,
    [FF_STATE_UNKNOWN_SECS]                               DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS]                  DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS]           DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_IN_AGT_ANS_SECS]                       DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS]                  DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS]       DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS]       DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS]                   DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS]  DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS]              DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS]      DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS]      DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS] DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT]                    INT             NULL,
    [FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT]             INT             NULL,
    [FF_Q_IN_CALLS_IN_AGT_ANS_CT]                         INT             NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT]                     INT             NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT]                  INT             NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT]                    INT             NULL,
    [FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT]                INT             NULL,
    [FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT]                   INT             NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT]                  INT             NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT]              INT             NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS]               DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS]       DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS]       DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS]                 DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS]             DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS]                DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS]                 DECIMAL (10, 2) NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS]  DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS]                  DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS]                 DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS] DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS]               DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS]                DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS]      DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS]      DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS]              DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS]            DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS]                DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS]      DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS]      DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS]                 DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS] DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS]             DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_IN_AGT_ANS_SECS]                      DECIMAL (10, 2) NULL,
    [FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS]          DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS]                  DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS]                 DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS]               DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS]              DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS]                DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS]      DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_IN_AGT_ANS_SECS]                      DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS]                  DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS]      DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS]           DECIMAL (10, 2) NULL,
    [FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS] DECIMAL (10, 2) NULL,
    [SEQNO_ADDED_TIME]                                    DATETIME        NOT NULL,
    [SEQNO]                                               INT             NOT NULL,
    [FTP_FILE_NAME]                                       VARCHAR (100)   NOT NULL,
    [DATETIME]                                            DATETIME        NULL,
    [HOUR_INTERVAL]                                       INT             NULL,
    [RESOURCE_NAME]                                       VARCHAR (100)   NULL,
    [LOGGED_IN_SECS]                                      DECIMAL (10, 2) NULL,
    [READY_SECS]                                          DECIMAL (10, 2) NULL,
    [ASSIGNED_SECS]                                       DECIMAL (10, 2) NULL,
    [BUSY_SECS]                                           DECIMAL (10, 2) NULL,
    [NOT_READY_SECS]                                      DECIMAL (10, 2) NULL,
    [AGENT_UNRESPONSIVE_SECS]                             DECIMAL (10, 2) NULL,
    [POST_LOGIN_SECS]                                     DECIMAL (10, 2) NULL,
    [BREAK_SECS]                                          DECIMAL (10, 2) NULL,
    [WRAP_SECS]                                           DECIMAL (10, 2) NULL,
    [NR_05_SECS]                                          DECIMAL (10, 2) NULL,
    [NR_06_SECS]                                          DECIMAL (10, 2) NULL,
    [NR_07_SECS]                                          DECIMAL (10, 2) NULL,
    [DIAL_PENDING_SECS]                                   DECIMAL (10, 2) NULL,
    [STATE_UNKNOWN_SECS]                                  DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ASSIGNED_SECS]                     DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS]              DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ANS_SECS]                          DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_AGT_CALLS_TRANS_SECS]                     DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS]          DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS]          DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_AGT_CALLS_HOLD_SECS]                      DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS]     DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS]                 DECIMAL (10, 2) NULL,
    [NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS]         DECIMAL (10, 2) NULL,
    [NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS]         DECIMAL (10, 2) NULL,
    [NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS]    DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ASSIGNED_CT]                       DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT]                DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ANS_CT]                            DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_AGT_CALLS_HOLD_CT]                        DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT]                     DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_AGT_CALLS_TRANS_CT]                       DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT]                   DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_COMPLETED_CT]                      DECIMAL (10, 2) NULL,
    [NON_Q_CALLS_OUT_AGT_CALL_ANS_CT]                     DECIMAL (10, 2) NULL,
    [NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT]                 DECIMAL (10, 2) NULL,
    [TOTAL_CALLS]                                         DECIMAL (10, 2) NULL,
    [AUTHORIZED_WRAP]                                     DECIMAL (10, 2) NULL,
    [CPROD]                                               DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]                                   DECIMAL (10, 2) NULL,
    [AUTHORIZED_MINUTES]                                  DECIMAL (10, 2) NULL,
    [EMAIL]                                               VARCHAR (100)   NULL,
    [ID_EXT]                                              VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]                                  VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY]                      INT             NULL,
    [CAL_DATE]                                            DATETIME        NULL,
    [TENANT_KEY]                                          INT             NULL,
    [AIR_DAY_TYPE]                                        VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]                                  VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]                               DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                                  VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]                          VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                                        VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                                      VARCHAR (1)     NULL,
    [READY_FOR_XML]                                       VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                                        VARCHAR (1)     NULL,
    [INVOICE_ID]                                          VARCHAR (50)    NULL,
    [WS_ROW_CREATED_TIME]                                 DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                                 DATETIME        NULL,
    [ID]                                                  INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_HUMACH_INVOICING_2] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_HUMACH_INVOICING_BAD]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_HUMACH_INVOICING_BAD] (
    [BAD_IMPORTS_CODE]                                    VARCHAR (3)     NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]                               VARCHAR (3)     NULL,
    [WS_ROW_CREATED_TIME]                                 DATETIME        NOT NULL,
    [FF_AGENT_FIRST_NAME]                                 VARCHAR (100)   NULL,
    [FF_AGENT_LAST_NAME]                                  VARCHAR (100)   NULL,
    [FF_AGENT_ID]                                         VARCHAR (50)    NULL,
    [FF_CUSTOMER_NAME]                                    VARCHAR (100)   NULL,
    [FF_CUSTOMER_ID]                                      VARCHAR (50)    NULL,
    [FF_INTERVAL]                                         VARCHAR (50)    NULL,
    [FF_AGENT_PERFORMANCE_INTERVAL_ID]                    VARCHAR (50)    NULL,
    [FF_INTERVAL_START_TS]                                VARCHAR (50)    NULL,
    [FF_AGENT_LOGIN_START_TS]                             VARCHAR (50)    NULL,
    [FF_STATE_LOGGED_IN_SECS]                             VARCHAR (50)    NULL,
    [FF_STATE_READY_SECS]                                 VARCHAR (50)    NULL,
    [FF_STATE_ASSIGNED_SECS]                              VARCHAR (50)    NULL,
    [FF_STATE_BUSY_SECS]                                  VARCHAR (50)    NULL,
    [FF_STATE_NR_SECS]                                    VARCHAR (50)    NULL,
    [FF_STATE_NR_01_SECS]                                 VARCHAR (50)    NULL,
    [FF_STATE_NR_02_SECS]                                 VARCHAR (50)    NULL,
    [FF_STATE_NR_03_SECS]                                 VARCHAR (50)    NULL,
    [FF_STATE_NR_04_SECS]                                 VARCHAR (50)    NULL,
    [FF_STATE_NR_05_SECS]                                 VARCHAR (50)    NULL,
    [FF_STATE_NR_06_SECS]                                 VARCHAR (50)    NULL,
    [FF_STATE_NR_07_SECS]                                 VARCHAR (50)    NULL,
    [FF_STATE_DIAL_PENDING_SECS]                          VARCHAR (50)    NULL,
    [FF_STATE_UNKNOWN_SECS]                               VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS]                  VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS]           VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_ANS_SECS]                       VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS]                  VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS]       VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS]       VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS]                   VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS]  VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS]              VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS]      VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS]      VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS] VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT]                    VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT]             VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_ANS_CT]                         VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT]                     VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT]                  VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT]                    VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT]                VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT]                   VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT]                  VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT]              VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS]               VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS]       VARCHAR (50)    NOT NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS]       VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS]                 VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS]             VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS]                VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS]                 VARCHAR (50)    NULL,
    [FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS]  VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS]                  VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS]                 VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS] VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS]               VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS]                VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS]      VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS]      VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS]              VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS]            VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS]                VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS]      VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS]      VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS]                 VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS] VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS]             VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_IN_AGT_ANS_SECS]                      VARCHAR (50)    NULL,
    [FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS]          VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS]                  VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS]                 VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS]               VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS]              VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS]                VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS]      VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_IN_AGT_ANS_SECS]                      VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS]                  VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS]      VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS]           VARCHAR (50)    NULL,
    [FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS] VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]                                    DATETIME        NOT NULL,
    [SEQNO]                                               INT             NOT NULL,
    [FTP_FILE_NAME]                                       VARCHAR (100)   NOT NULL,
    [DATETIME]                                            DATETIME        NULL,
    [HOUR_INTERVAL]                                       INT             NULL,
    [RESOURCE_NAME]                                       VARCHAR (100)   NULL,
    [LOGGED_IN_SECS]                                      DECIMAL (10, 2) NULL,
    [READY_SECS]                                          DECIMAL (10, 2) NULL,
    [ASSIGNED_SECS]                                       DECIMAL (10, 2) NULL,
    [BUSY_SECS]                                           DECIMAL (10, 2) NULL,
    [NOT_READY_SECS]                                      DECIMAL (10, 2) NULL,
    [AGENT_UNRESPONSIVE_SECS]                             DECIMAL (10, 2) NULL,
    [POST_LOGIN_SECS]                                     DECIMAL (10, 2) NULL,
    [BREAK_SECS]                                          DECIMAL (10, 2) NULL,
    [WRAP_SECS]                                           DECIMAL (10, 2) NULL,
    [NR_05_SECS]                                          DECIMAL (10, 2) NULL,
    [NR_06_SECS]                                          DECIMAL (10, 2) NULL,
    [NR_07_SECS]                                          DECIMAL (10, 2) NULL,
    [DIAL_PENDING_SECS]                                   DECIMAL (10, 2) NULL,
    [STATE_UNKNOWN_SECS]                                  DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ASSIGNED_SECS]                     DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS]              DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ANS_SECS]                          DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_AGT_CALLS_TRANS_SECS]                     DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS]          DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS]          DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_AGT_CALLS_HOLD_SECS]                      DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS]     DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS]                 DECIMAL (10, 2) NULL,
    [NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS]         DECIMAL (10, 2) NULL,
    [NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS]         DECIMAL (10, 2) NULL,
    [NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS]    DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ASSIGNED_CT]                       DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT]                DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_ANS_CT]                            DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_AGT_CALLS_HOLD_CT]                        DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT]                     DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_AGT_CALLS_TRANS_CT]                       DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT]                   DECIMAL (10, 2) NULL,
    [Q_IN_CALLS_IN_AGT_COMPLETED_CT]                      DECIMAL (10, 2) NULL,
    [NON_Q_CALLS_OUT_AGT_CALL_ANS_CT]                     DECIMAL (10, 2) NULL,
    [NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT]                 DECIMAL (10, 2) NULL,
    [TOTAL_CALLS]                                         DECIMAL (10, 2) NULL,
    [AUTHORIZED_WRAP]                                     DECIMAL (10, 2) NULL,
    [CPROD]                                               DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]                                   DECIMAL (10, 2) NULL,
    [AUTHORIZED_MINUTES]                                  DECIMAL (10, 2) NULL,
    [EMAIL]                                               VARCHAR (100)   NULL,
    [ID_EXT]                                              VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]                                  VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY]                      INT             NULL,
    [CAL_DATE]                                            DATETIME        NULL,
    [TENANT_KEY]                                          INT             NULL,
    [AIR_DAY_TYPE]                                        VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]                                  VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]                                  DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                                  VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]                          VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                                        VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                                      VARCHAR (1)     NULL,
    [READY_FOR_XML]                                       VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                                        VARCHAR (1)     NULL,
    [INVOICE_ID]                                          VARCHAR (50)    NULL,
    [ID]                                                  INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_HUMACH_INVOICING_BAD] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_HUMACH_INVOICING_BAD] UNIQUE NONCLUSTERED ([BAD_IMPORTS_CODE] ASC, [WS_ROW_CREATED_TIME] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_HUMACH_SD_AIA_STATIC_DEFAULTS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_HUMACH_SD_AIA_STATIC_DEFAULTS] (
    [PLATFORM]                          VARCHAR (50)  NULL,
    [STATUS]                            VARCHAR (50)  NULL,
    [INVOICE_MAP_KEY]                   VARCHAR (50)  NULL,
    [FIELD_NAME]                        VARCHAR (50)  NULL,
    [SCHEDULER_PROJECT_ID]              VARCHAR (50)  NULL,
    [SCHEDULER_ACL_NAME]                VARCHAR (50)  NULL,
    [ACD_ID_EXTENSION]                  VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_ID]           VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]         VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_ID]            VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_NAME]          VARCHAR (50)  NULL,
    [PRIMARY_PROJECT_MANAGER_ID]        VARCHAR (150) NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID] VARCHAR (150) NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]       VARCHAR (150) NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]        VARCHAR (150) NULL,
    [INVOICE_SYSTEM_ID]                 VARCHAR (50)  NULL,
    [HOLIDAY_INVOICE_ID]                VARCHAR (50)  NULL,
    [HOLIDAY]                           VARCHAR (50)  NULL,
    [FILE_FORMAT_OF_PUSH]               VARCHAR (50)  NULL,
    [AGENT_PREPARATION_INVOICE_ID]      VARCHAR (50)  NULL,
    [NEW_ACL]                           VARCHAR (50)  NULL,
    [CURRENT_CATS]                      VARCHAR (50)  NULL,
    [CATS_ID]                           VARCHAR (50)  NULL,
    [PATS_ID]                           VARCHAR (50)  NULL,
    [SMART_ELIGIBLE]                    VARCHAR (50)  NULL,
    [SMART_TIER_1]                      VARCHAR (50)  NULL,
    [SMART_TIER_2]                      VARCHAR (50)  NULL,
    [SMART_TIER_3]                      VARCHAR (50)  NULL,
    [INTERVAL]                          VARCHAR (50)  NULL,
    [TENANT_KEY]                        INT           NULL,
    [WS_ROW_CREATED_TIME]               DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]               DATETIME      NULL,
    [ID]                                INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_HUMACH_SD_AIA_STATIC_DEFAULTS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_HUMACH_SD_INVOICE_GROUPS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_HUMACH_SD_INVOICE_GROUPS] (
    [SCHEDULER_ACL_NAME]               VARCHAR (100)  NOT NULL,
    [ID_EXT]                           VARCHAR (3)    NOT NULL,
    [TENANT_KEY]                       INT            NOT NULL,
    [include_in_cas]                   VARCHAR (1)    NOT NULL,
    [ready_for_xml]                    VARCHAR (1)    NULL,
    [has_holidays]                     VARCHAR (1)    NOT NULL,
    [show_id_exts]                     VARCHAR (1)    NOT NULL,
    [include_in_universe_agent_invo]   VARCHAR (1)    NULL,
    [include_in_wsinet_usage]          VARCHAR (1)    NULL,
    [include_in_wslive_billing]        VARCHAR (1)    NULL,
    [include_in_olympics]              VARCHAR (1)    NULL,
    [include_in_novatel]               VARCHAR (1)    NULL,
    [include_in_wsol_exports]          VARCHAR (1)    NULL,
    [min_guarantee_minutes]            DECIMAL (6, 3) NULL,
    [min_guarantee_type]               VARCHAR (50)   NULL,
    [authorized_to_invoice_type]       VARCHAR (50)   NULL,
    [min_guarantee_flds]               VARCHAR (150)  NULL,
    [minguar_form]                     VARCHAR (500)  NULL,
    [invoice_formula]                  VARCHAR (500)  NULL,
    [pay_rate_standard]                DECIMAL (6, 3) NULL,
    [pay_rate_holiday]                 DECIMAL (6, 3) NULL,
    [is_client_team]                   VARCHAR (1)    NULL,
    [is_production_team]               VARCHAR (1)    NULL,
    [client_billing_master_group_name] VARCHAR (150)  NULL,
    [DLY_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [MTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WS_START_TIME]                    DATETIME       NULL,
    [WS_END_TIME]                      DATETIME       NULL,
    [WS_ROW_CREATED_TIME]              DATETIME       NULL,
    [WS_ROW_UPDATED_TIME]              DATETIME       NULL,
    [ID]                               INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_HUMACH_SD_INVOICE_GROUPS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_HUMACH_SD_INVOICE_HOLIDAYS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_HUMACH_SD_INVOICE_HOLIDAYS] (
    [HOLIDAY_DATE] SMALLDATETIME NOT NULL,
    [ID]           INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_HUMACH_INVOICE_HOLIDAYS] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_HUMACH_INVOICE_HOLIDAYS] UNIQUE NONCLUSTERED ([HOLIDAY_DATE] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_HUMACH_SD_INVOICE_HOLIDAYS_ADDL]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_HUMACH_SD_INVOICE_HOLIDAYS_ADDL] (
    [HOLIDAY_DATE] DATETIME    NOT NULL,
    [ID_EXT]       VARCHAR (3) NOT NULL,
    [ID]           INT         IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_HUMACH_SD_INVOICE_HOLIDAYS_ADDL] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_HUMACH_UV_ANT_AIA]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_HUMACH_UV_ANT_AIA] (
    [PLATFORM]                           VARCHAR (50)    NULL,
    [STATUS]                             VARCHAR (50)    NULL,
    [INVOICE_MAP_KEY]                    VARCHAR (50)    NOT NULL,
    [FIELD_NAME]                         VARCHAR (50)    NULL,
    [SCHEDULER_PROJECT_ID]               VARCHAR (50)    NULL,
    [SCHEDULER_ACL_NAME]                 VARCHAR (50)    NOT NULL,
    [ACD_ID_EXTENSION]                   VARCHAR (50)    NOT NULL,
    [OFFICIAL_WSOL_CLIENT_ID]            VARCHAR (50)    NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]          VARCHAR (50)    NULL,
    [OFFICIAL_ACD_CLIENT_ID]             VARCHAR (50)    NOT NULL,
    [OFFICIAL_ACD_CLIENT_NAME]           VARCHAR (50)    NULL,
    [PRIMARY_PROJECT_MANAGER_ID]         VARCHAR (150)   NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID]  VARCHAR (150)   NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]        VARCHAR (150)   NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]         VARCHAR (150)   NULL,
    [INVOICE_SYSTEM_ID]                  VARCHAR (50)    NOT NULL,
    [HOLIDAY_INVOICE_ID]                 VARCHAR (50)    NOT NULL,
    [HOLIDAY]                            VARCHAR (50)    NOT NULL,
    [FILE_FORMAT_OF_PUSH]                VARCHAR (50)    NULL,
    [AGENT_PREPARATION_INVOICE_ID]       VARCHAR (50)    NULL,
    [NEW_ACL]                            VARCHAR (50)    NULL,
    [CURRENT_CATS]                       VARCHAR (50)    NULL,
    [CATS_ID]                            VARCHAR (50)    NULL,
    [PATS_ID]                            VARCHAR (50)    NULL,
    [SMART_ELIGIBLE]                     VARCHAR (50)    NULL,
    [SMART_TIER_1]                       VARCHAR (50)    NULL,
    [SMART_TIER_2]                       VARCHAR (50)    NULL,
    [SMART_TIER_3]                       VARCHAR (50)    NULL,
    [INTERVAL]                           VARCHAR (50)    NULL,
    [DATE]                               VARCHAR (50)    NULL,
    [HOD_INTERVAL]                       VARCHAR (50)    NULL,
    [AU_DK_LOGGED_IN_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_AVAILABLE_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_TALK_DURATION]                DECIMAL (10, 2) NULL,
    [AU_DK_IB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_OB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_CONVENTIONAL_ACW]             DECIMAL (10, 2) NULL,
    [AU_DK_NR_DURATION]                  DECIMAL (10, 2) NULL,
    [AU_DK_PSEUDO_PRODUCTIVE_DURATION]   DECIMAL (10, 2) NULL,
    [AU_DK_ADJUSTED_NR_DURATION]         DECIMAL (10, 2) NULL,
    [AU_DK_TOTAL_PRODUCTIVE_DURATION]    DECIMAL (10, 2) NULL,
    [AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] DECIMAL (10, 2) NULL,
    [AU_DK_XFER_COUNT]                   INT             NULL,
    [AU_DK_HOLD_COUNT]                   INT             NULL,
    [AU_DK_CONFERENCE_COUNT]             INT             NULL,
    [AU_DK_CONSULT_COUNT]                INT             NULL,
    [AU_DK_PUP_COUNT]                    INT             NULL,
    [AU_DK_OFFERED_COUNT]                INT             NULL,
    [AU_DK_HANDLED_COUNT]                INT             NULL,
    [AU_DK_IB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_OB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_RONA_COUNT]                   INT             NULL,
    [AU_DK_AWR_COUNT]                    INT             NULL,
    [MINIMUM_GUARANTEE]                  DECIMAL (10, 2) NULL,
    [AUTHORIZED_TO_INVOICE]              DECIMAL (10, 2) NULL,
    [WEEK_ENDING_DATE]                   VARCHAR (10)    NULL,
    [PAY_CYCLE_CLOSURE_DATE]             VARCHAR (10)    NULL,
    [FTP_FILE_NAME]                      VARCHAR (100)   NOT NULL,
    [EMAIL]                              VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]     INT             NOT NULL,
    [CAL_DATE]                           DATETIME        NULL,
    [TENANT_KEY]                         INT             NOT NULL,
    [AIR_DAY_TYPE]                       VARCHAR (1)     NOT NULL,
    [AIR_ACW_FONT_COLOR]                 VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]                 DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                 VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]         VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                       VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                     VARCHAR (1)     NULL,
    [READY_FOR_XML]                      VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                       VARCHAR (1)     NULL,
    [INVOICE_ID]                         VARCHAR (50)    NULL,
    [RESOURCE_NAME]                      VARCHAR (100)   NULL,
    [PAY_GROUP]                          INT             NULL,
    [AIRITKDUR]                          DECIMAL (10, 2) NULL,
    [AIRIACDUR]                          DECIMAL (10, 2) NULL,
    [WS_ROW_CREATED_TIME]                DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                DATETIME        NULL,
    [ID]                                 INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_HUMACH_UV_ANT_AIA] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_HUMACH_UV_ANT_AIA] UNIQUE NONCLUSTERED ([INVOICE_MAP_KEY] ASC, [SCHEDULER_ACL_NAME] ASC, [ACD_ID_EXTENSION] ASC, [HOLIDAY] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [TENANT_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING] (
    [RESOURCE_NAME]        VARCHAR (200) NULL,
    [INVOICE_MAP_KEY]      VARCHAR (200) NOT NULL,
    [EMAIL]                VARCHAR (100) NULL,
    [INVOICE_GROUP]        VARCHAR (50)  NOT NULL,
    [PAY_GROUP]            VARCHAR (50)  NULL,
    [FTP_FILE_NAME]        VARCHAR (100) NULL,
    [CST_ROW_CREATED_TIME] DATETIME      NOT NULL,
    [CST_ROW_UPDATED_TIME] DATETIME      NULL,
    [ID]                   INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING] UNIQUE NONCLUSTERED ([RESOURCE_NAME] ASC, [INVOICE_MAP_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_1] (
    [RESOURCE_NAME]    VARCHAR (200) NULL,
    [INVOICE_MAP_KEY]  VARCHAR (200) NOT NULL,
    [FF_EMAIL_ADDRESS] VARCHAR (100) NULL,
    [FF_INVOICE_GROUP] VARCHAR (50)  NULL,
    [FF_PAY_GROUP]     VARCHAR (50)  NULL,
    [FTP_FILE_NAME]    VARCHAR (100) NULL,
    [ID]               INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_ERRORS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_ERRORS] (
    [RESOURCE_NAME]         VARCHAR (200)  NULL,
    [INVOICE_MAP_KEY]       VARCHAR (200)  NOT NULL,
    [EMAIL]                 VARCHAR (100)  NULL,
    [INVOICE_GROUP]         VARCHAR (100)  NOT NULL,
    [PAY_GROUP]             VARCHAR (50)   NULL,
    [FTP_FILE_NAME]         VARCHAR (100)  NULL,
    [WS_ROW_CREATED_TIME]   DATETIME       NULL,
    [IMPORT_SUB_GROUP_NAME] VARCHAR (100)  NULL,
    [ERROR_TAG]             VARCHAR (50)   NULL,
    [ERROR_MSG]             VARCHAR (2500) NULL,
    [ID]                    INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_ERRORS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_IC_INVOICING]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_IC_INVOICING] (
    [FF_DATE]                               VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]                VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                         VARCHAR (100)   NULL,
    [FF_UNAVAILABLE_CODE]                   VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                         VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                          VARCHAR (50)    NOT NULL,
    [FF_LOGIN_TIME]                         DECIMAL (10, 2) NULL,
    [FF_AVAILABLE_TIME]                     DECIMAL (10, 2) NULL,
    [FF_UNAVAILABLE_TIME_MINUS_ACW]         DECIMAL (10, 2) NULL,
    [FF_TALK_TIME]                          DECIMAL (10, 2) NULL,
    [FF_HOLD_TIME]                          DECIMAL (10, 2) NULL,
    [FF_ACW_TIME]                           DECIMAL (10, 2) NULL,
    [FF_HELD_PARTY_ABANDONS]                DECIMAL (10, 2) NULL,
    [FF_INBOUND_HANDLED]                    DECIMAL (10, 2) NULL,
    [FF_OUTBOUND_HANDLED]                   DECIMAL (10, 2) NULL,
    [SEQNO_ADDED_TIME]                      DATETIME        NOT NULL,
    [SEQNO]                                 INT             NOT NULL,
    [FTP_FILE_NAME]                         VARCHAR (100)   NOT NULL,
    [DATETIME]                              DATETIME        NULL,
    [HOUR_INTERVAL]                         INT             NULL,
    [AGENT_NAME]                            VARCHAR (50)    NULL,
    [UNAVAILABLE_CODE]                      VARCHAR (100)   NULL,
    [SKILL_NAME]                            VARCHAR (50)    NULL,
    [TEAM_NAME]                             VARCHAR (50)    NULL,
    [INBOUND_HANDLED_COUNT]                 DECIMAL (10, 2) NULL,
    [OUTBOUND_HANDLED_COUNT]                DECIMAL (10, 2) NULL,
    [TOTAL_CALL_COUNT]                      DECIMAL (10, 2) NULL,
    [HELD_PARTY_ABANDON_COUNT]              DECIMAL (10, 2) NULL,
    [LOGIN_TIME]                            DECIMAL (10, 2) NULL,
    [AVAILABLE_TIME]                        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_EMAIL_TIME]                DECIMAL (10, 2) NULL,
    [UNAVAILABLE_WSOL_EMAIL_TIME]           DECIMAL (10, 2) NULL,
    [UNAVAILABLE_FLOOR_SUPPORT_TIME]        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SPECIAL_PROJECT_TIME]      DECIMAL (10, 2) NULL,
    [UNAVAILABLE_HELD_PARTY_ABANDONED_TIME] DECIMAL (10, 2) NULL,
    [UNAVAILABLE_IT_SYS_ISSUE_TIME]         DECIMAL (10, 2) NULL,
    [UNAVAILABLE_IDLE_TIME]                 DECIMAL (10, 2) NULL,
    [UNAVAILABLE_REFUSED_TIME]              DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SYSTEM_PENDING_TIME]       DECIMAL (10, 2) NULL,
    [UNAVAILABLE_OUTBOUND_CALL_TIME]        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_TIME_MINUS_ACW]            DECIMAL (10, 2) NULL,
    [TALK_TIME]                             DECIMAL (10, 2) NULL,
    [HOLD_TIME]                             DECIMAL (10, 2) NULL,
    [ACW_TIME]                              DECIMAL (10, 2) NULL,
    [AUTHORIZED_ACW_TIME]                   DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]               DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                            DECIMAL (10, 2) NULL,
    [HANDLE_TIME]                           DECIMAL (10, 2) NULL,
    [CPROD]                                 DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]                     DECIMAL (10, 2) NULL,
    [AUTHORIZED_TO_INVOICE]                 DECIMAL (10, 2) NULL,
    [EMAIL]                                 VARCHAR (100)   NULL,
    [ID_EXT]                                VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]                    VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]        INT             NULL,
    [CAL_DATE]                              DATETIME        NULL,
    [TENANT_KEY]                            INT             NULL,
    [AIR_DAY_TYPE]                          VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]                    VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]                 DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                    VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]            VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                          VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                        VARCHAR (1)     NULL,
    [READY_FOR_XML]                         VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                          VARCHAR (1)     NULL,
    [INVOICE_ID]                            VARCHAR (100)   NULL,
    [RESOURCE_NAME]                         VARCHAR (100)   NULL,
    [AIRITKDUR]                             INT             NULL,
    [AIRIACDUR]                             INT             NULL,
    [PAY_GROUP]                             INT             NULL,
    [WS_ROW_CREATED_TIME]                   DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                   DATETIME        NULL,
    [ID]                                    INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_IC_INVOICING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_MONAT_IC_INVOICING] UNIQUE NONCLUSTERED ([FF_AGENT_NAME] ASC, [ID_EXT] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_IC_INVOICING_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_IC_INVOICING_0_Audit] (
    [FF_DATE]                       VARCHAR (50)  NULL,
    [FF_INTERVAL_30_MINUTES]        VARCHAR (50)  NULL,
    [FF_AGENT_NAME]                 VARCHAR (100) NULL,
    [FF_UNAVAILABLE_CODE]           VARCHAR (100) NULL,
    [FF_SKILL_NAME]                 VARCHAR (50)  NULL,
    [FF_TEAM_NAME]                  VARCHAR (50)  NOT NULL,
    [FF_LOGIN_TIME]                 VARCHAR (50)  NULL,
    [FF_AVAILABLE_TIME]             VARCHAR (50)  NULL,
    [FF_UNAVAILABLE_TIME_MINUS_ACW] VARCHAR (50)  NULL,
    [FF_TALK_TIME]                  VARCHAR (50)  NULL,
    [FF_HOLD_TIME]                  VARCHAR (50)  NULL,
    [FF_ACW_TIME]                   VARCHAR (50)  NULL,
    [FF_HELD_PARTY_ABANDONS]        VARCHAR (50)  NULL,
    [FF_INBOUND_HANDLED]            VARCHAR (50)  NULL,
    [FF_OUTBOUND_HANDLED]           VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]              DATETIME      NOT NULL,
    [SEQNO]                         INT           NOT NULL,
    [FTP_FILE_NAME]                 VARCHAR (100) NOT NULL,
    [ID]                            INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_IC_INVOICING_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_MONAT_IC_INVOICING_0_Audit] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1] (
    [FF_DATE]                               VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]                VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                         VARCHAR (100)   NULL,
    [FF_UNAVAILABLE_CODE]                   VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                         VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                          VARCHAR (50)    NOT NULL,
    [FF_LOGIN_TIME]                         VARCHAR (50)    NULL,
    [FF_AVAILABLE_TIME]                     VARCHAR (50)    NULL,
    [FF_UNAVAILABLE_TIME_MINUS_ACW]         VARCHAR (50)    NULL,
    [FF_TALK_TIME]                          VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                          VARCHAR (50)    NULL,
    [FF_ACW_TIME]                           VARCHAR (50)    NULL,
    [FF_HELD_PARTY_ABANDONS]                VARCHAR (50)    NULL,
    [FF_INBOUND_HANDLED]                    VARCHAR (50)    NULL,
    [FF_OUTBOUND_HANDLED]                   VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]                      DATETIME        NOT NULL,
    [SEQNO]                                 INT             NOT NULL,
    [FTP_FILE_NAME]                         VARCHAR (100)   NOT NULL,
    [DATETIME]                              DATETIME        NULL,
    [HOUR_INTERVAL]                         INT             NULL,
    [AGENT_NAME]                            VARCHAR (50)    NULL,
    [UNAVAILABLE_CODE]                      VARCHAR (100)   NULL,
    [SKILL_NAME]                            VARCHAR (50)    NULL,
    [TEAM_NAME]                             VARCHAR (50)    NULL,
    [INBOUND_HANDLED_COUNT]                 DECIMAL (10, 2) NULL,
    [OUTBOUND_HANDLED_COUNT]                DECIMAL (10, 2) NULL,
    [TOTAL_CALL_COUNT]                      DECIMAL (10, 2) NULL,
    [HELD_PARTY_ABANDON_COUNT]              DECIMAL (10, 2) NULL,
    [LOGIN_TIME]                            DECIMAL (10, 2) NULL,
    [AVAILABLE_TIME]                        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_EMAIL_TIME]                DECIMAL (10, 2) NULL,
    [UNAVAILABLE_WSOL_EMAIL_TIME]           DECIMAL (10, 2) NULL,
    [UNAVAILABLE_FLOOR_SUPPORT_TIME]        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SPECIAL_PROJECT_TIME]      DECIMAL (10, 2) NULL,
    [UNAVAILABLE_HELD_PARTY_ABANDONED_TIME] DECIMAL (10, 2) NULL,
    [UNAVAILABLE_IT_SYS_ISSUE_TIME]         DECIMAL (10, 2) NULL,
    [UNAVAILABLE_IDLE_TIME]                 DECIMAL (10, 2) NULL,
    [UNAVAILABLE_REFUSED_TIME]              DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SYSTEM_PENDING_TIME]       DECIMAL (10, 2) NULL,
    [UNAVAILABLE_OUTBOUND_CALL_TIME]        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_TIME_MINUS_ACW]            DECIMAL (10, 2) NULL,
    [TALK_TIME]                             DECIMAL (10, 2) NULL,
    [HOLD_TIME]                             DECIMAL (10, 2) NULL,
    [ACW_TIME]                              DECIMAL (10, 2) NULL,
    [AUTHORIZED_ACW_TIME]                   DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]               DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                            DECIMAL (10, 2) NULL,
    [HANDLE_TIME]                           DECIMAL (10, 2) NULL,
    [CPROD]                                 DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]                     DECIMAL (10, 2) NULL,
    [AUTHORIZED_TO_INVOICE]                 DECIMAL (10, 2) NULL,
    [EMAIL]                                 VARCHAR (100)   NULL,
    [ID_EXT]                                VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]                    VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]        INT             NULL,
    [CAL_DATE]                              DATETIME        NULL,
    [TENANT_KEY]                            INT             NULL,
    [AIR_DAY_TYPE]                          VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]                    VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]                 DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                    VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]            VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                          VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                        VARCHAR (1)     NULL,
    [READY_FOR_XML]                         VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                          VARCHAR (1)     NULL,
    [INVOICE_ID]                            VARCHAR (100)   NULL,
    [RESOURCE_NAME]                         VARCHAR (100)   NULL,
    [AIRITKDUR]                             INT             NULL,
    [AIRIACDUR]                             INT             NULL,
    [PAY_GROUP]                             INT             NULL,
    [ID]                                    INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2] (
    [FF_DATE]                               VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]                VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                         VARCHAR (100)   NULL,
    [FF_UNAVAILABLE_CODE]                   VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                         VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                          VARCHAR (50)    NOT NULL,
    [FF_LOGIN_TIME]                         DECIMAL (10, 2) NULL,
    [FF_AVAILABLE_TIME]                     DECIMAL (10, 2) NULL,
    [FF_UNAVAILABLE_TIME_MINUS_ACW]         DECIMAL (10, 2) NULL,
    [FF_TALK_TIME]                          DECIMAL (10, 2) NULL,
    [FF_HOLD_TIME]                          DECIMAL (10, 2) NULL,
    [FF_ACW_TIME]                           DECIMAL (10, 2) NULL,
    [FF_HELD_PARTY_ABANDONS]                DECIMAL (10, 2) NULL,
    [FF_INBOUND_HANDLED]                    DECIMAL (10, 2) NULL,
    [FF_OUTBOUND_HANDLED]                   DECIMAL (10, 2) NULL,
    [SEQNO_ADDED_TIME]                      DATETIME        NOT NULL,
    [SEQNO]                                 INT             NOT NULL,
    [FTP_FILE_NAME]                         VARCHAR (100)   NOT NULL,
    [DATETIME]                              DATETIME        NULL,
    [HOUR_INTERVAL]                         INT             NULL,
    [AGENT_NAME]                            VARCHAR (50)    NULL,
    [UNAVAILABLE_CODE]                      VARCHAR (100)   NULL,
    [SKILL_NAME]                            VARCHAR (50)    NULL,
    [TEAM_NAME]                             VARCHAR (50)    NULL,
    [INBOUND_HANDLED_COUNT]                 DECIMAL (10, 2) NULL,
    [OUTBOUND_HANDLED_COUNT]                DECIMAL (10, 2) NULL,
    [TOTAL_CALL_COUNT]                      DECIMAL (10, 2) NULL,
    [HELD_PARTY_ABANDON_COUNT]              DECIMAL (10, 2) NULL,
    [LOGIN_TIME]                            DECIMAL (10, 2) NULL,
    [AVAILABLE_TIME]                        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_EMAIL_TIME]                DECIMAL (10, 2) NULL,
    [UNAVAILABLE_WSOL_EMAIL_TIME]           DECIMAL (10, 2) NULL,
    [UNAVAILABLE_FLOOR_SUPPORT_TIME]        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SPECIAL_PROJECT_TIME]      DECIMAL (10, 2) NULL,
    [UNAVAILABLE_HELD_PARTY_ABANDONED_TIME] DECIMAL (10, 2) NULL,
    [UNAVAILABLE_IT_SYS_ISSUE_TIME]         DECIMAL (10, 2) NULL,
    [UNAVAILABLE_IDLE_TIME]                 DECIMAL (10, 2) NULL,
    [UNAVAILABLE_REFUSED_TIME]              DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SYSTEM_PENDING_TIME]       DECIMAL (10, 2) NULL,
    [UNAVAILABLE_OUTBOUND_CALL_TIME]        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_TIME_MINUS_ACW]            DECIMAL (10, 2) NULL,
    [TALK_TIME]                             DECIMAL (10, 2) NULL,
    [HOLD_TIME]                             DECIMAL (10, 2) NULL,
    [ACW_TIME]                              DECIMAL (10, 2) NULL,
    [AUTHORIZED_ACW_TIME]                   DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]               DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                            DECIMAL (10, 2) NULL,
    [HANDLE_TIME]                           DECIMAL (10, 2) NULL,
    [CPROD]                                 DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]                     DECIMAL (10, 2) NULL,
    [AUTHORIZED_TO_INVOICE]                 DECIMAL (10, 2) NULL,
    [EMAIL]                                 VARCHAR (100)   NULL,
    [ID_EXT]                                VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]                    VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]        INT             NULL,
    [CAL_DATE]                              DATETIME        NULL,
    [TENANT_KEY]                            INT             NULL,
    [AIR_DAY_TYPE]                          VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]                    VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]                 DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                    VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]            VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                          VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                        VARCHAR (1)     NULL,
    [READY_FOR_XML]                         VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                          VARCHAR (1)     NULL,
    [INVOICE_ID]                            VARCHAR (100)   NULL,
    [RESOURCE_NAME]                         VARCHAR (100)   NULL,
    [AIRITKDUR]                             INT             NULL,
    [AIRIACDUR]                             INT             NULL,
    [PAY_GROUP]                             INT             NULL,
    [WS_ROW_CREATED_TIME]                   DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                   DATETIME        NULL,
    [ID]                                    INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_IC_INVOICING_BAD]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_IC_INVOICING_BAD] (
    [BAD_IMPORTS_NO]                        VARCHAR (3)     NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]                 VARCHAR (3)     NULL,
    [WS_ROW_CREATED_TIME]                   DATETIME        NOT NULL,
    [FF_DATE]                               VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]                VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                         VARCHAR (100)   NULL,
    [FF_UNAVAILABLE_CODE]                   VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                         VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                          VARCHAR (50)    NOT NULL,
    [FF_LOGIN_TIME]                         VARCHAR (50)    NULL,
    [FF_AVAILABLE_TIME]                     VARCHAR (50)    NULL,
    [FF_UNAVAILABLE_TIME_MINUS_ACW]         VARCHAR (50)    NULL,
    [FF_TALK_TIME]                          VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                          VARCHAR (50)    NULL,
    [FF_ACW_TIME]                           VARCHAR (50)    NULL,
    [FF_HELD_PARTY_ABANDONS]                VARCHAR (50)    NULL,
    [FF_INBOUND_HANDLED]                    VARCHAR (50)    NULL,
    [FF_OUTBOUND_HANDLED]                   VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]                      DATETIME        NOT NULL,
    [SEQNO]                                 INT             NOT NULL,
    [FTP_FILE_NAME]                         VARCHAR (100)   NOT NULL,
    [DATETIME]                              DATETIME        NULL,
    [HOUR_INTERVAL]                         INT             NULL,
    [AGENT_NAME]                            VARCHAR (50)    NULL,
    [UNAVAILABLE_CODE]                      VARCHAR (100)   NULL,
    [SKILL_NAME]                            VARCHAR (50)    NULL,
    [TEAM_NAME]                             VARCHAR (50)    NULL,
    [INBOUND_HANDLED_COUNT]                 DECIMAL (10, 2) NULL,
    [OUTBOUND_HANDLED_COUNT]                DECIMAL (10, 2) NULL,
    [TOTAL_CALL_COUNT]                      DECIMAL (10, 2) NULL,
    [HELD_PARTY_ABANDON_COUNT]              DECIMAL (10, 2) NULL,
    [LOGIN_TIME]                            DECIMAL (10, 2) NULL,
    [AVAILABLE_TIME]                        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_EMAIL_TIME]                DECIMAL (10, 2) NULL,
    [UNAVAILABLE_WSOL_EMAIL_TIME]           DECIMAL (10, 2) NULL,
    [UNAVAILABLE_FLOOR_SUPPORT_TIME]        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SPECIAL_PROJECT_TIME]      DECIMAL (10, 2) NULL,
    [UNAVAILABLE_HELD_PARTY_ABANDONED_TIME] DECIMAL (10, 2) NULL,
    [UNAVAILABLE_IT_SYS_ISSUE_TIME]         DECIMAL (10, 2) NULL,
    [UNAVAILABLE_IDLE_TIME]                 DECIMAL (10, 2) NULL,
    [UNAVAILABLE_REFUSED_TIME]              DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SYSTEM_PENDING_TIME]       DECIMAL (10, 2) NULL,
    [UNAVAILABLE_OUTBOUND_CALL_TIME]        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_TIME_MINUS_ACW]            DECIMAL (10, 2) NULL,
    [TALK_TIME]                             DECIMAL (10, 2) NULL,
    [HOLD_TIME]                             DECIMAL (10, 2) NULL,
    [ACW_TIME]                              DECIMAL (10, 2) NULL,
    [AUTHORIZED_ACW_TME]                    DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]               DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                            DECIMAL (10, 2) NULL,
    [HANDLE_TIME]                           DECIMAL (10, 2) NULL,
    [CPROD]                                 DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]                     DECIMAL (10, 2) NULL,
    [AUTHORIZED_TO_INVOICE]                 DECIMAL (10, 2) NULL,
    [EMAIL]                                 VARCHAR (100)   NULL,
    [ID_EXT]                                VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]                    VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]        INT             NULL,
    [CAL_DATE]                              DATETIME        NULL,
    [TENANT_KEY]                            INT             NULL,
    [AIR_DAY_TYPE]                          VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]                    VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]                 DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                    VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]            VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                          VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                        VARCHAR (1)     NULL,
    [READY_FOR_XML]                         VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                          VARCHAR (1)     NULL,
    [INVOICE_ID]                            VARCHAR (100)   NULL,
    [RESOURCE_NAME]                         VARCHAR (100)   NULL,
    [AIRITKDUR]                             INT             NULL,
    [AIRIACDUR]                             INT             NULL,
    [PAY_GROUP]                             INT             NULL,
    [ID]                                    INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_IC_INVOICING_BAD] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_MONAT_IC_INVOICING_BAD] UNIQUE NONCLUSTERED ([BAD_IMPORTS_NO] ASC, [WS_ROW_CREATED_TIME] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING] (
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]         VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                  VARCHAR (100)   NOT NULL,
    [FF_SKILL_NAME]                  VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                   VARCHAR (50)    NOT NULL,
    [FF_CONTACT_ID]                  VARCHAR (50)    NULL,
    [FF_MASTER_CONTACT_ID]           VARCHAR (50)    NULL,
    [FF_TALK_TIME]                   VARCHAR (50)    NULL,
    [FF_ACW_TIME]                    VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                   VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [AGENT_NAME]                     VARCHAR (50)    NULL,
    [SKILL_NAME]                     VARCHAR (50)    NULL,
    [TEAM_NAME]                      VARCHAR (50)    NULL,
    [TALK_TIME]                      DECIMAL (10, 2) NULL,
    [ACW_TIME]                       DECIMAL (10, 2) NULL,
    [HOLD_TIME]                      DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]        DECIMAL (10, 2) NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NOT NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME        NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING] UNIQUE NONCLUSTERED ([FF_AGENT_NAME] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_0_Audit] (
    [FF_DATE]                VARCHAR (50)  NULL,
    [FF_INTERVAL_30_MINUTES] VARCHAR (50)  NULL,
    [FF_AGENT_NAME]          VARCHAR (100) NULL,
    [FF_SKILL_NAME]          VARCHAR (50)  NULL,
    [FF_TEAM_NAME]           VARCHAR (50)  NOT NULL,
    [FF_CONTACT_ID]          VARCHAR (50)  NULL,
    [FF_MASTER_CONTACT_ID]   VARCHAR (50)  NULL,
    [FF_TALK_TIME]           VARCHAR (50)  NULL,
    [FF_ACW_TIME]            VARCHAR (50)  NULL,
    [FF_HOLD_TIME]           VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]       DATETIME      NOT NULL,
    [SEQNO]                  INT           NOT NULL,
    [FTP_FILE_NAME]          VARCHAR (100) NOT NULL,
    [ID]                     INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_0_Audit] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1] (
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]         VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                  VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                  VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                   VARCHAR (50)    NOT NULL,
    [FF_CONTACT_ID]                  VARCHAR (50)    NULL,
    [FF_MASTER_CONTACT_ID]           VARCHAR (50)    NULL,
    [FF_TALK_TIME]                   VARCHAR (50)    NULL,
    [FF_ACW_TIME]                    VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                   VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [AGENT_NAME]                     VARCHAR (50)    NULL,
    [SKILL_NAME]                     VARCHAR (50)    NULL,
    [TEAM_NAME]                      VARCHAR (50)    NULL,
    [TALK_TIME]                      DECIMAL (10, 2) NULL,
    [ACW_TIME]                       DECIMAL (10, 2) NULL,
    [HOLD_TIME]                      DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]        DECIMAL (10, 2) NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_2]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_2] (
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]         VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                  VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                  VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                   VARCHAR (50)    NOT NULL,
    [FF_CONTACT_ID]                  VARCHAR (50)    NULL,
    [FF_MASTER_CONTACT_ID]           VARCHAR (50)    NULL,
    [FF_TALK_TIME]                   DECIMAL (10, 2) NULL,
    [FF_ACW_TIME]                    DECIMAL (10, 2) NULL,
    [FF_HOLD_TIME]                   DECIMAL (10, 2) NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [AGENT_NAME]                     VARCHAR (50)    NULL,
    [SKILL_NAME]                     VARCHAR (50)    NULL,
    [TEAM_NAME]                      VARCHAR (50)    NULL,
    [TALK_TIME]                      DECIMAL (10, 2) NULL,
    [ACW_TIME]                       DECIMAL (10, 2) NULL,
    [HOLD_TIME]                      DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]        DECIMAL (10, 2) NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME        NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_2] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_BAD]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_BAD] (
    [BAD_IMPORTS_CODE]               VARCHAR (3)     NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]          VARCHAR (3)     NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NOT NULL,
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]         VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                  VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                  VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                   VARCHAR (50)    NOT NULL,
    [FF_CONTACT_ID]                  VARCHAR (50)    NULL,
    [FF_MASTER_CONTACT_ID]           VARCHAR (50)    NULL,
    [FF_TALK_TIME]                   VARCHAR (50)    NULL,
    [FF_ACW_TIME]                    VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                   VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [AGENT_NAME]                     VARCHAR (50)    NULL,
    [SKILL_NAME]                     VARCHAR (50)    NULL,
    [TEAM_NAME]                      VARCHAR (50)    NULL,
    [TALK_TIME]                      DECIMAL (10, 2) NULL,
    [ACW_TIME]                       DECIMAL (10, 2) NULL,
    [HOLD_TIME]                      DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]        DECIMAL (10, 2) NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_BAD] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_BAD] UNIQUE NONCLUSTERED ([BAD_IMPORTS_CODE] ASC, [WS_ROW_CREATED_TIME] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING] (
    [FF_AGENT_NAME]                  VARCHAR (200)   NULL,
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_TIME]                        VARCHAR (50)    NULL,
    [FF_BUSINESS_UNIT]               VARCHAR (100)   NULL,
    [FF_TEAM]                        VARCHAR (100)   NULL,
    [FF_GROUPS]                      VARCHAR (50)    NULL,
    [FF_ANSWERED_SESSIONS]           VARCHAR (50)    NULL,
    [FF_RONAS]                       VARCHAR (50)    NULL,
    [FF_DIDS]                        VARCHAR (50)    NULL,
    [FF_DODS]                        VARCHAR (50)    NULL,
    [FF_STARTED_IMS]                 VARCHAR (50)    NULL,
    [FF_STARTED_CALLS]               VARCHAR (50)    NULL,
    [FF_ESCALATIONS]                 VARCHAR (50)    NULL,
    [FF_CONSULTS]                    VARCHAR (50)    NULL,
    [FF_TRANSFERS]                   VARCHAR (50)    NULL,
    [FF_SUPERVISOR_JOINS]            VARCHAR (50)    NULL,
    [FF_AVAILABLE_TIME]              VARCHAR (50)    NULL,
    [FF_RINGING_TIME1]               VARCHAR (50)    NULL,
    [FF_CONNECT_IM_SESSION_TIME]     VARCHAR (50)    NULL,
    [FF_CONNECT_PHONE_CALL_TIME]     VARCHAR (50)    NULL,
    [FF_CONNECT_DID_CALL_TIME]       VARCHAR (50)    NULL,
    [FF_CONNECT_DOD_CALL_TIME]       VARCHAR (50)    NULL,
    [FF_NON_CONNECT_CALL_TIME]       VARCHAR (50)    NULL,
    [FF_AFTERCALL_TIME]              VARCHAR (50)    NULL,
    [FF_RONA_TIME]                   VARCHAR (50)    NULL,
    [FF_UNAVAILABLE_TIME]            VARCHAR (50)    NULL,
    [FF_OFF_WORK_TIME]               VARCHAR (50)    NULL,
    [FF_LOGGED_OUT_TIME]             VARCHAR (50)    NULL,
    [FF_ON_PHONE_TIME]               VARCHAR (50)    NULL,
    [FF_Q_ON_PHONE_TIME]             VARCHAR (50)    NULL,
    [FF_TALK_TIME]                   VARCHAR (50)    NULL,
    [FF_Q_TALK_TIME]                 VARCHAR (50)    NULL,
    [FF_HANDLE_TIME]                 VARCHAR (50)    NULL,
    [FF_Q_HANDLE_TIME]               VARCHAR (50)    NULL,
    [FF_OCC_PERCENT]                 VARCHAR (50)    NULL,
    [FF_Q_OCC_PERCENT]               VARCHAR (50)    NULL,
    [FF_TALK_PERCENT]                VARCHAR (50)    NULL,
    [FF_Q_TALK_PERCENT]              VARCHAR (50)    NULL,
    [FF_ACW_PERCENT]                 VARCHAR (50)    NULL,
    [FF_IDLE_PERCENT]                VARCHAR (50)    NULL,
    [FF_AVG_TALK_TIME_PERCENT]       VARCHAR (50)    NULL,
    [FF_AVG_Q_TALK_TIME_PERCENT]     VARCHAR (50)    NULL,
    [FF_AVG_ACW_TIME_PERCENT]        VARCHAR (50)    NULL,
    [FF_AVG_Q_ACW_TIME_PERCENT]      VARCHAR (50)    NULL,
    [FF_AVG_HANDLE_TIME_PERCENT]     VARCHAR (50)    NULL,
    [FF_AVG_Q_HANDLE_TIME_PERCENT]   VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [AGENT_NAME]                     VARCHAR (200)   NULL,
    [ANSWERED_SESSIONS]              INT             NULL,
    [RONA_CNT]                       INT             NULL,
    [DID_CNT]                        INT             NULL,
    [DOD_CNT]                        INT             NULL,
    [STARTED_IMS]                    INT             NULL,
    [STARTED_CALLS]                  INT             NULL,
    [ESCALATIONS]                    INT             NULL,
    [CONSULTS]                       INT             NULL,
    [TRANSFERS]                      INT             NULL,
    [SUPERVISOR_JOINS]               INT             NULL,
    [AVAILABLE_TIME]                 DECIMAL (10, 2) NULL,
    [RING_TIME]                      DECIMAL (10, 2) NULL,
    [CONNECT_IM_SESSION_TIME]        DECIMAL (10, 2) NULL,
    [CONNECT_PHONE_CALL_TIME]        DECIMAL (10, 2) NULL,
    [CONNECT_DID_CALL_TIME]          DECIMAL (10, 2) NULL,
    [CONNECT_DOD_CALL_TIME]          DECIMAL (10, 2) NULL,
    [NON_CONNECT_CALL_TIME]          DECIMAL (10, 2) NULL,
    [ACW_TIME]                       DECIMAL (10, 2) NULL,
    [RONA_TIME]                      DECIMAL (10, 2) NULL,
    [UNAVAILABLE_TIME]               DECIMAL (10, 2) NULL,
    [OFF_WORK_TIME]                  DECIMAL (10, 2) NULL,
    [LOGGED_OUT_TIME]                DECIMAL (10, 2) NULL,
    [ON_PHONE_TIME]                  DECIMAL (10, 2) NULL,
    [Q_ON_PHONE_TIME]                DECIMAL (10, 2) NULL,
    [TALK_TIME]                      DECIMAL (10, 2) NULL,
    [Q_TALK_TIME]                    DECIMAL (10, 2) NULL,
    [HANDLE_TIME]                    DECIMAL (10, 2) NULL,
    [Q_HANDLE_TIME]                  DECIMAL (10, 2) NULL,
    [CPROD]                          DECIMAL (10, 2) NULL,
    [MING]                           DECIMAL (10, 2) NULL,
    [AUT2]                           DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]          DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (100)   NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [CATS_ID]                        VARCHAR (20)    NULL,
    [PAY_GROUP]                      INT             NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME        NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_INVOICING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_MONAT_INVOICING] UNIQUE NONCLUSTERED ([FF_AGENT_NAME] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [ID_EXT] ASC, [INVOICE_ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_0_Audit] (
    [FF_AGENT_NAME]                VARCHAR (200) NULL,
    [FF_DATE]                      VARCHAR (50)  NULL,
    [FF_TIME]                      VARCHAR (50)  NULL,
    [FF_BUSINESS_UNIT]             VARCHAR (100) NULL,
    [FF_TEAM]                      VARCHAR (100) NULL,
    [FF_GROUPS]                    VARCHAR (50)  NULL,
    [FF_ANSWERED_SESSIONS]         VARCHAR (50)  NULL,
    [FF_RONAS]                     VARCHAR (50)  NULL,
    [FF_DIDS]                      VARCHAR (50)  NULL,
    [FF_DODS]                      VARCHAR (50)  NULL,
    [FF_STARTED_IMS]               VARCHAR (50)  NULL,
    [FF_STARTED_CALLS]             VARCHAR (50)  NULL,
    [FF_ESCALATIONS]               VARCHAR (50)  NULL,
    [FF_CONSULTS]                  VARCHAR (50)  NULL,
    [FF_TRANSFERS]                 VARCHAR (50)  NULL,
    [FF_SUPERVISOR_JOINS]          VARCHAR (50)  NULL,
    [FF_AVAILABLE_TIME]            VARCHAR (50)  NULL,
    [FF_RINGING_TIME1]             VARCHAR (50)  NULL,
    [FF_CONNECT_IM_SESSION_TIME]   VARCHAR (50)  NULL,
    [FF_CONNECT_PHONE_CALL_TIME]   VARCHAR (50)  NULL,
    [FF_CONNECT_DID_CALL_TIME]     VARCHAR (50)  NULL,
    [FF_CONNECT_DOD_CALL_TIME]     VARCHAR (50)  NULL,
    [FF_NON_CONNECT_CALL_TIME]     VARCHAR (50)  NULL,
    [FF_AFTERCALL_TIME]            VARCHAR (50)  NULL,
    [FF_RONA_TIME]                 VARCHAR (50)  NULL,
    [FF_UNAVAILABLE_TIME]          VARCHAR (50)  NULL,
    [FF_OFF_WORK_TIME]             VARCHAR (50)  NULL,
    [FF_LOGGED_OUT_TIME]           VARCHAR (50)  NULL,
    [FF_ON_PHONE_TIME]             VARCHAR (50)  NULL,
    [FF_Q_ON_PHONE_TIME]           VARCHAR (50)  NULL,
    [FF_TALK_TIME]                 VARCHAR (50)  NULL,
    [FF_Q_TALK_TIME]               VARCHAR (50)  NULL,
    [FF_HANDLE_TIME]               VARCHAR (50)  NULL,
    [FF_Q_HANDLE_TIME]             VARCHAR (50)  NULL,
    [FF_OCC_PERCENT]               VARCHAR (50)  NULL,
    [FF_Q_OCC_PERCENT]             VARCHAR (50)  NULL,
    [FF_TALK_PERCENT]              VARCHAR (50)  NULL,
    [FF_Q_TALK_PERCENT]            VARCHAR (50)  NULL,
    [FF_ACW_PERCENT]               VARCHAR (50)  NULL,
    [FF_IDLE_PERCENT]              VARCHAR (50)  NULL,
    [FF_AVG_TALK_TIME_PERCENT]     VARCHAR (50)  NULL,
    [FF_AVG_Q_TALK_TIME_PERCENT]   VARCHAR (50)  NULL,
    [FF_AVG_ACW_TIME_PERCENT]      VARCHAR (50)  NULL,
    [FF_AVG_Q_ACW_TIME_PERCENT]    VARCHAR (50)  NULL,
    [FF_AVG_HANDLE_TIME_PERCENT]   VARCHAR (50)  NULL,
    [FF_AVG_Q_HANDLE_TIME_PERCENT] VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]             DATETIME      NOT NULL,
    [SEQNO]                        INT           NOT NULL,
    [FTP_FILE_NAME]                VARCHAR (100) NOT NULL,
    [ID]                           INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_INVOICING_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_MONAT_INVOICING_0_Audit] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_0_Audit_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_0_Audit_1] (
    [FF_AGENT]            VARCHAR (200) NULL,
    [FF_STATE_START_TIME] VARCHAR (50)  NULL,
    [FF_AGENT_STATE]      VARCHAR (200) NULL,
    [FF_REASON_CODE]      VARCHAR (500) NULL,
    [FF_DURATION]         VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]    DATETIME      NOT NULL,
    [SEQNO]               INT           NOT NULL,
    [FTP_FILE_NAME]       VARCHAR (100) NOT NULL,
    [ID]                  INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_INVOICING_0_Audit_1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_MONAT_INVOICING_0_Audit_1] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_1] (
    [FF_AGENT_NAME]                  VARCHAR (200)   NULL,
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_TIME]                        VARCHAR (50)    NULL,
    [FF_BUSINESS_UNIT]               VARCHAR (100)   NULL,
    [FF_TEAM]                        VARCHAR (100)   NULL,
    [FF_GROUPS]                      VARCHAR (50)    NULL,
    [FF_ANSWERED_SESSIONS]           VARCHAR (50)    NULL,
    [FF_RONAS]                       VARCHAR (50)    NULL,
    [FF_DIDS]                        VARCHAR (50)    NULL,
    [FF_DODS]                        VARCHAR (50)    NULL,
    [FF_STARTED_IMS]                 VARCHAR (50)    NULL,
    [FF_STARTED_CALLS]               VARCHAR (50)    NULL,
    [FF_ESCALATIONS]                 VARCHAR (50)    NULL,
    [FF_CONSULTS]                    VARCHAR (50)    NULL,
    [FF_TRANSFERS]                   VARCHAR (50)    NULL,
    [FF_SUPERVISOR_JOINS]            VARCHAR (50)    NULL,
    [FF_AVAILABLE_TIME]              VARCHAR (50)    NULL,
    [FF_RINGING_TIME1]               VARCHAR (50)    NULL,
    [FF_CONNECT_IM_SESSION_TIME]     VARCHAR (50)    NULL,
    [FF_CONNECT_PHONE_CALL_TIME]     VARCHAR (50)    NULL,
    [FF_CONNECT_DID_CALL_TIME]       VARCHAR (50)    NULL,
    [FF_CONNECT_DOD_CALL_TIME]       VARCHAR (50)    NULL,
    [FF_NON_CONNECT_CALL_TIME]       VARCHAR (50)    NULL,
    [FF_AFTERCALL_TIME]              VARCHAR (50)    NULL,
    [FF_RONA_TIME]                   VARCHAR (50)    NULL,
    [FF_UNAVAILABLE_TIME]            VARCHAR (50)    NULL,
    [FF_OFF_WORK_TIME]               VARCHAR (50)    NULL,
    [FF_LOGGED_OUT_TIME]             VARCHAR (50)    NULL,
    [FF_ON_PHONE_TIME]               VARCHAR (50)    NULL,
    [FF_Q_ON_PHONE_TIME]             VARCHAR (50)    NULL,
    [FF_TALK_TIME]                   VARCHAR (50)    NULL,
    [FF_Q_TALK_TIME]                 VARCHAR (50)    NULL,
    [FF_HANDLE_TIME]                 VARCHAR (50)    NULL,
    [FF_Q_HANDLE_TIME]               VARCHAR (50)    NULL,
    [FF_OCC_PERCENT]                 VARCHAR (50)    NULL,
    [FF_Q_OCC_PERCENT]               VARCHAR (50)    NULL,
    [FF_TALK_PERCENT]                VARCHAR (50)    NULL,
    [FF_Q_TALK_PERCENT]              VARCHAR (50)    NULL,
    [FF_ACW_PERCENT]                 VARCHAR (50)    NULL,
    [FF_IDLE_PERCENT]                VARCHAR (50)    NULL,
    [FF_AVG_TALK_TIME_PERCENT]       VARCHAR (50)    NULL,
    [FF_AVG_Q_TALK_TIME_PERCENT]     VARCHAR (50)    NULL,
    [FF_AVG_ACW_TIME_PERCENT]        VARCHAR (50)    NULL,
    [FF_AVG_Q_ACW_TIME_PERCENT]      VARCHAR (50)    NULL,
    [FF_AVG_HANDLE_TIME_PERCENT]     VARCHAR (50)    NULL,
    [FF_AVG_Q_HANDLE_TIME_PERCENT]   VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [AGENT_NAME]                     VARCHAR (200)   NULL,
    [ANSWERED_SESSIONS]              INT             NULL,
    [RONA_CNT]                       INT             NULL,
    [DID_CNT]                        INT             NULL,
    [DOD_CNT]                        INT             NULL,
    [STARTED_IMS]                    INT             NULL,
    [STARTED_CALLS]                  INT             NULL,
    [ESCALATIONS]                    INT             NULL,
    [CONSULTS]                       INT             NULL,
    [TRANSFERS]                      INT             NULL,
    [SUPERVISOR_JOINS]               INT             NULL,
    [AVAILABLE_TIME]                 DECIMAL (10, 2) NULL,
    [RING_TIME]                      DECIMAL (10, 2) NULL,
    [CONNECT_IM_SESSION_TIME]        DECIMAL (10, 2) NULL,
    [CONNECT_PHONE_CALL_TIME]        DECIMAL (10, 2) NULL,
    [CONNECT_DID_CALL_TIME]          DECIMAL (10, 2) NULL,
    [CONNECT_DOD_CALL_TIME]          DECIMAL (10, 2) NULL,
    [NON_CONNECT_CALL_TIME]          DECIMAL (10, 2) NULL,
    [ACW_TIME]                       DECIMAL (10, 2) NULL,
    [RONA_TIME]                      DECIMAL (10, 2) NULL,
    [UNAVAILABLE_TIME]               DECIMAL (10, 2) NULL,
    [OFF_WORK_TIME]                  DECIMAL (10, 2) NULL,
    [LOGGED_OUT_TIME]                DECIMAL (10, 2) NULL,
    [ON_PHONE_TIME]                  DECIMAL (10, 2) NULL,
    [Q_ON_PHONE_TIME]                DECIMAL (10, 2) NULL,
    [TALK_TIME]                      DECIMAL (10, 2) NULL,
    [Q_TALK_TIME]                    DECIMAL (10, 2) NULL,
    [HANDLE_TIME]                    DECIMAL (10, 2) NULL,
    [Q_HANDLE_TIME]                  DECIMAL (10, 2) NULL,
    [CPROD]                          DECIMAL (10, 2) NULL,
    [MING]                           DECIMAL (10, 2) NULL,
    [AUT2]                           DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]          DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (100)   NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [CATS_ID]                        VARCHAR (20)    NULL,
    [PAY_GROUP]                      INT             NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_INVOICING_1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_MONAT_INVOICING_1] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_1_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_1_1] (
    [F1]                  VARCHAR (200)   NULL,
    [F2]                  VARCHAR (50)    NULL,
    [F3]                  VARCHAR (200)   NULL,
    [F4]                  VARCHAR (500)   NULL,
    [F5]                  VARCHAR (50)    NULL,
    [EVENT_START_TIME]    DATETIME        NULL,
    [EVENT_DURATION_SECS] DECIMAL (10, 2) NULL,
    [SEQNO_ADDED_TIME]    DATETIME        NOT NULL,
    [SEQNO]               INT             NOT NULL,
    [FTP_FILE_NAME]       VARCHAR (100)   NOT NULL,
    [ID]                  INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_INVOICING_1_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_1_ACW]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_1_ACW] (
    [F1]                  VARCHAR (200)   NULL,
    [F2]                  VARCHAR (50)    NULL,
    [F3]                  VARCHAR (200)   NULL,
    [F4]                  VARCHAR (500)   NULL,
    [F5]                  VARCHAR (50)    NULL,
    [EVENT_START_TIME]    DATETIME        NULL,
    [EVENT_DURATION_SECS] DECIMAL (10, 2) NULL,
    [SEQNO_ADDED_TIME]    DATETIME        NOT NULL,
    [SEQNO]               INT             NOT NULL,
    [FTP_FILE_NAME]       VARCHAR (100)   NOT NULL,
    [ID]                  INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_INVOICING_1_ACW] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_2]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_2] (
    [FF_AGENT]                        VARCHAR (200)   NULL,
    [FF_STATE_START_TIME]             VARCHAR (50)    NULL,
    [FF_AGENT_STATE]                  VARCHAR (200)   NULL,
    [FF_REASON_CODE]                  VARCHAR (500)   NULL,
    [FF_DURATION]                     VARCHAR (50)    NULL,
    [EVENT_START_TIME]                DATETIME        NULL,
    [EVENT_DURATION_SECS]             DECIMAL (10, 2) NULL,
    [INTERVAL_START_TIME]             DATETIME        NOT NULL,
    [INTERVAL_END_TIME]               DATETIME        NOT NULL,
    [EVENT_DURATION_IN_INTERVAL_SECS] FLOAT (53)      NOT NULL,
    [INBOUND_CALLS]                   INT             NULL,
    [OUTBOUND_CALLS]                  INT             NULL,
    [SEQNO_ADDED_TIME]                DATETIME        NOT NULL,
    [SEQNO]                           INT             NOT NULL,
    [FTP_FILE_NAME]                   VARCHAR (100)   NULL,
    [ID]                              INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_INVOICING_2] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_2_ACW]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_2_ACW] (
    [FF_AGENT]                        VARCHAR (200)   NULL,
    [FF_STATE_START_TIME]             VARCHAR (50)    NULL,
    [FF_AGENT_STATE]                  VARCHAR (200)   NULL,
    [FF_REASON_CODE]                  VARCHAR (500)   NULL,
    [FF_DURATION]                     VARCHAR (50)    NULL,
    [EVENT_START_TIME]                DATETIME        NULL,
    [EVENT_DURATION_SECS]             DECIMAL (10, 2) NULL,
    [INTERVAL_START_TIME]             DATETIME        NOT NULL,
    [INTERVAL_END_TIME]               DATETIME        NOT NULL,
    [EVENT_DURATION_IN_INTERVAL_SECS] FLOAT (53)      NOT NULL,
    [SEQNO_ADDED_TIME]                DATETIME        NOT NULL,
    [SEQNO]                           INT             NOT NULL,
    [FTP_FILE_NAME]                   VARCHAR (100)   NULL,
    [ID]                              INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_INVOICING_2_ACW] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_3]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_3] (
    [FF_AGENT]                         VARCHAR (200)   NULL,
    [FF_AGENT_STATE]                   VARCHAR (200)   NULL,
    [FF_REASON_CODE]                   VARCHAR (500)   NULL,
    [EVENT_DURATION_SECS]              DECIMAL (10, 2) NULL,
    [EVENT_DURATION_IN_INTERVAL_SECS]  FLOAT (53)      NULL,
    [SEQNO_ADDED_TIME]                 DATETIME        NOT NULL,
    [SEQNO]                            INT             NOT NULL,
    [FTP_FILE_NAME]                    VARCHAR (100)   NULL,
    [RESOURCE_NAME]                    VARCHAR (100)   NULL,
    [DATETIME]                         DATETIME        NULL,
    [HOUR_INTERVAL]                    INT             NULL,
    [EMPLOYEE_ID]                      VARCHAR (50)    NULL,
    [STD_TENANT_START_TIME]            DATETIME        NULL,
    [INBOUND_CALLS]                    INT             NULL,
    [OUTBOUND_CALLS]                   INT             NULL,
    [LOGGED_IN_DUR]                    DECIMAL (10, 2) NULL,
    [AVAILABLE_DUR]                    DECIMAL (10, 2) NULL,
    [BUSY_DUR]                         DECIMAL (10, 2) NULL,
    [DIRECT_CALL_DUR]                  DECIMAL (10, 2) NULL,
    [DIRECT_OB_DIAL_DUR]               DECIMAL (10, 2) NULL,
    [OFF_WORK_DUR]                     DECIMAL (10, 2) NULL,
    [UNKNOWN_DUR]                      DECIMAL (10, 2) NULL,
    [RONA_DUR]                         DECIMAL (10, 2) NULL,
    [RONA_SPECIAL_PROJECT_DUR]         DECIMAL (10, 2) NULL,
    [RONA_SYSTEM_ISSUES_IT_DUR]        DECIMAL (10, 2) NULL,
    [RONA_IDLE_DUR]                    DECIMAL (10, 2) NULL,
    [RONA_CALL_BACK_DUR]               DECIMAL (10, 2) NULL,
    [INCALL_DUR]                       DECIMAL (10, 2) NULL,
    [INCALL_IDLE_DUR]                  DECIMAL (10, 2) NULL,
    [INCALL_CALL_BACK_DUR]             DECIMAL (10, 2) NULL,
    [INCALL_SPECIAL_PROJECT_DUR]       DECIMAL (10, 2) NULL,
    [INCALL_ON_BREAK_DUR]              DECIMAL (10, 2) NULL,
    [ACW_DUR]                          DECIMAL (10, 2) NULL,
    [ACW_ON_BREAK_DUR]                 DECIMAL (10, 2) NULL,
    [ACW_CALL_BACK_DUR]                DECIMAL (10, 2) NULL,
    [ACW_IDLE_DUR]                     DECIMAL (10, 2) NULL,
    [ACW_SPECIAL_PROJECT_DUR]          DECIMAL (10, 2) NULL,
    [ACW_FLOOR_SUPPORT_DUR]            DECIMAL (10, 2) NULL,
    [ACW_SYSTEM_ISSUES_IT_DUR]         DECIMAL (10, 2) NULL,
    [RING_DUR]                         DECIMAL (10, 2) NULL,
    [RING_BREAK_DUR]                   DECIMAL (10, 2) NULL,
    [RING_SPECIAL_PROJECT_DUR]         DECIMAL (10, 2) NULL,
    [RING_IDLE_DUR]                    DECIMAL (10, 2) NULL,
    [RING_SYSTEM_ISSUES_IT_DUR]        DECIMAL (10, 2) NULL,
    [RING_CALL_BACK_DUR]               DECIMAL (10, 2) NULL,
    [UNAVAILABLE_DUR]                  DECIMAL (10, 2) NULL,
    [UNAVAILABLE_ON_BREAK_DUR]         DECIMAL (10, 2) NULL,
    [UNAVAILABLE_CALL_BACK_DUR]        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_IDLE_DUR]             DECIMAL (10, 2) NULL,
    [UNAVAILABLE_PERSONAL_TIME_DUR]    DECIMAL (10, 2) NULL,
    [UNAVAILABLE_RR_DUR]               DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SPECIAL_PROJECT_DUR]  DECIMAL (10, 2) NULL,
    [UNAVAILABLE_FLOOR_SUPPORT_DUR]    DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SYSTEM_ISSUES_IT_DUR] DECIMAL (10, 2) NULL,
    [UNAVAILABLE_EMAIL_DUR]            DECIMAL (10, 2) NULL,
    [WS_ROW_CREATED_TIME]              DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]              DATETIME        NULL,
    [ID]                               INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_INVOICING_3] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_3_ACW]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_3_ACW] (
    [FF_AGENT]                        VARCHAR (200)   NULL,
    [FF_AGENT_STATE]                  VARCHAR (200)   NULL,
    [EVENT_DURATION_IN_INTERVAL_SECS] FLOAT (53)      NULL,
    [SEQNO_ADDED_TIME]                DATETIME        NOT NULL,
    [SEQNO]                           INT             NOT NULL,
    [FTP_FILE_NAME]                   VARCHAR (100)   NULL,
    [DATETIME]                        DATETIME        NULL,
    [AUTHORIZED_ACW]                  DECIMAL (10, 2) NULL,
    [WS_ROW_CREATED_TIME]             DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]             DATETIME        NULL,
    [ID]                              INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_INVOICING_3_ACW] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_4]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_4] (
    [FF_AGENT]                         VARCHAR (200)   NULL,
    [EVENT_DURATION_IN_INTERVAL_SECS]  FLOAT (53)      NULL,
    [SEQNO_ADDED_TIME]                 DATETIME        NOT NULL,
    [SEQNO]                            INT             NOT NULL,
    [FTP_FILE_NAME]                    VARCHAR (100)   NULL,
    [RESOURCE_NAME]                    VARCHAR (100)   NULL,
    [DATETIME]                         DATETIME        NULL,
    [HOUR_INTERVAL]                    INT             NULL,
    [EMPLOYEE_ID]                      VARCHAR (50)    NULL,
    [STD_TENANT_START_TIME]            DATETIME        NULL,
    [INBOUND_CALLS]                    INT             NULL,
    [OUTBOUND_CALLS]                   INT             NULL,
    [TOTAL_CALLS]                      INT             NULL,
    [LOGGED_IN_DUR]                    DECIMAL (10, 2) NULL,
    [AVAILABLE_DUR]                    DECIMAL (10, 2) NULL,
    [BUSY_DUR]                         DECIMAL (10, 2) NULL,
    [DIRECT_CALL_DUR]                  DECIMAL (10, 2) NULL,
    [DIRECT_OB_DIAL_DUR]               DECIMAL (10, 2) NULL,
    [OFF_WORK_DUR]                     DECIMAL (10, 2) NULL,
    [UNKNOWN_DUR]                      DECIMAL (10, 2) NULL,
    [RONA_DUR]                         DECIMAL (10, 2) NULL,
    [RONA_SPECIAL_PROJECT_DUR]         DECIMAL (10, 2) NULL,
    [RONA_SYSTEM_ISSUES_IT_DUR]        DECIMAL (10, 2) NULL,
    [RONA_IDLE_DUR]                    DECIMAL (10, 2) NULL,
    [RONA_CALL_BACK_DUR]               DECIMAL (10, 2) NULL,
    [INCALL_DUR]                       DECIMAL (10, 2) NULL,
    [INCALL_IDLE_DUR]                  DECIMAL (10, 2) NULL,
    [INCALL_CALL_BACK_DUR]             DECIMAL (10, 2) NULL,
    [INCALL_SPECIAL_PROJECT_DUR]       DECIMAL (10, 2) NULL,
    [INCALL_ON_BREAK_DUR]              DECIMAL (10, 2) NULL,
    [ACW_DUR]                          DECIMAL (10, 2) NULL,
    [AUTHORIZED_ACW_DUR]               DECIMAL (10, 2) NULL,
    [ACW_ON_BREAK_DUR]                 DECIMAL (10, 2) NULL,
    [ACW_CALL_BACK_DUR]                DECIMAL (10, 2) NULL,
    [ACW_IDLE_DUR]                     DECIMAL (10, 2) NULL,
    [ACW_SPECIAL_PROJECT_DUR]          DECIMAL (10, 2) NULL,
    [ACW_FLOOR_SUPPORT_DUR]            DECIMAL (10, 2) NULL,
    [ACW_SYSTEM_ISSUES_IT_DUR]         DECIMAL (10, 2) NULL,
    [RING_DUR]                         DECIMAL (10, 2) NULL,
    [RING_BREAK_DUR]                   DECIMAL (10, 2) NULL,
    [RING_SPECIAL_PROJECT_DUR]         DECIMAL (10, 2) NULL,
    [RING_IDLE_DUR]                    DECIMAL (10, 2) NULL,
    [RING_SYSTEM_ISSUES_IT_DUR]        DECIMAL (10, 2) NULL,
    [RING_CALL_BACK_DUR]               DECIMAL (10, 2) NULL,
    [UNAVAILABLE_DUR]                  DECIMAL (10, 2) NULL,
    [UNAVAILABLE_ON_BREAK_DUR]         DECIMAL (10, 2) NULL,
    [UNAVAILABLE_CALL_BACK_DUR]        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_IDLE_DUR]             DECIMAL (10, 2) NULL,
    [UNAVAILABLE_PERSONAL_TIME_DUR]    DECIMAL (10, 2) NULL,
    [UNAVAILABLE_RR_DUR]               DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SPECIAL_PROJECT_DUR]  DECIMAL (10, 2) NULL,
    [UNAVAILABLE_FLOOR_SUPPORT_DUR]    DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SYSTEM_ISSUES_IT_DUR] DECIMAL (10, 2) NULL,
    [UNAVAILABLE_EMAIL_DUR]            DECIMAL (10, 2) NULL,
    [TOTAL_AVAILABLE]                  DECIMAL (10, 2) NULL,
    [TOTAL_RING]                       DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                       DECIMAL (10, 2) NULL,
    [TOTAL_ACW]                        DECIMAL (10, 2) NULL,
    [TOTAL_UNAVAILABLE]                DECIMAL (10, 2) NULL,
    [TOTAL_RONA]                       DECIMAL (10, 2) NULL,
    [HANDLE_TIME]                      DECIMAL (10, 2) NULL,
    [CPROD]                            DECIMAL (10, 2) NULL,
    [AUTHORIZED]                       DECIMAL (10, 2) NULL,
    [EMAIL]                            VARCHAR (100)   NULL,
    [ID_EXT]                           VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]               VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]   INT             NULL,
    [CAL_DATE]                         DATETIME        NULL,
    [TENANT_KEY]                       INT             NULL,
    [AIR_DAY_TYPE]                     VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]               VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]            DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]               VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]       VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                     VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                   VARCHAR (1)     NULL,
    [READY_FOR_XML]                    VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                     VARCHAR (1)     NULL,
    [INVOICE_ID]                       VARCHAR (500)   NULL,
    [WS_ROW_CREATED_TIME]              DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]              DATETIME        NULL,
    [ID]                               INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_INVOICING_4] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_BAD]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_BAD] (
    [BAD_IMPORTS_CODE]               VARCHAR (3)     NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]          VARCHAR (3)     NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NOT NULL,
    [FF_AGENT_NAME]                  VARCHAR (200)   NULL,
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_TIME]                        VARCHAR (50)    NULL,
    [FF_BUSINESS_UNIT]               VARCHAR (100)   NULL,
    [FF_TEAM]                        VARCHAR (100)   NULL,
    [FF_GROUPS]                      VARCHAR (50)    NULL,
    [FF_ANSWERED_SESSIONS]           VARCHAR (50)    NULL,
    [FF_RONAS]                       VARCHAR (50)    NULL,
    [FF_DIDS]                        VARCHAR (50)    NULL,
    [FF_DODS]                        VARCHAR (50)    NULL,
    [FF_STARTED_IMS]                 VARCHAR (50)    NULL,
    [FF_STARTED_CALLS]               VARCHAR (50)    NULL,
    [FF_ESCALATIONS]                 VARCHAR (50)    NULL,
    [FF_CONSULTS]                    VARCHAR (50)    NULL,
    [FF_TRANSFERS]                   VARCHAR (50)    NULL,
    [FF_SUPERVISOR_JOINS]            VARCHAR (50)    NULL,
    [FF_AVAILABLE_TIME]              VARCHAR (50)    NULL,
    [FF_RINGING_TIME1]               VARCHAR (50)    NULL,
    [FF_CONNECT_IM_SESSION_TIME]     VARCHAR (50)    NULL,
    [FF_CONNECT_PHONE_CALL_TIME]     VARCHAR (50)    NULL,
    [FF_CONNECT_DID_CALL_TIME]       VARCHAR (50)    NULL,
    [FF_CONNECT_DOD_CALL_TIME]       VARCHAR (50)    NULL,
    [FF_NON_CONNECT_CALL_TIME]       VARCHAR (50)    NULL,
    [FF_AFTERCALL_TIME]              VARCHAR (50)    NULL,
    [FF_RONA_TIME]                   VARCHAR (50)    NULL,
    [FF_UNAVAILABLE_TIME]            VARCHAR (50)    NULL,
    [FF_OFF_WORK_TIME]               VARCHAR (50)    NULL,
    [FF_LOGGED_OUT_TIME]             VARCHAR (50)    NULL,
    [FF_ON_PHONE_TIME]               VARCHAR (50)    NULL,
    [FF_Q_ON_PHONE_TIME]             VARCHAR (50)    NULL,
    [FF_TALK_TIME]                   VARCHAR (50)    NULL,
    [FF_Q_TALK_TIME]                 VARCHAR (50)    NULL,
    [FF_HANDLE_TIME]                 VARCHAR (50)    NULL,
    [FF_Q_HANDLE_TIME]               VARCHAR (50)    NULL,
    [FF_OCC_PERCENT]                 VARCHAR (50)    NULL,
    [FF_Q_OCC_PERCENT]               VARCHAR (50)    NULL,
    [FF_TALK_PERCENT]                VARCHAR (50)    NULL,
    [FF_Q_TALK_PERCENT]              VARCHAR (50)    NULL,
    [FF_ACW_PERCENT]                 VARCHAR (50)    NULL,
    [FF_IDLE_PERCENT]                VARCHAR (50)    NULL,
    [FF_AVG_TALK_TIME_PERCENT]       VARCHAR (50)    NULL,
    [FF_AVG_Q_TALK_TIME_PERCENT]     VARCHAR (50)    NULL,
    [FF_AVG_ACW_TIME_PERCENT]        VARCHAR (50)    NULL,
    [FF_AVG_Q_ACW_TIME_PERCENT]      VARCHAR (50)    NULL,
    [FF_AVG_HANDLE_TIME_PERCENT]     VARCHAR (50)    NULL,
    [FF_AVG_Q_HANDLE_TIME_PERCENT]   VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [AGENT_NAME]                     VARCHAR (200)   NULL,
    [ANSWERED_SESSIONS]              INT             NULL,
    [RONA_CNT]                       INT             NULL,
    [DID_CNT]                        INT             NULL,
    [DOD_CNT]                        INT             NULL,
    [STARTED_IMS]                    INT             NULL,
    [STARTED_CALLS]                  INT             NULL,
    [ESCALATIONS]                    INT             NULL,
    [CONSULTS]                       INT             NULL,
    [TRANSFERS]                      INT             NULL,
    [SUPERVISOR_JOINS]               INT             NULL,
    [AVAILABLE_TIME]                 DECIMAL (10, 2) NULL,
    [RING_TIME]                      DECIMAL (10, 2) NULL,
    [CONNECT_IM_SESSION_TIME]        DECIMAL (10, 2) NULL,
    [CONNECT_PHONE_CALL_TIME]        DECIMAL (10, 2) NULL,
    [CONNECT_DID_CALL_TIME]          DECIMAL (10, 2) NULL,
    [CONNECT_DOD_CALL_TIME]          DECIMAL (10, 2) NULL,
    [NON_CONNECT_CALL_TIME]          DECIMAL (10, 2) NULL,
    [ACW_TIME]                       DECIMAL (10, 2) NULL,
    [RONA_TIME]                      DECIMAL (10, 2) NULL,
    [UNAVAILABLE_TIME]               DECIMAL (10, 2) NULL,
    [OFF_WORK_TIME]                  DECIMAL (10, 2) NULL,
    [LOGGED_OUT_TIME]                DECIMAL (10, 2) NULL,
    [ON_PHONE_TIME]                  DECIMAL (10, 2) NULL,
    [Q_ON_PHONE_TIME]                DECIMAL (10, 2) NULL,
    [TALK_TIME]                      DECIMAL (10, 2) NULL,
    [Q_TALK_TIME]                    DECIMAL (10, 2) NULL,
    [HANDLE_TIME]                    DECIMAL (10, 2) NULL,
    [Q_HANDLE_TIME]                  DECIMAL (10, 2) NULL,
    [CPROD]                          DECIMAL (10, 2) NULL,
    [MING]                           DECIMAL (10, 2) NULL,
    [AUT2]                           DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]          DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (100)   NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [CATS_ID]                        VARCHAR (20)    NULL,
    [PAY_GROUP]                      INT             NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_INVOICING_BAD] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_MONAT_INVOICING_BAD] UNIQUE NONCLUSTERED ([BAD_IMPORTS_CODE] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC, [DATETIME] ASC, [WS_ROW_CREATED_TIME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_BAD_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_BAD_1] (
    [BAD_IMPORTS_CODE]                VARCHAR (3)     NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]           VARCHAR (3)     NULL,
    [WS_ROW_CREATED_TIME]             DATETIME        NOT NULL,
    [FF_AGENT]                        VARCHAR (200)   NULL,
    [FF_STATE_START_TIME]             VARCHAR (50)    NULL,
    [FF_AGENT_STATE]                  VARCHAR (200)   NULL,
    [FF_REASON_CODE]                  VARCHAR (500)   NULL,
    [FF_DURATION]                     VARCHAR (50)    NULL,
    [EVENT_START_TIME]                DATETIME        NULL,
    [EVENT_DURATION_SECS]             DECIMAL (10, 2) NULL,
    [INTERVAL_START_TIME]             DATETIME        NULL,
    [INTERVAL_END_TIME]               DATETIME        NULL,
    [EVENT_DURATION_IN_INTERVAL_SECS] FLOAT (53)      NULL,
    [INBOUND_CALLS]                   INT             NULL,
    [OUTBOUND_CALLS]                  INT             NULL,
    [SEQNO_ADDED_TIME]                DATETIME        NOT NULL,
    [SEQNO]                           INT             NOT NULL,
    [FTP_FILE_NAME]                   VARCHAR (100)   NOT NULL,
    [ID]                              INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_INVOICING_BAD_1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_MONAT_INVOICING_BAD_1] UNIQUE NONCLUSTERED ([BAD_IMPORTS_CODE] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC, [WS_ROW_CREATED_TIME] ASC, [INTERVAL_START_TIME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_NEW]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_INVOICING_NEW] (
    [FF_AGENT]                         VARCHAR (200)   NULL,
    [EVENT_DURATION_IN_INTERVAL_SECS]  FLOAT (53)      NULL,
    [SEQNO_ADDED_TIME]                 DATETIME        NOT NULL,
    [SEQNO]                            INT             NOT NULL,
    [FTP_FILE_NAME]                    VARCHAR (100)   NOT NULL,
    [RESOURCE_NAME]                    VARCHAR (100)   NULL,
    [DATETIME]                         DATETIME        NULL,
    [HOUR_INTERVAL]                    INT             NULL,
    [EMPLOYEE_ID]                      VARCHAR (50)    NULL,
    [STD_TENANT_START_TIME]            DATETIME        NULL,
    [INBOUND_CALLS]                    INT             NULL,
    [OUTBOUND_CALLS]                   INT             NULL,
    [TOTAL_CALLS]                      INT             NULL,
    [LOGGED_IN_DUR]                    DECIMAL (10, 2) NULL,
    [AVAILABLE_DUR]                    DECIMAL (10, 2) NULL,
    [BUSY_DUR]                         DECIMAL (10, 2) NULL,
    [DIRECT_CALL_DUR]                  DECIMAL (10, 2) NULL,
    [DIRECT_OB_DIAL_DUR]               DECIMAL (10, 2) NULL,
    [OFF_WORK_DUR]                     DECIMAL (10, 2) NULL,
    [UNKNOWN_DUR]                      DECIMAL (10, 2) NULL,
    [RONA_DUR]                         DECIMAL (10, 2) NULL,
    [RONA_SPECIAL_PROJECT_DUR]         DECIMAL (10, 2) NULL,
    [RONA_SYSTEM_ISSUES_IT_DUR]        DECIMAL (10, 2) NULL,
    [RONA_IDLE_DUR]                    DECIMAL (10, 2) NULL,
    [RONA_CALL_BACK_DUR]               DECIMAL (10, 2) NULL,
    [INCALL_DUR]                       DECIMAL (10, 2) NULL,
    [INCALL_IDLE_DUR]                  DECIMAL (10, 2) NULL,
    [INCALL_CALL_BACK_DUR]             DECIMAL (10, 2) NULL,
    [INCALL_SPECIAL_PROJECT_DUR]       DECIMAL (10, 2) NULL,
    [INCALL_ON_BREAK_DUR]              DECIMAL (10, 2) NULL,
    [ACW_DUR]                          DECIMAL (10, 2) NULL,
    [AUTHORIZED_ACW_DUR]               DECIMAL (10, 2) NULL,
    [ACW_ON_BREAK_DUR]                 DECIMAL (10, 2) NULL,
    [ACW_CALL_BACK_DUR]                DECIMAL (10, 2) NULL,
    [ACW_IDLE_DUR]                     DECIMAL (10, 2) NULL,
    [ACW_SPECIAL_PROJECT_DUR]          DECIMAL (10, 2) NULL,
    [ACW_FLOOR_SUPPORT_DUR]            DECIMAL (10, 2) NULL,
    [ACW_SYSTEM_ISSUES_IT_DUR]         DECIMAL (10, 2) NULL,
    [RING_DUR]                         DECIMAL (10, 2) NULL,
    [RING_BREAK_DUR]                   DECIMAL (10, 2) NULL,
    [RING_SPECIAL_PROJECT_DUR]         DECIMAL (10, 2) NULL,
    [RING_IDLE_DUR]                    DECIMAL (10, 2) NULL,
    [RING_SYSTEM_ISSUES_IT_DUR]        DECIMAL (10, 2) NULL,
    [RING_CALL_BACK_DUR]               DECIMAL (10, 2) NULL,
    [UNAVAILABLE_DUR]                  DECIMAL (10, 2) NULL,
    [UNAVAILABLE_ON_BREAK_DUR]         DECIMAL (10, 2) NULL,
    [UNAVAILABLE_CALL_BACK_DUR]        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_IDLE_DUR]             DECIMAL (10, 2) NULL,
    [UNAVAILABLE_PERSONAL_TIME_DUR]    DECIMAL (10, 2) NULL,
    [UNAVAILABLE_RR_DUR]               DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SPECIAL_PROJECT_DUR]  DECIMAL (10, 2) NULL,
    [UNAVAILABLE_FLOOR_SUPPORT_DUR]    DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SYSTEM_ISSUES_IT_DUR] DECIMAL (10, 2) NULL,
    [UNAVAILABLE_EMAIL_DUR]            DECIMAL (10, 2) NULL,
    [TOTAL_AVAILABLE]                  DECIMAL (10, 2) NULL,
    [TOTAL_RING]                       DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                       DECIMAL (10, 2) NULL,
    [TOTAL_ACW]                        DECIMAL (10, 2) NULL,
    [TOTAL_UNAVAILABLE]                DECIMAL (10, 2) NULL,
    [TOTAL_RONA]                       DECIMAL (10, 2) NULL,
    [HANDLE_TIME]                      DECIMAL (10, 2) NULL,
    [CPROD]                            DECIMAL (10, 2) NULL,
    [AUTHORIZED]                       DECIMAL (10, 2) NULL,
    [EMAIL]                            VARCHAR (100)   NULL,
    [ID_EXT]                           VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]               VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]   INT             NULL,
    [CAL_DATE]                         DATETIME        NULL,
    [TENANT_KEY]                       INT             NULL,
    [AIR_DAY_TYPE]                     VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]               VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]            DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]               VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]       VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                     VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                   VARCHAR (1)     NULL,
    [READY_FOR_XML]                    VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                     VARCHAR (1)     NULL,
    [INVOICE_ID]                       VARCHAR (500)   NULL,
    [WS_ROW_CREATED_TIME]              DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]              DATETIME        NULL,
    [ID]                               INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_INVOICING_NEW] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_MONAT_INVOICING_NEW] UNIQUE NONCLUSTERED ([FF_AGENT] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [ID_EXT] ASC, [INVOICE_ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_SD_AIA_STATIC_DEFAULTS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_SD_AIA_STATIC_DEFAULTS] (
    [PLATFORM]                          VARCHAR (50)  NULL,
    [STATUS]                            VARCHAR (50)  NULL,
    [INVOICE_MAP_KEY]                   VARCHAR (50)  NULL,
    [FIELD_NAME]                        VARCHAR (100) NULL,
    [SCHEDULER_PROJECT_ID]              VARCHAR (50)  NULL,
    [SCHEDULER_ACL_NAME]                VARCHAR (100) NULL,
    [ACD_ID_EXTENSION]                  VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_ID]           VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]         VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_ID]            VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_NAME]          VARCHAR (50)  NULL,
    [PRIMARY_PROJECT_MANAGER_ID]        VARCHAR (150) NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID] VARCHAR (150) NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]       VARCHAR (150) NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]        VARCHAR (150) NULL,
    [INVOICE_SYSTEM_ID]                 VARCHAR (100) NULL,
    [HOLIDAY_INVOICE_ID]                VARCHAR (100) NULL,
    [HOLIDAY]                           VARCHAR (50)  NULL,
    [FILE_FORMAT_OF_PUSH]               VARCHAR (50)  NULL,
    [AGENT_PREPARATION_INVOICE_ID]      VARCHAR (50)  NULL,
    [NEW_ACL]                           VARCHAR (100) NULL,
    [CURRENT_CATS]                      VARCHAR (50)  NULL,
    [CATS_ID]                           VARCHAR (50)  NULL,
    [PATS_ID]                           VARCHAR (50)  NULL,
    [SMART_ELIGIBLE]                    VARCHAR (50)  NULL,
    [SMART_TIER_1]                      VARCHAR (50)  NULL,
    [SMART_TIER_2]                      VARCHAR (50)  NULL,
    [SMART_TIER_3]                      VARCHAR (50)  NULL,
    [INTERVAL]                          VARCHAR (50)  NULL,
    [TENANT_KEY]                        INT           NULL,
    [WS_ROW_CREATED_TIME]               DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]               DATETIME      NULL,
    [ID]                                INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_SD_AIA_STATIC_DEFAULTS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_SD_INVOICE_GROUPS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_SD_INVOICE_GROUPS] (
    [SCHEDULER_ACL_NAME]               VARCHAR (100)  NOT NULL,
    [ID_EXT]                           VARCHAR (3)    NOT NULL,
    [TENANT_KEY]                       INT            NOT NULL,
    [include_in_cas]                   VARCHAR (1)    NOT NULL,
    [ready_for_xml]                    VARCHAR (1)    NULL,
    [has_holidays]                     VARCHAR (1)    NOT NULL,
    [show_id_exts]                     VARCHAR (1)    NOT NULL,
    [include_in_universe_agent_invo]   VARCHAR (1)    NULL,
    [include_in_wsinet_usage]          VARCHAR (1)    NULL,
    [include_in_wslive_billing]        VARCHAR (1)    NULL,
    [include_in_olympics]              VARCHAR (1)    NULL,
    [include_in_novatel]               VARCHAR (1)    NULL,
    [include_in_wsol_exports]          VARCHAR (1)    NULL,
    [min_guarantee_minutes]            DECIMAL (6, 3) NULL,
    [min_guarantee_type]               VARCHAR (50)   NULL,
    [authorized_to_invoice_type]       VARCHAR (50)   NULL,
    [min_guarantee_flds]               VARCHAR (150)  NULL,
    [minguar_form]                     VARCHAR (500)  NULL,
    [invoice_formula]                  VARCHAR (500)  NULL,
    [pay_rate_standard]                DECIMAL (6, 3) NULL,
    [pay_rate_holiday]                 DECIMAL (6, 3) NULL,
    [is_client_team]                   VARCHAR (1)    NULL,
    [is_production_team]               VARCHAR (1)    NULL,
    [client_billing_master_group_name] VARCHAR (150)  NULL,
    [DLY_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [MTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WS_START_TIME]                    DATETIME       NULL,
    [WS_END_TIME]                      DATETIME       NULL,
    [WS_ROW_CREATED_TIME]              DATETIME       NULL,
    [WS_ROW_UPDATED_TIME]              DATETIME       NULL,
    [ID]                               INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_SD_INVOICE_GROUPS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_SD_INVOICE_HOLIDAYS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_SD_INVOICE_HOLIDAYS] (
    [HOLIDAY_DATE] SMALLDATETIME NOT NULL,
    [ID]           INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_INVOICE_HOLIDAYS] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_MONAT_INVOICE_HOLIDAYS] UNIQUE NONCLUSTERED ([HOLIDAY_DATE] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_SD_INVOICE_HOLIDAYS_ADDL]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_SD_INVOICE_HOLIDAYS_ADDL] (
    [HOLIDAY_DATE] DATETIME    NOT NULL,
    [ID_EXT]       VARCHAR (3) NOT NULL,
    [ID]           INT         IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_SD_INVOICE_HOLIDAYS_ADDL] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA] (
    [PLATFORM]                           VARCHAR (50)    NULL,
    [STATUS]                             VARCHAR (50)    NULL,
    [INVOICE_MAP_KEY]                    VARCHAR (50)    NOT NULL,
    [FIELD_NAME]                         VARCHAR (100)   NULL,
    [SCHEDULER_PROJECT_ID]               VARCHAR (50)    NULL,
    [SCHEDULER_ACL_NAME]                 VARCHAR (100)   NULL,
    [ACD_ID_EXTENSION]                   VARCHAR (50)    NOT NULL,
    [OFFICIAL_WSOL_CLIENT_ID]            VARCHAR (50)    NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]          VARCHAR (50)    NULL,
    [OFFICIAL_ACD_CLIENT_ID]             VARCHAR (50)    NOT NULL,
    [OFFICIAL_ACD_CLIENT_NAME]           VARCHAR (50)    NULL,
    [PRIMARY_PROJECT_MANAGER_ID]         VARCHAR (150)   NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID]  VARCHAR (150)   NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]        VARCHAR (150)   NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]         VARCHAR (150)   NULL,
    [INVOICE_SYSTEM_ID]                  VARCHAR (100)   NULL,
    [HOLIDAY_INVOICE_ID]                 VARCHAR (100)   NULL,
    [HOLIDAY]                            VARCHAR (50)    NOT NULL,
    [FILE_FORMAT_OF_PUSH]                VARCHAR (50)    NULL,
    [AGENT_PREPARATION_INVOICE_ID]       VARCHAR (50)    NULL,
    [NEW_ACL]                            VARCHAR (50)    NULL,
    [CURRENT_CATS]                       VARCHAR (50)    NULL,
    [CATS_ID]                            VARCHAR (50)    NULL,
    [PATS_ID]                            VARCHAR (50)    NULL,
    [SMART_ELIGIBLE]                     VARCHAR (50)    NULL,
    [SMART_TIER_1]                       VARCHAR (50)    NULL,
    [SMART_TIER_2]                       VARCHAR (50)    NULL,
    [SMART_TIER_3]                       VARCHAR (50)    NULL,
    [INTERVAL]                           VARCHAR (50)    NULL,
    [DATE]                               VARCHAR (50)    NULL,
    [HOD_INTERVAL]                       VARCHAR (50)    NULL,
    [AU_DK_LOGGED_IN_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_AVAILABLE_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_TALK_DURATION]                DECIMAL (10, 2) NULL,
    [AU_DK_IB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_OB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_CONVENTIONAL_ACW]             DECIMAL (10, 2) NULL,
    [AU_DK_NR_DURATION]                  DECIMAL (10, 2) NULL,
    [AU_DK_PSEUDO_PRODUCTIVE_DURATION]   DECIMAL (10, 2) NULL,
    [AU_DK_ADJUSTED_NR_DURATION]         DECIMAL (10, 2) NULL,
    [AU_DK_TOTAL_PRODUCTIVE_DURATION]    DECIMAL (10, 2) NULL,
    [AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] DECIMAL (10, 2) NULL,
    [AU_DK_XFER_COUNT]                   INT             NULL,
    [AU_DK_HOLD_COUNT]                   INT             NULL,
    [AU_DK_CONFERENCE_COUNT]             INT             NULL,
    [AU_DK_CONSULT_COUNT]                INT             NULL,
    [AU_DK_PUP_COUNT]                    INT             NULL,
    [AU_DK_OFFERED_COUNT]                INT             NULL,
    [AU_DK_HANDLED_COUNT]                INT             NULL,
    [AU_DK_IB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_OB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_RONA_COUNT]                   INT             NULL,
    [AU_DK_AWR_COUNT]                    INT             NULL,
    [MINIMUM_GUARANTEE]                  DECIMAL (10, 2) NULL,
    [AUTHORIZED_TO_INVOICE]              DECIMAL (10, 2) NULL,
    [WEEK_ENDING_DATE]                   VARCHAR (10)    NULL,
    [PAY_CYCLE_CLOSURE_DATE]             VARCHAR (10)    NULL,
    [FTP_FILE_NAME]                      VARCHAR (100)   NOT NULL,
    [EMAIL]                              VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]     INT             NOT NULL,
    [CAL_DATE]                           DATETIME        NULL,
    [TENANT_KEY]                         INT             NOT NULL,
    [AIR_DAY_TYPE]                       VARCHAR (1)     NOT NULL,
    [AIR_ACW_FONT_COLOR]                 VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]                 DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                 VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]         VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                       VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                     VARCHAR (1)     NULL,
    [READY_FOR_XML]                      VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                       VARCHAR (1)     NULL,
    [INVOICE_ID]                         VARCHAR (100)   NULL,
    [RESOURCE_NAME]                      VARCHAR (100)   NULL,
    [AIRITKDUR]                          DECIMAL (10, 2) NULL,
    [AIRIACDUR]                          DECIMAL (10, 2) NULL,
    [WS_ROW_CREATED_TIME]                DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                DATETIME        NULL,
    [ID]                                 INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA] UNIQUE NONCLUSTERED ([INVOICE_MAP_KEY] ASC, [SCHEDULER_ACL_NAME] ASC, [ACD_ID_EXTENSION] ASC, [HOLIDAY] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [TENANT_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING] (
    [RESOURCE_NAME]        VARCHAR (100) NULL,
    [EMAIL]                VARCHAR (100) NULL,
    [INVOICE_MAP_KEY]      VARCHAR (50)  NOT NULL,
    [FF_RESOURCE]          VARCHAR (50)  NOT NULL,
    [PAY_GROUP]            VARCHAR (50)  NOT NULL,
    [FTP_FILE_NAME]        VARCHAR (100) NULL,
    [CST_ROW_CREATED_TIME] DATETIME      NOT NULL,
    [CST_ROW_UPDATED_TIME] DATETIME      NULL,
    [ID]                   INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING] UNIQUE NONCLUSTERED ([INVOICE_MAP_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_1] (
    [RESOURCE_NAME]   VARCHAR (100) NULL,
    [EMAIL]           VARCHAR (100) NULL,
    [INVOICE_MAP_KEY] VARCHAR (50)  NOT NULL,
    [FF_RESOURCE]     VARCHAR (50)  NOT NULL,
    [PAY_GROUP]       VARCHAR (50)  NOT NULL,
    [FTP_FILE_NAME]   VARCHAR (100) NULL,
    [ID]              INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_ERRORS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_ERRORS] (
    [RESOURCE_NAME]         VARCHAR (100)  NULL,
    [EMAIL]                 VARCHAR (100)  NULL,
    [INVOICE_MAP_KEY]       VARCHAR (50)   NOT NULL,
    [FF_RESOURCE]           VARCHAR (50)   NOT NULL,
    [PAY_GROUP]             VARCHAR (50)   NOT NULL,
    [FTP_FILE_NAME]         VARCHAR (100)  NULL,
    [WS_ROW_CREATED_TIME]   DATETIME       NULL,
    [IMPORT_SUB_GROUP_NAME] VARCHAR (100)  NULL,
    [ERROR_TAG]             VARCHAR (50)   NULL,
    [ERROR_MSG]             VARCHAR (2500) NULL,
    [ID]                    INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_ERRORS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_SABRE_INVOICING]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_SABRE_INVOICING] (
    [FF_DATETIME]                    VARCHAR (50)    NULL,
    [FF_FULL_NAME]                   VARCHAR (100)   NULL,
    [FF_CLIENT_USER_ID]              VARCHAR (50)    NULL,
    [FF_USERNAME]                    VARCHAR (50)    NOT NULL,
    [FF_LOGIN_ID]                    VARCHAR (50)    NULL,
    [FF_ACD_CALLS]                   VARCHAR (50)    NULL,
    [FF_EXTN_IN_CALLS]               VARCHAR (50)    NULL,
    [FF_EXTN_OUT_CALLS]              VARCHAR (50)    NULL,
    [FF_STAFFED_TIME]                VARCHAR (50)    NULL,
    [FF_AGENT_RING_TIME]             VARCHAR (50)    NULL,
    [FF_IACD_TIME]                   VARCHAR (50)    NULL,
    [FF_IACW_TIME]                   VARCHAR (50)    NULL,
    [FF_IACW_OUT_TIME]               VARCHAR (50)    NULL,
    [FF_EXTN_IN_TIME]                VARCHAR (50)    NULL,
    [FF_EXTN_OUT_TIME]               VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                   VARCHAR (50)    NULL,
    [FF_IACD_AUX_OUT_TIME]           VARCHAR (50)    NULL,
    [FF_TOTAL_AUX_TIME]              VARCHAR (50)    NULL,
    [FF_IAUX_OUT_TIME]               VARCHAR (50)    NULL,
    [FF_AVAIL_TIME]                  VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NULL,
    [DATETIME]                       DATETIME        NULL,
    [ACD_CALLS]                      INT             NULL,
    [EXTN_IN_CALLS]                  INT             NULL,
    [EXTN_OUT_CALLS]                 INT             NULL,
    [STAFFED_TIME]                   DECIMAL (10, 2) NULL,
    [AGENT_RING_TIME]                DECIMAL (10, 2) NULL,
    [IACD_TIME]                      DECIMAL (10, 2) NULL,
    [IACW_TIME]                      DECIMAL (10, 2) NULL,
    [IACW_OUT_TIME]                  DECIMAL (10, 2) NULL,
    [EXTN_IN_TIME]                   DECIMAL (10, 2) NULL,
    [EXTN_OUT_TIME]                  DECIMAL (10, 2) NULL,
    [HOLD_TIME]                      DECIMAL (10, 2) NULL,
    [IACD_AUX_OUT_TIME]              DECIMAL (10, 2) NULL,
    [TOTAL_AUX_TIME]                 DECIMAL (10, 2) NULL,
    [IAUX_OUT_TIME]                  DECIMAL (10, 2) NULL,
    [AVAIL_TIME]                     DECIMAL (10, 2) NULL,
    [HANDLED_CALLS]                  INT             NULL,
    [ADJUSTED_ACW_TIME]              DECIMAL (10, 2) NULL,
    [AUTHORIZED_ACW_TIME]            DECIMAL (10, 2) NULL,
    [ADJUSTED_HOLD_TIME]             DECIMAL (10, 2) NULL,
    [ADJUSTED_NOT_READY_TIME]        DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                     DECIMAL (10, 2) NULL,
    [CPROD]                          DECIMAL (10, 2) NULL,
    [MING]                           DECIMAL (10, 2) NULL,
    [AUT2]                           DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NOT NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (50)    NULL,
    [PAY_GROUP]                      INT             NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NOT NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NOT NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]             DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (50)    NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [AIRITKDUR]                      INT             NULL,
    [AIRIACDUR]                      INT             NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME        NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_SABRE_INVOICING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_SABRE_INVOICING] UNIQUE NONCLUSTERED ([FF_USERNAME] ASC, [ID_EXT] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_SABRE_INVOICING_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_SABRE_INVOICING_0_Audit] (
    [FF_DATETIME]          VARCHAR (50)  NULL,
    [FF_FULL_NAME]         VARCHAR (100) NULL,
    [FF_CLIENT_USER_ID]    VARCHAR (50)  NULL,
    [FF_USERNAME]          VARCHAR (50)  NULL,
    [FF_LOGIN_ID]          VARCHAR (50)  NOT NULL,
    [FF_ACD_CALLS]         VARCHAR (50)  NULL,
    [FF_EXTN_IN_CALLS]     VARCHAR (50)  NULL,
    [FF_EXTN_OUT_CALLS]    VARCHAR (50)  NULL,
    [FF_STAFFED_TIME]      VARCHAR (50)  NULL,
    [FF_AGENT_RING_TIME]   VARCHAR (50)  NULL,
    [FF_IACD_TIME]         VARCHAR (50)  NULL,
    [FF_IACW_TIME]         VARCHAR (50)  NULL,
    [FF_IACW_OUT_TIME]     VARCHAR (50)  NULL,
    [FF_EXTN_IN_TIME]      VARCHAR (50)  NULL,
    [FF_EXTN_OUT_TIME]     VARCHAR (50)  NULL,
    [FF_HOLD_TIME]         VARCHAR (50)  NULL,
    [FF_IACD_AUX_OUT_TIME] VARCHAR (50)  NULL,
    [FF_TOTAL_AUX_TIME]    VARCHAR (50)  NULL,
    [FF_IAUX_OUT_TIME]     VARCHAR (50)  NULL,
    [FF_AVAIL_TIME]        VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]     DATETIME      NOT NULL,
    [SEQNO]                INT           NOT NULL,
    [FTP_FILE_NAME]        VARCHAR (100) NOT NULL,
    [ID]                   INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_SABRE_INVOICING_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_SABRE_INVOICING_0_Audit] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_SABRE_INVOICING_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_SABRE_INVOICING_1] (
    [FF_DATETIME]                    VARCHAR (50)    NULL,
    [FF_FULL_NAME]                   VARCHAR (100)   NULL,
    [FF_CLIENT_USER_ID]              VARCHAR (50)    NULL,
    [FF_USERNAME]                    VARCHAR (50)    NULL,
    [FF_LOGIN_ID]                    VARCHAR (50)    NULL,
    [FF_ACD_CALLS]                   VARCHAR (50)    NULL,
    [FF_EXTN_IN_CALLS]               VARCHAR (50)    NULL,
    [FF_EXTN_OUT_CALLS]              VARCHAR (50)    NULL,
    [FF_STAFFED_TIME]                VARCHAR (50)    NULL,
    [FF_AGENT_RING_TIME]             VARCHAR (50)    NULL,
    [FF_IACD_TIME]                   VARCHAR (50)    NULL,
    [FF_IACW_TIME]                   VARCHAR (50)    NULL,
    [FF_IACW_OUT_TIME]               VARCHAR (50)    NULL,
    [FF_EXTN_IN_TIME]                VARCHAR (50)    NULL,
    [FF_EXTN_OUT_TIME]               VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                   VARCHAR (50)    NULL,
    [FF_IACD_AUX_OUT_TIME]           VARCHAR (50)    NULL,
    [FF_TOTAL_AUX_TIME]              VARCHAR (50)    NULL,
    [FF_IAUX_OUT_TIME]               VARCHAR (50)    NULL,
    [FF_AVAIL_TIME]                  VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NULL,
    [DATETIME]                       DATETIME        NULL,
    [ACD_CALLS]                      INT             NULL,
    [EXTN_IN_CALLS]                  INT             NULL,
    [EXTN_OUT_CALLS]                 INT             NULL,
    [STAFFED_TIME]                   DECIMAL (10, 2) NULL,
    [AGENT_RING_TIME]                DECIMAL (10, 2) NULL,
    [IACD_TIME]                      DECIMAL (10, 2) NULL,
    [IACW_TIME]                      DECIMAL (10, 2) NULL,
    [IACW_OUT_TIME]                  DECIMAL (10, 2) NULL,
    [EXTN_IN_TIME]                   DECIMAL (10, 2) NULL,
    [EXTN_OUT_TIME]                  DECIMAL (10, 2) NULL,
    [HOLD_TIME]                      DECIMAL (10, 2) NULL,
    [IACD_AUX_OUT_TIME]              DECIMAL (10, 2) NULL,
    [TOTAL_AUX_TIME]                 DECIMAL (10, 2) NULL,
    [IAUX_OUT_TIME]                  DECIMAL (10, 2) NULL,
    [AVAIL_TIME]                     DECIMAL (10, 2) NULL,
    [HANDLED_CALLS]                  INT             NULL,
    [ADJUSTED_ACW_TIME]              DECIMAL (10, 2) NULL,
    [AUTHORIZED_ACW_TIME]            DECIMAL (10, 2) NULL,
    [ADJUSTED_HOLD_TIME]             DECIMAL (10, 2) NULL,
    [ADJUSTED_NOT_READY_TIME]        DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                     DECIMAL (10, 2) NULL,
    [CPROD]                          DECIMAL (10, 2) NULL,
    [MING]                           DECIMAL (10, 2) NULL,
    [AUT2]                           DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]             DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (50)    NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [AIRITKDUR]                      INT             NULL,
    [AIRIACDUR]                      INT             NULL,
    [PAY_GROUP]                      INT             NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_SABRE_INVOICING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_SABRE_INVOICING_BAD]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_SABRE_INVOICING_BAD] (
    [BAD_IMPORTS_NO]                 TINYINT         NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]          VARCHAR (3)     NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NOT NULL,
    [FF_DATETIME]                    VARCHAR (50)    NULL,
    [FF_FULL_NAME]                   VARCHAR (100)   NULL,
    [FF_CLIENT_USER_ID]              VARCHAR (50)    NULL,
    [FF_USERNAME]                    VARCHAR (50)    NULL,
    [FF_LOGIN_ID]                    VARCHAR (50)    NULL,
    [FF_ACD_CALLS]                   VARCHAR (50)    NULL,
    [FF_EXTN_IN_CALLS]               VARCHAR (50)    NULL,
    [FF_EXTN_OUT_CALLS]              VARCHAR (50)    NULL,
    [FF_STAFFED_TIME]                VARCHAR (50)    NULL,
    [FF_AGENT_RING_TIME]             VARCHAR (50)    NULL,
    [FF_IACD_TIME]                   VARCHAR (50)    NULL,
    [FF_IACW_TIME]                   VARCHAR (50)    NULL,
    [FF_IACW_OUT_TIME]               VARCHAR (50)    NULL,
    [FF_EXTN_IN_TIME]                VARCHAR (50)    NULL,
    [FF_EXTN_OUT_TIME]               VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                   VARCHAR (50)    NULL,
    [FF_IACD_AUX_OUT_TIME]           VARCHAR (50)    NULL,
    [FF_TOTAL_AUX_TIME]              VARCHAR (50)    NULL,
    [FF_IAUX_OUT_TIME]               VARCHAR (50)    NULL,
    [FF_AVAIL_TIME]                  VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [ACD_CALLS]                      INT             NULL,
    [EXTN_IN_CALLS]                  INT             NULL,
    [EXTN_OUT_CALLS]                 INT             NULL,
    [STAFFED_TIME]                   DECIMAL (10, 2) NULL,
    [AGENT_RING_TIME]                DECIMAL (10, 2) NULL,
    [IACD_TIME]                      DECIMAL (10, 2) NULL,
    [IACW_TIME]                      DECIMAL (10, 2) NULL,
    [IACW_OUT_TIME]                  DECIMAL (10, 2) NULL,
    [EXTN_IN_TIME]                   DECIMAL (10, 2) NULL,
    [EXTN_OUT_TIME]                  DECIMAL (10, 2) NULL,
    [HOLD_TIME]                      DECIMAL (10, 2) NULL,
    [IACD_AUX_OUT_TIME]              DECIMAL (10, 2) NULL,
    [TOTAL_AUX_TIME]                 DECIMAL (10, 2) NULL,
    [IAUX_OUT_TIME]                  DECIMAL (10, 2) NULL,
    [AVAIL_TIME]                     DECIMAL (10, 2) NULL,
    [HANDLED_CALLS]                  INT             NULL,
    [ADJUSTED_ACW_TIME]              DECIMAL (10, 2) NULL,
    [AUTHORIZED_ACW_TIME]            DECIMAL (10, 2) NULL,
    [ADJUSTED_HOLD_TIME]             DECIMAL (10, 2) NULL,
    [ADJUSTED_NOT_READY_TIME]        DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                     DECIMAL (10, 2) NULL,
    [CPROD]                          DECIMAL (10, 2) NULL,
    [MING]                           DECIMAL (10, 2) NULL,
    [AUT2]                           DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]             DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (50)    NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [AIRITKDUR]                      INT             NULL,
    [AIRIACDUR]                      INT             NULL,
    [PAY_GROUP]                      INT             NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_SABRE_INVOICING_BAD] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_SABRE_INVOICING_BAD] UNIQUE NONCLUSTERED ([BAD_IMPORTS_NO] ASC, [WS_ROW_CREATED_TIME] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_SABRE_SD_AIA_STATIC_DEFAULTS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_SABRE_SD_AIA_STATIC_DEFAULTS] (
    [PLATFORM]                          VARCHAR (50)  NULL,
    [STATUS]                            VARCHAR (50)  NULL,
    [INVOICE_MAP_KEY]                   VARCHAR (50)  NULL,
    [FIELD_NAME]                        VARCHAR (50)  NULL,
    [SCHEDULER_PROJECT_ID]              VARCHAR (50)  NULL,
    [SCHEDULER_ACL_NAME]                VARCHAR (50)  NULL,
    [ACD_ID_EXTENSION]                  VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_ID]           VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]         VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_ID]            VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_NAME]          VARCHAR (50)  NULL,
    [PRIMARY_PROJECT_MANAGER_ID]        VARCHAR (150) NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID] VARCHAR (150) NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]       VARCHAR (150) NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]        VARCHAR (150) NULL,
    [INVOICE_SYSTEM_ID]                 VARCHAR (50)  NULL,
    [HOLIDAY_INVOICE_ID]                VARCHAR (50)  NULL,
    [HOLIDAY]                           VARCHAR (50)  NULL,
    [FILE_FORMAT_OF_PUSH]               VARCHAR (50)  NULL,
    [AGENT_PREPARATION_INVOICE_ID]      VARCHAR (50)  NULL,
    [NEW_ACL]                           VARCHAR (50)  NULL,
    [CURRENT_CATS]                      VARCHAR (50)  NULL,
    [CATS_ID]                           VARCHAR (50)  NULL,
    [PATS_ID]                           VARCHAR (50)  NULL,
    [SMART_ELIGIBLE]                    VARCHAR (50)  NULL,
    [SMART_TIER_1]                      VARCHAR (50)  NULL,
    [SMART_TIER_2]                      VARCHAR (50)  NULL,
    [SMART_TIER_3]                      VARCHAR (50)  NULL,
    [INTERVAL]                          VARCHAR (50)  NULL,
    [TENANT_KEY]                        INT           NULL,
    [WS_ROW_CREATED_TIME]               DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]               DATETIME      NULL,
    [ID]                                INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_SABRE_SD_AIA_STATIC_DEFAULTS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_SABRE_SD_INVOICE_GROUPS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_SABRE_SD_INVOICE_GROUPS] (
    [SCHEDULER_ACL_NAME]               VARCHAR (100)  NOT NULL,
    [ID_EXT]                           VARCHAR (3)    NOT NULL,
    [TENANT_KEY]                       INT            NOT NULL,
    [include_in_cas]                   VARCHAR (1)    NOT NULL,
    [ready_for_xml]                    VARCHAR (1)    NULL,
    [has_holidays]                     VARCHAR (1)    NOT NULL,
    [show_id_exts]                     VARCHAR (1)    NOT NULL,
    [include_in_universe_agent_invo]   VARCHAR (1)    NULL,
    [include_in_wsinet_usage]          VARCHAR (1)    NULL,
    [include_in_wslive_billing]        VARCHAR (1)    NULL,
    [include_in_olympics]              VARCHAR (1)    NULL,
    [include_in_novatel]               VARCHAR (1)    NULL,
    [include_in_wsol_exports]          VARCHAR (1)    NULL,
    [min_guarantee_rate]               DECIMAL (6, 3) NULL,
    [min_guarantee_type]               VARCHAR (50)   NULL,
    [authorized_to_invoice_type]       VARCHAR (50)   NULL,
    [min_guarantee_flds]               VARCHAR (150)  NULL,
    [minguar_form]                     VARCHAR (500)  NULL,
    [invoice_formula]                  VARCHAR (500)  NULL,
    [pay_rate_standard]                DECIMAL (6, 3) NULL,
    [pay_rate_holiday]                 DECIMAL (6, 3) NULL,
    [is_client_team]                   VARCHAR (1)    NULL,
    [is_production_team]               VARCHAR (1)    NULL,
    [client_billing_master_group_name] VARCHAR (150)  NULL,
    [DLY_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [MTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WS_START_TIME]                    DATETIME       NULL,
    [WS_END_TIME]                      DATETIME       NULL,
    [WS_ROW_CREATED_TIME]              DATETIME       NULL,
    [WS_ROW_UPDATED_TIME]              DATETIME       NULL,
    [ID]                               INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_SABRE_SD_INVOICE_GROUPS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_SABRE_SD_INVOICE_HOLIDAYS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_SABRE_SD_INVOICE_HOLIDAYS] (
    [HOLIDAY_DATE] SMALLDATETIME NOT NULL,
    [ID]           INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_SABRE_SD_INVOICE_HOLIDAYS] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_SABRE_INVOICE_HOLIDAYS] UNIQUE NONCLUSTERED ([HOLIDAY_DATE] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_SABRE_SD_INVOICE_HOLIDAYS_ADDL]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_SABRE_SD_INVOICE_HOLIDAYS_ADDL] (
    [HOLIDAY_DATE] DATETIME    NOT NULL,
    [ID_EXT]       VARCHAR (3) NOT NULL,
    [ID]           INT         IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_SABRE_SD_INVOICE_HOLIDAYS_ADDL] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_SABRE_SYNXIS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_SABRE_SYNXIS] (
    [FF_TEXTBOX56]                       VARCHAR (50)   NULL,
    [FF_CHAIN_TOTAL]                     VARCHAR (50)   NULL,
    [FF_USER]                            VARCHAR (50)   NULL,
    [FF_CHAIN]                           VARCHAR (300)  NULL,
    [FF_HOTEL]                           VARCHAR (50)   NULL,
    [FF_CRO]                             VARCHAR (2500) NULL,
    [FF_CONFIRMED_REZ]                   VARCHAR (50)   NULL,
    [FF_CONFIRMED_ROOM]                  VARCHAR (50)   NULL,
    [FF_CONFIRMED_ROOM_NIGHTS]           VARCHAR (50)   NULL,
    [FF_CONFIRMED_REVENUE]               VARCHAR (50)   NULL,
    [FF_CONFIRMED_LOS]                   VARCHAR (50)   NULL,
    [FF_CONFIRMED_ADR]                   VARCHAR (50)   NULL,
    [FF_CANCELLED_REZ]                   VARCHAR (50)   NULL,
    [FF_CANCELLED_ROOMS]                 VARCHAR (50)   NULL,
    [FF_CANCELLED_ROOMS_NIGHTS]          VARCHAR (50)   NULL,
    [FF_CANCELLED_REVENUE]               VARCHAR (50)   NULL,
    [FF_CANCELLED_LOS]                   VARCHAR (50)   NULL,
    [FF_CANCELLED_ADR]                   VARCHAR (50)   NULL,
    [FF_NET_REZ]                         VARCHAR (50)   NULL,
    [FF_NET_ROOMS]                       VARCHAR (50)   NULL,
    [FF_NET_ROOMS_NIGHTS]                VARCHAR (50)   NULL,
    [FF_NET_REVENUE]                     VARCHAR (50)   NULL,
    [FF_NET_LOS]                         VARCHAR (50)   NULL,
    [FF_NET_ADR]                         VARCHAR (50)   NULL,
    [FF_SUBTOTAL]                        VARCHAR (100)  NULL,
    [FF_SUBTOTAL_CONFIRMED_REZ]          VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CONFIRMED_ROOM]         VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CONFIRMED_ROOM_NIGHTS]  VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CONFIRMED_REVENUE]      VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CONFIRMED_LOS]          VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CONFIRMED_ADR]          VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CANCELLED_REZ]          VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CANCELLED_ROOMS]        VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CANCELLED_ROOMS_NIGHTS] VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CANCELLED_REVENUE]      VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CANCELLED_LOS]          VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CANCELLED_ADR]          VARCHAR (50)   NULL,
    [FF_SUBTOTAL_NET_REZ]                VARCHAR (50)   NULL,
    [FF_SUBTOTAL_NET_ROOMS]              VARCHAR (50)   NULL,
    [FF_SUBTOTAL_NET_ROOMS_NIGHTS]       VARCHAR (50)   NULL,
    [FF_SUBTOTAL_NET_REVENUE]            VARCHAR (50)   NULL,
    [FF_SUBTOTAL_NET_LOS]                VARCHAR (50)   NULL,
    [FF_SUBTOTAL_NET_ADR]                VARCHAR (50)   NULL,
    [FF_CHAIN_CONFIRMED_REZ]             VARCHAR (50)   NULL,
    [FF_CHAIN_CONFIRMED_ROOM]            VARCHAR (50)   NULL,
    [FF_CHAIN_CONFIRMED_ROOM_NIGHTS]     VARCHAR (50)   NULL,
    [FF_CHAIN_CONFIRMED_REVENUE]         VARCHAR (50)   NULL,
    [FF_CHAIN_CONFIRMED_LOS]             VARCHAR (50)   NULL,
    [FF_CHAIN_CONFIRMED_ADR]             VARCHAR (50)   NULL,
    [FF_CHAIN_CANCELLED_REZ]             VARCHAR (50)   NULL,
    [FF_CHAIN_CANCELLED_ROOMS]           VARCHAR (50)   NULL,
    [FF_CHAIN_CANCELLED_ROOMS_NIGHTS]    VARCHAR (50)   NULL,
    [FF_CHAIN_CANCELLED_REVENUE]         VARCHAR (50)   NULL,
    [FF_CHAIN_CANCELLED_LOS]             VARCHAR (50)   NULL,
    [FF_CHAIN_CANCELLED_ADR]             VARCHAR (50)   NULL,
    [FF_CHAIN_NET_REZ]                   VARCHAR (50)   NULL,
    [FF_CHAIN_NET_ROOMS]                 VARCHAR (50)   NULL,
    [FF_CHAIN_NET_ROOMS_NIGHTS]          VARCHAR (50)   NULL,
    [FF_CHAIN_NET_REVENUE]               VARCHAR (50)   NULL,
    [FF_CHAIN_NET_LOS]                   VARCHAR (50)   NULL,
    [FF_CHAIN_NET_ADR]                   VARCHAR (50)   NULL,
    [FF_REPORT_CONFIRMED_REZ]            VARCHAR (50)   NULL,
    [FF_REPORT_CONFIRMED_ROOM]           VARCHAR (50)   NULL,
    [FF_REPORT_CONFIRMED_ROOM_NIGHTS]    VARCHAR (50)   NULL,
    [FF_REPORT_CONFIRMED_REVENUE]        VARCHAR (50)   NULL,
    [FF_REPORT_CONFIRMED_LOS]            VARCHAR (50)   NULL,
    [FF_REPORT_CONFIRMED_ADR]            VARCHAR (50)   NULL,
    [FF_REPORT_CANCELLED_REZ]            VARCHAR (50)   NULL,
    [FF_REPORT_CANCELLED_ROOMS]          VARCHAR (50)   NULL,
    [FF_REPORT_CANCELLED_ROOMS_NIGHTS]   VARCHAR (50)   NULL,
    [FF_REPORT_CANCELLED_REVENUE]        VARCHAR (50)   NULL,
    [FF_REPORT_CANCELLED_LOS]            VARCHAR (50)   NULL,
    [FF_REPORT_CANCELLED_ADR]            VARCHAR (50)   NULL,
    [FF_REPORT_NET_REZ]                  VARCHAR (50)   NULL,
    [FF_REPORT_NET_ROOMS]                VARCHAR (50)   NULL,
    [FF_REPORT_NET_ROOMS_NIGHTS]         VARCHAR (50)   NULL,
    [FF_REPORT_NET_REVENUE]              VARCHAR (50)   NULL,
    [FF_REPORT_NET_LOS]                  VARCHAR (50)   NULL,
    [FF_REPORT_NET_ADR]                  VARCHAR (50)   NULL,
    [DATA_DATE]                          DATETIME       NULL,
    [SEQNO_ADDED_TIME]                   DATETIME       NOT NULL,
    [SEQNO]                              INT            NOT NULL,
    [FTP_FILE_NAME]                      VARCHAR (100)  NOT NULL,
    [DATETIME]                           DATETIME       NULL,
    [HOUR_INTERVAL]                      VARCHAR (50)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]     INT            NULL,
    [TENANT_KEY]                         INT            NULL,
    [RESOURCE_NAME]                      VARCHAR (100)  NULL,
    [WS_ROW_CREATED_TIME]                DATETIME       NULL,
    [WS_ROW_UPDATED_TIME]                DATETIME       NULL,
    [ID]                                 INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_SABRE_SYNXIS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_SABRE_SYNXIS_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_SABRE_SYNXIS_0_Audit] (
    [FF_TEXTBOX56]                       VARCHAR (50)   NULL,
    [FF_CHAIN_TOTAL]                     VARCHAR (50)   NULL,
    [FF_USER]                            VARCHAR (50)   NULL,
    [FF_CHAIN]                           VARCHAR (300)  NULL,
    [FF_HOTEL]                           VARCHAR (50)   NULL,
    [FF_CRO]                             VARCHAR (2500) NULL,
    [FF_CONFIRMED_REZ]                   VARCHAR (50)   NULL,
    [FF_CONFIRMED_ROOM]                  VARCHAR (50)   NULL,
    [FF_CONFIRMED_ROOM_NIGHTS]           VARCHAR (50)   NULL,
    [FF_CONFIRMED_REVENUE]               VARCHAR (50)   NULL,
    [FF_CONFIRMED_LOS]                   VARCHAR (50)   NULL,
    [FF_CONFIRMED_ADR]                   VARCHAR (50)   NULL,
    [FF_CANCELLED_REZ]                   VARCHAR (50)   NULL,
    [FF_CANCELLED_ROOMS]                 VARCHAR (50)   NULL,
    [FF_CANCELLED_ROOMS_NIGHTS]          VARCHAR (50)   NULL,
    [FF_CANCELLED_REVENUE]               VARCHAR (50)   NULL,
    [FF_CANCELLED_LOS]                   VARCHAR (50)   NULL,
    [FF_CANCELLED_ADR]                   VARCHAR (50)   NULL,
    [FF_NET_REZ]                         VARCHAR (50)   NULL,
    [FF_NET_ROOMS]                       VARCHAR (50)   NULL,
    [FF_NET_ROOMS_NIGHTS]                VARCHAR (50)   NULL,
    [FF_NET_REVENUE]                     VARCHAR (50)   NULL,
    [FF_NET_LOS]                         VARCHAR (50)   NULL,
    [FF_NET_ADR]                         VARCHAR (50)   NULL,
    [FF_SUBTOTAL]                        VARCHAR (100)  NULL,
    [FF_SUBTOTAL_CONFIRMED_REZ]          VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CONFIRMED_ROOM]         VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CONFIRMED_ROOM_NIGHTS]  VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CONFIRMED_REVENUE]      VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CONFIRMED_LOS]          VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CONFIRMED_ADR]          VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CANCELLED_REZ]          VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CANCELLED_ROOMS]        VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CANCELLED_ROOMS_NIGHTS] VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CANCELLED_REVENUE]      VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CANCELLED_LOS]          VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CANCELLED_ADR]          VARCHAR (50)   NULL,
    [FF_SUBTOTAL_NET_REZ]                VARCHAR (50)   NULL,
    [FF_SUBTOTAL_NET_ROOMS]              VARCHAR (50)   NULL,
    [FF_SUBTOTAL_NET_ROOMS_NIGHTS]       VARCHAR (50)   NULL,
    [FF_SUBTOTAL_NET_REVENUE]            VARCHAR (50)   NULL,
    [FF_SUBTOTAL_NET_LOS]                VARCHAR (50)   NULL,
    [FF_SUBTOTAL_NET_ADR]                VARCHAR (50)   NULL,
    [FF_CHAIN_CONFIRMED_REZ]             VARCHAR (50)   NULL,
    [FF_CHAIN_CONFIRMED_ROOM]            VARCHAR (50)   NULL,
    [FF_CHAIN_CONFIRMED_ROOM_NIGHTS]     VARCHAR (50)   NULL,
    [FF_CHAIN_CONFIRMED_REVENUE]         VARCHAR (50)   NULL,
    [FF_CHAIN_CONFIRMED_LOS]             VARCHAR (50)   NULL,
    [FF_CHAIN_CONFIRMED_ADR]             VARCHAR (50)   NULL,
    [FF_CHAIN_CANCELLED_REZ]             VARCHAR (50)   NULL,
    [FF_CHAIN_CANCELLED_ROOMS]           VARCHAR (50)   NULL,
    [FF_CHAIN_CANCELLED_ROOMS_NIGHTS]    VARCHAR (50)   NULL,
    [FF_CHAIN_CANCELLED_REVENUE]         VARCHAR (50)   NULL,
    [FF_CHAIN_CANCELLED_LOS]             VARCHAR (50)   NULL,
    [FF_CHAIN_CANCELLED_ADR]             VARCHAR (50)   NULL,
    [FF_CHAIN_NET_REZ]                   VARCHAR (50)   NULL,
    [FF_CHAIN_NET_ROOMS]                 VARCHAR (50)   NULL,
    [FF_CHAIN_NET_ROOMS_NIGHTS]          VARCHAR (50)   NULL,
    [FF_CHAIN_NET_REVENUE]               VARCHAR (50)   NULL,
    [FF_CHAIN_NET_LOS]                   VARCHAR (50)   NULL,
    [FF_CHAIN_NET_ADR]                   VARCHAR (50)   NULL,
    [FF_REPORT_CONFIRMED_REZ]            VARCHAR (50)   NULL,
    [FF_REPORT_CONFIRMED_ROOM]           VARCHAR (50)   NULL,
    [FF_REPORT_CONFIRMED_ROOM_NIGHTS]    VARCHAR (50)   NULL,
    [FF_REPORT_CONFIRMED_REVENUE]        VARCHAR (50)   NULL,
    [FF_REPORT_CONFIRMED_LOS]            VARCHAR (50)   NULL,
    [FF_REPORT_CONFIRMED_ADR]            VARCHAR (50)   NULL,
    [FF_REPORT_CANCELLED_REZ]            VARCHAR (50)   NULL,
    [FF_REPORT_CANCELLED_ROOMS]          VARCHAR (50)   NULL,
    [FF_REPORT_CANCELLED_ROOMS_NIGHTS]   VARCHAR (50)   NULL,
    [FF_REPORT_CANCELLED_REVENUE]        VARCHAR (50)   NULL,
    [FF_REPORT_CANCELLED_LOS]            VARCHAR (50)   NULL,
    [FF_REPORT_CANCELLED_ADR]            VARCHAR (50)   NULL,
    [FF_REPORT_NET_REZ]                  VARCHAR (50)   NULL,
    [FF_REPORT_NET_ROOMS]                VARCHAR (50)   NULL,
    [FF_REPORT_NET_ROOMS_NIGHTS]         VARCHAR (50)   NULL,
    [FF_REPORT_NET_REVENUE]              VARCHAR (50)   NULL,
    [FF_REPORT_NET_LOS]                  VARCHAR (50)   NULL,
    [FF_REPORT_NET_ADR]                  VARCHAR (50)   NULL,
    [SEQNO_ADDED_TIME]                   DATETIME       NOT NULL,
    [SEQNO]                              INT            NOT NULL,
    [FTP_FILE_NAME]                      VARCHAR (100)  NOT NULL,
    [ID]                                 INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_SABRE_SYNXIS_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_SABRE_SYNXIS_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_SABRE_SYNXIS_1] (
    [FF_TEXTBOX56]                       VARCHAR (50)   NULL,
    [FF_CHAIN_TOTAL]                     VARCHAR (50)   NULL,
    [FF_USER]                            VARCHAR (50)   NULL,
    [FF_CHAIN]                           VARCHAR (300)  NULL,
    [FF_HOTEL]                           VARCHAR (50)   NULL,
    [FF_CRO]                             VARCHAR (2500) NULL,
    [FF_CONFIRMED_REZ]                   VARCHAR (50)   NULL,
    [FF_CONFIRMED_ROOM]                  VARCHAR (50)   NULL,
    [FF_CONFIRMED_ROOM_NIGHTS]           VARCHAR (50)   NULL,
    [FF_CONFIRMED_REVENUE]               VARCHAR (50)   NULL,
    [FF_CONFIRMED_LOS]                   VARCHAR (50)   NULL,
    [FF_CONFIRMED_ADR]                   VARCHAR (50)   NULL,
    [FF_CANCELLED_REZ]                   VARCHAR (50)   NULL,
    [FF_CANCELLED_ROOMS]                 VARCHAR (50)   NULL,
    [FF_CANCELLED_ROOMS_NIGHTS]          VARCHAR (50)   NULL,
    [FF_CANCELLED_REVENUE]               VARCHAR (50)   NULL,
    [FF_CANCELLED_LOS]                   VARCHAR (50)   NULL,
    [FF_CANCELLED_ADR]                   VARCHAR (50)   NULL,
    [FF_NET_REZ]                         VARCHAR (50)   NULL,
    [FF_NET_ROOMS]                       VARCHAR (50)   NULL,
    [FF_NET_ROOMS_NIGHTS]                VARCHAR (50)   NULL,
    [FF_NET_REVENUE]                     VARCHAR (50)   NULL,
    [FF_NET_LOS]                         VARCHAR (50)   NULL,
    [FF_NET_ADR]                         VARCHAR (50)   NULL,
    [FF_SUBTOTAL]                        VARCHAR (100)  NULL,
    [FF_SUBTOTAL_CONFIRMED_REZ]          VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CONFIRMED_ROOM]         VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CONFIRMED_ROOM_NIGHTS]  VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CONFIRMED_REVENUE]      VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CONFIRMED_LOS]          VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CONFIRMED_ADR]          VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CANCELLED_REZ]          VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CANCELLED_ROOMS]        VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CANCELLED_ROOMS_NIGHTS] VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CANCELLED_REVENUE]      VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CANCELLED_LOS]          VARCHAR (50)   NULL,
    [FF_SUBTOTAL_CANCELLED_ADR]          VARCHAR (50)   NULL,
    [FF_SUBTOTAL_NET_REZ]                VARCHAR (50)   NULL,
    [FF_SUBTOTAL_NET_ROOMS]              VARCHAR (50)   NULL,
    [FF_SUBTOTAL_NET_ROOMS_NIGHTS]       VARCHAR (50)   NULL,
    [FF_SUBTOTAL_NET_REVENUE]            VARCHAR (50)   NULL,
    [FF_SUBTOTAL_NET_LOS]                VARCHAR (50)   NULL,
    [FF_SUBTOTAL_NET_ADR]                VARCHAR (50)   NULL,
    [FF_CHAIN_CONFIRMED_REZ]             VARCHAR (50)   NULL,
    [FF_CHAIN_CONFIRMED_ROOM]            VARCHAR (50)   NULL,
    [FF_CHAIN_CONFIRMED_ROOM_NIGHTS]     VARCHAR (50)   NULL,
    [FF_CHAIN_CONFIRMED_REVENUE]         VARCHAR (50)   NULL,
    [FF_CHAIN_CONFIRMED_LOS]             VARCHAR (50)   NULL,
    [FF_CHAIN_CONFIRMED_ADR]             VARCHAR (50)   NULL,
    [FF_CHAIN_CANCELLED_REZ]             VARCHAR (50)   NULL,
    [FF_CHAIN_CANCELLED_ROOMS]           VARCHAR (50)   NULL,
    [FF_CHAIN_CANCELLED_ROOMS_NIGHTS]    VARCHAR (50)   NULL,
    [FF_CHAIN_CANCELLED_REVENUE]         VARCHAR (50)   NULL,
    [FF_CHAIN_CANCELLED_LOS]             VARCHAR (50)   NULL,
    [FF_CHAIN_CANCELLED_ADR]             VARCHAR (50)   NULL,
    [FF_CHAIN_NET_REZ]                   VARCHAR (50)   NULL,
    [FF_CHAIN_NET_ROOMS]                 VARCHAR (50)   NULL,
    [FF_CHAIN_NET_ROOMS_NIGHTS]          VARCHAR (50)   NULL,
    [FF_CHAIN_NET_REVENUE]               VARCHAR (50)   NULL,
    [FF_CHAIN_NET_LOS]                   VARCHAR (50)   NULL,
    [FF_CHAIN_NET_ADR]                   VARCHAR (50)   NULL,
    [FF_REPORT_CONFIRMED_REZ]            VARCHAR (50)   NULL,
    [FF_REPORT_CONFIRMED_ROOM]           VARCHAR (50)   NULL,
    [FF_REPORT_CONFIRMED_ROOM_NIGHTS]    VARCHAR (50)   NULL,
    [FF_REPORT_CONFIRMED_REVENUE]        VARCHAR (50)   NULL,
    [FF_REPORT_CONFIRMED_LOS]            VARCHAR (50)   NULL,
    [FF_REPORT_CONFIRMED_ADR]            VARCHAR (50)   NULL,
    [FF_REPORT_CANCELLED_REZ]            VARCHAR (50)   NULL,
    [FF_REPORT_CANCELLED_ROOMS]          VARCHAR (50)   NULL,
    [FF_REPORT_CANCELLED_ROOMS_NIGHTS]   VARCHAR (50)   NULL,
    [FF_REPORT_CANCELLED_REVENUE]        VARCHAR (50)   NULL,
    [FF_REPORT_CANCELLED_LOS]            VARCHAR (50)   NULL,
    [FF_REPORT_CANCELLED_ADR]            VARCHAR (50)   NULL,
    [FF_REPORT_NET_REZ]                  VARCHAR (50)   NULL,
    [FF_REPORT_NET_ROOMS]                VARCHAR (50)   NULL,
    [FF_REPORT_NET_ROOMS_NIGHTS]         VARCHAR (50)   NULL,
    [FF_REPORT_NET_REVENUE]              VARCHAR (50)   NULL,
    [FF_REPORT_NET_LOS]                  VARCHAR (50)   NULL,
    [FF_REPORT_NET_ADR]                  VARCHAR (50)   NULL,
    [DATA_DATE]                          DATETIME       NULL,
    [SEQNO_ADDED_TIME]                   DATETIME       NOT NULL,
    [SEQNO]                              INT            NOT NULL,
    [FTP_FILE_NAME]                      VARCHAR (100)  NOT NULL,
    [DATETIME]                           DATETIME       NULL,
    [HOUR_INTERVAL]                      VARCHAR (50)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]     INT            NULL,
    [TENANT_KEY]                         INT            NULL,
    [ID]                                 INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_SABRE_SYNXIS_1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_SABRE_SYNXIS_1] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA] (
    [PLATFORM]                           VARCHAR (50)    NULL,
    [STATUS]                             VARCHAR (50)    NULL,
    [INVOICE_MAP_KEY]                    VARCHAR (50)    NOT NULL,
    [FIELD_NAME]                         VARCHAR (50)    NULL,
    [SCHEDULER_PROJECT_ID]               VARCHAR (50)    NULL,
    [SCHEDULER_ACL_NAME]                 VARCHAR (50)    NOT NULL,
    [ACD_ID_EXTENSION]                   VARCHAR (50)    NOT NULL,
    [OFFICIAL_WSOL_CLIENT_ID]            VARCHAR (50)    NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]          VARCHAR (50)    NULL,
    [OFFICIAL_ACD_CLIENT_ID]             VARCHAR (50)    NOT NULL,
    [OFFICIAL_ACD_CLIENT_NAME]           VARCHAR (50)    NULL,
    [PRIMARY_PROJECT_MANAGER_ID]         VARCHAR (150)   NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID]  VARCHAR (150)   NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]        VARCHAR (150)   NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]         VARCHAR (150)   NULL,
    [INVOICE_SYSTEM_ID]                  VARCHAR (50)    NOT NULL,
    [HOLIDAY_INVOICE_ID]                 VARCHAR (50)    NOT NULL,
    [HOLIDAY]                            VARCHAR (50)    NOT NULL,
    [FILE_FORMAT_OF_PUSH]                VARCHAR (50)    NULL,
    [AGENT_PREPARATION_INVOICE_ID]       VARCHAR (50)    NULL,
    [NEW_ACL]                            VARCHAR (50)    NULL,
    [CURRENT_CATS]                       VARCHAR (50)    NULL,
    [CATS_ID]                            VARCHAR (50)    NULL,
    [PATS_ID]                            VARCHAR (50)    NULL,
    [SMART_ELIGIBLE]                     VARCHAR (50)    NULL,
    [SMART_TIER_1]                       VARCHAR (50)    NULL,
    [SMART_TIER_2]                       VARCHAR (50)    NULL,
    [SMART_TIER_3]                       VARCHAR (50)    NULL,
    [INTERVAL]                           VARCHAR (50)    NULL,
    [DATE]                               VARCHAR (50)    NULL,
    [HOD_INTERVAL]                       VARCHAR (50)    NULL,
    [AU_DK_LOGGED_IN_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_AVAILABLE_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_TALK_DURATION]                DECIMAL (10, 2) NULL,
    [AU_DK_IB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_OB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_CONVENTIONAL_ACW]             DECIMAL (10, 2) NULL,
    [AU_DK_NR_DURATION]                  DECIMAL (10, 2) NULL,
    [AU_DK_PSEUDO_PRODUCTIVE_DURATION]   DECIMAL (10, 2) NULL,
    [AU_DK_ADJUSTED_NR_DURATION]         DECIMAL (10, 2) NULL,
    [AU_DK_TOTAL_PRODUCTIVE_DURATION]    DECIMAL (10, 2) NULL,
    [AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] DECIMAL (10, 2) NULL,
    [AU_DK_XFER_COUNT]                   INT             NULL,
    [AU_DK_HOLD_COUNT]                   INT             NULL,
    [AU_DK_CONFERENCE_COUNT]             INT             NULL,
    [AU_DK_CONSULT_COUNT]                INT             NULL,
    [AU_DK_PUP_COUNT]                    INT             NULL,
    [AU_DK_OFFERED_COUNT]                INT             NULL,
    [AU_DK_HANDLED_COUNT]                INT             NULL,
    [AU_DK_IB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_OB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_RONA_COUNT]                   INT             NULL,
    [AU_DK_AWR_COUNT]                    INT             NULL,
    [MINIMUM_GUARANTEE]                  DECIMAL (10, 2) NULL,
    [AUTHORIZED_TO_INVOICE]              DECIMAL (10, 2) NULL,
    [WEEK_ENDING_DATE]                   VARCHAR (10)    NULL,
    [PAY_CYCLE_CLOSURE_DATE]             VARCHAR (10)    NULL,
    [FTP_FILE_NAME]                      VARCHAR (100)   NOT NULL,
    [EMAIL]                              VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]     INT             NOT NULL,
    [CAL_DATE]                           DATETIME        NULL,
    [TENANT_KEY]                         INT             NOT NULL,
    [AIR_DAY_TYPE]                       VARCHAR (1)     NOT NULL,
    [AIR_ACW_FONT_COLOR]                 VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]                 DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                 VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]         VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                       VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                     VARCHAR (1)     NULL,
    [READY_FOR_XML]                      VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                       VARCHAR (1)     NULL,
    [INVOICE_ID]                         VARCHAR (50)    NULL,
    [RESOURCE_NAME]                      VARCHAR (100)   NULL,
    [PAY_GROUP]                          INT             NULL,
    [AIRITKDUR]                          DECIMAL (10, 2) NULL,
    [AIRIACDUR]                          DECIMAL (10, 2) NULL,
    [WS_ROW_CREATED_TIME]                DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                DATETIME        NULL,
    [ID]                                 INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA] UNIQUE NONCLUSTERED ([INVOICE_MAP_KEY] ASC, [SCHEDULER_ACL_NAME] ASC, [ACD_ID_EXTENSION] ASC, [HOLIDAY] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [TENANT_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM] (
    [SCHEDULER_ACL]                  VARCHAR (200) NOT NULL,
    [FIELD_MAP_NAME]                 VARCHAR (100) NOT NULL,
    [PROGRAM_ID]                     INT           NOT NULL,
    [COMMON_TEAM_NAME]               VARCHAR (100) NULL,
    [FIELD_MAP_ID]                   VARCHAR (100) NOT NULL,
    [CLIENT_NAME]                    VARCHAR (200) NULL,
    [CLIENT_ID]                      INT           NOT NULL,
    [JOBCOST_ID]                     VARCHAR (50)  NULL,
    [SCHEDULED_TIME]                 INT           NOT NULL,
    [CANCELLED_TIME]                 INT           NOT NULL,
    [CONFIRMED_TIME]                 INT           NOT NULL,
    [SCHEDULED_TIME_7]               INT           NOT NULL,
    [CANCELLED_TIME_7]               INT           NOT NULL,
    [CONFIRMED_TIME_7]               INT           NOT NULL,
    [SCHEDULED_TIME_30]              INT           NOT NULL,
    [CANCELLED_TIME_30]              INT           NOT NULL,
    [CONFIRMED_TIME_30]              INT           NOT NULL,
    [RECORD_FILE_DATE]               DATETIME      NOT NULL,
    [AGENT_ID]                       VARCHAR (50)  NOT NULL,
    [FIRST_NAME]                     VARCHAR (50)  NOT NULL,
    [LAST_NAME]                      VARCHAR (50)  NOT NULL,
    [CORPORATE_NAME]                 VARCHAR (200) NULL,
    [EMAIL_ADDRESS]                  VARCHAR (200) NOT NULL,
    [PASSWORD]                       VARCHAR (50)  NOT NULL,
    [CATS_STATUS]                    VARCHAR (100) NOT NULL,
    [PRIMARY_PHONE]                  VARCHAR (50)  NULL,
    [ALTERNATE_PHONE]                VARCHAR (50)  NULL,
    [MOBILE_PHONE]                   VARCHAR (50)  NULL,
    [STREET_ADDRESS]                 VARCHAR (200) NULL,
    [CITY]                           VARCHAR (50)  NULL,
    [STATE_PROVINCE]                 VARCHAR (50)  NULL,
    [ZIP_POSTAL]                     VARCHAR (50)  NULL,
    [MOBILE_TERMS]                   INT           NULL,
    [APPLICATION_DATE]               DATETIME      NULL,
    [LAST_APP_UPDATE]                DATETIME      NULL,
    [BIRTH_MONTH_DAY]                VARCHAR (50)  NULL,
    [L4_SSN]                         VARCHAR (4)   NULL,
    [AIM_NAME]                       VARCHAR (100) NULL,
    [ID_AGENT]                       VARCHAR (50)  NULL,
    [OS]                             VARCHAR (50)  NULL,
    [DOWNLOAD_SPEED]                 VARCHAR (50)  NULL,
    [UPLOAD_SPEED]                   VARCHAR (50)  NULL,
    [INDIVIDUAL_W9]                  INT           NULL,
    [CORPORATE_W9]                   INT           NULL,
    [MARKETING_CODE]                 INT           NULL,
    [CATS_PROFILE_NAME]              VARCHAR (200) NULL,
    [NICKNAME]                       VARCHAR (100) NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT           NOT NULL,
    [SEQNO_ADDED_TIME]               DATETIME      NOT NULL,
    [SEQNO]                          INT           NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100) NOT NULL,
    [WS_ROW_CREATED_TIME]            DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME      NULL,
    [ID]                             INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM] UNIQUE NONCLUSTERED ([SCHEDULER_ACL] ASC, [FIELD_MAP_NAME] ASC, [PROGRAM_ID] ASC, [FIELD_MAP_ID] ASC, [CLIENT_ID] ASC, [AGENT_ID] ASC, [EMAIL_ADDRESS] ASC, [CATS_STATUS] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_0_Audit] (
    [FF_SCHEDULER_ACL]     VARCHAR (200) NOT NULL,
    [FF_FIELD_MAP_NAME]    VARCHAR (100) NOT NULL,
    [FF_PROGRAM_ID]        VARCHAR (50)  NOT NULL,
    [FF_COMMON_TEAM_NAME]  VARCHAR (100) NULL,
    [FF_FIELD_MAP_ID]      VARCHAR (100) NOT NULL,
    [FF_CLIENT_NAME]       VARCHAR (200) NULL,
    [FF_CLIENT_ID]         VARCHAR (50)  NOT NULL,
    [FF_JOBCOST_ID]        VARCHAR (50)  NULL,
    [FF_SCHEDULED_TIME]    VARCHAR (50)  NULL,
    [FF_CANCELLED_TIME]    VARCHAR (50)  NULL,
    [FF_CONFIRMED_TIME]    VARCHAR (50)  NULL,
    [FF_SCHEDULED_TIME_7]  VARCHAR (50)  NULL,
    [FF_CANCELLED_TIME_7]  VARCHAR (50)  NULL,
    [FF_CONFIRMED_TIME_7]  VARCHAR (50)  NULL,
    [FF_SCHEDULED_TIME_30] VARCHAR (50)  NULL,
    [FF_CANCELLED_TIME_30] VARCHAR (50)  NULL,
    [FF_CONFIRMED_TIME_30] VARCHAR (50)  NULL,
    [FF_RECORD_FILE_DATE]  VARCHAR (50)  NOT NULL,
    [FF_AGENT_ID]          VARCHAR (50)  NULL,
    [FF_FIRST_NAME]        VARCHAR (50)  NULL,
    [FF_LAST_NAME]         VARCHAR (50)  NULL,
    [FF_CORPORATE_NAME]    VARCHAR (200) NULL,
    [FF_EMAIL_ADDRESS]     VARCHAR (200) NOT NULL,
    [FF_PASSWORD]          VARCHAR (50)  NOT NULL,
    [FF_CATS_STATUS]       VARCHAR (100) NULL,
    [FF_PRIMARY_PHONE]     VARCHAR (50)  NULL,
    [FF_ALTERNATE_PHONE]   VARCHAR (50)  NULL,
    [FF_MOBILE_PHONE]      VARCHAR (50)  NULL,
    [FF_STREET_ADDRESS]    VARCHAR (200) NULL,
    [FF_CITY]              VARCHAR (50)  NULL,
    [FF_STATE_PROVINCE]    VARCHAR (50)  NULL,
    [FF_ZIP_POSTAL]        VARCHAR (50)  NULL,
    [FF_MOBILE_TERMS]      VARCHAR (50)  NULL,
    [FF_APPLICATION_DATE]  VARCHAR (50)  NULL,
    [FF_LAST_APP_UPDATE]   VARCHAR (50)  NULL,
    [FF_BIRTH_MONTH_DAY]   VARCHAR (50)  NULL,
    [FF_L4_SSN]            VARCHAR (50)  NULL,
    [FF_AIM_NAME]          VARCHAR (100) NULL,
    [FF_ID_AGENT]          VARCHAR (50)  NULL,
    [FF_OS]                VARCHAR (50)  NULL,
    [FF_DOWNLOAD_SPEED]    VARCHAR (50)  NULL,
    [FF_UPLOAD_SPEED]      VARCHAR (50)  NULL,
    [FF_INDIVIDUAL_W9]     VARCHAR (50)  NULL,
    [FF_CORPORATE_W9]      VARCHAR (50)  NULL,
    [FF_MARKETING_CODE]    VARCHAR (50)  NULL,
    [FF_C_NAME]            VARCHAR (200) NULL,
    [SEQNO_ADDED_TIME]     DATETIME      NOT NULL,
    [SEQNO]                INT           NOT NULL,
    [FTP_FILE_NAME]        VARCHAR (100) NOT NULL,
    [ID]                   INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_0_Audit] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_1] (
    [FF_SCHEDULER_ACL]               VARCHAR (200) NOT NULL,
    [FF_FIELD_MAP_NAME]              VARCHAR (100) NOT NULL,
    [FF_PROGRAM_ID]                  VARCHAR (50)  NOT NULL,
    [FF_COMMON_TEAM_NAME]            VARCHAR (100) NULL,
    [FF_FIELD_MAP_ID]                VARCHAR (100) NOT NULL,
    [FF_CLIENT_NAME]                 VARCHAR (200) NULL,
    [FF_CLIENT_ID]                   VARCHAR (50)  NOT NULL,
    [FF_JOBCOST_ID]                  VARCHAR (50)  NULL,
    [FF_SCHEDULED_TIME]              VARCHAR (50)  NULL,
    [FF_CANCELLED_TIME]              VARCHAR (50)  NULL,
    [FF_CONFIRMED_TIME]              VARCHAR (50)  NULL,
    [FF_SCHEDULED_TIME_7]            VARCHAR (50)  NULL,
    [FF_CANCELLED_TIME_7]            VARCHAR (50)  NULL,
    [FF_CONFIRMED_TIME_7]            VARCHAR (50)  NULL,
    [FF_SCHEDULED_TIME_30]           VARCHAR (50)  NULL,
    [FF_CANCELLED_TIME_30]           VARCHAR (50)  NULL,
    [FF_CONFIRMED_TIME_30]           VARCHAR (50)  NULL,
    [FF_RECORD_FILE_DATE]            VARCHAR (50)  NOT NULL,
    [FF_AGENT_ID]                    VARCHAR (50)  NULL,
    [FF_FIRST_NAME]                  VARCHAR (50)  NULL,
    [FF_LAST_NAME]                   VARCHAR (50)  NULL,
    [FF_CORPORATE_NAME]              VARCHAR (200) NULL,
    [FF_EMAIL_ADDRESS]               VARCHAR (200) NOT NULL,
    [FF_PASSWORD]                    VARCHAR (50)  NOT NULL,
    [FF_CATS_STATUS]                 VARCHAR (100) NULL,
    [FF_PRIMARY_PHONE]               VARCHAR (50)  NULL,
    [FF_ALTERNATE_PHONE]             VARCHAR (50)  NULL,
    [FF_MOBILE_PHONE]                VARCHAR (50)  NULL,
    [FF_STREET_ADDRESS]              VARCHAR (200) NULL,
    [FF_CITY]                        VARCHAR (50)  NULL,
    [FF_STATE_PROVINCE]              VARCHAR (50)  NULL,
    [FF_ZIP_POSTAL]                  VARCHAR (50)  NULL,
    [FF_MOBILE_TERMS]                VARCHAR (50)  NULL,
    [FF_APPLICATION_DATE]            VARCHAR (50)  NULL,
    [FF_LAST_APP_UPDATE]             VARCHAR (50)  NULL,
    [FF_BIRTH_MONTH_DAY]             VARCHAR (50)  NULL,
    [FF_L4_SSN]                      VARCHAR (50)  NULL,
    [FF_AIM_NAME]                    VARCHAR (100) NULL,
    [FF_ID_AGENT]                    VARCHAR (50)  NULL,
    [FF_OS]                          VARCHAR (50)  NULL,
    [FF_DOWNLOAD_SPEED]              VARCHAR (50)  NULL,
    [FF_UPLOAD_SPEED]                VARCHAR (50)  NULL,
    [FF_INDIVIDUAL_W9]               VARCHAR (50)  NULL,
    [FF_CORPORATE_W9]                VARCHAR (50)  NULL,
    [FF_MARKETING_CODE]              VARCHAR (50)  NULL,
    [FF_C_NAME]                      VARCHAR (200) NULL,
    [DATETIME]                       DATETIME      NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT           NULL,
    [APPLICATION_DATE]               DATETIME      NULL,
    [NICKNAME]                       VARCHAR (100) NULL,
    [SEQNO_ADDED_TIME]               DATETIME      NOT NULL,
    [SEQNO]                          INT           NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100) NOT NULL,
    [ID]                             INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_1] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_BAD]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_BAD] (
    [BAD_IMPORTS_NO]                 TINYINT       NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]          VARCHAR (3)   NULL,
    [WS_ROW_CREATED_TIME]            DATETIME      NOT NULL,
    [FF_SCHEDULER_ACL]               VARCHAR (200) NOT NULL,
    [FF_FIELD_MAP_NAME]              VARCHAR (100) NOT NULL,
    [FF_PROGRAM_ID]                  VARCHAR (50)  NOT NULL,
    [FF_COMMON_TEAM_NAME]            VARCHAR (100) NULL,
    [FF_FIELD_MAP_ID]                VARCHAR (100) NOT NULL,
    [FF_CLIENT_NAME]                 VARCHAR (200) NULL,
    [FF_CLIENT_ID]                   VARCHAR (50)  NOT NULL,
    [FF_JOBCOST_ID]                  VARCHAR (50)  NULL,
    [FF_SCHEDULED_TIME]              VARCHAR (50)  NULL,
    [FF_CANCELLED_TIME]              VARCHAR (50)  NULL,
    [FF_CONFIRMED_TIME]              VARCHAR (50)  NULL,
    [FF_SCHEDULED_TIME_7]            VARCHAR (50)  NULL,
    [FF_CANCELLED_TIME_7]            VARCHAR (50)  NULL,
    [FF_CONFIRMED_TIME_7]            VARCHAR (50)  NULL,
    [FF_SCHEDULED_TIME_30]           VARCHAR (50)  NULL,
    [FF_CANCELLED_TIME_30]           VARCHAR (50)  NULL,
    [FF_CONFIRMED_TIME_30]           VARCHAR (50)  NULL,
    [FF_RECORD_FILE_DATE]            VARCHAR (50)  NOT NULL,
    [FF_AGENT_ID]                    VARCHAR (50)  NULL,
    [FF_FIRST_NAME]                  VARCHAR (50)  NULL,
    [FF_LAST_NAME]                   VARCHAR (50)  NULL,
    [FF_CORPORATE_NAME]              VARCHAR (200) NULL,
    [FF_EMAIL_ADDRESS]               VARCHAR (200) NOT NULL,
    [FF_PASSWORD]                    VARCHAR (50)  NOT NULL,
    [FF_CATS_STATUS]                 VARCHAR (100) NULL,
    [FF_PRIMARY_PHONE]               VARCHAR (50)  NULL,
    [FF_ALTERNATE_PHONE]             VARCHAR (50)  NULL,
    [FF_MOBILE_PHONE]                VARCHAR (50)  NULL,
    [FF_STREET_ADDRESS]              VARCHAR (200) NULL,
    [FF_CITY]                        VARCHAR (50)  NULL,
    [FF_STATE_PROVINCE]              VARCHAR (50)  NULL,
    [FF_ZIP_POSTAL]                  VARCHAR (50)  NULL,
    [FF_MOBILE_TERMS]                VARCHAR (50)  NULL,
    [FF_APPLICATION_DATE]            VARCHAR (50)  NULL,
    [FF_LAST_APP_UPDATE]             VARCHAR (50)  NULL,
    [FF_BIRTH_MONTH_DAY]             VARCHAR (50)  NULL,
    [FF_L4_SSN]                      VARCHAR (50)  NULL,
    [FF_AIM_NAME]                    VARCHAR (100) NULL,
    [FF_ID_AGENT]                    VARCHAR (50)  NULL,
    [FF_OS]                          VARCHAR (50)  NULL,
    [FF_DOWNLOAD_SPEED]              VARCHAR (50)  NULL,
    [FF_UPLOAD_SPEED]                VARCHAR (50)  NULL,
    [FF_INDIVIDUAL_W9]               VARCHAR (50)  NULL,
    [FF_CORPORATE_W9]                VARCHAR (50)  NULL,
    [FF_MARKETING_CODE]              VARCHAR (50)  NULL,
    [FF_C_NAME]                      VARCHAR (200) NULL,
    [DATETIME]                       DATETIME      NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT           NULL,
    [APPLICATION_DATE]               DATETIME      NULL,
    [NICKNAME]                       VARCHAR (100) NULL,
    [SEQNO_ADDED_TIME]               DATETIME      NOT NULL,
    [SEQNO]                          INT           NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100) NOT NULL,
    [ID]                             INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_BAD] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_BAD] UNIQUE NONCLUSTERED ([BAD_IMPORTS_NO] ASC, [WS_ROW_CREATED_TIME] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_STUBHUB_CHAT_INVOICING]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_STUBHUB_CHAT_INVOICING] (
    [FF_LOGIN]                       VARCHAR (50)  NULL,
    [FF_STATUS]                      VARCHAR (50)  NULL,
    [FF_START_TIME]                  VARCHAR (50)  NULL,
    [FF_END_TIME]                    VARCHAR (50)  NULL,
    [FF_TOTAL_TIME_SPENT]            VARCHAR (50)  NULL,
    [FF_TIME_SPENT_SECONDS]          VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]               DATETIME      NOT NULL,
    [SEQNO]                          INT           NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100) NOT NULL,
    [DATETIME]                       DATETIME      NULL,
    [HOUR_INTERVAL]                  VARCHAR (50)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT           NULL,
    [TENANT_KEY]                     INT           NULL,
    [WS_ROW_CREATED_TIME]            DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME      NULL,
    [ID]                             INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_STUBHUB_CHAT_INVOICING] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_STUBHUB_CHAT_INVOICING_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_STUBHUB_CHAT_INVOICING_0_Audit] (
    [FF_LOGIN]              VARCHAR (50)  NULL,
    [FF_STATUS]             VARCHAR (50)  NULL,
    [FF_START_TIME]         VARCHAR (50)  NULL,
    [FF_END_TIME]           VARCHAR (50)  NULL,
    [FF_TOTAL_TIME_SPENT]   VARCHAR (50)  NULL,
    [FF_TIME_SPENT_SECONDS] VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]      DATETIME      NOT NULL,
    [SEQNO]                 INT           NOT NULL,
    [FTP_FILE_NAME]         VARCHAR (100) NOT NULL,
    [ID]                    INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_WSOL_TB_IMPORTS_STUBHUB_CHAT_INVOICING_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_STUBHUB_CHAT_INVOICING_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_STUBHUB_CHAT_INVOICING_1] (
    [F1]                  VARCHAR (50)    NULL,
    [F2]                  VARCHAR (50)    NULL,
    [F3]                  VARCHAR (50)    NULL,
    [F4]                  VARCHAR (50)    NULL,
    [F5]                  VARCHAR (50)    NULL,
    [F6]                  VARCHAR (50)    NULL,
    [EVENT_START_TIME]    DATETIME        NULL,
    [EVENT_DURATION_SECS] DECIMAL (10, 2) NULL,
    [SEQNO_ADDED_TIME]    DATETIME        NOT NULL,
    [SEQNO]               INT             NOT NULL,
    [FTP_FILE_NAME]       VARCHAR (100)   NOT NULL,
    [ID]                  INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_STUBHUB_CHAT_INVOICING_1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_STUBHUB_CHAT_INVOICING_1] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_STUBHUB_CHAT_PERFORMANCE]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_STUBHUB_CHAT_PERFORMANCE] (
    [FF_DATE]                        VARCHAR (300) NULL,
    [FF_LOGIN]                       VARCHAR (50)  NULL,
    [FF_DEPARTMENT]                  VARCHAR (50)  NULL,
    [FF_NO_CHATS_TAKEN]              VARCHAR (50)  NULL,
    [FF_AVG_SESSION_TIME]            VARCHAR (50)  NULL,
    [FF_CHAT_AVG_HANDLE_TIME]        VARCHAR (50)  NULL,
    [FF_AVG_RESPONSE_TIME]           VARCHAR (50)  NULL,
    [FF_AVG_EXCHANGES_PER_CHAT]      VARCHAR (50)  NULL,
    [FF_TOTAL_WORK_TIME]             VARCHAR (50)  NULL,
    [FF_CONCURRENCY_RATE]            VARCHAR (50)  NULL,
    [FF_CPH_PRIOR_9_1]               VARCHAR (50)  NULL,
    [FF_WORKING_TIME]                VARCHAR (50)  NULL,
    [FF_CHAT_AVG_WRAP_TIME]          VARCHAR (50)  NULL,
    [FF_PDA_CHAT_TIME]               VARCHAR (50)  NULL,
    [FF_CPH_9_1_FORWARD]             VARCHAR (50)  NULL,
    [FF_TOTAL_HANDLE_TIME]           VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]               DATETIME      NOT NULL,
    [SEQNO]                          INT           NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100) NOT NULL,
    [DATETIME]                       DATETIME      NULL,
    [HOUR_INTERVAL]                  VARCHAR (50)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT           NULL,
    [TENANT_KEY]                     INT           NULL,
    [WS_ROW_CREATED_TIME]            DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME      NULL,
    [ID]                             INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_STUBHUB_CHAT_PERFORMANCE] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_STUBHUB_CHAT_PERFORMANCE_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_STUBHUB_CHAT_PERFORMANCE_0_Audit] (
    [FF_DATE]                   VARCHAR (300) NULL,
    [FF_LOGIN]                  VARCHAR (50)  NULL,
    [FF_DEPARTMENT]             VARCHAR (50)  NULL,
    [FF_NO_CHATS_TAKEN]         VARCHAR (50)  NULL,
    [FF_AVG_SESSION_TIME]       VARCHAR (50)  NULL,
    [FF_CHAT_AVG_HANDLE_TIME]   VARCHAR (50)  NULL,
    [FF_AVG_RESPONSE_TIME]      VARCHAR (50)  NULL,
    [FF_AVG_EXCHANGES_PER_CHAT] VARCHAR (50)  NULL,
    [FF_TOTAL_WORK_TIME]        VARCHAR (50)  NULL,
    [FF_CONCURRENCY_RATE]       VARCHAR (50)  NULL,
    [FF_CPH_PRIOR_9_1]          VARCHAR (50)  NULL,
    [FF_WORKING_TIME]           VARCHAR (50)  NULL,
    [FF_CHAT_AVG_WRAP_TIME]     VARCHAR (50)  NULL,
    [FF_PDA_CHAT_TIME]          VARCHAR (50)  NULL,
    [FF_CPH_9_1_FORWARD]        VARCHAR (50)  NULL,
    [FF_TOTAL_HANDLE_TIME]      VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]          DATETIME      NOT NULL,
    [SEQNO]                     INT           NOT NULL,
    [FTP_FILE_NAME]             VARCHAR (100) NOT NULL,
    [ID]                        INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_STUBHUB_CHAT_PERFORMANCE_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_STUBHUB_CHAT_PERFORMANCE_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_STUBHUB_CHAT_PERFORMANCE_1] (
    [FF_DATE]                        VARCHAR (300) NULL,
    [FF_LOGIN]                       VARCHAR (50)  NULL,
    [FF_DEPARTMENT]                  VARCHAR (50)  NULL,
    [FF_NO_CHATS_TAKEN]              VARCHAR (50)  NULL,
    [FF_AVG_SESSION_TIME]            VARCHAR (50)  NULL,
    [FF_CHAT_AVG_HANDLE_TIME]        VARCHAR (50)  NULL,
    [FF_AVG_RESPONSE_TIME]           VARCHAR (50)  NULL,
    [FF_AVG_EXCHANGES_PER_CHAT]      VARCHAR (50)  NULL,
    [FF_TOTAL_WORK_TIME]             VARCHAR (50)  NULL,
    [FF_CONCURRENCY_RATE]            VARCHAR (50)  NULL,
    [FF_CPH_PRIOR_9_1]               VARCHAR (50)  NULL,
    [FF_WORKING_TIME]                VARCHAR (50)  NULL,
    [FF_CHAT_AVG_WRAP_TIME]          VARCHAR (50)  NULL,
    [FF_PDA_CHAT_TIME]               VARCHAR (50)  NULL,
    [FF_CPH_9_1_FORWARD]             VARCHAR (50)  NULL,
    [FF_TOTAL_HANDLE_TIME]           VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]               DATETIME      NOT NULL,
    [SEQNO]                          INT           NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100) NOT NULL,
    [DATETIME]                       DATETIME      NULL,
    [HOUR_INTERVAL]                  VARCHAR (50)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT           NULL,
    [TENANT_KEY]                     INT           NULL,
    [ID]                             INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_STUBHUB_CHAT_PERFORMANCE_1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_STUBHUB_CHAT_PERFORMANCE_1] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_STUBHUB_NPS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_STUBHUB_NPS] (
    [FF_DATE]                        VARCHAR (300) NULL,
    [FF_LOGIN]                       VARCHAR (50)  NULL,
    [FF_ASAT_LAST_TOUCH]             VARCHAR (50)  NULL,
    [FF_NO_OF_SURVEYS_LAST_TOUCH]    VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]               DATETIME      NOT NULL,
    [SEQNO]                          INT           NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100) NOT NULL,
    [DATETIME]                       DATETIME      NULL,
    [HOUR_INTERVAL]                  VARCHAR (50)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT           NULL,
    [TENANT_KEY]                     INT           NULL,
    [WS_ROW_CREATED_TIME]            DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME      NULL,
    [ID]                             INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_STUBHUB_NPS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_STUBHUB_NPS_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_STUBHUB_NPS_0_Audit] (
    [FF_DATE]                     VARCHAR (300) NULL,
    [FF_LOGIN]                    VARCHAR (50)  NULL,
    [FF_ASAT_LAST_TOUCH]          VARCHAR (50)  NULL,
    [FF_NO_OF_SURVEYS_LAST_TOUCH] VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]            DATETIME      NOT NULL,
    [SEQNO]                       INT           NOT NULL,
    [FTP_FILE_NAME]               VARCHAR (100) NOT NULL,
    [ID]                          INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_STUBHUB_NPS_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_STUBHUB_NPS_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_STUBHUB_NPS_1] (
    [FF_DATE]                        VARCHAR (300) NULL,
    [FF_LOGIN]                       VARCHAR (50)  NULL,
    [FF_ASAT_LAST_TOUCH]             VARCHAR (50)  NULL,
    [FF_NO_OF_SURVEYS_LAST_TOUCH]    VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]               DATETIME      NOT NULL,
    [SEQNO]                          INT           NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100) NOT NULL,
    [DATETIME]                       DATETIME      NULL,
    [HOUR_INTERVAL]                  VARCHAR (50)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT           NULL,
    [TENANT_KEY]                     INT           NULL,
    [ID]                             INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_STUBHUB_NPS_1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_STUBHUB_NPS_1] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_STUBHUB_QA]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_STUBHUB_QA] (
    [FF_EVALUATED_NAME]              VARCHAR (50)  NULL,
    [FF_EVALUATION_CREATION_DATE]    VARCHAR (50)  NULL,
    [FF_SCORE]                       VARCHAR (50)  NULL,
    [FF_EVALUATOR_NAME]              VARCHAR (50)  NULL,
    [FF_FORM_NAME]                   VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]               DATETIME      NOT NULL,
    [SEQNO]                          INT           NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100) NOT NULL,
    [DATETIME]                       DATETIME      NULL,
    [HOUR_INTERVAL]                  VARCHAR (50)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT           NULL,
    [TENANT_KEY]                     INT           NULL,
    [WS_ROW_CREATED_TIME]            DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME      NULL,
    [ID]                             INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_STUBHUB_QA] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_STUBHUB_QA_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_STUBHUB_QA_0_Audit] (
    [FF_EVALUATED_NAME]           VARCHAR (50)  NULL,
    [FF_EVALUATION_CREATION_DATE] VARCHAR (50)  NULL,
    [FF_SCORE]                    VARCHAR (50)  NULL,
    [FF_EVALUATOR_NAME]           VARCHAR (50)  NULL,
    [FF_FORM_NAME]                VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]            DATETIME      NOT NULL,
    [SEQNO]                       INT           NOT NULL,
    [FTP_FILE_NAME]               VARCHAR (100) NOT NULL,
    [ID]                          INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_STUBHUB_QA_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_STUBHUB_QA_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_STUBHUB_QA_1] (
    [FF_EVALUATED_NAME]              VARCHAR (50)  NULL,
    [FF_EVALUATION_CREATION_DATE]    VARCHAR (50)  NULL,
    [FF_SCORE]                       VARCHAR (50)  NULL,
    [FF_EVALUATOR_NAME]              VARCHAR (50)  NULL,
    [FF_FORM_NAME]                   VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]               DATETIME      NOT NULL,
    [SEQNO]                          INT           NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100) NOT NULL,
    [DATETIME]                       DATETIME      NULL,
    [HOUR_INTERVAL]                  VARCHAR (50)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT           NULL,
    [TENANT_KEY]                     INT           NULL,
    [ID]                             INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_STUBHUB_QA_1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_STUBHUB_QA_1] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_STUBHUB_RAW_DATA_II]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_STUBHUB_RAW_DATA_II] (
    [FF_AGENT_NAME]                    VARCHAR (50)  NULL,
    [FF_DAY]                           VARCHAR (50)  NULL,
    [FF_INTERACTION]                   VARCHAR (50)  NULL,
    [FF_SENT]                          VARCHAR (50)  NULL,
    [FF_ANSWERED]                      VARCHAR (50)  NULL,
    [FF_HANDLE_TIME]                   VARCHAR (50)  NULL,
    [FF_AVG_HANDLE_TIME]               VARCHAR (50)  NULL,
    [FF_TOTAL_TALK_TIME]               VARCHAR (50)  NULL,
    [FF_AVG_TALK_TIME]                 VARCHAR (50)  NULL,
    [FF_TOTAL_HOLD_TIME]               VARCHAR (50)  NULL,
    [FF_AVG_HOLD_TIME]                 VARCHAR (50)  NULL,
    [FF_TOTAL_WRAP_TIME]               VARCHAR (50)  NULL,
    [FF_AVG_WRAP_TIME]                 VARCHAR (50)  NULL,
    [FF_TRANSFER_INITIATED_COUNT]      VARCHAR (50)  NULL,
    [FF_TRANSFER_INITIATED_PERCENTAGE] VARCHAR (50)  NULL,
    [FF_CONSULT_RECEIVED_ACCEPTANCE]   VARCHAR (50)  NULL,
    [FF_CONSULT_RECEIVED_TIME]         VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]                 DATETIME      NOT NULL,
    [SEQNO]                            INT           NOT NULL,
    [FTP_FILE_NAME]                    VARCHAR (100) NOT NULL,
    [DATETIME]                         DATETIME      NULL,
    [HOUR_INTERVAL]                    VARCHAR (50)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY]   INT           NULL,
    [TENANT_KEY]                       INT           NULL,
    [WS_ROW_CREATED_TIME]              DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]              DATETIME      NULL,
    [ID]                               INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_STUBHUB_RAW_DATA_II] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_STUBHUB_RAW_DATA_II_0_AUDIT]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_STUBHUB_RAW_DATA_II_0_AUDIT] (
    [FF_AGENT_NAME]                    VARCHAR (50)  NULL,
    [FF_DAY]                           VARCHAR (50)  NULL,
    [FF_INTERACTION]                   VARCHAR (50)  NULL,
    [FF_SENT]                          VARCHAR (50)  NULL,
    [FF_ANSWERED]                      VARCHAR (50)  NULL,
    [FF_HANDLE_TIME]                   VARCHAR (50)  NULL,
    [FF_AVG_HANDLE_TIME]               VARCHAR (50)  NULL,
    [FF_TOTAL_TALK_TIME]               VARCHAR (50)  NULL,
    [FF_AVG_TALK_TIME]                 VARCHAR (50)  NULL,
    [FF_TOTAL_HOLD_TIME]               VARCHAR (50)  NULL,
    [FF_AVG_HOLD_TIME]                 VARCHAR (50)  NULL,
    [FF_TOTAL_WRAP_TIME]               VARCHAR (50)  NULL,
    [FF_AVG_WRAP_TIME]                 VARCHAR (50)  NULL,
    [FF_TRANSFER_INITIATED_COUNT]      VARCHAR (50)  NULL,
    [FF_TRANSFER_INITIATED_PERCENTAGE] VARCHAR (50)  NULL,
    [FF_CONSULT_RECEIVED_ACCEPTANCE]   VARCHAR (50)  NULL,
    [FF_CONSULT_RECEIVED_TIME]         VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]                 DATETIME      NOT NULL,
    [SEQNO]                            INT           NOT NULL,
    [FTP_FILE_NAME]                    VARCHAR (100) NOT NULL,
    [ID]                               INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_STUBHUB_RAW_DATA_II_0_AUDIT] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_STUBHUB_RAW_DATA_II_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_STUBHUB_RAW_DATA_II_1] (
    [FF_AGENT_NAME]                    VARCHAR (50)  NULL,
    [FF_DAY]                           VARCHAR (50)  NULL,
    [FF_INTERACTION]                   VARCHAR (50)  NULL,
    [FF_SENT]                          VARCHAR (50)  NULL,
    [FF_ANSWERED]                      VARCHAR (50)  NULL,
    [FF_HANDLE_TIME]                   VARCHAR (50)  NULL,
    [FF_AVG_HANDLE_TIME]               VARCHAR (50)  NULL,
    [FF_TOTAL_TALK_TIME]               VARCHAR (50)  NULL,
    [FF_AVG_TALK_TIME]                 VARCHAR (50)  NULL,
    [FF_TOTAL_HOLD_TIME]               VARCHAR (50)  NULL,
    [FF_AVG_HOLD_TIME]                 VARCHAR (50)  NULL,
    [FF_TOTAL_WRAP_TIME]               VARCHAR (50)  NULL,
    [FF_AVG_WRAP_TIME]                 VARCHAR (50)  NULL,
    [FF_TRANSFER_INITIATED_COUNT]      VARCHAR (50)  NULL,
    [FF_TRANSFER_INITIATED_PERCENTAGE] VARCHAR (50)  NULL,
    [FF_CONSULT_RECEIVED_ACCEPTANCE]   VARCHAR (50)  NULL,
    [FF_CONSULT_RECEIVED_TIME]         VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]                 DATETIME      NOT NULL,
    [SEQNO]                            INT           NOT NULL,
    [FTP_FILE_NAME]                    VARCHAR (100) NOT NULL,
    [DATETIME]                         DATETIME      NULL,
    [HOUR_INTERVAL]                    VARCHAR (50)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY]   INT           NULL,
    [TENANT_KEY]                       INT           NULL,
    [ID]                               INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_STUBHUB_RAW_DATA_II_1] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_STUBHUB_RAW_DATA_II_1] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_VYNE_PATS_ACCESS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_VYNE_PATS_ACCESS] (
    [FF_OFFICIAL_ACL_FIRST_NAME]     VARCHAR (50)  NULL,
    [FF_OFFICIAL_ACL_LAST_NAME]      VARCHAR (50)  NULL,
    [FF_OFFICIAL_CORPORATE_NAME]     VARCHAR (200) NULL,
    [FF_AGENT_ID]                    VARCHAR (50)  NULL,
    [FF_IDENTIFICATION_NUMBER]       VARCHAR (50)  NOT NULL,
    [FF_OVERALL_CATS_STATUS_CODE]    VARCHAR (100) NULL,
    [FF_PRIMARY_PHONE]               VARCHAR (500) NULL,
    [FF_MOBILE_PHONE]                VARCHAR (50)  NULL,
    [FF_MOBILE_TERMS]                VARCHAR (50)  NULL,
    [FF_USERNAME]                    VARCHAR (100) NULL,
    [FF_PASSWORD]                    VARCHAR (50)  NULL,
    [FF_PROGRAM]                     VARCHAR (50)  NOT NULL,
    [FF_GROUP]                       VARCHAR (50)  NULL,
    [FF_PATS_ROSTER_NUMBER]          VARCHAR (50)  NOT NULL,
    [FF_TYPE_OF_PREP]                VARCHAR (50)  NULL,
    [FF_TRAINER]                     VARCHAR (50)  NULL,
    [FF_START_DATE]                  VARCHAR (50)  NULL,
    [FF_END_DATE]                    VARCHAR (50)  NULL,
    [FF_COMPLETION_STATUS]           VARCHAR (50)  NULL,
    [FF_REASON_CODE]                 VARCHAR (50)  NULL,
    [FF_DOB]                         VARCHAR (50)  NULL,
    [FF_SSN]                         VARCHAR (50)  NULL,
    [FF_PATS_ROSTER_STATUS]          VARCHAR (50)  NULL,
    [FF_STREET_ADDRESS]              VARCHAR (500) NULL,
    [FF_CITY]                        VARCHAR (50)  NULL,
    [FF_STATE_PROVINCE]              VARCHAR (50)  NULL,
    [FF_ZIP]                         VARCHAR (50)  NULL,
    [FF_COUNTRY]                     VARCHAR (50)  NULL,
    [FF_C_NAME]                      VARCHAR (200) NULL,
    [SEQNO_ADDED_TIME]               DATETIME      NOT NULL,
    [SEQNO]                          INT           NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100) NOT NULL,
    [DATETIME]                       DATETIME      NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT           NULL,
    [CAL_DATE]                       DATETIME      NULL,
    [TENANT_KEY]                     INT           NULL,
    [AGENT_FULL_NAME]                VARCHAR (100) NULL,
    [CORPORATE_NAME]                 VARCHAR (200) NULL,
    [AGENT_ID]                       VARCHAR (50)  NULL,
    [ID_NUMBER]                      VARCHAR (50)  NULL,
    [CATS_STATUS_CODE]               VARCHAR (100) NULL,
    [PRIMARY_PHONE]                  VARCHAR (500) NULL,
    [MOBILE_PHONE]                   VARCHAR (50)  NULL,
    [MOBILE_TERMS]                   VARCHAR (50)  NULL,
    [USERNAME]                       VARCHAR (100) NULL,
    [PASSWORD]                       VARCHAR (50)  NULL,
    [PROGRAM_NAME]                   VARCHAR (50)  NULL,
    [GROUP]                          VARCHAR (50)  NULL,
    [PATS_ROSTER_NUMBER]             VARCHAR (50)  NULL,
    [TYPE_OF_PREP]                   VARCHAR (50)  NULL,
    [TRAINER_NAME]                   VARCHAR (50)  NULL,
    [START_DATE]                     DATETIME      NULL,
    [END_DATE]                       DATETIME      NULL,
    [COMPLETION_STATUS]              VARCHAR (50)  NULL,
    [REASON_CODE]                    VARCHAR (50)  NULL,
    [DOB]                            VARCHAR (50)  NULL,
    [LAST_4_SSN]                     VARCHAR (50)  NULL,
    [PATS_ROSTER_STATUS]             VARCHAR (50)  NULL,
    [STREET_ADDRESS]                 VARCHAR (500) NULL,
    [CITY]                           VARCHAR (50)  NULL,
    [STATE_PROVINCE]                 VARCHAR (50)  NULL,
    [ZIP]                            VARCHAR (50)  NULL,
    [COUNTRY]                        VARCHAR (50)  NULL,
    [CATS_PROFILE_NAME]              VARCHAR (200) NULL,
    [NICKNAME]                       VARCHAR (100) NULL,
    [WS_ROW_CREATED_TIME]            DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME      NULL,
    [ID]                             INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_VYNE_PATS_ACCESS] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_VYNE_PATS_ACCESS] UNIQUE NONCLUSTERED ([FF_IDENTIFICATION_NUMBER] ASC, [FF_PROGRAM] ASC, [FF_PATS_ROSTER_NUMBER] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_0_Audit] (
    [FF_OFFICIAL_ACL_FIRST_NAME]  VARCHAR (50)  NULL,
    [FF_OFFICIAL_ACL_LAST_NAME]   VARCHAR (50)  NULL,
    [FF_OFFICIAL_CORPORATE_NAME]  VARCHAR (200) NULL,
    [FF_AGENT_ID]                 VARCHAR (50)  NULL,
    [FF_IDENTIFICATION_NUMBER]    VARCHAR (50)  NOT NULL,
    [FF_OVERALL_CATS_STATUS_CODE] VARCHAR (100) NULL,
    [FF_PRIMARY_PHONE]            VARCHAR (500) NULL,
    [FF_MOBILE_PHONE]             VARCHAR (50)  NULL,
    [FF_MOBILE_TERMS]             VARCHAR (50)  NULL,
    [FF_USERNAME]                 VARCHAR (100) NULL,
    [FF_PASSWORD]                 VARCHAR (50)  NULL,
    [FF_PROGRAM]                  VARCHAR (50)  NULL,
    [FF_GROUP]                    VARCHAR (50)  NULL,
    [FF_PATS_ROSTER_NUMBER]       VARCHAR (50)  NULL,
    [FF_TYPE_OF_PREP]             VARCHAR (50)  NULL,
    [FF_TRAINER]                  VARCHAR (50)  NULL,
    [FF_START_DATE]               VARCHAR (50)  NULL,
    [FF_END_DATE]                 VARCHAR (50)  NULL,
    [FF_COMPLETION_STATUS]        VARCHAR (50)  NULL,
    [FF_REASON_CODE]              VARCHAR (50)  NULL,
    [FF_DOB]                      VARCHAR (50)  NULL,
    [FF_SSN]                      VARCHAR (50)  NULL,
    [FF_PATS_ROSTER_STATUS]       VARCHAR (50)  NULL,
    [FF_STREET_ADDRESS]           VARCHAR (500) NULL,
    [FF_CITY]                     VARCHAR (50)  NULL,
    [FF_STATE_PROVINCE]           VARCHAR (50)  NULL,
    [FF_ZIP]                      VARCHAR (50)  NULL,
    [FF_COUNTRY]                  VARCHAR (50)  NULL,
    [FF_C_NAME]                   VARCHAR (200) NULL,
    [SEQNO_ADDED_TIME]            DATETIME      NOT NULL,
    [SEQNO]                       INT           NOT NULL,
    [FTP_FILE_NAME]               VARCHAR (100) NOT NULL,
    [ID]                          INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_0_Audit] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_1] (
    [FF_OFFICIAL_ACL_FIRST_NAME]     VARCHAR (50)  NULL,
    [FF_OFFICIAL_ACL_LAST_NAME]      VARCHAR (50)  NULL,
    [FF_OFFICIAL_CORPORATE_NAME]     VARCHAR (200) NULL,
    [FF_AGENT_ID]                    VARCHAR (50)  NULL,
    [FF_IDENTIFICATION_NUMBER]       VARCHAR (50)  NOT NULL,
    [FF_OVERALL_CATS_STATUS_CODE]    VARCHAR (100) NULL,
    [FF_PRIMARY_PHONE]               VARCHAR (500) NULL,
    [FF_MOBILE_PHONE]                VARCHAR (50)  NULL,
    [FF_MOBILE_TERMS]                VARCHAR (50)  NULL,
    [FF_USERNAME]                    VARCHAR (100) NULL,
    [FF_PASSWORD]                    VARCHAR (50)  NULL,
    [FF_PROGRAM]                     VARCHAR (50)  NULL,
    [FF_GROUP]                       VARCHAR (50)  NULL,
    [FF_PATS_ROSTER_NUMBER]          VARCHAR (50)  NULL,
    [FF_TYPE_OF_PREP]                VARCHAR (50)  NULL,
    [FF_TRAINER]                     VARCHAR (50)  NULL,
    [FF_START_DATE]                  VARCHAR (50)  NULL,
    [FF_END_DATE]                    VARCHAR (50)  NULL,
    [FF_COMPLETION_STATUS]           VARCHAR (50)  NULL,
    [FF_REASON_CODE]                 VARCHAR (50)  NULL,
    [FF_DOB]                         VARCHAR (50)  NULL,
    [FF_SSN]                         VARCHAR (50)  NULL,
    [FF_PATS_ROSTER_STATUS]          VARCHAR (50)  NULL,
    [FF_STREET_ADDRESS]              VARCHAR (500) NULL,
    [FF_CITY]                        VARCHAR (50)  NULL,
    [FF_STATE_PROVINCE]              VARCHAR (50)  NULL,
    [FF_ZIP]                         VARCHAR (50)  NULL,
    [FF_COUNTRY]                     VARCHAR (50)  NULL,
    [FF_C_NAME]                      VARCHAR (200) NULL,
    [SEQNO_ADDED_TIME]               DATETIME      NOT NULL,
    [SEQNO]                          INT           NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100) NOT NULL,
    [DATETIME]                       DATETIME      NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT           NULL,
    [CAL_DATE]                       DATETIME      NULL,
    [TENANT_KEY]                     INT           NULL,
    [AGENT_FULL_NAME]                VARCHAR (100) NULL,
    [CORPORATE_NAME]                 VARCHAR (200) NULL,
    [AGENT_ID]                       VARCHAR (50)  NULL,
    [ID_NUMBER]                      VARCHAR (50)  NULL,
    [CATS_STATUS_CODE]               VARCHAR (100) NULL,
    [PRIMARY_PHONE]                  VARCHAR (500) NULL,
    [MOBILE_PHONE]                   VARCHAR (50)  NULL,
    [MOBILE_TERMS]                   VARCHAR (50)  NULL,
    [USERNAME]                       VARCHAR (100) NULL,
    [PASSWORD]                       VARCHAR (50)  NULL,
    [PROGRAM_NAME]                   VARCHAR (50)  NULL,
    [GROUP]                          VARCHAR (50)  NULL,
    [PATS_ROSTER_NUMBER]             VARCHAR (50)  NULL,
    [TYPE_OF_PREP]                   VARCHAR (50)  NULL,
    [TRAINER_NAME]                   VARCHAR (50)  NULL,
    [START_DATE]                     DATETIME      NULL,
    [END_DATE]                       DATETIME      NULL,
    [COMPLETION_STATUS]              VARCHAR (50)  NULL,
    [REASON_CODE]                    VARCHAR (50)  NULL,
    [DOB]                            VARCHAR (50)  NULL,
    [LAST_4_SSN]                     VARCHAR (50)  NULL,
    [PATS_ROSTER_STATUS]             VARCHAR (50)  NULL,
    [STREET_ADDRESS]                 VARCHAR (500) NULL,
    [CITY]                           VARCHAR (50)  NULL,
    [STATE_PROVINCE]                 VARCHAR (50)  NULL,
    [ZIP]                            VARCHAR (50)  NULL,
    [COUNTRY]                        VARCHAR (50)  NULL,
    [CATS_PROFILE_NAME]              VARCHAR (200) NULL,
    [ID]                             INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_BAD]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_BAD] (
    [BAD_IMPORTS_NO]                 TINYINT       NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]          VARCHAR (3)   NULL,
    [WS_ROW_CREATED_TIME]            DATETIME      NOT NULL,
    [FF_OFFICIAL_ACL_FIRST_NAME]     VARCHAR (50)  NULL,
    [FF_OFFICIAL_ACL_LAST_NAME]      VARCHAR (50)  NULL,
    [FF_OFFICIAL_CORPORATE_NAME]     VARCHAR (200) NULL,
    [FF_AGENT_ID]                    VARCHAR (50)  NULL,
    [FF_IDENTIFICATION_NUMBER]       VARCHAR (50)  NOT NULL,
    [FF_OVERALL_CATS_STATUS_CODE]    VARCHAR (100) NULL,
    [FF_PRIMARY_PHONE]               VARCHAR (500) NULL,
    [FF_MOBILE_PHONE]                VARCHAR (50)  NULL,
    [FF_MOBILE_TERMS]                VARCHAR (50)  NULL,
    [FF_USERNAME]                    VARCHAR (100) NULL,
    [FF_PASSWORD]                    VARCHAR (50)  NULL,
    [FF_PROGRAM]                     VARCHAR (50)  NULL,
    [FF_GROUP]                       VARCHAR (50)  NULL,
    [FF_PATS_ROSTER_NUMBER]          VARCHAR (50)  NULL,
    [FF_TYPE_OF_PREP]                VARCHAR (50)  NULL,
    [FF_TRAINER]                     VARCHAR (50)  NULL,
    [FF_START_DATE]                  VARCHAR (50)  NULL,
    [FF_END_DATE]                    VARCHAR (50)  NULL,
    [FF_COMPLETION_STATUS]           VARCHAR (50)  NULL,
    [FF_REASON_CODE]                 VARCHAR (50)  NULL,
    [FF_DOB]                         VARCHAR (50)  NULL,
    [FF_SSN]                         VARCHAR (50)  NULL,
    [FF_PATS_ROSTER_STATUS]          VARCHAR (50)  NULL,
    [FF_STREET_ADDRESS]              VARCHAR (500) NULL,
    [FF_CITY]                        VARCHAR (50)  NULL,
    [FF_STATE_PROVINCE]              VARCHAR (50)  NULL,
    [FF_ZIP]                         VARCHAR (50)  NULL,
    [FF_COUNTRY]                     VARCHAR (50)  NULL,
    [FF_C_NAME]                      VARCHAR (200) NULL,
    [SEQNO_ADDED_TIME]               DATETIME      NOT NULL,
    [SEQNO]                          INT           NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100) NOT NULL,
    [DATETIME]                       DATETIME      NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT           NULL,
    [CAL_DATE]                       DATETIME      NULL,
    [TENANT_KEY]                     INT           NULL,
    [AGENT_FULL_NAME]                VARCHAR (100) NULL,
    [CORPORATE_NAME]                 VARCHAR (200) NULL,
    [AGENT_ID]                       VARCHAR (50)  NULL,
    [ID_NUMBER]                      VARCHAR (50)  NULL,
    [CATS_STATUS_CODE]               VARCHAR (100) NULL,
    [PRIMARY_PHONE]                  VARCHAR (500) NULL,
    [MOBILE_PHONE]                   VARCHAR (50)  NULL,
    [MOBILE_TERMS]                   VARCHAR (50)  NULL,
    [USERNAME]                       VARCHAR (100) NULL,
    [PASSWORD]                       VARCHAR (50)  NULL,
    [PROGRAM_NAME]                   VARCHAR (50)  NULL,
    [GROUP]                          VARCHAR (50)  NULL,
    [PATS_ROSTER_NUMBER]             VARCHAR (50)  NULL,
    [TYPE_OF_PREP]                   VARCHAR (50)  NULL,
    [TRAINER_NAME]                   VARCHAR (50)  NULL,
    [START_DATE]                     DATETIME      NULL,
    [END_DATE]                       DATETIME      NULL,
    [COMPLETION_STATUS]              VARCHAR (50)  NULL,
    [REASON_CODE]                    VARCHAR (50)  NULL,
    [DOB]                            VARCHAR (50)  NULL,
    [LAST_4_SSN]                     VARCHAR (50)  NULL,
    [PATS_ROSTER_STATUS]             VARCHAR (50)  NULL,
    [STREET_ADDRESS]                 VARCHAR (500) NULL,
    [CITY]                           VARCHAR (50)  NULL,
    [STATE_PROVINCE]                 VARCHAR (50)  NULL,
    [ZIP]                            VARCHAR (50)  NULL,
    [COUNTRY]                        VARCHAR (50)  NULL,
    [CATS_PROFILE_NAME]              VARCHAR (200) NULL,
    [ID]                             INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_BAD] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_BAD] UNIQUE NONCLUSTERED ([BAD_IMPORTS_NO] ASC, [WS_ROW_CREATED_TIME] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WORK_HOURS_ALL]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WORK_HOURS_ALL] (
    [TENANT_NAME]                    VARCHAR (100)   NULL,
    [OFFICIAL_ACL_NAME]              VARCHAR (200)   NOT NULL,
    [AGENT_NAME]                     VARCHAR (200)   NULL,
    [FIELD_MAP_ID]                   VARCHAR (100)   NOT NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [LOGGED_IN_HOURS]                DECIMAL (10, 2) NULL,
    [PRODUCTIVE_HOURS]               DECIMAL (10, 2) NULL,
    [DATETIME]                       DATETIME        NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME        NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WORK_HOURS_ALL] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_WORK_HOURS_ALL] UNIQUE NONCLUSTERED ([OFFICIAL_ACL_NAME] ASC, [FIELD_MAP_ID] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING] (
    [RESOURCE_NAME]        VARCHAR (100) NULL,
    [INVOICE_MAP_KEY]      VARCHAR (50)  NOT NULL,
    [EMAIL_MAP_KEY]        VARCHAR (50)  NULL,
    [EMAIL]                VARCHAR (100) NULL,
    [INVOICE_GROUP]        VARCHAR (50)  NOT NULL,
    [PAY_GROUP]            VARCHAR (50)  NULL,
    [FTP_FILE_NAME]        VARCHAR (100) NULL,
    [CST_ROW_CREATED_TIME] DATETIME      NOT NULL,
    [CST_ROW_UPDATED_TIME] DATETIME      NULL,
    [ID]                   INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING] UNIQUE NONCLUSTERED ([INVOICE_MAP_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_1] (
    [RESOURCE_NAME]    VARCHAR (100) NULL,
    [INVOICE_MAP_KEY]  VARCHAR (50)  NOT NULL,
    [FF_EMAIL_MAP_KEY] VARCHAR (50)  NULL,
    [FF_EMAIL_ADDRESS] VARCHAR (100) NULL,
    [FF_INVOICE_GROUP] VARCHAR (50)  NULL,
    [FF_PAY_GROUP]     VARCHAR (50)  NULL,
    [FTP_FILE_NAME]    VARCHAR (100) NULL,
    [ID]               INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_ERRORS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_ERRORS] (
    [RESOURCE_NAME]         VARCHAR (100)  NULL,
    [INVOICE_MAP_KEY]       VARCHAR (50)   NOT NULL,
    [EMAIL_MAP_KEY]         VARCHAR (50)   NULL,
    [EMAIL]                 VARCHAR (100)  NULL,
    [INVOICE_GROUP]         VARCHAR (100)  NOT NULL,
    [PAY_GROUP]             VARCHAR (50)   NULL,
    [FTP_FILE_NAME]         VARCHAR (100)  NULL,
    [WS_ROW_CREATED_TIME]   DATETIME       NULL,
    [IMPORT_SUB_GROUP_NAME] VARCHAR (100)  NULL,
    [ERROR_TAG]             VARCHAR (50)   NULL,
    [ERROR_MSG]             VARCHAR (2500) NULL,
    [ID]                    INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_ERRORS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY] (
    [FF_CASE_NUMBER]                 VARCHAR (100)  NOT NULL,
    [FF_CREATED_ON]                  VARCHAR (50)   NOT NULL,
    [FF_MODIFIED_ON]                 VARCHAR (50)   NOT NULL,
    [FF_CASE_TITLE]                  VARCHAR (2500) NULL,
    [FF_ORIGIN]                      VARCHAR (50)   NOT NULL,
    [FF_STATUS]                      VARCHAR (50)   NOT NULL,
    [FF_OWNER]                       VARCHAR (100)  NOT NULL,
    [FF_SITE]                        VARCHAR (100)  NULL,
    [FF_MANAGER]                     VARCHAR (100)  NOT NULL,
    [FF_ACCOUNT_NUMBER]              VARCHAR (150)  NULL,
    [FF_ADDRESS_1_COUNTRY_REGION]    VARCHAR (50)   NULL,
    [FF_NAME_QUEUE_ASSIGNED]         VARCHAR (100)  NOT NULL,
    [FF_DISPOSITION_1]               VARCHAR (200)  NULL,
    [FF_DISPOSITION_2]               VARCHAR (200)  NULL,
    [FF_DISPOSITION_3]               VARCHAR (200)  NULL,
    [SEQNO_ADDED_TIME]               DATETIME       NOT NULL,
    [SEQNO]                          INT            NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)  NOT NULL,
    [CREATED_DATETIME]               DATETIME       NULL,
    [CREATED_DATE]                   DATETIME       NULL,
    [CREATED_HOUR]                   DATETIME       NULL,
    [MODIFIED_DATETIME]              DATETIME       NULL,
    [MODIFIED_DATE]                  DATETIME       NULL,
    [MODIFIED_HOUR]                  DATETIME       NULL,
    [INVOICE_MAP_KEY]                VARCHAR (100)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT            NULL,
    [TENANT_KEY]                     INT            NULL,
    [RESOURCE_NAME]                  VARCHAR (100)  NULL,
    [WS_ROW_CREATED_TIME]            DATETIME       NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME       NULL,
    [ID]                             INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY] UNIQUE NONCLUSTERED ([FF_CASE_NUMBER] ASC, [FF_CREATED_ON] ASC, [FF_MODIFIED_ON] ASC, [FF_STATUS] ASC, [FF_OWNER] ASC, [FF_MANAGER] ASC, [FF_NAME_QUEUE_ASSIGNED] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_0_Audit] (
    [FF_CASE_NUMBER]              VARCHAR (100)  NULL,
    [FF_CREATED_ON]               VARCHAR (50)   NULL,
    [FF_MODIFIED_ON]              VARCHAR (50)   NULL,
    [FF_CASE_TITLE]               VARCHAR (2500) NULL,
    [FF_ORIGIN]                   VARCHAR (50)   NULL,
    [FF_STATUS]                   VARCHAR (50)   NOT NULL,
    [FF_OWNER]                    VARCHAR (100)  NULL,
    [FF_SITE]                     VARCHAR (100)  NULL,
    [FF_MANAGER]                  VARCHAR (100)  NULL,
    [FF_ACCOUNT_NUMBER]           VARCHAR (150)  NULL,
    [FF_ADDRESS_1_COUNTRY_REGION] VARCHAR (50)   NULL,
    [FF_NAME_QUEUE_ASSIGNED]      VARCHAR (100)  NULL,
    [FF_DISPOSITION_1]            VARCHAR (200)  NULL,
    [FF_DISPOSITION_2]            VARCHAR (200)  NULL,
    [FF_DISPOSITION_3]            VARCHAR (200)  NULL,
    [SEQNO_ADDED_TIME]            DATETIME       NOT NULL,
    [SEQNO]                       INT            NOT NULL,
    [FTP_FILE_NAME]               VARCHAR (100)  NOT NULL,
    [ID]                          INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_0_Audit] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_1] (
    [FF_CASE_NUMBER]                 VARCHAR (100)  NULL,
    [FF_CREATED_ON]                  VARCHAR (50)   NULL,
    [FF_MODIFIED_ON]                 VARCHAR (50)   NULL,
    [FF_CASE_TITLE]                  VARCHAR (2500) NULL,
    [FF_ORIGIN]                      VARCHAR (50)   NULL,
    [FF_STATUS]                      VARCHAR (50)   NOT NULL,
    [FF_OWNER]                       VARCHAR (100)  NULL,
    [FF_SITE]                        VARCHAR (100)  NULL,
    [FF_MANAGER]                     VARCHAR (100)  NULL,
    [FF_ACCOUNT_NUMBER]              VARCHAR (150)  NULL,
    [FF_ADDRESS_1_COUNTRY_REGION]    VARCHAR (50)   NULL,
    [FF_NAME_QUEUE_ASSIGNED]         VARCHAR (100)  NULL,
    [FF_DISPOSITION_1]               VARCHAR (200)  NULL,
    [FF_DISPOSITION_2]               VARCHAR (200)  NULL,
    [FF_DISPOSITION_3]               VARCHAR (200)  NULL,
    [SEQNO_ADDED_TIME]               DATETIME       NOT NULL,
    [SEQNO]                          INT            NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)  NOT NULL,
    [CREATED_DATETIME]               DATETIME       NULL,
    [CREATED_DATE]                   DATETIME       NULL,
    [CREATED_HOUR]                   DATETIME       NULL,
    [MODIFIED_DATETIME]              DATETIME       NULL,
    [MODIFIED_DATE]                  DATETIME       NULL,
    [MODIFIED_HOUR]                  DATETIME       NULL,
    [INVOICE_MAP_KEY]                VARCHAR (100)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT            NULL,
    [TENANT_KEY]                     INT            NULL,
    [RESOURCE_NAME]                  VARCHAR (100)  NULL,
    [ID]                             INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_MAIL_RESOLVED_WEEKLY_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_BAD]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_BAD] (
    [BAD_IMPORTS_CODE]               VARCHAR (3)    NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]          VARCHAR (3)    NULL,
    [WS_ROW_CREATED_TIME]            DATETIME       NOT NULL,
    [FF_CASE_NUMBER]                 VARCHAR (100)  NULL,
    [FF_CREATED_ON]                  VARCHAR (50)   NULL,
    [FF_MODIFIED_ON]                 VARCHAR (50)   NULL,
    [FF_CASE_TITLE]                  VARCHAR (2500) NULL,
    [FF_ORIGIN]                      VARCHAR (50)   NULL,
    [FF_STATUS]                      VARCHAR (50)   NOT NULL,
    [FF_OWNER]                       VARCHAR (100)  NULL,
    [FF_SITE]                        VARCHAR (100)  NULL,
    [FF_MANAGER]                     VARCHAR (100)  NULL,
    [FF_ACCOUNT_NUMBER]              VARCHAR (150)  NULL,
    [FF_ADDRESS_1_COUNTRY_REGION]    VARCHAR (50)   NULL,
    [FF_NAME_QUEUE_ASSIGNED]         VARCHAR (100)  NULL,
    [FF_DISPOSITION_1]               VARCHAR (200)  NULL,
    [FF_DISPOSITION_2]               VARCHAR (200)  NULL,
    [FF_DISPOSITION_3]               VARCHAR (200)  NULL,
    [SEQNO_ADDED_TIME]               DATETIME       NOT NULL,
    [SEQNO]                          INT            NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)  NOT NULL,
    [CREATED_DATETIME]               DATETIME       NULL,
    [CREATED_DATE]                   DATETIME       NULL,
    [CREATED_HOUR]                   DATETIME       NULL,
    [MODIFIED_DATETIME]              DATETIME       NULL,
    [MODIFIED_DATE]                  DATETIME       NULL,
    [MODIFIED_HOUR]                  DATETIME       NULL,
    [INVOICE_MAP_KEY]                VARCHAR (100)  NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT            NULL,
    [TENANT_KEY]                     INT            NULL,
    [RESOURCE_NAME]                  VARCHAR (100)  NULL,
    [ID]                             INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_BAD] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_BAD] UNIQUE NONCLUSTERED ([BAD_IMPORTS_CODE] ASC, [WS_ROW_CREATED_TIME] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING] (
    [FF_DATE]                               VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]                VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                         VARCHAR (100)   NOT NULL,
    [FF_UNAVAILABLE_CODE]                   VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                         VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                          VARCHAR (50)    NOT NULL,
    [FF_LOGIN_TIME]                         DECIMAL (10, 2) NULL,
    [FF_AVAILABLE_TIME]                     DECIMAL (10, 2) NULL,
    [FF_UNAVAILABLE_TIME_MINUS_ACW]         DECIMAL (10, 2) NULL,
    [FF_TALK_TIME]                          DECIMAL (10, 2) NULL,
    [FF_HOLD_TIME]                          DECIMAL (10, 2) NULL,
    [FF_ACW_TIME]                           DECIMAL (10, 2) NULL,
    [FF_CONSULT_TIME]                       DECIMAL (10, 2) NULL,
    [SEQNO_ADDED_TIME]                      DATETIME        NOT NULL,
    [SEQNO]                                 INT             NOT NULL,
    [FTP_FILE_NAME]                         VARCHAR (100)   NOT NULL,
    [DATETIME]                              DATETIME        NULL,
    [HOUR_INTERVAL]                         INT             NULL,
    [AGENT_NAME]                            VARCHAR (50)    NULL,
    [UNAVAILABLE_CODE]                      VARCHAR (100)   NULL,
    [SKILL_NAME]                            VARCHAR (50)    NULL,
    [TEAM_NAME]                             VARCHAR (50)    NULL,
    [LOGIN_TIME]                            DECIMAL (10, 2) NULL,
    [AVAILABLE_TIME]                        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_EMAIL_TIME]                DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SUPERVISOR_TIME]           DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SYSTEM_PENDING_TIME]       DECIMAL (10, 2) NULL,
    [UNAVAILABLE_HELD_PARTY_ABANDONED_TIME] DECIMAL (10, 2) NULL,
    [UNAVAILABLE_MANUAL_OUTBOUND_TIME]      DECIMAL (10, 2) NULL,
    [UNAVAILABLE_NON_BILLABLE_TIME]         DECIMAL (10, 2) NULL,
    [UNAVAILABLE_TIME_MINUS_ACW]            DECIMAL (10, 2) NULL,
    [TALK_TIME]                             DECIMAL (10, 2) NULL,
    [HOLD_TIME]                             DECIMAL (10, 2) NULL,
    [ACW_TIME]                              DECIMAL (10, 2) NULL,
    [CONSULT_TIME]                          DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]               DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                            DECIMAL (10, 2) NULL,
    [CPROD]                                 DECIMAL (10, 2) NULL,
    [MING]                                  DECIMAL (10, 2) NULL,
    [AUT2]                                  DECIMAL (10, 2) NULL,
    [EMAIL]                                 VARCHAR (100)   NULL,
    [ID_EXT]                                VARCHAR (3)     NOT NULL,
    [SCHEDULER_ACL_NAME]                    VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY]        INT             NOT NULL,
    [CAL_DATE]                              DATETIME        NULL,
    [TENANT_KEY]                            INT             NULL,
    [AIR_DAY_TYPE]                          VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]                    VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]                 DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                    VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]            VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                          VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                        VARCHAR (1)     NULL,
    [READY_FOR_XML]                         VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                          VARCHAR (1)     NULL,
    [INVOICE_ID]                            VARCHAR (50)    NULL,
    [RESOURCE_NAME]                         VARCHAR (100)   NULL,
    [AIRITKDUR]                             INT             NULL,
    [AIRIACDUR]                             INT             NULL,
    [PAY_GROUP]                             INT             NULL,
    [WS_ROW_CREATED_TIME]                   DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                   DATETIME        NULL,
    [ID]                                    INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING] UNIQUE NONCLUSTERED ([FF_AGENT_NAME] ASC, [ID_EXT] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_0_Audit] (
    [FF_DATE]                       VARCHAR (50)  NULL,
    [FF_INTERVAL_30_MINUTES]        VARCHAR (50)  NULL,
    [FF_AGENT_NAME]                 VARCHAR (100) NULL,
    [FF_UNAVAILABLE_CODE]           VARCHAR (100) NULL,
    [FF_SKILL_NAME]                 VARCHAR (50)  NULL,
    [FF_TEAM_NAME]                  VARCHAR (50)  NOT NULL,
    [FF_LOGIN_TIME]                 VARCHAR (50)  NULL,
    [FF_AVAILABLE_TIME]             VARCHAR (50)  NULL,
    [FF_UNAVAILABLE_TIME_MINUS_ACW] VARCHAR (50)  NULL,
    [FF_TALK_TIME]                  VARCHAR (50)  NULL,
    [FF_HOLD_TIME]                  VARCHAR (50)  NULL,
    [FF_ACW_TIME]                   VARCHAR (50)  NULL,
    [FF_CONSULT_TIME]               VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]              DATETIME      NOT NULL,
    [SEQNO]                         INT           NOT NULL,
    [FTP_FILE_NAME]                 VARCHAR (100) NOT NULL,
    [ID]                            INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_0_Audit] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1] (
    [FF_DATE]                               VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]                VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                         VARCHAR (100)   NULL,
    [FF_UNAVAILABLE_CODE]                   VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                         VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                          VARCHAR (50)    NOT NULL,
    [FF_LOGIN_TIME]                         VARCHAR (50)    NULL,
    [FF_AVAILABLE_TIME]                     VARCHAR (50)    NULL,
    [FF_UNAVAILABLE_TIME_MINUS_ACW]         VARCHAR (50)    NULL,
    [FF_TALK_TIME]                          VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                          VARCHAR (50)    NULL,
    [FF_ACW_TIME]                           VARCHAR (50)    NULL,
    [FF_CONSULT_TIME]                       VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]                      DATETIME        NOT NULL,
    [SEQNO]                                 INT             NOT NULL,
    [FTP_FILE_NAME]                         VARCHAR (100)   NOT NULL,
    [DATETIME]                              DATETIME        NULL,
    [HOUR_INTERVAL]                         INT             NULL,
    [AGENT_NAME]                            VARCHAR (50)    NULL,
    [UNAVAILABLE_CODE]                      VARCHAR (100)   NULL,
    [SKILL_NAME]                            VARCHAR (50)    NULL,
    [TEAM_NAME]                             VARCHAR (50)    NULL,
    [LOGIN_TIME]                            DECIMAL (10, 2) NULL,
    [AVAILABLE_TIME]                        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_EMAIL_TIME]                DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SUPERVISOR_TIME]           DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SYSTEM_PENDING_TIME]       DECIMAL (10, 2) NULL,
    [UNAVAILABLE_HELD_PARTY_ABANDONED_TIME] DECIMAL (10, 2) NULL,
    [UNAVAILABLE_MANUAL_OUTBOUND_TIME]      DECIMAL (10, 2) NULL,
    [UNAVAILABLE_NON_BILLABLE_TIME]         DECIMAL (10, 2) NULL,
    [UNAVAILABLE_TIME_MINUS_ACW]            DECIMAL (10, 2) NULL,
    [TALK_TIME]                             DECIMAL (10, 2) NULL,
    [HOLD_TIME]                             DECIMAL (10, 2) NULL,
    [ACW_TIME]                              DECIMAL (10, 2) NULL,
    [CONSULT_TIME]                          DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]               DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                            DECIMAL (10, 2) NULL,
    [CPROD]                                 DECIMAL (10, 2) NULL,
    [MING]                                  DECIMAL (10, 2) NULL,
    [AUT2]                                  DECIMAL (10, 2) NULL,
    [EMAIL]                                 VARCHAR (100)   NULL,
    [ID_EXT]                                VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]                    VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY]        INT             NULL,
    [CAL_DATE]                              DATETIME        NULL,
    [TENANT_KEY]                            INT             NULL,
    [AIR_DAY_TYPE]                          VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]                    VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]                 DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                    VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]            VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                          VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                        VARCHAR (1)     NULL,
    [READY_FOR_XML]                         VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                          VARCHAR (1)     NULL,
    [INVOICE_ID]                            VARCHAR (50)    NULL,
    [RESOURCE_NAME]                         VARCHAR (100)   NULL,
    [AIRITKDUR]                             INT             NULL,
    [AIRIACDUR]                             INT             NULL,
    [PAY_GROUP]                             INT             NULL,
    [ID]                                    INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2] (
    [FF_DATE]                               VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]                VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                         VARCHAR (100)   NULL,
    [FF_UNAVAILABLE_CODE]                   VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                         VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                          VARCHAR (50)    NOT NULL,
    [FF_LOGIN_TIME]                         DECIMAL (10, 2) NULL,
    [FF_AVAILABLE_TIME]                     DECIMAL (10, 2) NULL,
    [FF_UNAVAILABLE_TIME_MINUS_ACW]         DECIMAL (10, 2) NULL,
    [FF_TALK_TIME]                          DECIMAL (10, 2) NULL,
    [FF_HOLD_TIME]                          DECIMAL (10, 2) NULL,
    [FF_ACW_TIME]                           DECIMAL (10, 2) NULL,
    [FF_CONSULT_TIME]                       DECIMAL (10, 2) NULL,
    [SEQNO_ADDED_TIME]                      DATETIME        NOT NULL,
    [SEQNO]                                 INT             NOT NULL,
    [FTP_FILE_NAME]                         VARCHAR (100)   NOT NULL,
    [DATETIME]                              DATETIME        NULL,
    [HOUR_INTERVAL]                         INT             NULL,
    [AGENT_NAME]                            VARCHAR (50)    NULL,
    [UNAVAILABLE_CODE]                      VARCHAR (100)   NULL,
    [SKILL_NAME]                            VARCHAR (50)    NULL,
    [TEAM_NAME]                             VARCHAR (50)    NULL,
    [LOGIN_TIME]                            DECIMAL (10, 2) NULL,
    [AVAILABLE_TIME]                        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_EMAIL_TIME]                DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SUPERVISOR_TIME]           DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SYSTEM_PENDING_TIME]       DECIMAL (10, 2) NULL,
    [UNAVAILABLE_HELD_PARTY_ABANDONED_TIME] DECIMAL (10, 2) NULL,
    [UNAVAILABLE_MANUAL_OUTBOUND_TIME]      DECIMAL (10, 2) NULL,
    [UNAVAILABLE_NON_BILLABLE_TIME]         DECIMAL (10, 2) NULL,
    [UNAVAILABLE_TIME_MINUS_ACW]            DECIMAL (10, 2) NULL,
    [TALK_TIME]                             DECIMAL (10, 2) NULL,
    [HOLD_TIME]                             DECIMAL (10, 2) NULL,
    [ACW_TIME]                              DECIMAL (10, 2) NULL,
    [CONSULT_TIME]                          DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]               DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                            DECIMAL (10, 2) NULL,
    [CPROD]                                 DECIMAL (10, 2) NULL,
    [MING]                                  DECIMAL (10, 2) NULL,
    [AUT2]                                  DECIMAL (10, 2) NULL,
    [EMAIL]                                 VARCHAR (100)   NULL,
    [ID_EXT]                                VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]                    VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY]        INT             NULL,
    [CAL_DATE]                              DATETIME        NULL,
    [TENANT_KEY]                            INT             NULL,
    [AIR_DAY_TYPE]                          VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]                    VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]                 DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                    VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]            VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                          VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                        VARCHAR (1)     NULL,
    [READY_FOR_XML]                         VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                          VARCHAR (1)     NULL,
    [INVOICE_ID]                            VARCHAR (50)    NULL,
    [RESOURCE_NAME]                         VARCHAR (100)   NULL,
    [AIRITKDUR]                             INT             NULL,
    [AIRIACDUR]                             INT             NULL,
    [PAY_GROUP]                             INT             NULL,
    [WS_ROW_CREATED_TIME]                   DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                   DATETIME        NULL,
    [ID]                                    INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_BAD]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_BAD] (
    [BAD_IMPORTS_NO]                        VARCHAR (3)     NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]                 VARCHAR (3)     NULL,
    [WS_ROW_CREATED_TIME]                   DATETIME        NOT NULL,
    [FF_DATE]                               VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]                VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                         VARCHAR (100)   NULL,
    [FF_UNAVAILABLE_CODE]                   VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                         VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                          VARCHAR (50)    NOT NULL,
    [FF_LOGIN_TIME]                         VARCHAR (50)    NULL,
    [FF_AVAILABLE_TIME]                     VARCHAR (50)    NULL,
    [FF_UNAVAILABLE_TIME_MINUS_ACW]         VARCHAR (50)    NULL,
    [FF_TALK_TIME]                          VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                          VARCHAR (50)    NULL,
    [FF_ACW_TIME]                           VARCHAR (50)    NULL,
    [FF_CONSULT_TIME]                       VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]                      DATETIME        NOT NULL,
    [SEQNO]                                 INT             NOT NULL,
    [FTP_FILE_NAME]                         VARCHAR (100)   NOT NULL,
    [DATETIME]                              DATETIME        NULL,
    [HOUR_INTERVAL]                         INT             NULL,
    [AGENT_NAME]                            VARCHAR (50)    NULL,
    [UNAVAILABLE_CODE]                      VARCHAR (100)   NULL,
    [SKILL_NAME]                            VARCHAR (50)    NULL,
    [TEAM_NAME]                             VARCHAR (50)    NULL,
    [LOGIN_TIME]                            DECIMAL (10, 2) NULL,
    [AVAILABLE_TIME]                        DECIMAL (10, 2) NULL,
    [UNAVAILABLE_EMAIL_TIME]                DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SUPERVISOR_TIME]           DECIMAL (10, 2) NULL,
    [UNAVAILABLE_SYSTEM_PENDING_TIME]       DECIMAL (10, 2) NULL,
    [UNAVAILABLE_HELD_PARTY_ABANDONED_TIME] DECIMAL (10, 2) NULL,
    [UNAVAILABLE_MANUAL_OUTBOUND_TIME]      DECIMAL (10, 2) NULL,
    [UNAVAILABLE_NON_BILLABLE_TIME]         DECIMAL (10, 2) NULL,
    [UNAVAILABLE_TIME_MINUS_ACW]            DECIMAL (10, 2) NULL,
    [TALK_TIME]                             DECIMAL (10, 2) NULL,
    [HOLD_TIME]                             DECIMAL (10, 2) NULL,
    [ACW_TIME]                              DECIMAL (10, 2) NULL,
    [CONSULT_TIME]                          DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]               DECIMAL (10, 2) NULL,
    [TOTAL_TALK]                            DECIMAL (10, 2) NULL,
    [CPROD]                                 DECIMAL (10, 2) NULL,
    [MING]                                  DECIMAL (10, 2) NULL,
    [AUT2]                                  DECIMAL (10, 2) NULL,
    [EMAIL]                                 VARCHAR (100)   NULL,
    [ID_EXT]                                VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]                    VARCHAR (50)    NULL,
    [STD_TENANT_START_DATE_TIME_KEY]        INT             NULL,
    [CAL_DATE]                              DATETIME        NULL,
    [TENANT_KEY]                            INT             NULL,
    [AIR_DAY_TYPE]                          VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]                    VARCHAR (50)    NULL,
    [MIN_GUARANTEE_MINUTES]                 DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                    VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]            VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                          VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                        VARCHAR (1)     NULL,
    [READY_FOR_XML]                         VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                          VARCHAR (1)     NULL,
    [INVOICE_ID]                            VARCHAR (50)    NULL,
    [RESOURCE_NAME]                         VARCHAR (100)   NULL,
    [AIRITKDUR]                             INT             NULL,
    [AIRIACDUR]                             INT             NULL,
    [PAY_GROUP]                             INT             NULL,
    [ID]                                    INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_BAD] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_BAD] UNIQUE NONCLUSTERED ([BAD_IMPORTS_NO] ASC, [WS_ROW_CREATED_TIME] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING] (
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]         VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                  VARCHAR (100)   NOT NULL,
    [FF_SKILL_NAME]                  VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                   VARCHAR (50)    NOT NULL,
    [FF_CONTACT_ID]                  VARCHAR (50)    NULL,
    [FF_MASTER_CONTACT_ID]           VARCHAR (50)    NULL,
    [FF_TALK_TIME]                   VARCHAR (50)    NULL,
    [FF_ACW_TIME]                    VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                   VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [AGENT_NAME]                     VARCHAR (50)    NULL,
    [SKILL_NAME]                     VARCHAR (50)    NULL,
    [TEAM_NAME]                      VARCHAR (50)    NULL,
    [TALK_TIME]                      DECIMAL (10, 2) NULL,
    [ACW_TIME]                       DECIMAL (10, 2) NULL,
    [HOLD_TIME]                      DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]        DECIMAL (10, 2) NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NOT NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME        NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING] UNIQUE NONCLUSTERED ([FF_AGENT_NAME] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_0_Audit]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_0_Audit] (
    [FF_DATE]                VARCHAR (50)  NULL,
    [FF_INTERVAL_30_MINUTES] VARCHAR (50)  NULL,
    [FF_AGENT_NAME]          VARCHAR (100) NULL,
    [FF_SKILL_NAME]          VARCHAR (50)  NULL,
    [FF_TEAM_NAME]           VARCHAR (50)  NOT NULL,
    [FF_CONTACT_ID]          VARCHAR (50)  NULL,
    [FF_MASTER_CONTACT_ID]   VARCHAR (50)  NULL,
    [FF_TALK_TIME]           VARCHAR (50)  NULL,
    [FF_ACW_TIME]            VARCHAR (50)  NULL,
    [FF_HOLD_TIME]           VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]       DATETIME      NOT NULL,
    [SEQNO]                  INT           NOT NULL,
    [FTP_FILE_NAME]          VARCHAR (100) NOT NULL,
    [ID]                     INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_0_Audit] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_1]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_1] (
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]         VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                  VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                  VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                   VARCHAR (50)    NOT NULL,
    [FF_CONTACT_ID]                  VARCHAR (50)    NULL,
    [FF_MASTER_CONTACT_ID]           VARCHAR (50)    NULL,
    [FF_TALK_TIME]                   VARCHAR (50)    NULL,
    [FF_ACW_TIME]                    VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                   VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [AGENT_NAME]                     VARCHAR (50)    NULL,
    [SKILL_NAME]                     VARCHAR (50)    NULL,
    [TEAM_NAME]                      VARCHAR (50)    NULL,
    [TALK_TIME]                      DECIMAL (10, 2) NULL,
    [ACW_TIME]                       DECIMAL (10, 2) NULL,
    [HOLD_TIME]                      DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]        DECIMAL (10, 2) NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_2]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_2] (
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]         VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                  VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                  VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                   VARCHAR (50)    NOT NULL,
    [FF_CONTACT_ID]                  VARCHAR (50)    NULL,
    [FF_MASTER_CONTACT_ID]           VARCHAR (50)    NULL,
    [FF_TALK_TIME]                   DECIMAL (10, 2) NULL,
    [FF_ACW_TIME]                    DECIMAL (10, 2) NULL,
    [FF_HOLD_TIME]                   DECIMAL (10, 2) NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [AGENT_NAME]                     VARCHAR (50)    NULL,
    [SKILL_NAME]                     VARCHAR (50)    NULL,
    [TEAM_NAME]                      VARCHAR (50)    NULL,
    [TALK_TIME]                      DECIMAL (10, 2) NULL,
    [ACW_TIME]                       DECIMAL (10, 2) NULL,
    [HOLD_TIME]                      DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]        DECIMAL (10, 2) NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME        NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_2] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_BAD]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_BAD] (
    [BAD_IMPORTS_CODE]               VARCHAR (3)     NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]          VARCHAR (3)     NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NOT NULL,
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_INTERVAL_30_MINUTES]         VARCHAR (50)    NULL,
    [FF_AGENT_NAME]                  VARCHAR (100)   NULL,
    [FF_SKILL_NAME]                  VARCHAR (50)    NULL,
    [FF_TEAM_NAME]                   VARCHAR (50)    NOT NULL,
    [FF_CONTACT_ID]                  VARCHAR (50)    NULL,
    [FF_MASTER_CONTACT_ID]           VARCHAR (50)    NULL,
    [FF_TALK_TIME]                   VARCHAR (50)    NULL,
    [FF_ACW_TIME]                    VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                   VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [AGENT_NAME]                     VARCHAR (50)    NULL,
    [SKILL_NAME]                     VARCHAR (50)    NULL,
    [TEAM_NAME]                      VARCHAR (50)    NULL,
    [TALK_TIME]                      DECIMAL (10, 2) NULL,
    [ACW_TIME]                       DECIMAL (10, 2) NULL,
    [HOLD_TIME]                      DECIMAL (10, 2) NULL,
    [TRUE_OUTBOUND_TALK_TIME]        DECIMAL (10, 2) NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_BAD] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_BAD] UNIQUE NONCLUSTERED ([BAD_IMPORTS_CODE] ASC, [WS_ROW_CREATED_TIME] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_SD_AIA_STATIC_DEFAULTS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_SD_AIA_STATIC_DEFAULTS] (
    [PLATFORM]                          VARCHAR (50)  NULL,
    [STATUS]                            VARCHAR (50)  NULL,
    [INVOICE_MAP_KEY]                   VARCHAR (50)  NULL,
    [FIELD_NAME]                        VARCHAR (50)  NULL,
    [SCHEDULER_PROJECT_ID]              VARCHAR (50)  NULL,
    [SCHEDULER_ACL_NAME]                VARCHAR (50)  NULL,
    [ACD_ID_EXTENSION]                  VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_ID]           VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]         VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_ID]            VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_NAME]          VARCHAR (50)  NULL,
    [PRIMARY_PROJECT_MANAGER_ID]        VARCHAR (150) NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID] VARCHAR (150) NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]       VARCHAR (150) NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]        VARCHAR (150) NULL,
    [INVOICE_SYSTEM_ID]                 VARCHAR (50)  NULL,
    [HOLIDAY_INVOICE_ID]                VARCHAR (50)  NULL,
    [HOLIDAY]                           VARCHAR (50)  NULL,
    [FILE_FORMAT_OF_PUSH]               VARCHAR (50)  NULL,
    [AGENT_PREPARATION_INVOICE_ID]      VARCHAR (50)  NULL,
    [NEW_ACL]                           VARCHAR (50)  NULL,
    [CURRENT_CATS]                      VARCHAR (50)  NULL,
    [CATS_ID]                           VARCHAR (50)  NULL,
    [PATS_ID]                           VARCHAR (50)  NULL,
    [SMART_ELIGIBLE]                    VARCHAR (50)  NULL,
    [SMART_TIER_1]                      VARCHAR (50)  NULL,
    [SMART_TIER_2]                      VARCHAR (50)  NULL,
    [SMART_TIER_3]                      VARCHAR (50)  NULL,
    [INTERVAL]                          VARCHAR (50)  NULL,
    [TENANT_KEY]                        INT           NULL,
    [WS_ROW_CREATED_TIME]               DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]               DATETIME      NULL,
    [ID]                                INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_SD_AIA_STATIC_DEFAULTS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_SD_INVOICE_GROUPS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_SD_INVOICE_GROUPS] (
    [SCHEDULER_ACL_NAME]               VARCHAR (100)  NOT NULL,
    [ID_EXT]                           VARCHAR (3)    NOT NULL,
    [TENANT_KEY]                       INT            NOT NULL,
    [include_in_cas]                   VARCHAR (1)    NOT NULL,
    [ready_for_xml]                    VARCHAR (1)    NULL,
    [has_holidays]                     VARCHAR (1)    NOT NULL,
    [show_id_exts]                     VARCHAR (1)    NOT NULL,
    [include_in_universe_agent_invo]   VARCHAR (1)    NULL,
    [include_in_wsinet_usage]          VARCHAR (1)    NULL,
    [include_in_wslive_billing]        VARCHAR (1)    NULL,
    [include_in_olympics]              VARCHAR (1)    NULL,
    [include_in_novatel]               VARCHAR (1)    NULL,
    [include_in_wsol_exports]          VARCHAR (1)    NULL,
    [min_guarantee_minutes]            DECIMAL (6, 3) NULL,
    [min_guarantee_type]               VARCHAR (50)   NULL,
    [authorized_to_invoice_type]       VARCHAR (50)   NULL,
    [min_guarantee_flds]               VARCHAR (150)  NULL,
    [minguar_form]                     VARCHAR (500)  NULL,
    [invoice_formula]                  VARCHAR (500)  NULL,
    [pay_rate_standard]                DECIMAL (6, 3) NULL,
    [pay_rate_holiday]                 DECIMAL (6, 3) NULL,
    [is_client_team]                   VARCHAR (1)    NULL,
    [is_production_team]               VARCHAR (1)    NULL,
    [client_billing_master_group_name] VARCHAR (150)  NULL,
    [DLY_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [MTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WS_START_TIME]                    DATETIME       NULL,
    [WS_END_TIME]                      DATETIME       NULL,
    [WS_ROW_CREATED_TIME]              DATETIME       NULL,
    [WS_ROW_UPDATED_TIME]              DATETIME       NULL,
    [ID]                               INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_SD_INVOICE_GROUPS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_SD_INVOICE_HOLIDAYS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_SD_INVOICE_HOLIDAYS] (
    [HOLIDAY_DATE] SMALLDATETIME NOT NULL,
    [ID]           INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_INVOICE_HOLIDAYS] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_WV_INVOICE_HOLIDAYS] UNIQUE NONCLUSTERED ([HOLIDAY_DATE] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_SD_INVOICE_HOLIDAYS_ADDL]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_SD_INVOICE_HOLIDAYS_ADDL] (
    [HOLIDAY_DATE] DATETIME    NOT NULL,
    [ID_EXT]       VARCHAR (3) NOT NULL,
    [ID]           INT         IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_SD_INVOICE_HOLIDAYS_ADDL] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_IMPORTS_WV_UV_ANT_AIA]...';


GO
CREATE TABLE [dbo].[WSOL_TB_IMPORTS_WV_UV_ANT_AIA] (
    [PLATFORM]                           VARCHAR (50)    NULL,
    [STATUS]                             VARCHAR (50)    NULL,
    [INVOICE_MAP_KEY]                    VARCHAR (50)    NOT NULL,
    [FIELD_NAME]                         VARCHAR (50)    NULL,
    [SCHEDULER_PROJECT_ID]               VARCHAR (50)    NULL,
    [SCHEDULER_ACL_NAME]                 VARCHAR (50)    NOT NULL,
    [ACD_ID_EXTENSION]                   VARCHAR (50)    NOT NULL,
    [OFFICIAL_WSOL_CLIENT_ID]            VARCHAR (50)    NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]          VARCHAR (50)    NULL,
    [OFFICIAL_ACD_CLIENT_ID]             VARCHAR (50)    NOT NULL,
    [OFFICIAL_ACD_CLIENT_NAME]           VARCHAR (50)    NULL,
    [PRIMARY_PROJECT_MANAGER_ID]         VARCHAR (150)   NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID]  VARCHAR (150)   NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]        VARCHAR (150)   NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]         VARCHAR (150)   NULL,
    [INVOICE_SYSTEM_ID]                  VARCHAR (50)    NOT NULL,
    [HOLIDAY_INVOICE_ID]                 VARCHAR (50)    NOT NULL,
    [HOLIDAY]                            VARCHAR (50)    NOT NULL,
    [FILE_FORMAT_OF_PUSH]                VARCHAR (50)    NULL,
    [AGENT_PREPARATION_INVOICE_ID]       VARCHAR (50)    NULL,
    [NEW_ACL]                            VARCHAR (50)    NULL,
    [CURRENT_CATS]                       VARCHAR (50)    NULL,
    [CATS_ID]                            VARCHAR (50)    NULL,
    [PATS_ID]                            VARCHAR (50)    NULL,
    [SMART_ELIGIBLE]                     VARCHAR (50)    NULL,
    [SMART_TIER_1]                       VARCHAR (50)    NULL,
    [SMART_TIER_2]                       VARCHAR (50)    NULL,
    [SMART_TIER_3]                       VARCHAR (50)    NULL,
    [INTERVAL]                           VARCHAR (50)    NULL,
    [DATE]                               VARCHAR (50)    NULL,
    [HOD_INTERVAL]                       VARCHAR (50)    NULL,
    [AU_DK_LOGGED_IN_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_AVAILABLE_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_TALK_DURATION]                DECIMAL (10, 2) NULL,
    [AU_DK_IB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_OB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_CONVENTIONAL_ACW]             DECIMAL (10, 2) NULL,
    [AU_DK_NR_DURATION]                  DECIMAL (10, 2) NULL,
    [AU_DK_PSEUDO_PRODUCTIVE_DURATION]   DECIMAL (10, 2) NULL,
    [AU_DK_ADJUSTED_NR_DURATION]         DECIMAL (10, 2) NULL,
    [AU_DK_TOTAL_PRODUCTIVE_DURATION]    DECIMAL (10, 2) NULL,
    [AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] DECIMAL (10, 2) NULL,
    [AU_DK_XFER_COUNT]                   INT             NULL,
    [AU_DK_HOLD_COUNT]                   INT             NULL,
    [AU_DK_CONFERENCE_COUNT]             INT             NULL,
    [AU_DK_CONSULT_COUNT]                INT             NULL,
    [AU_DK_PUP_COUNT]                    INT             NULL,
    [AU_DK_OFFERED_COUNT]                INT             NULL,
    [AU_DK_HANDLED_COUNT]                INT             NULL,
    [AU_DK_IB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_OB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_RONA_COUNT]                   INT             NULL,
    [AU_DK_AWR_COUNT]                    INT             NULL,
    [MINIMUM_GUARANTEE]                  DECIMAL (10, 2) NULL,
    [AUTHORIZED_TO_INVOICE]              DECIMAL (10, 2) NULL,
    [WEEK_ENDING_DATE]                   VARCHAR (10)    NULL,
    [PAY_CYCLE_CLOSURE_DATE]             VARCHAR (10)    NULL,
    [FTP_FILE_NAME]                      VARCHAR (100)   NOT NULL,
    [EMAIL]                              VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]     INT             NOT NULL,
    [CAL_DATE]                           DATETIME        NULL,
    [TENANT_KEY]                         INT             NOT NULL,
    [AIR_DAY_TYPE]                       VARCHAR (1)     NOT NULL,
    [AIR_ACW_FONT_COLOR]                 VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]                 DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                 VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]         VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                       VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                     VARCHAR (1)     NULL,
    [READY_FOR_XML]                      VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                       VARCHAR (1)     NULL,
    [INVOICE_ID]                         VARCHAR (50)    NULL,
    [RESOURCE_NAME]                      VARCHAR (100)   NULL,
    [AIRITKDUR]                          DECIMAL (10, 2) NULL,
    [AIRIACDUR]                          DECIMAL (10, 2) NULL,
    [WS_ROW_CREATED_TIME]                DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                DATETIME        NULL,
    [ID]                                 INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_IMPORTS_WV_UV_ANT_AIA] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_IMPORTS_WV_UV_ANT_AIA] UNIQUE NONCLUSTERED ([INVOICE_MAP_KEY] ASC, [SCHEDULER_ACL_NAME] ASC, [ACD_ID_EXTENSION] ASC, [HOLIDAY] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [TENANT_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[WSOL_TB_SQL_JOB_ERRORS]...';


GO
CREATE TABLE [dbo].[WSOL_TB_SQL_JOB_ERRORS] (
    [TENANT_KEY]           INT            NULL,
    [SQL_JOB_NM]           VARCHAR (100)  NULL,
    [CST_ROW_CREATED_TIME] DATETIME       NOT NULL,
    [ERROR_MSG]            VARCHAR (2500) NULL,
    [ID]                   INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_WSOL_TB_SQL_JOB_ERRORS] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_WSOL_TB_SQL_JOB_ERRORS] UNIQUE NONCLUSTERED ([CST_ROW_CREATED_TIME] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_ERRORS_FOUND]...';


GO
CREATE TABLE [dbo].[YZ_TB_ERRORS_FOUND] (
    [TENANT_KEY]     INT            NOT NULL,
    [SUB_GROUP_NAME] VARCHAR (100)  NULL,
    [ERROR_MSG]      VARCHAR (1500) NULL,
    [ID]             INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_ERRORS_FOUND] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_FILENAMES_FOR_SSIS]...';


GO
CREATE TABLE [dbo].[YZ_TB_FILENAMES_FOR_SSIS] (
    [SQL_JOB_NAME]         VARCHAR (100) NOT NULL,
    [FILENM]               VARCHAR (50)  NOT NULL,
    [CST_ROW_CREATED_TIME] DATETIME      NULL,
    [ID]                   INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_FILENAMES_FOR_SSIS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING] (
    [RESOURCE_NAME]        VARCHAR (50)  NULL,
    [EMAIL]                VARCHAR (100) NULL,
    [INVOICE_MAP_KEY]      VARCHAR (50)  NOT NULL,
    [FF_OFFICIAL_ACL_NAME] VARCHAR (50)  NOT NULL,
    [FF_EMAIL_ADDRESS]     VARCHAR (100) NULL,
    [FTP_FILE_NAME]        VARCHAR (100) NULL,
    [CST_ROW_CREATED_TIME] DATETIME      NOT NULL,
    [CST_ROW_UPDATED_TIME] DATETIME      NULL,
    [ID]                   INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING] UNIQUE NONCLUSTERED ([INVOICE_MAP_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_1]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_1] (
    [RESOURCE_NAME]        VARCHAR (50)  NULL,
    [EMAIL]                VARCHAR (100) NULL,
    [INVOICE_MAP_KEY]      VARCHAR (50)  NOT NULL,
    [FF_OFFICIAL_ACL_NAME] VARCHAR (50)  NOT NULL,
    [FF_EMAIL_ADDRESS]     VARCHAR (100) NULL,
    [FTP_FILE_NAME]        VARCHAR (100) NULL,
    [ID]                   INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_ERRORS]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_ERRORS] (
    [RESOURCE_NAME]         VARCHAR (50)   NULL,
    [EMAIL]                 VARCHAR (100)  NULL,
    [INVOICE_MAP_KEY]       VARCHAR (50)   NOT NULL,
    [FF_OFFICIAL_ACL_NAME]  VARCHAR (50)   NOT NULL,
    [FF_EMAIL_ADDRESS]      VARCHAR (100)  NULL,
    [FTP_FILE_NAME]         VARCHAR (100)  NULL,
    [WS_ROW_CREATED_TIME]   DATETIME       NULL,
    [IMPORT_SUB_GROUP_NAME] VARCHAR (100)  NULL,
    [ERROR_TAG]             VARCHAR (50)   NULL,
    [ERROR_MSG]             VARCHAR (2500) NULL,
    [ID]                    INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_ERRORS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_APFM_FIVE9_INVOICING_0_Audit]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_APFM_FIVE9_INVOICING_0_Audit] (
    [FF_DATE]               VARCHAR (50)   NULL,
    [FF_HOUR]               VARCHAR (50)   NULL,
    [FF_SKILL_AVAILABILITY] VARCHAR (2500) NULL,
    [FF_AGENT_NAME]         VARCHAR (100)  NULL,
    [FF_STATE]              VARCHAR (50)   NULL,
    [FF_REASON_CODE]        VARCHAR (50)   NULL,
    [FF_AGENT_STATE_TIME]   VARCHAR (50)   NULL,
    [FF_TIMESTAMP]          VARCHAR (50)   NULL,
    [SEQNO_ADDED_TIME]      DATETIME       NOT NULL,
    [SEQNO]                 INT            NOT NULL,
    [FTP_FILE_NAME]         VARCHAR (100)  NOT NULL,
    [ID]                    INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_APFM_FIVE9_INVOICING_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_YZ_TB_IMPORTS_APFM_FIVE9_INVOICING_0_Audit] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_APFM_FIVE9_INVOICING_BAD]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_APFM_FIVE9_INVOICING_BAD] (
    [BAD_IMPORTS_NO]                 TINYINT         NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]          VARCHAR (3)     NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NOT NULL,
    [FF_DATE]                        VARCHAR (50)    NULL,
    [FF_HOUR]                        VARCHAR (50)    NULL,
    [FF_SKILL_AVAILABILITY]          VARCHAR (2500)  NULL,
    [FF_AGENT_NAME]                  VARCHAR (100)   NULL,
    [FF_STATE]                       VARCHAR (50)    NULL,
    [FF_REASON_CODE]                 VARCHAR (50)    NULL,
    [FF_AGENT_STATE_TIME]            VARCHAR (50)    NULL,
    [FF_TIMESTAMP]                   VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [EMPLOYEE_ID]                    VARCHAR (50)    NULL,
    [STD_TENANT_START_TIME]          DATETIME        NULL,
    [PRESENCE_STATE]                 VARCHAR (50)    NULL,
    [NRD_RSN_NAME]                   VARCHAR (50)    NULL,
    [STATE_DUR]                      INT             NULL,
    [READY_DUR]                      INT             NULL,
    [RING_DUR]                       INT             NULL,
    [ON_CALL_DUR]                    INT             NULL,
    [ON_CALL_SILENT_DUR]             INT             NULL,
    [ACW_DUR]                        INT             NULL,
    [ON_PARK_DUR]                    INT             NULL,
    [ON_VOICEMAIL_DUR]               INT             NULL,
    [ON_PREVIEW_DUR]                 INT             NULL,
    [NRD_ACW_DUR]                    INT             NULL,
    [NRD_TASK_COMP_DUR]              INT             NULL,
    [NRD_SYSTEM_OBC_DUR]             INT             NULL,
    [ON_HOLD_DUR]                    INT             NULL,
    [NRD_TRAINING_DUR]               INT             NULL,
    [NRD_MEETING_DUR]                INT             NULL,
    [NRD_MANDATORY_REPORTING_DUR]    INT             NULL,
    [NRD_MANUAL_OBC_DUR]             INT             NULL,
    [NRD_ACW_AGENT_DUR]              INT             NULL,
    [NRD_OFFLINE_VENDOR_UNPAID_DUR]  INT             NULL,
    [NRD_REASON_4_DUR]               INT             NULL,
    [NOT_READY_BILLABLE]             INT             NULL,
    [NOT_READY_NON_BILLABLE]         INT             NULL,
    [BILLABLE_CLIENT]                INT             NULL,
    [TOTAL_TALK]                     INT             NULL,
    [TOTAL_ACW]                      INT             NULL,
    [AUTHORIZED]                     DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]             DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (50)    NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_APFM_FIVE9_INVOICING_BAD] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_YZ_TB_IMPORTS_APFM_FIVE9_INVOICING_BAD] UNIQUE NONCLUSTERED ([BAD_IMPORTS_NO] ASC, [WS_ROW_CREATED_TIME] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_APFM_SD_AIA_STATIC_DEFAULTS]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_APFM_SD_AIA_STATIC_DEFAULTS] (
    [PLATFORM]                          VARCHAR (50)  NULL,
    [STATUS]                            VARCHAR (50)  NULL,
    [INVOICE_MAP_KEY]                   VARCHAR (50)  NULL,
    [FIELD_NAME]                        VARCHAR (50)  NULL,
    [SCHEDULER_PROJECT_ID]              VARCHAR (50)  NULL,
    [SCHEDULER_ACL_NAME]                VARCHAR (50)  NULL,
    [ACD_ID_EXTENSION]                  VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_ID]           VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]         VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_ID]            VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_NAME]          VARCHAR (50)  NULL,
    [PRIMARY_PROJECT_MANAGER_ID]        VARCHAR (150) NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID] VARCHAR (150) NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]       VARCHAR (150) NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]        VARCHAR (150) NULL,
    [INVOICE_SYSTEM_ID]                 VARCHAR (50)  NULL,
    [HOLIDAY_INVOICE_ID]                VARCHAR (50)  NULL,
    [HOLIDAY]                           VARCHAR (50)  NULL,
    [FILE_FORMAT_OF_PUSH]               VARCHAR (50)  NULL,
    [AGENT_PREPARATION_INVOICE_ID]      VARCHAR (50)  NULL,
    [NEW_ACL]                           VARCHAR (50)  NULL,
    [CURRENT_CATS]                      VARCHAR (50)  NULL,
    [CATS_ID]                           VARCHAR (50)  NULL,
    [PATS_ID]                           VARCHAR (50)  NULL,
    [SMART_ELIGIBLE]                    VARCHAR (50)  NULL,
    [SMART_TIER_1]                      VARCHAR (50)  NULL,
    [SMART_TIER_2]                      VARCHAR (50)  NULL,
    [SMART_TIER_3]                      VARCHAR (50)  NULL,
    [INTERVAL]                          VARCHAR (50)  NULL,
    [TENANT_KEY]                        INT           NULL,
    [WS_ROW_CREATED_TIME]               DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]               DATETIME      NULL,
    [ID]                                INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_APFM_SD_AIA_STATIC_DEFAULTS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_APFM_SD_INVOICE_GROUPS]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_APFM_SD_INVOICE_GROUPS] (
    [INVOICE_GROUP_KEY]                INT            NOT NULL,
    [SCHEDULER_ACL_NAME]               VARCHAR (100)  NOT NULL,
    [TENANT_KEY]                       INT            NOT NULL,
    [id_ext]                           VARCHAR (3)    NOT NULL,
    [include_in_cas]                   VARCHAR (1)    NOT NULL,
    [ready_for_xml]                    VARCHAR (1)    NULL,
    [has_holidays]                     VARCHAR (1)    NOT NULL,
    [show_id_exts]                     VARCHAR (1)    NOT NULL,
    [include_in_universe_agent_invo]   VARCHAR (1)    NULL,
    [include_in_wsinet_usage]          VARCHAR (1)    NULL,
    [include_in_wslive_billing]        VARCHAR (1)    NULL,
    [include_in_olympics]              VARCHAR (1)    NULL,
    [include_in_novatel]               VARCHAR (1)    NULL,
    [include_in_wsol_exports]          VARCHAR (1)    NULL,
    [min_guarantee_rate]               DECIMAL (6, 3) NULL,
    [min_guarantee_type]               VARCHAR (50)   NULL,
    [authorized_to_invoice_type]       VARCHAR (50)   NULL,
    [min_guarantee_flds]               VARCHAR (150)  NULL,
    [minguar_form]                     VARCHAR (500)  NULL,
    [invoice_formula]                  VARCHAR (500)  NULL,
    [pay_rate_standard]                DECIMAL (6, 3) NULL,
    [pay_rate_holiday]                 DECIMAL (6, 3) NULL,
    [is_client_team]                   VARCHAR (1)    NULL,
    [is_production_team]               VARCHAR (1)    NULL,
    [client_billing_master_group_name] VARCHAR (150)  NULL,
    [DLY_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [MTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WS_START_TIME]                    DATETIME       NULL,
    [WS_END_TIME]                      DATETIME       NULL,
    [WS_ROW_CREATED_TIME]              DATETIME       NULL,
    [WS_ROW_UPDATED_TIME]              DATETIME       NULL,
    [ID]                               INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_APFM_SD_INVOICE_GROUPS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_APFM_SD_INVOICE_HOLIDAYS]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_APFM_SD_INVOICE_HOLIDAYS] (
    [HOLIDAY_DATE] SMALLDATETIME NOT NULL,
    [ID]           INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_APFM_SD_INVOICE_HOLIDAYS] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_YZ_TB_IMPORTS_APFM_INVOICE_HOLIDAYS] UNIQUE NONCLUSTERED ([HOLIDAY_DATE] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_APFM_SD_INVOICE_HOLIDAYS_ADDL]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_APFM_SD_INVOICE_HOLIDAYS_ADDL] (
    [HOLIDAY_DATE]      DATETIME    NOT NULL,
    [INVOICE_GROUP_KEY] INT         NOT NULL,
    [ID_EXT]            VARCHAR (3) NOT NULL,
    [ID]                INT         IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_APFM_SD_INVOICE_HOLIDAYS_ADDL] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_APFM_UV_ANT_AIA]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_APFM_UV_ANT_AIA] (
    [PLATFORM]                           VARCHAR (50)    NULL,
    [STATUS]                             VARCHAR (50)    NULL,
    [INVOICE_MAP_KEY]                    VARCHAR (50)    NOT NULL,
    [FIELD_NAME]                         VARCHAR (50)    NULL,
    [SCHEDULER_PROJECT_ID]               VARCHAR (50)    NULL,
    [SCHEDULER_ACL_NAME]                 VARCHAR (50)    NOT NULL,
    [ACD_ID_EXTENSION]                   VARCHAR (50)    NOT NULL,
    [OFFICIAL_WSOL_CLIENT_ID]            VARCHAR (50)    NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]          VARCHAR (50)    NULL,
    [OFFICIAL_ACD_CLIENT_ID]             VARCHAR (50)    NOT NULL,
    [OFFICIAL_ACD_CLIENT_NAME]           VARCHAR (50)    NULL,
    [PRIMARY_PROJECT_MANAGER_ID]         VARCHAR (150)   NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID]  VARCHAR (150)   NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]        VARCHAR (150)   NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]         VARCHAR (150)   NULL,
    [INVOICE_SYSTEM_ID]                  VARCHAR (50)    NOT NULL,
    [HOLIDAY_INVOICE_ID]                 VARCHAR (50)    NOT NULL,
    [HOLIDAY]                            VARCHAR (50)    NOT NULL,
    [FILE_FORMAT_OF_PUSH]                VARCHAR (50)    NULL,
    [AGENT_PREPARATION_INVOICE_ID]       VARCHAR (50)    NULL,
    [NEW_ACL]                            VARCHAR (50)    NULL,
    [CURRENT_CATS]                       VARCHAR (50)    NULL,
    [CATS_ID]                            VARCHAR (50)    NULL,
    [PATS_ID]                            VARCHAR (50)    NULL,
    [SMART_ELIGIBLE]                     VARCHAR (50)    NULL,
    [SMART_TIER_1]                       VARCHAR (50)    NULL,
    [SMART_TIER_2]                       VARCHAR (50)    NULL,
    [SMART_TIER_3]                       VARCHAR (50)    NULL,
    [INTERVAL]                           VARCHAR (50)    NULL,
    [DATE]                               VARCHAR (50)    NULL,
    [HOD_INTERVAL]                       VARCHAR (50)    NULL,
    [AU_DK_LOGGED_IN_DURATION]           INT             NULL,
    [AU_DK_AVAILABLE_DURATION]           INT             NULL,
    [AU_DK_TALK_DURATION]                INT             NULL,
    [AU_DK_IB_TALK_DURATION]             INT             NULL,
    [AU_DK_OB_TALK_DURATION]             INT             NULL,
    [AU_DK_CONVENTIONAL_ACW]             INT             NULL,
    [AU_DK_NR_DURATION]                  INT             NULL,
    [AU_DK_PSEUDO_PRODUCTIVE_DURATION]   INT             NULL,
    [AU_DK_ADJUSTED_NR_DURATION]         INT             NULL,
    [AU_DK_TOTAL_PRODUCTIVE_DURATION]    INT             NULL,
    [AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] INT             NULL,
    [AU_DK_XFER_COUNT]                   INT             NULL,
    [AU_DK_HOLD_COUNT]                   INT             NULL,
    [AU_DK_CONFERENCE_COUNT]             INT             NULL,
    [AU_DK_CONSULT_COUNT]                INT             NULL,
    [AU_DK_PUP_COUNT]                    INT             NULL,
    [AU_DK_OFFERED_COUNT]                INT             NULL,
    [AU_DK_HANDLED_COUNT]                INT             NULL,
    [AU_DK_IB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_OB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_RONA_COUNT]                   INT             NULL,
    [AU_DK_AWR_COUNT]                    INT             NULL,
    [MINIMUM_GUARANTEE]                  DECIMAL (10, 2) NULL,
    [AUTHORIZED_TO_INVOICE]              DECIMAL (10, 2) NULL,
    [WEEK_ENDING_DATE]                   VARCHAR (10)    NULL,
    [PAY_CYCLE_CLOSURE_DATE]             VARCHAR (10)    NULL,
    [FTP_FILE_NAME]                      VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]     INT             NOT NULL,
    [CAL_DATE]                           DATETIME        NULL,
    [TENANT_KEY]                         INT             NOT NULL,
    [AIR_DAY_TYPE]                       VARCHAR (1)     NOT NULL,
    [AIR_ACW_FONT_COLOR]                 VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]                 DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                 VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]         VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                       VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                     VARCHAR (1)     NULL,
    [READY_FOR_XML]                      VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                       VARCHAR (1)     NULL,
    [INVOICE_ID]                         VARCHAR (50)    NULL,
    [RESOURCE_NAME]                      VARCHAR (100)   NULL,
    [AIRITKDUR]                          INT             NULL,
    [AIRIACDUR]                          INT             NULL,
    [WS_ROW_CREATED_TIME]                DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                DATETIME        NULL,
    [ID]                                 INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_APFM_UV_ANT_AIA] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_YZ_TB_IMPORTS_APFM_UV_ANT_AIA] UNIQUE NONCLUSTERED ([INVOICE_MAP_KEY] ASC, [SCHEDULER_ACL_NAME] ASC, [ACD_ID_EXTENSION] ASC, [HOLIDAY] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [TENANT_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING] (
    [RESOURCE_NAME]        VARCHAR (100) NULL,
    [EMAIL]                VARCHAR (100) NULL,
    [FF_USERNAME]          VARCHAR (50)  NULL,
    [FF_AGENT_ID]          VARCHAR (50)  NOT NULL,
    [INVOICE_MAP_KEY]      VARCHAR (50)  NOT NULL,
    [FF_RESOURCE]          VARCHAR (50)  NOT NULL,
    [FTP_FILE_NAME]        VARCHAR (100) NULL,
    [PAY_GROUP]            VARCHAR (50)  NOT NULL,
    [FF_ASA_NAME]          VARCHAR (100) NULL,
    [CST_ROW_CREATED_TIME] DATETIME      NOT NULL,
    [CST_ROW_UPDATED_TIME] DATETIME      NULL,
    [ID]                   INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING] UNIQUE NONCLUSTERED ([INVOICE_MAP_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1] (
    [RESOURCE_NAME]   VARCHAR (100) NULL,
    [EMAIL]           VARCHAR (100) NULL,
    [FF_USERNAME]     VARCHAR (50)  NULL,
    [FF_AGENT_ID]     VARCHAR (50)  NULL,
    [INVOICE_MAP_KEY] VARCHAR (50)  NOT NULL,
    [FF_RESOURCE]     VARCHAR (50)  NOT NULL,
    [FTP_FILE_NAME]   VARCHAR (100) NULL,
    [PAY_GROUP]       VARCHAR (50)  NULL,
    [FF_ASA_NAME]     VARCHAR (100) NULL,
    [ID]              INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_ERRORS]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_ERRORS] (
    [RESOURCE_NAME]         VARCHAR (100)  NULL,
    [EMAIL]                 VARCHAR (100)  NULL,
    [FF_USERNAME]           VARCHAR (50)   NULL,
    [FF_AGENT_ID]           VARCHAR (50)   NULL,
    [INVOICE_MAP_KEY]       VARCHAR (50)   NOT NULL,
    [FF_RESOURCE]           VARCHAR (50)   NOT NULL,
    [FTP_FILE_NAME]         VARCHAR (100)  NULL,
    [PAY_GROUP]             VARCHAR (50)   NULL,
    [FF_ASA_NAME]           VARCHAR (100)  NULL,
    [WS_ROW_CREATED_TIME]   DATETIME       NULL,
    [IMPORT_SUB_GROUP_NAME] VARCHAR (100)  NULL,
    [ERROR_TAG]             VARCHAR (50)   NULL,
    [ERROR_MSG]             VARCHAR (2500) NULL,
    [ID]                    INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_ERRORS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_DATALOT_INVOICING]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_DATALOT_INVOICING] (
    [FF_USERNAME]                    VARCHAR (50)    NULL,
    [FF_AGENT_ID]                    VARCHAR (50)    NOT NULL,
    [FF_DAY]                         VARCHAR (50)    NULL,
    [FF_DATE]                        VARCHAR (50)    NOT NULL,
    [FF_HOUR]                        VARCHAR (50)    NULL,
    [FF_ONLINE_MINS]                 VARCHAR (50)    NULL,
    [FF_CONNECTED_MINS]              VARCHAR (50)    NULL,
    [FF_WRAP_MINS]                   VARCHAR (50)    NULL,
    [FF_WAITING_MINS]                VARCHAR (50)    NULL,
    [FF_SUCCESSFUL_XFERS]            VARCHAR (50)    NULL,
    [FF_INBOUNDS]                    VARCHAR (50)    NULL,
    [FF_OUTBOUNDS]                   VARCHAR (50)    NULL,
    [FF_WRAP_ADJUSTMENT]             VARCHAR (50)    NULL,
    [FF_TOTAL_XFERS]                 VARCHAR (50)    NULL,
    [FF_3_MIN_XFERS]                 VARCHAR (50)    NULL,
    [FF_3_MIN_RETAIL_XFERS]          VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [INBOUND_CALLS]                  INT             NULL,
    [OUTBOUND_CALLS]                 INT             NULL,
    [TOTAL_CALLS]                    INT             NULL,
    [SUCCESSFUL_TRANSFERS]           INT             NULL,
    [ONLINE_TIME]                    DECIMAL (10, 2) NULL,
    [CONNECTED_TIME]                 DECIMAL (10, 2) NULL,
    [WRAP_TIME]                      DECIMAL (10, 2) NULL,
    [WAITING_TIME]                   DECIMAL (10, 2) NULL,
    [WRAP_ADJ_TIME]                  DECIMAL (10, 2) NULL,
    [WRAP_ALLOWED]                   DECIMAL (10, 2) NULL,
    [AUTHORIZED_WRAP]                DECIMAL (10, 2) NULL,
    [CPROD]                          DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]              DECIMAL (10, 2) NULL,
    [AUTHORIZED_MINUTES]             DECIMAL (10, 2) NULL,
    [BILLABLE_TALK]                  DECIMAL (10, 2) NULL,
    [BILLABLE_WRAP]                  DECIMAL (10, 2) NULL,
    [AUTHORIZED_TRANSFERS]           INT             NULL,
    [TOTAL_TRANSFERS]                INT             NULL,
    [THREE_MIN_TRANSFERS]            INT             NULL,
    [THREE_MIN_RETAIL_TRANSFERS]     INT             NULL,
    [BASE_3_MINUTE_TRANSFER]         DECIMAL (10, 2) NULL,
    [3_MINUTE_TRANSFER_BONUS]        DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NOT NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (50)    NULL,
    [PAY_GROUP]                      INT             NULL,
    [ASA_NAME]                       VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NOT NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]             DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_MINUTES]          DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [WRAP_MINUTE_RATE]               DECIMAL (6, 3)  NULL,
    [BASE_3_MINUTE_XFER_RATE]        DECIMAL (6, 3)  NULL,
    [3_MINUTE_XFER_BONUS_RATE]       DECIMAL (6, 3)  NULL,
    [ELIGIBLE_FOR_XFER_BONUS]        VARCHAR (1)     NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [TOTAL_AUTHORIZED_PAY]           DECIMAL (6, 3)  NULL,
    [TOTAL_AUTHORIZED_XFER_PAY]      DECIMAL (6, 3)  NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [PAY_RATE_STANDARD]              DECIMAL (6, 3)  NULL,
    [PAY_RATE_HOLIDAY]               DECIMAL (6, 3)  NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (50)    NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [XFER_ID_EXT]                    VARCHAR (3)     NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME        NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_DATALOT_INVOICING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_YZ_TB_IMPORTS_DATALOT_INVOICING] UNIQUE NONCLUSTERED ([FF_AGENT_ID] ASC, [ID_EXT] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_DATALOT_INVOICING_0_Audit]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_DATALOT_INVOICING_0_Audit] (
    [FF_USERNAME]           VARCHAR (50)  NULL,
    [FF_AGENT_ID]           VARCHAR (50)  NULL,
    [FF_DAY]                VARCHAR (50)  NULL,
    [FF_DATE]               VARCHAR (50)  NOT NULL,
    [FF_HOUR]               VARCHAR (50)  NULL,
    [FF_ONLINE_MINS]        VARCHAR (50)  NULL,
    [FF_CONNECTED_MINS]     VARCHAR (50)  NULL,
    [FF_WRAP_MINS]          VARCHAR (50)  NULL,
    [FF_WAITING_MINS]       VARCHAR (50)  NULL,
    [FF_SUCCESSFUL_XFERS]   VARCHAR (50)  NULL,
    [FF_INBOUNDS]           VARCHAR (50)  NULL,
    [FF_OUTBOUNDS]          VARCHAR (50)  NULL,
    [FF_WRAP_ADJUSTMENT]    VARCHAR (50)  NULL,
    [FF_TOTAL_XFERS]        VARCHAR (50)  NULL,
    [FF_3_MIN_XFERS]        VARCHAR (50)  NULL,
    [FF_3_MIN_RETAIL_XFERS] VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]      DATETIME      NOT NULL,
    [SEQNO]                 INT           NOT NULL,
    [FTP_FILE_NAME]         VARCHAR (100) NOT NULL,
    [ID]                    INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_DATALOT_INVOICING_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_YZ_TB_IMPORTS_DATALOT_INVOICING_0_Audit] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_DATALOT_INVOICING_1]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_DATALOT_INVOICING_1] (
    [FF_USERNAME]                    VARCHAR (50)    NULL,
    [FF_AGENT_ID]                    VARCHAR (50)    NULL,
    [FF_DAY]                         VARCHAR (50)    NULL,
    [FF_DATE]                        VARCHAR (50)    NOT NULL,
    [FF_HOUR]                        VARCHAR (50)    NULL,
    [FF_ONLINE_MINS]                 VARCHAR (50)    NULL,
    [FF_CONNECTED_MINS]              VARCHAR (50)    NULL,
    [FF_WRAP_MINS]                   VARCHAR (50)    NULL,
    [FF_WAITING_MINS]                VARCHAR (50)    NULL,
    [FF_SUCCESSFUL_XFERS]            VARCHAR (50)    NULL,
    [FF_INBOUNDS]                    VARCHAR (50)    NULL,
    [FF_OUTBOUNDS]                   VARCHAR (50)    NULL,
    [FF_WRAP_ADJUSTMENT]             VARCHAR (50)    NULL,
    [FF_TOTAL_XFERS]                 VARCHAR (50)    NULL,
    [FF_3_MIN_XFERS]                 VARCHAR (50)    NULL,
    [FF_3_MIN_RETAIL_XFERS]          VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [INBOUND_CALLS]                  INT             NULL,
    [OUTBOUND_CALLS]                 INT             NULL,
    [TOTAL_CALLS]                    INT             NULL,
    [SUCCESSFUL_TRANSFERS]           INT             NULL,
    [ONLINE_TIME]                    DECIMAL (10, 2) NULL,
    [CONNECTED_TIME]                 DECIMAL (10, 2) NULL,
    [WRAP_TIME]                      DECIMAL (10, 2) NULL,
    [WAITING_TIME]                   DECIMAL (10, 2) NULL,
    [WRAP_ADJ_TIME]                  DECIMAL (10, 2) NULL,
    [WRAP_ALLOWED]                   DECIMAL (10, 2) NULL,
    [AUTHORIZED_WRAP]                DECIMAL (10, 2) NULL,
    [CPROD]                          DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]              DECIMAL (10, 2) NULL,
    [AUTHORIZED_MINUTES]             DECIMAL (10, 2) NULL,
    [BILLABLE_TALK]                  DECIMAL (10, 2) NULL,
    [BILLABLE_WRAP]                  DECIMAL (10, 2) NULL,
    [AUTHORIZED_TRANSFERS]           INT             NULL,
    [TOTAL_TRANSFERS]                INT             NULL,
    [THREE_MIN_TRANSFERS]            INT             NULL,
    [THREE_MIN_RETAIL_TRANSFERS]     INT             NULL,
    [BASE_3_MINUTE_TRANSFER]         DECIMAL (10, 2) NULL,
    [3_MINUTE_TRANSFER_BONUS]        DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (50)    NULL,
    [PAY_GROUP]                      INT             NULL,
    [ASA_NAME]                       VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]             DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_MINUTES]          DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [WRAP_MINUTE_RATE]               DECIMAL (6, 3)  NULL,
    [BASE_3_MINUTE_XFER_RATE]        DECIMAL (6, 3)  NULL,
    [3_MINUTE_XFER_BONUS_RATE]       DECIMAL (6, 3)  NULL,
    [ELIGIBLE_FOR_XFER_BONUS]        VARCHAR (1)     NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [TOTAL_AUTHORIZED_PAY]           DECIMAL (6, 3)  NULL,
    [TOTAL_AUTHORIZED_XFER_PAY]      DECIMAL (6, 3)  NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [PAY_RATE_STANDARD]              DECIMAL (6, 3)  NULL,
    [PAY_RATE_HOLIDAY]               DECIMAL (6, 3)  NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (50)    NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [XFER_ID_EXT]                    VARCHAR (3)     NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_DATALOT_INVOICING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_DATALOT_INVOICING_BAD]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_DATALOT_INVOICING_BAD] (
    [BAD_IMPORTS_NO]                 TINYINT         NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]          VARCHAR (3)     NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NOT NULL,
    [FF_USERNAME]                    VARCHAR (50)    NULL,
    [FF_AGENT_ID]                    VARCHAR (50)    NULL,
    [FF_DAY]                         VARCHAR (50)    NULL,
    [FF_DATE]                        VARCHAR (50)    NOT NULL,
    [FF_HOUR]                        VARCHAR (50)    NULL,
    [FF_ONLINE_MINS]                 VARCHAR (50)    NULL,
    [FF_CONNECTED_MINS]              VARCHAR (50)    NULL,
    [FF_WRAP_MINS]                   VARCHAR (50)    NULL,
    [FF_WAITING_MINS]                VARCHAR (50)    NULL,
    [FF_SUCCESSFUL_XFERS]            VARCHAR (50)    NULL,
    [FF_INBOUNDS]                    VARCHAR (50)    NULL,
    [FF_OUTBOUNDS]                   VARCHAR (50)    NULL,
    [FF_WRAP_ADJUSTMENT]             VARCHAR (50)    NULL,
    [FF_TOTAL_XFERS]                 VARCHAR (50)    NULL,
    [FF_3_MIN_XFERS]                 VARCHAR (50)    NULL,
    [FF_3_MIN_RETAIL_XFERS]          VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [INBOUND_CALLS]                  INT             NULL,
    [OUTBOUND_CALLS]                 INT             NULL,
    [TOTAL_CALLS]                    INT             NULL,
    [SUCCESSFUL_TRANSFERS]           INT             NULL,
    [ONLINE_TIME]                    DECIMAL (10, 2) NULL,
    [CONNECTED_TIME]                 DECIMAL (10, 2) NULL,
    [WRAP_TIME]                      DECIMAL (10, 2) NULL,
    [WAITING_TIME]                   DECIMAL (10, 2) NULL,
    [WRAP_ADJ_TIME]                  DECIMAL (10, 2) NULL,
    [WRAP_ALLOWED]                   DECIMAL (10, 2) NULL,
    [AUTHORIZED_WRAP]                DECIMAL (10, 2) NULL,
    [CPROD]                          DECIMAL (10, 2) NULL,
    [MINIMUM_GUARANTEE]              DECIMAL (10, 2) NULL,
    [AUTHORIZED_MINUTES]             DECIMAL (10, 2) NULL,
    [BILLABLE_TALK]                  DECIMAL (10, 2) NULL,
    [BILLABLE_WRAP]                  DECIMAL (10, 2) NULL,
    [AUTHORIZED_TRANSFERS]           INT             NULL,
    [TOTAL_TRANSFERS]                INT             NULL,
    [THREE_MIN_TRANSFERS]            INT             NULL,
    [THREE_MIN_RETAIL_TRANSFERS]     INT             NULL,
    [BASE_3_MINUTE_TRANSFER]         DECIMAL (10, 2) NULL,
    [3_MINUTE_TRANSFER_BONUS]        DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (50)    NULL,
    [PAY_GROUP]                      INT             NULL,
    [ASA_NAME]                       VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]             DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_MINUTES]          DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [WRAP_MINUTE_RATE]               DECIMAL (6, 3)  NULL,
    [BASE_3_MINUTE_XFER_RATE]        DECIMAL (6, 3)  NULL,
    [3_MINUTE_XFER_BONUS_RATE]       DECIMAL (6, 3)  NULL,
    [ELIGIBLE_FOR_XFER_BONUS]        VARCHAR (1)     NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [TOTAL_AUTHORIZED_PAY]           DECIMAL (6, 3)  NULL,
    [TOTAL_AUTHORIZED_XFER_PAY]      DECIMAL (6, 3)  NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [PAY_RATE_STANDARD]              DECIMAL (6, 3)  NULL,
    [PAY_RATE_HOLIDAY]               DECIMAL (6, 3)  NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (50)    NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [XFER_ID_EXT]                    VARCHAR (3)     NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_DATALOT_INVOICING_BAD] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_YZ_TB_IMPORTS_DATALOT_INVOICING_BAD] UNIQUE NONCLUSTERED ([BAD_IMPORTS_NO] ASC, [WS_ROW_CREATED_TIME] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_DATALOT_INVOICING_XML_1]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_DATALOT_INVOICING_XML_1] (
    [PLATFORM]                           VARCHAR (50)    NULL,
    [STATUS]                             VARCHAR (50)    NULL,
    [INVOICE_MAP_KEY]                    VARCHAR (50)    NOT NULL,
    [FIELD_NAME]                         VARCHAR (50)    NULL,
    [SCHEDULER_PROJECT_ID]               VARCHAR (50)    NULL,
    [SCHEDULER_ACL_NAME]                 VARCHAR (50)    NOT NULL,
    [ACD_ID_EXTENSION]                   VARCHAR (50)    NOT NULL,
    [OFFICIAL_WSOL_CLIENT_ID]            VARCHAR (50)    NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]          VARCHAR (50)    NULL,
    [OFFICIAL_ACD_CLIENT_ID]             VARCHAR (50)    NOT NULL,
    [OFFICIAL_ACD_CLIENT_NAME]           VARCHAR (50)    NULL,
    [PRIMARY_PROJECT_MANAGER_ID]         VARCHAR (150)   NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID]  VARCHAR (150)   NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]        VARCHAR (150)   NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]         VARCHAR (150)   NULL,
    [INVOICE_SYSTEM_ID]                  VARCHAR (50)    NOT NULL,
    [HOLIDAY_INVOICE_ID]                 VARCHAR (50)    NOT NULL,
    [HOLIDAY]                            VARCHAR (50)    NOT NULL,
    [FILE_FORMAT_OF_PUSH]                VARCHAR (50)    NULL,
    [AGENT_PREPARATION_INVOICE_ID]       VARCHAR (50)    NULL,
    [NEW_ACL]                            VARCHAR (50)    NULL,
    [CURRENT_CATS]                       VARCHAR (50)    NULL,
    [CATS_ID]                            VARCHAR (50)    NULL,
    [PATS_ID]                            VARCHAR (50)    NULL,
    [SMART_ELIGIBLE]                     VARCHAR (50)    NULL,
    [SMART_TIER_1]                       VARCHAR (50)    NULL,
    [SMART_TIER_2]                       VARCHAR (50)    NULL,
    [SMART_TIER_3]                       VARCHAR (50)    NULL,
    [INTERVAL]                           VARCHAR (50)    NULL,
    [DATE]                               VARCHAR (50)    NULL,
    [HOD_INTERVAL]                       VARCHAR (50)    NULL,
    [AU_DK_LOGGED_IN_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_AVAILABLE_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_TALK_DURATION]                DECIMAL (10, 2) NULL,
    [AU_DK_IB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_OB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_CONVENTIONAL_ACW]             DECIMAL (10, 2) NULL,
    [AU_DK_NR_DURATION]                  DECIMAL (10, 2) NULL,
    [AU_DK_PSEUDO_PRODUCTIVE_DURATION]   DECIMAL (10, 2) NULL,
    [AU_DK_ADJUSTED_NR_DURATION]         DECIMAL (10, 2) NULL,
    [AU_DK_TOTAL_PRODUCTIVE_DURATION]    DECIMAL (10, 2) NULL,
    [AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] DECIMAL (10, 2) NULL,
    [AU_DK_XFER_COUNT]                   INT             NULL,
    [AU_DK_HOLD_COUNT]                   INT             NULL,
    [AU_DK_CONFERENCE_COUNT]             INT             NULL,
    [AU_DK_CONSULT_COUNT]                INT             NULL,
    [AU_DK_PUP_COUNT]                    INT             NULL,
    [AU_DK_OFFERED_COUNT]                INT             NULL,
    [AU_DK_HANDLED_COUNT]                INT             NULL,
    [AU_DK_IB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_OB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_RONA_COUNT]                   INT             NULL,
    [AU_DK_AWR_COUNT]                    INT             NULL,
    [MINIMUM_GUARANTEE]                  DECIMAL (10, 2) NULL,
    [AUTHORIZED_TO_INVOICE]              DECIMAL (10, 2) NULL,
    [WEEK_ENDING_DATE]                   VARCHAR (10)    NULL,
    [PAY_CYCLE_CLOSURE_DATE]             VARCHAR (10)    NULL,
    [CAL_DATE]                           DATETIME        NULL,
    [TENANT_KEY]                         INT             NOT NULL,
    [INVOICE_ID]                         VARCHAR (50)    NULL,
    [CST_ROW_CREATED_TIME]               DATETIME        NULL,
    [ELIGIBLE_FOR_XFER_BONUS]            VARCHAR (1)     NULL,
    [ID]                                 INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_DATALOT_INVOICING_XML_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_DATALOT_INVOICING_XML_XFER_BONUS]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_DATALOT_INVOICING_XML_XFER_BONUS] (
    [INVOICE_MAP_KEY]             VARCHAR (50)    NOT NULL,
    [LOGGED_IN_HOURS]             DECIMAL (10, 3) NULL,
    [THREE_MINUTE_XFERS]          INT             NULL,
    [THREE_MINUTE_XFERS_PER_HOUR] DECIMAL (10, 3) NULL,
    [ELIGIBLE_FOR_XFER_BONUS]     VARCHAR (1)     NULL,
    [ACD_ID_EXTENSION]            VARCHAR (3)     NOT NULL,
    [ID]                          INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_DATALOT_INVOICING_XML_XFER_BONUS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_DATALOT_SD_AIA_STATIC_DEFAULTS]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_DATALOT_SD_AIA_STATIC_DEFAULTS] (
    [PLATFORM]                          VARCHAR (50)  NULL,
    [STATUS]                            VARCHAR (50)  NULL,
    [INVOICE_MAP_KEY]                   VARCHAR (50)  NULL,
    [FIELD_NAME]                        VARCHAR (50)  NULL,
    [SCHEDULER_PROJECT_ID]              VARCHAR (50)  NULL,
    [SCHEDULER_ACL_NAME]                VARCHAR (50)  NULL,
    [ACD_ID_EXTENSION]                  VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_ID]           VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]         VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_ID]            VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_NAME]          VARCHAR (50)  NULL,
    [PRIMARY_PROJECT_MANAGER_ID]        VARCHAR (150) NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID] VARCHAR (150) NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]       VARCHAR (150) NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]        VARCHAR (150) NULL,
    [INVOICE_SYSTEM_ID]                 VARCHAR (50)  NULL,
    [HOLIDAY_INVOICE_ID]                VARCHAR (50)  NULL,
    [HOLIDAY]                           VARCHAR (50)  NULL,
    [FILE_FORMAT_OF_PUSH]               VARCHAR (50)  NULL,
    [AGENT_PREPARATION_INVOICE_ID]      VARCHAR (50)  NULL,
    [NEW_ACL]                           VARCHAR (50)  NULL,
    [CURRENT_CATS]                      VARCHAR (50)  NULL,
    [CATS_ID]                           VARCHAR (50)  NULL,
    [PATS_ID]                           VARCHAR (50)  NULL,
    [SMART_ELIGIBLE]                    VARCHAR (50)  NULL,
    [SMART_TIER_1]                      VARCHAR (50)  NULL,
    [SMART_TIER_2]                      VARCHAR (50)  NULL,
    [SMART_TIER_3]                      VARCHAR (50)  NULL,
    [INTERVAL]                          VARCHAR (50)  NULL,
    [TENANT_KEY]                        INT           NULL,
    [WS_ROW_CREATED_TIME]               DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]               DATETIME      NULL,
    [ID]                                INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_DATALOT_SD_AIA_STATIC_DEFAULTS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_DATALOT_SD_INVOICE_GROUPS]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_DATALOT_SD_INVOICE_GROUPS] (
    [SCHEDULER_ACL_NAME]               VARCHAR (100)  NOT NULL,
    [ID_EXT]                           VARCHAR (3)    NOT NULL,
    [TENANT_KEY]                       INT            NOT NULL,
    [include_in_cas]                   VARCHAR (1)    NOT NULL,
    [ready_for_xml]                    VARCHAR (1)    NULL,
    [has_holidays]                     VARCHAR (1)    NOT NULL,
    [show_id_exts]                     VARCHAR (1)    NOT NULL,
    [include_in_universe_agent_invo]   VARCHAR (1)    NULL,
    [include_in_wsinet_usage]          VARCHAR (1)    NULL,
    [include_in_wslive_billing]        VARCHAR (1)    NULL,
    [include_in_olympics]              VARCHAR (1)    NULL,
    [include_in_novatel]               VARCHAR (1)    NULL,
    [include_in_wsol_exports]          VARCHAR (1)    NULL,
    [min_guarantee_rate]               DECIMAL (6, 3) NULL,
    [min_guarantee_minutes]            DECIMAL (6, 3) NULL,
    [min_guarantee_type]               VARCHAR (50)   NULL,
    [wrap_minute_rate]                 DECIMAL (6, 3) NULL,
    [base_3_minute_xfer_rate]          DECIMAL (6, 3) NULL,
    [3_minute_xfer_bonus_rate]         DECIMAL (6, 3) NULL,
    [authorized_to_invoice_type]       VARCHAR (50)   NULL,
    [min_guarantee_flds]               VARCHAR (150)  NULL,
    [minguar_form]                     VARCHAR (500)  NULL,
    [invoice_formula]                  VARCHAR (500)  NULL,
    [pay_rate_standard]                DECIMAL (6, 3) NULL,
    [pay_rate_holiday]                 DECIMAL (6, 3) NULL,
    [is_client_team]                   VARCHAR (1)    NULL,
    [is_production_team]               VARCHAR (1)    NULL,
    [client_billing_master_group_name] VARCHAR (150)  NULL,
    [DLY_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [MTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WS_START_TIME]                    DATETIME       NULL,
    [WS_END_TIME]                      DATETIME       NULL,
    [WS_ROW_CREATED_TIME]              DATETIME       NULL,
    [WS_ROW_UPDATED_TIME]              DATETIME       NULL,
    [ID]                               INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_DATALOT_SD_INVOICE_GROUPS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_DATALOT_SD_INVOICE_HOLIDAYS]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_DATALOT_SD_INVOICE_HOLIDAYS] (
    [HOLIDAY_DATE] SMALLDATETIME NOT NULL,
    [ID]           INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_DATALOT_SD_INVOICE_HOLIDAYS] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_YZ_TB_IMPORTS_DATALOT_INVOICE_HOLIDAYS] UNIQUE NONCLUSTERED ([HOLIDAY_DATE] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_DATALOT_SD_INVOICE_HOLIDAYS_ADDL]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_DATALOT_SD_INVOICE_HOLIDAYS_ADDL] (
    [HOLIDAY_DATE] DATETIME    NOT NULL,
    [ID_EXT]       VARCHAR (3) NOT NULL,
    [ID]           INT         IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_DATALOT_SD_INVOICE_HOLIDAYS_ADDL] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA] (
    [PLATFORM]                           VARCHAR (50)    NULL,
    [STATUS]                             VARCHAR (50)    NULL,
    [INVOICE_MAP_KEY]                    VARCHAR (50)    NOT NULL,
    [FIELD_NAME]                         VARCHAR (50)    NULL,
    [SCHEDULER_PROJECT_ID]               VARCHAR (50)    NULL,
    [SCHEDULER_ACL_NAME]                 VARCHAR (50)    NOT NULL,
    [ACD_ID_EXTENSION]                   VARCHAR (50)    NOT NULL,
    [OFFICIAL_WSOL_CLIENT_ID]            VARCHAR (50)    NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]          VARCHAR (50)    NULL,
    [OFFICIAL_ACD_CLIENT_ID]             VARCHAR (50)    NOT NULL,
    [OFFICIAL_ACD_CLIENT_NAME]           VARCHAR (50)    NULL,
    [PRIMARY_PROJECT_MANAGER_ID]         VARCHAR (150)   NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID]  VARCHAR (150)   NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]        VARCHAR (150)   NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]         VARCHAR (150)   NULL,
    [INVOICE_SYSTEM_ID]                  VARCHAR (50)    NOT NULL,
    [HOLIDAY_INVOICE_ID]                 VARCHAR (50)    NOT NULL,
    [HOLIDAY]                            VARCHAR (50)    NOT NULL,
    [FILE_FORMAT_OF_PUSH]                VARCHAR (50)    NULL,
    [AGENT_PREPARATION_INVOICE_ID]       VARCHAR (50)    NULL,
    [NEW_ACL]                            VARCHAR (50)    NULL,
    [CURRENT_CATS]                       VARCHAR (50)    NULL,
    [CATS_ID]                            VARCHAR (50)    NULL,
    [PATS_ID]                            VARCHAR (50)    NULL,
    [SMART_ELIGIBLE]                     VARCHAR (50)    NULL,
    [SMART_TIER_1]                       VARCHAR (50)    NULL,
    [SMART_TIER_2]                       VARCHAR (50)    NULL,
    [SMART_TIER_3]                       VARCHAR (50)    NULL,
    [INTERVAL]                           VARCHAR (50)    NULL,
    [DATE]                               VARCHAR (50)    NULL,
    [HOD_INTERVAL]                       VARCHAR (50)    NULL,
    [AU_DK_LOGGED_IN_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_AVAILABLE_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_TALK_DURATION]                DECIMAL (10, 2) NULL,
    [AU_DK_IB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_OB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_CONVENTIONAL_ACW]             DECIMAL (10, 2) NULL,
    [AU_DK_NR_DURATION]                  DECIMAL (10, 2) NULL,
    [AU_DK_PSEUDO_PRODUCTIVE_DURATION]   DECIMAL (10, 2) NULL,
    [AU_DK_ADJUSTED_NR_DURATION]         DECIMAL (10, 2) NULL,
    [AU_DK_TOTAL_PRODUCTIVE_DURATION]    DECIMAL (10, 2) NULL,
    [AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] DECIMAL (10, 2) NULL,
    [AU_DK_XFER_COUNT]                   INT             NULL,
    [AU_DK_HOLD_COUNT]                   INT             NULL,
    [AU_DK_CONFERENCE_COUNT]             INT             NULL,
    [AU_DK_CONSULT_COUNT]                INT             NULL,
    [AU_DK_PUP_COUNT]                    INT             NULL,
    [AU_DK_OFFERED_COUNT]                INT             NULL,
    [AU_DK_HANDLED_COUNT]                INT             NULL,
    [AU_DK_IB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_OB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_RONA_COUNT]                   INT             NULL,
    [AU_DK_AWR_COUNT]                    INT             NULL,
    [MINIMUM_GUARANTEE]                  DECIMAL (10, 2) NULL,
    [AUTHORIZED_TO_INVOICE]              DECIMAL (10, 2) NULL,
    [WEEK_ENDING_DATE]                   VARCHAR (10)    NULL,
    [PAY_CYCLE_CLOSURE_DATE]             VARCHAR (10)    NULL,
    [FTP_FILE_NAME]                      VARCHAR (100)   NOT NULL,
    [TEAM_NAME]                          VARCHAR (50)    NULL,
    [EMAIL]                              VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]     INT             NOT NULL,
    [CAL_DATE]                           DATETIME        NULL,
    [TENANT_KEY]                         INT             NOT NULL,
    [AIR_DAY_TYPE]                       VARCHAR (1)     NOT NULL,
    [AIR_ACW_FONT_COLOR]                 VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]                 DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_MINUTES]              DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                 VARCHAR (50)    NULL,
    [WRAP_MINUTE_RATE]                   DECIMAL (6, 3)  NULL,
    [BASE_3_MINUTE_XFER_RATE]            DECIMAL (6, 3)  NULL,
    [3_MINUTE_XFER_BONUS_RATE]           DECIMAL (6, 3)  NULL,
    [ELIGIBLE_FOR_XFER_BONUS]            VARCHAR (1)     NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]         VARCHAR (50)    NULL,
    [TOTAL_AUTHORIZED_PAY]               DECIMAL (6, 3)  NULL,
    [TOTAL_AUTHORIZED_XFER_PAY]          DECIMAL (6, 3)  NULL,
    [HAS_HOLIDAYS]                       VARCHAR (1)     NULL,
    [PAY_RATE_STANDARD]                  DECIMAL (6, 3)  NULL,
    [PAY_RATE_HOLIDAY]                   DECIMAL (6, 3)  NULL,
    [INCLUDE_IN_CAS]                     VARCHAR (1)     NULL,
    [READY_FOR_XML]                      VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                       VARCHAR (1)     NULL,
    [INVOICE_ID]                         VARCHAR (50)    NULL,
    [RESOURCE_NAME]                      VARCHAR (100)   NULL,
    [PAY_GROUP]                          INT             NULL,
    [AIRITKDUR]                          DECIMAL (10, 2) NULL,
    [AIRIACDUR]                          DECIMAL (10, 2) NULL,
    [WS_ROW_CREATED_TIME]                DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                DATETIME        NULL,
    [ID]                                 INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA] UNIQUE NONCLUSTERED ([INVOICE_MAP_KEY] ASC, [SCHEDULER_ACL_NAME] ASC, [ACD_ID_EXTENSION] ASC, [HOLIDAY] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [TENANT_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING] (
    [RESOURCE_NAME]        VARCHAR (100) NULL,
    [EMAIL]                VARCHAR (100) NULL,
    [INVOICE_MAP_KEY]      VARCHAR (50)  NOT NULL,
    [FF_RESOURCE]          VARCHAR (50)  NOT NULL,
    [PAY_GROUP]            VARCHAR (50)  NOT NULL,
    [FTP_FILE_NAME]        VARCHAR (100) NULL,
    [CST_ROW_CREATED_TIME] DATETIME      NOT NULL,
    [CST_ROW_UPDATED_TIME] DATETIME      NULL,
    [ID]                   INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING] UNIQUE NONCLUSTERED ([INVOICE_MAP_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_1]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_1] (
    [RESOURCE_NAME]   VARCHAR (100) NOT NULL,
    [EMAIL]           VARCHAR (100) NULL,
    [INVOICE_MAP_KEY] VARCHAR (50)  NOT NULL,
    [FF_RESOURCE]     VARCHAR (50)  NOT NULL,
    [PAY_GROUP]       VARCHAR (50)  NOT NULL,
    [FTP_FILE_NAME]   VARCHAR (100) NULL,
    [ID]              INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_ERRORS]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_ERRORS] (
    [RESOURCE_NAME]         VARCHAR (100)  NULL,
    [EMAIL]                 VARCHAR (100)  NULL,
    [INVOICE_MAP_KEY]       VARCHAR (50)   NOT NULL,
    [FF_RESOURCE]           VARCHAR (50)   NOT NULL,
    [PAY_GROUP]             VARCHAR (50)   NOT NULL,
    [FTP_FILE_NAME]         VARCHAR (100)  NULL,
    [WS_ROW_CREATED_TIME]   DATETIME       NULL,
    [IMPORT_SUB_GROUP_NAME] VARCHAR (100)  NULL,
    [ERROR_TAG]             VARCHAR (50)   NULL,
    [ERROR_MSG]             VARCHAR (2500) NULL,
    [ID]                    INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_ERRORS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_STUBHUB_INVOICING]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_STUBHUB_INVOICING] (
    [FF_AGENT_NAME]                  VARCHAR (100)   NULL,
    [FF_USER_NAME]                   VARCHAR (50)    NOT NULL,
    [FF_HOUR]                        VARCHAR (50)    NULL,
    [FF_ACTIVE_TIME]                 VARCHAR (50)    NULL,
    [FF_READY_TIME]                  VARCHAR (50)    NULL,
    [FF_NOT_READY_TIME]              VARCHAR (50)    NULL,
    [FF_ACCEPTED]                    VARCHAR (50)    NULL,
    [FF_INVITE_TIME]                 VARCHAR (50)    NULL,
    [FF_ENGAGE_TIME]                 VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                   VARCHAR (50)    NULL,
    [FF_WRAP_TIME]                   VARCHAR (50)    NULL,
    [FF_CONSULT_RECEIVED_TIME]       VARCHAR (50)    NULL,
    [FF_TALK_TIME]                   VARCHAR (50)    NULL,
    [FF_HANDLE_TIME]                 VARCHAR (50)    NULL,
    [FF_MINIMUM_GUARANTEE]           VARCHAR (50)    NULL,
    [FF_AUTHORIZED_TO_INVOICE]       VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [LOGGED_IN_TIME]                 INT             NULL,
    [READY_TIME]                     INT             NULL,
    [NOT_READY_TIME]                 INT             NULL,
    [CALLS_ACCEPTED]                 INT             NULL,
    [RING_TIME]                      INT             NULL,
    [TALK_TIME]                      INT             NULL,
    [HOLD_TIME]                      INT             NULL,
    [WRAP_TIME]                      INT             NULL,
    [CONSULT_TIME]                   INT             NULL,
    [TALK_HOLD_CONSULT_TIME]         INT             NULL,
    [HANDLE_TIME]                    INT             NULL,
    [TOTAL_TALK]                     DECIMAL (10, 2) NULL,
    [CPROD]                          DECIMAL (10, 2) NULL,
    [MING]                           DECIMAL (10, 2) NULL,
    [AUT2]                           DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NOT NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (50)    NULL,
    [PAY_GROUP]                      INT             NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NOT NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]             DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (50)    NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [AIRITKDUR]                      INT             NULL,
    [AIRIACDUR]                      INT             NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]            DATETIME        NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_STUBHUB_INVOICING] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_YZ_TB_IMPORTS_STUBHUB_INVOICING] UNIQUE NONCLUSTERED ([FF_USER_NAME] ASC, [ID_EXT] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_STUBHUB_INVOICING_0_Audit]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_STUBHUB_INVOICING_0_Audit] (
    [FF_AGENT_NAME]            VARCHAR (100) NULL,
    [FF_USER_NAME]             VARCHAR (50)  NULL,
    [FF_HOUR]                  VARCHAR (50)  NULL,
    [FF_ACTIVE_TIME]           VARCHAR (50)  NULL,
    [FF_READY_TIME]            VARCHAR (50)  NULL,
    [FF_NOT_READY_TIME]        VARCHAR (50)  NULL,
    [FF_ACCEPTED]              VARCHAR (50)  NULL,
    [FF_INVITE_TIME]           VARCHAR (50)  NULL,
    [FF_ENGAGE_TIME]           VARCHAR (50)  NULL,
    [FF_HOLD_TIME]             VARCHAR (50)  NULL,
    [FF_WRAP_TIME]             VARCHAR (50)  NULL,
    [FF_CONSULT_RECEIVED_TIME] VARCHAR (50)  NULL,
    [FF_TALK_TIME]             VARCHAR (50)  NULL,
    [FF_HANDLE_TIME]           VARCHAR (50)  NULL,
    [FF_MINIMUM_GUARANTEE]     VARCHAR (50)  NULL,
    [FF_AUTHORIZED_TO_INVOICE] VARCHAR (50)  NULL,
    [SEQNO_ADDED_TIME]         DATETIME      NOT NULL,
    [SEQNO]                    INT           NOT NULL,
    [FTP_FILE_NAME]            VARCHAR (100) NOT NULL,
    [ID]                       INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_STUBHUB_INVOICING_0_Audit] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_YZ_TB_IMPORTS_STUBHUB_INVOICING_0_Audit] UNIQUE NONCLUSTERED ([SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_STUBHUB_INVOICING_1]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_STUBHUB_INVOICING_1] (
    [FF_AGENT_NAME]                  VARCHAR (100)   NULL,
    [FF_USER_NAME]                   VARCHAR (50)    NULL,
    [FF_HOUR]                        VARCHAR (50)    NULL,
    [FF_ACTIVE_TIME]                 VARCHAR (50)    NULL,
    [FF_READY_TIME]                  VARCHAR (50)    NULL,
    [FF_NOT_READY_TIME]              VARCHAR (50)    NULL,
    [FF_ACCEPTED]                    VARCHAR (50)    NULL,
    [FF_INVITE_TIME]                 VARCHAR (50)    NULL,
    [FF_ENGAGE_TIME]                 VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                   VARCHAR (50)    NULL,
    [FF_WRAP_TIME]                   VARCHAR (50)    NULL,
    [FF_CONSULT_RECEIVED_TIME]       VARCHAR (50)    NULL,
    [FF_TALK_TIME]                   VARCHAR (50)    NULL,
    [FF_HANDLE_TIME]                 VARCHAR (50)    NULL,
    [FF_MINIMUM_GUARANTEE]           VARCHAR (50)    NULL,
    [FF_AUTHORIZED_TO_INVOICE]       VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [LOGGED_IN_TIME]                 INT             NULL,
    [READY_TIME]                     INT             NULL,
    [NOT_READY_TIME]                 INT             NULL,
    [CALLS_ACCEPTED]                 INT             NULL,
    [RING_TIME]                      INT             NULL,
    [TALK_TIME]                      INT             NULL,
    [HOLD_TIME]                      INT             NULL,
    [WRAP_TIME]                      INT             NULL,
    [CONSULT_TIME]                   INT             NULL,
    [TALK_HOLD_CONSULT_TIME]         INT             NULL,
    [HANDLE_TIME]                    INT             NULL,
    [TOTAL_TALK]                     DECIMAL (10, 2) NULL,
    [CPROD]                          DECIMAL (10, 2) NULL,
    [MING]                           DECIMAL (10, 2) NULL,
    [AUT2]                           DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (50)    NULL,
    [PAY_GROUP]                      INT             NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]             DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (50)    NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [AIRITKDUR]                      INT             NULL,
    [AIRIACDUR]                      INT             NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_STUBHUB_INVOICING_1] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_STUBHUB_INVOICING_BAD]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_STUBHUB_INVOICING_BAD] (
    [BAD_IMPORTS_NO]                 TINYINT         NOT NULL,
    [BAD_IMPORTS_FILE_TYPE]          VARCHAR (3)     NULL,
    [WS_ROW_CREATED_TIME]            DATETIME        NOT NULL,
    [FF_AGENT_NAME]                  VARCHAR (100)   NULL,
    [FF_USER_NAME]                   VARCHAR (50)    NULL,
    [FF_HOUR]                        VARCHAR (50)    NULL,
    [FF_ACTIVE_TIME]                 VARCHAR (50)    NULL,
    [FF_READY_TIME]                  VARCHAR (50)    NULL,
    [FF_NOT_READY_TIME]              VARCHAR (50)    NULL,
    [FF_ACCEPTED]                    VARCHAR (50)    NULL,
    [FF_INVITE_TIME]                 VARCHAR (50)    NULL,
    [FF_ENGAGE_TIME]                 VARCHAR (50)    NULL,
    [FF_HOLD_TIME]                   VARCHAR (50)    NULL,
    [FF_WRAP_TIME]                   VARCHAR (50)    NULL,
    [FF_CONSULT_RECEIVED_TIME]       VARCHAR (50)    NULL,
    [FF_TALK_TIME]                   VARCHAR (50)    NULL,
    [FF_HANDLE_TIME]                 VARCHAR (50)    NULL,
    [FF_MINIMUM_GUARANTEE]           VARCHAR (50)    NULL,
    [FF_AUTHORIZED_TO_INVOICE]       VARCHAR (50)    NULL,
    [SEQNO_ADDED_TIME]               DATETIME        NOT NULL,
    [SEQNO]                          INT             NOT NULL,
    [FTP_FILE_NAME]                  VARCHAR (100)   NOT NULL,
    [DATETIME]                       DATETIME        NULL,
    [HOUR_INTERVAL]                  INT             NULL,
    [LOGGED_IN_TIME]                 INT             NULL,
    [READY_TIME]                     INT             NULL,
    [NOT_READY_TIME]                 INT             NULL,
    [CALLS_ACCEPTED]                 INT             NULL,
    [RING_TIME]                      INT             NULL,
    [TALK_TIME]                      INT             NULL,
    [HOLD_TIME]                      INT             NULL,
    [WRAP_TIME]                      INT             NULL,
    [CONSULT_TIME]                   INT             NULL,
    [TALK_HOLD_COLSULT_TIME]         INT             NULL,
    [HANDLE_TIME]                    INT             NULL,
    [TOTAL_TALK]                     DECIMAL (10, 2) NULL,
    [CPROD]                          DECIMAL (10, 2) NULL,
    [MING]                           DECIMAL (10, 2) NULL,
    [AUT2]                           DECIMAL (10, 2) NULL,
    [EMAIL]                          VARCHAR (100)   NULL,
    [ID_EXT]                         VARCHAR (3)     NULL,
    [SCHEDULER_ACL_NAME]             VARCHAR (50)    NULL,
    [PAY_GROUP]                      INT             NULL,
    [STD_TENANT_START_DATE_TIME_KEY] INT             NULL,
    [CAL_DATE]                       DATETIME        NULL,
    [TENANT_KEY]                     INT             NULL,
    [AIR_DAY_TYPE]                   VARCHAR (1)     NULL,
    [AIR_ACW_FONT_COLOR]             VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]             DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]             VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]     VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                   VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                 VARCHAR (1)     NULL,
    [READY_FOR_XML]                  VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                   VARCHAR (1)     NULL,
    [INVOICE_ID]                     VARCHAR (50)    NULL,
    [RESOURCE_NAME]                  VARCHAR (100)   NULL,
    [AIRITKDUR]                      INT             NULL,
    [AIRIACDUR]                      INT             NULL,
    [ID]                             INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_STUBHUB_INVOICING_BAD] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_YZ_TB_IMPORTS_STUBHUB_INVOICING_BAD] UNIQUE NONCLUSTERED ([BAD_IMPORTS_NO] ASC, [WS_ROW_CREATED_TIME] ASC, [SEQNO_ADDED_TIME] ASC, [SEQNO] ASC, [FTP_FILE_NAME] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_STUBHUB_SD_AIA_STATIC_DEFAULTS]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_STUBHUB_SD_AIA_STATIC_DEFAULTS] (
    [PLATFORM]                          VARCHAR (50)  NULL,
    [STATUS]                            VARCHAR (50)  NULL,
    [INVOICE_MAP_KEY]                   VARCHAR (50)  NULL,
    [FIELD_NAME]                        VARCHAR (50)  NULL,
    [SCHEDULER_PROJECT_ID]              VARCHAR (50)  NULL,
    [SCHEDULER_ACL_NAME]                VARCHAR (50)  NULL,
    [ACD_ID_EXTENSION]                  VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_ID]           VARCHAR (50)  NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]         VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_ID]            VARCHAR (50)  NULL,
    [OFFICIAL_ACD_CLIENT_NAME]          VARCHAR (50)  NULL,
    [PRIMARY_PROJECT_MANAGER_ID]        VARCHAR (150) NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID] VARCHAR (150) NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]       VARCHAR (150) NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]        VARCHAR (150) NULL,
    [INVOICE_SYSTEM_ID]                 VARCHAR (50)  NULL,
    [HOLIDAY_INVOICE_ID]                VARCHAR (50)  NULL,
    [HOLIDAY]                           VARCHAR (50)  NULL,
    [FILE_FORMAT_OF_PUSH]               VARCHAR (50)  NULL,
    [AGENT_PREPARATION_INVOICE_ID]      VARCHAR (50)  NULL,
    [NEW_ACL]                           VARCHAR (50)  NULL,
    [CURRENT_CATS]                      VARCHAR (50)  NULL,
    [CATS_ID]                           VARCHAR (50)  NULL,
    [PATS_ID]                           VARCHAR (50)  NULL,
    [SMART_ELIGIBLE]                    VARCHAR (50)  NULL,
    [SMART_TIER_1]                      VARCHAR (50)  NULL,
    [SMART_TIER_2]                      VARCHAR (50)  NULL,
    [SMART_TIER_3]                      VARCHAR (50)  NULL,
    [INTERVAL]                          VARCHAR (50)  NULL,
    [TENANT_KEY]                        INT           NULL,
    [WS_ROW_CREATED_TIME]               DATETIME      NULL,
    [WS_ROW_UPDATED_TIME]               DATETIME      NULL,
    [ID]                                INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_STUBHUB_SD_AIA_STATIC_DEFAULTS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_GROUPS]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_GROUPS] (
    [SCHEDULER_ACL_NAME]               VARCHAR (100)  NOT NULL,
    [ID_EXT]                           VARCHAR (3)    NOT NULL,
    [TENANT_KEY]                       INT            NOT NULL,
    [include_in_cas]                   VARCHAR (1)    NOT NULL,
    [ready_for_xml]                    VARCHAR (1)    NULL,
    [has_holidays]                     VARCHAR (1)    NOT NULL,
    [show_id_exts]                     VARCHAR (1)    NOT NULL,
    [include_in_universe_agent_invo]   VARCHAR (1)    NULL,
    [include_in_wsinet_usage]          VARCHAR (1)    NULL,
    [include_in_wslive_billing]        VARCHAR (1)    NULL,
    [include_in_olympics]              VARCHAR (1)    NULL,
    [include_in_novatel]               VARCHAR (1)    NULL,
    [include_in_wsol_exports]          VARCHAR (1)    NULL,
    [min_guarantee_rate]               DECIMAL (6, 3) NULL,
    [min_guarantee_type]               VARCHAR (50)   NULL,
    [authorized_to_invoice_type]       VARCHAR (50)   NULL,
    [min_guarantee_flds]               VARCHAR (150)  NULL,
    [minguar_form]                     VARCHAR (500)  NULL,
    [invoice_formula]                  VARCHAR (500)  NULL,
    [pay_rate_standard]                DECIMAL (6, 3) NULL,
    [pay_rate_holiday]                 DECIMAL (6, 3) NULL,
    [is_client_team]                   VARCHAR (1)    NULL,
    [is_production_team]               VARCHAR (1)    NULL,
    [client_billing_master_group_name] VARCHAR (150)  NULL,
    [DLY_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [MTD_GRP_TOT_NME]                  VARCHAR (150)  NULL,
    [WS_START_TIME]                    DATETIME       NULL,
    [WS_END_TIME]                      DATETIME       NULL,
    [WS_ROW_CREATED_TIME]              DATETIME       NULL,
    [WS_ROW_UPDATED_TIME]              DATETIME       NULL,
    [ID]                               INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_GROUPS] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_HOLIDAYS]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_HOLIDAYS] (
    [HOLIDAY_DATE] SMALLDATETIME NOT NULL,
    [ID]           INT           IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_HOLIDAYS] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_YZ_TB_IMPORTS_STUBHUB_INVOICE_HOLIDAYS] UNIQUE NONCLUSTERED ([HOLIDAY_DATE] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_HOLIDAYS_ADDL]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_HOLIDAYS_ADDL] (
    [HOLIDAY_DATE] DATETIME    NOT NULL,
    [ID_EXT]       VARCHAR (3) NOT NULL,
    [ID]           INT         IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_HOLIDAYS_ADDL] PRIMARY KEY CLUSTERED ([ID] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA]...';


GO
CREATE TABLE [dbo].[YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA] (
    [PLATFORM]                           VARCHAR (50)    NULL,
    [STATUS]                             VARCHAR (50)    NULL,
    [INVOICE_MAP_KEY]                    VARCHAR (50)    NOT NULL,
    [FIELD_NAME]                         VARCHAR (50)    NULL,
    [SCHEDULER_PROJECT_ID]               VARCHAR (50)    NULL,
    [SCHEDULER_ACL_NAME]                 VARCHAR (50)    NOT NULL,
    [ACD_ID_EXTENSION]                   VARCHAR (50)    NOT NULL,
    [OFFICIAL_WSOL_CLIENT_ID]            VARCHAR (50)    NULL,
    [OFFICIAL_WSOL_CLIENT_NAME]          VARCHAR (50)    NULL,
    [OFFICIAL_ACD_CLIENT_ID]             VARCHAR (50)    NOT NULL,
    [OFFICIAL_ACD_CLIENT_NAME]           VARCHAR (50)    NULL,
    [PRIMARY_PROJECT_MANAGER_ID]         VARCHAR (150)   NULL,
    [DIRECTOR_OF_PROJECT_MANAGEMENT_ID]  VARCHAR (150)   NULL,
    [AGENT_TECHNOLOGY_MANAGER_ID]        VARCHAR (150)   NULL,
    [CONTRACTOR_SUPPORT_PATHWAY]         VARCHAR (150)   NULL,
    [INVOICE_SYSTEM_ID]                  VARCHAR (50)    NOT NULL,
    [HOLIDAY_INVOICE_ID]                 VARCHAR (50)    NOT NULL,
    [HOLIDAY]                            VARCHAR (50)    NOT NULL,
    [FILE_FORMAT_OF_PUSH]                VARCHAR (50)    NULL,
    [AGENT_PREPARATION_INVOICE_ID]       VARCHAR (50)    NULL,
    [NEW_ACL]                            VARCHAR (50)    NULL,
    [CURRENT_CATS]                       VARCHAR (50)    NULL,
    [CATS_ID]                            VARCHAR (50)    NULL,
    [PATS_ID]                            VARCHAR (50)    NULL,
    [SMART_ELIGIBLE]                     VARCHAR (50)    NULL,
    [SMART_TIER_1]                       VARCHAR (50)    NULL,
    [SMART_TIER_2]                       VARCHAR (50)    NULL,
    [SMART_TIER_3]                       VARCHAR (50)    NULL,
    [INTERVAL]                           VARCHAR (50)    NULL,
    [DATE]                               VARCHAR (50)    NULL,
    [HOD_INTERVAL]                       VARCHAR (50)    NULL,
    [AU_DK_LOGGED_IN_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_AVAILABLE_DURATION]           DECIMAL (10, 2) NULL,
    [AU_DK_TALK_DURATION]                DECIMAL (10, 2) NULL,
    [AU_DK_IB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_OB_TALK_DURATION]             DECIMAL (10, 2) NULL,
    [AU_DK_CONVENTIONAL_ACW]             DECIMAL (10, 2) NULL,
    [AU_DK_NR_DURATION]                  DECIMAL (10, 2) NULL,
    [AU_DK_PSEUDO_PRODUCTIVE_DURATION]   DECIMAL (10, 2) NULL,
    [AU_DK_ADJUSTED_NR_DURATION]         DECIMAL (10, 2) NULL,
    [AU_DK_TOTAL_PRODUCTIVE_DURATION]    DECIMAL (10, 2) NULL,
    [AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] DECIMAL (10, 2) NULL,
    [AU_DK_XFER_COUNT]                   INT             NULL,
    [AU_DK_HOLD_COUNT]                   INT             NULL,
    [AU_DK_CONFERENCE_COUNT]             INT             NULL,
    [AU_DK_CONSULT_COUNT]                INT             NULL,
    [AU_DK_PUP_COUNT]                    INT             NULL,
    [AU_DK_OFFERED_COUNT]                INT             NULL,
    [AU_DK_HANDLED_COUNT]                INT             NULL,
    [AU_DK_IB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_OB_HANDLE_COUNT]              INT             NULL,
    [AU_DK_RONA_COUNT]                   INT             NULL,
    [AU_DK_AWR_COUNT]                    INT             NULL,
    [MINIMUM_GUARANTEE]                  DECIMAL (10, 2) NULL,
    [AUTHORIZED_TO_INVOICE]              DECIMAL (10, 2) NULL,
    [WEEK_ENDING_DATE]                   VARCHAR (10)    NULL,
    [PAY_CYCLE_CLOSURE_DATE]             VARCHAR (10)    NULL,
    [FTP_FILE_NAME]                      VARCHAR (100)   NOT NULL,
    [EMAIL]                              VARCHAR (100)   NULL,
    [STD_TENANT_START_DATE_TIME_KEY]     INT             NOT NULL,
    [CAL_DATE]                           DATETIME        NULL,
    [TENANT_KEY]                         INT             NOT NULL,
    [AIR_DAY_TYPE]                       VARCHAR (1)     NOT NULL,
    [AIR_ACW_FONT_COLOR]                 VARCHAR (50)    NULL,
    [MIN_GUARANTEE_RATE]                 DECIMAL (6, 3)  NULL,
    [MIN_GUARANTEE_TYPE]                 VARCHAR (50)    NULL,
    [AUTHORIZED_TO_INVOICE_TYPE]         VARCHAR (50)    NULL,
    [HAS_HOLIDAYS]                       VARCHAR (1)     NULL,
    [INCLUDE_IN_CAS]                     VARCHAR (1)     NULL,
    [READY_FOR_XML]                      VARCHAR (1)     NULL,
    [SHOW_ID_EXTS]                       VARCHAR (1)     NULL,
    [INVOICE_ID]                         VARCHAR (50)    NULL,
    [RESOURCE_NAME]                      VARCHAR (100)   NULL,
    [PAY_GROUP]                          INT             NULL,
    [AIRITKDUR]                          DECIMAL (10, 2) NULL,
    [AIRIACDUR]                          DECIMAL (10, 2) NULL,
    [WS_ROW_CREATED_TIME]                DATETIME        NULL,
    [WS_ROW_UPDATED_TIME]                DATETIME        NULL,
    [ID]                                 INT             IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA] UNIQUE NONCLUSTERED ([INVOICE_MAP_KEY] ASC, [SCHEDULER_ACL_NAME] ASC, [ACD_ID_EXTENSION] ASC, [HOLIDAY] ASC, [STD_TENANT_START_DATE_TIME_KEY] ASC, [TENANT_KEY] ASC)
);


GO
PRINT N'Creating [dbo].[YZ_TB_SQL_JOBS_ON_FAILURE_ERRORS]...';


GO
CREATE TABLE [dbo].[YZ_TB_SQL_JOBS_ON_FAILURE_ERRORS] (
    [TENANT_KEY]           INT            NULL,
    [SQL_JOB_NM]           VARCHAR (100)  NULL,
    [CST_ROW_CREATED_TIME] DATETIME       NOT NULL,
    [ERROR_MSG]            VARCHAR (2500) NULL,
    [ID]                   INT            IDENTITY (1, 1) NOT NULL,
    CONSTRAINT [PK_YZ_TB_SQL_JOBS_ON_FAILURE_ERRORS] PRIMARY KEY CLUSTERED ([ID] ASC),
    CONSTRAINT [UQC_YZ_TB_SQL_JOBS_ON_FAILURE_ERRORS] UNIQUE NONCLUSTERED ([CST_ROW_CREATED_TIME] ASC)
);


GO
PRINT N'Creating unnamed constraint on [dbo].[BackgroundsOnline]...';


GO
ALTER TABLE [dbo].[BackgroundsOnline]
    ADD DEFAULT (NULL) FOR [completiondate];


GO
PRINT N'Creating unnamed constraint on [dbo].[WSOL_TB_BACKGROUNDS_ONLINE]...';


GO
ALTER TABLE [dbo].[WSOL_TB_BACKGROUNDS_ONLINE]
    ADD DEFAULT (NULL) FOR [completiondate];


GO
PRINT N'Creating [dbo].[WSOL_VW_CATS_IDS]...';


GO


CREATE VIEW [dbo].[WSOL_VW_CATS_IDS]
AS
SELECT     SCHEDULER_ACL, FIELD_MAP_ID, AGENT_ID
FROM         dbo.WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM
WHERE     (CATS_STATUS IN ('A - Active Eligible', 'A - Active Pending Prep', 'S - New Agent Pending Prep'))
GROUP BY SCHEDULER_ACL, FIELD_MAP_ID, AGENT_ID
GO
PRINT N'Creating [dbo].[WSOL_VW_HIREIQ_DATA]...';


GO




CREATE VIEW  [dbo].[WSOL_VW_HIREIQ_DATA] AS

SELECT IDAPPLICANT,CANDIDATEFULLNAME,[STATE] ,OVERALLSCORE,QUALIFIERSSCORE
,QUIZSCORE,TYPINGSCORE,LANGUAGEIQSCORE,PHONESCREENSCORE,REVIEWINGLINK,COMPLETEDDATE,WORDSPERMINUTE,ERRORRATE,RISKBAND,createddate FROM WSOL_TB_HIREIQ_RESULT

union

SELECT 
IDAPPLICANT,CANDIDATEFULLNAME,'Completed' AS [STATE] ,0 AS OVERALLSCORE,0 AS QUALIFIERSSCORE,QUIZSCORE,0 AS TYPINGSCORE,LANGUAGEIQSCORE,0 AS PHONESCREENSCORE
,REVIEWINGLINK,COMPLETEDDATE,WORDSPERMINUTE,ERRORRATE,RISKBAND,created FROM WSOL_TB_HIREIQ_CATS_IMPORT
GO
PRINT N'Creating [dbo].[WSOL_VW_IMPORTS_SABRE_UV_ANT_AIA]...';


GO
CREATE VIEW [dbo].[WSOL_VW_IMPORTS_SABRE_UV_ANT_AIA]
AS
SELECT     MAX(PLATFORM) AS PLATFORM, MAX(STATUS) AS STATUS, INVOICE_MAP_KEY, FIELD_NAME, MAX(SCHEDULER_PROJECT_ID) 
                      AS SCHEDULER_PROJECT_ID, SCHEDULER_ACL_NAME, MAX(ACD_ID_EXTENSION) AS ACD_ID_EXTENSION, MAX(OFFICIAL_WSOL_CLIENT_ID) 
                      AS OFFICIAL_WSOL_CLIENT_ID, MAX(OFFICIAL_WSOL_CLIENT_NAME) AS OFFICIAL_WSOL_CLIENT_NAME, MAX(OFFICIAL_ACD_CLIENT_ID) 
                      AS OFFICIAL_ACD_CLIENT_ID, MAX(OFFICIAL_ACD_CLIENT_NAME) AS OFFICIAL_ACD_CLIENT_NAME, MAX(PRIMARY_PROJECT_MANAGER_ID) 
                      AS PRIMARY_PROJECT_MANAGER_ID, MAX(DIRECTOR_OF_PROJECT_MANAGEMENT_ID) AS DIRECTOR_OF_PROJECT_MANAGEMENT_ID, 
                      MAX(AGENT_TECHNOLOGY_MANAGER_ID) AS AGENT_TECHNOLOGY_MANAGER_ID, MAX(CONTRACTOR_SUPPORT_PATHWAY) 
                      AS CONTRACTOR_SUPPORT_PATHWAY, INVOICE_SYSTEM_ID, MAX(HOLIDAY_INVOICE_ID) AS HOLIDAY_INVOICE_ID, MAX(HOLIDAY) AS HOLIDAY, 
                      MAX(FILE_FORMAT_OF_PUSH) AS FILE_FORMAT_OF_PUSH, MAX(AGENT_PREPARATION_INVOICE_ID) AS AGENT_PREPARATION_INVOICE_ID, 
                      MAX(NEW_ACL) AS NEW_ACL, MAX(CURRENT_CATS) AS CURRENT_CATS, MAX(CATS_ID) AS CATS_ID, MAX(PATS_ID) AS PATS_ID, 
                      MAX(SMART_ELIGIBLE) AS SMART_ELIGIBLE, MAX(SMART_TIER_1) AS SMART_TIER_1, MAX(SMART_TIER_2) AS SMART_TIER_2, 
                      MAX(SMART_TIER_3) AS SMART_TIER_3, MAX(INTERVAL) AS INTERVAL, DATE, MAX(HOD_INTERVAL) AS HOD_INTERVAL, 
                      SUM(AU_DK_LOGGED_IN_DURATION) AS AU_DK_LOGGED_IN_DURATION, SUM(AU_DK_AVAILABLE_DURATION) AS AU_DK_AVAILABLE_DURATION, 
                      SUM(AU_DK_TALK_DURATION) AS AU_DK_TALK_DURATION, SUM(AU_DK_IB_TALK_DURATION) AS AU_DK_IB_TALK_DURATION, 
                      SUM(AU_DK_OB_TALK_DURATION) AS AU_DK_OB_TALK_DURATION, SUM(AU_DK_CONVENTIONAL_ACW) AS AU_DK_CONVENTIONAL_ACW, 
                      SUM(AU_DK_NR_DURATION) AS AU_DK_NR_DURATION, SUM(AU_DK_PSEUDO_PRODUCTIVE_DURATION) 
                      AS AU_DK_PSEUDO_PRODUCTIVE_DURATION, SUM(AU_DK_ADJUSTED_NR_DURATION) AS AU_DK_ADJUSTED_NR_DURATION, 
                      SUM(AU_DK_TOTAL_PRODUCTIVE_DURATION) AS AU_DK_TOTAL_PRODUCTIVE_DURATION, SUM(AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS) 
                      AS AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS, SUM(AU_DK_XFER_COUNT) AS AU_DK_XFER_COUNT, SUM(AU_DK_HOLD_COUNT) 
                      AS AU_DK_HOLD_COUNT, SUM(AU_DK_CONFERENCE_COUNT) AS AU_DK_CONFERENCE_COUNT, SUM(AU_DK_CONSULT_COUNT) 
                      AS AU_DK_CONSULT_COUNT, SUM(AU_DK_PUP_COUNT) AS AU_DK_PUP_COUNT, SUM(AU_DK_OFFERED_COUNT) AS AU_DK_OFFERED_COUNT, 
                      SUM(AU_DK_HANDLED_COUNT) AS AU_DK_HANDLED_COUNT, SUM(AU_DK_IB_HANDLE_COUNT) AS AU_DK_IB_HANDLE_COUNT, 
                      SUM(AU_DK_OB_HANDLE_COUNT) AS AU_DK_OB_HANDLE_COUNT, SUM(AU_DK_RONA_COUNT) AS AU_DK_RONA_COUNT, 
                      SUM(AU_DK_AWR_COUNT) AS AU_DK_AWR_COUNT, SUM(MINIMUM_GUARANTEE) AS MINIMUM_GUARANTEE, SUM(AUTHORIZED_TO_INVOICE) 
                      AS AUTHORIZED_TO_INVOICE, MAX(WEEK_ENDING_DATE) AS WEEK_ENDING_DATE, MAX(PAY_CYCLE_CLOSURE_DATE) 
                      AS PAY_CYCLE_CLOSURE_DATE, MAX(FTP_FILE_NAME) AS FTP_FILE_NAME, MAX(EMAIL) AS EMAIL, MAX(STD_TENANT_START_DATE_TIME_KEY) 
                      AS STD_TENANT_START_DATE_TIME_KEY, MAX(CAL_DATE) AS CAL_DATE, MAX(TENANT_KEY) AS TENANT_KEY, MAX(AIR_DAY_TYPE) 
                      AS AIR_DAY_TYPE, MAX(AIR_ACW_FONT_COLOR) AS AIR_ACW_FONT_COLOR, MAX(MIN_GUARANTEE_RATE) AS MIN_GUARANTEE_RATE, 
                      MAX(MIN_GUARANTEE_TYPE) AS MIN_GUARANTEE_TYPE, MAX(AUTHORIZED_TO_INVOICE_TYPE) AS AUTHORIZED_TO_INVOICE_TYPE, 
                      MAX(HAS_HOLIDAYS) AS HAS_HOLIDAYS, MAX(INCLUDE_IN_CAS) AS INCLUDE_IN_CAS, MAX(READY_FOR_XML) AS READY_FOR_XML, 
                      MAX(SHOW_ID_EXTS) AS SHOW_ID_EXTS, INVOICE_ID, RESOURCE_NAME, MAX(PAY_GROUP) AS PAY_GROUP, SUM(AIRITKDUR) AS AIRITKDUR, 
                      SUM(AIRIACDUR) AS AIRIACDUR, MAX(WS_ROW_CREATED_TIME) AS WS_ROW_CREATED_TIME, MAX(WS_ROW_UPDATED_TIME) 
                      AS WS_ROW_UPDATED_TIME
FROM         dbo.WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA
GROUP BY INVOICE_SYSTEM_ID, DATE, INVOICE_ID, RESOURCE_NAME, INVOICE_MAP_KEY, FIELD_NAME, SCHEDULER_ACL_NAME
GO
PRINT N'Creating [dbo].[WSOL_VW_IMPORTS_SALESFORCE_INFORMATICA_WFM]...';


GO


CREATE VIEW [dbo].[WSOL_VW_IMPORTS_SALESFORCE_INFORMATICA_WFM]
AS
SELECT DISTINCT 
                      T.AGENT_ID, T.FIRST_NAME, T.LAST_NAME, NULLIF (T.CORPORATE_NAME, '0') AS CORPORATE_NAME, T.EMAIL_ADDRESS, 
                      T.PRIMARY_PHONE AS WORK_PHONE, T.MOBILE_PHONE, T.STREET_ADDRESS, T.CITY, T.STATE_PROVINCE, T.ZIP_POSTAL AS ZIP, 
                      CASE WHEN T .ZIP_POSTAL IS NULL THEN NULL WHEN ISNUMERIC(LEFT(T .ZIP_POSTAL, 5)) = 1 THEN 'USA' ELSE 'CANADA' END AS COUNTRY, 
                      T.NICKNAME, T.CATS_STATUS, ISNULL(T.CATS_PROFILE_NAME, '') AS CATS_PROFILE_NAME, 'Contact' AS sObject, 'Agent' AS RecordTypeName, 
                      '55' AS Client_ID
FROM         dbo.WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM AS T INNER JOIN
                          (SELECT     AGENT_ID, MAX(RECORD_FILE_DATE) AS MAXDATE
                            FROM          dbo.WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM
                            GROUP BY AGENT_ID) AS TM ON T.AGENT_ID = TM.AGENT_ID AND T.RECORD_FILE_DATE = TM.MAXDATE
GO
PRINT N'Creating [dbo].[WSOL_VW_IMPORTS_VYNE_PATS_ACCESS]...';


GO


CREATE VIEW [dbo].[WSOL_VW_IMPORTS_VYNE_PATS_ACCESS]
AS
SELECT     AGENT_FULL_NAME, FF_OFFICIAL_ACL_FIRST_NAME, FF_OFFICIAL_ACL_LAST_NAME, CORPORATE_NAME, AGENT_ID, ID_NUMBER, 
                      CATS_STATUS_CODE, PRIMARY_PHONE, MOBILE_PHONE, MOBILE_TERMS, USERNAME, PROGRAM_NAME, [GROUP], PATS_ROSTER_NUMBER, 
                      TYPE_OF_PREP, TRAINER_NAME, START_DATE, END_DATE, COMPLETION_STATUS, REASON_CODE, PATS_ROSTER_STATUS, STREET_ADDRESS, 
                      CITY, STATE_PROVINCE, ZIP, COUNTRY, ISNULL(CATS_PROFILE_NAME, '') AS CATS_PROFILE_NAME, NICKNAME, WS_ROW_CREATED_TIME, 
                      WS_ROW_UPDATED_TIME, CASE WHEN ISNULL(WS_ROW_UPDATED_TIME, '') 
                      = '' THEN WS_ROW_CREATED_TIME ELSE WS_ROW_UPDATED_TIME END AS WS_ROW_UPSERT_TIME
FROM         dbo.WSOL_TB_IMPORTS_VYNE_PATS_ACCESS
GO
PRINT N'Creating [dbo].[YZ_VW_AGENT_INVOICE_AUTOMATION]...';


GO
CREATE VIEW [dbo].[YZ_VW_AGENT_INVOICE_AUTOMATION]
AS
SELECT     MAX(PLATFORM) AS PLATFORM, MAX(STATUS) AS STATUS, INVOICE_MAP_KEY, FIELD_NAME, MAX(SCHEDULER_PROJECT_ID) 
                      AS SCHEDULER_PROJECT_ID, SCHEDULER_ACL_NAME, MAX(ACD_ID_EXTENSION) AS ACD_ID_EXTENSION, MAX(OFFICIAL_WSOL_CLIENT_ID) 
                      AS OFFICIAL_WSOL_CLIENT_ID, MAX(OFFICIAL_WSOL_CLIENT_NAME) AS OFFICIAL_WSOL_CLIENT_NAME, MAX(OFFICIAL_ACD_CLIENT_ID) 
                      AS OFFICIAL_ACD_CLIENT_ID, MAX(OFFICIAL_ACD_CLIENT_NAME) AS OFFICIAL_ACD_CLIENT_NAME, MAX(PRIMARY_PROJECT_MANAGER_ID) 
                      AS PRIMARY_PROJECT_MANAGER_ID, MAX(DIRECTOR_OF_PROJECT_MANAGEMENT_ID) AS DIRECTOR_OF_PROJECT_MANAGEMENT_ID, 
                      MAX(AGENT_TECHNOLOGY_MANAGER_ID) AS AGENT_TECHNOLOGY_MANAGER_ID, MAX(CONTRACTOR_SUPPORT_PATHWAY) 
                      AS CONTRACTOR_SUPPORT_PATHWAY, INVOICE_SYSTEM_ID, MAX(HOLIDAY_INVOICE_ID) AS HOLIDAY_INVOICE_ID, MAX(HOLIDAY) AS HOLIDAY, 
                      MAX(FILE_FORMAT_OF_PUSH) AS FILE_FORMAT_OF_PUSH, MAX(AGENT_PREPARATION_INVOICE_ID) AS AGENT_PREPARATION_INVOICE_ID, 
                      MAX(NEW_ACL) AS NEW_ACL, MAX(CURRENT_CATS) AS CURRENT_CATS, MAX(CATS_ID) AS CATS_ID, MAX(PATS_ID) AS PATS_ID, 
                      MAX(SMART_ELIGIBLE) AS SMART_ELIGIBLE, MAX(SMART_TIER_1) AS SMART_TIER_1, MAX(SMART_TIER_2) AS SMART_TIER_2, 
                      MAX(SMART_TIER_3) AS SMART_TIER_3, MAX(INTERVAL) AS INTERVAL, DATE, MAX(HOD_INTERVAL) AS HOD_INTERVAL, 
                      SUM(AU_DK_LOGGED_IN_DURATION) AS AU_DK_LOGGED_IN_DURATION, SUM(AU_DK_AVAILABLE_DURATION) AS AU_DK_AVAILABLE_DURATION, 
                      SUM(AU_DK_TALK_DURATION) AS AU_DK_TALK_DURATION, SUM(AU_DK_IB_TALK_DURATION) AS AU_DK_IB_TALK_DURATION, 
                      SUM(AU_DK_OB_TALK_DURATION) AS AU_DK_OB_TALK_DURATION, SUM(AU_DK_CONVENTIONAL_ACW) AS AU_DK_CONVENTIONAL_ACW, 
                      SUM(AU_DK_NR_DURATION) AS AU_DK_NR_DURATION, SUM(AU_DK_PSEUDO_PRODUCTIVE_DURATION) 
                      AS AU_DK_PSEUDO_PRODUCTIVE_DURATION, SUM(AU_DK_ADJUSTED_NR_DURATION) AS AU_DK_ADJUSTED_NR_DURATION, 
                      SUM(AU_DK_TOTAL_PRODUCTIVE_DURATION) AS AU_DK_TOTAL_PRODUCTIVE_DURATION, SUM(AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS) 
                      AS AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS, SUM(AU_DK_XFER_COUNT) AS AU_DK_XFER_COUNT, SUM(AU_DK_HOLD_COUNT) 
                      AS AU_DK_HOLD_COUNT, SUM(AU_DK_CONFERENCE_COUNT) AS AU_DK_CONFERENCE_COUNT, SUM(AU_DK_CONSULT_COUNT) 
                      AS AU_DK_CONSULT_COUNT, SUM(AU_DK_PUP_COUNT) AS AU_DK_PUP_COUNT, SUM(AU_DK_OFFERED_COUNT) AS AU_DK_OFFERED_COUNT, 
                      SUM(AU_DK_HANDLED_COUNT) AS AU_DK_HANDLED_COUNT, SUM(AU_DK_IB_HANDLE_COUNT) AS AU_DK_IB_HANDLE_COUNT, 
                      SUM(AU_DK_OB_HANDLE_COUNT) AS AU_DK_OB_HANDLE_COUNT, SUM(AU_DK_RONA_COUNT) AS AU_DK_RONA_COUNT, 
                      SUM(AU_DK_AWR_COUNT) AS AU_DK_AWR_COUNT, SUM(MINIMUM_GUARANTEE) AS MINIMUM_GUARANTEE, SUM(AUTHORIZED_TO_INVOICE) 
                      AS AUTHORIZED_TO_INVOICE, MAX(WEEK_ENDING_DATE) AS WEEK_ENDING_DATE, MAX(PAY_CYCLE_CLOSURE_DATE) 
                      AS PAY_CYCLE_CLOSURE_DATE, MAX(CAL_DATE) AS CAL_DATE, MAX(TENANT_KEY) AS TENANT_KEY, INVOICE_ID, MAX(WS_ROW_CREATED_TIME) 
                      AS CST_ROW_CREATED_TIME, 0 AS SCHEDULED, 0 AS CONFIRMED, 0 AS CANCELLED, RESOURCE_NAME, MAX(FTP_FILE_NAME) 
                      AS FTP_FILE_NAME, MAX(STD_TENANT_START_DATE_TIME_KEY) AS STD_TENANT_START_DATE_TIME_KEY
FROM         dbo.WSOL_TB_IMPORTS_GAR_UV_ANT_AIA
GROUP BY INVOICE_SYSTEM_ID, DATE, INVOICE_ID, INVOICE_MAP_KEY, FIELD_NAME, SCHEDULER_ACL_NAME, RESOURCE_NAME
GO
PRINT N'Creating [dbo].[YZ_VW_IMPORTS_APFM_UV_ANT_AIA]...';


GO
CREATE VIEW [dbo].[YZ_VW_IMPORTS_APFM_UV_ANT_AIA]
AS
SELECT     MAX(PLATFORM) AS PLATFORM, MAX(STATUS) AS STATUS, INVOICE_MAP_KEY, FIELD_NAME, MAX(SCHEDULER_PROJECT_ID) 
                      AS SCHEDULER_PROJECT_ID, SCHEDULER_ACL_NAME, MAX(ACD_ID_EXTENSION) AS ACD_ID_EXTENSION, MAX(OFFICIAL_WSOL_CLIENT_ID) 
                      AS OFFICIAL_WSOL_CLIENT_ID, MAX(OFFICIAL_WSOL_CLIENT_NAME) AS OFFICIAL_WSOL_CLIENT_NAME, MAX(OFFICIAL_ACD_CLIENT_ID) 
                      AS OFFICIAL_ACD_CLIENT_ID, MAX(OFFICIAL_ACD_CLIENT_NAME) AS OFFICIAL_ACD_CLIENT_NAME, MAX(PRIMARY_PROJECT_MANAGER_ID) 
                      AS PRIMARY_PROJECT_MANAGER_ID, MAX(DIRECTOR_OF_PROJECT_MANAGEMENT_ID) AS DIRECTOR_OF_PROJECT_MANAGEMENT_ID, 
                      MAX(AGENT_TECHNOLOGY_MANAGER_ID) AS AGENT_TECHNOLOGY_MANAGER_ID, MAX(CONTRACTOR_SUPPORT_PATHWAY) 
                      AS CONTRACTOR_SUPPORT_PATHWAY, INVOICE_SYSTEM_ID, MAX(HOLIDAY_INVOICE_ID) AS HOLIDAY_INVOICE_ID, MAX(HOLIDAY) AS HOLIDAY, 
                      MAX(FILE_FORMAT_OF_PUSH) AS FILE_FORMAT_OF_PUSH, MAX(AGENT_PREPARATION_INVOICE_ID) AS AGENT_PREPARATION_INVOICE_ID, 
                      MAX(NEW_ACL) AS NEW_ACL, MAX(CURRENT_CATS) AS CURRENT_CATS, MAX(CATS_ID) AS CATS_ID, MAX(PATS_ID) AS PATS_ID, 
                      MAX(SMART_ELIGIBLE) AS SMART_ELIGIBLE, MAX(SMART_TIER_1) AS SMART_TIER_1, MAX(SMART_TIER_2) AS SMART_TIER_2, 
                      MAX(SMART_TIER_3) AS SMART_TIER_3, MAX(INTERVAL) AS INTERVAL, DATE, MAX(HOD_INTERVAL) AS HOD_INTERVAL, 
                      SUM(AU_DK_LOGGED_IN_DURATION) AS AU_DK_LOGGED_IN_DURATION, SUM(AU_DK_AVAILABLE_DURATION) AS AU_DK_AVAILABLE_DURATION, 
                      SUM(AU_DK_TALK_DURATION) AS AU_DK_TALK_DURATION, SUM(AU_DK_IB_TALK_DURATION) AS AU_DK_IB_TALK_DURATION, 
                      SUM(AU_DK_OB_TALK_DURATION) AS AU_DK_OB_TALK_DURATION, SUM(AU_DK_CONVENTIONAL_ACW) AS AU_DK_CONVENTIONAL_ACW, 
                      SUM(AU_DK_NR_DURATION) AS AU_DK_NR_DURATION, SUM(AU_DK_PSEUDO_PRODUCTIVE_DURATION) 
                      AS AU_DK_PSEUDO_PRODUCTIVE_DURATION, SUM(AU_DK_ADJUSTED_NR_DURATION) AS AU_DK_ADJUSTED_NR_DURATION, 
                      SUM(AU_DK_TOTAL_PRODUCTIVE_DURATION) AS AU_DK_TOTAL_PRODUCTIVE_DURATION, SUM(AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS) 
                      AS AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS, SUM(AU_DK_XFER_COUNT) AS AU_DK_XFER_COUNT, SUM(AU_DK_HOLD_COUNT) 
                      AS AU_DK_HOLD_COUNT, SUM(AU_DK_CONFERENCE_COUNT) AS AU_DK_CONFERENCE_COUNT, SUM(AU_DK_CONSULT_COUNT) 
                      AS AU_DK_CONSULT_COUNT, SUM(AU_DK_PUP_COUNT) AS AU_DK_PUP_COUNT, SUM(AU_DK_OFFERED_COUNT) AS AU_DK_OFFERED_COUNT, 
                      SUM(AU_DK_HANDLED_COUNT) AS AU_DK_HANDLED_COUNT, SUM(AU_DK_IB_HANDLE_COUNT) AS AU_DK_IB_HANDLE_COUNT, 
                      SUM(AU_DK_OB_HANDLE_COUNT) AS AU_DK_OB_HANDLE_COUNT, SUM(AU_DK_RONA_COUNT) AS AU_DK_RONA_COUNT, 
                      SUM(AU_DK_AWR_COUNT) AS AU_DK_AWR_COUNT, SUM(MINIMUM_GUARANTEE) AS MINIMUM_GUARANTEE, SUM(AUTHORIZED_TO_INVOICE) 
                      AS AUTHORIZED_TO_INVOICE, MAX(WEEK_ENDING_DATE) AS WEEK_ENDING_DATE, MAX(PAY_CYCLE_CLOSURE_DATE) 
                      AS PAY_CYCLE_CLOSURE_DATE, MAX(FTP_FILE_NAME) AS FTP_FILE_NAME, MAX(STD_TENANT_START_DATE_TIME_KEY) 
                      AS STD_TENANT_START_DATE_TIME_KEY, MAX(CAL_DATE) AS CAL_DATE, MAX(TENANT_KEY) AS TENANT_KEY, MAX(AIR_DAY_TYPE) 
                      AS AIR_DAY_TYPE, MAX(AIR_ACW_FONT_COLOR) AS AIR_ACW_FONT_COLOR, MAX(MIN_GUARANTEE_RATE) AS MIN_GUARANTEE_RATE, 
                      MAX(MIN_GUARANTEE_TYPE) AS MIN_GUARANTEE_TYPE, MAX(AUTHORIZED_TO_INVOICE_TYPE) AS AUTHORIZED_TO_INVOICE_TYPE, 
                      MAX(HAS_HOLIDAYS) AS HAS_HOLIDAYS, MAX(INCLUDE_IN_CAS) AS INCLUDE_IN_CAS, MAX(READY_FOR_XML) AS READY_FOR_XML, 
                      MAX(SHOW_ID_EXTS) AS SHOW_ID_EXTS, INVOICE_ID, RESOURCE_NAME, SUM(AIRITKDUR) AS AIRITKDUR, SUM(AIRIACDUR) AS AIRIACDUR, 
                      MAX(WS_ROW_CREATED_TIME) AS WS_ROW_CREATED_TIME, MAX(WS_ROW_UPDATED_TIME) AS WS_ROW_UPDATED_TIME
FROM         dbo.YZ_TB_IMPORTS_APFM_UV_ANT_AIA
GROUP BY INVOICE_SYSTEM_ID, DATE, INVOICE_ID, RESOURCE_NAME, INVOICE_MAP_KEY, FIELD_NAME, SCHEDULER_ACL_NAME
GO
PRINT N'Creating [dbo].[YZ_VW_IMPORTS_DATALOT_UV_ANT_AIA]...';


GO
CREATE VIEW [dbo].[YZ_VW_IMPORTS_DATALOT_UV_ANT_AIA]
AS
SELECT     MAX(PLATFORM) AS PLATFORM, MAX(STATUS) AS STATUS, INVOICE_MAP_KEY, FIELD_NAME, MAX(SCHEDULER_PROJECT_ID) 
                      AS SCHEDULER_PROJECT_ID, SCHEDULER_ACL_NAME, MAX(ACD_ID_EXTENSION) AS ACD_ID_EXTENSION, MAX(OFFICIAL_WSOL_CLIENT_ID) 
                      AS OFFICIAL_WSOL_CLIENT_ID, MAX(OFFICIAL_WSOL_CLIENT_NAME) AS OFFICIAL_WSOL_CLIENT_NAME, MAX(OFFICIAL_ACD_CLIENT_ID) 
                      AS OFFICIAL_ACD_CLIENT_ID, MAX(OFFICIAL_ACD_CLIENT_NAME) AS OFFICIAL_ACD_CLIENT_NAME, MAX(PRIMARY_PROJECT_MANAGER_ID) 
                      AS PRIMARY_PROJECT_MANAGER_ID, MAX(DIRECTOR_OF_PROJECT_MANAGEMENT_ID) AS DIRECTOR_OF_PROJECT_MANAGEMENT_ID, 
                      MAX(AGENT_TECHNOLOGY_MANAGER_ID) AS AGENT_TECHNOLOGY_MANAGER_ID, MAX(CONTRACTOR_SUPPORT_PATHWAY) 
                      AS CONTRACTOR_SUPPORT_PATHWAY, INVOICE_SYSTEM_ID, MAX(HOLIDAY_INVOICE_ID) AS HOLIDAY_INVOICE_ID, MAX(HOLIDAY) AS HOLIDAY, 
                      MAX(FILE_FORMAT_OF_PUSH) AS FILE_FORMAT_OF_PUSH, MAX(AGENT_PREPARATION_INVOICE_ID) AS AGENT_PREPARATION_INVOICE_ID, 
                      MAX(NEW_ACL) AS NEW_ACL, MAX(CURRENT_CATS) AS CURRENT_CATS, MAX(CATS_ID) AS CATS_ID, MAX(PATS_ID) AS PATS_ID, 
                      MAX(SMART_ELIGIBLE) AS SMART_ELIGIBLE, MAX(SMART_TIER_1) AS SMART_TIER_1, MAX(SMART_TIER_2) AS SMART_TIER_2, 
                      MAX(SMART_TIER_3) AS SMART_TIER_3, MAX(INTERVAL) AS INTERVAL, DATE, MAX(HOD_INTERVAL) AS HOD_INTERVAL, 
                      SUM(AU_DK_LOGGED_IN_DURATION) AS AU_DK_LOGGED_IN_DURATION, SUM(AU_DK_AVAILABLE_DURATION) AS AU_DK_AVAILABLE_DURATION, 
                      SUM(AU_DK_TALK_DURATION) AS AU_DK_TALK_DURATION, SUM(AU_DK_IB_TALK_DURATION) AS AU_DK_IB_TALK_DURATION, 
                      SUM(AU_DK_OB_TALK_DURATION) AS AU_DK_OB_TALK_DURATION, SUM(AU_DK_CONVENTIONAL_ACW) AS AU_DK_CONVENTIONAL_ACW, 
                      SUM(AU_DK_NR_DURATION) AS AU_DK_NR_DURATION, SUM(AU_DK_PSEUDO_PRODUCTIVE_DURATION) 
                      AS AU_DK_PSEUDO_PRODUCTIVE_DURATION, SUM(AU_DK_ADJUSTED_NR_DURATION) AS AU_DK_ADJUSTED_NR_DURATION, 
                      SUM(AU_DK_TOTAL_PRODUCTIVE_DURATION) AS AU_DK_TOTAL_PRODUCTIVE_DURATION, SUM(AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS) 
                      AS AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS, SUM(AU_DK_XFER_COUNT) AS AU_DK_XFER_COUNT, SUM(AU_DK_HOLD_COUNT) 
                      AS AU_DK_HOLD_COUNT, SUM(AU_DK_CONFERENCE_COUNT) AS AU_DK_CONFERENCE_COUNT, SUM(AU_DK_CONSULT_COUNT) 
                      AS AU_DK_CONSULT_COUNT, SUM(AU_DK_PUP_COUNT) AS AU_DK_PUP_COUNT, SUM(AU_DK_OFFERED_COUNT) AS AU_DK_OFFERED_COUNT, 
                      SUM(AU_DK_HANDLED_COUNT) AS AU_DK_HANDLED_COUNT, SUM(AU_DK_IB_HANDLE_COUNT) AS AU_DK_IB_HANDLE_COUNT, 
                      SUM(AU_DK_OB_HANDLE_COUNT) AS AU_DK_OB_HANDLE_COUNT, SUM(AU_DK_RONA_COUNT) AS AU_DK_RONA_COUNT, 
                      SUM(AU_DK_AWR_COUNT) AS AU_DK_AWR_COUNT, SUM(MINIMUM_GUARANTEE) AS MINIMUM_GUARANTEE, SUM(AUTHORIZED_TO_INVOICE) 
                      AS AUTHORIZED_TO_INVOICE, MAX(WEEK_ENDING_DATE) AS WEEK_ENDING_DATE, MAX(PAY_CYCLE_CLOSURE_DATE) 
                      AS PAY_CYCLE_CLOSURE_DATE, MAX(FTP_FILE_NAME) AS FTP_FILE_NAME, MAX(TEAM_NAME) AS TEAM_NAME, MAX(EMAIL) AS EMAIL, 
                      MAX(STD_TENANT_START_DATE_TIME_KEY) AS STD_TENANT_START_DATE_TIME_KEY, MAX(CAL_DATE) AS CAL_DATE, MAX(TENANT_KEY) 
                      AS TENANT_KEY, MAX(AIR_DAY_TYPE) AS AIR_DAY_TYPE, MAX(AIR_ACW_FONT_COLOR) AS AIR_ACW_FONT_COLOR, MAX(MIN_GUARANTEE_RATE) 
                      AS MIN_GUARANTEE_RATE, MAX(MIN_GUARANTEE_TYPE) AS MIN_GUARANTEE_TYPE, MAX(AUTHORIZED_TO_INVOICE_TYPE) 
                      AS AUTHORIZED_TO_INVOICE_TYPE, MAX(HAS_HOLIDAYS) AS HAS_HOLIDAYS, MAX(INCLUDE_IN_CAS) AS INCLUDE_IN_CAS, 
                      MAX(READY_FOR_XML) AS READY_FOR_XML, MAX(SHOW_ID_EXTS) AS SHOW_ID_EXTS, INVOICE_ID, RESOURCE_NAME, MAX(PAY_GROUP) 
                      AS PAY_GROUP, SUM(AIRITKDUR) AS AIRITKDUR, SUM(AIRIACDUR) AS AIRIACDUR, MAX(WS_ROW_CREATED_TIME) AS WS_ROW_CREATED_TIME, 
                      MAX(WS_ROW_UPDATED_TIME) AS WS_ROW_UPDATED_TIME
FROM         dbo.YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA
WHERE     (ACD_ID_EXTENSION <> 'DLX')
GROUP BY INVOICE_SYSTEM_ID, DATE, INVOICE_ID, RESOURCE_NAME, INVOICE_MAP_KEY, FIELD_NAME, SCHEDULER_ACL_NAME
GO
PRINT N'Creating [dbo].[YZ_VW_IMPORTS_STUBHUB_UV_ANT_AIA]...';


GO
CREATE VIEW [dbo].[YZ_VW_IMPORTS_STUBHUB_UV_ANT_AIA]
AS
SELECT     MAX(PLATFORM) AS PLATFORM, MAX(STATUS) AS STATUS, INVOICE_MAP_KEY, FIELD_NAME, MAX(SCHEDULER_PROJECT_ID) 
                      AS SCHEDULER_PROJECT_ID, SCHEDULER_ACL_NAME, MAX(ACD_ID_EXTENSION) AS ACD_ID_EXTENSION, MAX(OFFICIAL_WSOL_CLIENT_ID) 
                      AS OFFICIAL_WSOL_CLIENT_ID, MAX(OFFICIAL_WSOL_CLIENT_NAME) AS OFFICIAL_WSOL_CLIENT_NAME, MAX(OFFICIAL_ACD_CLIENT_ID) 
                      AS OFFICIAL_ACD_CLIENT_ID, MAX(OFFICIAL_ACD_CLIENT_NAME) AS OFFICIAL_ACD_CLIENT_NAME, MAX(PRIMARY_PROJECT_MANAGER_ID) 
                      AS PRIMARY_PROJECT_MANAGER_ID, MAX(DIRECTOR_OF_PROJECT_MANAGEMENT_ID) AS DIRECTOR_OF_PROJECT_MANAGEMENT_ID, 
                      MAX(AGENT_TECHNOLOGY_MANAGER_ID) AS AGENT_TECHNOLOGY_MANAGER_ID, MAX(CONTRACTOR_SUPPORT_PATHWAY) 
                      AS CONTRACTOR_SUPPORT_PATHWAY, INVOICE_SYSTEM_ID, MAX(HOLIDAY_INVOICE_ID) AS HOLIDAY_INVOICE_ID, MAX(HOLIDAY) AS HOLIDAY, 
                      MAX(FILE_FORMAT_OF_PUSH) AS FILE_FORMAT_OF_PUSH, MAX(AGENT_PREPARATION_INVOICE_ID) AS AGENT_PREPARATION_INVOICE_ID, 
                      MAX(NEW_ACL) AS NEW_ACL, MAX(CURRENT_CATS) AS CURRENT_CATS, MAX(CATS_ID) AS CATS_ID, MAX(PATS_ID) AS PATS_ID, 
                      MAX(SMART_ELIGIBLE) AS SMART_ELIGIBLE, MAX(SMART_TIER_1) AS SMART_TIER_1, MAX(SMART_TIER_2) AS SMART_TIER_2, 
                      MAX(SMART_TIER_3) AS SMART_TIER_3, MAX(INTERVAL) AS INTERVAL, DATE, MAX(HOD_INTERVAL) AS HOD_INTERVAL, 
                      SUM(AU_DK_LOGGED_IN_DURATION) AS AU_DK_LOGGED_IN_DURATION, SUM(AU_DK_AVAILABLE_DURATION) AS AU_DK_AVAILABLE_DURATION, 
                      SUM(AU_DK_TALK_DURATION) AS AU_DK_TALK_DURATION, SUM(AU_DK_IB_TALK_DURATION) AS AU_DK_IB_TALK_DURATION, 
                      SUM(AU_DK_OB_TALK_DURATION) AS AU_DK_OB_TALK_DURATION, SUM(AU_DK_CONVENTIONAL_ACW) AS AU_DK_CONVENTIONAL_ACW, 
                      SUM(AU_DK_NR_DURATION) AS AU_DK_NR_DURATION, SUM(AU_DK_PSEUDO_PRODUCTIVE_DURATION) 
                      AS AU_DK_PSEUDO_PRODUCTIVE_DURATION, SUM(AU_DK_ADJUSTED_NR_DURATION) AS AU_DK_ADJUSTED_NR_DURATION, 
                      SUM(AU_DK_TOTAL_PRODUCTIVE_DURATION) AS AU_DK_TOTAL_PRODUCTIVE_DURATION, SUM(AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS) 
                      AS AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS, SUM(AU_DK_XFER_COUNT) AS AU_DK_XFER_COUNT, SUM(AU_DK_HOLD_COUNT) 
                      AS AU_DK_HOLD_COUNT, SUM(AU_DK_CONFERENCE_COUNT) AS AU_DK_CONFERENCE_COUNT, SUM(AU_DK_CONSULT_COUNT) 
                      AS AU_DK_CONSULT_COUNT, SUM(AU_DK_PUP_COUNT) AS AU_DK_PUP_COUNT, SUM(AU_DK_OFFERED_COUNT) AS AU_DK_OFFERED_COUNT, 
                      SUM(AU_DK_HANDLED_COUNT) AS AU_DK_HANDLED_COUNT, SUM(AU_DK_IB_HANDLE_COUNT) AS AU_DK_IB_HANDLE_COUNT, 
                      SUM(AU_DK_OB_HANDLE_COUNT) AS AU_DK_OB_HANDLE_COUNT, SUM(AU_DK_RONA_COUNT) AS AU_DK_RONA_COUNT, 
                      SUM(AU_DK_AWR_COUNT) AS AU_DK_AWR_COUNT, SUM(MINIMUM_GUARANTEE) AS MINIMUM_GUARANTEE, SUM(AUTHORIZED_TO_INVOICE) 
                      AS AUTHORIZED_TO_INVOICE, MAX(WEEK_ENDING_DATE) AS WEEK_ENDING_DATE, MAX(PAY_CYCLE_CLOSURE_DATE) 
                      AS PAY_CYCLE_CLOSURE_DATE, MAX(FTP_FILE_NAME) AS FTP_FILE_NAME, MAX(EMAIL) AS EMAIL, MAX(STD_TENANT_START_DATE_TIME_KEY) 
                      AS STD_TENANT_START_DATE_TIME_KEY, MAX(CAL_DATE) AS CAL_DATE, MAX(TENANT_KEY) AS TENANT_KEY, MAX(AIR_DAY_TYPE) 
                      AS AIR_DAY_TYPE, MAX(AIR_ACW_FONT_COLOR) AS AIR_ACW_FONT_COLOR, MAX(MIN_GUARANTEE_RATE) AS MIN_GUARANTEE_RATE, 
                      MAX(MIN_GUARANTEE_TYPE) AS MIN_GUARANTEE_TYPE, MAX(AUTHORIZED_TO_INVOICE_TYPE) AS AUTHORIZED_TO_INVOICE_TYPE, 
                      MAX(HAS_HOLIDAYS) AS HAS_HOLIDAYS, MAX(INCLUDE_IN_CAS) AS INCLUDE_IN_CAS, MAX(READY_FOR_XML) AS READY_FOR_XML, 
                      MAX(SHOW_ID_EXTS) AS SHOW_ID_EXTS, INVOICE_ID, RESOURCE_NAME, MAX(PAY_GROUP) AS PAY_GROUP, SUM(AIRITKDUR) AS AIRITKDUR, 
                      SUM(AIRIACDUR) AS AIRIACDUR, MAX(WS_ROW_CREATED_TIME) AS WS_ROW_CREATED_TIME, MAX(WS_ROW_UPDATED_TIME) 
                      AS WS_ROW_UPDATED_TIME
FROM         dbo.YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA
GROUP BY INVOICE_SYSTEM_ID, DATE, INVOICE_ID, RESOURCE_NAME, INVOICE_MAP_KEY, FIELD_NAME, SCHEDULER_ACL_NAME
GO
PRINT N'Creating [dbo].[GetDate]...';


GO


CREATE FUNCTION [dbo].[GetDate]() RETURNS DATETIME
AS BEGIN
 RETURN getdate() AT TIME ZONE 'UTC' AT TIME ZONE 'Central Standard Time'
END
GO
PRINT N'Creating [dbo].[TVF_APFM_FIVE9_STATES_TO_INTERVALS]...';


GO
-- ===========================================================
-- Author:		ISAAC GUARDIOLA
-- Create date: 2016/07/12
-- Description:	FUNCTION TO PARSE STATE DATA INTO INTERVALS
-- ===========================================================
CREATE FUNCTION [dbo].[TVF_APFM_FIVE9_STATES_TO_INTERVALS]
(
	-- Add the parameters for the function here
	 @FF_DATE					VARCHAR(50)
	,@FF_HOUR					VARCHAR(50)
	,@FF_SKILL_AVAILABILITY		VARCHAR(500)
	,@FF_AGENT_NAME				VARCHAR(100)
	,@FF_STATE					VARCHAR(50)
	,@FF_REASON_CODE			VARCHAR(50)
	,@FF_AGENT_STATE_TIME		VARCHAR(50)
	,@FF_TIMESTAMP				VARCHAR(50)
	,@EVENT_START_TIME			DATETIME
	,@EVENT_DURATION_SECS		DECIMAL(10,2)
	,@SEQNO_ADDED_TIME			DATETIME
	,@SEQNO						INT
	,@FTP_FILE_NAME				VARCHAR(100)
	,@INTERVAL_SECS				INT
)
RETURNS 
 @RESULTS_TABLE	TABLE
(
	-- Add the column definitions for the TABLE variable here
	 FF_DATE							VARCHAR(50)
	,FF_HOUR							VARCHAR(50)
	,FF_SKILL_AVAILABILITY				VARCHAR(500)
	,FF_AGENT_NAME						VARCHAR(100)
	,FF_STATE							VARCHAR(50)
	,FF_REASON_CODE						VARCHAR(50)
	,FF_AGENT_STATE_TIME				VARCHAR(50)
	,FF_TIMESTAMP						VARCHAR(50)
	,EVENT_START_TIME					DATETIME
	,EVENT_DURATION_SECS				DECIMAL(10,2)
	,INTERVAL_START_TIME				DATETIME
	,INTERVAL_END_TIME					DATETIME
	,EVENT_DURATION_IN_INTERVAL_SECS	FLOAT
	,SEQNO_ADDED_TIME					DATETIME
	,SEQNO								INT
	,FTP_FILE_NAME						VARCHAR(100)
)
AS
BEGIN
	-- Fill the table variable with the rows for your result set
	
	DECLARE @EVENT_SECOND_OF_DAY	INT
	SET @EVENT_SECOND_OF_DAY = DATEPART(HOUR,@EVENT_START_TIME) * 3600 + DATEPART(MINUTE,@EVENT_START_TIME) * 60 + DATEPART(SECOND,@EVENT_START_TIME)

	DECLARE @INTERVAL_START_SECOND	INT
	SET @INTERVAL_START_SECOND	= @EVENT_SECOND_OF_DAY - @EVENT_SECOND_OF_DAY % @INTERVAL_SECS

	DECLARE @INTERVAL_START_TIME	DATETIME
	SET @INTERVAL_START_TIME	= DATEADD(SECOND, @INTERVAL_START_SECOND, CAST(FLOOR(CAST(@EVENT_START_TIME AS FLOAT)) AS DATETIME))

	DECLARE @INTERVAL_END_TIME		DATETIME
	SET @INTERVAL_END_TIME		= DATEADD(SECOND, @INTERVAL_SECS, @INTERVAL_START_TIME)

	DECLARE @EVENT_DURATION_IN_INTERVAL_SECS	FLOAT
	
	WHILE (@EVENT_DURATION_SECS > 0)
	BEGIN

		SET @EVENT_DURATION_IN_INTERVAL_SECS = CAST(@INTERVAL_END_TIME - @EVENT_START_TIME AS FLOAT) * 24 * 60 * 60
		IF @EVENT_DURATION_SECS < @EVENT_DURATION_IN_INTERVAL_SECS
			SET @EVENT_DURATION_IN_INTERVAL_SECS = @EVENT_DURATION_SECS

		INSERT INTO @RESULTS_TABLE
		SELECT
		 @FF_DATE
		,@FF_HOUR
		,@FF_SKILL_AVAILABILITY
		,@FF_AGENT_NAME
		,@FF_STATE
		,@FF_REASON_CODE
		,@FF_AGENT_STATE_TIME
		,@FF_TIMESTAMP
		,@EVENT_START_TIME
		,@EVENT_DURATION_SECS
		,@INTERVAL_START_TIME
		,@INTERVAL_END_TIME
		,@EVENT_DURATION_IN_INTERVAL_SECS
		,@SEQNO_ADDED_TIME
		,@SEQNO
		,@FTP_FILE_NAME

		SET @EVENT_DURATION_SECS	= @EVENT_DURATION_SECS - @EVENT_DURATION_IN_INTERVAL_SECS
		SET @EVENT_START_TIME		= @INTERVAL_END_TIME

		SET @INTERVAL_START_TIME	= @INTERVAL_END_TIME
		SET @INTERVAL_END_TIME		= DATEADD(SECOND, @INTERVAL_SECS, @INTERVAL_END_TIME)

	END

	RETURN 
END
GO
PRINT N'Creating [dbo].[TVF_BRIGHT_PATTERN_STATES_TO_INTERVALS]...';


GO

-- ===========================================================
-- Author:		ISAAC GUARDIOLA
-- Create date: 2017/10/18
-- Description:	FUNCTION TO PARSE STATE DATA INTO INTERVALS
-- ===========================================================
CREATE FUNCTION [dbo].[TVF_BRIGHT_PATTERN_STATES_TO_INTERVALS]
(
	-- Add the parameters for the function here
	 @FF_TIME					VARCHAR(50)
	,@FF_LOGIN_ID				VARCHAR(50)
	,@FF_AGENT_FIRST_NAME		VARCHAR(50)
	,@FF_AGENT_LAST_NAME		VARCHAR(50)
	,@FF_TEAM					VARCHAR(50)
	,@FF_ACTIVITY				VARCHAR(50)
	,@FF_DURATION				VARCHAR(50)
	,@FF_DETAIL					VARCHAR(50)
	,@FF_SERVICE				VARCHAR(200)
	,@FF_MEDIA_TYPE				VARCHAR(50)
	,@FF_GLOBAL_ID				VARCHAR(100)
	,@EVENT_START_TIME			DATETIME
	,@EVENT_DURATION_SECS		DECIMAL(10,2)
	,@EVENT_END_TIME			DATETIME
	,@SEQNO_ADDED_TIME			DATETIME
	,@SEQNO						INT
	,@FTP_FILE_NAME				VARCHAR(100)
	,@INTERVAL_SECS				INT
)
RETURNS 
 @RESULTS_TABLE	TABLE
(
	-- Add the column definitions for the TABLE variable here
	 FF_TIME							VARCHAR(50)
	,FF_LOGIN_ID						VARCHAR(50)
	,FF_AGENT_FIRST_NAME				VARCHAR(50)
	,FF_AGENT_LAST_NAME					VARCHAR(50)
	,FF_TEAM							VARCHAR(50)
	,FF_ACTIVITY						VARCHAR(50)
	,FF_DURATION						VARCHAR(50)
	,FF_DETAIL							VARCHAR(50)
	,FF_SERVICE							VARCHAR(200)
	,FF_MEDIA_TYPE						VARCHAR(50)
	,FF_GLOBAL_ID						VARCHAR(100)
	,EVENT_START_TIME					DATETIME
	,EVENT_DURATION_SECS				DECIMAL(10,2)
	,EVENT_END_TIME						DATETIME
	,INTERVAL_START_TIME				DATETIME
	,INTERVAL_END_TIME					DATETIME
	,EVENT_DURATION_IN_INTERVAL_SECS	FLOAT
	,SEQNO_ADDED_TIME					DATETIME
	,SEQNO								INT
	,FTP_FILE_NAME						VARCHAR(100)
)
AS
BEGIN
	-- Fill the table variable with the rows for your result set
	
	DECLARE @EVENT_SECOND_OF_DAY	INT
	SET @EVENT_SECOND_OF_DAY = DATEPART(HOUR,@EVENT_START_TIME) * 3600 + DATEPART(MINUTE,@EVENT_START_TIME) * 60 + DATEPART(SECOND,@EVENT_START_TIME)

	DECLARE @INTERVAL_START_SECOND	INT
	SET @INTERVAL_START_SECOND	= @EVENT_SECOND_OF_DAY - @EVENT_SECOND_OF_DAY % @INTERVAL_SECS

	DECLARE @INTERVAL_START_TIME	DATETIME
	SET @INTERVAL_START_TIME	= DATEADD(SECOND, @INTERVAL_START_SECOND, CAST(FLOOR(CAST(@EVENT_START_TIME AS FLOAT)) AS DATETIME))

	DECLARE @INTERVAL_END_TIME		DATETIME
	SET @INTERVAL_END_TIME		= DATEADD(SECOND, @INTERVAL_SECS, @INTERVAL_START_TIME)

	DECLARE @EVENT_DURATION_IN_INTERVAL_SECS	FLOAT
	
	WHILE (@EVENT_DURATION_SECS > 0)
	BEGIN

		SET @EVENT_DURATION_IN_INTERVAL_SECS = CAST(@INTERVAL_END_TIME - @EVENT_START_TIME AS FLOAT) * 24 * 60 * 60
		IF @EVENT_DURATION_SECS < @EVENT_DURATION_IN_INTERVAL_SECS
			SET @EVENT_DURATION_IN_INTERVAL_SECS = @EVENT_DURATION_SECS

		INSERT INTO @RESULTS_TABLE
		SELECT
		 @FF_TIME
		,@FF_LOGIN_ID
		,@FF_AGENT_FIRST_NAME
		,@FF_AGENT_LAST_NAME
		,@FF_TEAM
		,@FF_ACTIVITY
		,@FF_DURATION
		,@FF_DETAIL
		,@FF_SERVICE
		,@FF_MEDIA_TYPE
		,@FF_GLOBAL_ID
		,@EVENT_START_TIME
		,@EVENT_DURATION_SECS
		,@EVENT_END_TIME
		,@INTERVAL_START_TIME
		,@INTERVAL_END_TIME
		,@EVENT_DURATION_IN_INTERVAL_SECS
		,@SEQNO_ADDED_TIME
		,@SEQNO
		,@FTP_FILE_NAME

		SET @EVENT_DURATION_SECS	= @EVENT_DURATION_SECS - @EVENT_DURATION_IN_INTERVAL_SECS
		SET @EVENT_START_TIME		= @INTERVAL_END_TIME

		SET @INTERVAL_START_TIME	= @INTERVAL_END_TIME
		SET @INTERVAL_END_TIME		= DATEADD(SECOND, @INTERVAL_SECS, @INTERVAL_END_TIME)

	END

	RETURN 
END
GO
PRINT N'Creating [dbo].[TVF_GA_STATES_TO_INTERVALS]...';


GO
-- ===========================================================
-- Author:		ISAAC GUARDIOLA
-- Create date: 2017/01/09
-- Description:	FUNCTION TO PARSE STATE DATA INTO INTERVALS
-- ===========================================================
CREATE FUNCTION [dbo].[TVF_GA_STATES_TO_INTERVALS]
(
	-- Add the parameters for the function here
	 @FF_RECORD_ID				VARCHAR(100)
	,@FF_DATE					VARCHAR(50)
	,@FF_AGENT_ID				VARCHAR(50)
	,@FF_AGENT_NAME				VARCHAR(100)
	,@FF_EVENT_KEY				VARCHAR(200)
	,@FF_EVENT_START_TIME		VARCHAR(50)
	,@FF_AGENT_STATE			VARCHAR(100)
	,@FF_EVENT_DURATION			VARCHAR(50)
	,@EVENT_START_TIME			DATETIME
	,@EVENT_DURATION_SECS		DECIMAL(10,2)
	,@SEQNO_ADDED_TIME			DATETIME
	,@SEQNO						INT
	,@FTP_FILE_NAME				VARCHAR(100)
	,@INTERVAL_SECS				INT
)
RETURNS 
 @RESULTS_TABLE	TABLE
(
	-- Add the column definitions for the TABLE variable here
	 FF_RECORD_ID						VARCHAR(100)
	,FF_DATE							VARCHAR(50)
	,FF_AGENT_ID						VARCHAR(50)
	,FF_AGENT_NAME						VARCHAR(100)
	,FF_EVENT_KEY						VARCHAR(200)
	,FF_EVENT_START_TIME				VARCHAR(50)
	,FF_AGENT_STATE						VARCHAR(100)
	,FF_EVENT_DURATION					VARCHAR(50)
	,EVENT_START_TIME					DATETIME
	,EVENT_DURATION_SECS				DECIMAL(10,2)
	,INTERVAL_START_TIME				DATETIME
	,INTERVAL_END_TIME					DATETIME
	,EVENT_DURATION_IN_INTERVAL_SECS	FLOAT
	,SEQNO_ADDED_TIME					DATETIME
	,SEQNO								INT
	,FTP_FILE_NAME						VARCHAR(100)
)
AS
BEGIN
	-- Fill the table variable with the rows for your result set
	
	DECLARE @EVENT_SECOND_OF_DAY	INT
	SET @EVENT_SECOND_OF_DAY = DATEPART(HOUR,@EVENT_START_TIME) * 3600 + DATEPART(MINUTE,@EVENT_START_TIME) * 60 + DATEPART(SECOND,@EVENT_START_TIME)

	DECLARE @INTERVAL_START_SECOND	INT
	SET @INTERVAL_START_SECOND	= @EVENT_SECOND_OF_DAY - @EVENT_SECOND_OF_DAY % @INTERVAL_SECS

	DECLARE @INTERVAL_START_TIME	DATETIME
	SET @INTERVAL_START_TIME	= DATEADD(SECOND, @INTERVAL_START_SECOND, CAST(FLOOR(CAST(@EVENT_START_TIME AS FLOAT)) AS DATETIME))

	DECLARE @INTERVAL_END_TIME		DATETIME
	SET @INTERVAL_END_TIME		= DATEADD(SECOND, @INTERVAL_SECS, @INTERVAL_START_TIME)

	DECLARE @EVENT_DURATION_IN_INTERVAL_SECS	FLOAT
	
	WHILE (@EVENT_DURATION_SECS > 0)
	BEGIN

		SET @EVENT_DURATION_IN_INTERVAL_SECS = CAST(@INTERVAL_END_TIME - @EVENT_START_TIME AS FLOAT) * 24 * 60 * 60
		IF @EVENT_DURATION_SECS < @EVENT_DURATION_IN_INTERVAL_SECS
			SET @EVENT_DURATION_IN_INTERVAL_SECS = @EVENT_DURATION_SECS

		INSERT INTO @RESULTS_TABLE
		SELECT
		 @FF_RECORD_ID
		,@FF_DATE
		,@FF_AGENT_ID
		,@FF_AGENT_NAME
		,@FF_EVENT_KEY
		,@FF_EVENT_START_TIME
		,@FF_AGENT_STATE
		,@FF_EVENT_DURATION
		,@EVENT_START_TIME
		,@EVENT_DURATION_SECS
		,@INTERVAL_START_TIME
		,@INTERVAL_END_TIME
		,@EVENT_DURATION_IN_INTERVAL_SECS
		,@SEQNO_ADDED_TIME
		,@SEQNO
		,@FTP_FILE_NAME

		SET @EVENT_DURATION_SECS	= @EVENT_DURATION_SECS - @EVENT_DURATION_IN_INTERVAL_SECS
		SET @EVENT_START_TIME		= @INTERVAL_END_TIME

		SET @INTERVAL_START_TIME	= @INTERVAL_END_TIME
		SET @INTERVAL_END_TIME		= DATEADD(SECOND, @INTERVAL_SECS, @INTERVAL_END_TIME)

	END

	RETURN 
END
GO
PRINT N'Creating [dbo].[TVF_MONAT_STATES_TO_INTERVALS]...';


GO
-- ===========================================================
-- Author:		ISAAC GUARDIOLA
-- Create date: 2017/09/18
-- Description:	FUNCTION TO PARSE STATE DATA INTO INTERVALS
-- ===========================================================
CREATE FUNCTION [dbo].[TVF_MONAT_STATES_TO_INTERVALS]
(
	-- Add the parameters for the function here
	 @FF_AGENT					VARCHAR(200)
	,@FF_STATE_START_TIME		VARCHAR(50)
	,@FF_AGENT_STATE			VARCHAR(200)
	,@FF_REASON_CODE			VARCHAR(500)
	,@FF_DURATION				VARCHAR(50)
	,@EVENT_START_TIME			DATETIME
	,@EVENT_DURATION_SECS		DECIMAL(10,2)
	,@SEQNO_ADDED_TIME			DATETIME
	,@SEQNO						INT
	,@FTP_FILE_NAME				VARCHAR(100)
	,@INTERVAL_SECS				INT
)
RETURNS 
 @RESULTS_TABLE	TABLE
(
	-- Add the column definitions for the TABLE variable here
	 FF_AGENT							VARCHAR(200)
	,FF_STATE_START_TIME				VARCHAR(50)
	,FF_AGENT_STATE						VARCHAR(200)
	,FF_REASON_CODE						VARCHAR(500)
	,FF_DURATION						VARCHAR(50)
	,EVENT_START_TIME					DATETIME
	,EVENT_DURATION_SECS				DECIMAL(10,2)
	,INTERVAL_START_TIME				DATETIME
	,INTERVAL_END_TIME					DATETIME
	,EVENT_DURATION_IN_INTERVAL_SECS	FLOAT
	,SEQNO_ADDED_TIME					DATETIME
	,SEQNO								INT
	,FTP_FILE_NAME						VARCHAR(100)
)
AS
BEGIN
	-- Fill the table variable with the rows for your result set
	
	DECLARE @EVENT_SECOND_OF_DAY	INT
	SET @EVENT_SECOND_OF_DAY = DATEPART(HOUR,@EVENT_START_TIME) * 3600 + DATEPART(MINUTE,@EVENT_START_TIME) * 60 + DATEPART(SECOND,@EVENT_START_TIME)

	DECLARE @INTERVAL_START_SECOND	INT
	SET @INTERVAL_START_SECOND	= @EVENT_SECOND_OF_DAY - @EVENT_SECOND_OF_DAY % @INTERVAL_SECS

	DECLARE @INTERVAL_START_TIME	DATETIME
	SET @INTERVAL_START_TIME	= DATEADD(SECOND, @INTERVAL_START_SECOND, CAST(FLOOR(CAST(@EVENT_START_TIME AS FLOAT)) AS DATETIME))

	DECLARE @INTERVAL_END_TIME		DATETIME
	SET @INTERVAL_END_TIME		= DATEADD(SECOND, @INTERVAL_SECS, @INTERVAL_START_TIME)

	DECLARE @EVENT_DURATION_IN_INTERVAL_SECS	FLOAT
	
	WHILE (@EVENT_DURATION_SECS > 0)
	BEGIN

		SET @EVENT_DURATION_IN_INTERVAL_SECS = CAST(@INTERVAL_END_TIME - @EVENT_START_TIME AS FLOAT) * 24 * 60 * 60
		IF @EVENT_DURATION_SECS < @EVENT_DURATION_IN_INTERVAL_SECS
			SET @EVENT_DURATION_IN_INTERVAL_SECS = @EVENT_DURATION_SECS

		INSERT INTO @RESULTS_TABLE
		SELECT
		 @FF_AGENT
		,@FF_STATE_START_TIME
		,@FF_AGENT_STATE
		,@FF_REASON_CODE
		,@FF_DURATION
		,@EVENT_START_TIME
		,@EVENT_DURATION_SECS
		,@INTERVAL_START_TIME
		,@INTERVAL_END_TIME
		,@EVENT_DURATION_IN_INTERVAL_SECS
		,@SEQNO_ADDED_TIME
		,@SEQNO
		,@FTP_FILE_NAME

		SET @EVENT_DURATION_SECS	= @EVENT_DURATION_SECS - @EVENT_DURATION_IN_INTERVAL_SECS
		SET @EVENT_START_TIME		= @INTERVAL_END_TIME

		SET @INTERVAL_START_TIME	= @INTERVAL_END_TIME
		SET @INTERVAL_END_TIME		= DATEADD(SECOND, @INTERVAL_SECS, @INTERVAL_END_TIME)

	END

	RETURN 
END
GO
PRINT N'Creating [dbo].[sp_GetRowsForAllTables]...';


GO


Create Procedure [dbo].[sp_GetRowsForAllTables]
@DBName varchar(128) = null
as

	set nocount on
	if @DBName is null
		set @DBName = db_name()

	create table #a
	(TableName varchar(128), norows int null, id int identity(1,1))
	
declare	@id		int ,
	@maxID		int ,
	@TableName	varchar(128) ,
	@FKName		varchar(128) ,
	@cmd		nvarchar(1000) ,
	@rc		int, 
	@spcmd		varchar(1000)
	
	set @cmd = 'exec ' + @DBName + '..sp_executesql N''insert #a (TableName) 
			select TABLE_NAME from information_schema.tables
			where TABLE_TYPE = ''''BASE TABLE'''' ''
		'
	exec (@cmd)
	
	select 	@id = 0 ,
		@maxID = max(id)
	from	#a
	
	while @id < @maxID
	begin
		select 	@id = min(id)
		from	#a
		where	id > @id
		
		select	@TableName = TableName
		from	#a
		where 	id = @id
		
		set	@cmd = 'exec ' + @DBName + '..sp_executesql N''update #a set norows = (select rows from sysindexes where indid in (0,1) and id = object_id(''''' + @TableName + '''''))'
		set	@cmd = @cmd + ' where #a.id = ' + convert(varchar(10),@id) + ''''
		
		exec  (@cmd)
		if @rc <> 0 or @@error <> 0
		begin
			raiserror('failed %s',16,-1,@TableName)
			return
		end
	end

	select * from #a

	drop table #a
GO
PRINT N'Creating [dbo].[usp_ExampleProc]...';


GO

CREATE PROCEDURE usp_ExampleProc
AS
	SELECT * FROM BOGUS_TABLE;
GO
PRINT N'Creating [dbo].[usp_SQL_JOB_ERRORS__GET]...';


GO

CREATE PROCEDURE [dbo].[usp_SQL_JOB_ERRORS__GET]
AS
SET NOCOUNT ON  

--  EXECUTE [dbo].[usp_SQL_JOB_ERRORS__GET] 

--	SELECT * FROM WSOL_TB_SQL_JOB_ERRORS ORDER BY CST_ROW_CREATED_TIME DESC

--===========================================================================

--===========================================================================
SELECT TOP 15
 SQL_JOB_NM
,CST_ROW_CREATED_TIME
,ERROR_MSG
FROM WSOL_TB_SQL_JOB_ERRORS
ORDER BY
 CST_ROW_CREATED_TIME DESC
GO
PRINT N'Creating [dbo].[usp_SQL_JOB_ERRORS__SET]...';


GO
CREATE PROCEDURE [dbo].[usp_SQL_JOB_ERRORS__SET]
 @TENANT_KEY      VARCHAR(10)   --'0' FOR ALL.
,@SQL_JOB_NM      VARCHAR(100)  --'WSOL_...'
,@ERROR_MSG       VARCHAR(2500) --
,@TYPE_MSC        VARCHAR(10)   --
AS
SET NOCOUNT ON  

-- EXECUTE [dbo].[usp_SQL_JOB_ERRORS__SET] '900900','WD_Import__50_Move_Files_To_Archive_Or_Failed','Job Failed.','I'

-- SELECT * FROM WSOL_TB_SQL_JOB_ERRORS ORDER BY CST_ROW_CREATED_TIME DESC

--===========================================================================

--===========================================================================
INSERT INTO WSOL_TB_SQL_JOB_ERRORS
SELECT 
 @TENANT_KEY
,@SQL_JOB_NM
,dbo.GETDATE()  --@CST_ROW_CREATED_TIME
,@ERROR_MSG

--Run WSOL_Systems / SQL_JOB_ERRORS report: (It is an email subscription)


--Commented by Impiger.  "Reportserver.dbo." format incompatible in SQL Azure--

--EXEC ReportServer.dbo.AddEvent @EventType='TimedSubscription', @EventData='0E104EFD-EA52-438D-9F0C-17BC3989B0D2'---



--The report 'gets' from the WSOL_TB_SQL_JOB_ERRORS table, that was just populated.


--RAISERROR('SQL Job, ' + @SQL_JOB_NM + ', has failed !', 16, 1)  
----RETURN -100
GO
PRINT N'Creating [dbo].[usp_SQL_JOBS_ON_FAILURE_ERRORS__GET]...';


GO
CREATE PROCEDURE [dbo].[usp_SQL_JOBS_ON_FAILURE_ERRORS__GET]
AS
SET NOCOUNT ON  

--  EXECUTE [dbo].[usp_SQL_JOBS_ON_FAILURE_ERRORS__GET] 

--SELECT * FROM YZ_TB_SQL_JOBS_ON_FAILURE_ERRORS ORDER BY CST_ROW_CREATED_TIME DESC

--Would have to create an email subscription for each of the tenants !!!
--===========================================================================

--===========================================================================
SELECT TOP 15
 SQL_JOB_NM
,CST_ROW_CREATED_TIME
,ERROR_MSG
FROM YZ_TB_SQL_JOBS_ON_FAILURE_ERRORS
ORDER BY
 CST_ROW_CREATED_TIME DESC
GO
PRINT N'Creating [dbo].[usp_SQL_JOBS_ON_FAILURE_ERRORS__SET]...';


GO


CREATE PROCEDURE [dbo].[usp_SQL_JOBS_ON_FAILURE_ERRORS__SET]
 @TENANT_KEY      VARCHAR(10)   --'0' FOR ALL.
,@SQL_JOB_NM      VARCHAR(100)  --'YZ_...'
,@ERROR_MSG       VARCHAR(2500) --
,@TYPE_MSC        VARCHAR(10)   --
AS
SET NOCOUNT ON  

--  EXECUTE [dbo].[usp_SQL_JOBS_ON_FAILURE_ERRORS__SET] '900543','YZ_IMPORTS_NINE_WEST__70_Detail_CAS_File_Into_Email','Job Failed.','I'

--SELECT * FROM YZ_TB_SQL_JOBS_ON_FAILURE_ERRORS ORDER BY CST_ROW_CREATED_TIME DESC

--===========================================================================

--===========================================================================
INSERT INTO YZ_TB_SQL_JOBS_ON_FAILURE_ERRORS
SELECT 
 @TENANT_KEY
,@SQL_JOB_NM
,dbo.getdate()  --@CST_ROW_CREATED_TIME
,@ERROR_MSG

--Run wSystems / SQL_JOBS_ON_FAILURE_ERRORS report: (It is an email subscription)

--EXEC ReportServer.dbo.AddEvent @EventType='TimedSubscription', @EventData='8598EAAA-669B-47CE-970B-3EE49FB230A1'

--The report 'gets' from the YZ_TB_SQL_JOBS_ON_FAILURE_ERRORS table, that was just populated.


--RAISERROR('SQL Job, ' + @SQL_JOB_NM + ', has failed !', 16, 1)  
----RETURN -100
GO
PRINT N'Creating [dbo].[uspIMPORTS_APFM_AIA_AGENT_MAPPING_IMPORT]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_APFM_AIA_AGENT_MAPPING_IMPORT]
AS
SET NOCOUNT ON  -- EXECUTE [dbo].[uspIMPORTS_APFM_AIA_AGENT_MAPPING_IMPORT]

--  DELETE FROM YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_1

--  SELECT * FROM YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_1

--Data Loading FTP Pathway
--  FTP server   = ftp.workingsol.com
--  FTP Username = global_imports
--  FTP Password = Welcome2013
--  FTP Pathway  = /BI/DanThola/APFM/AIA_AGENT_MAPPING

--USES YZ_TB_ERRORS_FOUND.  NOT TOTALLY INDEPENDANT OF OTHER CLIENTS/TENANTS...

--=============================================  --COPY AND REPLACE THESE VARIABLES WHEN CREATING NEW USP FROM THIS USP.
DECLARE
 @TENANT_KEY      INT
,@SUB_GROUP_NAME  VARCHAR(50)
SET @TENANT_KEY     =       900626  --APFM    --will begin with 900+ for external tenants.  the '900' is Not part of yz_tb_tenant_key in YZ_TB_TENANTS table.
SET @SUB_GROUP_NAME = 'APFM_AIA_AGENT_MAPPING'
--=============================================
--WHEN RUNNING MANUALLY DURING TESTING:DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900626  AND SUB_GROUP_NAME = 'APFM_AIA_AGENT_MAPPING'
DELETE FROM YZ_TB_ERRORS_FOUND 
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = @SUB_GROUP_NAME  --'APFM_AIA_AGENT_MAPPING'    --  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900626
--=============================================
--WHEN RUNNING MANUALLY DURING TESTING:DELETE FROM YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_ERRORS WHERE TENANT_KEY = 900626  AND IMPORT_SUB_GROUP_NAME = 'APFM_AIA_AGENT_MAPPING'
DELETE FROM YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_ERRORS
WHERE IMPORT_SUB_GROUP_NAME = @SUB_GROUP_NAME  --'APFM_AIA_AGENT_MAPPING' --SELECT * FROM YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_ERRORS WHERE TENANT_KEY = 900626
--=============================================
--=============================================
--THE ELIMINATION OF THE 'SPECIAL CHARACTER' !!!
--  This ' ' is a special character!! and maybe just a cocky space!!!
--  Hightlight it and do ctl+f, on suspected data, you'll see it isn't a space !
--=============================================
UPDATE YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_1 SET
 INVOICE_MAP_KEY          = RTRIM(LTRIM(REPLACE(ISNULL(INVOICE_MAP_KEY,''),' ',' ')))    
,FF_OFFICIAL_ACL_NAME     = RTRIM(LTRIM(REPLACE(ISNULL(FF_OFFICIAL_ACL_NAME,''),' ',' ')))
,FF_EMAIL_ADDRESS		  = RTRIM(LTRIM(REPLACE(ISNULL(FF_EMAIL_ADDRESS,''),' ',' ')))

--=============================================
--  SELECT * FROM YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_1
--=============================================

--=============================================
--POPULATE ANY/OTHER ADDITIONAL FIELDS IN WORK TABLE (_1) THAT WEREN'T IN IMPORTED FILE:
--=============================================
UPDATE YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_1 SET
 RESOURCE_NAME = INVOICE_MAP_KEY
,[EMAIL]	   = FF_EMAIL_ADDRESS

--  SELECT * FROM YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_ERRORS
--======================================================================
--PROCESS DUPLICATES:
--======================================================================
INSERT INTO YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_ERRORS
SELECT
 W1.RESOURCE_NAME
,W1.[EMAIL]
,W1.INVOICE_MAP_KEY
,W1.FF_OFFICIAL_ACL_NAME
,W1.FF_EMAIL_ADDRESS
,W1.FTP_FILE_NAME
,dbo.getdate()        --WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'APFM_AIA_AGENT_MAPPING'  --IMPORT_SUB_GROUP_NAME
,'DUP'            --ERROR_TAG
,'The FIVE9 AGENT NAME exists more than once in the agent mapping file.'  --ERROR_MSG
--  SELECT *  
FROM YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_1  W1
INNER JOIN
(	SELECT
	 INVOICE_MAP_KEY
	,ROW_NUMBER() over (partition by INVOICE_MAP_KEY
                            order by INVOICE_MAP_KEY) ROWNO
	FROM YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_1
) TNM  ON TNM.INVOICE_MAP_KEY = W1.INVOICE_MAP_KEY

LEFT OUTER JOIN YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_ERRORS AME   ON AME.INVOICE_MAP_KEY = W1.INVOICE_MAP_KEY

WHERE TNM.ROWNO > 1   

  AND ISNULL(AME.ERROR_TAG,'') = ''   --THE JOIN TO AME AND THIS LINE IS NOT REALLY NECESSARY SINCE THIS IS FIRST INSERTS INTO AME.!!!

----=============================================
----DELETE DUPLICATES FROM WORK (_1) TABLE:
----  THERE IS NO WAY TO KNOW WHICH DUPLICATE SHOULD BE KEPT AND WHICH SHOULD BE DELETED, SO THEY BOTH GET DELETED AND PM CAN CORRECT AND SO ON...
----=============================================
--DON'T NEED TO DO DELETES, BECAUSE THE RECORDS NEEDING TO BE DELETED EXIST IN THE MAPPING ERRORS TABLE.
--  THE MAPPING ERRORS TABLE CAN BE USED BELOW WHEN DOING THE INSERT INTO THE PERMANENT TABLE, SO THAT THE BAD RECORDS IN THE WORK TABLE DON'T GET INSERTED.
--===============================================

--=============================================	--Hopefully generic enough for all Tenant SSIS to use!
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=============================================
--WHEN RUNNING MANUALLY DURING TESTING:INSERT INTO YZ_TB_ERRORS_FOUND SELECT 900626,'APFM_AIA_AGENT_MAPPING',''              
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--SQL won't insert special characters!!!  + CHAR(9)  --CHAR(10) + CHAR(13)
--Check #1:  ===================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_1)
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + '1) File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	--SSIS reads yz_tb_errors_found table where tenant_key = 900626, and if record exists, outputs results/error_msg field in an email.
	INSERT INTO YZ_TB_ERRORS_FOUND
	SELECT 
	 @TENANT_KEY      --TENANT_KEY
	,@SUB_GROUP_NAME  --'APFM_AIA_AGENT_MAPPING'   --SUB_GROUP_NAME
	,@MSG1            --ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	--=============================================
	--Have to return a record for SSIS, no matter what, otherwise the f thing needs it's mommy:  Can't figure out how to get SSIS to work otherwise!!!
	INSERT INTO YZ_TB_ERRORS_FOUND
	SELECT 
	 @TENANT_KEY      --TENANT_KEY
	,@SUB_GROUP_NAME  --'APFM_AIA_AGENT_MAPPING'   --SUB_GROUP_NAME
	,''               --ERROR_MSG  --Never make this @MSG1 !!!  Must stay as ''.
	--Do NOT want to got to early exit here because data was good, according to 'checks'!  We want to import data into permanent table.
END
--IN SSIS, WOULD SELECT FROM TABLE WHERE TENANT_KEY = 900626 AND STORE IN SSIS VARIABLE.  IF VARIABLE NOT EMPTY, WILL SEND EMAIL AND END SSIS...
--=============================================

--======================================================================
--PROCESS BAD OFFICIAL ACL NAME VALUES:
--======================================================================
INSERT INTO YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_ERRORS
SELECT
 W1.RESOURCE_NAME
,W1.[EMAIL]
,W1.INVOICE_MAP_KEY
,W1.FF_OFFICIAL_ACL_NAME
,W1.FF_EMAIL_ADDRESS
,W1.FTP_FILE_NAME
,dbo.getdate()        --WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'APFM_AIA_AGENT_MAPPING'  --IMPORT_SUB_GROUP_NAME
,'ACL'            --ERROR_TAG
,'The OFFICIAL ACL NAME Identifier is invalid or is missing in AIA Agent Mapping file.'  --ERROR_MSG
--  SELECT *  
FROM            YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_1           W1

LEFT JOIN       YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_ERRORS          AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
WHERE ISNULL(W1.FF_OFFICIAL_ACL_NAME,'') NOT IN ('','APFM Resource Agents','APFM Standard Agents','APFM Standard Agents R2')

  AND ISNULL(AME.ERROR_TAG,'') = ''

--======================================================================
--PROCESS MISSING INVOICE MAP KEY VALUES:
--======================================================================
INSERT INTO YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_ERRORS
SELECT
 W1.RESOURCE_NAME
,W1.[EMAIL]
,W1.INVOICE_MAP_KEY
,W1.FF_OFFICIAL_ACL_NAME
,W1.FF_EMAIL_ADDRESS
,W1.FTP_FILE_NAME
,dbo.getdate()        --WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'APFM_AIA_AGENT_MAPPING'  --IMPORT_SUB_GROUP_NAME
,'MAP'            --ERROR_TAG
,'The FIVE9 AGENT NAME is missing in the AIA Agent Mapping file.'  --ERROR_MSG
--  SELECT *  
FROM            YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_1           W1

LEFT JOIN       YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_ERRORS          AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
WHERE ISNULL(W1.INVOICE_MAP_KEY,'') = ''  -- Currently equal to the FIVE9_AGENT_NAME

  AND ISNULL(AME.ERROR_TAG,'') = ''

--=============================================
--DELETE RECORDS WITH INVALID SCHEDULER_ACL_NAME(S):
--=============================================
--DON'T NEED TO DO DELETES, BECAUSE THE RECORDS NEEDING TO BE DELETED EXIST IN THE MAPPING ERRORS TABLE.
--  THE MAPPING ERRORS TABLE CAN BE USED BELOW WHEN DOING THE INSERT INTO THE PERMANENT TABLE, SO THAT THE BAD RECORDS IN THE WORK TABLE DON'T GET INSERTED.
--=============================================

--!!! UPDATING """PERMANENT""" TABLE HERE: !!!
--=============================================
--UPDATE PERMANENT TABLE WITH WORK TABLE DATA WHERE TENANT_KEY AND INVOICE_MAP_KEY FIELDS/VALUES MATCH:
--=============================================
UPDATE YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING SET
 RESOURCE_NAME		  = W1.RESOURCE_NAME
,[EMAIL]			  = W1.[EMAIL]
,INVOICE_MAP_KEY	  = W1.INVOICE_MAP_KEY
,FF_OFFICIAL_ACL_NAME = W1.FF_OFFICIAL_ACL_NAME
,FF_EMAIL_ADDRESS	  = W1.FF_EMAIL_ADDRESS
,FTP_FILE_NAME		  = W1.FTP_FILE_NAME
--,WS_ROW_CREATED_TIME
,CST_ROW_UPDATED_TIME = dbo.getdate()
--  SELECT *
FROM            YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_1          W1
--INNER JOIN MUST BE HERE.  NEVER CHANGE!
INNER JOIN      YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING            G     ON G.INVOICE_MAP_KEY        = W1.INVOICE_MAP_KEY
LEFT JOIN       YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_ERRORS     AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
--Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE ISNULL(AME.ERROR_TAG,'') = ''

  AND (   ( G.RESOURCE_NAME		   <> W1.RESOURCE_NAME )
	   OR ( G.[EMAIL]			   <> W1.[EMAIL] )
	   OR ( G.INVOICE_MAP_KEY	   <> W1.INVOICE_MAP_KEY )
	   OR ( G.FF_OFFICIAL_ACL_NAME <> W1.FF_OFFICIAL_ACL_NAME )
       OR ( G.FF_EMAIL_ADDRESS     <> W1.FF_EMAIL_ADDRESS )
	  )

--  SELECT * FROM YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING
--!!! INSERTING INTO """PERMANENT""" TABLE HERE: !!!
--=============================================
--INSERT "NEW" DATA FROM WORK TABLE INTO PERMANENT TABLE: 
--=============================================
INSERT INTO YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING
SELECT
 W1.RESOURCE_NAME    
,W1.[EMAIL]          
,W1.INVOICE_MAP_KEY  
,W1.FF_OFFICIAL_ACL_NAME
,W1.FF_EMAIL_ADDRESS
,W1.FTP_FILE_NAME
,dbo.getdate()        --WS_ROW_CREATED_TIME
,NULL             --WS_ROW_UPDATED_TIME

FROM            YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_1          W1
LEFT JOIN       YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING            G     ON G.INVOICE_MAP_KEY        = W1.INVOICE_MAP_KEY
LEFT JOIN       YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_ERRORS     AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:
WHERE ( G.INVOICE_MAP_KEY IS NULL AND ISNULL(W1.INVOICE_MAP_KEY,'') <> '' )

  AND ISNULL(AME.ERROR_TAG,'') = ''

--  SELECT * FROM YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING    ORDER BY INVOICE_MAP_KEY 

--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_APFM_AIA_AGENT_MAPPING_IMPORT_STATUS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_APFM_AIA_AGENT_MAPPING_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHAT PROBLEMS THE RECENTLY IMPORTED AIA AGENT MAPPING FILE HAD DURING THE IMPORT/CLEANUP PROCESS.
--THIS USP IS DATA SOURCE FOR SRS GRID ON "AIA AGENT MAPPING" IMPORTS STATUS REPORT!!!

--  EXECUTE [dbo].[uspIMPORTS_APFM_AIA_AGENT_MAPPING_IMPORT_STATUS] '06/01/2014','06/10/2014','','R'

--  SELECT * FROM YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_ERRORS
--  SELECT * FROM YZ_TB_ERRORS_FOUND  --STILL NOT TOTALLY DEPENDANT BETWEEN OF OTHER CLIENTS/TENANTS.

--==================================
DECLARE 
 @TENANT_KEY      INT
,@SUB_GROUP_NAME  VARCHAR(50)
SET @TENANT_KEY     = 900626
SET @SUB_GROUP_NAME = 'APFM_AIA_AGENT_MAPPING'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
--	IF @TIME_INTERVAL IN ('15','30','HR','DY') BEGIN
--	    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)  --!!! HAVE TO CHANGE '-1' IF NEED TO PULL FILE FOR PREVIOUS DATE OTHER THAN YESTERDAY.!!!
--		SET @DTM_END = @DTM_BEG -- + 1
--	END
--	ELSE BEGIN
--		IF @TIME_INTERVAL IN ('WK') BEGIN  --SQL Job will run SRS Subscription on Sunday for previous Sunday to Saturday date range:
--		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 7,101) AS DATETIME)  --!!! HAVE TO CHANGE '-7' IF NEED TO PULL FILE FOR PREVIOUS DATE OTHER THAN YESTERDAY.!!!
--		    SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)  --!!! HAVE TO CHANGE '-1' IF NEED TO PULL FILE FOR PREVIOUS DATE OTHER THAN YESTERDAY.!!!
--		END
--		ELSE BEGIN  --'MO'  --SQL Job will run SRS Subscription on 1st of each month for previous Month date range:
			--SELECT DATEDIFF(dd,CAST('05/02/11' AS DATETIME),dbo.getdate())  --SELECT DATEADD(mm,1,dbo.getdate())

			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END

			--END
			--ELSE BEGIN
			--	SET @DTM_END      = CAST(CAST(DATEPART(mm  ,dbo.getdate() - 0) AS VARCHAR(2)) 
		    --                  + '/01/' + CAST(DATEPART(yyyy,dbo.getdate() - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
			--	--Subtract one day from 1st day of current date, which gives us last day of previous month:
			--	SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
			--	--Get 1st day of previous month from previous end date value:
			--	SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))
			--END
--		END
--	END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--TO TEST:
		--DECLARE
		-- @DTM_BEG DATETIME
		--,@DTM_END DATETIME
		----SET @DTM_BEG = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_END = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_BEG = CAST('08/02/2012' AS DATETIME)
		----SET @DTM_END = CAST('08/02/2012' AS DATETIME)
		--SET @DTM_BEG = CAST('08/03/2012' AS DATETIME)
		--SET @DTM_END = CAST('08/03/2012' AS DATETIME)

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('09/27/2013' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('09/27/2013' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

		--WHEN RAN ON FRI, 01/04/13, THE RESULTS RETURNS:  2012.12.21 - 2013.01.03    --FRI-THU   CORRECT!!!
		--SELECT CONVERT(VARCHAR(10),(DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 14),102) + ' - ' +
		--       CONVERT(VARCHAR(10),(DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 1),102)
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.




IF OBJECT_ID('TEMPDB..#IMPORTS_APFM_AIA_AGENT_MAPPING_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_APFM_AIA_AGENT_MAPPING_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_APFM_AIA_AGENT_MAPPING_IMPORT_STATUS
(	[RESOURCE_NAME] [varchar](50) NULL,
	[EMAIL] [varchar](100) NULL,
	[INVOICE_MAP_KEY] [varchar](50) NOT NULL,
	[FF_OFFICIAL_ACL_NAME] [varchar](50) NOT NULL,
	[FF_EMAIL_ADDRESS] [varchar] (100) NULL,
	[FTP_FILE_NAME] [varchar](100) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[IMPORT_SUB_GROUP_NAME] [varchar](100) NULL,
	[ERROR_TAG] [varchar](50) NULL,
	[ERROR_MSG] [varchar](2500) NULL
)
INSERT INTO #IMPORTS_APFM_AIA_AGENT_MAPPING_IMPORT_STATUS
SELECT
 RESOURCE_NAME
,[EMAIL]
,INVOICE_MAP_KEY
,FF_OFFICIAL_ACL_NAME
,FF_EMAIL_ADDRESS
--,FTP_FILE_NAME
,REPLACE(FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG

FROM            YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING_ERRORS     I   



--==================================
--ALTER TABLE IF DURATIONS WANTED IN SECONDS:  --TABLE FIRST CREATED WITH FIELDS DEFINED AS "DECIMAL(10,2)"...
--==================================
--IF @DUR_IN = 'SS' BEGIN
--	ALTER TABLE #IMPORTS_APFM_AIA_AGENT_MAPPING_IMPORT_STATUS ALTER COLUMN LOGIN_DUR     INT
--END

--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_APFM_AIA_AGENT_MAPPING_IMPORT_STATUS)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
--=============================================
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_APFM_AIA_AGENT_MAPPING_IMPORT_STATUS
	SELECT
	 ''  --RESOURCE_NAME
	,''  --[EMAIL]
	,''  --INVOICE_MAP_KEY
	,''  --FF_OFFICIAL_ACL_NAME
	,''  --FF_EMAIL_ADDRESS
	,''  --FTP_FILE_NAME
	,dbo.getdate()  --WS_ROW_CREATED_TIME
	,''  --IMPORT_SUB_GROUP_NAME
	,''  --ERROR_TAG
	,''  --ERROR_MSG
END 
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RCD_CNT = 0 BEGIN  --IF @RCD_CNT = 0 HERE,IT ACTUALLY EQUALS THE ONE INSERTED STATING 'No Prolems.' IN ERROR_MSG.
	SET @MSG1 = @MSG1 + 'There were No APFM AIA Agent Mapping Import Errors Found.'
END
ELSE BEGIN
	--IF (DATEDIFF(DD,CAST('01/20/2012' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN 
	--IF (DATEDIFF(DD,CAST('09/27/2013' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
	IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
		--This is an Invoice Friday:
		IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN  --end date + 1 may not be today, so dbo.getdate() is checked...
			SET @MSG1 = 'Today, '
		END
		SET @MSG1 = @MSG1 + CONVERT(VARCHAR(10),@DTM_END,101) + ', is Invoice Friday. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	END
	SET @MSG1 = @MSG1 + 'The list below contains errors found during the process of importing the APFM AIA Agent Mapping .csv file. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	SET @MSG1 = @MSG1 + 'Project Management will need to add, remove, or update agent information in their APFM AIA Agent Mapping .csv/"living" documents '
	SET @MSG1 = @MSG1 + 'and copy them to the FTP directory in order for these agents to be invoiced through the Scheduler system. ' + CHAR(13) + CHAR(10)

	--This put directly in report at bottom, in new table, with different font size...:
	--SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Please forward any questions or problems with this notification to dthola@wslive.com.  Thanks.'
END

IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF @RCD_CNT = 0 BEGIN
		SET @MSG1 = @MSG1 + 'There were No APFM AIA Agent Mapping Import Errors Found.'
	END
	ELSE BEGIN
		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
			SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Posting Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		END

		SET @MSG1 = @MSG1 + 'The list below contains errors found during the process of importing the APFM AIA Agent Mapping .csv file. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
		SET @MSG1 = @MSG1 + 'Project Management will need to add, remove, or update agent information in their APFM AIA Agent Mapping .csv/"living" documents '
		SET @MSG1 = @MSG1 + 'and copy them to the FTP directory in order for these agents to be invoiced through the Scheduler system. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	END
END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)

	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM YZ_TB_ERRORS_FOUND 
							   WHERE TENANT_KEY = @TENANT_KEY AND SUB_GROUP_NAME = @SUB_GROUP_NAME )
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some problems were noticed during the APFM AIA Agent Mapping import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'And any in list below.'
	END
END



--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_APFM_AIA_AGENT_MAPPING_IMPORT_STATUS 

ORDER BY
 INVOICE_MAP_KEY

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_APFM_AIA_AGENT_MAPPING_MISSING_AGENTS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_APFM_AIA_AGENT_MAPPING_MISSING_AGENTS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHICH INVOICE_MAP_KEY VALUES EXIST IN THE ACTIVITY FILES, BUT NOT IN THE AIA_AGENT_MAPPING .CSV FILES.
--            NO MATCHES BETWEEN ACTIVITY AND AGENT MAPPING.  WHEN NO MATCHES, THEN NO 'SCHEDULER' INVOICING.
--THIS USP IS DATA SOURCE FOR SRS GRID ON "ACTIVITY IMPORTS" STATUS REPORT!!!

--  EXECUTE [dbo].[uspIMPORTS_APFM_AIA_AGENT_MAPPING_MISSING_AGENTS] '10/25/2013','11/17/2013','900626','APFM_AIA_AGENT_MAPPING','','R'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

		--WHEN RAN ON FRI, 01/04/13, THE RESULTS RETURNS:  2012.12.21 - 2013.01.03    --FRI-THU   CORRECT!!!
		--SELECT CONVERT(VARCHAR(10),(DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 14),102) + ' - ' +
		--       CONVERT(VARCHAR(10),(DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 1),102)
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.




IF OBJECT_ID('TEMPDB..#IMPORTS_APFM_AIA_AGENT_MAPPING_MISSING_AGENTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_APFM_AIA_AGENT_MAPPING_MISSING_AGENTS
END
CREATE TABLE #IMPORTS_APFM_AIA_AGENT_MAPPING_MISSING_AGENTS
(FILEDATETIME          VARCHAR(50)
,FTP_FILE_NAME         VARCHAR(100)
,WS_ROW_CREATED_TIME   DATETIME
,INVOICE_MAP_KEY       VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,RCD_CNT               INT
)
INSERT INTO #IMPORTS_APFM_AIA_AGENT_MAPPING_MISSING_AGENTS
SELECT
 DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
--,I.FTP_FILE_NAME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
,I.WS_ROW_CREATED_TIME
,I.FF_AGENT_NAME  AS INVOICE_MAP_KEY
,I.RESOURCE_NAME
,COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
FROM            WSOL_TB_IMPORTS_APFM_INVOICING				I   
LEFT JOIN       YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING		IAM  ON IAM.INVOICE_MAP_KEY     = I.FF_AGENT_NAME --INVOICE_MAP_KEY
INNER JOIN      DATE_TIME									DT   ON DT.DATE_TIME_KEY        = I.STD_TENANT_START_DATE_TIME_KEY
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(IAM.INVOICE_MAP_KEY,'') = '') -- OR ISNULL(IAM.TEAM_NAME,'') = '' )
  AND I.BILLABLE_SKILL_Y_N = 'Y'
  AND (ISNULL(I.FF_AGENT_NAME,'') NOT IN ('Joshua Miller'
										 ,'Lynne Rochel'
										 ,'Jessica Sharp'
										 ,'Karen Ritter'
										 ,'Kaycee Greene'
										 ,'Emily Beauchamp'
										 ,'Constance Zielins'
										 ,'Helen Bessette'
										 ,'Jeanise Buck'
										 ,'Shari Ammon'))	-- FILTER OUT APFM AND WSOL EMPLOYEES
GROUP BY
 DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
--,I.FTP_FILE_NAME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
,I.WS_ROW_CREATED_TIME
,I.RESOURCE_NAME
,I.FF_AGENT_NAME --INVOICE_MAP_KEY

--==================================
UPDATE #IMPORTS_APFM_AIA_AGENT_MAPPING_MISSING_AGENTS SET
 FILEDATETIME = REPLACE(CONVERT(VARCHAR(10),ISNULL(FILEDATETIME,'1/1/1900'),102),'/',' . ')


--==================================
--ALTER TABLE IF DURATIONS WANTED IN SECONDS:  --TABLE FIRST CREATED WITH FIELDS DEFINED AS "DECIMAL(10,2)"...
--==================================
--IF @DUR_IN = 'SS' BEGIN
--	ALTER TABLE #IMPORTS_APFM_AIA_AGENT_MAPPING_MISSING_AGENTS ALTER COLUMN LOGIN_DUR     INT
--END

--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_APFM_AIA_AGENT_MAPPING_MISSING_AGENTS)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_APFM_AIA_AGENT_MAPPING_MISSING_AGENTS
	SELECT
	 ''  --DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
	,''  --I.FTP_FILE_NAME
	,dbo.getdate()  --I.WS_ROW_CREATED_TIME
	,''  --I.INVOICE_MAP_KEY  AS INVOICE_MAP_KEY
	,''  --I.RESOURCE_NAME
	,0   --COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
END
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RCD_CNT = 0 BEGIN  --@RCD_CNT WILL BE 0 STILL, EVEN THOUGH ONE BLANK RECORD WAS ADDED...
	SET @MSG1 = @MSG1 + 'There are No Missing AIA Agent Mappings.'
END
ELSE BEGIN
	--IF (DATEDIFF(DD,CAST('01/20/2012' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN 
	--IF (DATEDIFF(DD,CAST('09/27/2013' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
	IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
		--This is an Invoice Friday:
		IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN  --end date + 1 may not be today, so dbo.getdate() is checked...
			SET @MSG1 = 'Today, '
		END
		SET @MSG1 = @MSG1 + CONVERT(VARCHAR(10),@DTM_END,101) + ', is Invoice Friday. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	END
	SET @MSG1 = @MSG1 + 'The list below contains Invoice Map Key values for agents that are associated to activity for the report date range, but ' 
	SET @MSG1 = @MSG1 + 'do not exist in the AIA Agent Mapping file. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

	SET @MSG1 = @MSG1 + 'Agents in this list will not be invoiced (for activity dates showing), unless a special request is created and received '
	SET @MSG1 = @MSG1 + 'in plenty of time before invoicing begins.  The programmer will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	SET @MSG1 = @MSG1 + 'Also, Project Management may need to add or update agent information in their AIA Agent Mapping .csv/"living" documents '
	SET @MSG1 = @MSG1 + 'and copy it to the FTP directory before Programming can update agents correctly. ' + CHAR(13) + CHAR(10)

	--This put directly in report at bottom, in new table, with different font size...:
	--SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Please forward any questions or problems with this notification to dthola@wslive.com.  Thanks.'
END

IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''
	
	IF @RCD_CNT = 0 BEGIN
		SET @MSG1 = @MSG1 + 'There are NO missing AIA agent mappings!'
	END
	ELSE BEGIN
		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
			SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Posting Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		END
		SET @MSG1 = @MSG1 + 'The list below contains Invoice Map Key values for agents that are associated with activity for the report date range, but ' + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + 'who have not been added to or have incorrect values in the AIA Agent Mapping File. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

		SET @MSG1 = @MSG1 + 'Agents who are on this list will not be invoiced (for activity dates shown), unless a special request is made and received '
		SET @MSG1 = @MSG1 + 'with plenty of time before the automated invoice process begins.  The analyst will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

		SET @MSG1 = @MSG1 + 'Also, Project Management may need to add or update agent information in their AIA Agent Mapping CSV file and upload it '
		SET @MSG1 = @MSG1 + 'to the appropriate FTP directory before the Analyst can correctly update agent data. ' + CHAR(13) + CHAR(10)
	END

END

--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_APFM_AIA_AGENT_MAPPING_MISSING_AGENTS 

ORDER BY
 INVOICE_MAP_KEY
,FTP_FILE_NAME

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_APFM_AIA_REPORTING]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_APFM_AIA_REPORTING]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300) --Hid. Def=' '
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'  MANual,SUBscription
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='INV'
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='INV'
,@GROUP_BY_SKILL	 VARCHAR(5)	  --Vis. Def='Y'
AS
SET NOCOUNT ON    

--EXECUTE [dbo].[uspIMPORTS_APFM_AIA_REPORTING] '07/16/2016','07/31/2016','0','0','0','0','HR','Y','MM','NM','Y','4','MAN','INV','INV','True'

--@TIME_INTERVAL:  Can only show invoicing report at hour level or higher !!!

--  SELECT * FROM YZ_TB_IMPORTS_APFM_SD_INVOICE_GROUPS
--  SELECT * FROM WSOL_TB_IMPORTS_APFM_UV_ANT_AIA
    
--TMP:  FOR RUNNING SQL JOBS FOR PREVIOUS DAYS:  
--SET @DATE_BEG = '05/23/2014'
--SET @DATE_END = '06/05/2014'

--==================================--SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) 
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) -- + 1
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
END
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

DECLARE
 @MTD_BEG AS DATETIME
,@MTD_END AS DATETIME  --,@YTD_BEG AS DATETIME--,@YTD_END AS DATETIME
SET @MTD_BEG = CAST(CAST(DATEPART(mm,@DTM_BEG) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)
SET @MTD_END = @DTM_END

IF @TIME_INTERVAL IN ('MR','MD') BEGIN  --MONTH DETERMINED BY @DTM_BEG.
	SET @DTM_BEG = @MTD_BEG
	SET @DTM_END = @MTD_END
END


--==================================
--SET @TENANT_KEY      = ',' + LTRIM(RTRIM(@TENANT_KEY))      + ','
SET @SCHEDULER_GROUP = ',' + LTRIM(RTRIM(REPLACE(@SCHEDULER_GROUP,'NO SCHEDULER GROUP',''))) + ','
--SET @ID_EXT          = ',' + LTRIM(RTRIM(@ID_EXT))          + ','


--==================================
--SET AMOUNT TO DIVIDE BY:
--==================================
DECLARE @DS DECIMAL(10,2)  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.00     --DIVIDE SECONDS BY 1  TO GET SAME, SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
    SET @DS = 60.00    --DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
    SET @DS = 3600.00  --DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING
--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_APFM_AIA_REPORTING') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_APFM_AIA_REPORTING
END
CREATE TABLE #IMPORTS_APFM_AIA_REPORTING
(TENANT_NAME            VARCHAR(50)
,ID_EXT                 VARCHAR(3)
,SCHEDULER_ACL_NAME     VARCHAR(100)
,FF_SKILL_AVAILABILITY	VARCHAR(500)  
,EMPLOYEE_ID            VARCHAR(50)   
,STD_TENANT_START_DATE_TIME_KEY INT
,RESOURCE_NAME          VARCHAR(100)

,AIR_DAY_TYPE           varchar(1)
,AIR_ACW_FONT_COLOR     varchar(50)
,MIN_GUARANTEE_RATE     decimal(6,3)
,MIN_GUARANTEE_TYPE     varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE varchar(50)
,HAS_HOLIDAYS           varchar(1)
,INCLUDE_IN_CAS         varchar(1)
,READY_FOR_XML          varchar(1)
,SHOW_ID_EXTS           varchar(1)
,
[LOGGED_IN_DUR] [decimal] (10,2) NULL,
[READY_DUR] [decimal] (10,2) NULL,
[RING_DUR] [decimal] (10,2) NULL,
[ON_CALL_DUR] [decimal] (10,2) NULL,
[ON_CALL_SILENT_DUR] [decimal] (10,2) NULL,
[ACW_DUR] [decimal] (10,2) NULL,
[ON_PARK_DUR] [decimal] (10,2) NULL,
[ON_VOICEMAIL_DUR] [decimal] (10,2) NULL,
[ON_PREVIEW_DUR] [decimal] (10,2) NULL,
[NRD_ACW_DUR] [decimal] (10,2) NULL,
[NRD_TASK_COMP_DUR] [decimal] (10,2) NULL,
[NRD_SYSTEM_OBC_DUR] [decimal] (10,2) NULL,
[ON_HOLD_DUR] [decimal] (10,2) NULL,
[NRD_TRAINING_DUR] [decimal] (10,2) NULL,
[NRD_MEETING_DUR] [decimal] (10,2) NULL,
[NRD_MANDATORY_REPORTING_DUR] [decimal] (10,2) NULL,
[NRD_MANUAL_OBC_DUR] [decimal] (10,2) NULL,
[NRD_ACW_AGENT_DUR] [decimal] (10,2) NULL,
[NRD_OFFLINE_VENDOR_UNPAID_DUR] [decimal] (10,2) NULL,
[NRD_REASON_4_DUR] [decimal] (10,2) NULL,
[NOT_READY_BILLABLE] [decimal] (10,2) NULL,
[NOT_READY_NON_BILLABLE] [decimal] (10,2) NULL,
[NON_BILLABLE_SKILL_DUR] [decimal] (10,2) NULL,
[NON_BILLABLE_STATE_REASON_DUR] [decimal] (10,2) NULL,
[BILLABLE_CLIENT] [decimal] (10,2) NULL,
[TOTAL_TALK] [decimal] (10,2) NULL,
[TOTAL_ACW] [decimal] (10,2) NULL,
[AUTHORIZED] [decimal](10, 2) NULL,
)

INSERT INTO #IMPORTS_APFM_AIA_REPORTING
SELECT
 'APFM' --T.TENANT_NAME
,''		--UAA.ACD_ID_EXTENSION
,UAA.SCHEDULER_ACL_NAME
,UAA.FF_SKILL_AVAILABILITY
,UAA.EMPLOYEE_ID 
,UAA.STD_TENANT_START_DATE_TIME_KEY
,UAA.RESOURCE_NAME

,(ISNULL(UAA.AIR_DAY_TYPE,''))           --AS AIR_DAY_TYPE
,(ISNULL(UAA.AIR_ACW_FONT_COLOR,''))     --AS AIR_ACW_FONT_COLOR
,(ISNULL(UAA.MIN_GUARANTEE_RATE,0.000))  --AS MIN_GUARANTEE_RATE
,(ISNULL(UAA.MIN_GUARANTEE_TYPE,''))     --AS MIN_GUARANTEE_TYPE
,(ISNULL(UAA.AUTHORIZED_TO_INVOICE_TYPE,'')) --AS AUTHORIZED_TO_INVOICE_TYPE
,(ISNULL(UAA.HAS_HOLIDAYS,''))           --AS HAS_HOLIDAYS
,(ISNULL(UAA.INCLUDE_IN_CAS,''))         --AS INCLUDE_IN_CAS
,(ISNULL(UAA.READY_FOR_XML,''))          --AS READY_FOR_XML
,(ISNULL(UAA.SHOW_ID_EXTS,''))           --AS SHOW_ID_EXTS

,(ISNULL(UAA.LOGGED_IN_DUR,0))
,(ISNULL(UAA.READY_DUR,0))
,(ISNULL(UAA.RING_DUR,0))
,(ISNULL(UAA.ON_CALL_DUR,0))
,(ISNULL(UAA.ON_CALL_SILENT_DUR,0))
,(ISNULL(UAA.ACW_DUR,0))
,(ISNULL(UAA.ON_PARK_DUR,0))
,(ISNULL(UAA.ON_VOICEMAIL_DUR,0))
,(ISNULL(UAA.ON_PREVIEW_DUR,0))
,(ISNULL(UAA.NRD_ACW_DUR,0))
,(ISNULL(UAA.NRD_TASK_COMP_DUR,0))
,(ISNULL(UAA.NRD_SYSTEM_OBC_DUR,0))
,(ISNULL(UAA.ON_HOLD_DUR,0))
,(ISNULL(UAA.NRD_TRAINING_DUR,0))
,(ISNULL(UAA.NRD_MEETING_DUR,0))
,(ISNULL(UAA.NRD_MANDATORY_REPORTING_DUR,0))
,(ISNULL(UAA.NRD_MANUAL_OBC_DUR,0))
,(ISNULL(UAA.NRD_ACW_AGENT_DUR,0))
,(ISNULL(UAA.NRD_OFFLINE_VENDOR_UNPAID_DUR,0))
,(ISNULL(UAA.NRD_REASON_4_DUR,0))
,(ISNULL(UAA.NOT_READY_BILLABLE,0))
,(ISNULL(UAA.NOT_READY_NON_BILLABLE,0))
,(ISNULL(UAA.NON_BILLABLE_SKILL_DUR,0))
,(ISNULL(UAA.NON_BILLABLE_STATE_REASON_DUR,0))
,(ISNULL(UAA.BILLABLE_CLIENT,0))
,(ISNULL(UAA.TOTAL_TALK,0))
,(ISNULL(UAA.TOTAL_ACW,0))
,(ISNULL(UAA.AUTHORIZED,0))

FROM
(	SELECT	
	-- UA.TENANT_KEY
	 ''  AS ACD_ID_EXTENSION
	,UA.INVOICE_ID					    AS SCHEDULER_ACL_NAME
	,CASE WHEN @GROUP_BY_SKILL = 'True' THEN
			   UA.FF_SKILL_AVAILABILITY
		  ELSE UA.FF_AGENT_NAME  END	AS FF_SKILL_AVAILABILITY
	,UA.FF_AGENT_NAME                   AS EMPLOYEE_ID 
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,MAX(UA.RESOURCE_NAME)              AS RESOURCE_NAME
	,MAX(UA.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,'BLACK'                            AS AIR_ACW_FONT_COLOR
	,0									AS MIN_GUARANTEE_RATE
	,''									AS MIN_GUARANTEE_TYPE
	,''									AS AUTHORIZED_TO_INVOICE_TYPE
	,'Y'								AS HAS_HOLIDAYS
	,''									AS INCLUDE_IN_CAS
	,''									AS READY_FOR_XML
	,''									AS SHOW_ID_EXTS

	,SUM(ISNULL(UA.LOGGED_IN_DUR				,0.00))	AS LOGGED_IN_DUR
	,SUM(ISNULL(UA.READY_DUR					,0.00))	AS READY_DUR
	,SUM(ISNULL(UA.RING_DUR						,0.00))	AS RING_DUR
	,SUM(ISNULL(UA.ON_CALL_DUR					,0.00))	AS ON_CALL_DUR
	,SUM(ISNULL(UA.ON_CALL_SILENT_DUR			,0.00))	AS ON_CALL_SILENT_DUR
	,SUM(ISNULL(UA.ACW_DUR						,0.00))	AS ACW_DUR
	,SUM(ISNULL(UA.ON_PARK_DUR					,0.00))	AS ON_PARK_DUR
	,SUM(ISNULL(UA.ON_VOICEMAIL_DUR				,0.00))	AS ON_VOICEMAIL_DUR
	,SUM(ISNULL(UA.ON_PREVIEW_DUR				,0.00))	AS ON_PREVIEW_DUR
	,SUM(ISNULL(UA.NRD_ACW_DUR					,0.00))	AS NRD_ACW_DUR
	,SUM(ISNULL(UA.NRD_TASK_COMP_DUR			,0.00))	AS NRD_TASK_COMP_DUR
	,SUM(ISNULL(UA.NRD_SYSTEM_OBC_DUR			,0.00))	AS NRD_SYSTEM_OBC_DUR
	,SUM(ISNULL(UA.ON_HOLD_DUR					,0.00))	AS ON_HOLD_DUR
	,SUM(ISNULL(UA.NRD_TRAINING_DUR				,0.00))	AS NRD_TRAINING_DUR
	,SUM(ISNULL(UA.NRD_MEETING_DUR				,0.00))	AS NRD_MEETING_DUR
	,SUM(ISNULL(UA.NRD_MANDATORY_REPORTING_DUR	,0.00))	AS NRD_MANDATORY_REPORTING_DUR
	,SUM(ISNULL(UA.NRD_MANUAL_OBC_DUR			,0.00))	AS NRD_MANUAL_OBC_DUR
	,SUM(ISNULL(UA.NRD_ACW_AGENT_DUR			,0.00))	AS NRD_ACW_AGENT_DUR
	,SUM(ISNULL(UA.NRD_OFFLINE_VENDOR_UNPAID_DUR,0.00))	AS NRD_OFFLINE_VENDOR_UNPAID_DUR
	,SUM(ISNULL(UA.NRD_REASON_4_DUR				,0.00))	AS NRD_REASON_4_DUR
	,SUM(ISNULL(UA.NOT_READY_BILLABLE			,0.00))	AS NOT_READY_BILLABLE
	,SUM(ISNULL(UA.NOT_READY_NON_BILLABLE		,0.00))	AS NOT_READY_NON_BILLABLE
	,SUM(ISNULL(UA.NON_BILLABLE_SKILL_DUR		,0.00)) AS NON_BILLABLE_SKILL_DUR
	,SUM(ISNULL(UA.NON_BILLABLE_STATE_REASON_DUR,0.00)) AS NON_BILLABLE_STATE_REASON_DUR
	,SUM(ISNULL(UA.BILLABLE_CLIENT				,0.00))	AS BILLABLE_CLIENT
	,SUM(ISNULL(UA.TOTAL_TALK					,0.00))	AS TOTAL_TALK
	,SUM(ISNULL(UA.TOTAL_ACW					,0.00))	AS TOTAL_ACW
	,SUM(ISNULL(UA.AUTHORIZED					,0.00))	AS AUTHORIZED
	
	--  SELECT *
	FROM            WSOL_TB_IMPORTS_APFM_INVOICING       UA
	INNER JOIN      DATE_TIME                            DT    ON DT.DATE_TIME_KEY                   = UA.STD_TENANT_START_DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
	  AND (ISNULL(UA.FF_AGENT_NAME,'') NOT IN ('Joshua Miller','Lynne Rochel','Jessica Sharp','Karen Ritter'))	-- FILTER OUT APFM EMPLOYEES
	  AND (@SCHEDULER_GROUP IN (',0,') OR CHARINDEX(',' + RTRIM(UA.INVOICE_ID) + ',',@SCHEDULER_GROUP) > 0) 
--	  AND ISNULL(UA.RESOURCE_NAME,'') <> ''
		
	GROUP BY
	 UA.INVOICE_ID
	,CASE WHEN @GROUP_BY_SKILL = 'True' THEN 
			UA.FF_SKILL_AVAILABILITY
		  ELSE
			UA.FF_AGENT_NAME END
	,UA.FF_AGENT_NAME
	,UA.STD_TENANT_START_DATE_TIME_KEY
) UAA
--SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING

--==============================================================
--==============================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_APFM_AIA_REPORTING_RTN') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_APFM_AIA_REPORTING_RTN
END
CREATE TABLE #IMPORTS_APFM_AIA_REPORTING_RTN
(GRPNO                 INT
,TENANT_NAME           VARCHAR(50)
,ID_EXT                VARCHAR(3)
,SCHEDULER_ACL_NAME    VARCHAR(100)
,FF_SKILL_AVAILABILITY VARCHAR(500)
,EMPLOYEE_ID           VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,CAL_YEAR_MONTH_NUM    VARCHAR(10)
,DATE_INTERVAL         VARCHAR(50)
,TIME_INTERVAL         VARCHAR(10)

,AIR_DAY_TYPE          varchar(1)
,AIR_ACW_FONT_COLOR    varchar(50)
,MIN_GUARANTEE_RATE    decimal(6,3)
,MIN_GUARANTEE_TYPE    varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE varchar(50)
,HAS_HOLIDAYS          varchar(1)
,INCLUDE_IN_CAS        varchar(1)
,READY_FOR_XML         varchar(1)
,SHOW_ID_EXTS          varchar(1)

,AIR_HOLIDAY_IN        VARCHAR(1)
,ALL_AUTHORIZED_TIME   DECIMAL(10,2)

,
[LOGGED_IN_DUR] [decimal] (10,2) NULL,
[READY_DUR] [decimal] (10,2) NULL,
[RING_DUR] [decimal] (10,2) NULL,
[ON_CALL_DUR] [decimal] (10,2) NULL,
[ON_CALL_SILENT_DUR] [decimal] (10,2) NULL,
[ACW_DUR] [decimal] (10,2) NULL,
[ON_PARK_DUR] [decimal] (10,2) NULL,
[ON_VOICEMAIL_DUR] [decimal] (10,2) NULL,
[ON_PREVIEW_DUR] [decimal] (10,2) NULL,
[NRD_ACW_DUR] [decimal] (10,2) NULL,
[NRD_TASK_COMP_DUR] [decimal] (10,2) NULL,
[NRD_SYSTEM_OBC_DUR] [decimal] (10,2) NULL,
[ON_HOLD_DUR] [decimal] (10,2) NULL,
[NRD_TRAINING_DUR] [decimal] (10,2) NULL,
[NRD_MEETING_DUR] [decimal] (10,2) NULL,
[NRD_MANDATORY_REPORTING_DUR] [decimal] (10,2) NULL,
[NRD_MANUAL_OBC_DUR] [decimal] (10,2) NULL,
[NRD_ACW_AGENT_DUR] [decimal] (10,2) NULL,
[NRD_OFFLINE_VENDOR_UNPAID_DUR] [decimal] (10,2) NULL,
[NRD_REASON_4_DUR] [decimal] (10,2) NULL,
[NOT_READY_BILLABLE] [decimal] (10,2) NULL,
[NOT_READY_NON_BILLABLE] [decimal] (10,2) NULL,
[NON_BILLABLE_SKILL_DUR] [decimal] (10,2) NULL,
[NON_BILLABLE_STATE_REASON_DUR] [decimal] (10,2) NULL,
[BILLABLE_CLIENT] [decimal] (10,2) NULL,
[TOTAL_TALK] [decimal] (10,2) NULL,
[TOTAL_ACW] [decimal] (10,2) NULL,
[AUTHORIZED] [decimal](10, 2) NULL,
)
INSERT INTO #IMPORTS_APFM_AIA_REPORTING_RTN
SELECT
 20								--AS GRPNO  
,ISNULL(GG.TENANT_NAME			,'') AS TENANT_NAME
,ISNULL(GG.ID_EXT				,'') AS ID_EXT
,ISNULL(GG.SCHEDULER_ACL_NAME	,'') AS SCHEDULER_ACL_NAME
,ISNULL(GG.FF_SKILL_AVAILABILITY,'') AS FF_SKILL_AVAILABILITY
,ISNULL(GG.EMPLOYEE_ID			,'') AS EMPLOYEE_ID
,ISNULL(GG.RESOURCE_NAME		,'') AS RESOURCE_NAME
,ISNULL(GG.CAL_YEAR_MONTH_NUM	,'') AS CAL_YEAR_MONTH_NUM
,ISNULL(GG.DI					,'') AS DI
,ISNULL(GG.TI					,'') AS TI

,(GG.AIR_DAY_TYPE)                AS AIR_DAY_TYPE
,(GG.AIR_ACW_FONT_COLOR)          AS AIR_ACW_FONT_COLOR
,(GG.MIN_GUARANTEE_RATE)          AS MIN_GUARANTEE_RATE
,(GG.MIN_GUARANTEE_TYPE)          AS MIN_GUARANTEE_TYPE
,(GG.AUTHORIZED_TO_INVOICE_TYPE)  AS AUTHORIZED_TO_INVOICE_TYPE
,(GG.HAS_HOLIDAYS)                AS HAS_HOLIDAYS
,(GG.INCLUDE_IN_CAS)              AS INCLUDE_IN_CAS
,(GG.READY_FOR_XML)               AS READY_FOR_XML
,(GG.SHOW_ID_EXTS)                AS SHOW_ID_EXTS

,'' --AS AIR_HOLIDAY_IN
,0  --AS ALL_AUTHORIZED_TIME

,CAST((ISNULL(GG.LOGGED_IN_DUR					,0)) / @DS AS DECIMAL(10,2)) AS LOGGED_IN_DUR
,CAST((ISNULL(GG.READY_DUR						,0)) / @DS AS DECIMAL(10,2)) AS READY_DUR
,CAST((ISNULL(GG.RING_DUR						,0)) / @DS AS DECIMAL(10,2)) AS RING_DUR
,CAST((ISNULL(GG.ON_CALL_DUR					,0)) / @DS AS DECIMAL(10,2)) AS ON_CALL_DUR
,CAST((ISNULL(GG.ON_CALL_SILENT_DUR				,0)) / @DS AS DECIMAL(10,2)) AS ON_CALL_SILENT_DUR
,CAST((ISNULL(GG.ACW_DUR						,0)) / @DS AS DECIMAL(10,2)) AS ACW_DUR
,CAST((ISNULL(GG.ON_PARK_DUR					,0)) / @DS AS DECIMAL(10,2)) AS ON_PARK_DUR
,CAST((ISNULL(GG.ON_VOICEMAIL_DUR				,0)) / @DS AS DECIMAL(10,2)) AS ON_VOICEMAIL_DUR
,CAST((ISNULL(GG.ON_PREVIEW_DUR					,0)) / @DS AS DECIMAL(10,2)) AS ON_PREVIEW_DUR
,CAST((ISNULL(GG.NRD_ACW_DUR					,0)) / @DS AS DECIMAL(10,2)) AS NRD_ACW_DUR
,CAST((ISNULL(GG.NRD_TASK_COMP_DUR				,0)) / @DS AS DECIMAL(10,2)) AS NRD_TASK_COMP_DUR
,CAST((ISNULL(GG.NRD_SYSTEM_OBC_DUR				,0)) / @DS AS DECIMAL(10,2)) AS NRD_SYSTEM_OBC_DUR
,CAST((ISNULL(GG.ON_HOLD_DUR					,0)) / @DS AS DECIMAL(10,2)) AS ON_HOLD_DUR
,CAST((ISNULL(GG.NRD_TRAINING_DUR				,0)) / @DS AS DECIMAL(10,2)) AS NRD_TRAINING_DUR
,CAST((ISNULL(GG.NRD_MEETING_DUR				,0)) / @DS AS DECIMAL(10,2)) AS NRD_MEETING_DUR
,CAST((ISNULL(GG.NRD_MANDATORY_REPORTING_DUR	,0)) / @DS AS DECIMAL(10,2)) AS NRD_MANDATORY_REPORTING_DUR
,CAST((ISNULL(GG.NRD_MANUAL_OBC_DUR				,0)) / @DS AS DECIMAL(10,2)) AS NRD_MANUAL_OBC_DUR
,CAST((ISNULL(GG.NRD_ACW_AGENT_DUR				,0)) / @DS AS DECIMAL(10,2)) AS NRD_ACW_AGENT_DUR
,CAST((ISNULL(GG.NRD_OFFLINE_VENDOR_UNPAID_DUR	,0)) / @DS AS DECIMAL(10,2)) AS NRD_OFFLINE_VENDOR_UNPAID_DUR
,CAST((ISNULL(GG.NRD_REASON_4_DUR				,0)) / @DS AS DECIMAL(10,2)) AS NRD_REASON_4_DUR
,CAST((ISNULL(GG.NOT_READY_BILLABLE				,0)) / @DS AS DECIMAL(10,2)) AS NOT_READY_BILLABLE
,CAST((ISNULL(GG.NOT_READY_NON_BILLABLE			,0)) / @DS AS DECIMAL(10,2)) AS NOT_READY_NON_BILLABLE
,CAST((ISNULL(GG.NON_BILLABLE_SKILL_DUR			,0)) / @DS AS DECIMAL(10,2)) AS NON_BILLABLE_SKILL_DUR
,CAST((ISNULL(GG.NON_BILLABLE_STATE_REASON_DUR	,0)) / @DS AS DECIMAL(10,2)) AS NON_BILLABLE_STATE_REASON_DUR
,CAST((ISNULL(GG.BILLABLE_CLIENT				,0)) / @DS AS DECIMAL(10,2)) AS BILLABLE_CLIENT
,CAST((ISNULL(GG.TOTAL_TALK						,0)) / @DS AS DECIMAL(10,2)) AS TOTAL_TALK
,CAST((ISNULL(GG.TOTAL_ACW						,0)) / @DS AS DECIMAL(10,2)) AS TOTAL_ACW
,CAST((ISNULL(GG.AUTHORIZED						,0)) / @DS AS DECIMAL(10,2)) AS AUTHORIZED

FROM  -- GG STARTS HERE:
(	SELECT
	 ISNULL(SW.TENANT_NAME			,'') AS TENANT_NAME
	,ISNULL(SW.ID_EXT				,'') AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME	,'') AS SCHEDULER_ACL_NAME
	,ISNULL(SW.FF_SKILL_AVAILABILITY,'') AS FF_SKILL_AVAILABILITY
	,ISNULL(SW.EMPLOYEE_ID			,'') AS EMPLOYEE_ID
	,MAX(RESOURCE_NAME)					 AS RESOURCE_NAME

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) AS TI

	,MAX(SW.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,MAX(SW.AIR_ACW_FONT_COLOR)         AS AIR_ACW_FONT_COLOR
	,MAX(SW.MIN_GUARANTEE_RATE)         AS MIN_GUARANTEE_RATE
	,MAX(SW.MIN_GUARANTEE_TYPE)         AS MIN_GUARANTEE_TYPE
	,MAX(SW.AUTHORIZED_TO_INVOICE_TYPE) AS AUTHORIZED_TO_INVOICE_TYPE
	,MAX(SW.HAS_HOLIDAYS)               AS HAS_HOLIDAYS
	,MAX(SW.INCLUDE_IN_CAS)             AS INCLUDE_IN_CAS
	,MAX(SW.READY_FOR_XML)              AS READY_FOR_XML
	,MAX(SW.SHOW_ID_EXTS)               AS SHOW_ID_EXTS

	,SUM(ISNULL(SW.LOGGED_IN_DUR				,0)) AS LOGGED_IN_DUR
	,SUM(ISNULL(SW.READY_DUR					,0)) AS READY_DUR
	,SUM(ISNULL(SW.RING_DUR						,0)) AS RING_DUR
	,SUM(ISNULL(SW.ON_CALL_DUR					,0)) AS ON_CALL_DUR
	,SUM(ISNULL(SW.ON_CALL_SILENT_DUR			,0)) AS ON_CALL_SILENT_DUR
	,SUM(ISNULL(SW.ACW_DUR						,0)) AS ACW_DUR
	,SUM(ISNULL(SW.ON_PARK_DUR					,0)) AS ON_PARK_DUR
	,SUM(ISNULL(SW.ON_VOICEMAIL_DUR				,0)) AS ON_VOICEMAIL_DUR
	,SUM(ISNULL(SW.ON_PREVIEW_DUR				,0)) AS ON_PREVIEW_DUR
	,SUM(ISNULL(SW.NRD_ACW_DUR					,0)) AS NRD_ACW_DUR
	,SUM(ISNULL(SW.NRD_TASK_COMP_DUR			,0)) AS NRD_TASK_COMP_DUR
	,SUM(ISNULL(SW.NRD_SYSTEM_OBC_DUR			,0)) AS NRD_SYSTEM_OBC_DUR
	,SUM(ISNULL(SW.ON_HOLD_DUR					,0)) AS ON_HOLD_DUR
	,SUM(ISNULL(SW.NRD_TRAINING_DUR				,0)) AS NRD_TRAINING_DUR
	,SUM(ISNULL(SW.NRD_MEETING_DUR				,0)) AS NRD_MEETING_DUR
	,SUM(ISNULL(SW.NRD_MANDATORY_REPORTING_DUR	,0)) AS NRD_MANDATORY_REPORTING_DUR
	,SUM(ISNULL(SW.NRD_MANUAL_OBC_DUR			,0)) AS NRD_MANUAL_OBC_DUR
	,SUM(ISNULL(SW.NRD_ACW_AGENT_DUR			,0)) AS NRD_ACW_AGENT_DUR
	,SUM(ISNULL(SW.NRD_OFFLINE_VENDOR_UNPAID_DUR,0)) AS NRD_OFFLINE_VENDOR_UNPAID_DUR
	,SUM(ISNULL(SW.NRD_REASON_4_DUR				,0)) AS NRD_REASON_4_DUR
	,SUM(ISNULL(SW.NOT_READY_BILLABLE			,0)) AS NOT_READY_BILLABLE
	,SUM(ISNULL(SW.NOT_READY_NON_BILLABLE		,0)) AS NOT_READY_NON_BILLABLE
	,SUM(ISNULL(SW.NON_BILLABLE_SKILL_DUR		,0)) AS NON_BILLABLE_SKILL_DUR
	,SUM(ISNULL(SW.NON_BILLABLE_STATE_REASON_DUR,0)) AS NON_BILLABLE_STATE_REASON_DUR
	,SUM(ISNULL(SW.BILLABLE_CLIENT				,0)) AS BILLABLE_CLIENT
	,SUM(ISNULL(SW.TOTAL_TALK					,0)) AS TOTAL_TALK
	,SUM(ISNULL(SW.TOTAL_ACW					,0)) AS TOTAL_ACW
	,SUM(ISNULL(SW.AUTHORIZED					,0)) AS AUTHORIZED
	
	FROM            #IMPORTS_APFM_AIA_REPORTING		SW
	INNER JOIN      DATE_TIME					    DT   ON DT.DATE_TIME_KEY              = SW.STD_TENANT_START_DATE_TIME_KEY
													 
	--WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END		  --AND (@TENANT_KEY   IN ('0','') OR SW.TENANT_KEY   = CAST(@TENANT_KEY AS INT) )

	GROUP BY 
	 ISNULL(SW.TENANT_NAME			,'') --AS TENANT_NAME
	,ISNULL(SW.ID_EXT				,'') --AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME	,'') --AS SCHEDULER_ACL_NAME
	,ISNULL(SW.FF_SKILL_AVAILABILITY,'') --AS FF_SKILL_AVAILABILITY
	,ISNULL(SW.EMPLOYEE_ID			,'') --AS EMPLOYEE_ID

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) --AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) --AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) --AS TI
) GG



--==================================
--IS A HOLIDAY DATE IN THE MIX:
--==================================
DECLARE @HOLIDAY_IN VARCHAR(1)
SET @HOLIDAY_IN = 'N'
DECLARE @I INT
SET @I = (SELECT COUNT(*) FROM #IMPORTS_APFM_AIA_REPORTING_RTN WHERE AIR_DAY_TYPE = 'H')  --  AND INCLUDE_IN_CAS = 'Y')
IF @I > 0 BEGIN
	SET @HOLIDAY_IN = 'Y'
END
--==================================
UPDATE #IMPORTS_APFM_AIA_REPORTING_RTN SET
 AIR_HOLIDAY_IN = @HOLIDAY_IN

--======================================================
--UPDATE TOTALS LINE ON REPORT FOR STANDARD AND HOLIDAY:
--======================================================
UPDATE #IMPORTS_APFM_AIA_REPORTING_RTN SET
 ALL_AUTHORIZED_TIME = ISNULL(LOJ.ALL_AUTHORIZED_TIME,0.0)
FROM #IMPORTS_APFM_AIA_REPORTING_RTN TA
LEFT OUTER JOIN
(	SELECT
	 SCHEDULER_ACL_NAME
--	,FF_SKILL_AVAILABILITY
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
	,SUM(AUTHORIZED) AS ALL_AUTHORIZED_TIME
	FROM #IMPORTS_APFM_AIA_REPORTING_RTN 
	GROUP BY 
	 SCHEDULER_ACL_NAME
--	,FF_SKILL_AVAILABILITY
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
) LOJ ON LOJ.SCHEDULER_ACL_NAME		= TA.SCHEDULER_ACL_NAME
--	 AND LOJ.FF_SKILL_AVAILABILITY	= TA.FF_SKILL_AVAILABILITY
	 AND LOJ.EMPLOYEE_ID			= TA.EMPLOYEE_ID
	 AND LOJ.AIR_DAY_TYPE			= TA.AIR_DAY_TYPE

--==================================
--RETURN DATA
--==================================
--==================================
--POPULATE TABLE READ BY SSIS TO GET END DATE OF DATA REPORT/FILE HAS BEEN RUN FOR:
--==================================
INSERT INTO YZ_TB_FILENAMES_FOR_SSIS
SELECT
 'uspIMPORTS_APFM_AIA_REPORTING'						--SQL_JOB_NAME
,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,111),'/','')  --FILENM   YYYYMMDD_...
,dbo.getdate()												--CST_ROW_CREATED_TIME

--=====================================
--RETURN DATASET:
--=====================================
SELECT 
 CASE WHEN @DUR_IN = 'SS' THEN '' ELSE 'F' END AS DUR_FORMAT
,CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
,V.*

FROM      #IMPORTS_APFM_AIA_REPORTING_RTN  V

ORDER BY 
 V.GRPNO
,V.SCHEDULER_ACL_NAME
,V.FF_SKILL_AVAILABILITY
,V.EMPLOYEE_ID
,V.CAL_YEAR_MONTH_NUM
,V.DATE_INTERVAL
,V.TIME_INTERVAL  --SINCE IN MILITARY TIME!




--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_APFM_AIA_XML]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_APFM_AIA_XML]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(30)  --Hid. Def=' '   --Most likely useless.
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'-Manual - when users run report - what SRS reports are defaulted to.  MAN means use date range that user specified.  The exception is when a report is defined with PTD/YTD and MTD rows in it.
                                  --         'SUB'-Subscription - what SRS subscriptions are defaulted to.  SUB means set date range @vars based on @TIME_INTERVAL. (since date range in SRS Subscription can't be set correctly)
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='AIA'-Agent Invoice Automation - what Sergey uses for/in Scheduler...
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='XML'-AIA RPT (DETAIL) (XML FILE/EXPORT),
AS
SET NOCOUNT ON  

-- !!!*** @ID_EXT HARDCODED BELOW IF @EXECUTIONER = 'SUB', SO THAT 14 SUBSCRIPTIONS DON'T NEED TO BE CHANGED EVERY TIME... ***!!!

--  EXECUTE [dbo].[uspIMPORTS_APFM_AIA_XML] '05/19/2014','05/19/2014','352',' ',' ','0','HR','Y','SS','NM','Y','4','MAN','AIA','XML'
--  EXECUTE [dbo].[uspIMPORTS_APFM_AIA_XML] '05/19/2014','05/19/2014','0',' ',' ','0','HR','Y','SS','NM','Y','4','MAN','AIA','XML'
--  EXECUTE [dbo].[uspIMPORTS_APFM_AIA_XML] '05/19/2014','05/19/2014','0',' ','Y','0','HR','Y','SS','NM','Y','4','MAN','AIA','XML' --in test mode

--SELECT @ID_EXT
--GOTO EARLY_EXIT

--    531 IS ACTUAL TENANT_KEY FOR APFM.  BUT 900626 IS BEING USED IN ERROR MESSAGES...

--  SELECT * FROM YZ_TB_IMPORTS_APFM_SD_INVOICE_GROUPS

--Going to use @id_ext to pass in test or notest indicator so that I can pull in data where ready_for_xml = 'N'  !!!  When @id_ext = 'Y'=In Test Mode.

--tmp:  WHEN RUNNING SQL JOB FOR DATE AFTER SCHEDULED DATE:
--SET @DATE_BEG = CAST('06/08/2012' AS DATETIME)
--SET @DATE_END = CAST('06/21/2012' AS DATETIME)  

--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)  
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 0,101) AS DATETIME)  
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) + 1
END

--================================== 
--WILL NEED TO PULL FOR EACH DATE IN 2 WEEK PERIOD FOR INTERNAL WSINET TENANTS, AND THEN FOR NINE_WEST AND GAR, PULL FOR FULL 2 WEEK RANGE!
--  THIS IS BECAUSE OF ALL THE POSSIBILITIES OF FAILURE FOR THE EXTERNAL 'IMPORTS' TENANTS...

--CAN'T PULL IN 14 DAYS OF ACTIVITY INTO ONE XML FILE.  FOR NINE_WEST OR GAR MAYBE, BUT NOT EVERY TENANT...!  

--DATE RANGE PARAMETER VALUES FROM SUBSCRIPTION IS YESTERDAY'S DATE.  SAME FOR 'MAN' RUN OF REPORT.
--@TIME_INTERVAL IN SUBSCRIPTIONS WERE '15','D2','WD'.  @TIME_INTERVAL DEFAULT FOR 'MAN' RUN OF REPORT IS '15'?
--  @TIME_INTERVAL IN SUBSCRIPTIONS WILL NOW, POSSIBLY, BE:  '15','14',...'01'.  '01' COULD TRANSLATE INTO 'DY'.
--THE REPORT WANTED/BEING RAN DETERMINES HOW EACH RECORD SHOULD BE DISPLAYED.
--  FOR EXAMPLE THE AIA REPORT IS NOT SUMMARIZED, IT WANTS A RECORD FOR EACH 15 MINUTE INTERVAL, BY TENANT, BY AGENT...
--    THE TBS REPORT IS SUMMARIZED, IT IS GROUPED BY TENANT AND DATE...
--  REMEMBER THE AIA TABLE IS BROKEN DOWN INTO 15 MINUTE INTERVALS...

--Just passing in a number works for internal wsinet tenants that have to create one XML file per date for past 14 days,
--  but it will not work for Nine_West or GetARoom that need to create one XML for full past 2 week range per tenant.
--Need to prefix number in @TIME_INTERVAL with 'D' for just pulling in one day, or 'W' for pull in number of days...
--    all from end date - number in @Time_Interval value passed into usp...

--Most likely @TIME_INTERVAL values:  D14,D13,D12,D11,D10,D09,D08,D07,D06,D05,D04,D03,D02,D01, W14 .

--IF @EXECUTIONER = 'MAN', DON'T CHANGE DATES -- THE REPORT IS BEING RAN MANUALLY, AND THE DATE RANGE WANTED BY THE USER IS BEING SET MANUALLY.

IF @EXECUTIONER = 'OCT' BEGIN -- ONLY FOR 10/1/2014 AS WE TRANSITION TO NEW PAYMENT CYCLE
	SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),'09/26/2014',101) AS DATETIME)
END

IF @EXECUTIONER = 'NEW' BEGIN -- NEW BI-MONTHLY PAYMENT CYCLE 1ST AND 16TH OF EACH MONTH
	IF @TIME_INTERVAL = 'W14' BEGIN
		IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate() - 1)) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
			END
		END		
		ELSE IF DAY(dbo.getdate()) = 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) < 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
	END

	--INSERT INTO YZ_TB_TEST_DATES
	--	SELECT
	--	 @DTM_BEG
	--	,@DTM_END
	--	,@EXECUTIONER
END

IF @EXECUTIONER = 'SUB' BEGIN  --RAN FROM SUBSCRIPTION:

	--  SELECT * FROM YZ_TB_IMPORTS_APFM_SD_INVOICE_GROUPS  ORDER BY TENANT_KEY, SCHEDULER_ACL_NAME

	--IF CAST(@TENANT_KEY AS INT) = 351 BEGIN  --ASURION
	--	SET @ID_EXT = ',201,206,'
	--END
	--ELSE BEGIN
	--	IF CAST(@TENANT_KEY AS INT) = 352 BEGIN  --HERTZ
	--		SET @ID_EXT = ',202,'
	--	END
	--	ELSE BEGIN
	--		IF CAST(@TENANT_KEY AS INT) = 353 BEGIN  --HOMESEARCH
	--			SET @ID_EXT = ',203,204,'
	--		END
	--		ELSE BEGIN
	--			IF CAST(@TENANT_KEY AS INT) = 354 BEGIN  --SUNDANCE
	--				SET @ID_EXT = ',205,'
	--			END
	--			--ELSE BEGIN
	--			--	IF CAST(@TENANT_KEY AS INT) =  BEGIN  --
	--			--		SET @ID_EXT = ',,'  
	--			--	END
	--			--	ELSE BEGIN
	--			--		IF CAST(@TENANT_KEY AS INT) = 0      BEGIN  --WSOL/WSINET TENANTS
	--			--			SET @ID_EXT = ',,'
	--			--		END
	--			--		--ELSE BEGIN
	--			--		--	SET @ID_EXT = @ID_EXT
	--			--		--END
	--			--	END
	--			--END
	--		END
	--	END
	--END

	--THE METHOD ABOVE IS 'NO GOOD'/RIDICULOUS !!!  AND THE USE OF @/ID_EXT IS OBSOLETE!!!
	--!*** MAINTAINING/SETTING THE 'READY_FOR_XML' FIELD TO EITHER 'Y' OR 'N' AND FILTERING ON THAT BELOW IS FAR EASIER AND CLEARER. !!!

	--DATE FROM SUBSCRIPTION IS YESTERDAY'S DATE.  @DTM_BEG IS YESTERDAY'S DATE.
	--@DTM_END IS TODAY'S DATE.   'D14' IS SUBTRACTING 14 DAYS FROM TODAY'S DATE. !!! CORRECT !!!
	--DECLARE @D DATETIME
	--SET @D = '01/18/2013'
	--SET @D = @D - 14
	--SELECT CONVERT(VARCHAR(10),@D,102)  --2013.01.04
	--ON INVOICE FRIDAY (1/18/13), 14 DAYS FROM THAT DATE IS, FRIDAY 1/4/13.  CORRECT !!!

	DECLARE @DTS  INT    --Days To Subtract (from @DTM_END).
	SET @DTS = 0
	--ISNUMERIC returns 1 when the input expression evaluates to a valid integer, floating point number, money or decimal type;
	--  otherwise it returns 0. A return value of 1 indicates that expression can be converted to at least one of the numeric types.
	--'WK1' AND 'WK2' SHOULD NOT BE True TO ISNUMERIC().  THUS @DTS WILL BE 0.  THIS IS IMPORTANT FOR SETTING EGENCIA DATE RANGE BELOW.
	IF ISNUMERIC(REPLACE(REPLACE(@TIME_INTERVAL,'D',''),'W','')) = 1 BEGIN  --Then value can be converted to an int.
		--@TIME_INTERVAL CAN CONTAIN '15' OR '30'...!!! 
		--  MEANING TIME INTERVAL BELOW A 'DAY'.  WHICH JUST TRANSLATES AS YESTERDAY'S DATE -- THE DEFAULT PASSED IN SUBSCRIPTION AND INTO USP.
		--SELECT CAST(REPLACE(REPLACE('D04','D',''),'W','') AS INT)  -- = 4
		SET @DTS = CAST(REPLACE(REPLACE(@TIME_INTERVAL,'D',''),'W','') AS INT)
		IF @DTS > 14 BEGIN
			SET @DTS = 0
		END
	END
	--'WK1' AND 'WK2' SHOULD NOT BE True TO ISNUMERIC().  THUS @DTS WILL BE 0.  THIS IS IMPORTANT FOR SETTING EGENCIA DATE RANGE BELOW.
	--DATE RANGE PARAMETER VALUES FROM SUBSCRIPTION IS YESTERDAY'S DATE.  AND @DTM_END ADJUSTED FOR WHERE CLAUSE CONTAINS ONE DAY ADDED TO IT.
	IF @DTS > 0 BEGIN  --MEANING TIME INTERVAL AT OR ABOVE A 'DAY'; NOT '15' OR '30'.  @DUR_IN WILL DETERMINE SECONDS OR MINUTES, OR HOURS...
		SET @DTM_BEG = (@DTM_END - @DTS)  --NOW=1/4 --@DTM_END=(1/3,1/3+1=1/4)  |  @DTM_BEG=(1/3,1/3+1=1/4)-03=1/1          IF @DTS = 'D03'.  YES!
		IF CHARINDEX('D',@TIME_INTERVAL) > 0 BEGIN  --DATE RANGE TO CONTAIN ONLY ONE DATE:
			SET @DTM_END = (@DTM_END - @DTS) + 1    --@DTM_END=(1/3,1/3+1=1/4)  |  @DTM_BEG=((1/3,1/3+1=1/4)-03=1/1)+1=1/2  IF @DTS = 'D03'.  YES!
		END
		--OTHERWISE, DATE RANGE TO CONTAIN ONE OR MORE DAYS.
		--  @DTM_END STAYS THE SAME.  --@DTM_END=(1/3,1/3+1=1/4)    1/1/ - 1/4   YES!
		--    MOST LIKELY DATE RANGE TO CONTAIN 14 DAYS, AS IN 'W14', AS IN 12/21/12 - 01/03/13.
		--IF CHARINDEX('W',@TIME_INTERVAL) > 0 BEGIN
		--	SET @DTM_END = (@DTM_END - @DTS)
		--END
	END
	--If today's date is 01/04/13:
	--End Date Parameter value passed into this usp from File Subscription is Yesterday's date (1 day from current date).  01/03/13
	--Then @DTM_END is changed to @DTM_END + 1 for Where clause in cal_date <  01/04/13
	--    'D14' --Minus 14 From @DTM_END.    Date Range pulling data for is:  12/21/12 - 12/21/12   Where @DTM_ set to, 12/21/12 - 12/22/12.
	--    'D01' --Minus 01 From @DTM_END.    Date Range pulling data for is:  01/03/13 - 01/03/13   Where @DTM_ set to, 01/03/13 - 01/04/13.
	--    'W14' --Minus 14 From @DTM_END.    Date Range pulling data for is:  12/21/12 - 01/03/13   Where @DTM_ set to, 12/21/12 - 01/04/13.
	--IF JUST PASS IN A NUMBER (OF DAYS TO SUBTRACT FROM END DATE), THEN I DON'T NEED 14 'IF' STATEMENTS IN USP.
	--  WILL STILL NEED 14 FILE SUBSCRIPTIONS !!!  14 STEPS IN SQL JOB TO EXECUTE SUBSCRIPTIONS !!!
	--  14 SSIS PACKAGES TO MOVE AND RENAME !!!  AND ALSO IN JOB...
	--Nine_West and GetARoom will only need to pull for 2 week range, but the internal wsinet tenants will have to pull for each date, 14 times...
	--==================================
	--==================================
	--EGENCIA IS DIVIDED INTO 1 WEEK INTERVALS IN 2 FILES EVERY INVOICE FRIDAY.  
	--THIS CODE TO GET THE CORRECT WEEK RANGE IS USED IN EGENCIA'S CAR INVOICING USP AS WELL:
	--==================================
	--RUNNING INVOICES FROM FRIDAY TO THURSDAY.         !!!  INVOICING FOR   10/12 - 10/18   AND   10/19 - 10/25: !!!
	--S  M  T  W  T  F  S   OCTOBER
	--7  8  9  10 11 12 13
	--14 15 16 17 18 19 20
	--21 22 23 24 25 26 27
	--IF TODAY IS FRIDAY, 10/26, THEN BEG DATE COMING INTO USP IS 10/25.  SUBTRACT 13 DAYS GIVES FRIDAY 10/12.
	--==================================
	--BEG AND END DATES COMING INTO THIS USP ARE FOR YESTERDAY'S DATE.  THIS IS DIFFERENT THAN OTHER INVOICING REPORTS.
	--  OTHER INVOICING REPORTS, THE BEG IS 14 DAYS FROM TODAY AND END IS 1 DAY FROM TODAY.!
	--IF @EXECUTIONER = 'SUB' BEGIN  --NOTICE, ONLY WHEN CALLED FROM SUBSCRIPTION DOES DATE RANGE GET THIS CALCULATION APPLIED.
	--							   --  IF 'MAN' THEN, DATE RANGE USER ENTERS IS HONORED!!!
	--IF CAST(@TENANT_KEY AS INT) = 900602 BEGIN  --EGENCIA

		IF @TIME_INTERVAL = 'WK1' BEGIN  --@RPT_TYPE = 'WK1' BEGIN
			--  SELECT DATEADD(DD,-13,CAST('10/25/12' AS DATETIME))  --2012-10-12 00:00:00.000
			--  SELECT DATEADD(DD,  7,CAST('10/12/12' AS DATETIME))  --2012-10-19 00:00:00.000
			SET @DTM_BEG = @DTM_BEG - 13
			SET @DTM_END = @DTM_BEG +  7  --GET BEG DATE AND THEN ADD 7 IS EASIER.  REMEMBER END DATE MUST BE ONE MORE.
		END
		ELSE BEGIN  
			IF @TIME_INTERVAL = 'WK2' BEGIN  --@RPT_TYPE = 'WK2' BEGIN
				--  SELECT DATEADD(DD,- 6,CAST('10/25/12' AS DATETIME))  --2012-10-19 00:00:00.000
				--  SELECT DATEADD(DD,  7,CAST('10/19/12' AS DATETIME))  --2012-10-26 00:00:00.000
				SET @DTM_BEG = @DTM_BEG -  6
				SET @DTM_END = @DTM_BEG +  7  --GET BEG DATE AND THEN ADD 7 IS EASIER.  REMEMBER END DATE MUST BE ONE MORE.
			END
			--SHOULD ALREADY BE SET FOR 2 WEEKS, IF NOT WK1 OR WK2 IT IS ALREADY SET BEFORE 'IF @TIME_INTERVAL = 'WK1' !!!!
			--ELSE BEGIN  --FOR 2 WEEKS:
			--	--  SELECT DATEADD(DD,-13,CAST('10/25/12' AS DATETIME))  --2012-10-12 00:00:00.000
			--	--  SELECT DATEADD(DD, 14,CAST('10/12/12' AS DATETIME))  --2012-10-26 00:00:00.000
			--	SET @DTM_BEG = @DTM_BEG - 13
			--	SET @DTM_END = @DTM_BEG + 14  --GET BEG DATE AND THEN ADD 14 IS EASIER.  REMEMBER END DATE MUST BE ONE MORE.
			--END		
		END
	--END
END

--==================================
--FORMAT 'MULTIPLES' "IN THAT" VALUES:  (Referring to CHARINDEX(search for this, in that))
--==================================
SET @TENANT_KEY      = ',' + LTRIM(RTRIM(@TENANT_KEY))      + ','
SET @SCHEDULER_GROUP = ',' + LTRIM(RTRIM(@SCHEDULER_GROUP)) + ','


--==================================
--SET AMOUNT TO DIVIDE BY:
--================================== 60.0 OR 60.00 MAKES NO DIFFERENCE.
DECLARE @DS DECIMAL(10,2)  --INT  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.0       --DIVIDE SECONDS BY 1 TO GET SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
	SET @DS = 60.0    --DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
	SET @DS = 3600.0  --DIVIDE SECONDS BY 3600 TO GET HOURS.
END


IF @RPT_TYPE_GRP = 'AIA' BEGIN

	--POPULATES XML REPORT.  SRS SUBSCRIPTION EXPORTS TO XML.  SSIS RENAMES AND MOVES XML FILE TO FTP.  SERGEY PICKS UP FILE?
	--  SERGEY IS SUPPOSEDLY DIRECTLY CONNECTED WITH YZ_TB_AGENT_INVOICE_AUTOMATION TABLE IN INFOMART ALSO.
	--    SO WHY THE XML FILE NEEDS TO BE CREATED ALSO, IS WONDER?

	IF @RPT_TYPE = 'XML' BEGIN  --AIA REPORT  --EXACTLY WHAT IS IN XML FILE AND/OR AIA TABLE.
		--==================================		--CREATE TMP TABLE:
		IF OBJECT_ID('TEMPDB..#IMPORTS_APFM_AIA_XML') IS NOT NULL BEGIN
		   DROP TABLE #IMPORTS_APFM_AIA_XML
		END
		CREATE TABLE #IMPORTS_APFM_AIA_XML
		([PLATFORM]                   VARCHAR(50)
		,[STATUS]                     VARCHAR(50) 
		,INVOICE_MAP_KEY              VARCHAR(50) 
		,FIELD_NAME                   VARCHAR(50) 
		,SCHEDULER_PROJECT_ID         VARCHAR(50) 
		,SCHEDULER_ACL_NAME           VARCHAR(50) 
		,ACD_ID_EXTENSION             VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_ID      VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_NAME    VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_ID       VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_NAME     VARCHAR(50) 
		,PRIMARY_PROJECT_MANAGER_ID   VARCHAR(500) 
		,DIRECTOR_OF_PROJECT_MANAGEMENT_ID VARCHAR(500) 
		,AGENT_TECHNOLOGY_MANAGER_ID  VARCHAR(500) 
		,CONTRACTOR_SUPPORT_PATHWAY   VARCHAR(500) 
		,INVOICE_SYSTEM_ID            VARCHAR(50) 
		,HOLIDAY_INVOICE_ID           VARCHAR(50) 
		,HOLIDAY                      VARCHAR(50) 
		,FILE_FORMAT_OF_PUSH          VARCHAR(50) 
		,AGENT_PREPARATION_INVOICE_ID VARCHAR(50) 
		,NEW_ACL                      VARCHAR(50) 
		,CURRENT_CATS                 VARCHAR(50) 
		,CATS_ID                      VARCHAR(50) 
		,PATS_ID                      VARCHAR(50) 
		,SMART_ELIGIBLE               VARCHAR(50) 
		,SMART_TIER_1                 VARCHAR(50) 
		,SMART_TIER_2                 VARCHAR(50) 
		,SMART_TIER_3                 VARCHAR(50) 
		,INTERVAL                     VARCHAR(50) 
		,DATE                         VARCHAR(50) 
		,HOD_INTERVAL                 VARCHAR(50) 
		,AU_DK_LOGGED_IN_DURATION     INT  --DECIMAL(10,2)  --INT 
		,AU_DK_AVAILABLE_DURATION     INT  --DECIMAL(10,2)  --INT 
		,AU_DK_TALK_DURATION          INT  --DECIMAL(10,2)  --INT 
		,AU_DK_IB_TALK_DURATION       INT  --DECIMAL(10,2)  --INT 
		,AU_DK_OB_TALK_DURATION       INT  --DECIMAL(10,2)  --INT 
		,AU_DK_CONVENTIONAL_ACW       INT  --DECIMAL(10,2)  --INT 
		,AU_DK_NR_DURATION            INT  --DECIMAL(10,2)  --INT 
		,AU_DK_PSEUDO_PRODUCTIVE_DURATION   INT  --DECIMAL(10,2)  --INT 
		,AU_DK_ADJUSTED_NR_DURATION         INT  --DECIMAL(10,2)  --INT 
		,AU_DK_TOTAL_PRODUCTIVE_DURATION    INT  --DECIMAL(10,2)  --INT 
		,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS INT  --DECIMAL(10,2)  --INT 
		,AU_DK_XFER_COUNT             INT 
		,AU_DK_HOLD_COUNT             INT 
		,AU_DK_CONFERENCE_COUNT       INT 
		,AU_DK_CONSULT_COUNT          INT 
		,AU_DK_PUP_COUNT              INT 
		,AU_DK_OFFERED_COUNT          INT 
		,AU_DK_HANDLED_COUNT          INT 
		,AU_DK_IB_HANDLE_COUNT        INT 
		,AU_DK_OB_HANDLE_COUNT        INT 
		,AU_DK_RONA_COUNT             INT 
		,AU_DK_AWR_COUNT              INT 
		,MINIMUM_GUARANTEE            DECIMAL(10,2) 
		,AUTHORIZED_TO_INVOICE        DECIMAL(10,2) 
		,WEEK_ENDING_DATE             VARCHAR(50) 
		,PAY_CYCLE_CLOSURE_DATE       VARCHAR(50) 
		,CAL_DATE                     DATETIME
		,TENANT_KEY                   INT 
		,INVOICE_ID                   VARCHAR(50) 
		,CST_ROW_CREATED_TIME         DATETIME
		)
		--==================================		
		IF @DUR_IN IN ('MM','HH') BEGIN
			ALTER TABLE #IMPORTS_APFM_AIA_XML ALTER COLUMN AU_DK_LOGGED_IN_DURATION DECIMAL(10,2)
			ALTER TABLE #IMPORTS_APFM_AIA_XML ALTER COLUMN AU_DK_AVAILABLE_DURATION DECIMAL(10,2)
			ALTER TABLE #IMPORTS_APFM_AIA_XML ALTER COLUMN AU_DK_TALK_DURATION      DECIMAL(10,2)
			ALTER TABLE #IMPORTS_APFM_AIA_XML ALTER COLUMN AU_DK_IB_TALK_DURATION   DECIMAL(10,2)
			ALTER TABLE #IMPORTS_APFM_AIA_XML ALTER COLUMN AU_DK_OB_TALK_DURATION   DECIMAL(10,2)
			ALTER TABLE #IMPORTS_APFM_AIA_XML ALTER COLUMN AU_DK_CONVENTIONAL_ACW   DECIMAL(10,2)
			ALTER TABLE #IMPORTS_APFM_AIA_XML ALTER COLUMN AU_DK_NR_DURATION        DECIMAL(10,2)
			ALTER TABLE #IMPORTS_APFM_AIA_XML ALTER COLUMN AU_DK_PSEUDO_PRODUCTIVE_DURATION   DECIMAL(10,2)
			ALTER TABLE #IMPORTS_APFM_AIA_XML ALTER COLUMN AU_DK_ADJUSTED_NR_DURATION         DECIMAL(10,2)
			ALTER TABLE #IMPORTS_APFM_AIA_XML ALTER COLUMN AU_DK_TOTAL_PRODUCTIVE_DURATION    DECIMAL(10,2)
			ALTER TABLE #IMPORTS_APFM_AIA_XML ALTER COLUMN AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS DECIMAL(10,2)
		END
		--==================================
		INSERT INTO #IMPORTS_APFM_AIA_XML
		SELECT --AIA.*
		 AIA.[PLATFORM]
		,AIA.[STATUS]                       
		,AIA.INVOICE_MAP_KEY              
		,AIA.FIELD_NAME                   
		,AIA.SCHEDULER_PROJECT_ID         
		,AIA.SCHEDULER_ACL_NAME           
		,AIA.ACD_ID_EXTENSION             
		,AIA.OFFICIAL_WSOL_CLIENT_ID      
		,AIA.OFFICIAL_WSOL_CLIENT_NAME    
		,AIA.OFFICIAL_ACD_CLIENT_ID       
		,AIA.OFFICIAL_ACD_CLIENT_NAME     
		,AIA.PRIMARY_PROJECT_MANAGER_ID   
		,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID 
		,AIA.AGENT_TECHNOLOGY_MANAGER_ID  
		,AIA.CONTRACTOR_SUPPORT_PATHWAY   
		,AIA.INVOICE_SYSTEM_ID            
		,AIA.HOLIDAY_INVOICE_ID           
		,AIA.HOLIDAY                      
		,AIA.FILE_FORMAT_OF_PUSH          
		,AIA.AGENT_PREPARATION_INVOICE_ID 
		,AIA.NEW_ACL                      
		,AIA.CURRENT_CATS                 
		,AIA.CATS_ID                      
		,AIA.PATS_ID                      
		,AIA.SMART_ELIGIBLE               
		,AIA.SMART_TIER_1                 
		,AIA.SMART_TIER_2                 
		,AIA.SMART_TIER_3                 
		,AIA.INTERVAL                     
		,AIA.DATE                         
		,AIA.HOD_INTERVAL                 
		,CAST( ( 1.0 * (AIA.AU_DK_LOGGED_IN_DURATION) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_LOGGED_IN_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_AVAILABLE_DURATION) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_AVAILABLE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_TALK_DURATION) )      / @DS AS DECIMAL(10,2)) --AS AU_DK_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_IB_TALK_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_IB_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_OB_TALK_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_OB_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_CONVENTIONAL_ACW) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_CONVENTIONAL_ACW
		,CAST( ( 1.0 * (AIA.AU_DK_NR_DURATION) )        / @DS AS DECIMAL(10,2)) --AS AU_DK_NR_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_PSEUDO_PRODUCTIVE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_ADJUSTED_NR_DURATION) )         / @DS AS DECIMAL(10,2)) --AS AU_DK_ADJUSTED_NR_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION) )    / @DS AS DECIMAL(10,2)) --AS AU_DK_TOTAL_PRODUCTIVE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
		,(AIA.AU_DK_XFER_COUNT)         --AS AU_DK_XFER_COUNT
		,(AIA.AU_DK_HOLD_COUNT)         --AS AU_DK_HOLD_COUNT
		,(AIA.AU_DK_CONFERENCE_COUNT)   --AS AU_DK_CONFERENCE_COUNT
		,(AIA.AU_DK_CONSULT_COUNT)      --AS AU_DK_CONSULT_COUNT
		,(AIA.AU_DK_PUP_COUNT)          --AS AU_DK_PUP_COUNT
		,(AIA.AU_DK_OFFERED_COUNT)      --AS AU_DK_OFFERED_COUNT
		,(AIA.AU_DK_HANDLED_COUNT)      --AS AU_DK_HANDLED_COUNT
		,(AIA.AU_DK_IB_HANDLE_COUNT)    --AS AU_DK_IB_HANDLE_COUNT
		,(AIA.AU_DK_OB_HANDLE_COUNT)    --AS AU_DK_OB_HANDLE_COUNT
		,(AIA.AU_DK_RONA_COUNT)         --AS AU_DK_RONA_COUNT
		,(AIA.AU_DK_AWR_COUNT)          --AS AU_DK_AWR_COUNT
		,CAST( ( 1.0 * (AIA.MINIMUM_GUARANTEE) )     / @DS AS DECIMAL(10,2)) --AS MINIMUM_GUARANTEE
		,CAST( ( 1.0 * (AIA.AUTHORIZED_TO_INVOICE) ) / @DS AS DECIMAL(10,2)) --AS AUTHORIZED_TO_INVOICE
		,AIA.WEEK_ENDING_DATE             
		,AIA.PAY_CYCLE_CLOSURE_DATE       
		,AIA.CAL_DATE                     
		,AIA.TENANT_KEY                   
		,AIA.INVOICE_ID                   
		,AIA.WS_ROW_CREATED_TIME         

		--  SELECT *
		FROM            WSOL_TB_IMPORTS_APFM_UV_ANT_AIA       AIA
		INNER JOIN      DATE_TIME                             DT    ON DT.DATE_TIME_KEY      = AIA.STD_TENANT_START_DATE_TIME_KEY
		--HERE JUST FOR FILTER:
--		LEFT JOIN       YZ_TB_IMPORTS_APFM_SD_INVOICE_GROUPS  IG    ON IG.ID_EXT = AIA.ACD_ID_EXTENSION
--																   AND IG.TENANT_KEY         = AIA.TENANT_KEY  --FOR SAG.

		WHERE ( DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END )
		  AND ( @TENANT_KEY      IN (',0,',',,') OR CHARINDEX(',' + CAST(AIA.TENANT_KEY       AS VARCHAR(10)) + ',',@TENANT_KEY)      > 0 )
	--	  AND ( @SCHEDULER_GROUP IN (',0,',',,') OR CHARINDEX(',' + CAST(IG.INVOICE_GROUP_KEY AS VARCHAR(10)) + ',',@SCHEDULER_GROUP) > 0 )

		  AND AIA.STATUS = 'Active'
		  AND ( (ISNULL(AIA.READY_FOR_XML,'') = 'Y')  --<----Maintain this field, and the AIA will populate the XML correctly every time!!!!!!!!!
				OR (@ID_EXT = 'Y') )  --<----In Test Mode (ignore what ready_for_xml is set to).

--Note, AIA.READY_FOR_XML is Not the same, or may not be the same as IG.READY_FOR_XML !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

		--OLD, FROM iNet.  STILL TRYING TO REMEMBER PURPOSE:
		--  AND ( ( @TENANT_KEY IN ('0','') AND AIA.TENANT_KEY IN (SELECT TENANT_KEY FROM YZ_TB_AGENT_INVOICE_AUTOMATION_STATIC_DEFAULTS GROUP BY TENANT_KEY)
		--		) OR ( @TENANT_KEY NOT IN ('0','') AND AIA.TENANT_KEY = CAST(@TENANT_KEY AS INT) )
		--	  )

		ORDER BY 
		 AIA.OFFICIAL_ACD_CLIENT_NAME
		--,AIA.SCHEDULER_ACL_NAME
		,AIA.INVOICE_ID

		,AIA.ACD_ID_EXTENSION     
		,AIA.INVOICE_MAP_KEY
		,AIA.DATE
		,AIA.HOD_INTERVAL


		--==================================!!!--INSERT RECORD FOR REPORT SO SSIS KNOWS DATE OF DATA IN DATASET:
		--Have to include 'D??' or 'W??' because SRS Subscriptions are being ran at about same time in one sql job step.
		--  If one subscription takes longer than the other, the wrong date will get used/pulled from the YZ_TB_FILENAMES_FOR_SSIS in the ssis. and so on.
		IF CHARINDEX('D',@TIME_INTERVAL) > 0 BEGIN
			INSERT INTO YZ_TB_FILENAMES_FOR_SSIS
			SELECT  --FOR THE .XML FILES FOR EACH DATE:
			 'iNetAIA_' + LTRIM(RTRIM(@TIME_INTERVAL))  --'iNetAIA_D09' for internal wsinet tenants 9 days from current date.  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.getdate()  --CST_ROW_CREATED_TIME
		END
		ELSE BEGIN  --'W' MEANING NEED TO PASS/POPULATE WITH DATE RANGE, LIKE 'MMDDYY_MMDDYY'. -- FOR GAR AND NW.
			INSERT INTO YZ_TB_FILENAMES_FOR_SSIS
			SELECT  --FOR GETAROOM AND NINE_WEST:    --old:-- 'AGENT_INVOICE_AIA_XML'  --SQL_JOB_NAME 
			 'iNetAIA_' + LTRIM(RTRIM(@TIME_INTERVAL)) + '_' + '900626'  --LTRIM(RTRIM(CAST(@TENANT_KEY AS VARCHAR(10))))  --'iNetAIA_W14_900595' for GAR  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_BEG,1),'/','') + '_' + REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.getdate()  --CST_ROW_CREATED_TIME
		END
		--  SELECT * FROM YZ_TB_FILENAMES_FOR_SSIS ORDER BY CST_ROW_CREATED_TIME DESC   
		--    531 IS ACTUAL TENANT_KEY FOR APFM.  BUT 900626 IS BEING USED IN ERROR MESSAGES...

		--==================================!!!--RETURN DATASET TO REPORT:
		SELECT *
		FROM #IMPORTS_APFM_AIA_XML
		ORDER BY 
		 OFFICIAL_ACD_CLIENT_NAME
		--,SCHEDULER_ACL_NAME
		,INVOICE_ID

		,ACD_ID_EXTENSION     
		,INVOICE_MAP_KEY
		,DATE
		,HOD_INTERVAL
	END  --AIA_XML



END  --IF @RPT_TYPE_GRP = 'AIA'


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
--==================================

--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
--THIS (adding first, then getting minutes...) GIVES MORE AUT2, BUT NOT HOW Paul H. wanted.  Assuming 'Method' has precedence over highest AUT2.
--SELECT  ((852 + 811 + 555 + 669) / 60) * .63                                                   -- = 30.24
--CONVERT SECONDS TO MINUTES FOR EACH 15 MINUTE INTERVAL, THEN TOTAL FOR MINUTES IN AN HOUR, THEN TIMES RATE:
--SELECT  ((852 / 60) + (811 / 60) + (555 / 60) + (669 / 60)) * .63                              -- = 29.61
--!!! THIS IS HOW INVOICING MUST BE DONE PER PAUL H., 6/8/11, 10:45AM !!!--:
--CONVERT SECONDS TO MINUTES, DATA STILL IN 15 MINUTE INTERVALS, THEN TIMES RATE, THEN TOTAL/GROUP BASED ON HOW THEY WANT DATA DISPLAYED:
--SELECT (((852 / 60) * .63) + ((811 / 60)  * .63) + ((555 / 60)  * .63) + ((669 / 60)  * .63))  -- = 29.61
--THIS ENSURES THAT DATA/RESULTS WILL MATCH WITH EVERY INVOICE REPORT, NO MATTER WHAT INTERVAL(S) DATA IS DISPLAYED IN.
--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
GO
PRINT N'Creating [dbo].[uspIMPORTS_APFM_DEFAULT_INVOICE_GROUPS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_APFM_DEFAULT_INVOICE_GROUPS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150)
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_APFM_DEFAULT_INVOICE_GROUPS] '05/12/2014','05/12/2014','0'
--  EXECUTE [dbo].[uspIMPORTS_APFM_DEFAULT_INVOICE_GROUPS] '05/12/2014','05/12/2014','152,153'    --select @tenant_key  --152,153
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) + 1
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SET @TENANT_KEY = ',' + LTRIM(RTRIM(@TENANT_KEY)) + ','  --already passed in with commas around keys...
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SELECT
 UA.INVOICE_GROUP_KEY
,UA.SCHEDULER_ACL_NAME
FROM 
(	SELECT
	 YT.INVOICE_GROUP_KEY
	,YT.SCHEDULER_ACL_NAME
	--  SELECT *
	FROM YZ_TB_IMPORTS_APFM_SD_INVOICE_GROUPS YT

	WHERE ( YT.WS_END_TIME >= @DTM_BEG AND YT.WS_START_TIME <  @DTM_END )
	  AND ( @TENANT_KEY IN (',,',',0,') OR CHARINDEX(',' + CAST(YT.TENANT_KEY AS VARCHAR(10)) + ',',@TENANT_KEY) > 0 )

	GROUP BY
	 YT.INVOICE_GROUP_KEY
	,YT.SCHEDULER_ACL_NAME

--	--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--	UNION ALL  --UUUUUUUUUUNNNNNNNNNNIIIIIIIIIIOOOOOOOOOONNNNNNNNNN
--	--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--
--	SELECT
--	 0                     AS INVOICE_GROUP_KEY
--	,' ALL INVOICE GROUPS' AS SCHEDULER_ACL_NAME  --MUST KEEP SPACE IN FRONT OF ' ALL TENANTS' !!!
) UA
ORDER BY UA.SCHEDULER_ACL_NAME

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GO
PRINT N'Creating [dbo].[uspIMPORTS_APFM_DEFAULT_SCHEDULER_GROUPS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_APFM_DEFAULT_SCHEDULER_GROUPS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_APFM_DEFAULT_SCHEDULER_GROUPS] '05/12/2014','05/12/2014'
--  EXECUTE [dbo].[uspIMPORTS_APFM_DEFAULT_SCHEDULER_GROUPS] '05/12/2014','05/12/2014'
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) + 1
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SELECT
 UA.SCHEDULER_ACL_NAME
,UA.DISPLAY_NAME
FROM 
(	SELECT
	 CASE WHEN ISNULL(YT.INVOICE_ID,'') = '' THEN 'NO INVOICE GROUP' ELSE YT.INVOICE_ID END AS SCHEDULER_ACL_NAME
	,CASE WHEN ISNULL(YT.INVOICE_ID,'') = '' THEN 'NO INVOICE GROUP' ELSE YT.INVOICE_ID END AS DISPLAY_NAME
	--  SELECT *
	FROM WSOL_TB_IMPORTS_APFM_INVOICING YT

	WHERE ( YT.DATETIME >= @DTM_BEG AND YT.DATETIME <  @DTM_END )

	GROUP BY
	 CASE WHEN ISNULL(YT.INVOICE_ID,'') = '' THEN 'NO INVOICE GROUP' ELSE YT.INVOICE_ID END
) UA
ORDER BY UA.SCHEDULER_ACL_NAME

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GO
PRINT N'Creating [dbo].[uspIMPORTS_APFM_FIVE9_AIA_NON_BILLABLE_SKILLS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_APFM_FIVE9_AIA_NON_BILLABLE_SKILLS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHICH SKILL VALUES EXIST IN THE AGENT INVOICE REPORTS, BUT ARE NOT CURRENTLY SELECTED AS BILLABLE AGENT SKILLS.

--THIS USP IS DATA SOURCE FOR SRS GRID ON "ACTIVITY IMPORTS" STATUS REPORT!!!

--  EXECUTE [dbo].[uspIMPORTS_APFM_FIVE9_AIA_NON_BILLABLE_SKILLS] '10/25/2013','11/17/2013','900626','APFM_AIA_AGENT_MAPPING','','R'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

		--WHEN RAN ON FRI, 01/04/13, THE RESULTS RETURNS:  2012.12.21 - 2013.01.03    --FRI-THU   CORRECT!!!
		--SELECT CONVERT(VARCHAR(10),(DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 14),102) + ' - ' +
		--       CONVERT(VARCHAR(10),(DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 1),102)
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--SELECT * FROM YZ_TB_IMPORTS_APFM_FIVE9_INVOICING_BAD WHERE BAD_IMPORTS_NO = 35


IF OBJECT_ID('TEMPDB..#IMPORTS_APFM_FIVE9_AIA_NON_BILLABLE_SKILLS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_APFM_FIVE9_AIA_NON_BILLABLE_SKILLS
END
CREATE TABLE #IMPORTS_APFM_FIVE9_AIA_NON_BILLABLE_SKILLS
(FILEDATETIME          VARCHAR(50)
,FTP_FILE_NAME         VARCHAR(100)
,WS_ROW_CREATED_TIME   DATETIME
--,INVOICE_MAP_KEY       VARCHAR(50)
,SKILL_NAME		       VARCHAR(500)
,RCD_CNT               INT
--,BAD_IMPORTS_NO		   VARCHAR(5)
)
INSERT INTO #IMPORTS_APFM_FIVE9_AIA_NON_BILLABLE_SKILLS
SELECT
 B.FF_DATE
,REPLACE(B.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
,B.WS_ROW_CREATED_TIME
--,B.FF_AGENT_NAME					AS INVOICE_MAP_KEY
,B.FF_SKILL_AVAILABILITY			AS SKILL_NAME
,COUNT(*)  --AS RCD_CNT
--,B.BAD_IMPORTS_NO
FROM            WSOL_TB_IMPORTS_APFM_INVOICING	B
WHERE CAST(B.FF_DATE AS DATETIME) >= @DTM_BEG AND CAST(B.FF_DATE AS DATETIME) <  @DTM_END
  --AND (ISNULL(B.BAD_IMPORTS_NO,0) = 35)
  AND BILLABLE_SKILL_Y_N = 'N'
  AND (ISNULL(B.FF_AGENT_NAME,'') NOT IN ('Joshua Miller','Lynne Rochel','Jessica Sharp','Karen Ritter','Emily Beauchamp'))	-- FILTER OUT APFM EMPLOYEES
GROUP BY
 B.FF_DATE
,REPLACE(B.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
,B.WS_ROW_CREATED_TIME
,B.FF_SKILL_AVAILABILITY	--SKILL_NAME
--,B.FF_AGENT_NAME			--INVOICE_MAP_KEY
--,B.BAD_IMPORTS_NO

--==================================
UPDATE #IMPORTS_APFM_FIVE9_AIA_NON_BILLABLE_SKILLS SET
 FILEDATETIME = REPLACE(CONVERT(VARCHAR(10),ISNULL(FILEDATETIME,'1/1/1900'),102),'/',' . ')


--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_APFM_FIVE9_AIA_NON_BILLABLE_SKILLS)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''
	
	IF @RCD_CNT = 0 BEGIN
		SET @MSG1 = @MSG1 + 'There are NO non-billable skill records!'
	END
	ELSE BEGIN
		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
			SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		END
		SET @MSG1 = @MSG1 + 'The list below contains agent skill values for agents that are associated with activity for the report date range, but ' + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + 'these skills have not been identified as billable agent skills. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

		SET @MSG1 = @MSG1 + 'Skills that are on this list will not be included as part of agent invoice statistics (for activity dates shown), unless a special request is made and received '
		SET @MSG1 = @MSG1 + 'with plenty of time before the automated invoice process begins.  The analyst will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10)
	END

END

--==================================
--RETURN DATA:
--==================================
SELECT 
*
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_APFM_FIVE9_AIA_NON_BILLABLE_SKILLS 

ORDER BY
 FILEDATETIME
,SKILL_NAME



--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_APFM_IMPORT_STATUS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_APFM_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_APFM_IMPORT_STATUS] '06/01/2017','06/09/2017','','B'

--==============================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==============================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME

IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'B' BEGIN     
			--Dates passed in are for previous day:
	IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
	END
	ELSE IF DAY(dbo.getdate()) = 1 BEGIN
		IF MONTH(dbo.getdate()) = 1 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
	END
	ELSE BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
	END
	
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

END

ELSE BEGIN  --DAILY - Run report for YESTERDAY, 1 Day ONLY.
	SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)     -- @DATE_BEG already starting at yesterday's date.
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)		-- + 1 --Done Below.
END

SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.


--=======================================================================================
--	CREATE TEMP TABLE:
--=======================================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_APFM_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_APFM_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_APFM_IMPORT_STATUS
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--================================================================================================================
--	INSERT RECORDS INTO TEMP TABLE:
--================================================================================================================
INSERT INTO #IMPORTS_APFM_IMPORT_STATUS
SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ')	AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0)															AS RCD_CNT
FROM
	(	
	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME)						AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')											AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME														AS WS_ROW_CREATED_TIME
		,COUNT(*)																	AS RCD_CNT
		--  SELECT TOP 100 * FROM WSOL_TB_IMPORTS_APFM_INVOICING
	FROM		WSOL_TB_IMPORTS_APFM_INVOICING  C
	
	INNER JOIN	DATE_TIME						DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

	GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME)						--AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')											--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME														--AS WS_ROW_CREATED_TIME
	) UA

--=============================================================================
--	CHECK FOR BAD DATA FOUND IN IMPORT .CSV FILES:
--=============================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

--CREATE CURSOR, POPULATE CURSOR FOR 2 WEEK DATE RANGE, SPIN THROUGH EACH OF 14 RECORDS, CONCATENATING TO STRING FOR EACH DATE MISSING.

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	
	SELECT	REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	FROM	DATE_TIME DT
	WHERE	DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
	GROUP BY
			REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
) DT 

LEFT OUTER JOIN #IMPORTS_APFM_IMPORT_STATUS  I	ON I.FILEDATETIME = DT.FILEDATETIME

WHERE ISNULL(I.RCD_CNT,0) = 0

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '

    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--======================================================================================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--======================================================================================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END

--===========================================================================================================================================================================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''

IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
		SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

			SET @MSG1 = @MSG1 + 'The automated invoice processes begins at 10:00AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + 'Any missing import files not on the SFTP server by 9:59AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
		END
	END
	ELSE BEGIN
		SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
		END
	END
	
END

--===========================================================================================================================================================================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),DBO.GETDATE(),101) + ' 10:30:00' AS DATETIME)
IF DBO.GETDATE() >  @TODAY_1030 AND DBO.GETDATE() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM YZ_TB_ERRORS_FOUND
							   WHERE TENANT_KEY = 900626 AND SUB_GROUP_NAME = 'APFM_INVOICING' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some ERRORS were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_APFM_IMPORT_STATUS 

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_APFM_INVOICING_IMPORT_WITH_SKILLS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_APFM_INVOICING_IMPORT_WITH_SKILLS]
AS
SET NOCOUNT ON  

--====================================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY =       900626  --APFM TENANT KEY 
--====================================================
DELETE FROM YZ_TB_ERRORS_FOUND 
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = 'APFM_INVOICING'
--SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900626
--=============================================================================

--=============================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.getdate()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--=============================================================================

--SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_1

--=============================================================================
--CLEANUP WORK (_1) TABLE:
--HANDLE Blank Agent Name and COM Team Members...:
--=============================================================================
INSERT INTO WSOL_TB_IMPORTS_APFM_INVOICING_BAD_1
(BAD_IMPORTS_NO,BAD_IMPORTS_FILE_TYPE,WS_ROW_CREATED_TIME,FF_DATE,FF_HOUR,FF_SKILL_AVAILABILITY,FF_AGENT_NAME,FF_STATE,FF_REASON_CODE,FF_AGENT_STATE_TIME
,FF_TIMESTAMP,SEQNO_ADDED_TIME,SEQNO,FTP_FILE_NAME)
SELECT
 24                     --BAD_IMPORTS_NO			--'Blank Agent Name'
,'NAN'                  --BAD_IMPORTS_RECORD_TYPE	--'N'o 'A'gent 'N'ame
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_APFM_INVOICING_1  W1
WHERE LTRIM(RTRIM(ISNULL(W1.F4,''))) IN ('')
--========================================================================
--DELETE WHERE Blank Agent Name:
--========================================================================
DELETE FROM WSOL_TB_IMPORTS_APFM_INVOICING_1  
WHERE LTRIM(RTRIM(ISNULL(F4,''))) IN ('')

--========================================================================
--HANDLE Header Row:
--========================================================================
INSERT INTO WSOL_TB_IMPORTS_APFM_INVOICING_BAD_1
(BAD_IMPORTS_NO,BAD_IMPORTS_FILE_TYPE,WS_ROW_CREATED_TIME,FF_DATE,FF_HOUR,FF_SKILL_AVAILABILITY,FF_AGENT_NAME,FF_STATE,FF_REASON_CODE,FF_AGENT_STATE_TIME
,FF_TIMESTAMP,SEQNO_ADDED_TIME,SEQNO,FTP_FILE_NAME)
SELECT
 23                     --BAD_IMPORTS_NO			--'Header Row'
,'HRW'                  --BAD_IMPORTS_RECORD_TYPE	--'H'eader 'R'o'W'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_APFM_INVOICING_1  W1
WHERE LTRIM(RTRIM(ISNULL(W1.F1,''))) IN ('','DATE')
--========================================================================
--DELETE WHERE Header Row:
--========================================================================
DELETE FROM WSOL_TB_IMPORTS_APFM_INVOICING_1  
WHERE LTRIM(RTRIM(ISNULL(F1,''))) IN ('','DATE')

--========================================================================
--DELETE Logout States:
--========================================================================
INSERT INTO WSOL_TB_IMPORTS_APFM_INVOICING_BAD_1
(BAD_IMPORTS_NO,BAD_IMPORTS_FILE_TYPE,WS_ROW_CREATED_TIME,FF_DATE,FF_HOUR,FF_SKILL_AVAILABILITY,FF_AGENT_NAME,FF_STATE,FF_REASON_CODE,FF_AGENT_STATE_TIME
,FF_TIMESTAMP,SEQNO_ADDED_TIME,SEQNO,FTP_FILE_NAME)
SELECT
 30                     --BAD_IMPORTS_NO			--'NON-BILLABLE STATE'
,'LOS'                  --BAD_IMPORTS_RECORD_TYPE	--'L'og'O'ut 'S'tate
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_APFM_INVOICING_1  W1
WHERE LTRIM(RTRIM(ISNULL(F5,''))) = 'Logout'

DELETE FROM WSOL_TB_IMPORTS_APFM_INVOICING_1  
WHERE LTRIM(RTRIM(ISNULL(F5,''))) = 'Logout'
													
--======================================================================================================
--POPULATE SKILL AVAILABILITY ON ALL ROWS
--======================================================================================================
ADD_SKILL:
DELETE FROM WSOL_TB_IMPORTS_APFM_INVOICING_2	--WORK TABLE TO HOLD RECORDS WITH COMPLETE DATA.
--======================================================================================================
DECLARE
 @F1 VARCHAR(50)
,@F2 VARCHAR(50)
,@F3 VARCHAR(500)
,@F4 VARCHAR(100)
,@F5 VARCHAR(50)
,@F6 VARCHAR(50)
,@F7 VARCHAR(50)
,@F8 VARCHAR(50)
,@SEQNO_ADDED_TIME DATETIME
,@SEQNO INT
,@FTP_FILE_NAME VARCHAR(100)
,@FF_SKILL VARCHAR(500)

SET @FF_SKILL = 'Y83JJ99390n-+'

DECLARE crsT2 CURSOR FOR
SELECT
 ISNULL(F1,'')
,ISNULL(F2,'')
,ISNULL(F3,'')
,ISNULL(F4,'')
,ISNULL(F5,'')
,ISNULL(F6,'')
,ISNULL(F7,'')
,ISNULL(F8,'')
,ISNULL(SEQNO_ADDED_TIME,'')
,ISNULL(SEQNO,0)
,ISNULL(FTP_FILE_NAME,'')
FROM WSOL_TB_IMPORTS_APFM_INVOICING_1

OPEN crsT2
FETCH NEXT FROM crsT2 INTO @F1,@F2,@F3,@F4,@F5,@F6,@F7,@F8,@SEQNO_ADDED_TIME,@SEQNO,@FTP_FILE_NAME

WHILE @@FETCH_STATUS = 0 BEGIN
	IF ISNULL(@F3,'') <> '' BEGIN
		SET @FF_SKILL = @F3
		INSERT INTO WSOL_TB_IMPORTS_APFM_INVOICING_2
		(FF1
		,FF2
		,FF3
		,FF4
		,FF5
		,FF6
		,FF7
		,FF8
		,EVENT_START_TIME
		,EVENT_DURATION_SECS
		,SEQNO_ADDED_TIME
		,SEQNO
		,FTP_FILE_NAME
		)
		VALUES
		(@F1,@F2,@FF_SKILL,@F4,@F5,@F6,@F7,@F8,NULL,NULL,@SEQNO_ADDED_TIME,@SEQNO,@FTP_FILE_NAME)
	END
	ELSE BEGIN

		INSERT INTO WSOL_TB_IMPORTS_APFM_INVOICING_2
		(FF1
		,FF2
		,FF3
		,FF4
		,FF5
		,FF6
		,FF7
		,FF8
		,EVENT_START_TIME
		,EVENT_DURATION_SECS
		,SEQNO_ADDED_TIME
		,SEQNO
		,FTP_FILE_NAME
		)
		VALUES
		(@F1,@F2,@FF_SKILL,@F4,@F5,@F6,@F7,@F8,NULL,NULL,@SEQNO_ADDED_TIME,@SEQNO,@FTP_FILE_NAME)

	END

	FETCH NEXT FROM crsT2 INTO @F1,@F2,@F3,@F4,@F5,@F6,@F7,@F8,@SEQNO_ADDED_TIME,@SEQNO,@FTP_FILE_NAME
END
CLOSE crsT2
DEALLOCATE crsT2

--=============================================================================
--CORRECT SKILL FOR NOT READY-NOT READY RECORDS
--=============================================================================
UPDATE W2 SET
 W2.FF3 = WT2.FF3
,W2.EVENT_START_TIME = dbo.getdate()
FROM WSOL_TB_IMPORTS_APFM_INVOICING_2 WT2
INNER JOIN WSOL_TB_IMPORTS_APFM_INVOICING_2 W2		ON WT2.FF4 = W2.FF4		--AGENT_NAME
												   AND WT2.FF8 = W2.FF8		--TIMESTAMP
													   
WHERE W2.FF5	= 'Not Ready'
  AND W2.FF6	= 'Not Ready'
  AND W2.FF4	= WT2.FF4
  AND W2.FF8	= WT2.FF8
  AND WT2.FF5   = 'Login'

--SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_1
--SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_BAD_1 WHERE FF_STATE = 'Login'
--SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_2 ORDER BY SEQNO
--SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_2 WHERE FF5 = 'Not Ready' AND FF6 = 'Not Ready' ORDER BY SEQNO

--=============================================================================
--SET EVENT START TIME AND DURATION TO PREPARE FOR PARSING INTO INTERVALS
--=============================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_2 SET
 EVENT_START_TIME		= CAST(FF1 + ' ' + RIGHT(FF8,8) AS DATETIME)
,EVENT_DURATION_SECS	= CAST
						  (
						    (CAST(REPLACE(REPLACE(SUBSTRING(FF7,1,2),':',''),' ','') AS INT) * 3600)
			              + (CAST(REPLACE(SUBSTRING(FF7,CHARINDEX(':',FF7) + 1,2),' ','') AS INT) * 60)
			              + (CAST(REPLACE(RIGHT(RTRIM(FF7),2),' ','') AS INT))
						  AS DECIMAL(10,2)
						  )

--=============================================
--DELETE EVENTS WHERE DURATION = 0.00
--=============================================
DELETE FROM WSOL_TB_IMPORTS_APFM_INVOICING_2 
WHERE EVENT_DURATION_SECS = 0.00

--=====================================================================================================================
-- PARSE DATA RECORDS INTO INTERVALS
--=====================================================================================================================
DELETE FROM WSOL_TB_IMPORTS_APFM_INVOICING_3

DECLARE
 @FF1  VARCHAR(50)
,@FF2  VARCHAR(50)
,@FF3  VARCHAR(500)
,@FF4  VARCHAR(100)
,@FF5  VARCHAR(50) 
,@FF6  VARCHAR(50)
,@FF7  VARCHAR(50) 
,@FF8  VARCHAR(50) 
,@FF9  DATETIME 
,@FF10 DECIMAL(10,2) 
,@FF11 DATETIME
,@FF12 INT
,@FF13 VARCHAR(100)
,@FF14 INT

DECLARE crsT3 CURSOR FOR   
SELECT
 ISNULL(FF1,'')
,ISNULL(FF2,'')
,ISNULL(FF3,'')
,ISNULL(FF4,'')
,ISNULL(FF5,'')
,ISNULL(FF6,'')
,ISNULL(FF7,'')
,ISNULL(FF8,'')
,ISNULL(EVENT_START_TIME,'')
,ISNULL(EVENT_DURATION_SECS,0.00)
,ISNULL(SEQNO_ADDED_TIME,'')
,ISNULL(SEQNO,'0')
,ISNULL(FTP_FILE_NAME,'')
,3600											--<<----- DETERMINES THE INTERVAL, 900 = 15 MIN, 1800 = 30 MIN, 3600 = 60 MIN
FROM WSOL_TB_IMPORTS_APFM_INVOICING_2

OPEN crsT3
FETCH NEXT FROM crsT3   INTO @FF1,@FF2,@FF3,@FF4,@FF5,@FF6,@FF7,@FF8,@FF9,@FF10,@FF11,@FF12,@FF13,@FF14

WHILE @@FETCH_STATUS = 0 BEGIN
	 -- SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_3 ORDER BY SEQNO
		INSERT INTO WSOL_TB_IMPORTS_APFM_INVOICING_3
		(FF_DATE
,FF_HOUR
,FF_SKILL_AVAILABILITY
,FF_AGENT_NAME
,FF_STATE
,FF_REASON_CODE
,FF_AGENT_STATE_TIME
,FF_TIMESTAMP
,EVENT_START_TIME
,EVENT_DURATION_SECS
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
		SELECT RESULT.FF_DATE
,RESULT.FF_HOUR
,RESULT.FF_SKILL_AVAILABILITY
,RESULT.FF_AGENT_NAME
,RESULT.FF_STATE
,RESULT.FF_REASON_CODE
,RESULT.FF_AGENT_STATE_TIME
,RESULT.FF_TIMESTAMP
,RESULT.EVENT_START_TIME
,RESULT.EVENT_DURATION_SECS
,RESULT.INTERVAL_START_TIME
,RESULT.INTERVAL_END_TIME
,RESULT.EVENT_DURATION_IN_INTERVAL_SECS
,RESULT.SEQNO_ADDED_TIME
,RESULT.SEQNO
,RESULT.FTP_FILE_NAME
		FROM TVF_APFM_FIVE9_STATES_TO_INTERVALS(@FF1,@FF2,@FF3,@FF4,@FF5,@FF6,@FF7,@FF8,@FF9,@FF10,@FF11,@FF12,@FF13,@FF14) RESULT

    FETCH NEXT FROM crsT3   INTO @FF1,@FF2,@FF3,@FF4,@FF5,@FF6,@FF7,@FF8,@FF9,@FF10,@FF11,@FF12,@FF13,@FF14
END
CLOSE crsT3
DEALLOCATE crsT3

-- SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_3 ORDER BY SEQNO
--=============================================================================
-- GROUP DATA BY INTERVAL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_APFM_INVOICING_4

INSERT INTO WSOL_TB_IMPORTS_APFM_INVOICING_4
(
FF_DATE
,FF_HOUR
,FF_SKILL_AVAILABILITY
,FF_AGENT_NAME
,FF_STATE
,FF_REASON_CODE
,EVENT_DURATION_SECS
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_TIME
,BILLABLE_SKILL_Y_N
,LOGGED_IN_DUR
,READY_DUR
,RING_DUR
,ON_CALL_DUR
,ON_CALL_SILENT_DUR
,ACW_DUR
,ON_PARK_DUR
,ON_VOICEMAIL_DUR
,ON_PREVIEW_DUR
,NRD_ACW_DUR
,NRD_TASK_COMP_DUR
,NRD_SYSTEM_OBC_DUR
,ON_HOLD_DUR
,NRD_TRAINING_DUR
,NRD_MEETING_DUR
,NRD_MANDATORY_REPORTING_DUR
,NRD_MANUAL_OBC_DUR
,NRD_ACW_AGENT_DUR
,NRD_OFFLINE_VENDOR_UNPAID_DUR
,NRD_REASON_4_DUR
,NOT_READY_BILLABLE
,NOT_READY_NON_BILLABLE
,NON_BILLABLE_SKILL_DUR
,NON_BILLABLE_STATE_REASON_DUR
,BILLABLE_CLIENT
,TOTAL_TALK
,TOTAL_ACW
,AUTHORIZED
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W3.FF_DATE
,W3.FF_HOUR
,W3.FF_SKILL_AVAILABILITY
,W3.FF_AGENT_NAME
,W3.FF_STATE
,W3.FF_REASON_CODE
,SUM(ISNULL(W3.EVENT_DURATION_SECS				,0.00))
,SUM(ISNULL(W3.EVENT_DURATION_IN_INTERVAL_SECS	,0.00))
,MAX(W3.SEQNO_ADDED_TIME)
,MIN(W3.SEQNO)
,W3.FTP_FILE_NAME

,NULL						--AS RESOURCE_NAME
,W3.INTERVAL_START_TIME		--AS DATETIME
,NULL						--AS HOUR_INTERVAL
,NULL						--AS EMPLOYEE_ID
,NULL						--AS STD_TENANT_START_TIME
,NULL						--AS BILLABLE_SKILL_Y_N
,NULL						--AS LOGGED_IN_DUR
,NULL						--AS READY_DUR
,NULL						--AS RING_DUR
,NULL						--AS ON_CALL_DUR
,NULL						--AS ON_CALL_SILENT_DUR
,NULL						--AS ACW_DUR
,NULL						--AS ON_PARK_DUR
,NULL						--AS ON_VOICEMAIL_DUR
,NULL						--AS ON_PREVIEW_DUR
,NULL						--AS NRD_ACW_DUR
,NULL						--AS NRD_TASK_COMP_DUR
,NULL						--AS NRD_SYSTEM_OBC_DUR
,NULL						--AS ON_HOLD_DUR
,NULL						--AS NRD_TRAINING_DUR
,NULL						--AS NRD_MEETING_DUR
,NULL						--AS NRD_MANDATORY_REPORTING_DUR
,NULL						--AS NRD_MANUAL_OBC_DUR
,NULL						--AS NRD_ACW_AGENT_DUR
,NULL						--AS NRD_OFFLINE_VENDOR_UNPAID_DUR
,NULL						--AS NRD_REASON_4_DUR
,NULL						--AS NOT_READY_BILLABLE
,NULL						--AS NOT_READY_NON_BILLABLE
,NULL						--AS NON_BILLABLE_SKILL_DUR
,NULL						--AS NON_BILLABLE_STATE_REASON_DUR
,NULL						--AS BILLABLE_CLIENT
,NULL						--AS TOTAL_TALK
,NULL						--AS TOTAL_ACW
,NULL						--AS AUTHORIZED
,NULL						--AS EMAIL
,NULL						--AS ID_EXT
,NULL						--AS SCHEDULER_ACL_NAME
,NULL						--AS STD_TENANT_START_DATE_TIME_KEY
,NULL						--AS CAL_DATE
,351						--AS TENANT_KEY
,NULL						--AS AIR_DAY_TYPE
,NULL						--AS AIR_ACW_FONT_COLOR
,NULL						--AS MIN_GUARANTEE_RATE
,NULL						--AS MIN_GUARANTEE_TYPE
,NULL						--AS AUTHORIZED_TO_INVOICE_TYPE
,NULL						--AS HAS_HOLIDAYS
,NULL						--AS INCLUDE_IN_CAS
,NULL						--AS READY_FOR_XML
,NULL						--AS W2.SHOW_ID_EXTS
,NULL						--AS INVOICE_ID

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_APFM_INVOICING_3  W3

GROUP BY
 W3.FF_DATE
,W3.FF_HOUR
,W3.FF_SKILL_AVAILABILITY
,W3.FF_AGENT_NAME
,W3.FF_STATE
,W3.FF_REASON_CODE
,W3.FTP_FILE_NAME
,W3.INTERVAL_START_TIME

ORDER BY
 MIN(W3.SEQNO)

-- SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_4 ORDER BY SEQNO

--==================================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_4) TABLE THAT WEREN'T IN IMPORTED FILE:
--==================================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
 HOUR_INTERVAL			 = DATEPART(HH, [DATETIME])

--========================================================================
--SET NON-BILLABLE / BILLABLE SKILLS FLAG
--========================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
 BILLABLE_SKILL_Y_N = CASE WHEN ISNULL(FF_SKILL_AVAILABILITY,'') NOT IN
 (
  'CS AOR'
 ,'CS LS Level 1'
 ,'CS LS Level 2'
 ,'CS LS Level 3'
 ,'CS Senior Advisor'
 ,'CS AOR, CS AOR SN referral'			-- EFFECTIVE 8/16/15
 ,'CS LS Level 3, CS AOR SN referral'	-- EFFECTIVE 8/16/15
 ,'CS AOR SN referral'					-- EFFECTIVE 8/16/15
 ,'CS AOR Exit'							-- EFFECTIVE 8/16/15
 ,'CS LS Level 2, HC Susan Bishop'
--,'CS LS Level 2, CS AOR SN referral'	-- ONLY 3/31/16 DUE TO AGENT ERROR PER BRANDON M.
 ,'CS LS Level 3, CS AOR'				-- EFFECTIVE 04/04/16 PER BRANDON M.
 ,'CS LS Level 2, CS AOR'				-- EFFECTIVE 04/06/16 PER BRANDON M.
 ,'OS Main'								-- EFFECTIVE 05/17/16 PER BRANDON M.
 ,'CS LS Level 2, Training OS OppGen'	-- EFFECTIVE 05/21/16 PER BRANDON M.
 ,'OS PB2B'								-- EFFECTIVE 05/23/16 PER BRANDON M.
 ,'CS LS Level 3, OS Main'				-- EFFECTIVE 05/26/16 PER BRANDON M.
 ,'OS Main, OS PB2B'					-- EFFECTIVE 06/09/16 PER BRANDON M.
 ,'CS LS Level 2, OS Main'				-- EFFECTIVE 06/10/16 PER BRANDON M.
 ,'CS AOR, OS Main'						-- EFFECTIVE 06/12/16 PER BRANDON M.
 ,'CS Spanish'							-- EFFECTIVE 06/14/16 PER BRANDON M.
 ,'CS AOR, OS PB2B'						-- EFFECTIVE 10/24/16 PER BRANDON M.
 ,'CS AOR SN referral, OS Main'			-- EFFECTIVE 11/21/16 PER BRANDON M.
 ,'CS LS Level 3, OS PB2B'				-- EFFECTIVE 12/04/16 PER BRANDON M.
 ,'OS OB Project'						-- EFFECTIVE 12/21/16 PER BRANDON M.
 ,'CS AOR 2'							-- EFFECTIVE 12/19/17 PER BRANDON M.
 ,'OS SZ Legacy'						-- EFFECTIVE 01/05/18 PER BRANDON M.
 ) 
 THEN 'N'
 ELSE 'Y' END

--========================================================================================
-- AGENT BILLABLE STATES
--========================================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
 READY_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))  = 'Ready'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,RING_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))  = 'Ringing'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,ON_CALL_DUR		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))  = 'On Call'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,ON_CALL_SILENT_DUR = CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))  = 'On Call (Silent)'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END	
,ACW_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))  = 'After Call Work'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,ON_PARK_DUR		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))  = 'On Park'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,ON_PREVIEW_DUR		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))  = 'On Preview'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END


,NRD_ACW_DUR					= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))   = 'Not Ready'
										AND LTRIM(RTRIM(FF_REASON_CODE))		= 'After Call Work'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								  ELSE 0.00 END
,NRD_TASK_COMP_DUR				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))   = 'Not Ready'
					  					AND LTRIM(RTRIM(FF_REASON_CODE))		= 'Task Completion'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								  ELSE 0.00 END
,NRD_SYSTEM_OBC_DUR				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))	= 'Not Ready'
										AND LTRIM(RTRIM(FF_REASON_CODE))		= 'System_OBC'					THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								  ELSE 0.00 END
,NRD_MANDATORY_REPORTING_DUR	= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))	= 'Not Ready'
										AND LTRIM(RTRIM(FF_REASON_CODE))		= 'Mandatory Reporting'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								  ELSE 0.00 END
,NRD_MANUAL_OBC_DUR				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))	= 'Not Ready'
										AND LTRIM(RTRIM(FF_REASON_CODE))		= 'Manual_OBC'					THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								  ELSE 0.00 END
,NRD_ACW_AGENT_DUR				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))	= 'Not Ready'
										AND LTRIM(RTRIM(FF_REASON_CODE))		= 'After Call Work - Agent'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								  ELSE 0.00 END
,NRD_OFFLINE_VENDOR_UNPAID_DUR	= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))	= 'Not Ready'
										AND LTRIM(RTRIM(FF_REASON_CODE))		= 'Offline_Vendor Unpaid'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								  ELSE 0.00 END

--=========================================================================================
-- AGENT STATES THAT ARE TRACKED/REPORTED BUT NOT AGENT BILLABLE
--=========================================================================================
,LOGGED_IN_DUR		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))		= 'Login'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,ON_VOICEMAIL_DUR	= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))		= 'On Voicemail'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2))
					  ELSE 0.00 END															-- NON-BILLABLE AS OF 3/1/15
,ON_HOLD_DUR		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))		= 'On Hold'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2))
					  ELSE 0.00 END															-- TIME ALREADY INCLUDED IN ON CALL STATE

,NRD_TRAINING_DUR   = CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))      = 'Not Ready'
						   AND LTRIM(RTRIM(ISNULL(FF_REASON_CODE,''))) = 'Training'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2))
				      ELSE 0.00 END															-- CLIENT WILL PAY BUT NOT AGENT BILLABLE  -- CLIENT WILL NOT PAY AS OF 3/1/15
,NRD_MEETING_DUR    = CASE WHEN LTRIM(RTRIM(ISNULL(FF_STATE,'')))      = 'Not Ready'
					       AND LTRIM(RTRIM(ISNULL(FF_REASON_CODE,''))) = 'Meeting'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2))
				      ELSE 0.00 END															-- CLIENT WILL PAY BUT NOT AGENT BILLABLE  -- CLIENT WILL NOT PAY AS OF 3/1/15
--========================================================================
--UPDATE ADDITIONAL TOTALS FOR INVOICING
--========================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
 NOT_READY_BILLABLE		= NRD_ACW_DUR + NRD_TASK_COMP_DUR + NRD_SYSTEM_OBC_DUR + NRD_MANDATORY_REPORTING_DUR + NRD_MANUAL_OBC_DUR -- + NRD_ACW_AGENT_DUR	-- ALL INCLUDED BELOW IN TOTAL_ACW AS WELL
,NOT_READY_NON_BILLABLE	= NRD_TRAINING_DUR + NRD_MEETING_DUR
,TOTAL_TALK				= RING_DUR + ON_PREVIEW_DUR + ON_CALL_DUR + ON_CALL_SILENT_DUR + ON_PARK_DUR -- + ON_VOICEMAIL_DUR - ON_PREVIEW_DUR ADDED ON 12/1/15
,TOTAL_ACW				= ACW_DUR + NRD_ACW_DUR + NRD_TASK_COMP_DUR + NRD_SYSTEM_OBC_DUR + NRD_MANDATORY_REPORTING_DUR + NRD_MANUAL_OBC_DUR -- + NRD_ACW_AGENT_DUR
WHERE BILLABLE_SKILL_Y_N = 'Y'

UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
 AUTHORIZED			= READY_DUR + TOTAL_TALK + TOTAL_ACW -- + NOT_READY_BILLABLE
,BILLABLE_CLIENT	= READY_DUR + TOTAL_TALK + TOTAL_ACW
WHERE BILLABLE_SKILL_Y_N = 'Y'

--========================================================================
--SET DATE_TIME KEY
--========================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM            WSOL_TB_IMPORTS_APFM_INVOICING_4      I
INNER JOIN      DATE_TIME                             DT   ON DT.CAL_DATE = I.DATETIME

-- SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_4 ORDER BY SEQNO

--========================================================================
--SET NON-BILLABLE SKILLS TOTAL
--========================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
 NON_BILLABLE_SKILL_DUR = CASE WHEN (BILLABLE_SKILL_Y_N = 'N' AND FF_STATE <> 'Login') THEN 
								CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2))
							   ELSE 0.00 END

--========================================================================
--SET NON-BILLABLE STATE/REASON TOTAL
--========================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
 NON_BILLABLE_STATE_REASON_DUR = 
 CASE WHEN ISNULL(FF_STATE,'') NOT IN
 (
  'Ready'
 ,'Ringing'
 ,'On Call'
 ,'On Call (Silent)'	-- Added as Billable Agent and Billable Client effective 3/1/15
 ,'After Call Work'
 ,'On Park'
 ,'On Hold'
-- ,'On Voicemail'		-- Removed from Billable Agent effective 3/1/15
 ,'Not Ready'			-- Not Ready States will be based on Reason Code
 ,'Login'			
 ,'On Preview'			-- Added as Billable Agent effective 12/1/15
 ) 
	  THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2))
	  WHEN ISNULL(FF_STATE,'') = 'Not Ready'
	   AND ISNULL(FF_REASON_CODE,'') NOT IN
	   (
		'After Call Work'
		-- ,'Training',				-- Removed from Billable Client effective 3/1/15
		-- ,'Meeting',				-- Removed from Billable Client effective 3/1/15
		,'Task Completion'
		,'System_OBC'
		,'Mandatory Reporting'		-- Added as Billable Agent and Billable Client effective 3/1/15
		,'Manual_OBC'				-- Added as Billable Agent and Billable Client effective 3/1/15
		,'After Call Work - Agent'	-- Temporary Billable Agent
		,'Offline_Vendor Unpaid'	-- Added as Billable Agent Effective 7/16/15
	   )
	  THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2))
	  ELSE 0.00 END

--=============================================================================
--SET SQL AGENT MAPPING FIELDS
--=============================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
  EMAIL              = ISNULL(IAM.EMAIL,'')
 ,SCHEDULER_ACL_NAME = ISNULL(IAM.FF_OFFICIAL_ACL_NAME,'')
 ,RESOURCE_NAME		 = ISNULL(IAM.RESOURCE_NAME,'')
 FROM		WSOL_TB_IMPORTS_APFM_INVOICING_4        I
 LEFT JOIN	YZ_TB_IMPORTS_APFM_AIA_AGENT_MAPPING  IAM  ON IAM.INVOICE_MAP_KEY = I.FF_AGENT_NAME
 --WHERE		I.BILLABLE_SKILL_Y_N = 'Y'	 

-- SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_4 WHERE BILLABLE_SKILL_Y_N = 'N' ORDER BY SEQNO

--==================================================================================
--ONLY RESOURCE AGENTS CAN BILL FOR OFFLINE VENDOR UNPAID
--==================================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
 NOT_READY_BILLABLE = NOT_READY_BILLABLE + NRD_OFFLINE_VENDOR_UNPAID_DUR
,TOTAL_ACW			= TOTAL_ACW + NRD_OFFLINE_VENDOR_UNPAID_DUR
,AUTHORIZED			= AUTHORIZED + NRD_OFFLINE_VENDOR_UNPAID_DUR
,BILLABLE_CLIENT	= BILLABLE_CLIENT + NRD_OFFLINE_VENDOR_UNPAID_DUR
WHERE SCHEDULER_ACL_NAME = 'APFM Resource Agents'
  AND BILLABLE_SKILL_Y_N = 'Y'

--==================================================================================
--CONTINUE INVOICE FIELD UPDATES
--==================================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
	ID_EXT = CASE WHEN (I.SCHEDULER_ACL_NAME = 'APFM Standard Agents' AND BILLABLE_SKILL_Y_N = 'Y')  THEN 
					CASE WHEN I.FF_SKILL_AVAILABILITY IN ('CS AOR'
														 ,'CS AOR, CS AOR SN referral'
														 ,'CS AOR SN referral'
														 ,'CS AOR Exit'
														 ,'CS AOR 2'
														 ,'CS LS Level 3, CS AOR SN referral') THEN 'AP6'	--APFM AOR
						 ELSE 'AP2' END		--APFM Standard Agents
				  WHEN (I.SCHEDULER_ACL_NAME = 'APFM Standard Agents R2' AND BILLABLE_SKILL_Y_N = 'Y') THEN
					CASE WHEN I.FF_SKILL_AVAILABILITY IN ('CS AOR'
														 ,'CS AOR, CS AOR SN referral'
														 ,'CS AOR SN referral'
														 ,'CS AOR Exit'
														 ,'CS AOR 2'
														 ,'CS LS Level 3, CS AOR SN referral') THEN 'AP6'	--APFM AOR
						ELSE 'AP4' END		--APRM Standard Agents
				  WHEN (I.SCHEDULER_ACL_NAME = 'APFM Resource Agents' AND BILLABLE_SKILL_Y_N = 'Y')  THEN 'AP5'	--APFM Resource Agents
				  ELSE '' END
 FROM            WSOL_TB_IMPORTS_APFM_INVOICING_4	I
 INNER JOIN      DATE_TIME							DT   ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY

--==================================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET --SELECT
  AIR_DAY_TYPE = CASE WHEN IG.HAS_HOLIDAYS = 'Y' AND
						 (    ISNULL(IH.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) OR
						   ( ISNULL(IHA.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) AND ISNULL(IHA.ID_EXT,'') <> '' )
						 )
					  THEN 'H' ELSE 'S' END  --AS AIR_DAY_TYPE  --H=Holiday  --S=Standard
 FROM            WSOL_TB_IMPORTS_APFM_INVOICING_4				I
 INNER JOIN      DATE_TIME										DT   ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY
 LEFT JOIN       YZ_TB_IMPORTS_APFM_SD_INVOICE_GROUPS			IG   ON IG.ID_EXT              = I.ID_EXT
 LEFT JOIN       YZ_TB_IMPORTS_APFM_SD_INVOICE_HOLIDAYS			IH   ON IH.HOLIDAY_DATE        = CAST(DT.CAL_DATE_STRING AS DATETIME)
 LEFT JOIN       YZ_TB_IMPORTS_APFM_SD_INVOICE_HOLIDAYS_ADDL	IHA  ON IHA.HOLIDAY_DATE       = CAST(DT.CAL_DATE_STRING AS DATETIME)
																	AND IHA.ID_EXT             = I.ID_EXT

--==================================================================================
UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
  AIR_ACW_FONT_COLOR             = 'Black'
 ,MIN_GUARANTEE_RATE             = ISNULL(IG.MIN_GUARANTEE_RATE,0)           --varies between scheduler acl names.
 ,MIN_GUARANTEE_TYPE             = ISNULL(IG.MIN_GUARANTEE_TYPE,'')          --varies between scheduler acl names.
 ,AUTHORIZED_TO_INVOICE_TYPE     = ISNULL(IG.AUTHORIZED_TO_INVOICE_TYPE,'')  --varies between scheduler acl names.

 ,HAS_HOLIDAYS    = IG.HAS_HOLIDAYS
 ,INCLUDE_IN_CAS  = IG.INCLUDE_IN_CAS
 ,READY_FOR_XML   = IG.READY_FOR_XML
 ,SHOW_ID_EXTS    = IG.SHOW_ID_EXTS
 FROM            WSOL_TB_IMPORTS_APFM_INVOICING_4        I
 LEFT JOIN       YZ_TB_IMPORTS_APFM_SD_INVOICE_GROUPS	 IG  ON IG.ID_EXT    = I.ID_EXT

--==================================================================================
 UPDATE WSOL_TB_IMPORTS_APFM_INVOICING_4 SET
   INVOICE_ID         = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
--  ,SCHEDULER_ACL_NAME = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
 FROM            WSOL_TB_IMPORTS_APFM_INVOICING_4	            AIA 
 LEFT JOIN       YZ_TB_IMPORTS_APFM_SD_AIA_STATIC_DEFAULTS		AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT

--================================
--DATA INTEGRITY CHECK(S):
--================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''

--Check #1:  ============================================================================================================================================================
	SET @RCD_CNT = ( SELECT COUNT(*) FROM WSOL_TB_IMPORTS_APFM_INVOICING_4 )
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #1 FAILED! - File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #2:  ============================================================================================================================================================
	SET @RCD_CNT = ( SELECT COUNT(*) FROM WSOL_TB_IMPORTS_APFM_INVOICING_4 WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0 )  
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #2 FAILED! - Invalid DATETIME intervals in APFM INVOICING IMPORT File.  Import was Cancelled.  Nothing was Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #3:  ============================================================================================================================================================
	SET @RCD_CNT = ( SELECT COUNT(*) FROM WSOL_TB_IMPORTS_APFM_INVOICING_4 WHERE ISNULL(FF_AGENT_NAME,'') = '' )  
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #3 FAILED! - Blank AGENT NAME(s) in APFM INVOICING IMPORT File exist(s).  Import was Cancelled.  Nothing was Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #4:  ============================================================================================================================================================
	SET @RCD_CNT = ( SELECT COUNT(*) FROM WSOL_TB_IMPORTS_APFM_INVOICING_4 WHERE ISNULL(FF_SKILL_AVAILABILITY,'') = '' 
																		      OR ISNULL(FF_SKILL_AVAILABILITY,'') = 'Y83JJ99390n-+' )
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #4 FAILED! - Invalid or Missing Skill in APFM INVOICING IMPORT File exist(s).  Import was Cancelled.  Nothing was Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END

--======================= ********** INSERT INTO PERMANENT TABLE (IF NO ERRORS FOUND), OR SKIP AND GO TO END (ERRORS FOUND) ********** ==================================
--SET @ERR_CNT = 0
--SET @MSG1 = ''
IF @ERR_CNT > 0 BEGIN
	INSERT INTO YZ_TB_ERRORS_FOUND(
	TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'APFM_INVOICING'	--SUB_GROUP_NAME
	,@MSG1				--ERROR_MSG
	--======================================
	GOTO EARLY_EXIT
	--======================================
END
ELSE BEGIN
	INSERT INTO YZ_TB_ERRORS_FOUND
	(
	TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'APFM_INVOICING'	--SUB_GROUP_NAME
	,''					--ERROR_MSG       --NEVER SET THIS TO @MSG1 !!!  MUST BE SET TO ''.
END
--=======================================================================================================================================================================

--SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_4 ORDER BY SEQNO
--=============================================================================
-- GROUP DATA BY AGENT & SKILL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_APFM_INVOICING_5

INSERT INTO WSOL_TB_IMPORTS_APFM_INVOICING_5
(
FF_DATE
,FF_HOUR
,FF_SKILL_AVAILABILITY
,FF_AGENT_NAME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_TIME
,BILLABLE_SKILL_Y_N
,LOGGED_IN_DUR
,READY_DUR
,RING_DUR
,ON_CALL_DUR
,ON_CALL_SILENT_DUR
,ACW_DUR
,ON_PARK_DUR
,ON_VOICEMAIL_DUR
,ON_PREVIEW_DUR
,NRD_ACW_DUR
,NRD_TASK_COMP_DUR
,NRD_SYSTEM_OBC_DUR
,ON_HOLD_DUR
,NRD_TRAINING_DUR
,NRD_MEETING_DUR
,NRD_MANDATORY_REPORTING_DUR
,NRD_MANUAL_OBC_DUR
,NRD_ACW_AGENT_DUR
,NRD_OFFLINE_VENDOR_UNPAID_DUR
,NRD_REASON_4_DUR
,NOT_READY_BILLABLE
,NOT_READY_NON_BILLABLE
,NON_BILLABLE_SKILL_DUR
,NON_BILLABLE_STATE_REASON_DUR
,BILLABLE_CLIENT
,TOTAL_TALK
,TOTAL_ACW
,AUTHORIZED
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 MAX(W4.FF_DATE)					AS FF_DATE
,MAX(W4.FF_HOUR)					AS FF_HOUR
,W4.FF_SKILL_AVAILABILITY			AS FF_SKILL_AVAILABILITY
,W4.FF_AGENT_NAME					AS FF_AGENT_NAME

,MAX(W4.SEQNO_ADDED_TIME)			AS SEQNO_ADDED_TIME
,MIN(W4.SEQNO)						AS SEQNO
,MAX(W4.FTP_FILE_NAME)				AS FTP_FILE_NAME

,MAX(ISNULL(W4.RESOURCE_NAME,''))	AS RESOURCE_NAME
,MAX(W4.DATETIME)					AS [DATETIME]
,MAX(W4.HOUR_INTERVAL)				AS HOUR_INTERVAL
,MAX(W4.FF_AGENT_NAME)				AS EMPLOYEE_ID
,MAX(W4.DATETIME)					AS STD_TENANT_START_TIME
,MAX(W4.BILLABLE_SKILL_Y_N)			AS BILLABLE_SKILL_Y_N

,SUM(ISNULL(W4.LOGGED_IN_DUR					,0.00))	AS LOGGED_IN_DUR
,SUM(ISNULL(W4.READY_DUR						,0.00))	AS READY_DUR
,SUM(ISNULL(W4.RING_DUR							,0.00))	AS RING_DUR
,SUM(ISNULL(W4.ON_CALL_DUR						,0.00))	AS ON_CALL_DUR
,SUM(ISNULL(W4.ON_CALL_SILENT_DUR				,0.00))	AS ON_CALL_SILENT_DUR
,SUM(ISNULL(W4.ACW_DUR							,0.00))	AS ACW_DUR
,SUM(ISNULL(W4.ON_PARK_DUR						,0.00))	AS ON_PARK_DUR
,SUM(ISNULL(W4.ON_VOICEMAIL_DUR					,0.00))	AS ON_VOICEMAIL_DUR
,SUM(ISNULL(W4.ON_PREVIEW_DUR					,0.00))	AS ON_PREVIEW_DUR
,SUM(ISNULL(W4.NRD_ACW_DUR						,0.00))	AS NRD_ACW_DUR
,SUM(ISNULL(W4.NRD_TASK_COMP_DUR				,0.00))	AS NRD_TASK_COMP_DUR
,SUM(ISNULL(W4.NRD_SYSTEM_OBC_DUR				,0.00))	AS NRD_SYSTEM_OBC_DUR
,SUM(ISNULL(W4.ON_HOLD_DUR						,0.00))	AS ON_HOLD_DUR
,SUM(ISNULL(W4.NRD_TRAINING_DUR					,0.00))	AS NRD_TRAINING_DUR
,SUM(ISNULL(W4.NRD_MEETING_DUR					,0.00))	AS NRD_MEETING_DUR
,SUM(ISNULL(W4.NRD_MANDATORY_REPORTING_DUR		,0.00))	AS NRD_MANDATORY_REPORTING_DUR
,SUM(ISNULL(W4.NRD_MANUAL_OBC_DUR				,0.00))	AS NRD_MANUAL_OBC_DUR
,SUM(ISNULL(W4.NRD_ACW_AGENT_DUR				,0.00))	AS NRD_ACW_AGENT_DUR
,SUM(ISNULL(W4.NRD_OFFLINE_VENDOR_UNPAID_DUR	,0.00))	AS NRD_OFFLINE_VENDOR_UNPAID_DUR
,SUM(ISNULL(W4.NRD_REASON_4_DUR					,0.00))	AS NRD_REASON_4_DUR
,SUM(ISNULL(W4.NOT_READY_BILLABLE				,0.00))	AS NOT_READY_BILLABLE
,SUM(ISNULL(W4.NOT_READY_NON_BILLABLE			,0.00))	AS NOT_READY_NON_BILLABLE
,SUM(ISNULL(W4.NON_BILLABLE_SKILL_DUR			,0.00))	AS NON_BILLABLE_SKILL_DUR
,SUM(ISNULL(W4.NON_BILLABLE_STATE_REASON_DUR	,0.00))	AS NON_BILLABLE_STATE_REASON_DUR
,SUM(ISNULL(W4.BILLABLE_CLIENT					,0.00))	AS BILLABLE_CLIENT
,SUM(ISNULL(W4.TOTAL_TALK						,0.00))	AS TOTAL_TALK
,SUM(ISNULL(W4.TOTAL_ACW						,0.00))	AS TOTAL_ACW
,SUM(ISNULL(W4.AUTHORIZED						,0.00))	AS AUTHORIZED

,MAX(ISNULL(W4.EMAIL							,''  ))	AS EMAIL
,MAX(ISNULL(W4.ID_EXT							,''	 ))	AS ID_EXT
,MAX(ISNULL(W4.SCHEDULER_ACL_NAME				,''	 ))	AS SCHEDULER_ACL_NAME
,W4.STD_TENANT_START_DATE_TIME_KEY						AS STD_TENANT_START_DATE_TIME_KEY
,MAX(W4.CAL_DATE									 )	AS CAL_DATE
,MAX(ISNULL(W4.TENANT_KEY						,''	 ))	AS TENANT_KEY
,MAX(ISNULL(W4.AIR_DAY_TYPE						,''	 ))	AS AIR_DAY_TYPE
,MAX(ISNULL(W4.AIR_ACW_FONT_COLOR				,''  ))	AS AIR_ACW_FONT_COLOR
,MAX(ISNULL(W4.MIN_GUARANTEE_RATE				,0.00))	AS MIN_GUARANTEE_RATE
,MAX(ISNULL(W4.MIN_GUARANTEE_TYPE				,''	 ))	AS MIN_GUARANTEE_TYPE
,MAX(ISNULL(W4.AUTHORIZED_TO_INVOICE_TYPE		,''	 ))	AS AUTHORIZED_TO_INVOICE_TYPE
,MAX(ISNULL(W4.HAS_HOLIDAYS						,''	 )) AS HAS_HOLIDAYS
,MAX(ISNULL(W4.INCLUDE_IN_CAS					,''	 )) AS INCLUDE_IN_CAS
,MAX(ISNULL(W4.READY_FOR_XML					,''	 )) AS READY_FOR_XML
,MAX(ISNULL(W4.SHOW_ID_EXTS						,''	 ))	AS SHOW_ID_EXTS
,MAX(ISNULL(W4.INVOICE_ID						,''	 )) AS INVOICE_ID

,@WS_ROW_CREATED_TIME									AS WS_ROW_CREATED_TIME
,NULL													AS WS_ROW_UPDATED_TIME

FROM            WSOL_TB_IMPORTS_APFM_INVOICING_4  W4

GROUP BY
 W4.FF_SKILL_AVAILABILITY
,W4.FF_AGENT_NAME
,W4.STD_TENANT_START_DATE_TIME_KEY

ORDER BY
 MIN(W4.SEQNO)


--=====================================================================================================================
--Helps with LEFT OUTER JOIN when breaking up ftp file records into 15 minute intervals:
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME
SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN(STD_TENANT_START_TIME) FROM WSOL_TB_IMPORTS_APFM_INVOICING_5))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX(STD_TENANT_START_TIME) FROM WSOL_TB_IMPORTS_APFM_INVOICING_5))  
--=====================================================================================================================

--SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_5 ORDER BY SEQNO
--SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_5 WHERE BILLABLE_SKILL_Y_N = 'N' ORDER BY SEQNO

--==========================================
-- UPDATE PERMANENT TABLE
--==========================================

UPDATE WSOL_TB_IMPORTS_APFM_INVOICING SET
 FF_DATE						= W5.FF_DATE
,FF_HOUR						= W5.FF_HOUR
--,FF_SKILL_AVAILABILITY			= W5.FF_SKILL_AVAILABILITY
--,FF_AGENT_NAME					= W5.FF_AGENT_NAME

,SEQNO_ADDED_TIME				= W5.SEQNO_ADDED_TIME
,SEQNO							= W5.SEQNO
,FTP_FILE_NAME					= W5.FTP_FILE_NAME

,RESOURCE_NAME					= W5.RESOURCE_NAME					
,[DATETIME]						= W5.[DATETIME]
,HOUR_INTERVAL					= W5.HOUR_INTERVAL
,EMPLOYEE_ID					= W5.EMPLOYEE_ID
,STD_TENANT_START_TIME			= W5.STD_TENANT_START_TIME
,BILLABLE_SKILL_Y_N				= W5.BILLABLE_SKILL_Y_N
,LOGGED_IN_DUR					= W5.LOGGED_IN_DUR
,READY_DUR						= W5.READY_DUR
,RING_DUR						= W5.RING_DUR
,ON_CALL_DUR					= W5.ON_CALL_DUR
,ON_CALL_SILENT_DUR				= W5.ON_CALL_SILENT_DUR
,ACW_DUR						= W5.ACW_DUR
,ON_PARK_DUR					= W5.ON_PARK_DUR
,ON_VOICEMAIL_DUR				= W5.ON_VOICEMAIL_DUR
,ON_PREVIEW_DUR					= W5.ON_PREVIEW_DUR
,NRD_ACW_DUR					= W5.NRD_ACW_DUR
,NRD_TASK_COMP_DUR				= W5.NRD_TASK_COMP_DUR
,NRD_SYSTEM_OBC_DUR				= W5.NRD_SYSTEM_OBC_DUR
,ON_HOLD_DUR					= W5.ON_HOLD_DUR
,NRD_TRAINING_DUR				= W5.NRD_TRAINING_DUR
,NRD_MEETING_DUR				= W5.NRD_MEETING_DUR
,NRD_MANDATORY_REPORTING_DUR	= W5.NRD_MANDATORY_REPORTING_DUR
,NRD_MANUAL_OBC_DUR			    = W5.NRD_MANUAL_OBC_DUR
,NRD_ACW_AGENT_DUR			    = W5.NRD_ACW_AGENT_DUR
,NRD_OFFLINE_VENDOR_UNPAID_DUR  = W5.NRD_OFFLINE_VENDOR_UNPAID_DUR
,NRD_REASON_4_DUR				= W5.NRD_REASON_4_DUR
,NOT_READY_BILLABLE				= W5.NOT_READY_BILLABLE
,NOT_READY_NON_BILLABLE			= W5.NOT_READY_NON_BILLABLE
,NON_BILLABLE_SKILL_DUR			= W5.NON_BILLABLE_SKILL_DUR
,NON_BILLABLE_STATE_REASON_DUR	= W5.NON_BILLABLE_STATE_REASON_DUR
,BILLABLE_CLIENT				= W5.BILLABLE_CLIENT
,TOTAL_TALK						= W5.TOTAL_TALK
,TOTAL_ACW						= W5.TOTAL_ACW
,AUTHORIZED						= W5.AUTHORIZED
,EMAIL							= W5.EMAIL
,ID_EXT							= W5.ID_EXT
,SCHEDULER_ACL_NAME				= W5.SCHEDULER_ACL_NAME
--,STD_TENANT_START_DATE_TIME_KEY = W5.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE						= W5.CAL_DATE
,TENANT_KEY						= W5.TENANT_KEY
,AIR_DAY_TYPE					= W5.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR				= W5.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE				= W5.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE				= W5.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE		= W5.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS					= W5.HAS_HOLIDAYS
,INCLUDE_IN_CAS					= W5.INCLUDE_IN_CAS
,READY_FOR_XML					= W5.READY_FOR_XML
,SHOW_ID_EXTS					= W5.SHOW_ID_EXTS
,INVOICE_ID						= W5.INVOICE_ID

,WS_ROW_CREATED_TIME			= NULL
,WS_ROW_UPDATED_TIME			= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_APFM_INVOICING_5  W5
INNER JOIN      WSOL_TB_IMPORTS_APFM_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W5.STD_TENANT_START_DATE_TIME_KEY
													 AND G.FF_AGENT_NAME					= W5.FF_AGENT_NAME
													 AND G.FF_SKILL_AVAILABILITY			= W5.FF_SKILL_AVAILABILITY

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY	= W5.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_AGENT_NAME					= W5.FF_AGENT_NAME
  AND G.FF_SKILL_AVAILABILITY			= W5.FF_SKILL_AVAILABILITY


--==========================================
--INSERT INTO PERMANENT IMPORT TABLE: 
--==========================================
INSERT INTO WSOL_TB_IMPORTS_APFM_INVOICING
(FF_DATE
,FF_HOUR
,FF_SKILL_AVAILABILITY
,FF_AGENT_NAME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_TIME
,BILLABLE_SKILL_Y_N
,LOGGED_IN_DUR
,READY_DUR
,RING_DUR
,ON_CALL_DUR
,ON_CALL_SILENT_DUR
,ACW_DUR
,ON_PARK_DUR
,ON_VOICEMAIL_DUR
,ON_PREVIEW_DUR
,NRD_ACW_DUR
,NRD_TASK_COMP_DUR
,NRD_SYSTEM_OBC_DUR
,ON_HOLD_DUR
,NRD_TRAINING_DUR
,NRD_MEETING_DUR
,NRD_MANDATORY_REPORTING_DUR
,NRD_MANUAL_OBC_DUR
,NRD_ACW_AGENT_DUR
,NRD_OFFLINE_VENDOR_UNPAID_DUR
,NRD_REASON_4_DUR
,NOT_READY_BILLABLE
,NOT_READY_NON_BILLABLE
,NON_BILLABLE_SKILL_DUR
,NON_BILLABLE_STATE_REASON_DUR
,BILLABLE_CLIENT
,TOTAL_TALK
,TOTAL_ACW
,AUTHORIZED
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W5.FF_DATE
,W5.FF_HOUR
,W5.FF_SKILL_AVAILABILITY
,W5.FF_AGENT_NAME

,W5.SEQNO_ADDED_TIME
,W5.SEQNO
,W5.FTP_FILE_NAME

,W5.RESOURCE_NAME
,W5.[DATETIME]
,W5.HOUR_INTERVAL
,W5.EMPLOYEE_ID
,W5.STD_TENANT_START_TIME
,W5.BILLABLE_SKILL_Y_N
,W5.LOGGED_IN_DUR
,W5.READY_DUR
,W5.RING_DUR
,W5.ON_CALL_DUR
,W5.ON_CALL_SILENT_DUR
,W5.ACW_DUR
,W5.ON_PARK_DUR
,W5.ON_VOICEMAIL_DUR
,W5.ON_PREVIEW_DUR
,W5.NRD_ACW_DUR
,W5.NRD_TASK_COMP_DUR
,W5.NRD_SYSTEM_OBC_DUR
,W5.ON_HOLD_DUR
,W5.NRD_TRAINING_DUR
,W5.NRD_MEETING_DUR
,W5.NRD_MANDATORY_REPORTING_DUR
,W5.NRD_MANUAL_OBC_DUR
,W5.NRD_ACW_AGENT_DUR
,W5.NRD_OFFLINE_VENDOR_UNPAID_DUR
,W5.NRD_REASON_4_DUR
,W5.NOT_READY_BILLABLE
,W5.NOT_READY_NON_BILLABLE
,W5.NON_BILLABLE_SKILL_DUR
,W5.NON_BILLABLE_STATE_REASON_DUR
,W5.BILLABLE_CLIENT
,W5.TOTAL_TALK
,W5.TOTAL_ACW
,W5.AUTHORIZED
,W5.EMAIL
,W5.ID_EXT
,W5.SCHEDULER_ACL_NAME
,W5.STD_TENANT_START_DATE_TIME_KEY
,W5.CAL_DATE
,W5.TENANT_KEY
,W5.AIR_DAY_TYPE
,W5.AIR_ACW_FONT_COLOR
,W5.MIN_GUARANTEE_RATE
,W5.MIN_GUARANTEE_TYPE
,W5.AUTHORIZED_TO_INVOICE_TYPE
,W5.HAS_HOLIDAYS
,W5.INCLUDE_IN_CAS
,W5.READY_FOR_XML
,W5.SHOW_ID_EXTS
,W5.INVOICE_ID

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_APFM_INVOICING_5  W5

LEFT JOIN       WSOL_TB_IMPORTS_APFM_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W5.STD_TENANT_START_DATE_TIME_KEY
													 AND G.FF_AGENT_NAME					= W5.FF_AGENT_NAME
													 AND G.FF_SKILL_AVAILABILITY			= W5.FF_SKILL_AVAILABILITY	
														 
WHERE ( G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W5.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( G.FF_AGENT_NAME						IS NULL AND ISNULL(W5.FF_AGENT_NAME,'') <> '' )
  AND ( G.FF_SKILL_AVAILABILITY				IS NULL AND ISNULL(W5.FF_SKILL_AVAILABILITY,'') <> '' )


--==========================================
SET DATEFIRST 1  -- = Monday  
--==========================================

--===============================================================================================================================
IF OBJECT_ID('TEMPDB..#DT_EASY_WEEKS') IS NOT NULL BEGIN
   DROP TABLE #DT_EASY_WEEKS
END
CREATE TABLE #DT_EASY_WEEKS
(CAL_DATE_STRING      VARCHAR(10)
,CAL_WEEK_START_DATE  DATETIME
,CAL_WEEK_END_DATE    DATETIME
,PAY_CYCLE_CLOSURE_DATE DATETIME
)
INSERT INTO #DT_EASY_WEEKS
SELECT
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
FROM DATE_TIME DT
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
GROUP BY 
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE 
--===========================
UPDATE #DT_EASY_WEEKS SET CAL_WEEK_END_DATE = DATEADD(DD,6,CAL_WEEK_START_DATE)
UPDATE #DT_EASY_WEEKS SET
 PAY_CYCLE_CLOSURE_DATE = (CASE WHEN (DATEDIFF(DD,CAST('04/27/2014' AS DATETIME),CAL_WEEK_END_DATE) % 14) = 0 THEN
									CAL_WEEK_END_DATE
								ELSE
									DATEADD(DD,7,CAL_WEEK_END_DATE)
								END)

-- SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING ORDER BY SEQNO
-- SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING WHERE BILLABLE_SKILL_Y_N = 'N' ORDER BY SEQNO

--SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_5 ORDER BY SEQNO
--=============================================================================
-- GROUP DATA BY AGENT & INTERVAL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_APFM_INVOICING_6

INSERT INTO WSOL_TB_IMPORTS_APFM_INVOICING_6
(
FF_DATE
,FF_HOUR
,FF_AGENT_NAME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_TIME
,LOGGED_IN_DUR
,READY_DUR
,RING_DUR
,ON_CALL_DUR
,ON_CALL_SILENT_DUR
,ACW_DUR
,ON_PARK_DUR
,ON_VOICEMAIL_DUR
,ON_PREVIEW_DUR
,NRD_ACW_DUR
,NRD_TASK_COMP_DUR
,NRD_SYSTEM_OBC_DUR
,ON_HOLD_DUR
,NRD_TRAINING_DUR
,NRD_MEETING_DUR
,NRD_MANDATORY_REPORTING_DUR
,NRD_MANUAL_OBC_DUR
,NRD_ACW_AGENT_DUR
,NRD_OFFLINE_VENDOR_UNPAID_DUR
,NRD_REASON_4_DUR
,NOT_READY_BILLABLE
,NOT_READY_NON_BILLABLE
,NON_BILLABLE_SKILL_DUR
,NON_BILLABLE_STATE_REASON_DUR
,BILLABLE_CLIENT
,TOTAL_TALK
,TOTAL_ACW
,AUTHORIZED
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 MAX(W4.FF_DATE)					AS FF_DATE
,MAX(W4.FF_HOUR)					AS FF_HOUR
,W4.FF_AGENT_NAME					AS FF_AGENT_NAME

,MAX(W4.SEQNO_ADDED_TIME)			AS SEQNO_ADDED_TIME
,MIN(W4.SEQNO)						AS SEQNO
,MAX(W4.FTP_FILE_NAME)				AS FTP_FILE_NAME

,MAX(ISNULL(W4.RESOURCE_NAME,''))	AS RESOURCE_NAME
,MAX(W4.DATETIME)					AS [DATETIME]
,MAX(W4.HOUR_INTERVAL)				AS HOUR_INTERVAL
,MAX(W4.FF_AGENT_NAME)				AS EMPLOYEE_ID
,MAX(W4.DATETIME)					AS STD_TENANT_START_TIME

,SUM(ISNULL(W4.LOGGED_IN_DUR					,0.00))	AS LOGGED_IN_DUR
,SUM(ISNULL(W4.READY_DUR						,0.00))	AS READY_DUR
,SUM(ISNULL(W4.RING_DUR							,0.00))	AS RING_DUR
,SUM(ISNULL(W4.ON_CALL_DUR						,0.00))	AS ON_CALL_DUR
,SUM(ISNULL(W4.ON_CALL_SILENT_DUR				,0.00))	AS ON_CALL_SILENT_DUR
,SUM(ISNULL(W4.ACW_DUR							,0.00))	AS ACW_DUR
,SUM(ISNULL(W4.ON_PARK_DUR						,0.00))	AS ON_PARK_DUR
,SUM(ISNULL(W4.ON_VOICEMAIL_DUR					,0.00))	AS ON_VOICEMAIL_DUR
,SUM(ISNULL(W4.ON_PREVIEW_DUR					,0.00))	AS ON_PREVIEW_DUR
,SUM(ISNULL(W4.NRD_ACW_DUR						,0.00))	AS NRD_ACW_DUR
,SUM(ISNULL(W4.NRD_TASK_COMP_DUR				,0.00))	AS NRD_TASK_COMP_DUR
,SUM(ISNULL(W4.NRD_SYSTEM_OBC_DUR				,0.00))	AS NRD_SYSTEM_OBC_DUR
,SUM(ISNULL(W4.ON_HOLD_DUR						,0.00))	AS ON_HOLD_DUR
,SUM(ISNULL(W4.NRD_TRAINING_DUR					,0.00))	AS NRD_TRAINING_DUR
,SUM(ISNULL(W4.NRD_MEETING_DUR					,0.00))	AS NRD_MEETING_DUR
,SUM(ISNULL(W4.NRD_MANDATORY_REPORTING_DUR		,0.00))	AS NRD_MANDATORY_REPORTING_DUR
,SUM(ISNULL(W4.NRD_MANUAL_OBC_DUR				,0.00))	AS NRD_MANUAL_OBC_DUR
,SUM(ISNULL(W4.NRD_ACW_AGENT_DUR				,0.00))	AS NRD_ACW_AGENT_DUR
,SUM(ISNULL(W4.NRD_OFFLINE_VENDOR_UNPAID_DUR	,0.00))	AS NRD_OFFLINE_VENDOR_UNPAID_DUR
,SUM(ISNULL(W4.NRD_REASON_4_DUR					,0.00))	AS NRD_REASON_4_DUR
,SUM(ISNULL(W4.NOT_READY_BILLABLE				,0.00))	AS NOT_READY_BILLABLE
,SUM(ISNULL(W4.NOT_READY_NON_BILLABLE			,0.00))	AS NOT_READY_NON_BILLABLE
,SUM(ISNULL(W4.NON_BILLABLE_SKILL_DUR			,0.00))	AS NON_BILLABLE_SKILL_DUR
,SUM(ISNULL(W4.NON_BILLABLE_STATE_REASON_DUR	,0.00))	AS NON_BILLABLE_STATE_REASON_DUR
,SUM(ISNULL(W4.BILLABLE_CLIENT					,0.00))	AS BILLABLE_CLIENT
,SUM(ISNULL(W4.TOTAL_TALK						,0.00))	AS TOTAL_TALK
,SUM(ISNULL(W4.TOTAL_ACW						,0.00))	AS TOTAL_ACW
,SUM(ISNULL(W4.AUTHORIZED						,0.00))	AS AUTHORIZED

,MAX(ISNULL(W4.EMAIL							,''  ))	AS EMAIL
,ISNULL(W4.ID_EXT								,''	 )	AS ID_EXT
,MAX(ISNULL(W4.SCHEDULER_ACL_NAME				,''	 ))	AS SCHEDULER_ACL_NAME
,W4.STD_TENANT_START_DATE_TIME_KEY						AS STD_TENANT_START_DATE_TIME_KEY
,MAX(W4.CAL_DATE									 )	AS CAL_DATE
,MAX(ISNULL(W4.TENANT_KEY						,''	 ))	AS TENANT_KEY
,MAX(ISNULL(W4.AIR_DAY_TYPE						,''	 ))	AS AIR_DAY_TYPE
,MAX(ISNULL(W4.AIR_ACW_FONT_COLOR				,''  ))	AS AIR_ACW_FONT_COLOR
,MAX(ISNULL(W4.MIN_GUARANTEE_RATE				,0.00))	AS MIN_GUARANTEE_RATE
,MAX(ISNULL(W4.MIN_GUARANTEE_TYPE				,''	 ))	AS MIN_GUARANTEE_TYPE
,MAX(ISNULL(W4.AUTHORIZED_TO_INVOICE_TYPE		,''	 ))	AS AUTHORIZED_TO_INVOICE_TYPE
,MAX(ISNULL(W4.HAS_HOLIDAYS						,''	 )) AS HAS_HOLIDAYS
,MAX(ISNULL(W4.INCLUDE_IN_CAS					,''	 )) AS INCLUDE_IN_CAS
,MAX(ISNULL(W4.READY_FOR_XML					,''	 )) AS READY_FOR_XML
,MAX(ISNULL(W4.SHOW_ID_EXTS						,''	 ))	AS SHOW_ID_EXTS
,MAX(ISNULL(W4.INVOICE_ID						,''	 )) AS INVOICE_ID

,@WS_ROW_CREATED_TIME									AS WS_ROW_CREATED_TIME
,NULL													AS WS_ROW_UPDATED_TIME

FROM            WSOL_TB_IMPORTS_APFM_INVOICING_4  W4

GROUP BY
 W4.FF_AGENT_NAME
,W4.ID_EXT
,W4.STD_TENANT_START_DATE_TIME_KEY

ORDER BY
 MIN(W4.SEQNO)

-- SELECT * FROM WSOL_TB_IMPORTS_APFM_INVOICING_6 ORDER BY SEQNO
--====================================================================================================================================
--CREATE TEMP TABLE TO HOLD NORMALIZED DATA STRUCTURE
--====================================================================================================================================
IF OBJECT_ID('TEMPDB..#WSOL_IMPORTS_APFM_UV_ANT_AIA') IS NOT NULL BEGIN
   DROP TABLE #WSOL_IMPORTS_APFM_UV_ANT_AIA
END
CREATE TABLE #WSOL_IMPORTS_APFM_UV_ANT_AIA
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](150) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](10) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[AU_DK_LOGGED_IN_DURATION] [int] NULL,
	[AU_DK_AVAILABLE_DURATION] [int] NULL,
	[AU_DK_TALK_DURATION] [int] NULL,
	[AU_DK_IB_TALK_DURATION] [int] NULL,
	[AU_DK_OB_TALK_DURATION] [int] NULL,
	[AU_DK_CONVENTIONAL_ACW] [int] NULL,
	[AU_DK_NR_DURATION] [int] NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [int] NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [int] NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [int] NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [int] NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,      --Needs to be dec() because of "* rate".  All other durs should be int.
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,  --Needs to be dec() because of "* rate".  All other durs should be int.
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](50) NULL,
	[RESOURCE_NAME] [varchar](100) NULL

	,AIRITKDUR           INT  --Invoice TalK (ITK):  What they/paul h. wants to see on invoicing reports under the col hdr of 'Talk':--Agent Invoice Report value (AIR):
	,AIRIACDUR           INT  --Invoice ACW (IAC):   What they/paul h. wants to see on invoicing reports under the col hdr of 'ACW':--Agent Invoice Report value (AIR):

	,[WS_ROW_CREATED_TIME] [datetime] NULL
	,[WS_ROW_UPDATED_TIME] [datetime] NULL
)
INSERT INTO #WSOL_IMPORTS_APFM_UV_ANT_AIA
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]
,AIA.FF_AGENT_NAME  --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING						--[DATE]             
,DT.LABEL_HH24 + ':00'					--HOD_INTERVAL

,AIA.LOGGED_IN_DUR						--AU_DK_LOGGED_IN_DURATION
,AIA.READY_DUR							--AU_DK_AVAILABLE_DURATION

,AIA.TOTAL_TALK							--AIA.RING_DUR + AIA.ON_PREVIEW_DUR + AIA.ON_CALL_DUR + AIA.ON_PARK_DUR + AIA.ON_VOICEMAIL_DUR --AU_DK_TALK_DURATION
,0										--AU_DK_IB_TALK_DURATION
,0										--AU_DK_OB_TALK_DURATION

,AIA.TOTAL_ACW							--AIA.ACW_DUR + AIA.NRD_ACW_DUR + AIA.NRD_TASK_COMP_DUR + AIA.NRD_SYSTEM_OBC_DUR	 --AU_DK_CONVENTIONAL_ACW
,0										--AU_DK_NR_DURATION
,0										--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0										--AU_DK_ADJUSTED_NR_DURATION
,AIA.AUTHORIZED							--AIA.READY_DUR + AIA.TOTAL_TALK + AIA.TOTAL_ACW + AIA.NOT_READY_BILLABLE	--AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AUTHORIZED							--AIA.READY_DUR + AIA.TOTAL_TALK + AIA.TOTAL_ACW + AIA.NOT_READY_BILLABLE	--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS  

,0  --AU_DK_XFER_COUNT
,0  --AU_DK_HOLD_COUNT
,0  --AU_DK_CONFERENCE_COUNT
,0  --AU_DK_CONSULT_COUNT
,0  --AU_DK_PUP_COUNT

,0  --AU_DK_OFFERED_COUNT
,0  --AU_DK_HANDLED_COUNT
,0  --AU_DK_IB_HANDLE_COUNT
,0  --AU_DK_OB_HANDLE_COUNT
			
,0   --AU_DK_RONA_COUNT
,0   --AU_DK_AWR_COUNT

,AIA.AUTHORIZED  --MINIMUM_GUARANTEE
,AIA.AUTHORIZED  --AUTHORIZED_TO_INVOICE

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID  --CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID 
,AIA.RESOURCE_NAME
,AIA.TOTAL_TALK --AIRITKDUR
,AIA.TOTAL_ACW  --AIRIACDUR
,dbo.getdate()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL       --	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
FROM            WSOL_TB_IMPORTS_APFM_INVOICING_6            AIA 

--ONLY WANT TO INLCUDE VALID ID EXTS IN AIA TABLE -- ID EXTS THAT HAVE INVOICE FORMULAS SET UP
INNER JOIN      YZ_TB_IMPORTS_APFM_SD_AIA_STATIC_DEFAULTS	AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      YZ_TB_IMPORTS_APFM_SD_INVOICE_GROUPS	    CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME									DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS								DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')

--==========================================
--UPDATE WSOL_TB_...UV_ANT_AIA TABLE:
--==========================================  --  SELECT TOP 100 * FROM WSOL_TB_IMPORTS_APFM_UV_ANT_AIA
UPDATE WSOL_TB_IMPORTS_APFM_UV_ANT_AIA SET
 [PLATFORM]					  = W1.[PLATFORM]
,[STATUS]                     = W1.[STATUS]
,INVOICE_MAP_KEY              = W1.INVOICE_MAP_KEY
,FIELD_NAME                   = W1.FIELD_NAME
,SCHEDULER_PROJECT_ID         = W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME           = W1.SCHEDULER_ACL_NAME
,ACD_ID_EXTENSION             = W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID      = W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME    = W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID       = W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME     = W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID        = W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID = W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID       = W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY        = W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID            = W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID           = W1.HOLIDAY_INVOICE_ID
,HOLIDAY                      = W1.HOLIDAY
,FILE_FORMAT_OF_PUSH          = W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID = W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL                      = W1.NEW_ACL
,CURRENT_CATS                 = W1.CURRENT_CATS
,CATS_ID                      = W1.CATS_ID
,PATS_ID                      = W1.PATS_ID
,SMART_ELIGIBLE               = W1.SMART_ELIGIBLE
,SMART_TIER_1                 = W1.SMART_TIER_1
,SMART_TIER_2                 = W1.SMART_TIER_2
,SMART_TIER_3                 = W1.SMART_TIER_3
,INTERVAL                     = W1.INTERVAL
,[DATE]                       = W1.[DATE]
,HOD_INTERVAL                 = W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION     = W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION     = W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION          = W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION       = W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION       = W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW       = W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION            = W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT             = W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT             = W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT       = W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT          = W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT              = W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT          = W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT          = W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT        = W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT        = W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT             = W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT              = W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE            = W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE        = W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE             = W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE       = W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
,FTP_FILE_NAME				  = W1.FTP_FILE_NAME	
,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE                     = W1.CAL_DATE
,TENANT_KEY                   = W1.TENANT_KEY
,AIR_DAY_TYPE                 = W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR           = W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE           = W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE           = W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE   = W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS                 = W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS               = W1.INCLUDE_IN_CAS
,READY_FOR_XML                = W1.READY_FOR_XML
,SHOW_ID_EXTS                 = W1.SHOW_ID_EXTS
,INVOICE_ID                   = W1.INVOICE_ID
,RESOURCE_NAME                = W1.RESOURCE_NAME

,AIRITKDUR                    = W1.AIRITKDUR
,AIRIACDUR                    = W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME          = @WS_ROW_CREATED_TIME

FROM            #WSOL_IMPORTS_APFM_UV_ANT_AIA       W1
INNER JOIN      WSOL_TB_IMPORTS_APFM_UV_ANT_AIA  UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													AND UV.TENANT_KEY                     = W1.TENANT_KEY
													AND UV.SCHEDULER_ACL_NAME	          = W1.SCHEDULER_ACL_NAME
												    AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.TENANT_KEY                     = W1.TENANT_KEY )
  AND ( UV.SCHEDULER_ACL_NAME             = W1.SCHEDULER_ACL_NAME )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )     

--===============================================
--INSERT TMP TABLE FIELDS INTO YZ_TB_... TABLE:
--===============================================
INSERT INTO WSOL_TB_IMPORTS_APFM_UV_ANT_AIA
SELECT 
 W1.[PLATFORM]
,W1.[STATUS]
,W1.INVOICE_MAP_KEY
,W1.FIELD_NAME
,W1.SCHEDULER_PROJECT_ID
,W1.SCHEDULER_ACL_NAME
,W1.ACD_ID_EXTENSION
,W1.OFFICIAL_WSOL_CLIENT_ID
,W1.OFFICIAL_WSOL_CLIENT_NAME
,W1.OFFICIAL_ACD_CLIENT_ID
,W1.OFFICIAL_ACD_CLIENT_NAME
,W1.PRIMARY_PROJECT_MANAGER_ID
,W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,W1.AGENT_TECHNOLOGY_MANAGER_ID
,W1.CONTRACTOR_SUPPORT_PATHWAY
,W1.INVOICE_SYSTEM_ID
,W1.HOLIDAY_INVOICE_ID
,W1.HOLIDAY
,W1.FILE_FORMAT_OF_PUSH
,W1.AGENT_PREPARATION_INVOICE_ID
,W1.NEW_ACL
,W1.CURRENT_CATS
,W1.CATS_ID
,W1.PATS_ID
,W1.SMART_ELIGIBLE
,W1.SMART_TIER_1
,W1.SMART_TIER_2
,W1.SMART_TIER_3
,W1.INTERVAL
,W1.[DATE]
,W1.HOD_INTERVAL
,W1.AU_DK_LOGGED_IN_DURATION
,W1.AU_DK_AVAILABLE_DURATION
,W1.AU_DK_TALK_DURATION
,W1.AU_DK_IB_TALK_DURATION
,W1.AU_DK_OB_TALK_DURATION
,W1.AU_DK_CONVENTIONAL_ACW
,W1.AU_DK_NR_DURATION
,W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,W1.AU_DK_ADJUSTED_NR_DURATION
,W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,W1.AU_DK_XFER_COUNT
,W1.AU_DK_HOLD_COUNT
,W1.AU_DK_CONFERENCE_COUNT
,W1.AU_DK_CONSULT_COUNT
,W1.AU_DK_PUP_COUNT
,W1.AU_DK_OFFERED_COUNT
,W1.AU_DK_HANDLED_COUNT
,W1.AU_DK_IB_HANDLE_COUNT
,W1.AU_DK_OB_HANDLE_COUNT
,W1.AU_DK_RONA_COUNT
,W1.AU_DK_AWR_COUNT
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_TO_INVOICE
,W1.WEEK_ENDING_DATE
,W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
,W1.FTP_FILE_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE                   
,W1.TENANT_KEY                 
,W1.AIR_DAY_TYPE               
,W1.AIR_ACW_FONT_COLOR         
,W1.MIN_GUARANTEE_RATE         
,W1.MIN_GUARANTEE_TYPE         
,W1.AUTHORIZED_TO_INVOICE_TYPE 
,W1.HAS_HOLIDAYS               
,W1.INCLUDE_IN_CAS             
,W1.READY_FOR_XML              
,W1.SHOW_ID_EXTS               
,W1.INVOICE_ID                 
,W1.RESOURCE_NAME              

,W1.AIRITKDUR              
,W1.AIRIACDUR              

,W1.WS_ROW_CREATED_TIME
,NULL  --WS_ROW_UPDATED_TIME

FROM        #WSOL_IMPORTS_APFM_UV_ANT_AIA		W1
LEFT JOIN	WSOL_TB_IMPORTS_APFM_UV_ANT_AIA		UV  ON UV.STD_TENANT_START_DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY
											AND UV.TENANT_KEY								= W1.TENANT_KEY
											AND UV.SCHEDULER_ACL_NAME						= W1.SCHEDULER_ACL_NAME
											AND UV.INVOICE_MAP_KEY							= W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 ) 
  AND ( UV.TENANT_KEY                     IS NULL AND ISNULL(W1.TENANT_KEY,'') <> '' )
  AND ( UV.SCHEDULER_ACL_NAME             IS NULL AND ISNULL(W1.SCHEDULER_ACL_NAME,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(W1.INVOICE_MAP_KEY,'') <> '' )

--==========================================================================================================================
--INSERT DATA INTO GLOBAL WORK TABLE FOR WA/SA
--==========================================================================================================================
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_APFM_WORK_HOURS_ALL') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_APFM_WORK_HOURS_ALL
END
CREATE TABLE #WSOL_TB_IMPORTS_APFM_WORK_HOURS_ALL
(	[TENANT_NAME] [varchar] (100) NOT NULL,
	[OFFICIAL_ACL_NAME] [varchar] (200) NOT NULL,
	[AGENT_NAME] [varchar] (200) NULL,
	[FIELD_MAP_ID] [varchar] (100) NOT NULL,
	[EMAIL] [varchar] (100) NULL,
	[LOGGED_IN_HOURS] [decimal] (10,2) NULL,
	[PRODUCTIVE_HOURS] [decimal] (10,2) NULL,
	[DATETIME] [datetime] NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[FTP_FILE_NAME] [varchar] (100) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL
)

INSERT INTO #WSOL_TB_IMPORTS_APFM_WORK_HOURS_ALL
SELECT
 'APFM'
,WT.OFFICIAL_ACL_NAME
,WT.AGENT_NAME
,WT.FIELD_MAP_ID
,WT.EMAIL
,WT.LOGGED_IN_HOURS
,WT.PRODUCTIVE_HOURS
,WT.DATETIME
,WT.STD_TENANT_START_DATE_TIME_KEY
,WT.FTP_FILE_NAME
,WT.WS_ROW_CREATED_TIME
FROM
(	SELECT
	 --TENANT_NAME
	 CASE WHEN W6.SCHEDULER_ACL_NAME = 'APFM Standard Agents R2' THEN
			'APFM Standard Agents'
		  ELSE W6.SCHEDULER_ACL_NAME END						AS OFFICIAL_ACL_NAME
	,W6.RESOURCE_NAME											AS AGENT_NAME
	,W6.EMPLOYEE_ID												AS FIELD_MAP_ID
	,W6.EMAIL													AS [EMAIL]
	,SUM(W6.LOGGED_IN_DUR)/3600.00								AS LOGGED_IN_HOURS
	,SUM(W6.AUTHORIZED)   /3600.00								AS PRODUCTIVE_HOURS
	,CAST(CONVERT(VARCHAR(10), W6.[DATETIME], 111) AS DATETIME)	AS [DATETIME]
	,DT.DATE_TIME_DAY_KEY										AS STD_TENANT_START_DATE_TIME_KEY
	,W6.FTP_FILE_NAME											AS FTP_FILE_NAME
	,dbo.getdate()													AS WS_ROW_CREATED_TIME
	
	FROM WSOL_TB_IMPORTS_APFM_INVOICING_6	W6
	INNER JOIN DATE_TIME					DT		ON DT.DATE_TIME_KEY	= W6.STD_TENANT_START_DATE_TIME_KEY

	GROUP BY
	 W6.SCHEDULER_ACL_NAME
	,W6.RESOURCE_NAME
	,W6.EMPLOYEE_ID
	,W6.EMAIL
	,CAST(CONVERT(VARCHAR(10), W6.[DATETIME], 111) AS DATETIME)
	,DT.DATE_TIME_DAY_KEY
	,W6.FTP_FILE_NAME
) WT

UPDATE WSOL_TB_IMPORTS_WORK_HOURS_ALL SET
 TENANT_NAME					= WTT.TENANT_NAME
--,OFFICIAL_ACL_NAME			= WTT.OFFICIAL_ACL_NAME
,AGENT_NAME						= WTT.AGENT_NAME
--,FIELD_MAP_ID					= WTT.FIELD_MAP_ID
,[EMAIL]						= WTT.EMAIL
,LOGGED_IN_HOURS				= WTT.LOGGED_IN_HOURS
,PRODUCTIVE_HOURS				= WTT.PRODUCTIVE_HOURS
,[DATETIME]						= WTT.DATETIME
--,STD_TENANT_START_DATE_TIME_KEY	= WTT.STD_TENANT_START_DATE_TIME_KEY
,FTP_FILE_NAME					= WTT.FTP_FILE_NAME
--,WS_ROW_CREATED_TIME			= dbo.getdate()
,WS_ROW_UPDATED_TIME			= dbo.getdate()

FROM #WSOL_TB_IMPORTS_APFM_WORK_HOURS_ALL WTT

INNER JOIN WSOL_TB_IMPORTS_WORK_HOURS_ALL WHR ON WHR.STD_TENANT_START_DATE_TIME_KEY = WTT.STD_TENANT_START_DATE_TIME_KEY
											 AND WHR.FIELD_MAP_ID					= WTT.FIELD_MAP_ID
											 AND WHR.OFFICIAL_ACL_NAME				= WTT.OFFICIAL_ACL_NAME

WHERE WHR.STD_TENANT_START_DATE_TIME_KEY	= WTT.STD_TENANT_START_DATE_TIME_KEY
  AND WHR.FIELD_MAP_ID						= WTT.FIELD_MAP_ID
  AND WHR.OFFICIAL_ACL_NAME					= WTT.OFFICIAL_ACL_NAME

INSERT INTO WSOL_TB_IMPORTS_WORK_HOURS_ALL
SELECT
 WTI.TENANT_NAME
,WTI.OFFICIAL_ACL_NAME
,WTI.AGENT_NAME
,WTI.FIELD_MAP_ID
,WTI.EMAIL
,WTI.LOGGED_IN_HOURS
,WTI.PRODUCTIVE_HOURS
,WTI.DATETIME
,WTI.STD_TENANT_START_DATE_TIME_KEY
,WTI.FTP_FILE_NAME
,WTI.WS_ROW_CREATED_TIME
,NULL
FROM #WSOL_TB_IMPORTS_APFM_WORK_HOURS_ALL	WTI

LEFT JOIN WSOL_TB_IMPORTS_WORK_HOURS_ALL	WRK  ON WRK.STD_TENANT_START_DATE_TIME_KEY	= WTI.STD_TENANT_START_DATE_TIME_KEY
												AND WRK.FIELD_MAP_ID					= WTI.FIELD_MAP_ID
												AND WRK.OFFICIAL_ACL_NAME				= WTI.OFFICIAL_ACL_NAME

WHERE ( WRK.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(WTI.STD_TENANT_START_DATE_TIME_KEY,0 ) <> 0 )
  AND ( WRK.FIELD_MAP_ID					IS NULL AND ISNULL(WTI.FIELD_MAP_ID,'') <> '' )
  AND ( WRK.OFFICIAL_ACL_NAME				IS NULL AND ISNULL(WTI.OFFICIAL_ACL_NAME,'') <> '' )

--===============================================
EARLY_EXIT:
--===============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_APFM_Summary]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_APFM_Summary]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_APFM_Summary] '06/01/2017','06/08/2017','','B'

--==================================================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME

IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'B' BEGIN     
			--Dates passed in are for previous day:

	IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
	END
	ELSE IF DAY(dbo.getdate()) = 1 BEGIN
		IF MONTH(dbo.getdate()) = 1 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
	END
	ELSE BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
	END
	
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

END

ELSE BEGIN  --DAILY - Run report for YESTERDAY, 1 Day ONLY.
	SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)     -- @DATE_BEG already starting at yesterday's date.
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)		-- + 1 --done below.
END

	SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--========================================================================
--	CREATE TEMP TABLE:
--========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_APFM_Summary') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_APFM_Summary
END
CREATE TABLE #IMPORTS_APFM_Summary
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--========================================================================
--	INSERT RECORDS INTO TEMP TABLE:
--========================================================================
INSERT INTO #IMPORTS_APFM_Summary
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ')	AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0)															AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME)						AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')											AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME														AS WS_ROW_CREATED_TIME
		,COUNT(*)																	AS RCD_CNT
		--  SELECT TOP 100 * FROM WSOL_TB_IMPORTS_APFM_INVOICING  C
		FROM		WSOL_TB_IMPORTS_APFM_INVOICING  C
		INNER JOIN	DATE_TIME						DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
		
		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME)						--AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')											--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME														--AS WS_ROW_CREATED_TIME
	) UA

--==================================
--	RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT      
,'White' AS BG_COLOR

FROM #IMPORTS_APFM_Summary 

ORDER BY
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT      

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@CUSTOMER_ID		 VARCHAR(150) --
,@INVOICE_GROUP      VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300) --Hid. Def=' '
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'  MANual,SUBscription
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='INV'
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='INV'  
AS
SET NOCOUNT ON    

--  EXECUTE [dbo].[uspIMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS] '10/16/2017','10/31/2017','0','0','0','0','0','HR','Y','SS','NM','Y','4','MAN','INV','INV'

--  @TIME_INTERVAL:  Can only show invoicing report at hour level or higher !!!

--  Durations in data feed are in HH:MM:SS.

--  SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_INVOICE_GROUPS
--  SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA
    
--TMP:  FOR RUNNING SQL JOBS FOR PREVIOUS DAYS:  
--SET @DATE_BEG = '05/23/2014'
--SET @DATE_END = '06/05/2014'

--==================================--SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) 
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) -- + 1
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
END
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

DECLARE
 @MTD_BEG AS DATETIME
,@MTD_END AS DATETIME  --,@YTD_BEG AS DATETIME--,@YTD_END AS DATETIME
SET @MTD_BEG = CAST(CAST(DATEPART(mm,@DTM_BEG) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)
SET @MTD_END = @DTM_END  --SET @YTD_BEG = CAST('01/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)  

IF @TIME_INTERVAL IN ('MR','MD') BEGIN  --MONTH DETERMINED BY @DTM_BEG.
	SET @DTM_BEG = @MTD_BEG
	SET @DTM_END = @MTD_END
END

--========================================================
--SET ID EXTENSIONS
--========================================================
SET @CUSTOMER_ID	= ',' + LTRIM(RTRIM(@CUSTOMER_ID)) + ','
SET @INVOICE_GROUP	= ',' + LTRIM(RTRIM(REPLACE(@INVOICE_GROUP,'NO INVOICE GROUP',''))) + ','


--==================================
--SET AMOUNT TO DIVIDE BY:
--==================================
DECLARE @DS DECIMAL(10,2)  -- SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.00			--DIVIDE SECONDS BY 1 TO GET SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
    SET @DS = 60.00			--DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
    SET @DS = 3600.00		--DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS
END
CREATE TABLE #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS
(TENANT_NAME            VARCHAR(50)
,ID_EXT                 VARCHAR(3)
,SCHEDULER_ACL_NAME     VARCHAR(100)  
,EMPLOYEE_ID            VARCHAR(50)   
,STD_TENANT_START_DATE_TIME_KEY INT
,RESOURCE_NAME          VARCHAR(100)

,AIR_DAY_TYPE           varchar(1)
,AIR_ACW_FONT_COLOR     varchar(50)
,MIN_GUARANTEE_MINUTES  decimal(6,3)
,MIN_GUARANTEE_TYPE     varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE varchar(50)
,HAS_HOLIDAYS           varchar(1)
,INCLUDE_IN_CAS         varchar(1)
,READY_FOR_XML          varchar(1)
,SHOW_ID_EXTS           varchar(1)
,
[INBOUND_CALLS] [int] NULL,
[OUTBOUND_CALLS] [int] NULL,
[TOTAL_CALLS] [int] NULL,
[LOGGED_IN_TIME] [decimal](10, 2) NULL,
[READY_TIME] [decimal](10, 2) NULL,
[INBOUND_VOICE_TIME] [decimal](10, 2) NULL,
[OUTBOUND_VOICE_TIME] [decimal](10, 2) NULL,
[ACW_VOICE_TIME] [decimal](10, 2) NULL,
[NOT_READY_TIME] [decimal](10, 2) NULL,
[NOT_READY_BREAK_TIME] [decimal](10, 2) NULL,
[NOT_READY_NO_ANSWER_TIME] [decimal](10, 2) NULL,
[SUPERVISION_TIME] [decimal](10, 2) NULL,
[UNKNOWN_TIME] [decimal](10, 2) NULL,
[TOTAL_TALK_TIME] [decimal](10, 2) NULL,
[TOTAL_NOT_READY_TIME] [decimal](10, 2) NULL,
[AUTHORIZED_ACW_TIME] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
[AUTHORIZED] [decimal](10, 2) NULL,
)

INSERT INTO #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS
SELECT
 UAA.TENANT_NAME
,UAA.ID_EXT
,UAA.SCHEDULER_ACL_NAME
,UAA.EMPLOYEE_ID 
,UAA.STD_TENANT_START_DATE_TIME_KEY
,UAA.RESOURCE_NAME

,(ISNULL(UAA.AIR_DAY_TYPE,''))				--AS AIR_DAY_TYPE
,(ISNULL(UAA.AIR_ACW_FONT_COLOR,''))		--AS AIR_ACW_FONT_COLOR
,(ISNULL(UAA.MIN_GUARANTEE_MINUTES,0.000))	--AS MIN_GUARANTEE_MINUTES
,(ISNULL(UAA.MIN_GUARANTEE_TYPE,''))		--AS MIN_GUARANTEE_TYPE
,(ISNULL(UAA.AUTHORIZED_TO_INVOICE_TYPE,''))--AS AUTHORIZED_TO_INVOICE_TYPE
,(ISNULL(UAA.HAS_HOLIDAYS,''))				--AS HAS_HOLIDAYS
,(ISNULL(UAA.INCLUDE_IN_CAS,''))			--AS INCLUDE_IN_CAS
,(ISNULL(UAA.READY_FOR_XML,''))				--AS READY_FOR_XML
,(ISNULL(UAA.SHOW_ID_EXTS,''))				--AS SHOW_ID_EXTS

,(ISNULL(UAA.INBOUND_CALLS				,0))
,(ISNULL(UAA.OUTBOUND_CALLS				,0))
,(ISNULL(UAA.TOTAL_CALLS				,0))

,(ISNULL(UAA.LOGGED_IN_TIME				,0.00))
,(ISNULL(UAA.READY_TIME					,0.00))
,(ISNULL(UAA.INBOUND_VOICE_TIME			,0.00))
,(ISNULL(UAA.OUTBOUND_VOICE_TIME		,0.00))
,(ISNULL(UAA.ACW_VOICE_TIME				,0.00))
,(ISNULL(UAA.NOT_READY_TIME				,0.00))
,(ISNULL(UAA.NOT_READY_BREAK_TIME		,0.00))
,(ISNULL(UAA.NOT_READY_NO_ANSWER_TIME	,0.00))
,(ISNULL(UAA.SUPERVISION_TIME			,0.00))
,(ISNULL(UAA.UNKNOWN_TIME				,0.00))
,(ISNULL(UAA.TOTAL_TALK_TIME			,0.00))
,(ISNULL(UAA.TOTAL_NOT_READY_TIME		,0.00))
,(ISNULL(UAA.AUTHORIZED_ACW_TIME		,0.00))
,(ISNULL(UAA.CPROD						,0.00))
,(ISNULL(UAA.MINIMUM_GUARANTEE			,0.00))
,(ISNULL(UAA.AUTHORIZED					,0.00))

--	DATASOURCES FOR DURATION FIELDS, IN SECONDS, IN HOUR INTERVALS:
--	GROUPED JUST ENOUGH TO BE ABLE TO JOIN DATASOURCES TOGETHER, AND AT MOST BASIC INTERVAL!
FROM
(	SELECT	
	 UA.FF_TEAM							AS TENANT_NAME
	,UA.ID_EXT							AS ID_EXT
	,UA.INVOICE_ID					    AS SCHEDULER_ACL_NAME
	,UA.EMPLOYEE_ID						AS EMPLOYEE_ID 
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,MAX(UA.RESOURCE_NAME)              AS RESOURCE_NAME
	,MAX(UA.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,'BLACK'                            AS AIR_ACW_FONT_COLOR
	,0									AS MIN_GUARANTEE_MINUTES
	,''									AS MIN_GUARANTEE_TYPE
	,''									AS AUTHORIZED_TO_INVOICE_TYPE
	,'Y'								AS HAS_HOLIDAYS
	,''									AS INCLUDE_IN_CAS
	,''									AS READY_FOR_XML
	,''									AS SHOW_ID_EXTS

	,SUM(ISNULL(UA.INBOUND_CALLS			,0)) AS INBOUND_CALLS
	,SUM(ISNULL(UA.OUTBOUND_CALLS			,0)) AS OUTBOUND_CALLS
	,SUM(ISNULL(UA.TOTAL_CALLS				,0)) AS TOTAL_CALLS

	,SUM(ISNULL(UA.LOGGED_IN_TIME			,0.00)) AS LOGGED_IN_TIME
	,SUM(ISNULL(UA.READY_TIME				,0.00)) AS READY_TIME
	,SUM(ISNULL(UA.INBOUND_VOICE_TIME		,0.00)) AS INBOUND_VOICE_TIME
	,SUM(ISNULL(UA.OUTBOUND_VOICE_TIME		,0.00)) AS OUTBOUND_VOICE_TIME
	,SUM(ISNULL(UA.ACW_VOICE_TIME			,0.00)) AS ACW_VOICE_TIME
	,SUM(ISNULL(UA.NOT_READY_TIME			,0.00)) AS NOT_READY_TIME
	,SUM(ISNULL(UA.NOT_READY_BREAK_TIME		,0.00)) AS NOT_READY_BREAK_TIME
	,SUM(ISNULL(UA.NOT_READY_NO_ANSWER_TIME	,0.00)) AS NOT_READY_NO_ANSWER_TIME
	,SUM(ISNULL(UA.SUPERVISION_TIME			,0.00)) AS SUPERVISION_TIME
	,SUM(ISNULL(UA.UNKNOWN_TIME				,0.00)) AS UNKNOWN_TIME
	,SUM(ISNULL(UA.TOTAL_TALK_TIME			,0.00)) AS TOTAL_TALK_TIME
	,SUM(ISNULL(UA.TOTAL_NOT_READY_TIME		,0.00)) AS TOTAL_NOT_READY_TIME
	,SUM(ISNULL(UA.AUTHORIZED_ACW_TIME		,0.00)) AS AUTHORIZED_ACW_TIME
	,SUM(ISNULL(UA.CPROD					,0.00)) AS CPROD
	,SUM(ISNULL(UA.MINIMUM_GUARANTEE		,0.00)) AS MINIMUM_GUARANTEE
	,SUM(ISNULL(UA.AUTHORIZED				,0.00)) AS AUTHORIZED

	--  SELECT *
	FROM			WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING	UA
	INNER JOIN		DATE_TIME									DT    ON DT.DATE_TIME_KEY = UA.STD_TENANT_START_DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
	  AND (@CUSTOMER_ID	  IN (',0,',',,') OR CHARINDEX(',' + RTRIM(UA.TENANT_KEY) + ',',@CUSTOMER_ID) > 0)
	  AND (@INVOICE_GROUP IN (',0,') OR CHARINDEX(',' + RTRIM(UA.INVOICE_ID) + ',',@INVOICE_GROUP) > 0) 
		
	GROUP BY
	 UA.ID_EXT 
	,UA.FF_TEAM
	,UA.INVOICE_ID
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,UA.EMPLOYEE_ID
) UAA

--==============================================================
--==============================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS_RTN') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS_RTN
END
CREATE TABLE #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS_RTN
(GRPNO                 INT
,TENANT_NAME           VARCHAR(50)
,ID_EXT                VARCHAR(3)
,SCHEDULER_ACL_NAME    VARCHAR(100)
,EMPLOYEE_ID           VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,CAL_YEAR_MONTH_NUM    VARCHAR(10)
,DATE_INTERVAL         VARCHAR(50)
,TIME_INTERVAL         VARCHAR(10)

,AIR_DAY_TYPE          varchar(1)
,AIR_ACW_FONT_COLOR    varchar(50)
,MIN_GUARANTEE_MINUTES decimal(6,3)
,MIN_GUARANTEE_TYPE    varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE varchar(50)
,HAS_HOLIDAYS          varchar(1)
,INCLUDE_IN_CAS        varchar(1)
,READY_FOR_XML         varchar(1)
,SHOW_ID_EXTS          varchar(1)

,AIR_HOLIDAY_IN        VARCHAR(1)
,ALL_AUTHORIZED_TIME   DECIMAL(10,2)

,
[INBOUND_CALLS] [int] NULL,
[OUTBOUND_CALLS] [int] NULL,
[TOTAL_CALLS] [int] NULL,
[LOGGED_IN_TIME] [decimal](10, 2) NULL,
[READY_TIME] [decimal](10, 2) NULL,
[INBOUND_VOICE_TIME] [decimal](10, 2) NULL,
[OUTBOUND_VOICE_TIME] [decimal](10, 2) NULL,
[ACW_VOICE_TIME] [decimal](10, 2) NULL,
[NOT_READY_TIME] [decimal](10, 2) NULL,
[NOT_READY_BREAK_TIME] [decimal](10, 2) NULL,
[NOT_READY_NO_ANSWER_TIME] [decimal](10, 2) NULL,
[SUPERVISION_TIME] [decimal](10, 2) NULL,
[UNKNOWN_TIME] [decimal](10, 2) NULL,
[TOTAL_TALK_TIME] [decimal](10, 2) NULL,
[TOTAL_NOT_READY_TIME] [decimal](10, 2) NULL,
[AUTHORIZED_ACW_TIME] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
[AUTHORIZED] [decimal](10, 2) NULL,
)
--==================================


--==================================
INSERT INTO #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS_RTN
SELECT
 20								--AS GRPNO  
,ISNULL(GG.TENANT_NAME       ,'') AS TENANT_NAME
,ISNULL(GG.ID_EXT            ,'') AS ID_EXT
,ISNULL(GG.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
,ISNULL(GG.EMPLOYEE_ID       ,'') AS EMPLOYEE_ID
,ISNULL(GG.RESOURCE_NAME     ,'') AS RESOURCE_NAME
,ISNULL(GG.CAL_YEAR_MONTH_NUM,'') AS CAL_YEAR_MONTH_NUM
,ISNULL(GG.DI                ,'') AS DI
,ISNULL(GG.TI                ,'') AS TI

,(GG.AIR_DAY_TYPE)                AS AIR_DAY_TYPE
,(GG.AIR_ACW_FONT_COLOR)          AS AIR_ACW_FONT_COLOR
,(GG.MIN_GUARANTEE_MINUTES)       AS MIN_GUARANTEE_MINUTES
,(GG.MIN_GUARANTEE_TYPE)          AS MIN_GUARANTEE_TYPE
,(GG.AUTHORIZED_TO_INVOICE_TYPE)  AS AUTHORIZED_TO_INVOICE_TYPE
,(GG.HAS_HOLIDAYS)                AS HAS_HOLIDAYS
,(GG.INCLUDE_IN_CAS)              AS INCLUDE_IN_CAS
,(GG.READY_FOR_XML)               AS READY_FOR_XML
,(GG.SHOW_ID_EXTS)                AS SHOW_ID_EXTS

,'' --AS AIR_HOLIDAY_IN
,0  --AS ALL_AUTHORIZED_TIME

,ISNULL(GG.INBOUND_CALLS					,0)	AS INBOUND_CALLS
,ISNULL(GG.OUTBOUND_CALLS					,0) AS OUTBOUND_CALLS
,ISNULL(GG.TOTAL_CALLS						,0) AS TOTAL_CALLS

,CAST((ISNULL(GG.LOGGED_IN_TIME				,0.00)) / @DS AS DECIMAL(10,2)) AS LOGGED_IN_TIME
,CAST((ISNULL(GG.READY_TIME					,0.00)) / @DS AS DECIMAL(10,2)) AS READY_TIME
,CAST((ISNULL(GG.INBOUND_VOICE_TIME			,0.00)) / @DS AS DECIMAL(10,2)) AS INBOUND_VOICE_TIME
,CAST((ISNULL(GG.OUTBOUND_VOICE_TIME		,0.00)) / @DS AS DECIMAL(10,2)) AS OUTBOUND_VOICE_TIME
,CAST((ISNULL(GG.ACW_VOICE_TIME				,0.00)) / @DS AS DECIMAL(10,2)) AS ACW_VOICE_TIME
,CAST((ISNULL(GG.NOT_READY_TIME				,0.00)) / @DS AS DECIMAL(10,2)) AS NOT_READY_TIME
,CAST((ISNULL(GG.NOT_READY_BREAK_TIME		,0.00)) / @DS AS DECIMAL(10,2)) AS NOT_READY_BREAK_TIME
,CAST((ISNULL(GG.NOT_READY_NO_ANSWER_TIME	,0.00)) / @DS AS DECIMAL(10,2)) AS NOT_READY_NO_ANSWER_TIME
,CAST((ISNULL(GG.SUPERVISION_TIME			,0.00)) / @DS AS DECIMAL(10,2)) AS SUPERVISION_TIME
,CAST((ISNULL(GG.UNKNOWN_TIME				,0.00)) / @DS AS DECIMAL(10,2)) AS UNKNOWN_TIME
,CAST((ISNULL(GG.TOTAL_TALK_TIME			,0.00)) / @DS AS DECIMAL(10,2)) AS TOTAL_TALK_TIME
,CAST((ISNULL(GG.TOTAL_NOT_READY_TIME		,0.00)) / @DS AS DECIMAL(10,2)) AS TOTAL_NOT_READY_TIME
,CAST((ISNULL(GG.AUTHORIZED_ACW_TIME		,0.00)) / @DS AS DECIMAL(10,2)) AS AUTHORIZED_ACW_TIME
,CAST((ISNULL(GG.CPROD						,0.00)) / @DS AS DECIMAL(10,2)) AS CPROD
,CAST((ISNULL(GG.MINIMUM_GUARANTEE			,0.00)) / @DS AS DECIMAL(10,2)) AS MINIMUM_GUARANTEE
,CAST((ISNULL(GG.AUTHORIZED					,0.00)) / @DS AS DECIMAL(10,2)) AS AUTHORIZED

FROM  -- GG STARTS HERE:
(	SELECT
	 ISNULL(SW.TENANT_NAME,'')        AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  AS EMPLOYEE_ID
	,MAX(RESOURCE_NAME)               AS RESOURCE_NAME

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) AS TI

	,MAX(SW.AIR_DAY_TYPE)					AS AIR_DAY_TYPE
	,MAX(SW.AIR_ACW_FONT_COLOR)				AS AIR_ACW_FONT_COLOR
	,MAX(SW.MIN_GUARANTEE_MINUTES)			AS MIN_GUARANTEE_MINUTES
	,MAX(SW.MIN_GUARANTEE_TYPE)				AS MIN_GUARANTEE_TYPE
	,MAX(SW.AUTHORIZED_TO_INVOICE_TYPE)		AS AUTHORIZED_TO_INVOICE_TYPE
	,MAX(SW.HAS_HOLIDAYS)					AS HAS_HOLIDAYS
	,MAX(SW.INCLUDE_IN_CAS)					AS INCLUDE_IN_CAS
	,MAX(SW.READY_FOR_XML)					AS READY_FOR_XML
	,MAX(SW.SHOW_ID_EXTS)					AS SHOW_ID_EXTS

	,SUM(ISNULL(SW.INBOUND_CALLS			,0))	AS INBOUND_CALLS
	,SUM(ISNULL(SW.OUTBOUND_CALLS			,0))	AS OUTBOUND_CALLS
	,SUM(ISNULL(SW.TOTAL_CALLS				,0))	AS TOTAL_CALLS
	
	,SUM(ISNULL(SW.LOGGED_IN_TIME			,0.00)) AS LOGGED_IN_TIME
	,SUM(ISNULL(SW.READY_TIME				,0.00)) AS READY_TIME
	,SUM(ISNULL(SW.INBOUND_VOICE_TIME		,0.00)) AS INBOUND_VOICE_TIME
	,SUM(ISNULL(SW.OUTBOUND_VOICE_TIME		,0.00)) AS OUTBOUND_VOICE_TIME
	,SUM(ISNULL(SW.ACW_VOICE_TIME			,0.00)) AS ACW_VOICE_TIME
	,SUM(ISNULL(SW.NOT_READY_TIME			,0.00)) AS NOT_READY_TIME
	,SUM(ISNULL(SW.NOT_READY_BREAK_TIME		,0.00)) AS NOT_READY_BREAK_TIME
	,SUM(ISNULL(SW.NOT_READY_NO_ANSWER_TIME	,0.00)) AS NOT_READY_NO_ANSWER_TIME
	,SUM(ISNULL(SW.SUPERVISION_TIME			,0.00)) AS SUPERVISION_TIME
	,SUM(ISNULL(SW.UNKNOWN_TIME				,0.00)) AS UNKNOWN_TIME
	,SUM(ISNULL(SW.TOTAL_TALK_TIME			,0.00)) AS TOTAL_TALK_TIME
	,SUM(ISNULL(SW.TOTAL_NOT_READY_TIME		,0.00)) AS TOTAL_NOT_READY_TIME
	,SUM(ISNULL(SW.AUTHORIZED_ACW_TIME		,0.00))	AS AUTHORIZED_ACW_TIME
	,SUM(ISNULL(SW.CPROD					,0.00)) AS CPROD
	,SUM(ISNULL(SW.MINIMUM_GUARANTEE		,0.00)) AS MINIMUM_GUARANTEE
	,SUM(ISNULL(SW.AUTHORIZED				,0.00)) AS AUTHORIZED
	
	FROM			#IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS		SW
	INNER JOIN		DATE_TIME											DT	ON DT.DATE_TIME_KEY = SW.STD_TENANT_START_DATE_TIME_KEY
													 
	--WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END		  --AND (@TENANT_KEY   IN ('0','') OR SW.TENANT_KEY   = CAST(@TENANT_KEY AS INT) )

	GROUP BY 
	 ISNULL(SW.TENANT_NAME,'')        --AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             --AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') --AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  --AS EMPLOYEE_ID

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) --AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) --AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) --AS TI
) GG

--==================================
--IS A HOLIDAY DATE IN THE MIX:
--==================================
DECLARE @HOLIDAY_IN VARCHAR(1)
SET @HOLIDAY_IN = 'N'
DECLARE @I INT
SET @I = (SELECT COUNT(*) FROM #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS_RTN WHERE AIR_DAY_TYPE = 'H')  --  AND INCLUDE_IN_CAS = 'Y')
IF @I > 0 BEGIN
	SET @HOLIDAY_IN = 'Y'
END
--==================================
UPDATE #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS_RTN SET
 AIR_HOLIDAY_IN = @HOLIDAY_IN

--=========================================================
--UPDATE TOTALS LINE ON REPORT FOR STANDARD AND HOLIDAY:
--=========================================================
UPDATE #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS_RTN SET
 ALL_AUTHORIZED_TIME = ISNULL(LOJ.ALL_AUTHORIZED_TIME,0.0)
FROM #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS_RTN TA
LEFT OUTER JOIN
(	SELECT
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
	,SUM(AUTHORIZED) AS ALL_AUTHORIZED_TIME
	FROM #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS_RTN 
	GROUP BY 
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
) LOJ ON LOJ.SCHEDULER_ACL_NAME = TA.SCHEDULER_ACL_NAME
	 AND LOJ.EMPLOYEE_ID        = TA.EMPLOYEE_ID
	 AND LOJ.AIR_DAY_TYPE       = TA.AIR_DAY_TYPE

--==================================
--RETURN DATA
--==================================
--=======================================================================================
--POPULATE TABLE READ BY SSIS TO GET END DATE OF DATA REPORT/FILE HAS BEEN RUN FOR:
--=======================================================================================
INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
SELECT
 'uspIMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS'			--SQL_JOB_NAME
,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,111),'/','')			--FILENM   YYYYMMDD_...
,dbo.GETDATE()  --CST_ROW_CREATED_TIME

--=====================================
--RETURN DATASET:
--=====================================
SELECT 
 CASE WHEN @DUR_IN = 'SS' THEN '' ELSE 'F' END AS DUR_FORMAT
,CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
,V.*

FROM      #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS_RTN  V

ORDER BY 
 V.GRPNO
,V.SCHEDULER_ACL_NAME
,V.EMPLOYEE_ID
,V.CAL_YEAR_MONTH_NUM
,V.DATE_INTERVAL
,V.TIME_INTERVAL  --SINCE IN MILITARY TIME!

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_BRIGHT_PATTERN_AIA_AGENT_MAPPING_MISSING_AGENTS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_BRIGHT_PATTERN_AIA_AGENT_MAPPING_MISSING_AGENTS]
 @DATE_BEG		DATETIME
,@DATE_END		DATETIME
,@PSW			VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE		VARCHAR(3)
,@CUSTOMER_NAME	VARCHAR(100)
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHICH INVOICE_MAP_KEY VALUES EXIST IN THE ACTIVITY FILES, BUT NOT IN THE AIA_AGENT_MAPPING .CSV FILES.
--          NO MATCHES BETWEEN ACTIVITY AND AGENT MAPPING.  WHEN NO MATCHES, THEN NO 'SCHEDULER' INVOICING.
--THIS USP IS DATA SOURCE FOR SRS GRID ON "ACTIVITY IMPORTS" STATUS REPORT!!!

--EXECUTE [dbo].[uspIMPORTS_BRIGHT_PATTERN_AIA_AGENT_MAPPING_MISSING_AGENTS] '11/01/2017','11/09/2017','4','B','i9 Sports Agents'

--========================================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--========================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME

IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--========================================================================
--SET CUSTOMER NAME PARAMETER VALUE
--========================================================================
SET @CUSTOMER_NAME	= ',' + LTRIM(RTRIM(@CUSTOMER_NAME)) + ','

--===================================================================================================
--CREATE AND POPULATE TMP TABLE
--===================================================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_BRIGHT_PATTERN_AIA_AGENT_MAPPING_MISSING_AGENTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_BRIGHT_PATTERN_AIA_AGENT_MAPPING_MISSING_AGENTS
END
CREATE TABLE #IMPORTS_BRIGHT_PATTERN_AIA_AGENT_MAPPING_MISSING_AGENTS
(FILEDATETIME          VARCHAR(50)
,FTP_FILE_NAME         VARCHAR(100)
,WS_ROW_CREATED_TIME   DATETIME
,INVOICE_MAP_KEY       VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,RCD_CNT               INT
)
INSERT INTO #IMPORTS_BRIGHT_PATTERN_AIA_AGENT_MAPPING_MISSING_AGENTS
SELECT
 DT.CAL_DATE_STRING					AS FILEDATETIME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME
,I.WS_ROW_CREATED_TIME
,I.FF_AGENT_LAST_NAME				AS INVOICE_MAP_KEY
,I.RESOURCE_NAME					AS RESOURCE_NAME
,COUNT(*)							AS RCD_CNT
--SELECT *
FROM            WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING	I   
INNER JOIN      DATE_TIME									DT   ON DT.DATE_TIME_KEY        = I.STD_TENANT_START_DATE_TIME_KEY

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND ISNULL(I.ID_EXT,'') = ''
  AND ISNULL(I.FF_AGENT_LAST_NAME,'') NOT IN ('Lopez_ASW')	-- FILTER OUT WSOL EMPLOYEES
  AND (@CUSTOMER_NAME	  IN (',0,',',,') OR CHARINDEX(',' + RTRIM(I.FF_TEAM) + ',',@CUSTOMER_NAME) > 0)
  AND ISNULL(I.RESOURCE_NAME,'') NOT IN ('Rory Slaughter','Joann Lopez','Jeff Innis','Rebecca Hargis','Christina Gerding','Oscar Galvan','Kathryn Roxo')

GROUP BY
 DT.CAL_DATE_STRING
,REPLACE(I.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME
,I.WS_ROW_CREATED_TIME
,I.FF_AGENT_LAST_NAME				--AS INVOICE_MAP_KEY
,I.RESOURCE_NAME					--AS RESOURCE_NAME

--==================================
UPDATE #IMPORTS_BRIGHT_PATTERN_AIA_AGENT_MAPPING_MISSING_AGENTS SET
 FILEDATETIME = REPLACE(CONVERT(VARCHAR(10),ISNULL(FILEDATETIME,'1/1/1900'),102),'/',' . ')

--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_BRIGHT_PATTERN_AIA_AGENT_MAPPING_MISSING_AGENTS)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_BRIGHT_PATTERN_AIA_AGENT_MAPPING_MISSING_AGENTS
	SELECT
	 ''				--DT.CAL_DATE_STRING
	,''				--I.FTP_FILE_NAME
	,dbo.getdate()  --I.WS_ROW_CREATED_TIME
	,''				--I.FF_AGENT_LAST_NAME   AS INVOICE_MAP_KEY
	,''				--I.RESOURCE_NAME		 AS RESOURCE_NAME
	,0				--COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
END
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RCD_CNT = 0 
	BEGIN  --@RCD_CNT WILL BE 0 STILL, EVEN THOUGH ONE BLANK RECORD WAS ADDED...
		SET @MSG1 = @MSG1 + 'There are NO invalid ID Extensions.'
	END
ELSE
	BEGIN
		IF @RPT_TYPE = 'B'
			BEGIN
				SET @MSG1 = ''
	
				IF @RCD_CNT = 0
					BEGIN
						SET @MSG1 = @MSG1 + 'There are NO invlid ID Extensions!'
					END
				ELSE
					BEGIN
						IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1
							BEGIN
								SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
							END
		
								SET @MSG1 = @MSG1 + 'The list below contains Invoice Map Key values for agents that are associated with activity for the report date range, but ' + CHAR(10) + CHAR(13)
								SET @MSG1 = @MSG1 + 'who have an invalid ID Extension as part of their last name within the Bright Pattern system. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

								SET @MSG1 = @MSG1 + 'Agents who are on this list will not be invoiced (for activity dates shown), unless a special request is made and received '
								SET @MSG1 = @MSG1 + 'with plenty of time before the automated invoice process begins.  The analyst will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

								SET @MSG1 = @MSG1 + 'Also, Project Management may need to update the agent information within the Bright Pattern system '
								SET @MSG1 = @MSG1 + 'before the Analyst can correctly update agent data. ' + CHAR(13) + CHAR(10)
					END

			END
	END

--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_BRIGHT_PATTERN_AIA_AGENT_MAPPING_MISSING_AGENTS 

ORDER BY
 INVOICE_MAP_KEY
,FTP_FILE_NAME

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_BRIGHT_PATTERN_AIA_XML]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_BRIGHT_PATTERN_AIA_XML]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300)
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='DY'  DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'-Manual - when users run report - what SRS reports are defaulted to.  MAN means use date range that user specified.  The exception is when a report is defined with PTD/YTD and MTD rows in it.
                                  --         'SUB'-Subscription - what SRS subscriptions are defaulted to.  SUB means set date range @vars based on @TIME_INTERVAL. (since date range in SRS Subscription can't be set correctly)
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='AIA'-Agent Invoice Automation - what Sergey uses for/in Scheduler...
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='XML'-AIA RPT (DETAIL) (XML FILE/EXPORT),
AS
SET NOCOUNT ON


--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)  
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 0,101) AS DATETIME)  
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) + 1
END

--IF @EXECUTIONER = 'MAN', DON'T CHANGE DATES -- THE REPORT IS BEING RAN MANUALLY, AND THE DATE RANGE WANTED BY THE USER IS BEING SET MANUALLY.

IF @EXECUTIONER = 'NEW' BEGIN -- NEW BI-MONTHLY PAYMENT CYCLE 1ST AND 16TH OF EACH MONTH
	IF @TIME_INTERVAL = 'W14' BEGIN
		IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate() - 1)) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
			END
		END		
		ELSE IF DAY(dbo.getdate()) = 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) < 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
	END
END

--=========================================================================================
--FORMAT 'MULTIPLES' "IN THAT" VALUES:  (Referring to CHARINDEX(search for this, in that))
--=========================================================================================
SET @ID_EXT          = ',' + LTRIM(RTRIM(@ID_EXT)) + ','
SET @SCHEDULER_GROUP = ',' + LTRIM(RTRIM(@SCHEDULER_GROUP)) + ','
SET @TENANT_KEY		 = ',' + LTRIM(RTRIM(@TENANT_KEY)) + ','

--==================================
--SET AMOUNT TO DIVIDE BY:
--==================================
DECLARE @DS DECIMAL(10,2)  --INT  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.0       --DIVIDE SECONDS BY 1 TO GET SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
	SET @DS = 60.0		--DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
	SET @DS = 3600.0	--DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
IF @RPT_TYPE_GRP = 'AIA' BEGIN

	--POPULATES XML REPORT.  SRS SUBSCRIPTION EXPORTS TO XML.  SSIS RENAMES AND MOVES XML FILE TO FTP.  SERGEY PICKS UP FILE
	
	IF @RPT_TYPE = 'XML' BEGIN  --AIA REPORT  --EXACTLY WHAT IS IN XML FILE AND/OR AIA TABLE.
		--==================================		--CREATE TMP TABLE:
		IF OBJECT_ID('TEMPDB..#IMPORTS_BRIGHT_PATTERN_AIA_XML') IS NOT NULL BEGIN
		   DROP TABLE #IMPORTS_BRIGHT_PATTERN_AIA_XML
		END
		CREATE TABLE #IMPORTS_BRIGHT_PATTERN_AIA_XML
		([PLATFORM]                   VARCHAR(50)
		,[STATUS]                     VARCHAR(50) 
		,INVOICE_MAP_KEY              VARCHAR(50) 
		,FIELD_NAME                   VARCHAR(50) 
		,SCHEDULER_PROJECT_ID         VARCHAR(50) 
		,SCHEDULER_ACL_NAME           VARCHAR(50) 
		,ACD_ID_EXTENSION             VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_ID      VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_NAME    VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_ID       VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_NAME     VARCHAR(50) 
		,PRIMARY_PROJECT_MANAGER_ID   VARCHAR(500) 
		,DIRECTOR_OF_PROJECT_MANAGEMENT_ID VARCHAR(500) 
		,AGENT_TECHNOLOGY_MANAGER_ID  VARCHAR(500) 
		,CONTRACTOR_SUPPORT_PATHWAY   VARCHAR(500) 
		,INVOICE_SYSTEM_ID            VARCHAR(50) 
		,HOLIDAY_INVOICE_ID           VARCHAR(50) 
		,HOLIDAY                      VARCHAR(50) 
		,FILE_FORMAT_OF_PUSH          VARCHAR(50) 
		,AGENT_PREPARATION_INVOICE_ID VARCHAR(50) 
		,NEW_ACL                      VARCHAR(50) 
		,CURRENT_CATS                 VARCHAR(50) 
		,CATS_ID                      VARCHAR(50) 
		,PATS_ID                      VARCHAR(50) 
		,SMART_ELIGIBLE               VARCHAR(50) 
		,SMART_TIER_1                 VARCHAR(50) 
		,SMART_TIER_2                 VARCHAR(50) 
		,SMART_TIER_3                 VARCHAR(50) 
		,INTERVAL                     VARCHAR(50) 
		,DATE                         VARCHAR(50) 
		,HOD_INTERVAL                 VARCHAR(50) 
		,AU_DK_LOGGED_IN_DURATION     DECIMAL(10,2)  --INT 
		,AU_DK_AVAILABLE_DURATION     DECIMAL(10,2)  --INT 
		,AU_DK_TALK_DURATION          DECIMAL(10,2)  --INT 
		,AU_DK_IB_TALK_DURATION       DECIMAL(10,2)  --INT 
		,AU_DK_OB_TALK_DURATION       DECIMAL(10,2)  --INT 
		,AU_DK_CONVENTIONAL_ACW       DECIMAL(10,2)  --INT 
		,AU_DK_NR_DURATION            DECIMAL(10,2)  --INT 
		,AU_DK_PSEUDO_PRODUCTIVE_DURATION   DECIMAL(10,2)  --INT 
		,AU_DK_ADJUSTED_NR_DURATION         DECIMAL(10,2)  --INT 
		,AU_DK_TOTAL_PRODUCTIVE_DURATION    DECIMAL(10,2)  --INT 
		,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS DECIMAL(10,2)  --INT 
		,AU_DK_XFER_COUNT             INT 
		,AU_DK_HOLD_COUNT             INT 
		,AU_DK_CONFERENCE_COUNT       INT 
		,AU_DK_CONSULT_COUNT          INT 
		,AU_DK_PUP_COUNT              INT 
		,AU_DK_OFFERED_COUNT          INT 
		,AU_DK_HANDLED_COUNT          INT 
		,AU_DK_IB_HANDLE_COUNT        INT 
		,AU_DK_OB_HANDLE_COUNT        INT 
		,AU_DK_RONA_COUNT             INT 
		,AU_DK_AWR_COUNT              INT 
		,MINIMUM_GUARANTEE            DECIMAL(10,2) 
		,AUTHORIZED_TO_INVOICE        DECIMAL(10,2) 
		,WEEK_ENDING_DATE             VARCHAR(50) 
		,PAY_CYCLE_CLOSURE_DATE       VARCHAR(50) 
		,CAL_DATE                     DATETIME
		,TENANT_KEY                   INT 
		,INVOICE_ID                   VARCHAR(50) 
		,CST_ROW_CREATED_TIME         DATETIME
		)
		--==================================		
		-- INSERT INTO TEMP TABLE
		--==================================
		INSERT INTO #IMPORTS_BRIGHT_PATTERN_AIA_XML
		SELECT --AIA.*
		 AIA.[PLATFORM]
		,AIA.[STATUS]                       
		,AIA.INVOICE_MAP_KEY              
		,AIA.FIELD_NAME                   
		,AIA.SCHEDULER_PROJECT_ID         
		,AIA.SCHEDULER_ACL_NAME           
		,AIA.ACD_ID_EXTENSION             
		,AIA.OFFICIAL_WSOL_CLIENT_ID      
		,AIA.OFFICIAL_WSOL_CLIENT_NAME    
		,AIA.OFFICIAL_ACD_CLIENT_ID       
		,AIA.OFFICIAL_ACD_CLIENT_NAME     
		,AIA.PRIMARY_PROJECT_MANAGER_ID   
		,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID 
		,AIA.AGENT_TECHNOLOGY_MANAGER_ID  
		,AIA.CONTRACTOR_SUPPORT_PATHWAY   
		,AIA.INVOICE_SYSTEM_ID            
		,AIA.HOLIDAY_INVOICE_ID           
		,AIA.HOLIDAY                      
		,AIA.FILE_FORMAT_OF_PUSH          
		,AIA.AGENT_PREPARATION_INVOICE_ID 
		,AIA.NEW_ACL                      
		,AIA.CURRENT_CATS                 
		,AIA.CATS_ID                      
		,AIA.PATS_ID                      
		,AIA.SMART_ELIGIBLE               
		,AIA.SMART_TIER_1                 
		,AIA.SMART_TIER_2                 
		,AIA.SMART_TIER_3                 
		,AIA.INTERVAL                     
		,AIA.DATE                         
		,AIA.HOD_INTERVAL                 
		,CAST( ( 1.0 * (AIA.AU_DK_LOGGED_IN_DURATION) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_LOGGED_IN_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_AVAILABLE_DURATION) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_AVAILABLE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_TALK_DURATION) )      / @DS AS DECIMAL(10,2)) --AS AU_DK_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_IB_TALK_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_IB_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_OB_TALK_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_OB_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_CONVENTIONAL_ACW) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_CONVENTIONAL_ACW
		,CAST( ( 1.0 * (AIA.AU_DK_NR_DURATION) )        / @DS AS DECIMAL(10,2)) --AS AU_DK_NR_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_PSEUDO_PRODUCTIVE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_ADJUSTED_NR_DURATION) )         / @DS AS DECIMAL(10,2)) --AS AU_DK_ADJUSTED_NR_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION) )    / @DS AS DECIMAL(10,2)) --AS AU_DK_TOTAL_PRODUCTIVE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
		,(AIA.AU_DK_XFER_COUNT)         --AS AU_DK_XFER_COUNT
		,(AIA.AU_DK_HOLD_COUNT)         --AS AU_DK_HOLD_COUNT
		,(AIA.AU_DK_CONFERENCE_COUNT)   --AS AU_DK_CONFERENCE_COUNT
		,(AIA.AU_DK_CONSULT_COUNT)      --AS AU_DK_CONSULT_COUNT
		,(AIA.AU_DK_PUP_COUNT)          --AS AU_DK_PUP_COUNT
		,(AIA.AU_DK_OFFERED_COUNT)      --AS AU_DK_OFFERED_COUNT
		,(AIA.AU_DK_HANDLED_COUNT)      --AS AU_DK_HANDLED_COUNT
		,(AIA.AU_DK_IB_HANDLE_COUNT)    --AS AU_DK_IB_HANDLE_COUNT
		,(AIA.AU_DK_OB_HANDLE_COUNT)    --AS AU_DK_OB_HANDLE_COUNT
		,(AIA.AU_DK_RONA_COUNT)         --AS AU_DK_RONA_COUNT
		,(AIA.AU_DK_AWR_COUNT)          --AS AU_DK_AWR_COUNT
		,CAST( ( 1.0 * (AIA.MINIMUM_GUARANTEE) )     / @DS AS DECIMAL(10,2)) --AS MINIMUM_GUARANTEE
		,CAST( ( 1.0 * (AIA.AUTHORIZED_TO_INVOICE) ) / @DS AS DECIMAL(10,2)) --AS AUTHORIZED_TO_INVOICE
		,AIA.WEEK_ENDING_DATE             
		,AIA.PAY_CYCLE_CLOSURE_DATE       
		,AIA.CAL_DATE                     
		,AIA.TENANT_KEY                   
		,AIA.INVOICE_ID                   
		,AIA.WS_ROW_CREATED_TIME         

		--  SELECT *
		FROM            WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA	AIA
		INNER JOIN      DATE_TIME									DT		ON DT.DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
		
		WHERE ( DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END )
		  AND AIA.STATUS = 'Active'
		  AND ( (ISNULL(AIA.READY_FOR_XML,'') = 'Y')	--<----Maintain this field, and the AIA will populate the XML correctly every time!!!!!!!!!
				OR (@ID_EXT = 'Y') )					--<----In Test Mode (ignore what ready_for_xml is set to).
		  AND ( ISNULL(AIA.INVOICE_ID,'') <> '' )		--<----INSURANCE, IN CASE BLANK ID EXTENSION SLIPS THROUGH
--		  AND ( ISNULL(AIA.RESOURCE_NAME,'') <> '')		--<----INSURANCE, FILTER OUT THOSE NOT IN AIA AGENT MAPPING SINCE INVOICE_ID IS JUST FF_USER_NAME FROM IMPORT FILE
		  AND (@TENANT_KEY IN (',0,',',,') OR CHARINDEX(',' + RTRIM(AIA.TENANT_KEY) + ',',@TENANT_KEY) > 0)

		ORDER BY 
		 AIA.OFFICIAL_ACD_CLIENT_NAME
		--,AIA.SCHEDULER_ACL_NAME
		,AIA.INVOICE_ID

		,AIA.ACD_ID_EXTENSION     
		,AIA.INVOICE_MAP_KEY
		,AIA.DATE
		,AIA.HOD_INTERVAL


		--==================================!!!--INSERT RECORD FOR REPORT SO SSIS KNOWS DATE OF DATA IN DATASET:
		--Have to include 'D??' or 'W??' because SRS Subscriptions are being ran at about same time in one sql job step.
		--  If one subscription takes longer than the other, the wrong date will get used/pulled from the YZ_TB_FILENAMES_FOR_SSIS in the ssis. and so on.
		IF CHARINDEX('D',@TIME_INTERVAL) > 0 BEGIN
			INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
			(SQL_JOB_NAME
			,FILENM
			,CST_ROW_CREATED_TIME)
			SELECT  --FOR THE .XML FILES FOR EACH DATE:
			 'iNetAIA_' + LTRIM(RTRIM(@TIME_INTERVAL))  --'iNetAIA_D09' for internal wsinet tenants 9 days from current date.  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.getdate()  --CST_ROW_CREATED_TIME
		END
		ELSE BEGIN  --'W' MEANING NEED TO PASS/POPULATE WITH DATE RANGE, LIKE 'MMDDYY_MMDDYY'. -- FOR GAR AND NW.
			INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
				(SQL_JOB_NAME
				,FILENM
				,CST_ROW_CREATED_TIME)
			SELECT  --FOR GETAROOM AND NINE_WEST:    --old:-- 'AGENT_INVOICE_AIA_XML'  --SQL_JOB_NAME 
			 'AIA_XML_' + REPLACE(LTRIM(RTRIM(CAST(@TENANT_KEY AS VARCHAR(10)))),',','')  --'AIA_XML_900905' for BRIGHT_PATTERN  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_BEG,1),'/','') + '_' + REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.getdate()  --CST_ROW_CREATED_TIME
		END
		--  SELECT * FROM WSOL_TB_FILENAMES_FOR_SSIS ORDER BY CST_ROW_CREATED_TIME DESC

		--==================================!!!--RETURN DATASET TO REPORT:
		SELECT *
		FROM #IMPORTS_BRIGHT_PATTERN_AIA_XML
		ORDER BY 
		 OFFICIAL_ACD_CLIENT_NAME
		--,SCHEDULER_ACL_NAME
		,INVOICE_ID

		,ACD_ID_EXTENSION     
		,INVOICE_MAP_KEY
		,DATE
		,HOD_INTERVAL
	END  --AIA_XML



END  --IF @RPT_TYPE_GRP = 'AIA'


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
--==================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_BRIGHT_PATTERN_DEFAULT_CUSTOMERS]...';


GO


CREATE PROCEDURE [dbo].[uspIMPORTS_BRIGHT_PATTERN_DEFAULT_CUSTOMERS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_BRIGHT_PATTERN_DEFAULT_CUSTOMERS] '10/16/2017','10/31/2017'

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) + 1
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SELECT
 UA.TENANT_KEY
,UA.FF_TEAM
FROM 
(	SELECT
	 YT.TENANT_KEY
	,YT.FF_TEAM
	--  SELECT *
	FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING YT
	WHERE YT.TENANT_KEY <> '0'
	--WHERE YT.[DATETIME] >= @DTM_BEG AND YT.[DATETIME] <  @DTM_END

	GROUP BY
	 YT.TENANT_KEY
	,YT.FF_TEAM
) UA
ORDER BY UA.FF_TEAM

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GO
PRINT N'Creating [dbo].[uspIMPORTS_BRIGHT_PATTERN_DEFAULT_INVOICE_GROUPS]...';


GO


CREATE PROCEDURE [dbo].[uspIMPORTS_BRIGHT_PATTERN_DEFAULT_INVOICE_GROUPS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150)
,@CUSTOMER_ID		 VARCHAR(150)
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_BRIGHT_PATTERN_DEFAULT_INVOICE_GROUPS] '10/16/2017','10/31/2017','0','0'

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) + 1
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SET @TENANT_KEY = 900905 -- BRIGHT_PATTERN
SET @CUSTOMER_ID = ',' + LTRIM(RTRIM(@CUSTOMER_ID)) + ','

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SELECT
 UA.INVOICE_ID
,UA.INVOICE_ID_DISPLAY
FROM 
(	SELECT
	 CASE WHEN ISNULL(YT.INVOICE_ID,'') = '' THEN 'NO INVOICE GROUP' ELSE YT.INVOICE_ID END AS INVOICE_ID
	,CASE WHEN ISNULL(YT.INVOICE_ID,'') = '' THEN 'NO INVOICE GROUP' ELSE YT.INVOICE_ID END AS INVOICE_ID_DISPLAY
	-- SELECT *
	FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING YT

	WHERE ( YT.[DATETIME] >= @DTM_BEG AND YT.[DATETIME] <  @DTM_END )
	  AND ( @CUSTOMER_ID IN (',,',',0,') OR CHARINDEX(',' + CAST(YT.TENANT_KEY AS VARCHAR(10)) + ',',@CUSTOMER_ID) > 0 )

	GROUP BY
	 CASE WHEN ISNULL(YT.INVOICE_ID,'') = '' THEN 'NO INVOICE GROUP' ELSE YT.INVOICE_ID END
) UA
ORDER BY UA.INVOICE_ID DESC

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GO
PRINT N'Creating [dbo].[uspIMPORTS_BRIGHT_PATTERN_IMPORT_STATUS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_BRIGHT_PATTERN_IMPORT_STATUS]
 @DATE_BEG		DATETIME
,@DATE_END		DATETIME
,@PSW			VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE		VARCHAR(3)
,@CUSTOMER_ID	VARCHAR(10)
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_BRIGHT_PATTERN_IMPORT_STATUS] '10/16/2017','10/31/2017','','B','190'

--========================================
-- SET DATE VARIABLES
--========================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE 
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE 
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--========================================================================
--SET CUSTOMER ID PARAMETER VALUE
--========================================================================
SET @CUSTOMER_ID	= ',' + LTRIM(RTRIM(@CUSTOMER_ID)) + ','

--========================================================================
--CREATE TMP TABLE:
--========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_BRIGHT_PATTERN_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_BRIGHT_PATTERN_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_BRIGHT_PATTERN_IMPORT_STATUS
(FILEDATETIME			VARCHAR(20)
,FTP_FILE_NAME			VARCHAR(100)
,CST_ROW_CREATED_TIME	DATETIME
,RCD_CNT				INT
)

--========================================================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================================================
    INSERT INTO #IMPORTS_BRIGHT_PATTERN_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'') AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0) AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING   C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
		  AND (@CUSTOMER_ID	  IN (',0,',',,') OR CHARINDEX(',' + RTRIM(C.TENANT_KEY) + ',',@CUSTOMER_ID) > 0)
--		AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )  -- USE IF YOU WANT TO IGNORE WEEKENDS

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME)
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')
		,C.WS_ROW_CREATED_TIME
	) UA

--================================================================================
--CREATE CURSOR TO CHECK FOR MISSING DATES
--================================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''


IF @CUSTOMER_ID = ',190,'  -- <<---- i9 SPORTS
	BEGIN
		
		DECLARE crsT CURSOR FOR
			SELECT DT.FILEDATETIME
			FROM
			(	SELECT
				 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
				,DT.CAL_DAY_NUM_IN_WEEK
				FROM DATE_TIME DT
				WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
				GROUP BY
				 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
				,DT.CAL_DAY_NUM_IN_WEEK
			) DT 
			LEFT OUTER JOIN #IMPORTS_BRIGHT_PATTERN_IMPORT_STATUS   I   ON I.FILEDATETIME = DT.FILEDATETIME

			WHERE ISNULL(I.RCD_CNT,0) = 0				-- CATCH ALL POSSIBLE MISSING DATES SINCE ONE FILE CAN CONTAIN DATA FOR MULTIPLE DAYS
			  AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)	-- i9 SPORTS AGENTS DO NOT WORK WEEKENDS

			ORDER BY 
			DT.FILEDATETIME

		OPEN crsT
		FETCH NEXT FROM crsT INTO @FILEDATETIME
		WHILE @@FETCH_STATUS = 0 BEGIN
			SET @RCD_CNT = @RCD_CNT + 1 

			SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
			--===============================
			FETCH NEXT FROM crsT INTO @FILEDATETIME
		END
		CLOSE crsT
		DEALLOCATE crsT
	
	END

IF @CUSTOMER_ID <> ',190,'

	BEGIN
		
		DECLARE crsT CURSOR FOR
			SELECT DT.FILEDATETIME
			FROM
			(	SELECT
				 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
				,DT.CAL_DAY_NUM_IN_WEEK
				FROM DATE_TIME DT
				WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
				GROUP BY
				 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
				,DT.CAL_DAY_NUM_IN_WEEK
			) DT 
			LEFT OUTER JOIN #IMPORTS_BRIGHT_PATTERN_IMPORT_STATUS   I   ON I.FILEDATETIME = DT.FILEDATETIME

			WHERE ISNULL(I.RCD_CNT,0) = 0				-- CATCH ALL POSSIBLE MISSING DATES SINCE ONE FILE CAN CONTAIN DATA FOR MULTIPLE DAYS
--			  AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)	-- WEEKEND FILTER DOES NOT APPLY HERE

			ORDER BY 
			DT.FILEDATETIME

		OPEN crsT
		FETCH NEXT FROM crsT INTO @FILEDATETIME
		WHILE @@FETCH_STATUS = 0 BEGIN
			SET @RCD_CNT = @RCD_CNT + 1 

			SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
			--===============================
			FETCH NEXT FROM crsT INTO @FILEDATETIME
		END
		CLOSE crsT
		DEALLOCATE crsT
	
	END

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B'
	BEGIN

		SET @MSG1 = ''

		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1
			BEGIN
				SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
				IF @RCD_CNT > 0
					BEGIN
						SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
						SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

						SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
						SET @MSG1 = @MSG1 + 'Any missing import files not on the SFTP server by 9:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
					END
				ELSE
					BEGIN
						SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
					END
			END
		ELSE 
			BEGIN
				SET @MSG1 = 'Imported file(s) from ' 
					+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
				
				IF @RCD_CNT > 0
					BEGIN
						SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
					END
				ELSE
					BEGIN
						SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
					END
			END
	
	END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--BRIGHT_PATTERN:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM WSOL_TB_IMPORT_ERRORS_FOUND
							   WHERE TENANT_KEY = 900905 AND SUB_GROUP_NAME = 'BRIGHT_PATTERN_INVOICING' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = 'D6323A'	-- WSOL DANGER RED

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--========================================================================
--SET CUSTOMER NAME:
--========================================================================
DECLARE
 @CUSTOMER_NAME	VARCHAR(150)

SET @CUSTOMER_NAME = (SELECT C.FF_TEAM
						FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING	C
				  INNER JOIN DATE_TIME									DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
					   WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
					     AND (@CUSTOMER_ID	  IN (',0,',',,') OR CHARINDEX(',' + RTRIM(C.TENANT_KEY) + ',',@CUSTOMER_ID) > 0)
					GROUP BY C.FF_TEAM
					 )	
--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1			AS MSG1
,@BG_COLOR		AS BG_COLOR
,@CUSTOMER_NAME AS CUSTOMER_NAME
,@CUSTOMER_ID AS CUSTOMER_ID

--FROM #IMPORTS_WD_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_BRIGHT_PATTERN_IMPORT_STATUS_MISSING_DATA]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_BRIGHT_PATTERN_IMPORT_STATUS_MISSING_DATA]
 @DATE_BEG			DATETIME
,@DATE_END			DATETIME
,@PSW				VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE			VARCHAR(3)
,@CUSTOMER_ID		VARCHAR(10)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_BRIGHT_PATTERN_IMPORT_STATUS_MISSING_DATA] '10/16/2017','10/31/2017','','B','177'

--==============================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==============================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME

IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE 
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--========================================================================
--SET CUSTOMER ID PARAMETER VALUE
--========================================================================
SET @CUSTOMER_ID	= ',' + LTRIM(RTRIM(@CUSTOMER_ID)) + ','

--========================================================================
--CREATE TMP TABLE:
--========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_BRIGHT_PATTERN_IMPORT_STATUS_MISSING_DATA') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_BRIGHT_PATTERN_IMPORT_STATUS_MISSING_DATA
END
CREATE TABLE #IMPORTS_BRIGHT_PATTERN_IMPORT_STATUS_MISSING_DATA
(FILEDATETIME			VARCHAR(20)
,FTP_FILE_NAME			VARCHAR(100)
,CST_ROW_CREATED_TIME	DATETIME
,RCD_CNT				INT
,UNKNOWN_TIME			DECIMAL(10,2)
)

--========================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================
    INSERT INTO #IMPORTS_BRIGHT_PATTERN_IMPORT_STATUS_MISSING_DATA
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													--AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												--AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')															--AS RCD_CNT
	,ISNULL(UA.UNKNOWN_TIME,0.00)													--AS UNKNOWN_TIME
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		,SUM(C.UNKNOWN_TIME) / 60.00							AS UNKNOWN_TIME
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING	C

		INNER JOIN      DATE_TIME									DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
		  AND (@CUSTOMER_ID	  IN (',0,',',,') OR CHARINDEX(',' + RTRIM(C.TENANT_KEY) + ',',@CUSTOMER_ID) > 0)
		  
		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT
,UNKNOWN_TIME
,'White' AS BG_COLOR

FROM #IMPORTS_BRIGHT_PATTERN_IMPORT_STATUS_MISSING_DATA

ORDER BY
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT
,UNKNOWN_TIME 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_BRIGHT_PATTERN_INVOICING_IMPORT]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_BRIGHT_PATTERN_INVOICING_IMPORT]
AS
SET NOCOUNT ON  

--====================================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY = 900905  -- BRIGHT PATTERN
--====================================================
DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND
WHERE TENANT_KEY		= @TENANT_KEY
  AND SUB_GROUP_NAME	= 'BRIGHT_PATTERN_INVOICING'
  --  SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 900905
--=============================================================================

--=============================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = DBO.GETDATE()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--=============================================================================

--SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1 ORDER BY SEQNO
--SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD

--=============================================================================
-- CORRECT ERROR IN AGENT NAME
--=============================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1 SET
 F3 = 'Geri'
WHERE F2 = 'gstephensaca'
  AND F3 = 'Shameka'
  AND F5 = 'Asurion Agents'

--=============================================================================
-- UPDATE LOGIN ID FOR RESOURCE AGENTS MAKING OB VM CALLS
--=============================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1 SET
 F2 = CASE WHEN F2 = 'khouserinr2'	THEN 'khouserinr'
		   WHEN F2 = 'aesquedainr2'	THEN 'aesquedainr'
		   ELSE F2 END
,F3 = CASE WHEN F3 = 'Katelyn2'		THEN 'Katelyn'
		   WHEN F3 = 'Anna2'		THEN 'Anna'
		   ELSE F3 END

--=============================================================================
-- CORRECT ERROR IN LOGIN ID
--=============================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1 SET
 F2 = CASE WHEN ( F2 = 'mcgowanaca'			AND F4 = 'Mcgowan_ACA' )		THEN 'amcgowanaca'
		   WHEN ( F2 = 'vobbmitchellaca'	AND F4 = 'CobbMitchell_ACA' )	THEN 'vcobbmitchellaca'
		   WHEN ( F2 = 'lmehtaaca'			AND F4 = 'Mehta_ACA' )			THEN 'amehtaaca'
		   ELSE F2 END

--=============================================================================
--CLEANUP WORK (_1) TABLE:
--HANDLE Blank LoginID (F2):
--=============================================================================
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_TIME
,FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DURATION
,FF_DETAIL
,FF_SERVICE
,FF_MEDIA_TYPE
,FF_GLOBAL_ID
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,PARENT_SEQNO
)
SELECT
 'AGT'					--BAD_IMPORTS_CODE			-- 'Blank LoginID'
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME	--WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.F9
,W1.F10
,W1.F11
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,W1.EVENT_END_TIME
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,NULL	-- PARENT_SEQNO
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1  W1
WHERE LTRIM(RTRIM(ISNULL(W1.F2,''))) IN ('')
--========================================================================
--DELETE WHERE Blank LoginID (F2):
--========================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1
WHERE LTRIM(RTRIM(ISNULL(F2,''))) IN ('')

--========================================================================
--HANDLE ZERO Durations:
--========================================================================
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_TIME
,FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DURATION
,FF_DETAIL
,FF_SERVICE
,FF_MEDIA_TYPE
,FF_GLOBAL_ID
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,PARENT_SEQNO
)
SELECT
 'ZER'					--BAD_IMPORTS_CODE			-- 'ZER'o Duration
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.F9
,W1.F10
,W1.F11
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,W1.EVENT_END_TIME
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,NULL	-- PARENT_SEQNO
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1  W1
WHERE LTRIM(RTRIM(ISNULL(W1.F7,''))) = '00:00:00'
--========================================================================
--DELETE ZERO DURATION RECORDS FROM WORK TABLE
--========================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1  
WHERE LTRIM(RTRIM(ISNULL(F7,''))) = '00:00:00'


--SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1 ORDER BY SEQNO
--SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
--========================================================================
--HANDLE NR-LogOut States:
--========================================================================
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_TIME
,FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DURATION
,FF_DETAIL
,FF_SERVICE
,FF_MEDIA_TYPE
,FF_GLOBAL_ID
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,PARENT_SEQNO
)
SELECT
 'LOS'					--BAD_IMPORTS_CODE			-- 'L'og'O'ut 'S'tate
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.F9
,W1.F10
,W1.F11
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,W1.EVENT_END_TIME
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,NULL	-- PARENT_SEQNO
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1  W1
WHERE ( LTRIM(RTRIM(ISNULL(W1.F6,''))) = 'NR' AND LTRIM(RTRIM(ISNULL(W1.F8,''))) = 'Logout' )
--========================================================================
--DELETE NR-Logout RECORDS FROM WORK TABLE
--========================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1
WHERE ( LTRIM(RTRIM(ISNULL(F6,''))) = 'NR' AND LTRIM(RTRIM(ISNULL(F8,''))) = 'Logout' )


--SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1 ORDER BY SEQNO
--SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
--========================================================================
--HANDLE Administrator and Client Records:
--========================================================================
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_TIME
,FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DURATION
,FF_DETAIL
,FF_SERVICE
,FF_MEDIA_TYPE
,FF_GLOBAL_ID
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,PARENT_SEQNO
)
SELECT
 'ADM'					--BAD_IMPORTS_CODE			-- 'ADM'inistrator Record
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.F9
,W1.F10
,W1.F11
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,W1.EVENT_END_TIME
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,NULL	-- PARENT_SEQNO
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1  W1
WHERE LTRIM(RTRIM(ISNULL(W1.F5,''))) IN ('Administrators','i9 Client Access')
--========================================================================
--DELETE ADMINISTRATOR AND CLIENT RECORDS FROM WORK TABLE
--========================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1
WHERE LTRIM(RTRIM(ISNULL(F5,''))) IN ('Administrators','i9 Client Access')


--========================================================================
--HANDLE CUSTOMER CALLBACK CHAT RECORDS (i9 Sports):
--========================================================================
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_TIME
,FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DURATION
,FF_DETAIL
,FF_SERVICE
,FF_MEDIA_TYPE
,FF_GLOBAL_ID
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,PARENT_SEQNO
)
SELECT
 'CHT'					--BAD_IMPORTS_CODE			-- 'CHaT' Record
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.F9
,W1.F10
,W1.F11
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,W1.EVENT_END_TIME
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,NULL	-- PARENT_SEQNO
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1  W1
WHERE LTRIM(RTRIM(ISNULL(W1.F5	,''))) = 'i9 Sports Agents'
  AND LTRIM(RTRIM(ISNULL(W1.F10	,''))) = 'CHAT'
  AND LTRIM(RTRIM(ISNULL(W1.F9	,''))) = 'i9 Sports - Customer Callbacks'
--========================================================================
--DELETE CUSTOMER CALLBACK CHAT RECORDS (i9 SPORTS) FROM WORK TABLE
--========================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1
WHERE LTRIM(RTRIM(ISNULL(F5	,''))) = 'i9 Sports Agents'
  AND LTRIM(RTRIM(ISNULL(F10,''))) = 'CHAT'
  AND LTRIM(RTRIM(ISNULL(F9	,''))) = 'i9 Sports - Customer Callbacks'


--===========================================================================================================
--HANDLE DUPLICATES:
--===========================================================================================================
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_TIME
,FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DURATION
,FF_DETAIL
,FF_SERVICE
,FF_MEDIA_TYPE
,FF_GLOBAL_ID
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,PARENT_SEQNO
)
SELECT
 'DUP'					--BAD_IMPORTS_CODE		--'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME	--WS_ROW_CREATED_TIME
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.F9
,W1.F10
,W1.F11
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,W1.EVENT_END_TIME
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,NULL	-- PARENT_SEQNO
FROM
(	SELECT
	 F1	 -- FF_TIME
	,F2	 -- FF_LOGIN_ID
	,F3	 -- FF_AGENT_FIRST_NAME
	,F4	 -- FF_AGENT_LAST_NAME
	,F5  -- FF_TEAM
	,F6  -- FF_ACTIVITY
	,F7  -- FF_DURATION
	,F8  -- FF_DETAIL
	,F9  -- FF_SERVICE
	,F10 -- FF_MEDIA_TYPE
	,F11 -- FF_GLOBAL_ID
	,ROW_NUMBER() over (partition by F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11
                            order by F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, SEQNO DESC) ROWNO
	FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1
) TNM
LEFT JOIN      WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1	W1   ON W1.F1	= TNM.F1	-- FF_TIME
																AND W1.F2	= TNM.F2	-- FF_LOGIN_ID
																AND W1.F3	= TNM.F3	-- FF_AGENT_FIRST_NAME
																AND W1.F4	= TNM.F4	-- FF_AGENT_LAST_NAME
																AND W1.F5	= TNM.F5	-- FF_TEAM
																AND W1.F6	= TNM.F6	-- FF_ACTIVITY
																AND W1.F7	= TNM.F7	-- FF_DURATION
																AND W1.F8	= TNM.F8	-- FF_DETAIL
																AND W1.F9	= TNM.F9	-- FF_SERVICE
																AND W1.F10	= TNM.F10	-- FF_MEDIA_TYPE
																AND W1.F11	= TNM.F11	-- FF_GLOBAL_ID
WHERE TNM.ROWNO > 1
GROUP BY
 W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.F9
,W1.F10
,W1.F11
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,W1.EVENT_END_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME

--===========================================================================================================
--DELETE DUPLICATE RECORDS FROM WORK TABLE:
--===========================================================================================================
DELETE FROM TNM
FROM
(	SELECT
	 F1	-- FF_TIME
	,F2	-- FF_LOGIN_ID
	,F3	-- FF_AGENT_FIRST_NAME
	,F4	-- FF_AGENT_LAST_NAME
	,F5  -- FF_TEAM
	,F6  -- FF_ACTIVITY
	,F7  -- FF_DURATION
	,F8  -- FF_DETAIL
	,F9  -- FF_SERVICE
	,F10 -- FF_MEDIA_TYPE
	,F11 -- FF_GLOBAL_ID
	,ROW_NUMBER() over (partition by F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11
                            order by F1, F2, F3, F4, F5, F6, F7, F8, F9, F10, F11, SEQNO DESC) ROWNO
	FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1
) TNM
WHERE TNM.ROWNO > 1

--SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1 ORDER BY SEQNO
--SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
--=============================================================================
--SET EVENT START TIME AND DURATION TO PREPARE FOR PARSING INTO INTERVALS
--=============================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1 SET
 EVENT_START_TIME		= CAST(F1 AS DATETIME)
,EVENT_DURATION_SECS	= (   CAST(LEFT(F7, 2) AS INT) * 3600
							+ CAST(SUBSTRING(F7, 4, 2) AS INT) * 60
							+ CAST(RIGHT(RTRIM(F7), 2) AS INT)
						  )
--=============================================================================
--SET EVENT END TIME TO USE FOR OUTBOUND AND RONA RECORDS
--=============================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1 SET
 EVENT_END_TIME			= DATEADD(SS, EVENT_DURATION_SECS, EVENT_START_TIME)

--=============================================================================
--COPY WORK TABLE DATA TO PARENT-CHILD WORK TABLE
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_PC

INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_PC
(
 F1
,F2
,F3
,F4
,F5
,F6
,F7
,F8
,F9
,F10
,F11
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,PARENT_SEQNO
)
SELECT
 W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.F9
,W1.F10
,W1.F11
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,W1.EVENT_END_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,NULL	--AS PARENT_SEQNO
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1  W1

--===============================================================================================================================
--OBTAIN PARENT SEQNO FROM WORK (W1) TABLE
--===============================================================================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_PC SET
 PARENT_SEQNO = W1.SEQNO
--SELECT *
FROM  WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_PC	PC
INNER JOIN WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1	W1 ON PC.F2				  =  W1.F2				--LOGIN_ID
														  AND PC.F3				  =  W1.F3				--AGENT_FIRST_NAME
														  AND PC.F4				  =  W1.F4				--AGENT_LAST_NAME
														  AND PC.F5				  =	 W1.F5				--TEAM
														  AND PC.F11			  =  W1.F11				--GLOBAL_ID
														  AND PC.EVENT_START_TIME >= W1.EVENT_START_TIME
														  AND PC.EVENT_START_TIME <  W1.EVENT_END_TIME
														  AND PC.SEQNO			  <> W1.SEQNO

--========================================================================
--CLEAR OUT ORIGINAL WORK TABLE
--========================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1

--===============================================================================================================================
--REMOVE RECORDS THAT HAVE A PARENT RECORD
--==================================================================================
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_TIME
,FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DURATION
,FF_DETAIL
,FF_SERVICE
,FF_MEDIA_TYPE
,FF_GLOBAL_ID
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,PARENT_SEQNO
)
SELECT
 'CHI'					--BAD_IMPORTS_CODE			-- 'CHI'ld Record
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,PC.F1
,PC.F2
,PC.F3
,PC.F4
,PC.F5
,PC.F6
,PC.F7
,PC.F8
,PC.F9
,PC.F10
,PC.F11
,PC.EVENT_START_TIME
,PC.EVENT_DURATION_SECS
,PC.EVENT_END_TIME
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,PC.SEQNO_ADDED_TIME
,PC.SEQNO
,PC.FTP_FILE_NAME
,PC.PARENT_SEQNO
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_PC  PC
WHERE PC.PARENT_SEQNO IS NOT NULL
--==================================================================================
--DELETE RECORDS THAT HAVE A PARENT RECORD FROM PARENT-CHILD WORK TABLE
--==================================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_PC
WHERE PARENT_SEQNO IS NOT NULL

--========================================================================
--INSERT TRUE PARENT RECORDS BACK INTO WORK (W1) TABLE
--========================================================================
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1
(
 F1
,F2
,F3
,F4
,F5
,F6
,F7
,F8
,F9
,F10
,F11
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 PC.F1
,PC.F2
,PC.F3
,PC.F4
,PC.F5
,PC.F6
,PC.F7
,PC.F8
,PC.F9
,PC.F10
,PC.F11
,PC.EVENT_START_TIME
,PC.EVENT_DURATION_SECS
,PC.EVENT_END_TIME
,PC.SEQNO_ADDED_TIME
,PC.SEQNO
,PC.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_PC  PC

--=============================================================================
--COPY WORK TABLE DATA TO CALL COUNT WORK TABLE
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC

INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC
(
 F1
,F2
,F3
,F4
,F5
,F6
,F7
,F8
,F9
,F10
,F11
,[DATETIME]
,INBOUND_CALL
,OUTBOUND_CALL
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.F6
,W1.F7
,W1.F8
,W1.F9
,W1.F10
,W1.F11
,NULL	-- AS DATETIME
,NULL	-- AS INBOUND_CALL
,NULL	-- AS OUTBOUND_CALL
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
--SELECT *
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1  W1
WHERE ISNULL(F11,'') <> ''
  AND ISNULL(F6 ,'') <> 'After Call Work'

-- SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC3 ORDER BY SEQNO
--=============================================================================
-- UPDATE FIELDS IN CALL COUNT WORK TABLE
--=============================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC SET
 [DATETIME]		= CAST(CONVERT(VARCHAR(13), CAST(F1 AS DATETIME), 120) + ':00:00' AS DATETIME)
,INBOUND_CALL	= CASE WHEN ISNULL(F6,'') = 'Inbound'	THEN 1 ELSE 0 END
,OUTBOUND_CALL	= CASE WHEN ISNULL(F6,'') = 'Outbound'	THEN 1 ELSE 0 END

--=============================================================================
--GROUP CALL COUNT DATA BY AGENT, GLOBAL_ID, AND HOUR INTERVAL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC2

INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC2
(
 LOGIN_ID
,AGENT_FIRST_NAME
,AGENT_LAST_NAME
,TEAM
,MEDIA_TYPE
,GLOBAL_ID
,[DATETIME]
,INBOUND_CALLS
,OUTBOUND_CALLS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 CC.F2
,CC.F3
,CC.F4
,CC.F5
,CC.F10
,CC.F11
,CC.[DATETIME]
,MAX(ISNULL(CC.INBOUND_CALL	,0))
,MAX(ISNULL(CC.OUTBOUND_CALL,0))
,MIN(CC.SEQNO_ADDED_TIME)
,MIN(CC.SEQNO)
,CC.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC  CC
GROUP BY
 CC.F2
,CC.F3
,CC.F4
,CC.F5
,CC.F10
,CC.F11
,CC.[DATETIME]
,CC.FTP_FILE_NAME

--=============================================================================
--GROUP CALL COUNT DATA BY AGENT AND HOUR INTERVAL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC3

INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC3
(
 LOGIN_ID
,AGENT_FIRST_NAME
,AGENT_LAST_NAME
,TEAM
,MEDIA_TYPE
,[DATETIME]
,INBOUND_CALLS
,OUTBOUND_CALLS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 CC2.LOGIN_ID
,CC2.AGENT_FIRST_NAME
,CC2.AGENT_LAST_NAME
,CC2.TEAM
,CC2.MEDIA_TYPE
,CC2.[DATETIME]
,SUM(ISNULL(CC2.INBOUND_CALLS	,0))
,SUM(ISNULL(CC2.OUTBOUND_CALLS	,0))
,MIN(CC2.SEQNO_ADDED_TIME)
,MIN(CC2.SEQNO)
,CC2.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC2  CC2
GROUP BY
 CC2.LOGIN_ID
,CC2.AGENT_FIRST_NAME
,CC2.AGENT_LAST_NAME
,CC2.TEAM
,CC2.MEDIA_TYPE
,CC2.[DATETIME]
,CC2.FTP_FILE_NAME

--=====================================================================================================================
-- PARSE DATA RECORDS INTO INTERVALS
--=====================================================================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2

DECLARE
 @F1  VARCHAR(50)
,@F2  VARCHAR(50)
,@F3  VARCHAR(50)
,@F4  VARCHAR(50)
,@F5  VARCHAR(50)
,@F6  VARCHAR(50)
,@F7  VARCHAR(50)
,@F8  VARCHAR(50)
,@F9  VARCHAR(200)
,@F10 VARCHAR(50)
,@F11 VARCHAR(100)
,@F12 DATETIME 
,@F13 DECIMAL(10,2)
,@F14 DATETIME
,@F15 DATETIME
,@F16 INT
,@F17 VARCHAR(100)
,@F18 INT

DECLARE crsT3 CURSOR FOR   
SELECT
 ISNULL(F1 ,'')
,ISNULL(F2 ,'')
,ISNULL(F3 ,'')
,ISNULL(F4 ,'')
,ISNULL(F5 ,'')
,ISNULL(F6 ,'')
,ISNULL(F7 ,'')
,ISNULL(F8 ,'')
,ISNULL(F9 ,'')
,ISNULL(F10,'')
,ISNULL(F11,'')
,ISNULL(EVENT_START_TIME,'')
,ISNULL(EVENT_DURATION_SECS,0.00)
,ISNULL(EVENT_END_TIME,'')
,ISNULL(SEQNO_ADDED_TIME,'')
,ISNULL(SEQNO,'0')
,ISNULL(FTP_FILE_NAME,'')
,3600											--<<----- DETERMINES THE INTERVAL, 900 = 15 MIN, 1800 = 30 MIN, 3600 = 60 MIN
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1

OPEN crsT3
FETCH NEXT FROM crsT3   INTO @F1,@F2,@F3,@F4,@F5,@F6,@F7,@F8,@F9,@F10,@F11,@F12,@F13,@F14,@F15,@F16,@F17,@F18

WHILE @@FETCH_STATUS = 0 BEGIN
-- SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2 ORDER BY SEQNO
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2
(FF_TIME
,FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DURATION
,FF_DETAIL
,FF_SERVICE
,FF_MEDIA_TYPE
,FF_GLOBAL_ID
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 RESULT.FF_TIME
,RESULT.FF_LOGIN_ID
,RESULT.FF_AGENT_FIRST_NAME
,RESULT.FF_AGENT_LAST_NAME
,RESULT.FF_TEAM
,RESULT.FF_ACTIVITY
,RESULT.FF_DURATION
,RESULT.FF_DETAIL
,RESULT.FF_SERVICE
,RESULT.FF_MEDIA_TYPE
,RESULT.FF_GLOBAL_ID
,RESULT.EVENT_START_TIME
,RESULT.EVENT_DURATION_SECS
,RESULT.EVENT_END_TIME
,RESULT.INTERVAL_START_TIME
,RESULT.INTERVAL_END_TIME
,RESULT.EVENT_DURATION_IN_INTERVAL_SECS
,RESULT.SEQNO_ADDED_TIME
,RESULT.SEQNO
,RESULT.FTP_FILE_NAME
FROM TVF_BRIGHT_PATTERN_STATES_TO_INTERVALS(@F1,@F2,@F3,@F4,@F5,@F6,@F7,@F8,@F9,@F10,@F11,@F12,@F13,@F14,@F15,@F16,@F17,@F18) RESULT

FETCH NEXT FROM crsT3   INTO @F1,@F2,@F3,@F4,@F5,@F6,@F7,@F8,@F9,@F10,@F11,@F12,@F13,@F14,@F15,@F16,@F17,@F18
END
CLOSE crsT3
DEALLOCATE crsT3


--=============================================================================
--	REMOVE AFTER-HOURS RECORDS FOR i9 SPORTS
--	HOURS OF OPERATION = M-F 8AM - 9PM CT
--=============================================================================
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_TIME
,FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DURATION
,FF_DETAIL
,FF_SERVICE
,FF_MEDIA_TYPE
,FF_GLOBAL_ID
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,PARENT_SEQNO
)
SELECT
 'OBH'					--BAD_IMPORTS_CODE			-- 'O'utside 'B'usiness 'H'ours
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W2.FF_TIME
,W2.FF_LOGIN_ID
,W2.FF_AGENT_FIRST_NAME
,W2.FF_AGENT_LAST_NAME
,W2.FF_TEAM
,W2.FF_ACTIVITY
,W2.FF_DURATION
,W2.FF_DETAIL
,W2.FF_SERVICE
,W2.FF_MEDIA_TYPE
,W2.FF_GLOBAL_ID
,W2.EVENT_START_TIME
,W2.EVENT_DURATION_SECS
,W2.EVENT_END_TIME
,W2.INTERVAL_START_TIME
,W2.INTERVAL_END_TIME
,W2.EVENT_DURATION_IN_INTERVAL_SECS
,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME
,NULL	-- PARENT_SEQNO
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2  W2
WHERE ISNULL(W2.FF_TEAM,'') = 'i9 Sports Agents'
  AND DATEPART(HH, W2.INTERVAL_START_TIME) IN (22,23,0,1,2,3,4,5,6,7)
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2
WHERE ISNULL(FF_TEAM,'') = 'i9 Sports Agents'
  AND DATEPART(HH, INTERVAL_START_TIME) IN (22,23,0,1,2,3,4,5,6,7)

-- SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2 ORDER BY SEQNO

--=============================================================================
--	REMOVE WEEKEND RECORDS FOR i9 SPORTS
--	HOURS OF OPERATION = M-F 8AM - 9PM CT
--=============================================================================
SET DATEFIRST 1

INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_TIME
,FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DURATION
,FF_DETAIL
,FF_SERVICE
,FF_MEDIA_TYPE
,FF_GLOBAL_ID
,EVENT_START_TIME
,EVENT_DURATION_SECS
,EVENT_END_TIME
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,PARENT_SEQNO
)
SELECT
 'OBH'					--BAD_IMPORTS_CODE			-- 'O'utside 'B'usiness 'H'ours
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W2.FF_TIME
,W2.FF_LOGIN_ID
,W2.FF_AGENT_FIRST_NAME
,W2.FF_AGENT_LAST_NAME
,W2.FF_TEAM
,W2.FF_ACTIVITY
,W2.FF_DURATION
,W2.FF_DETAIL
,W2.FF_SERVICE
,W2.FF_MEDIA_TYPE
,W2.FF_GLOBAL_ID
,W2.EVENT_START_TIME
,W2.EVENT_DURATION_SECS
,W2.EVENT_END_TIME
,W2.INTERVAL_START_TIME
,W2.INTERVAL_END_TIME
,W2.EVENT_DURATION_IN_INTERVAL_SECS
,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME
,NULL	-- PARENT_SEQNO
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2  W2
WHERE ISNULL(W2.FF_TEAM,'') = 'i9 Sports Agents'
  AND DATEPART(WEEKDAY,W2.INTERVAL_START_TIME) IN (6,7) -- SATURDAY AND SUNDAY
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2
WHERE ISNULL(FF_TEAM,'') = 'i9 Sports Agents'
  AND DATEPART(WEEKDAY,INTERVAL_START_TIME) IN (6,7) -- SATURDAY AND SUNDAY

-- SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2 ORDER BY SEQNO
-- SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3 ORDER BY SEQNO
--=============================================================================
-- GROUP DATA BY ACTIVITY/DETAIL AND INTERVAL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3

INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3
(
 FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,FF_ACTIVITY
,FF_DETAIL
,FF_MEDIA_TYPE
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME

,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_TIME

,LOGGED_IN_TIME
,READY_TIME
,INBOUND_VOICE_TIME
,OUTBOUND_VOICE_TIME
,ACW_VOICE_TIME
,NOT_READY_TIME
,NOT_READY_BREAK_TIME
,NOT_READY_NO_ANSWER_TIME
,SUPERVISION_TIME
,UNKNOWN_TIME

,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W2.FF_LOGIN_ID
,W2.FF_AGENT_FIRST_NAME
,W2.FF_AGENT_LAST_NAME
,W2.FF_TEAM
,W2.FF_ACTIVITY
,W2.FF_DETAIL
,W2.FF_MEDIA_TYPE

,SUM(ISNULL(W2.EVENT_DURATION_IN_INTERVAL_SECS	,0.00))
,MAX(W2.SEQNO_ADDED_TIME)
,MIN(W2.SEQNO)
,W2.FTP_FILE_NAME

,NULL						--AS RESOURCE_NAME
,W2.INTERVAL_START_TIME		--AS DATETIME
,NULL						--AS HOUR_INTERVAL
,NULL						--AS EMPLOYEE_ID
,NULL						--AS STD_TENANT_START_TIME

,NULL						--AS LOGGED_IN_TIME
,NULL						--AS READY_TIME
,NULL						--AS INBOUND_VOICE_TIME
,NULL						--AS OUTBOUND_VOICE_TIME
,NULL						--AS ACW_VOICE_TIME
,NULL						--AS NOT_READY_TIME
,NULL						--AS NOT_READY_BREAK_TIME
,NULL						--AS NOT_READY_NO_ANSWER_TIME
,NULL						--AS SUPERVISION_TIME
,NULL						--AS UNKNOWN_TIME

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_2  W2

GROUP BY
 W2.FF_LOGIN_ID
,W2.FF_AGENT_FIRST_NAME
,W2.FF_AGENT_LAST_NAME
,W2.FF_TEAM
,W2.FF_ACTIVITY
,W2.FF_DETAIL
,W2.FF_MEDIA_TYPE
,W2.FTP_FILE_NAME
,W2.INTERVAL_START_TIME

ORDER BY
 MIN(W2.SEQNO)

-- SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3 ORDER BY SEQNO

--==================================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_3) TABLE THAT WEREN'T IN IMPORTED FILE:
--==================================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3 SET
 HOUR_INTERVAL = DATEPART(HH, [DATETIME])
,EMPLOYEE_ID = CASE WHEN CHARINDEX('_', FF_AGENT_LAST_NAME) > 0 THEN
					  LOWER(LEFT(FF_AGENT_FIRST_NAME,1)) + LOWER(LEFT(FF_AGENT_LAST_NAME,CHARINDEX('_',FF_AGENT_LAST_NAME) - 1)) + RIGHT(FF_AGENT_LAST_NAME,3)
					ELSE
					  LOWER(LEFT(FF_AGENT_FIRST_NAME,1)) + LOWER(FF_AGENT_LAST_NAME)
					END
,STD_TENANT_START_TIME = [DATETIME]

UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3 SET
 EMPLOYEE_ID = 'anjohnsonACA'
WHERE FF_AGENT_FIRST_NAME = 'Antoinette'
  AND FF_AGENT_LAST_NAME = 'Johnson_ACA'

UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3 SET
 EMPLOYEE_ID = CASE WHEN (FF_LOGIN_ID = 'crjonesaca'	AND FF_AGENT_FIRST_NAME = 'Crystal'	) THEN 'crjonesACA' 
					WHEN (FF_LOGIN_ID = 'tetayloraca'	AND FF_AGENT_FIRST_NAME = 'Taylor'	) THEN 'tetaylorACA'
					WHEN (FF_LOGIN_ID = 'tsmithaca'		AND FF_AGENT_FIRST_NAME = 'Tamatha'	) THEN 'tsmithACA'
					WHEN (FF_LOGIN_ID = 'vclementiaca'	AND FF_AGENT_FIRST_NAME = 'Vincent'	) THEN 'vclementiACA'
					WHEN (FF_LOGIN_ID = 'ptorresaca'	AND FF_AGENT_FIRST_NAME = 'Paola'	) THEN 'ptorresACA'
					WHEN (FF_LOGIN_ID = 'stsampsonaca'	AND FF_AGENT_FIRST_NAME = 'Stephen'	) THEN 'stsampsonACA'
					WHEN (FF_LOGIN_ID = 'chwilliamsaca' AND FF_AGENT_FIRST_NAME = 'Chezare'	) THEN 'chwilliamsACA'
					WHEN (FF_LOGIN_ID = 'kwentzinb'		AND FF_AGENT_FIRST_NAME = 'Krista'	) THEN 'kwentzINB'
					WHEN (FF_LOGIN_ID = 'bferrignoinb'	AND FF_AGENT_FIRST_NAME = 'Brigitte') THEN 'bferrignoINB'
					WHEN (FF_LOGIN_ID = 'alongoriainb'	AND FF_AGENT_FIRST_NAME = 'Ashley'	) THEN 'alongoriaINB'
					ELSE EMPLOYEE_ID END

--========================================================================================
-- AGENT STATES (ACTIVITY)
--========================================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3 SET
 READY_TIME			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,'')))  = 'Ready'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,SUPERVISION_TIME	= CASE WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,'')))  = 'SUPERVISION'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END

-- AGENT STATES (ACTIVITY) BY MEDIA TYPE

,INBOUND_VOICE_TIME			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,''))) = 'Inbound'
									AND LTRIM(RTRIM(FF_MEDIA_TYPE))	= 'VOICE'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2))
								   ELSE 0.00 END
,OUTBOUND_VOICE_TIME		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,''))) = 'Outbound'
					  				AND LTRIM(RTRIM(FF_MEDIA_TYPE))	= 'VOICE'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								   ELSE 0.00 END
,ACW_VOICE_TIME				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,''))) = 'After Call Work'
					  				AND LTRIM(RTRIM(FF_MEDIA_TYPE))	= 'VOICE'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								   ELSE 0.00 END

-- AGENT STATES (ACTIVITY) BY REASON (DETAIL)

,NOT_READY_TIME				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,''))) = 'NR'
					  				AND LTRIM(RTRIM(FF_DETAIL))	= 'Not ready'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								   ELSE 0.00 END
,NOT_READY_BREAK_TIME		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,''))) = 'NR'
					  				AND LTRIM(RTRIM(FF_DETAIL))	= 'Break'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								   ELSE 0.00 END
,NOT_READY_NO_ANSWER_TIME	= CASE WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,''))) = 'NR'
					  				AND LTRIM(RTRIM(FF_DETAIL))	= 'No answer'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								   ELSE 0.00 END

-- CAPTURE UNKNOWN TIME FOR REPORTING

,UNKNOWN_TIME				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,''))) IN ('Inbound','Outbound','After Call Work')
					  				AND LTRIM(RTRIM(FF_MEDIA_TYPE))	<> 'VOICE'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								   WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,''))) = 'NR'
					  				AND LTRIM(RTRIM(FF_DETAIL))	NOT IN ('Not ready','Break','No answer') THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								   WHEN LTRIM(RTRIM(ISNULL(FF_ACTIVITY,''))) NOT IN ('Inbound','Outbound','After Call Work','NR','Ready','SUPERVISION') THEN
									CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
								   ELSE 0.00 END


--=============================================================================
-- GROUP DATA BY AGENT & INTERVAL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4

INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4
(
 FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_TIME
,INBOUND_CALLS
,OUTBOUND_CALLS
,TOTAL_CALLS
,LOGGED_IN_TIME
,READY_TIME
,INBOUND_VOICE_TIME
,OUTBOUND_VOICE_TIME
,ACW_VOICE_TIME
,NOT_READY_TIME
,NOT_READY_BREAK_TIME
,NOT_READY_NO_ANSWER_TIME
,SUPERVISION_TIME
,UNKNOWN_TIME
,TOTAL_TALK_TIME
,TOTAL_NOT_READY_TIME
,AUTHORIZED_ACW_TIME
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)														
SELECT
 W3.FF_LOGIN_ID											AS FF_LOGIN_ID
,W3.FF_AGENT_FIRST_NAME									AS FF_AGENT_FIRST_NAME
,W3.FF_AGENT_LAST_NAME									AS FF_AGENT_LAST_NAME
,W3.FF_TEAM												AS FF_TEAM
,SUM(ISNULL(W3.EVENT_DURATION_IN_INTERVAL_SECS, 0.00))	AS EVENT_DURATION_IN_INTERVAL_SECS
 
,MAX(W3.SEQNO_ADDED_TIME)								AS SEQNO_ADDED_TIME
,MIN(W3.SEQNO)											AS SEQNO
,MAX(W3.FTP_FILE_NAME)									AS FTP_FILE_NAME

,NULL													AS RESOURCE_NAME
,W3.[DATETIME]											AS [DATETIME]
,W3.HOUR_INTERVAL										AS HOUR_INTERVAL
,W3.EMPLOYEE_ID											AS EMPLOYEE_ID
,W3.[DATETIME]											AS STD_TENANT_START_TIME

,NULL													AS INBOUND_CALLS
,NULL													AS OUTBOUND_CALLS
,NULL													AS TOTAL_CALLS

,NULL													AS LOGGED_IN_TIME
,SUM(ISNULL(W3.READY_TIME						,0.00))	AS READY_TIME
,SUM(ISNULL(W3.INBOUND_VOICE_TIME				,0.00))	AS INBOUND_VOICE_TIME
,SUM(ISNULL(W3.OUTBOUND_VOICE_TIME				,0.00))	AS OUTBOUND_VOICE_TIME
,SUM(ISNULL(W3.ACW_VOICE_TIME					,0.00))	AS ACW_VOICE_TIME
,SUM(ISNULL(W3.NOT_READY_TIME					,0.00))	AS NOT_READY_TIME
,SUM(ISNULL(W3.NOT_READY_BREAK_TIME				,0.00))	AS NOT_READY_BREAK_TIME
,SUM(ISNULL(W3.NOT_READY_NO_ANSWER_TIME			,0.00))	AS NOT_READY_NO_ANSWER_TIME
,SUM(ISNULL(W3.SUPERVISION_TIME					,0.00)) AS SUPERVISION_TIME
,SUM(ISNULL(W3.UNKNOWN_TIME						,0.00))	AS UNKNOWN_TIME

,NULL													AS AUTHORIZED_ACW_TIME
,NULL													AS TOTAL_TALK_TIME
,NULL													AS TOTAL_NOT_READY_TIME
,NULL													AS CPROD
,NULL													AS MINIMUM_GUARANTEE
,NULL													AS AUTHORIZED

,NULL													AS EMAIL
,NULL													AS ID_EXT
,NULL													AS SCHEDULER_ACL_NAME
,NULL													AS STD_TENANT_START_DATE_TIME_KEY
,NULL													AS CAL_DATE
,NULL													AS TENANT_KEY
,NULL													AS AIR_DAY_TYPE
,NULL													AS AIR_ACW_FONT_COLOR
,NULL													AS MIN_GUARANTEE_MINUTES
,NULL													AS MIN_GUARANTEE_TYPE
,NULL													AS AUTHORIZED_TO_INVOICE_TYPE
,NULL													AS HAS_HOLIDAYS
,NULL													AS INCLUDE_IN_CAS
,NULL													AS READY_FOR_XML
,NULL													AS SHOW_ID_EXTS
,NULL													AS INVOICE_ID

,@WS_ROW_CREATED_TIME									AS WS_ROW_CREATED_TIME
,NULL													AS WS_ROW_UPDATED_TIME
-- SELECT *
FROM            WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_3  W3

GROUP BY
 W3.FF_LOGIN_ID
,W3.FF_AGENT_FIRST_NAME
,W3.FF_AGENT_LAST_NAME
,W3.FF_TEAM
,W3.[DATETIME]
,W3.HOUR_INTERVAL
,W3.EMPLOYEE_ID

ORDER BY
 MIN(W3.SEQNO)

-- SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 ORDER BY SEQNO
--========================================================================
--UPDATE ADDITIONAL FIELDS IN WORK (_4) TABLE
--========================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 RESOURCE_NAME			= CASE WHEN CHARINDEX('_',FF_AGENT_LAST_NAME) > 0 THEN
								FF_AGENT_FIRST_NAME + ' ' + LEFT(FF_AGENT_LAST_NAME,CHARINDEX('_',FF_AGENT_LAST_NAME) - 1)
							   ELSE
								FF_AGENT_FIRST_NAME + ' ' + FF_AGENT_LAST_NAME
							   END
,TOTAL_TALK_TIME		= INBOUND_VOICE_TIME + OUTBOUND_VOICE_TIME
,TOTAL_NOT_READY_TIME	= NOT_READY_TIME + NOT_READY_BREAK_TIME + NOT_READY_NO_ANSWER_TIME

UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 LOGGED_IN_TIME			= READY_TIME + TOTAL_TALK_TIME + ACW_VOICE_TIME + TOTAL_NOT_READY_TIME + SUPERVISION_TIME + UNKNOWN_TIME

--========================================================================
--SET DATE_TIME KEY
--========================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
-- SELECT *
FROM            WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4      I
INNER JOIN      DATE_TIME								        DT   ON DT.CAL_DATE = I.[DATETIME]

--============================================================================================
--DETERMINE ID EXTENSION
--============================================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 ID_EXT = CASE WHEN CHARINDEX('_', FF_AGENT_LAST_NAME) = 0 THEN ''
			   WHEN RIGHT(FF_AGENT_LAST_NAME, 3) NOT IN ('ACA','AMA','ARA','ASA','AOA','INS','INR','INB') THEN ''
			   ELSE RIGHT(FF_AGENT_LAST_NAME, 3) END

--===========================================================================================================================================
--POPULATE CALL COUNTS
--===========================================================================================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 INBOUND_CALLS	= ISNULL(CC3.INBOUND_CALLS ,0)
,OUTBOUND_CALLS	= ISNULL(CC3.OUTBOUND_CALLS,0)
--SELECT *
FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4				I
LEFT JOIN	WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_1_CC3	CC3 ON CC3.LOGIN_ID			= I.FF_LOGIN_ID
															   AND CC3.AGENT_FIRST_NAME	= I.FF_AGENT_FIRST_NAME
															   AND CC3.AGENT_LAST_NAME	= I.FF_AGENT_LAST_NAME
															   AND CC3.TEAM				= I.FF_TEAM
															   AND CC3.[DATETIME]		= I.[DATETIME]

UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 TOTAL_CALLS = INBOUND_CALLS + OUTBOUND_CALLS

--===========================================================================================================================================
--SET ANY HOLIDAY FLAGS
--===========================================================================================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 AIR_DAY_TYPE = CASE WHEN IG.HAS_HOLIDAYS = 'Y' AND
						 (    ISNULL(IH.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) OR
						   ( ISNULL(IHA.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) AND ISNULL(IHA.ID_EXT,'') <> '' )
						 )
					  THEN 'H' ELSE 'S' END  --AS AIR_DAY_TYPE  --H=Holiday  --S=Standard
FROM            WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4               I
INNER JOIN      DATE_TIME												 DT   ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY
LEFT JOIN       WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_INVOICE_GROUPS         IG   ON IG.ID_EXT              = I.ID_EXT
LEFT JOIN       WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_INVOICE_HOLIDAYS       IH   ON IH.HOLIDAY_DATE        = CAST(DT.CAL_DATE_STRING AS DATETIME)
LEFT JOIN       WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_INVOICE_HOLIDAYS_ADDL  IHA  ON IHA.HOLIDAY_DATE       = CAST(DT.CAL_DATE_STRING AS DATETIME)
																			 AND IHA.ID_EXT             = I.ID_EXT
																	 
--===========================================================================================================================================
--SET INVOICING FIELDS
--===========================================================================================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 TENANT_KEY						= ISNULL(IG.TENANT_KEY,'')
,SCHEDULER_ACL_NAME				= ISNULL(IG.SCHEDULER_ACL_NAME,'')
,AIR_ACW_FONT_COLOR             = 'Black'

,MIN_GUARANTEE_MINUTES          = ISNULL(IG.MIN_GUARANTEE_MINUTES,0)        --varies between scheduler acl names.
,MIN_GUARANTEE_TYPE             = ISNULL(IG.MIN_GUARANTEE_TYPE,'')          --varies between scheduler acl names.
,AUTHORIZED_TO_INVOICE_TYPE     = ISNULL(IG.AUTHORIZED_TO_INVOICE_TYPE,'')  --varies between scheduler acl names.

,HAS_HOLIDAYS    = IG.HAS_HOLIDAYS
,INCLUDE_IN_CAS  = IG.INCLUDE_IN_CAS
,READY_FOR_XML   = IG.READY_FOR_XML
,SHOW_ID_EXTS    = IG.SHOW_ID_EXTS
--SELECT *
FROM            WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4        I
LEFT JOIN       WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_INVOICE_GROUPS  IG  ON IG.ID_EXT    = I.ID_EXT

--=====================================================================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 INVOICE_ID  = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
--,TENANT_NAME = AIASD.OFFICIAL_ACD_CLIENT_NAME 
FROM          WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4				AIA 
LEFT JOIN     WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_AIA_STATIC_DEFAULTS		AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT

--================================
--DATA INTEGRITY CHECK(S):
--================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''

--Check #1:  ============================================================================================================================================================
	SET @RCD_CNT = ( SELECT COUNT(*) FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 )
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #1 FAILED! - File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #2:  ============================================================================================================================================================
	SET @RCD_CNT = ( SELECT COUNT(*) FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0 )  
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #2 FAILED! - Invalid DATETIME intervals in BRIGHT PATTERN INVOICING IMPORT File.  Import was Cancelled.  Nothing was Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #3:  ============================================================================================================================================================
	SET @RCD_CNT = ( SELECT COUNT(*) FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 WHERE ISNULL(FF_LOGIN_ID,'') = '')  
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #3 FAILED! - Blank AGENT LOGIN ID(s) in BRIGHT PATTERN INVOICING IMPORT File exist(s).  Import was Cancelled.  Nothing was Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #4:  ============================================================================================================================================================
	-- SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 WHERE ISNULL(FF_LOGIN_ID,'') <> LOWER(ISNULL(EMPLOYEE_ID,''))
	SET @RCD_CNT = ( SELECT COUNT(*) 
					 FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 
					 WHERE ISNULL(FF_LOGIN_ID,'') <> LOWER(ISNULL(EMPLOYEE_ID,''))
					   AND RESOURCE_NAME NOT IN ('Rory Slaughter','Christina Gerding','Jeff Innis','Ruth Kowalczyk','Rebecca Hargis','Oscar Galvan','Kathryn Roxo') 
				   )  
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #4 FAILED! - AGENT LOGIN ID(s) in BRIGHT PATTERN INVOICING IMPORT File DO NOT MATCH EMPLOYEE IDs.  Import was Cancelled.  Nothing was Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
	
--======================= ********** INSERT INTO PERMANENT TABLE (IF NO ERRORS FOUND), OR SKIP AND GO TO END (ERRORS FOUND) ********** ==================================
IF @ERR_CNT > 0 BEGIN
INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
(
 TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY				--TENANT_KEY
	,'BRIGHT_PATTERN_INVOICING'	--SUB_GROUP_NAME
	,@MSG1						--ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	--MUST RETURN AT LEAST ONE RECORD TO SSIS
INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY				--TENANT_KEY
	,'BRIGHT_PATTERN_INVOICING'	--SUB_GROUP_NAME
	,''							--ERROR_MSG
END
--=======================================================================================================================================================================

--====================================================================================================
-- POPULATE ADDITIONAL INVOICE FIELDS
--====================================================================================================
---->> AUTHORIZED WRAP (i9 SPORTS)
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 AUTHORIZED_ACW_TIME = CASE WHEN FF_TEAM = 'i9 Sports Agents' THEN	-- i9 SPORTS
							 CASE WHEN (TOTAL_CALLS * 120.00) > ACW_VOICE_TIME THEN
									ACW_VOICE_TIME
								  ELSE
									TOTAL_CALLS * 120.00 END	-- TWO MINUTES OF WRAP ALLOWED PER CALL
						ELSE ACW_VOICE_TIME END	-- ALL OTHER PROGRAMS
 
---->> CPROD
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 CPROD = CASE WHEN MIN_GUARANTEE_TYPE = 'RB'  THEN
				   READY_TIME + TOTAL_TALK_TIME + SUPERVISION_TIME
			  WHEN MIN_GUARANTEE_TYPE = 'RBW' THEN
				   READY_TIME + TOTAL_TALK_TIME + SUPERVISION_TIME + AUTHORIZED_ACW_TIME
			  ELSE 0.00 END
			  
---->> MINIMUM GUARANTEE  
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 MINIMUM_GUARANTEE = CPROD * (MIN_GUARANTEE_MINUTES / 60.00)

---->> AUTHORIZED MINUTES
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 AUTHORIZED = CASE WHEN AUTHORIZED_TO_INVOICE_TYPE = 'B' THEN
					CASE WHEN MINIMUM_GUARANTEE > (TOTAL_TALK_TIME) THEN
							MINIMUM_GUARANTEE
						 ELSE (TOTAL_TALK_TIME) END
					ELSE 0.00 END

--======================================================================================================
-- SET INVOICE FIELDS TO ZERO FOR WSOL ASAs
--======================================================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 AUTHORIZED = 0.00
WHERE RESOURCE_NAME = 'Joann Lopez_AOA'

--======================================================================================================
-- SET AUTHORIZED TO ZERO FOR TIME OUTSIDE BUSINESS HOURS FOR ASURION AGENTS
--======================================================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4 SET
 AUTHORIZED = 0.00
WHERE HOUR_INTERVAL IN (0,1,2,3,4,5)
  AND FF_TEAM = 'Asurion Agents'


-- SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4
--=============================================================================
-- INSERT DATA INTO PERMANENT TABLE (UPDATE)
--=============================================================================
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING SET
-- FF_LOGIN_ID						= W4.FF_LOGIN_ID
-- FF_AGENT_FIRST_NAME				= W4.FF_AGENT_FIRST_NAME
-- FF_AGENT_LAST_NAME				= W4.FF_AGENT_LAST_NAME
-- FF_TEAM							= W4.FF_TEAM
 EVENT_DURATION_IN_INTERVAL_SECS	= W4.EVENT_DURATION_IN_INTERVAL_SECS

,SEQNO_ADDED_TIME					= W4.SEQNO_ADDED_TIME
,SEQNO								= W4.SEQNO
,FTP_FILE_NAME						= W4.FTP_FILE_NAME

,RESOURCE_NAME						= W4.RESOURCE_NAME					
,[DATETIME]							= W4.[DATETIME]
,HOUR_INTERVAL						= W4.HOUR_INTERVAL
,EMPLOYEE_ID						= W4.EMPLOYEE_ID
,STD_TENANT_START_TIME				= W4.STD_TENANT_START_TIME

,INBOUND_CALLS						= W4.INBOUND_CALLS
,OUTBOUND_CALLS						= W4.OUTBOUND_CALLS
,TOTAL_CALLS						= W4.TOTAL_CALLS

,LOGGED_IN_TIME						= W4.LOGGED_IN_TIME
,READY_TIME							= W4.READY_TIME
,INBOUND_VOICE_TIME					= W4.INBOUND_VOICE_TIME
,OUTBOUND_VOICE_TIME				= W4.OUTBOUND_VOICE_TIME
,ACW_VOICE_TIME						= W4.ACW_VOICE_TIME
,NOT_READY_TIME						= W4.NOT_READY_TIME
,NOT_READY_BREAK_TIME				= W4.NOT_READY_BREAK_TIME
,NOT_READY_NO_ANSWER_TIME			= W4.NOT_READY_NO_ANSWER_TIME
,SUPERVISION_TIME					= W4.SUPERVISION_TIME
,UNKNOWN_TIME						= W4.UNKNOWN_TIME
,TOTAL_TALK_TIME					= W4.TOTAL_TALK_TIME
,TOTAL_NOT_READY_TIME				= W4.TOTAL_NOT_READY_TIME
,AUTHORIZED_ACW_TIME				= W4.AUTHORIZED_ACW_TIME
,CPROD								= W4.CPROD
,MINIMUM_GUARANTEE					= W4.MINIMUM_GUARANTEE
,AUTHORIZED							= W4.AUTHORIZED

,EMAIL								= W4.EMAIL
--,ID_EXT							= W4.ID_EXT
,SCHEDULER_ACL_NAME					= W4.SCHEDULER_ACL_NAME
--,STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W4.CAL_DATE
,TENANT_KEY							= W4.TENANT_KEY
,AIR_DAY_TYPE						= W4.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W4.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES				= W4.MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE					= W4.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W4.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W4.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W4.INCLUDE_IN_CAS
,READY_FOR_XML						= W4.READY_FOR_XML
,SHOW_ID_EXTS						= W4.SHOW_ID_EXTS
--,INVOICE_ID						= W4.INVOICE_ID
--,WS_ROW_CREATED_TIME				= NULL
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4		W4
INNER JOIN      WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING		G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
																   AND G.FF_LOGIN_ID					= W4.FF_LOGIN_ID
																   AND G.FF_AGENT_FIRST_NAME			= W4.FF_AGENT_FIRST_NAME
																   AND G.FF_AGENT_LAST_NAME				= W4.FF_AGENT_LAST_NAME
																   AND G.FF_TEAM						= W4.FF_TEAM
																   AND G.ID_EXT							= W4.ID_EXT
																   AND G.INVOICE_ID						= W4.INVOICE_ID

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_LOGIN_ID						= W4.FF_LOGIN_ID
  AND G.FF_AGENT_FIRST_NAME				= W4.FF_AGENT_FIRST_NAME
  AND G.FF_AGENT_LAST_NAME				= W4.FF_AGENT_LAST_NAME
  AND G.FF_TEAM							= W4.FF_TEAM
  AND G.ID_EXT							= W4.ID_EXT
  AND G.INVOICE_ID						= W4.INVOICE_ID


--==========================================
--INSERT INTO PERMANENT IMPORT TABLE: 
--==========================================
INSERT INTO WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING
(FF_LOGIN_ID
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_TEAM
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_TIME
,INBOUND_CALLS
,OUTBOUND_CALLS
,TOTAL_CALLS
,LOGGED_IN_TIME
,READY_TIME
,INBOUND_VOICE_TIME
,OUTBOUND_VOICE_TIME
,ACW_VOICE_TIME
,NOT_READY_TIME
,NOT_READY_BREAK_TIME
,NOT_READY_NO_ANSWER_TIME
,SUPERVISION_TIME
,UNKNOWN_TIME
,TOTAL_TALK_TIME
,TOTAL_NOT_READY_TIME
,AUTHORIZED_ACW_TIME
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W4.FF_LOGIN_ID
,W4.FF_AGENT_FIRST_NAME
,W4.FF_AGENT_LAST_NAME
,W4.FF_TEAM
,W4.EVENT_DURATION_IN_INTERVAL_SECS
,W4.SEQNO_ADDED_TIME
,W4.SEQNO
,W4.FTP_FILE_NAME
,W4.RESOURCE_NAME
,W4.[DATETIME]
,W4.HOUR_INTERVAL
,W4.EMPLOYEE_ID
,W4.STD_TENANT_START_TIME
,W4.INBOUND_CALLS
,W4.OUTBOUND_CALLS
,W4.TOTAL_CALLS
,W4.LOGGED_IN_TIME
,W4.READY_TIME
,W4.INBOUND_VOICE_TIME
,W4.OUTBOUND_VOICE_TIME
,W4.ACW_VOICE_TIME
,W4.NOT_READY_TIME
,W4.NOT_READY_BREAK_TIME
,W4.NOT_READY_NO_ANSWER_TIME
,W4.SUPERVISION_TIME
,W4.UNKNOWN_TIME
,W4.TOTAL_TALK_TIME
,W4.TOTAL_NOT_READY_TIME
,W4.AUTHORIZED_ACW_TIME
,W4.CPROD
,W4.MINIMUM_GUARANTEE
,W4.AUTHORIZED
,W4.EMAIL
,W4.ID_EXT
,W4.SCHEDULER_ACL_NAME
,W4.STD_TENANT_START_DATE_TIME_KEY
,W4.CAL_DATE
,W4.TENANT_KEY
,W4.AIR_DAY_TYPE
,W4.AIR_ACW_FONT_COLOR
,W4.MIN_GUARANTEE_MINUTES
,W4.MIN_GUARANTEE_TYPE
,W4.AUTHORIZED_TO_INVOICE_TYPE
,W4.HAS_HOLIDAYS
,W4.INCLUDE_IN_CAS
,W4.READY_FOR_XML
,W4.SHOW_ID_EXTS
,W4.INVOICE_ID

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4		W4

LEFT JOIN       WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING		G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
																   AND G.FF_LOGIN_ID					= W4.FF_LOGIN_ID
																   AND G.FF_AGENT_FIRST_NAME			= W4.FF_AGENT_FIRST_NAME
																   AND G.FF_AGENT_LAST_NAME				= W4.FF_AGENT_LAST_NAME
																   AND G.FF_TEAM						= W4.FF_TEAM
																   AND G.ID_EXT							= W4.ID_EXT
																   AND G.INVOICE_ID						= W4.INVOICE_ID
														 
WHERE ( G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W4.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( G.FF_LOGIN_ID						IS NULL AND ISNULL(W4.FF_LOGIN_ID			,'') <> '' )
  AND ( G.FF_AGENT_FIRST_NAME				IS NULL AND ISNULL(W4.FF_AGENT_FIRST_NAME	,'') <> '' )
  AND ( G.FF_AGENT_LAST_NAME				IS NULL AND ISNULL(W4.FF_AGENT_LAST_NAME	,'') <> '' )
  AND ( G.FF_TEAM							IS NULL AND ISNULL(W4.FF_TEAM				,'') <> '' )
--  AND ( G.ID_EXT							IS NULL AND ISNULL(W4.ID_EXT				,'') <> '' )
--  AND ( G.INVOICE_ID						IS NULL AND ISNULL(W4.INVOICE_ID			,'') <> '' )

-- SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING

--===============================================
SET DATEFIRST 1  -- = Monday  
--===============================================
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME

SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN([DATETIME]) FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4))  
--===============================================================================================================================
IF OBJECT_ID('TEMPDB..#DT_EASY_WEEKS') IS NOT NULL BEGIN
   DROP TABLE #DT_EASY_WEEKS
END
CREATE TABLE #DT_EASY_WEEKS
(CAL_DATE_STRING      VARCHAR(10)
,CAL_WEEK_START_DATE  DATETIME
,CAL_WEEK_END_DATE    DATETIME
,PAY_CYCLE_CLOSURE_DATE DATETIME
)
INSERT INTO #DT_EASY_WEEKS
SELECT
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
FROM DATE_TIME DT
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
GROUP BY 
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE 
--===========================
UPDATE #DT_EASY_WEEKS SET CAL_WEEK_END_DATE = DATEADD(DD,6,CAL_WEEK_START_DATE)
UPDATE #DT_EASY_WEEKS SET
 PAY_CYCLE_CLOSURE_DATE = (CASE WHEN (DATEDIFF(DD,CAST('04/27/2014' AS DATETIME),CAL_WEEK_END_DATE) % 14) = 0 THEN
									CAL_WEEK_END_DATE
								ELSE
									DATEADD(DD,7,CAL_WEEK_END_DATE)
								END)


--====================================================================================================================================
--CREATE TEMP TABLE TO HOLD NORMALIZED DATA STRUCTURE
--====================================================================================================================================
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA
END
CREATE TABLE #WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](50) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[PAY_GROUP] [int] NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.EMPLOYEE_ID  --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING     --[DATE]             
,DT.LABEL_HH24 + ':00'  --HOD_INTERVAL

,ISNULL(AIA.LOGGED_IN_TIME		,0)	--AU_DK_LOGGED_IN_DURATION				--DATA IS IN SECONDS
,ISNULL(AIA.READY_TIME			,0)	--AU_DK_AVAILABLE_DURATION				--DATA IS IN SECONDS

,ISNULL(AIA.TOTAL_TALK_TIME		,0)	--AU_DK_TALK_DURATION					--DATA IS IN SECONDS
,ISNULL(AIA.INBOUND_VOICE_TIME	,0)	--AU_DK_IB_TALK_DURATION				--DATA IS IN SECONDS
,ISNULL(AIA.OUTBOUND_VOICE_TIME	,0)	--AU_DK_OB_TALK_DURATION				--DATA IS IN SECONDS

,ISNULL(AIA.AUTHORIZED_ACW_TIME	,0)	--AU_DK_CONVENTIONAL_ACW				--DATA IS IN SECONDS
,ISNULL(AIA.TOTAL_NOT_READY_TIME,0)	--AU_DK_NR_DURATION						--DATA IS IN SECONDS
,0									--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0									--AU_DK_ADJUSTED_NR_DURATION
,ISNULL(AIA.CPROD, 0)				--AU_DK_TOTAL_PRODUCTIVE_DURATION		--DATA IS IN SECONDS
,ISNULL(AIA.CPROD, 0)				--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS	--DATA IS IN SECONDS

,0  --AU_DK_XFER_COUNT
,0  --AU_DK_HOLD_COUNT
,0  --AU_DK_CONFERENCE_COUNT
,0  --AU_DK_CONSULT_COUNT
,0  --AU_DK_PUP_COUNT

,0  --AU_DK_OFFERED_COUNT
,0  --AU_DK_HANDLED_COUNT
,AIA.INBOUND_CALLS					--AU_DK_IB_HANDLE_COUNT
,AIA.OUTBOUND_CALLS					--AU_DK_OB_HANDLE_COUNT
						
,0  --AU_DK_RONA_COUNT
,0  --AU_DK_AWR_COUNT

,ISNULL(AIA.MINIMUM_GUARANTEE	, 0)	--MINIMUM_GUARANTEE			--DATA IS IN SECONDS
,ISNULL(AIA.AUTHORIZED			, 0)	--AUTHORIZED_TO_INVOICE		--DATA IS IN SECONDS

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_MINUTES
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID		--CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID 
,AIA.RESOURCE_NAME
,0					--AIRITKDUR
,0					--AIRIACDUR
,0					--PAY_GROUP
,DBO.GETDATE()		--[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL				--[WS_ROW_UPDATED_TIME] [datetime] NULL
	
--SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_AIA_STATIC_DEFAULTS ORDER BY OFFICIAL_WSOL_CLIENT_ID
--SELECT TOP 1000 *
FROM            WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING_4            AIA
 
--ONLY WANT TO INCLUDE VALID ID_EXT IN _AIA TABLE -- ID EXTS THAT HAVE MINIMUM GUARANTEE AND AUTHORIZED MINUTE FORMULAS AND STATIC DEFAULTS SET UP
INNER JOIN      WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_INVOICE_GROUPS      CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME											  DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS										  DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')
--AND (ISNULL(AIA.PAY_GROUP,'') = 0)  -- THIS CAN BE SET TO ONLY INCLUDE CERTAIN PAY GROUPS IN THE XML PUSH

--  INNER JOIN TO AIASD TABLE INSURES ONLY RECORDS WITH VALID ID EXTENSIONS ARE PUT IN _AIA TABLE/XML REPORT/FILE...
--  SAME FOR INVOICE_GROUPS...

--  SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING WHERE ISNULL(ID_EXT,'') = ''


--===================================================================
--UPDATE YZ_TB_...UV_ANT_AIA TABLE:
--===================================================================
--SELECT TOP 100 * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA
UPDATE WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA SET
 [PLATFORM]							= W1.[PLATFORM]
,[STATUS]							= W1.[STATUS]
--,INVOICE_MAP_KEY					= W1.INVOICE_MAP_KEY
,FIELD_NAME							= W1.FIELD_NAME
,SCHEDULER_PROJECT_ID				= W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME					= W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION					= W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID			= W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME			= W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID				= W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME			= W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID			= W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID	= W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID		= W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY			= W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID					= W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID					= W1.HOLIDAY_INVOICE_ID
,HOLIDAY							= W1.HOLIDAY
,FILE_FORMAT_OF_PUSH				= W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID		= W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL							= W1.NEW_ACL
,CURRENT_CATS						= W1.CURRENT_CATS
,CATS_ID							= W1.CATS_ID
,PATS_ID							= W1.PATS_ID
,SMART_ELIGIBLE						= W1.SMART_ELIGIBLE
,SMART_TIER_1						= W1.SMART_TIER_1
,SMART_TIER_2						= W1.SMART_TIER_2
,SMART_TIER_3						= W1.SMART_TIER_3
,INTERVAL							= W1.INTERVAL
,[DATE]								= W1.[DATE]
,HOD_INTERVAL						= W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION			= W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION			= W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION				= W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION				= W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION				= W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW				= W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION					= W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT					= W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT					= W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT				= W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT				= W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT					= W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT				= W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT				= W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT				= W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT				= W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT					= W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT					= W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE					= W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE				= W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE					= W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE				= W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:

,FTP_FILE_NAME						= W1.FTP_FILE_NAME
,EMAIL								= W1.EMAIL
--,STD_TENANT_START_DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W1.CAL_DATE
,TENANT_KEY							= W1.TENANT_KEY
,AIR_DAY_TYPE						= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE					= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE					= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W1.INCLUDE_IN_CAS
,READY_FOR_XML						= W1.READY_FOR_XML
,SHOW_ID_EXTS						= W1.SHOW_ID_EXTS
,INVOICE_ID							= W1.INVOICE_ID
,RESOURCE_NAME						= W1.RESOURCE_NAME

,PAY_GROUP							= W1.PAY_GROUP
,AIRITKDUR							= W1.AIRITKDUR
,AIRIACDUR							= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

FROM            #WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA   W1

INNER JOIN      WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
																AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
																AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )


--================================================
--INSERT TMP TABLE FIELDS INTO YZ_TB_... TABLE:
--================================================
INSERT INTO [WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.PAY_GROUP
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA   AIA
LEFT JOIN       WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
																AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
																AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )


--===============================================
EARLY_EXIT:
--===============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_DAILY_SCHEDULE_IMPORT]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_DAILY_SCHEDULE_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_DAILY_SCHEDULE_IMPORT]

--  SELECT * FROM WSOL_TB_IMPORTS_DAILY_SCHEDULE_1

--  Durations in imported file are in hours.

--=============================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY =       900555  --WSOL
--=============================================
DELETE FROM YZ_TB_ERRORS_FOUND 
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = 'WSOL_SCHEDULE'    --  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900555
--=============================================

--====================================================================================================
-- USING @WS_ROW_CREATED_TIME FOR ALL INSERTS WILL ALLOW ME TO DELETE SPECIFIC INSERT PROCESSES/FILES.
-- IN CASE OF EMERGENCY, CRACK GLASS.
--====================================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.getdate()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===================================================================================

--==============================================================
-- DETERMINE DATETIME OF DATA AND UPDATE WORK TABLE
--==============================================================
IF OBJECT_ID('TEMPDB..#SCHEDULE_GET_DATE') IS NOT NULL BEGIN
   DROP TABLE #SCHEDULE_GET_DATE
END
CREATE TABLE #SCHEDULE_GET_DATE
(SCHEDULE_DATE		  DATETIME
,FTP_FILE_NAME		  VARCHAR(100)
)
INSERT INTO #SCHEDULE_GET_DATE
SELECT
 CAST(W1.FF_OFFICIAL_ACL_NAME AS DATETIME)
,W1.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_DAILY_SCHEDULE_1 W1
WHERE ISNULL(W1.FF_ROLE,'') = ''
  AND ISNULL(W1.FF_AGENT_NAME,'') <> 'Totals'

UPDATE WSOL_TB_IMPORTS_DAILY_SCHEDULE_1 SET
 [DATETIME] =  SGT.SCHEDULE_DATE
FROM WSOL_TB_IMPORTS_DAILY_SCHEDULE_1 I
INNER JOIN #SCHEDULE_GET_DATE SGT ON SGT.FTP_FILE_NAME = I.FTP_FILE_NAME


--=====================================================
-- CAPTURE DATE BEFORE DELETING NON-ESSENTIAL RECORDS
--=====================================================
--DECLARE @FF_DATE DATETIME
--SET @FF_DATE =
--  CAST ((SELECT FF_OFFICIAL_ACL_NAME
--  FROM WSOL_TB_IMPORTS_DAILY_SCHEDULE_1
--  WHERE ISNULL(FF_ROLE,'') = ''
--  AND ISNULL(FF_AGENT_NAME,'') <> 'Totals') AS DATETIME)
--PRINT @FF_DATE

--=================================================================================================
-- HANDLE COLUMN HEADER AND JUNK RECORDS:
--=================================================================================================
INSERT INTO WSOL_TB_IMPORTS_DAILY_SCHEDULE_BAD
(
BAD_IMPORTS_NO,BAD_IMPORTS_FILE_TYPE,WS_ROW_CREATED_TIME,FF_OFFICIAL_ACL_NAME,FF_ROLE,FF_FIELD_MAP_ID,FF_EMAIL,FF_AGENT_NAME,FF_SCHEDULED_HOURS
,FF_WORKED_HOURS,FF_CANCELLED_HOURS,FF_CANCELLED_PERCENT,SEQNO_ADDED_TIME,SEQNO,FTP_FILE_NAME,[DATETIME],STD_TENANT_START_DATE_TIME_KEY,TENANT_NAME
,OFFICIAL_ACL_NAME,[ROLE],FIELD_MAP_ID,EMAIL,AGENT_NAME,SCHEDULED_HOURS,SCHEDULED_AFTER_CANCELLATION_HOURS,CANCELLED_HOURS,CANCELLED_PERCENT
)
SELECT
 24                     --BAD_IMPORTS_NO  --'Junk Record'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE.
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_OFFICIAL_ACL_NAME
,W1.FF_ROLE
,W1.FF_FIELD_MAP_ID
,W1.FF_EMAIL
,W1.FF_AGENT_NAME
,W1.FF_SCHEDULED_HOURS
,W1.FF_WORKED_HOURS
,W1.FF_CANCELLED_HOURS
,W1.FF_CANCELLED_PERCENT
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.TENANT_NAME
,W1.OFFICIAL_ACL_NAME
,W1.[ROLE]
,W1.FIELD_MAP_ID
,W1.EMAIL
,W1.AGENT_NAME
,W1.SCHEDULED_HOURS
,W1.SCHEDULED_AFTER_CANCELLATION_HOURS
,W1.CANCELLED_HOURS
,W1.CANCELLED_PERCENT
FROM           WSOL_TB_IMPORTS_DAILY_SCHEDULE_1    W1
WHERE ISNULL(W1.FF_ROLE,'')			IN ('Role','')
  OR  ISNULL(W1.FF_AGENT_NAME,'')	=   'Totals'
  OR  ISNULL(W1.FF_FIELD_MAP_ID,'') =   ''

--=================================================================================================
-- DELETE COLUMN HEADER AND JUNK RECORDS;
--=================================================================================================
DELETE FROM WSOL_TB_IMPORTS_DAILY_SCHEDULE_1
WHERE ISNULL(FF_ROLE,'')			IN ('Role','')
  OR  ISNULL(FF_AGENT_NAME,'')		=   'Totals'
  OR  ISNULL(FF_FIELD_MAP_ID,'')	=   ''
--=================================================================================================

--=================================================================================================
-- HANDLE ACLs NOT USED FOR SCHEDULING:
--=================================================================================================
INSERT INTO WSOL_TB_IMPORTS_DAILY_SCHEDULE_BAD
(
BAD_IMPORTS_NO,BAD_IMPORTS_FILE_TYPE,WS_ROW_CREATED_TIME,FF_OFFICIAL_ACL_NAME,FF_ROLE,FF_FIELD_MAP_ID,FF_EMAIL,FF_AGENT_NAME,FF_SCHEDULED_HOURS
,FF_WORKED_HOURS,FF_CANCELLED_HOURS,FF_CANCELLED_PERCENT,SEQNO_ADDED_TIME,SEQNO,FTP_FILE_NAME,[DATETIME],STD_TENANT_START_DATE_TIME_KEY,TENANT_NAME
,OFFICIAL_ACL_NAME,[ROLE],FIELD_MAP_ID,EMAIL,AGENT_NAME,SCHEDULED_HOURS,SCHEDULED_AFTER_CANCELLATION_HOURS,CANCELLED_HOURS,CANCELLED_PERCENT
)
SELECT
 25                     --BAD_IMPORTS_NO  --'ACL NOT USED FOR SCHEDULING'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE.
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_OFFICIAL_ACL_NAME
,W1.FF_ROLE
,W1.FF_FIELD_MAP_ID
,W1.FF_EMAIL
,W1.FF_AGENT_NAME
,W1.FF_SCHEDULED_HOURS
,W1.FF_WORKED_HOURS
,W1.FF_CANCELLED_HOURS
,W1.FF_CANCELLED_PERCENT
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.TENANT_NAME
,W1.OFFICIAL_ACL_NAME
,W1.[ROLE]
,W1.FIELD_MAP_ID
,W1.EMAIL
,W1.AGENT_NAME
,W1.SCHEDULED_HOURS
,W1.SCHEDULED_AFTER_CANCELLATION_HOURS
,W1.CANCELLED_HOURS
,W1.CANCELLED_PERCENT
FROM           WSOL_TB_IMPORTS_DAILY_SCHEDULE_1    W1
WHERE ISNULL(W1.FF_OFFICIAL_ACL_NAME,'') IN ('APFM AOR VIP','getaroom.com Standard Agents')

--getaroom.com Standard Agents Used as a Master ACL (not for scheduling)

--=================================================================================================
-- DELETE RECORDS FOR ACLs NOT USED FOR SCHEDULING:
--=================================================================================================
DELETE FROM WSOL_TB_IMPORTS_DAILY_SCHEDULE_1
WHERE ISNULL(FF_OFFICIAL_ACL_NAME,'') IN ('APFM AOR VIP','getaroom.com Standard Agents')
--=================================================================================================

--=================================================================================================
-- POPULATE ADDITIONAL FIELDS IN WORK (_1) TABLE THAT WEREN'T IN IMPORTED FILE:
--=================================================================================================
UPDATE WSOL_TB_IMPORTS_DAILY_SCHEDULE_1 SET
-- [DATETIME]							= @FF_DATE
 OFFICIAL_ACL_NAME					= ISNULL(FF_OFFICIAL_ACL_NAME		,'')
,[ROLE]								= ISNULL(FF_ROLE					,'')
,FIELD_MAP_ID						= ISNULL(FF_FIELD_MAP_ID			,'')
,[EMAIL]							= ISNULL(FF_EMAIL					,'')
,AGENT_NAME							= ISNULL(FF_AGENT_NAME				,'')
,SCHEDULED_HOURS					= CAST(ISNULL(FF_SCHEDULED_HOURS	,'0.00') AS DECIMAL(10,2))
,SCHEDULED_AFTER_CANCELLATION_HOURS	= CAST(ISNULL(FF_WORKED_HOURS		,'0.00') AS DECIMAL(10,2))
,CANCELLED_HOURS					= CAST(ISNULL(FF_CANCELLED_HOURS	,'0.00') AS DECIMAL(10,2))
,CANCELLED_PERCENT					= CAST(ISNULL(FF_CANCELLED_PERCENT	,'0.00') AS DECIMAL(10,2))

--=================================================================================================
						
--=================================================================================================
-- POPULATE DATETIME KEY
--=================================================================================================
UPDATE WSOL_TB_IMPORTS_DAILY_SCHEDULE_1 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM            WSOL_TB_IMPORTS_DAILY_SCHEDULE_1	I
INNER JOIN      DATE_TIME							DT   ON DT.CAL_DATE = I.[DATETIME]

--=================================================================================================
-- HANDLE INVALID DATE/TIME RECORDS:
--=================================================================================================
INSERT INTO WSOL_TB_IMPORTS_DAILY_SCHEDULE_BAD
(
BAD_IMPORTS_NO,BAD_IMPORTS_FILE_TYPE,WS_ROW_CREATED_TIME,FF_OFFICIAL_ACL_NAME,FF_ROLE,FF_FIELD_MAP_ID,FF_EMAIL,FF_AGENT_NAME,FF_SCHEDULED_HOURS
,FF_WORKED_HOURS,FF_CANCELLED_HOURS,FF_CANCELLED_PERCENT,SEQNO_ADDED_TIME,SEQNO,FTP_FILE_NAME,[DATETIME],STD_TENANT_START_DATE_TIME_KEY,TENANT_NAME
,OFFICIAL_ACL_NAME,[ROLE],FIELD_MAP_ID,EMAIL,AGENT_NAME,SCHEDULED_HOURS,SCHEDULED_AFTER_CANCELLATION_HOURS,CANCELLED_HOURS,CANCELLED_PERCENT
)
SELECT
 26                     --BAD_IMPORTS_NO  --'Invalid Date/Time'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE,  'ACE' FILE.
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_OFFICIAL_ACL_NAME
,W1.FF_ROLE
,W1.FF_FIELD_MAP_ID
,W1.FF_EMAIL
,W1.FF_AGENT_NAME
,W1.FF_SCHEDULED_HOURS
,W1.FF_WORKED_HOURS
,W1.FF_CANCELLED_HOURS
,W1.FF_CANCELLED_PERCENT
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.TENANT_NAME
,W1.OFFICIAL_ACL_NAME
,W1.[ROLE]
,W1.FIELD_MAP_ID
,W1.EMAIL
,W1.AGENT_NAME
,W1.SCHEDULED_HOURS
,W1.SCHEDULED_AFTER_CANCELLATION_HOURS
,W1.CANCELLED_HOURS
,W1.CANCELLED_PERCENT
FROM           WSOL_TB_IMPORTS_DAILY_SCHEDULE_1    W1
WHERE ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) = 0
--=================================================================================================
-- DELETE INVALID DATE/TIME RECORDS;
--=================================================================================================
DELETE FROM WSOL_TB_IMPORTS_DAILY_SCHEDULE_1
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--=================================================================================================

--SELECT * FROM WSOL_TB_IMPORTS_DAILY_SCHEDULE_1

--=================================================================================================
-- REPLACE ANY "SCHEDULE ONLY" ACL NAMES
--=================================================================================================
UPDATE WSOL_TB_IMPORTS_DAILY_SCHEDULE_1 SET
 OFFICIAL_ACL_NAME = CASE WHEN FF_OFFICIAL_ACL_NAME = 'APFM VIP Agents' THEN
							CASE WHEN FF_ROLE = 'Resource' THEN
								   'APFM Resource Agents'
								 ELSE 'APFM Standard Agents' END
						  WHEN FF_OFFICIAL_ACL_NAME = 'Sabre VGR Standard Agents' THEN
							CASE WHEN FF_ROLE = 'Resource' THEN
								   'Sabre Resource Agents'
								 ELSE 'Sabre VGR Standard Agents' END
						  WHEN FF_OFFICIAL_ACL_NAME = 'getaroom.com VIP Sales Agents' THEN 'getaroom.com Sales Agents'
						  ELSE FF_OFFICIAL_ACL_NAME END

--=================================================================================================
-- POPULATE TENANT NAME
--=================================================================================================
UPDATE WSOL_TB_IMPORTS_DAILY_SCHEDULE_1 SET
 TENANT_NAME = CASE WHEN OFFICIAL_ACL_NAME LIKE 'Academy%'		THEN 'ASO'
					WHEN OFFICIAL_ACL_NAME LIKE 'APFM%'			THEN 'APFM'
					WHEN OFFICIAL_ACL_NAME LIKE 'Asurion%'		THEN 'Asurion'
					WHEN OFFICIAL_ACL_NAME LIKE 'Datalot%'		THEN 'Datalot'
					WHEN OFFICIAL_ACL_NAME LIKE 'Sabre%'		THEN 'Sabre'
					WHEN OFFICIAL_ACL_NAME LIKE 'getaroom.com%'	THEN 'GAR'
					ELSE '' END

--=================================================================================================
-- HANDLE DUPLICATES:
--=================================================================================================
INSERT INTO WSOL_TB_IMPORTS_DAILY_SCHEDULE_BAD(
BAD_IMPORTS_NO,BAD_IMPORTS_FILE_TYPE,WS_ROW_CREATED_TIME,FF_OFFICIAL_ACL_NAME,FF_ROLE,FF_FIELD_MAP_ID,FF_EMAIL,FF_AGENT_NAME,FF_SCHEDULED_HOURS
,FF_WORKED_HOURS,FF_CANCELLED_HOURS,FF_CANCELLED_PERCENT,SEQNO_ADDED_TIME,SEQNO,FTP_FILE_NAME,[DATETIME],STD_TENANT_START_DATE_TIME_KEY,TENANT_NAME
,OFFICIAL_ACL_NAME,[ROLE],FIELD_MAP_ID,EMAIL,AGENT_NAME,SCHEDULED_HOURS,SCHEDULED_AFTER_CANCELLATION_HOURS,CANCELLED_HOURS,CANCELLED_PERCENT
)
SELECT
 21                     --BAD_IMPORTS_NO  --'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE,  'ACE' FILE.
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_OFFICIAL_ACL_NAME
,W1.FF_ROLE
,W1.FF_FIELD_MAP_ID
,W1.FF_EMAIL
,W1.FF_AGENT_NAME
,W1.FF_SCHEDULED_HOURS
,W1.FF_WORKED_HOURS
,W1.FF_CANCELLED_HOURS
,W1.FF_CANCELLED_PERCENT
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.TENANT_NAME
,W1.OFFICIAL_ACL_NAME
,W1.[ROLE]
,W1.FIELD_MAP_ID
,W1.EMAIL
,W1.AGENT_NAME
,W1.SCHEDULED_HOURS
,W1.SCHEDULED_AFTER_CANCELLATION_HOURS
,W1.CANCELLED_HOURS
,W1.CANCELLED_PERCENT
FROM
(	SELECT
	 [DATETIME]
	,FF_OFFICIAL_ACL_NAME
	,FF_AGENT_NAME
	,FF_FIELD_MAP_ID
	,ROW_NUMBER() over (partition by [DATETIME], FF_OFFICIAL_ACL_NAME, FF_AGENT_NAME, FF_FIELD_MAP_ID
                            order by [DATETIME], FF_OFFICIAL_ACL_NAME, FF_AGENT_NAME, FF_FIELD_MAP_ID, SCHEDULED_HOURS DESC) ROWNO
	FROM WSOL_TB_IMPORTS_DAILY_SCHEDULE_1
) TNM
LEFT JOIN      WSOL_TB_IMPORTS_DAILY_SCHEDULE_1	W1	ON W1.[DATETIME]			= TNM.[DATETIME]
												   AND W1.FF_OFFICIAL_ACL_NAME	= TNM.FF_OFFICIAL_ACL_NAME
												   AND W1.FF_AGENT_NAME			= TNM.FF_AGENT_NAME
												   AND W1.FF_FIELD_MAP_ID		= TNM.FF_FIELD_MAP_ID
WHERE TNM.ROWNO > 1

--=================================================================================================
-- DELETE DUPLICATES:
--=================================================================================================
DELETE FROM TNM  
FROM
(	SELECT
	 [DATETIME]
	,FF_OFFICIAL_ACL_NAME
	,FF_AGENT_NAME
	,FF_FIELD_MAP_ID
	,ROW_NUMBER() over (partition by [DATETIME], FF_OFFICIAL_ACL_NAME, FF_AGENT_NAME, FF_FIELD_MAP_ID
                            order by [DATETIME], FF_OFFICIAL_ACL_NAME, FF_AGENT_NAME, FF_FIELD_MAP_ID, SCHEDULED_HOURS DESC) ROWNO
	FROM WSOL_TB_IMPORTS_DAILY_SCHEDULE_1
) TNM
WHERE TNM.ROWNO > 1
--=================================================================================================

--=================================================================================================
-- CHECK FOR BAD DATA FOUND IN IMPORT .TXT/.CSV FILES:
--=================================================================================================

--  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900555
--=================================================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''

--Check #1:  =========================================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_DAILY_SCHEDULE_1 )
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + 'ERROR! Daily Scheduled Hours File Import Failed!  Data File Contains Zero Records.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END

--=================================================================================================
-- INSERT DATA INTO PERMANENT TABLE IF NO ERRORS FOUND
--=================================================================================================
IF @ERR_CNT > 0 BEGIN
	-- SSIS READS YZ_TB_ERRORS_FOUND Table WHERE TENANT_KEY = 900555
	-- If record exists, outputs results/error_msg field in an email.
	INSERT INTO YZ_TB_ERRORS_FOUND
	(
	TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'WSOL_SCHEDULE'	--SUB_GROUP_NAME
	,@MSG1				--ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	
	INSERT INTO YZ_TB_ERRORS_FOUND
	(
	TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'WSOL_SCHEDULE'	--SUB_GROUP_NAME
	,''					--ERROR_MSG			-- *** NEVER MAKE THIS @MSG1 !!!  MUST BE SET TO '' ***
END


--===========================================================================================================
-- GROUP DATA BY ACL & AGENT & DATE
--===========================================================================================================
DELETE FROM WSOL_TB_IMPORTS_DAILY_SCHEDULE_2

INSERT INTO WSOL_TB_IMPORTS_DAILY_SCHEDULE_2
(FF_OFFICIAL_ACL_NAME
,FF_ROLE
,FF_FIELD_MAP_ID
,FF_EMAIL
,FF_AGENT_NAME
,FF_SCHEDULED_HOURS
,FF_WORKED_HOURS
,FF_CANCELLED_HOURS
,FF_CANCELLED_PERCENT
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,STD_TENANT_START_DATE_TIME_KEY
,TENANT_NAME
,OFFICIAL_ACL_NAME
,[ROLE]
,FIELD_MAP_ID
,EMAIL
,AGENT_NAME
,SCHEDULED_HOURS
,SCHEDULED_AFTER_CANCELLATION_HOURS
,CANCELLED_HOURS
,CANCELLED_PERCENT
)
SELECT
 MAX(W1.FF_OFFICIAL_ACL_NAME)						AS FF_OFFICIAL_ACL_NAME
,MAX(W1.FF_ROLE)									AS FF_ROLE
,MAX(W1.FF_FIELD_MAP_ID)							AS FF_FIELD_MAP_ID
,MAX(W1.FF_EMAIL)									AS FF_EMAIL
,MAX(W1.FF_AGENT_NAME)								AS FF_AGENT_NAME
,SUM(CAST(W1.FF_SCHEDULED_HOURS AS DECIMAL (10,2)))	AS FF_SCHEDULED_HOURS
,SUM(CAST(W1.FF_WORKED_HOURS	AS DECIMAL (10,2)))	AS FF_WORKED_HOURS
,SUM(CAST(W1.FF_CANCELLED_HOURS	AS DECIMAL (10,2)))	AS FF_CANCELLED_HOURS
,CASE WHEN SUM(CAST(W1.FF_SCHEDULED_HOURS AS DECIMAL (10,2))) = 0.00 THEN 0.00
	  ELSE SUM(CAST(W1.FF_CANCELLED_HOURS AS DECIMAL (10,2))) / SUM(CAST(W1.FF_SCHEDULED_HOURS AS DECIMAL (10,2)))
 END												AS FF_CANCELLED_PERCENT

,MAX(W1.SEQNO_ADDED_TIME)			AS SEQNO_ADDED_TIME
,MIN(W1.SEQNO)						AS SEQNO
,MAX(W1.FTP_FILE_NAME)				AS FTP_FILE_NAME

,MAX(W1.DATETIME)					AS [DATETIME]
,W1.STD_TENANT_START_DATE_TIME_KEY	AS STD_TENANT_START_DATE_TIME_KEY
,W1.TENANT_NAME						AS TENANT_NAME
,W1.OFFICIAL_ACL_NAME				AS OFFICIAL_ACL_NAME
,MAX(W1.ROLE)						AS [ROLE]
,W1.FIELD_MAP_ID					AS FIELD_MAP_ID
,W1.EMAIL							AS [EMAIL]
,W1.AGENT_NAME						AS AGENT_NAME

,SUM(ISNULL(W1.SCHEDULED_HOURS						,0.00))	AS SCHEDULED_HOURS
,SUM(ISNULL(W1.SCHEDULED_AFTER_CANCELLATION_HOURS	,0.00))	AS SCHEDULED_AFTER_CANCELLATION_HOURS
,SUM(ISNULL(W1.CANCELLED_HOURS						,0.00))	AS CANCELLED_HOURS
,CASE WHEN SUM(ISNULL(W1.SCHEDULED_HOURS ,0.00)) = 0.00 THEN 0.00
	  ELSE SUM(ISNULL(W1.CANCELLED_HOURS ,0.00)) / SUM(ISNULL(W1.SCHEDULED_HOURS ,0.00))
 END														AS CANCELLED_PERCENT

FROM            WSOL_TB_IMPORTS_DAILY_SCHEDULE_1  W1

GROUP BY
 W1.STD_TENANT_START_DATE_TIME_KEY
,W1.TENANT_NAME
,W1.OFFICIAL_ACL_NAME
,W1.FIELD_MAP_ID
,W1.EMAIL
,W1.AGENT_NAME

ORDER BY
 MIN(W1.SEQNO)

--=================================================================================================
-- UPDATE PERMANENT TABLE IF RECORD ALREADY EXISTS
--=================================================================================================
UPDATE WSOL_TB_IMPORTS_DAILY_SCHEDULE SET
 FF_OFFICIAL_ACL_NAME				= W2.FF_OFFICIAL_ACL_NAME
,FF_ROLE							= W2.FF_ROLE
,FF_FIELD_MAP_ID					= W2.FF_FIELD_MAP_ID
,FF_EMAIL							= W2.FF_EMAIL
,FF_AGENT_NAME						= W2.FF_AGENT_NAME
,FF_SCHEDULED_HOURS					= W2.FF_SCHEDULED_HOURS
,FF_WORKED_HOURS					= W2.FF_WORKED_HOURS
,FF_CANCELLED_HOURS					= W2.FF_CANCELLED_HOURS
,FF_CANCELLED_PERCENT				= W2.FF_CANCELLED_PERCENT

,SEQNO_ADDED_TIME					= W2.SEQNO_ADDED_TIME
,SEQNO								= W2.SEQNO
,FTP_FILE_NAME						= W2.FTP_FILE_NAME

,[DATETIME]							= W2.[DATETIME]
--,STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
--,TENANT_NAME						= W2.TENANT_NAME
--,OFFICIAL_ACL_NAME				= W2.OFFICIAL_ACL_NAME
,[ROLE]								= W2.[ROLE]
--,FIELD_MAP_ID						= W2.FIELD_MAP_ID
,[EMAIL]							= W2.[EMAIL]
,AGENT_NAME							= W2.AGENT_NAME
,SCHEDULED_HOURS					= W2.SCHEDULED_HOURS
,SCHEDULED_AFTER_CANCELLATION_HOURS	= W2.SCHEDULED_AFTER_CANCELLATION_HOURS
,CANCELLED_HOURS					= W2.CANCELLED_HOURS
,CANCELLED_PERCENT					= W2.CANCELLED_PERCENT

--,WS_ROW_CREATED_TIME				= NULL
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_DAILY_SCHEDULE_2  W2
INNER JOIN      WSOL_TB_IMPORTS_DAILY_SCHEDULE    G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
													 AND G.TENANT_NAME						= W2.TENANT_NAME
													 AND G.OFFICIAL_ACL_NAME				= W2.OFFICIAL_ACL_NAME
													 AND G.FIELD_MAP_ID						= W2.FIELD_MAP_ID

WHERE G.STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
  AND G.TENANT_NAME						= W2.TENANT_NAME
  AND G.OFFICIAL_ACL_NAME				= W2.OFFICIAL_ACL_NAME
  AND G.FIELD_MAP_ID					= W2.FIELD_MAP_ID

--=================================================================================================
-- INSERT INTO PERMANENT TABLE IF RECORD DOES NOT EXIST
--=================================================================================================
INSERT INTO WSOL_TB_IMPORTS_DAILY_SCHEDULE
(
FF_OFFICIAL_ACL_NAME
,FF_ROLE
,FF_FIELD_MAP_ID
,FF_EMAIL
,FF_AGENT_NAME
,FF_SCHEDULED_HOURS
,FF_WORKED_HOURS
,FF_CANCELLED_HOURS
,FF_CANCELLED_PERCENT
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,STD_TENANT_START_DATE_TIME_KEY
,TENANT_NAME
,OFFICIAL_ACL_NAME
,[ROLE]
,FIELD_MAP_ID
,EMAIL
,AGENT_NAME
,SCHEDULED_HOURS
,SCHEDULED_AFTER_CANCELLATION_HOURS
,CANCELLED_HOURS
,CANCELLED_PERCENT
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W2.FF_OFFICIAL_ACL_NAME
,W2.FF_ROLE
,W2.FF_FIELD_MAP_ID
,W2.FF_EMAIL
,W2.FF_AGENT_NAME
,W2.FF_SCHEDULED_HOURS
,W2.FF_WORKED_HOURS
,W2.FF_CANCELLED_HOURS
,W2.FF_CANCELLED_PERCENT

,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME

,W2.[DATETIME]
,W2.STD_TENANT_START_DATE_TIME_KEY
,W2.TENANT_NAME
,W2.OFFICIAL_ACL_NAME
,W2.ROLE
,W2.FIELD_MAP_ID
,W2.EMAIL
,W2.AGENT_NAME
,W2.SCHEDULED_HOURS
,W2.SCHEDULED_AFTER_CANCELLATION_HOURS
,W2.CANCELLED_HOURS
,W2.CANCELLED_PERCENT

,@WS_ROW_CREATED_TIME
,NULL

FROM            WSOL_TB_IMPORTS_DAILY_SCHEDULE_2  W2

LEFT JOIN       WSOL_TB_IMPORTS_DAILY_SCHEDULE    G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
													 AND G.TENANT_NAME						= W2.TENANT_NAME
													 AND G.OFFICIAL_ACL_NAME				= W2.OFFICIAL_ACL_NAME
													 AND G.FIELD_MAP_ID						= W2.FIELD_MAP_ID

WHERE (G.OFFICIAL_ACL_NAME				IS NULL AND ISNULL(W2.OFFICIAL_ACL_NAME				,'') <> '' )
  AND (G.TENANT_NAME					IS NULL AND ISNULL(W2.TENANT_NAME					,'') <> '' )
  AND (G.FIELD_MAP_ID					IS NULL AND ISNULL(W2.FIELD_MAP_ID					,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W2.STD_TENANT_START_DATE_TIME_KEY, 0) <> 0  )

--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_DAILY_SCHEDULE_OFFICIAL_ACL_NAMES]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_DAILY_SCHEDULE_OFFICIAL_ACL_NAMES]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_NAME        VARCHAR(50)
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_DAILY_SCHEDULE_OFFICIAL_ACL_NAMES] '07/01/2016','07/10/2016','0'
--  EXECUTE [dbo].[uspIMPORTS_DAILY_SCHEDULE_OFFICIAL_ACL_NAMES] '07/01/2016','07/10/2016','ASO,SABRE'
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) + 1
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SET @TENANT_NAME = ',' + LTRIM(RTRIM(@TENANT_NAME)) + ','
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SELECT
	ISNULL(SC.OFFICIAL_ACL_NAME, WK.OFFICIAL_ACL_NAME) AS OFFICIAL_ACL_NAME
	--  SELECT *
	FROM WSOL_TB_IMPORTS_WORK_HOURS_ALL	WK
	FULL OUTER JOIN	WSOL_TB_IMPORTS_DAILY_SCHEDULE	SC
	
	 ON WK.OFFICIAL_ACL_NAME				= SC.OFFICIAL_ACL_NAME
	AND WK.FIELD_MAP_ID						= SC.FIELD_MAP_ID
	AND WK.STD_TENANT_START_DATE_TIME_KEY	= SC.STD_TENANT_START_DATE_TIME_KEY

	WHERE ( ISNULL(WK.DATETIME,SC.DATETIME) >= @DTM_BEG AND ISNULL(WK.DATETIME,SC.DATETIME) <  @DTM_END )
	  AND ( @TENANT_NAME IN (',,',',0,') OR CHARINDEX(',' + RTRIM(ISNULL(WK.TENANT_NAME,SC.TENANT_NAME)) + ',', @TENANT_NAME) > 0 )

	GROUP BY
	 ISNULL(SC.OFFICIAL_ACL_NAME, WK.OFFICIAL_ACL_NAME)

	ORDER BY
	 ISNULL(SC.OFFICIAL_ACL_NAME, WK.OFFICIAL_ACL_NAME)
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GO
PRINT N'Creating [dbo].[uspIMPORTS_DAILY_SCHEDULE_REPORTING]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_DAILY_SCHEDULE_REPORTING]
 @DATE_BEG          DATETIME
,@DATE_END          DATETIME
,@TENANT_NAME		VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP   VARCHAR(500) --Hid. Def=' '
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM'
,@MINIMUM_HOURS		INTEGER		
,@SHOW_SUBTOTALS	VARCHAR(5) 
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'  MANual,SUBscription
AS
SET NOCOUNT ON    

--  EXECUTE [dbo].[uspIMPORTS_DAILY_SCHEDULE_REPORTING] '09/29/2016','09/29/2016','SABRE','0','DY','HH','20','Y','4','MAN'

--  SELECT * FROM WSOL_TB_IMPORTS_DAILY_SCHEDULE
--  SELECT * FROM YZ_TB_IMPORTS_ASO_INVOICING

DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) 
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) -- + 1
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
END
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

DECLARE
 @MTD_BEG AS DATETIME
,@MTD_END AS DATETIME  --,@YTD_BEG AS DATETIME--,@YTD_END AS DATETIME
SET @MTD_BEG = CAST(CAST(DATEPART(mm,@DTM_BEG) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)
SET @MTD_END = @DTM_END  --SET @YTD_BEG = CAST('01/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)  --THINK _BEG MAKES MORE SENSE THAN _END.--SET @YTD_END = @DTM_END

IF @TIME_INTERVAL IN ('MR','MD') BEGIN  --MONTH DETERMINED BY @DTM_BEG.
	SET @DTM_BEG = @MTD_BEG
	SET @DTM_END = @MTD_END
END

--==================================
SET @TENANT_NAME		= ',' + LTRIM(RTRIM(@TENANT_NAME))      + ','
SET @SCHEDULER_GROUP	= ',' + LTRIM(RTRIM(@SCHEDULER_GROUP)) + ','
--SET @ID_EXT			= ',' + LTRIM(RTRIM(@ID_EXT))          + ','
--SET @CLIENT_USER_ID	= ',' + LTRIM(RTRIM(@CLIENT_USER_ID)) + ','


--==================================
--SET AMOUNT TO MULTIPLY BY:
--==================================
DECLARE @DS DECIMAL(10,2)  --SECONDS TO MULTIPY BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 3600.00		--MULTIPLY HOURS BY 3600  TO GET SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
    SET @DS = 60.00			--MULTIPLY HOURS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
    SET @DS = 1.00			--MULTIPLY HOURS BY 1 TO GET HOURS.
END

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_DAILY_SCHEDULE') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_DAILY_SCHEDULE
END
CREATE TABLE #IMPORTS_DAILY_SCHEDULE
(
 TENANT_NAME					VARCHAR(50)
,AGENT_NAME						VARCHAR(100)
,OFFICIAL_ACL_NAME				VARCHAR(200)
,FIELD_MAP_ID					VARCHAR(50)
,EMPLOYEE_EMAIL					VARCHAR(200)

,STD_TENANT_START_DATE_TIME_KEY INT
,[DATETIME]						DATETIME

,SCHEDULED_TIME					DECIMAL(10,2)
,SCHEDULED_AFTER_CANCELLATION	DECIMAL(10,2)
,CANCELLED_TIME					DECIMAL(10,2)
,CANCELLED_PERCENT				DECIMAL(10,2)
,LOGGED_IN_TIME					DECIMAL(10,2)
,PRODUCTIVE_TIME				DECIMAL(10,2)
,NO_SHOW_TIME					DECIMAL(10,2)
,UNSCHEDULED_TIME				DECIMAL(10,2)
)

INSERT INTO #IMPORTS_DAILY_SCHEDULE
SELECT
 USI.TENANT_NAME						--AS TENANT_NAME
,USI.AGENT_NAME							--AS AGENT_NAME
,USI.OFFICIAL_ACL_NAME					--AS OFFICIAL_ACL_NAME
,USI.FIELD_MAP_ID						--AS FIELD_MAP_ID
,USI.EMPLOYEE_EMAIL						--AS EMPLOYEE_EMAIL

,USI.STD_TENANT_START_DATE_TIME_KEY	
,USI.DATETIME

,(ISNULL(USI.SCHEDULED_TIME					,0.00))
,(ISNULL(USI.SCHEDULED_AFTER_CANCELLATION	,0.00))
,(ISNULL(USI.CANCELLED_TIME					,0.00))
,(ISNULL(USI.CANCELLED_PERCENT				,0.00))
,(ISNULL(USI.LOGGED_IN_TIME					,0.00))
,(ISNULL(USI.PRODUCTIVE_TIME				,0.00))
,USI.NO_SHOW_TIME
,USI.UNSCHEDULED_TIME


--SELECT * FROM WSOL_TB_IMPORTS_DAILY_SCHEDULE
--SELECT * FROM WSOL_TB_IMPORTS_WORK_HOURS_ALL

FROM
(	SELECT	
	 ISNULL(WK.TENANT_NAME							,SC.TENANT_NAME)				AS TENANT_NAME
	--,ISNULL(WK.AGENT_NAME							,SC.AGENT_NAME)					AS AGENT_NAME
	,MAX(ISNULL(WK.AGENT_NAME						,SC.AGENT_NAME))				AS AGENT_NAME
	,MAX(ISNULL(WK.OFFICIAL_ACL_NAME				,SC.OFFICIAL_ACL_NAME))			AS OFFICIAL_ACL_NAME
	,ISNULL(WK.FIELD_MAP_ID							,SC.FIELD_MAP_ID)				AS FIELD_MAP_ID
	,MAX(ISNULL(SC.EMAIL							,WK.EMAIL))						AS EMPLOYEE_EMAIL
	,ISNULL(WK.STD_TENANT_START_DATE_TIME_KEY ,SC.STD_TENANT_START_DATE_TIME_KEY)	AS STD_TENANT_START_DATE_TIME_KEY
	,CASE WHEN @TIME_INTERVAL = 'DY' THEN
		ISNULL(WK.DATETIME ,SC.DATETIME)
		  ELSE
		CAST('1900-01-01' AS DATETIME)
	 END																			AS [DATETIME]

	,SUM(ISNULL(SC.SCHEDULED_HOURS						,0.00))						AS SCHEDULED_TIME
	,SUM(ISNULL(SC.SCHEDULED_AFTER_CANCELLATION_HOURS	,0.00))						AS SCHEDULED_AFTER_CANCELLATION
	,SUM(ISNULL(SC.CANCELLED_HOURS						,0.00))						AS CANCELLED_TIME
	,SUM(ISNULL(SC.CANCELLED_PERCENT					,0.00))						AS CANCELLED_PERCENT
	,SUM(ISNULL(WK.LOGGED_IN_HOURS						,0.00))						AS LOGGED_IN_TIME
	,SUM(ISNULL(WK.PRODUCTIVE_HOURS						,0.00))						AS PRODUCTIVE_TIME
	,NULL																			AS NO_SHOW_TIME
	,NULL																			AS UNSCHEDULED_TIME

	FROM            WSOL_TB_IMPORTS_WORK_HOURS_ALL	WK
	FULL OUTER JOIN	WSOL_TB_IMPORTS_DAILY_SCHEDULE	SC
	
	 ON WK.OFFICIAL_ACL_NAME				= SC.OFFICIAL_ACL_NAME
	AND WK.TENANT_NAME						= SC.TENANT_NAME
	AND WK.FIELD_MAP_ID						= SC.FIELD_MAP_ID
	AND WK.STD_TENANT_START_DATE_TIME_KEY	= SC.STD_TENANT_START_DATE_TIME_KEY

	WHERE ISNULL(WK.DATETIME,SC.DATETIME) >= @DTM_BEG AND ISNULL(WK.DATETIME,SC.DATETIME) <  @DTM_END
	  AND (
--			( @TENANT_NAME		IN (',0,',',,') OR CHARINDEX(',' + RTRIM(WK.TENANT_NAME)  + ',',@TENANT_NAME)	> 0 )
--			OR
		    ( @SCHEDULER_GROUP	IN (',0,',',,') OR CHARINDEX(',' + RTRIM(SC.OFFICIAL_ACL_NAME)	+ ',',@SCHEDULER_GROUP) > 0 )
			OR
			( @SCHEDULER_GROUP  IN (',0,',',,') OR CHARINDEX(',' + RTRIM(WK.OFFICIAL_ACL_NAME)  + ',',@SCHEDULER_GROUP) > 0 )
		  )

	GROUP BY
	 ISNULL(WK.TENANT_NAME						,SC.TENANT_NAME)
--	,ISNULL(WK.AGENT_NAME						,SC.AGENT_NAME)
--	,WK.AGENT_NAME
	--,ISNULL(WK.OFFICIAL_ACL_NAME				,SC.OFFICIAL_ACL_NAME)
	,ISNULL(WK.FIELD_MAP_ID						,SC.FIELD_MAP_ID)
	--,ISNULL(SC.EMAIL							,WK.EMAIL)
	,ISNULL(WK.STD_TENANT_START_DATE_TIME_KEY	,SC.STD_TENANT_START_DATE_TIME_KEY)
	,CASE WHEN @TIME_INTERVAL = 'DY' THEN
		ISNULL(WK.DATETIME ,SC.DATETIME)
		  ELSE
		CAST('1900-01-01' AS DATETIME)
	 END

) USI

-- SELECT * FROM #IMPORTS_DAILY_SCHEDULE

IF OBJECT_ID('TEMPDB..#IMPORTS_DAILY_SCHEDULE_RTN') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_DAILY_SCHEDULE_RTN
END
CREATE TABLE #IMPORTS_DAILY_SCHEDULE_RTN
(
 GRPNO							INT
,TENANT_NAME					VARCHAR(50)
,AGENT_NAME						VARCHAR(100)
,OFFICIAL_ACL_NAME				VARCHAR(200)
,FIELD_MAP_ID					VARCHAR(50)
,EMPLOYEE_EMAIL					VARCHAR(200)

,STD_TENANT_START_DATE_TIME_KEY INT
,[DATETIME]						DATETIME

,SCHEDULED_TIME					DECIMAL(10,2)
,SCHEDULED_AFTER_CANCELLATION	DECIMAL(10,2)
,CANCELLED_TIME					DECIMAL(10,2)
,CANCELLED_PERCENT				DECIMAL(10,2)
,LOGGED_IN_TIME					DECIMAL(10,2)
,PRODUCTIVE_TIME				DECIMAL(10,2)
,NO_SHOW_TIME					DECIMAL(10,2)
,UNSCHEDULED_TIME				DECIMAL(10,2)
)

-- SELECT * FROM #IMPORTS_DAILY_SCHEDULE_RTN

INSERT INTO #IMPORTS_DAILY_SCHEDULE_RTN
SELECT
 20								--AS GRPNO  
,ISNULL(GG.TENANT_NAME						,'') AS TENANT_NAME
,ISNULL(GG.AGENT_NAME						,'') AS AGENT_NAME
,ISNULL(GG.OFFICIAL_ACL_NAME				,'') AS OFFICIAL_ACL_NAME
,ISNULL(GG.FIELD_MAP_ID						,'') AS FIELD_MAP_ID
,ISNULL(GG.EMPLOYEE_EMAIL					,'') AS EMPLOYEE_EMAIL

,ISNULL(GG.STD_TENANT_START_DATE_TIME_KEY	,0 ) AS STD_TENANT_START_DATE_TIME_KEY
,ISNULL(GG.DATETIME							,0 ) AS [DATETIME]

,ISNULL(GG.SCHEDULED_TIME				,0.00) * @DS	AS SCHEDULED_TIME
,ISNULL(GG.SCHEDULED_AFTER_CANCELLATION	,0.00) * @DS	AS SCHEDULED_AFTER_CANCELLATION
,ISNULL(GG.CANCELLED_TIME				,0.00) * @DS	AS CANCELLED_TIME
,ISNULL(GG.CANCELLED_PERCENT			,0.00)			AS CANCELLED_PERCENT
,ISNULL(GG.LOGGED_IN_TIME				,0.00) * @DS	AS LOGGED_IN_TIME
,ISNULL(GG.PRODUCTIVE_TIME				,0.00) * @DS	AS PRODUCTIVE_TIME
,GG.NO_SHOW_TIME										AS NO_SHOW_TIME
,GG.UNSCHEDULED_TIME									AS UNSCHEDULED_TIME

FROM  -- GG STARTS HERE:
(	SELECT
	 MAX(ISNULL(SW.TENANT_NAME		,''))	AS TENANT_NAME
	,MAX(ISNULL(SW.AGENT_NAME		,''))	AS AGENT_NAME
	,ISNULL(SW.OFFICIAL_ACL_NAME	,'')	AS OFFICIAL_ACL_NAME
	,ISNULL(SW.FIELD_MAP_ID			,'')	AS FIELD_MAP_ID
	,MAX(ISNULL(SW.EMPLOYEE_EMAIL	,''))	AS EMPLOYEE_EMAIL
	
	,ISNULL(SW.STD_TENANT_START_DATE_TIME_KEY	,0)		AS STD_TENANT_START_DATE_TIME_KEY
	,ISNULL(SW.DATETIME							,0)		AS [DATETIME]

	,SUM(ISNULL(SW.SCHEDULED_TIME				,0.00)) AS SCHEDULED_TIME
	,SUM(ISNULL(SW.SCHEDULED_AFTER_CANCELLATION	,0.00))	AS SCHEDULED_AFTER_CANCELLATION
	,SUM(ISNULL(SW.CANCELLED_TIME				,0.00))	AS CANCELLED_TIME

	,CASE WHEN SUM(ISNULL(SW.SCHEDULED_TIME ,0.00)) > 0 THEN
			(SUM(ISNULL(SW.CANCELLED_TIME ,0.00)) / SUM(ISNULL(SW.SCHEDULED_TIME ,0.00))) * 100.00
		  ELSE 0.00 END									AS CANCELLED_PERCENT

	,SUM(ISNULL(SW.LOGGED_IN_TIME				,0.00))	AS LOGGED_IN_TIME
	,SUM(ISNULL(SW.PRODUCTIVE_TIME				,0.00))	AS PRODUCTIVE_TIME
	,CASE WHEN SUM(ISNULL(SW.SCHEDULED_AFTER_CANCELLATION,0.00)) - SUM(ISNULL(SW.LOGGED_IN_TIME,0.00)) < 0 THEN NULL
		  ELSE SUM(ISNULL(SW.SCHEDULED_AFTER_CANCELLATION,0.00)) - SUM(ISNULL(SW.LOGGED_IN_TIME,0.00)) END	AS NO_SHOW_TIME
	,CASE WHEN SUM(ISNULL(SW.LOGGED_IN_TIME,0.00)) - SUM(ISNULL(SW.SCHEDULED_AFTER_CANCELLATION,0.00)) < 0 THEN NULL
		  ELSE SUM(ISNULL(SW.LOGGED_IN_TIME,0.00)) - SUM(ISNULL(SW.SCHEDULED_AFTER_CANCELLATION,0.00)) END	AS UNSCHEDULED_TIME
	
	FROM            #IMPORTS_DAILY_SCHEDULE			SW
	INNER JOIN      DATE_TIME					    DT   ON DT.DATE_TIME_KEY              = SW.STD_TENANT_START_DATE_TIME_KEY

	GROUP BY
	 ISNULL(SW.OFFICIAL_ACL_NAME				,'')	--AS OFFICIAL_ACL_NAME
	,ISNULL(SW.FIELD_MAP_ID						,'')	--AS FIELD_MAP_ID
	,ISNULL(SW.STD_TENANT_START_DATE_TIME_KEY	,0 )	--AS STD_TENANT_START_DATE_TIME_KEY
	,ISNULL(SW.DATETIME							,0 )	--AS DATETIME
) GG

--=======================================================================================
--POPULATE TABLE READ BY SSIS TO GET END DATE OF DATA REPORT/FILE HAS BEEN RUN FOR:
--=======================================================================================
INSERT INTO YZ_TB_FILENAMES_FOR_SSIS
(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)

SELECT
 'uspIMPORTS_DAILY_SCHEDULE_REPORTING'  --SQL_JOB_NAME
,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,111),'/','')   --FILENM   YYYYMMDD_...
,dbo.getdate()  --CST_ROW_CREATED_TIME

--=====================================
--RETURN DATASET:
--=====================================
SELECT 
 CASE WHEN @DUR_IN = 'SS' THEN '' ELSE 'F' END AS DUR_FORMAT
,CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
,V.*

FROM      #IMPORTS_DAILY_SCHEDULE_RTN  V

ORDER BY
 V.FIELD_MAP_ID
,V.STD_TENANT_START_DATE_TIME_KEY

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_DAILY_SCHEDULE_TENANT_NAMES]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_DAILY_SCHEDULE_TENANT_NAMES]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
--,@TENANT_KEY         VARCHAR(150)
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_DAILY_SCHEDULE_TENANT_NAMES] '09/01/2016','09/27/2016'
--  EXECUTE [dbo].[uspIMPORTS_DAILY_SCHEDULE_TENANT_NAMES] '07/01/2016','07/10/2016','152,153'    --select @tenant_key  --152,153
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) + 1
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
--SET @TENANT_KEY = ',' + LTRIM(RTRIM(@TENANT_KEY)) + ','  --already passed in with commas around keys...
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SELECT
	ISNULL(SC.TENANT_NAME, WK.TENANT_NAME) AS TENANT_NAME
	--  SELECT *
	FROM WSOL_TB_IMPORTS_WORK_HOURS_ALL	WK
	FULL OUTER JOIN	WSOL_TB_IMPORTS_DAILY_SCHEDULE	SC
	
	 ON WK.OFFICIAL_ACL_NAME				= SC.OFFICIAL_ACL_NAME
	AND WK.FIELD_MAP_ID						= SC.FIELD_MAP_ID
	AND WK.STD_TENANT_START_DATE_TIME_KEY	= SC.STD_TENANT_START_DATE_TIME_KEY
	AND WK.TENANT_NAME						= SC.TENANT_NAME

	WHERE ISNULL(WK.DATETIME,SC.DATETIME) >= @DTM_BEG AND ISNULL(WK.DATETIME,SC.DATETIME) <  @DTM_END

	GROUP BY
	 ISNULL(SC.TENANT_NAME, WK.TENANT_NAME)

	ORDER BY
	 ISNULL(SC.TENANT_NAME, WK.TENANT_NAME)
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GO
PRINT N'Creating [dbo].[uspIMPORTS_DATALOT_AGENT_INVOICING]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_DATALOT_AGENT_INVOICING]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300) --Hid. Def=' '
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'  MANual,SUBscription
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='INV'
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='INV'  
AS
SET NOCOUNT ON    

--  EXECUTE [dbo].[uspIMPORTS_DATALOT_AGENT_INVOICING] '05/23/2014','06/05/2014','0','0','0','0','HR','Y','SS','NM','Y','4','MAN','INV','INV'

--060614: INVOICE_ID IS WHAT IS SUPPOSE TO SHOW ON THE CAR/CAS SRS INVOICE REPORTS AS THE GROUP!!!!

--@TIME_INTERVAL:  Can only show invoicing report at hour level or higher !!!

--Durations in FTP FILE are in minutes.  Then converted to seconds during cleanup.  So, this report can pull by secs, mins, and hrs now.

--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_SD_INVOICE_GROUPS
--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA
    
--TMP:  FOR RUNNING SQL JOBS FOR PREVIOUS DAYS:  
--SET @DATE_BEG = '05/23/2014'
--SET @DATE_END = '06/05/2014'

--==================================--SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) 
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) -- + 1
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
END
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

DECLARE
 @MTD_BEG AS DATETIME
,@MTD_END AS DATETIME  --,@YTD_BEG AS DATETIME--,@YTD_END AS DATETIME
SET @MTD_BEG = CAST(CAST(DATEPART(mm,@DTM_BEG) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)
SET @MTD_END = @DTM_END  --SET @YTD_BEG = CAST('01/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)  --THINK _BEG MAKES MORE SENSE THAN _END.--SET @YTD_END = @DTM_END
--==================================
	--                                                         MD=Month with daily totals.   MR=Month, NO Daily totals.
	--                                                         DR=Date Range, NO daily totals.  
	--                                                           The 'M' in MD,MR needed, to know that month is wanted, so @MTD_BEG and @MTD_END can be set correctly...
	--     @DLY_ AND @MTD_ ARE USED TO DETERMINE WHAT DAYS TO SHOW IN THE DIFFERENT ROWS OF DATA.

--@EXECUTIONER FROM SUBSCRIPTION WILL PASS IN 'MR' OR 'MD'.  OTHERWISE WILL BE 'DY' OR 'DR' WHEN MANUAL.

IF @TIME_INTERVAL IN ('MR','MD') BEGIN  --MONTH DETERMINED BY @DTM_BEG.
	SET @DTM_BEG = @MTD_BEG
	SET @DTM_END = @MTD_END
END

--==================================
--SET @TENANT_KEY      = ',' + LTRIM(RTRIM(@TENANT_KEY))      + ','
----SET @SCHEDULER_GROUP = ',' + LTRIM(RTRIM(@SCHEDULER_GROUP)) + ','
--SET @ID_EXT          = ',' + LTRIM(RTRIM(@ID_EXT))          + ','


--==================================
--SET AMOUNT TO DIVIDE BY:
--==================================
DECLARE @DS DECIMAL(10,2)  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.00     --DIVIDE SECONDS BY 1  TO GET SAME, SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
    SET @DS = 60.00    --DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
    SET @DS = 3600.00  --DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_DATALOT_AGENT_INVOICING') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_DATALOT_AGENT_INVOICING
END
CREATE TABLE #IMPORTS_DATALOT_AGENT_INVOICING
(TENANT_NAME            VARCHAR(50)
,ID_EXT                 VARCHAR(3)
,SCHEDULER_ACL_NAME     VARCHAR(100)  
,EMPLOYEE_ID            VARCHAR(50)
,[EMAIL]				VARCHAR(100)   
,STD_TENANT_START_DATE_TIME_KEY INT
,RESOURCE_NAME          VARCHAR(100)
,CATS_ID				VARCHAR(50)
,ASA_NAME				VARCHAR(100)

,AIR_DAY_TYPE				varchar(1)
,AIR_ACW_FONT_COLOR			varchar(50)
,MIN_GUARANTEE_RATE			decimal(6,3)
,MIN_GUARANTEE_MINUTES		decimal(6,3)
,MIN_GUARANTEE_TYPE			varchar(50)
,WRAP_MINUTE_RATE			decimal(6,3)
,BASE_3_MINUTE_XFER_RATE	decimal(6,3)
,[3_MINUTE_XFER_BONUS_RATE]	decimal(6,3)
,ELIGIBLE_FOR_XFER_BONUS	varchar(1)
,AUTHORIZED_TO_INVOICE_TYPE varchar(50)
,TOTAL_AUTHORIZED_PAY		decimal(6,3)
,TOTAL_AUTHORIZED_XFER_PAY	decimal(6,3)
,HAS_HOLIDAYS				varchar(1)
,PAY_RATE_STANDARD			decimal(6,3)
,PAY_RATE_HOLIDAY			decimal(6,3)
,INCLUDE_IN_CAS				varchar(1)
,READY_FOR_XML				varchar(1)
,SHOW_ID_EXTS				varchar(1)
,
[INBOUND_CALLS] [int] NULL,
[OUTBOUND_CALLS] [int] NULL,
[TOTAL_CALLS] [int] NULL,
[SUCCESSFUL_TRANSFERS] [int] NULL,
[ONLINE_TIME] [decimal](10, 2) NULL,
[CONNECTED_TIME] [decimal](10, 2) NULL,
[WRAP_TIME] [decimal](10, 2) NULL,
[WAITING_TIME] [decimal](10, 2) NULL,
[WRAP_ADJ_TIME] [decimal] (10, 2) NULL,
[WRAP_ALLOWED] [decimal] (10, 2) NULL,
[AUTHORIZED_WRAP] [decimal] (10, 2) NULL,
[CPROD] [decimal] (10, 2) NULL,
[MINIMUM_GUARANTEE] [decimal] (10, 2) NULL,
[AUTHORIZED_MINUTES] [decimal](10, 2) NULL,
[BILLABLE_TALK] [decimal](6, 3) NULL,
[BILLABLE_WRAP] [decimal](6, 3) NULL,
[AUTHORIZED_TRANSFERS] [int] NULL,
[TOTAL_TRANSFERS] [int] NULL,
[THREE_MIN_TRANSFERS] [int] NULL,
[THREE_MIN_RETAIL_TRANSFERS] [int] NULL,
[BASE_3_MINUTE_TRANSFER] [decimal](6, 3) NULL,
[3_MINUTE_TRANSFER_BONUS] [decimal](6, 3) NULL,
)

INSERT INTO #IMPORTS_DATALOT_AGENT_INVOICING
SELECT
 'Datalot'  --T.TENANT_NAME
,''  --UAA.ACD_ID_EXTENSION
,UAA.SCHEDULER_ACL_NAME
,UAA.EMPLOYEE_ID
,UAA.EMAIL
,UAA.STD_TENANT_START_DATE_TIME_KEY
,UAA.RESOURCE_NAME
,UAA.CATS_ID
,UAA.ASA_NAME

,(ISNULL(UAA.AIR_DAY_TYPE,''))					--AS AIR_DAY_TYPE
,(ISNULL(UAA.AIR_ACW_FONT_COLOR,''))			--AS AIR_ACW_FONT_COLOR
,(ISNULL(UAA.MIN_GUARANTEE_RATE,0.000))			--AS MIN_GUARANTEE_RATE
,(ISNULL(UAA.MIN_GUARANTEE_MINUTES,0.000))		--AS MIN_GUARANTEE_MINUTES
,(ISNULL(UAA.MIN_GUARANTEE_TYPE,''))			--AS MIN_GUARANTEE_TYPE
,(ISNULL(UAA.WRAP_MINUTE_RATE,0.000))			--AS WRAP_MINUTE_RATE
,(ISNULL(UAA.BASE_3_MINUTE_XFER_RATE,0.000))	--AS BASE_3_MINUTE_XFER_RATE
,(ISNULL(UAA.[3_MINUTE_XFER_BONUS_RATE],0.000))	--AS [3_MINUTE_XFER_BONUS_RATE]
,(ISNULL(UAA.ELIGIBLE_FOR_XFER_BONUS,''))		--AS ELIGIBLE_FOR_XFER_BONUS
,(ISNULL(UAA.AUTHORIZED_TO_INVOICE_TYPE,''))	--AS AUTHORIZED_TO_INVOICE_TYPE
,(ISNULL(UAA.TOTAL_AUTHORIZED_PAY,0.000))		--AS TOTAL_AUTHORIZED_PAY
,(ISNULL(UAA.TOTAL_AUTHORIZED_XFER_PAY,0.000))	--AS TOTAL_AUTHORIZED_XFER_PAY
,(ISNULL(UAA.HAS_HOLIDAYS,''))					--AS HAS_HOLIDAYS
,(ISNULL(UAA.PAY_RATE_STANDARD,0.000))			--AS PAY_RATE_STANDARD
,(ISNULL(UAA.PAY_RATE_HOLIDAY,0.000))			--AS PAY_RATE_HOLIDAY
,(ISNULL(UAA.INCLUDE_IN_CAS,''))				--AS INCLUDE_IN_CAS
,(ISNULL(UAA.READY_FOR_XML,''))					--AS READY_FOR_XML
,(ISNULL(UAA.SHOW_ID_EXTS,''))					--AS SHOW_ID_EXTS

,(ISNULL(UAA.INBOUND_CALLS,0))
,(ISNULL(UAA.OUTBOUND_CALLS,0))
,(ISNULL(UAA.TOTAL_CALLS,0))
,(ISNULL(UAA.SUCCESSFUL_TRANSFERS,0))
,(ISNULL(UAA.ONLINE_TIME,0))
,(ISNULL(UAA.CONNECTED_TIME,0))
,(ISNULL(UAA.WRAP_TIME,0))
,(ISNULL(UAA.WAITING_TIME,0))
,(ISNULL(UAA.WRAP_ADJ_TIME,0))
,(ISNULL(UAA.WRAP_ALLOWED,0))
,(ISNULL(UAA.AUTHORIZED_WRAP,0))
,(ISNULL(UAA.CPROD,0))
,(ISNULL(UAA.MINIMUM_GUARANTEE,0))
,(ISNULL(UAA.AUTHORIZED_MINUTES,0))
,(ISNULL(UAA.BILLABLE_TALK,0.000))
,(ISNULL(UAA.BILLABLE_WRAP,0.000))
,(ISNULL(UAA.AUTHORIZED_TRANSFERS,0))
,(ISNULL(UAA.TOTAL_TRANSFERS,0))
,(ISNULL(UAA.THREE_MIN_TRANSFERS,0))
,(ISNULL(UAA.THREE_MIN_RETAIL_TRANSFERS,0))
,(ISNULL(UAA.BASE_3_MINUTE_TRANSFER,0.000))
,(ISNULL(UAA.[3_MINUTE_TRANSFER_BONUS],0.000))

--DATASOURCES FOR DURATION FIELDS, IN SECONDS, IN HOUR INTERVALS:
--    GROUPED JUST ENOUGH TO BE ABLE TO JOIN DATASOURCES TOGETHER, AND AT MOST BASIC INTERVAL!
FROM
(	SELECT	
	-- UA.TENANT_KEY
	 ''  AS ACD_ID_EXTENSION
	--,UA.INVOICE_ID  AS SCHEDULER_ACL_NAME  --UA.SCHEDULER_ACL_NAME --060614: INVOICE_ID IS WHAT IS SUPPOSE TO SHOW ON THE CAR/CAS SRS INVOICE REPORTS AS THE GROUP!!!!
	,UA.SCHEDULER_ACL_NAME							AS SCHEDULER_ACL_NAME
	,UA.FF_AGENT_ID									AS EMPLOYEE_ID
	,MAX(UA.EMAIL)									AS EMAIL
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,MAX(UA.RESOURCE_NAME)								AS RESOURCE_NAME
	,ISNULL(CI.AGENT_ID,'')								AS CATS_ID
	,MAX(UA.ASA_NAME)									AS ASA_NAME
	,MAX(UA.AIR_DAY_TYPE)								AS AIR_DAY_TYPE
	,'BLACK'											AS AIR_ACW_FONT_COLOR
	,0													AS MIN_GUARANTEE_RATE
	,MAX(UA.MIN_GUARANTEE_MINUTES)						AS MIN_GUARANTEE_MINUTES
	,''													AS MIN_GUARANTEE_TYPE
	,MAX(WRAP_MINUTE_RATE)								AS WRAP_MINUTE_RATE
	,MAX(BASE_3_MINUTE_XFER_RATE)						AS BASE_3_MINUTE_XFER_RATE
	,MAX([3_MINUTE_XFER_BONUS_RATE])					AS [3_MINUTE_XFER_BONUS_RATE]
	,MAX(ELIGIBLE_FOR_XFER_BONUS)						AS ELIGIBLE_FOR_XFER_BONUS
	,''													AS AUTHORIZED_TO_INVOICE_TYPE
	,SUM(ISNULL(UA.TOTAL_AUTHORIZED_PAY,0.000))			AS TOTAL_AUTHORIZED_PAY
	,SUM(ISNULL(UA.TOTAL_AUTHORIZED_XFER_PAY,0.000))	AS TOTAL_AUTHORIZED_XFER_PAY
	,'Y'												AS HAS_HOLIDAYS
	,MAX(PAY_RATE_STANDARD)								AS PAY_RATE_STANDARD
	,MAX(PAY_RATE_HOLIDAY)								AS PAY_RATE_HOLIDAY
	,''													AS INCLUDE_IN_CAS
	,''													AS READY_FOR_XML
	,''													AS SHOW_ID_EXTS

	,SUM(ISNULL(UA.INBOUND_CALLS,0))				AS INBOUND_CALLS
	,SUM(ISNULL(UA.OUTBOUND_CALLS,0))				AS OUTBOUND_CALLS
	,SUM(ISNULL(UA.TOTAL_CALLS,0))					AS TOTAL_CALLS
	,SUM(ISNULL(UA.SUCCESSFUL_TRANSFERS,0))			AS SUCCESSFUL_TRANSFERS
	,SUM(ISNULL(UA.ONLINE_TIME,0)) * 60.00			AS ONLINE_TIME			-- CONVERT TO SECONDS
	,SUM(ISNULL(UA.CONNECTED_TIME,0)) * 60.00		AS CONNECTED_TIME		-- CONVERT TO SECONDS
	,SUM(ISNULL(UA.WRAP_TIME,0)) * 60.00			AS WRAP_TIME			-- CONVERT TO SECONDS
	,SUM(ISNULL(UA.WAITING_TIME,0)) * 60.00			AS WAITING_TIME			-- CONVERT TO SECONDS
	,SUM(ISNULL(UA.WRAP_ADJ_TIME,0)) * 60.00		AS WRAP_ADJ_TIME		-- CONVERT TO SECONDS
	,SUM(ISNULL(UA.WRAP_ALLOWED,0)) * 60.00			AS WRAP_ALLOWED			-- CONVERT TO SECONDS
	,SUM(ISNULL(UA.AUTHORIZED_WRAP,0)) * 60.00		AS AUTHORIZED_WRAP		-- CONVERT TO SECONDS
	,SUM(ISNULL(UA.CPROD,0)) * 60.00				AS CPROD				-- CONVERT TO SECONDS
	,SUM(ISNULL(UA.MINIMUM_GUARANTEE,0)) * 60.00	AS MINIMUM_GUARANTEE	-- CONVERT TO SECONDS
	,SUM(ISNULL(UA.AUTHORIZED_MINUTES,0)) * 60.00	AS AUTHORIZED_MINUTES	-- CONVERT TO SECONDS
	,SUM(ISNULL(UA.BILLABLE_TALK,0.000))			AS BILLABLE_TALK
	,SUM(ISNULL(UA.BILLABLE_WRAP,0.000))			AS BILLABLE_WRAP
	,SUM(ISNULL(UA.AUTHORIZED_TRANSFERS,0))			AS AUTHORIZED_TRANSFERS
	,SUM(ISNULL(UA.TOTAL_TRANSFERS,0))				AS TOTAL_TRANSFERS
	,SUM(ISNULL(UA.THREE_MIN_TRANSFERS,0))			AS THREE_MIN_TRANSFERS
	,SUM(ISNULL(UA.THREE_MIN_RETAIL_TRANSFERS,0.000))	AS THREE_MIN_RETAIL_TRANSFERS
	,SUM(ISNULL(UA.BASE_3_MINUTE_TRANSFER,0.000))		AS BASE_3_MINUTE_TRANSFER
	,SUM(ISNULL(UA.[3_MINUTE_TRANSFER_BONUS],0.000))	AS [3_MINUTE_TRANSFER_BONUS]
	
	--  SELECT *
	FROM            YZ_TB_IMPORTS_DATALOT_INVOICING     UA
	INNER JOIN      DATE_TIME                           DT  ON DT.DATE_TIME_KEY		= UA.STD_TENANT_START_DATE_TIME_KEY
	LEFT JOIN		WSOL_VW_CATS_IDS					CI	ON CI.SCHEDULER_ACL		= CASE WHEN UA.ID_EXT = 'DLS' THEN 'Datalot Standard Agents'
																						   WHEN UA.ID_EXT = 'DLP' THEN 'Datalot Standard Agents'
																						   WHEN UA.ID_EXT = 'DLR' THEN 'Datalot Resource AGents' END
														   AND CI.FIELD_MAP_ID		= UA.FF_AGENT_ID 

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
--	  AND ISNULL(UA.RESOURCE_NAME,'') <> ''
		
	GROUP BY 
	 UA.SCHEDULER_ACL_NAME
	,UA.FF_AGENT_ID
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,CI.AGENT_ID
) UAA

--==============================================================
--==============================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_DATALOT_AGENT_INVOICING_RTN') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_DATALOT_AGENT_INVOICING_RTN
END
CREATE TABLE #IMPORTS_DATALOT_AGENT_INVOICING_RTN
(GRPNO                 INT
,TENANT_NAME           VARCHAR(50)
,ID_EXT                VARCHAR(3)
,SCHEDULER_ACL_NAME    VARCHAR(100)
,EMPLOYEE_ID           VARCHAR(50)
,EMAIL				   VARCHAR(100)
,RESOURCE_NAME         VARCHAR(100)
,CATS_ID			   VARCHAR(50)
,ASA_NAME			   VARCHAR(100)
,CAL_YEAR_MONTH_NUM    VARCHAR(10)
,DATE_INTERVAL         VARCHAR(50)
,TIME_INTERVAL         VARCHAR(10)

,AIR_DAY_TYPE					varchar(1)
,AIR_ACW_FONT_COLOR				varchar(50)
,MIN_GUARANTEE_RATE				decimal(6,3)
,MIN_GUARANTEE_MINUTES			decimal(6,3)
,MIN_GUARANTEE_TYPE				varchar(50)
,WRAP_MINUTE_RATE				decimal(6,3)
,BASE_3_MINUTE_XFER_RATE		decimal(6,3)
,[3_MINUTE_XFER_BONUS_RATE]		decimal(6,3)
,ELIGIBLE_FOR_XFER_BONUS		varchar(1)
,AUTHORIZED_TO_INVOICE_TYPE		varchar(50)
,TOTAL_AUTHORIZED_PAY			decimal(6,3)
,TOTAL_AUTHORIZED_XFER_PAY		decimal(6,3)
,HAS_HOLIDAYS					varchar(1)
,PAY_RATE_STANDARD				decimal(6,3)
,PAY_RATE_HOLIDAY				decimal(6,3)
,INCLUDE_IN_CAS					varchar(1)
,READY_FOR_XML					varchar(1)
,SHOW_ID_EXTS					varchar(1)

,AIR_HOLIDAY_IN        VARCHAR(1)
,ALL_AUTHORIZED_TIME   DECIMAL(10,2)
,ALL_AUTHORIZED_XFERS  INT

,
[INBOUND_CALLS] [int] NULL,
[OUTBOUND_CALLS] [int] NULL,
[TOTAL_CALLS] [int] NULL,
[SUCCESSFUL_TRANSFERS] [int] NULL,
[ONLINE_TIME] [decimal](10, 2) NULL,
[CONNECTED_TIME] [decimal](10, 2) NULL,
[WRAP_TIME] [decimal](10, 2) NULL,
[WAITING_TIME] [decimal](10, 2) NULL,
[WRAP_ADJ_TIME] [decimal](10, 2) NULL,
[WRAP_ALLOWED] [decimal](10, 2) NULL,
[AUTHORIZED_WRAP] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
[AUTHORIZED_MINUTES] [decimal](10, 2) NULL,
[BILLABLE_TALK] [decimal](6, 3) NULL,
[BILLABLE_WRAP] [decimal](6, 3) NULL,
[AUTHORIZED_TRANSFERS] [int] NULL,
[TOTAL_TRANSFERS] [int] NULL,
[THREE_MIN_TRANSFERS] [int] NULL,
[THREE_MIN_RETAIL_TRANSFERS] [int] NULL,
[BASE_3_MINUTE_TRANSFER] [decimal](6, 3) NULL,
[3_MINUTE_TRANSFER_BONUS] [decimal](6, 3) NULL
)
--==================================
--IF @DUR_IN = 'SS' BEGIN
--	ALTER TABLE #IMPORTS_DATALOT_AGENT_INVOICING_RTN ALTER COLUMN ALLREDDUR     INT
--
--	ALTER TABLE #IMPORTS_DATALOT_AGENT_INVOICING_RTN ALTER COLUMN AIRITKDUR     INT
--	ALTER TABLE #IMPORTS_DATALOT_AGENT_INVOICING_RTN ALTER COLUMN AIRIACDUR     INT
--	--Never!  ALTER TABLE #IMPORTS_DATALOT_AGENT_INVOICING_RTN ALTER COLUMN AIRIMGDUR     INT  --Should always stay dec().
--	--Never!  ALTER TABLE #IMPORTS_DATALOT_AGENT_INVOICING_RTN ALTER COLUMN AIRIAIDUR     INT  --Should always stay dec().
--
--	--Never!  ALTER TABLE #IMPORTS_DATALOT_AGENT_INVOICING_RTN ALTER COLUMN ALL_AIRIAIDUR INT  --Should always stay dec().
--END
--==================================
INSERT INTO #IMPORTS_DATALOT_AGENT_INVOICING_RTN
SELECT
 20								--AS GRPNO  
,ISNULL(GG.TENANT_NAME       ,'') AS TENANT_NAME
,ISNULL(GG.ID_EXT            ,'') AS ID_EXT
,ISNULL(GG.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
,ISNULL(GG.EMPLOYEE_ID       ,'') AS EMPLOYEE_ID
,ISNULL(GG.EMAIL			 ,'') AS EMAIL
,ISNULL(GG.RESOURCE_NAME     ,'') AS RESOURCE_NAME
,ISNULL(GG.CATS_ID			 ,'') AS CATS_ID
,ISNULL(GG.ASA_NAME			 ,'') AS ASA_NAME
,ISNULL(GG.CAL_YEAR_MONTH_NUM,'') AS CAL_YEAR_MONTH_NUM
,ISNULL(GG.DI                ,'') AS DI
,ISNULL(GG.TI                ,'') AS TI

,(GG.AIR_DAY_TYPE)					AS AIR_DAY_TYPE
,(GG.AIR_ACW_FONT_COLOR)			AS AIR_ACW_FONT_COLOR
,(GG.MIN_GUARANTEE_RATE)			AS MIN_GUARANTEE_RATE
,(GG.MIN_GUARANTEE_MINUTES)			AS MIN_GUARANTEE_MINUTES
,(GG.MIN_GUARANTEE_TYPE)			AS MIN_GUARANTEE_TYPE
,(GG.WRAP_MINUTE_RATE)				AS WRAP_MINUTE_RATE
,(GG.BASE_3_MINUTE_XFER_RATE)		AS BASE_3_MINUTE_XFER_RATE
,(GG.[3_MINUTE_XFER_BONUS_RATE])	AS [3_MINUTE_XFER_BONUS_RATE]
,(GG.ELIGIBLE_FOR_XFER_BONUS)		AS ELIGIBLE_FOR_XFER_BONUS
,(GG.AUTHORIZED_TO_INVOICE_TYPE)	AS AUTHORIZED_TO_INVOICE_TYPE
,(GG.TOTAL_AUTHORIZED_PAY)			AS TOTAL_AUTHORIZED_PAY
,(GG.TOTAL_AUTHORIZED_XFER_PAY)		AS TOTAL_AUTHORIZED_XFER_PAY
,(GG.HAS_HOLIDAYS)					AS HAS_HOLIDAYS
,(GG.PAY_RATE_STANDARD)				AS PAY_RATE_STANDARD
,(GG.PAY_RATE_HOLIDAY)				AS PAY_RATE_HOLIDAY
,(GG.INCLUDE_IN_CAS)				AS INCLUDE_IN_CAS
,(GG.READY_FOR_XML)					AS READY_FOR_XML
,(GG.SHOW_ID_EXTS)					AS SHOW_ID_EXTS

,'' --AS AIR_HOLIDAY_IN
,0  --AS ALL_AUTHORIZED_TIME
,0  --AS ALL_AUTHORIZED_XFERS

,(ISNULL(GG.INBOUND_CALLS,0))        AS INBOUND_CALLS
,(ISNULL(GG.OUTBOUND_CALLS,0))       AS OUTBOUND_CALLS
,(ISNULL(GG.TOTAL_CALLS,0))			 AS TOTAL_CALLS
,(ISNULL(GG.SUCCESSFUL_TRANSFERS,0)) AS SUCCESSFUL_TRANSFERS

,CAST((ISNULL(GG.ONLINE_TIME		,0)) / @DS AS DECIMAL(10,2)) AS ONLINE_TIME
,CAST((ISNULL(GG.CONNECTED_TIME		,0)) / @DS AS DECIMAL(10,2)) AS CONNECTED_TIME
,CAST((ISNULL(GG.WRAP_TIME			,0)) / @DS AS DECIMAL(10,2)) AS WRAP_TIME
,CAST((ISNULL(GG.WAITING_TIME		,0)) / @DS AS DECIMAL(10,2)) AS WAITING_TIME
,CAST((ISNULL(GG.WRAP_ADJ_TIME		,0)) / @DS AS DECIMAL(10,2)) AS WRAP_ADJ_TIME
,CAST((ISNULL(GG.WRAP_ALLOWED		,0)) / @DS AS DECIMAL(10,2)) AS WRAP_ALLOWED
,CAST((ISNULL(GG.AUTHORIZED_WRAP	,0)) / @DS AS DECIMAL(10,2)) AS AUTHORIZED_WRAP
,CAST((ISNULL(GG.CPROD				,0)) / @DS AS DECIMAL(10,2)) AS CPROD
,CAST((ISNULL(GG.MINIMUM_GUARANTEE	,0)) / @DS AS DECIMAL(10,2)) AS MINIMUM_GUARANTEE
,CAST((ISNULL(GG.AUTHORIZED_MINUTES	,0)) / @DS AS DECIMAL(10,2)) AS AUTHORIZED_MINUTES

,(ISNULL(GG.BILLABLE_TALK,0.000))			AS BILLABLE_TALK
,(ISNULL(GG.BILLABLE_WRAP,0.000))			AS BILLABLE_WRAP
,(ISNULL(GG.AUTHORIZED_TRANSFERS,0))		AS AUTHORIZED_TRANSFERS
,(ISNULL(GG.TOTAL_TRANSFERS,0))				AS TOTAL_TRANSFERS
,(ISNULL(GG.THREE_MIN_TRANSFERS,0))			AS THREE_MIN_TRANSFERS
,(ISNULL(GG.THREE_MIN_RETAIL_TRANSFERS,0))	AS THREE_MIN_RETAIL_TRANSFERS
,(ISNULL(GG.BASE_3_MINUTE_TRANSFER,0.000))		AS BASE_3_MINUTE_TRANSFER
,(ISNULL(GG.[3_MINUTE_TRANSFER_BONUS],0.000))	AS [3_MINUTE_TRANSFER_BONUS]

FROM  -- GG STARTS HERE:
(	SELECT
	 ISNULL(SW.TENANT_NAME,'')        AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  AS EMPLOYEE_ID
	,ISNULL(SW.EMAIL,'')			  AS EMAIL
	,MAX(RESOURCE_NAME)               AS RESOURCE_NAME
	,ISNULL(SW.CATS_ID,'')			  AS CATS_ID
	,MAX(ASA_NAME)					  AS ASA_NAME

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) AS TI

	,MAX(SW.AIR_DAY_TYPE)								AS AIR_DAY_TYPE
	,MAX(SW.AIR_ACW_FONT_COLOR)							AS AIR_ACW_FONT_COLOR
	,MAX(SW.MIN_GUARANTEE_RATE)							AS MIN_GUARANTEE_RATE
	,MAX(SW.MIN_GUARANTEE_MINUTES)						AS MIN_GUARANTEE_MINUTES
	,MAX(SW.MIN_GUARANTEE_TYPE)							AS MIN_GUARANTEE_TYPE
	,MAX(SW.WRAP_MINUTE_RATE)							AS WRAP_MINUTE_RATE
	,MAX(SW.BASE_3_MINUTE_XFER_RATE)					AS BASE_3_MINUTE_XFER_RATE
	,MAX(SW.[3_MINUTE_XFER_BONUS_RATE])					AS [3_MINUTE_XFER_BONUS_RATE]
	,MAX(SW.ELIGIBLE_FOR_XFER_BONUS)					AS ELIGIBLE_FOR_XFER_BONUS
	,MAX(SW.AUTHORIZED_TO_INVOICE_TYPE)					AS AUTHORIZED_TO_INVOICE_TYPE
	,SUM(ISNULL(SW.TOTAL_AUTHORIZED_PAY,0.000))			AS TOTAL_AUTHORIZED_PAY
	,SUM(ISNULL(SW.TOTAL_AUTHORIZED_XFER_PAY,0.000))	AS TOTAL_AUTHORIZED_XFER_PAY
	,MAX(SW.HAS_HOLIDAYS)								AS HAS_HOLIDAYS
	,MAX(SW.PAY_RATE_STANDARD)							AS PAY_RATE_STANDARD
	,MAX(SW.PAY_RATE_HOLIDAY)							AS PAY_RATE_HOLIDAY
	,MAX(SW.INCLUDE_IN_CAS)								AS INCLUDE_IN_CAS
	,MAX(SW.READY_FOR_XML)								AS READY_FOR_XML
	,MAX(SW.SHOW_ID_EXTS)								AS SHOW_ID_EXTS

	,SUM(ISNULL(SW.INBOUND_CALLS,0))				AS INBOUND_CALLS
	,SUM(ISNULL(SW.OUTBOUND_CALLS,0))				AS OUTBOUND_CALLS
	,SUM(ISNULL(SW.TOTAL_CALLS,0))					AS TOTAL_CALLS
	,SUM(ISNULL(SW.SUCCESSFUL_TRANSFERS,0))			AS SUCCESSFUL_TRANSFERS
	,SUM(ISNULL(SW.ONLINE_TIME,0))					AS ONLINE_TIME
	,SUM(ISNULL(SW.CONNECTED_TIME,0))				AS CONNECTED_TIME
	,SUM(ISNULL(SW.WRAP_TIME,0))					AS WRAP_TIME
	,SUM(ISNULL(SW.WAITING_TIME,0))					AS WAITING_TIME
	,SUM(ISNULL(SW.WRAP_ADJ_TIME,0))				AS WRAP_ADJ_TIME
	,SUM(ISNULL(SW.WRAP_ALLOWED,0))					AS WRAP_ALLOWED
	,SUM(ISNULL(SW.AUTHORIZED_WRAP,0))				AS AUTHORIZED_WRAP
	,SUM(ISNULL(SW.CPROD,0))						AS CPROD
	,SUM(ISNULL(SW.MINIMUM_GUARANTEE,0))			AS MINIMUM_GUARANTEE
	,SUM(ISNULL(SW.AUTHORIZED_MINUTES,0))			AS AUTHORIZED_MINUTES
	,SUM(ISNULL(SW.BILLABLE_TALK,0.000))			AS BILLABLE_TALK
	,SUM(ISNULL(SW.BILLABLE_WRAP,0.000))			AS BILLABLE_WRAP
	,SUM(ISNULL(SW.AUTHORIZED_TRANSFERS,0))			AS AUTHORIZED_TRANSFERS
	,SUM(ISNULL(SW.TOTAL_TRANSFERS,0))				AS TOTAL_TRANSFERS
	,SUM(ISNULL(SW.THREE_MIN_TRANSFERS,0))			AS THREE_MIN_TRANSFERS
	,SUM(ISNULL(SW.THREE_MIN_RETAIL_TRANSFERS,0))		AS THREE_MIN_RETAIL_TRANSFERS
	,SUM(ISNULL(SW.BASE_3_MINUTE_TRANSFER,0.000))		AS BASE_3_MINUTE_TRANSFER
	,SUM(ISNULL(SW.[3_MINUTE_TRANSFER_BONUS],0.000))	AS [3_MINUTE_TRANSFER_BONUS]

	FROM            #IMPORTS_DATALOT_AGENT_INVOICING          SW
	INNER JOIN      DATE_TIME					              DT   ON DT.DATE_TIME_KEY              = SW.STD_TENANT_START_DATE_TIME_KEY
													 
	--WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END		  --AND (@TENANT_KEY   IN ('0','') OR SW.TENANT_KEY   = CAST(@TENANT_KEY AS INT) )

	GROUP BY 
	 ISNULL(SW.TENANT_NAME,'')        --AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             --AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') --AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  --AS EMPLOYEE_ID
	,ISNULL(SW.EMAIL,'')			  --AS EMAIL
	,ISNULL(SW.CATS_ID,'')			  --AS CATS_ID

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) --AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) --AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) --AS TI

	--,(ISNULL(SW.FF_FULL_NAME,''))         --AS FF_FULL_NAME
	--,(ISNULL(SW.FF_LOGIN_ID,''))          --AS FF_LOGIN_ID

) GG



--==================================
--IS A HOLIDAY DATE IN THE MIX:
--==================================
DECLARE @HOLIDAY_IN VARCHAR(1)
SET @HOLIDAY_IN = 'N'
DECLARE @I INT
SET @I = (SELECT COUNT(*) FROM #IMPORTS_DATALOT_AGENT_INVOICING_RTN WHERE AIR_DAY_TYPE = 'H')  --  AND INCLUDE_IN_CAS = 'Y')
IF @I > 0 BEGIN
	SET @HOLIDAY_IN = 'Y'
END
--==================================
UPDATE #IMPORTS_DATALOT_AGENT_INVOICING_RTN SET
 AIR_HOLIDAY_IN = @HOLIDAY_IN

--======================================================
--UPDATE TOTALS LINE ON REPORT FOR STANDARD AND HOLIDAY:
--======================================================
UPDATE #IMPORTS_DATALOT_AGENT_INVOICING_RTN SET
 ALL_AUTHORIZED_TIME = ISNULL(LOJ.ALL_AUTHORIZED_TIME,0.0)
FROM #IMPORTS_DATALOT_AGENT_INVOICING_RTN TA
LEFT OUTER JOIN
(	SELECT
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
	,SUM(AUTHORIZED_MINUTES) AS ALL_AUTHORIZED_TIME
	FROM #IMPORTS_DATALOT_AGENT_INVOICING_RTN 
	GROUP BY 
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
) LOJ ON LOJ.SCHEDULER_ACL_NAME = TA.SCHEDULER_ACL_NAME
	 AND LOJ.EMPLOYEE_ID        = TA.EMPLOYEE_ID
	 AND LOJ.AIR_DAY_TYPE       = TA.AIR_DAY_TYPE


UPDATE #IMPORTS_DATALOT_AGENT_INVOICING_RTN SET
 ALL_AUTHORIZED_XFERS = ISNULL(LOJ.ALL_AUTHORIZED_XFERS,0)
FROM #IMPORTS_DATALOT_AGENT_INVOICING_RTN TA
LEFT OUTER JOIN
(	SELECT
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
	,SUM(AUTHORIZED_TRANSFERS) AS ALL_AUTHORIZED_XFERS
	FROM #IMPORTS_DATALOT_AGENT_INVOICING_RTN 
	GROUP BY 
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
) LOJ ON LOJ.SCHEDULER_ACL_NAME = TA.SCHEDULER_ACL_NAME
	 AND LOJ.EMPLOYEE_ID        = TA.EMPLOYEE_ID
	 AND LOJ.AIR_DAY_TYPE       = TA.AIR_DAY_TYPE

--==================================
--RETURN DATA
--==================================
--==================================
--POPULATE TABLE READ BY SSIS TO GET END DATE OF DATA REPORT/FILE HAS BEEN RUN FOR:
--==================================
INSERT INTO YZ_TB_FILENAMES_FOR_SSIS
(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
SELECT
 'uspIMPORTS_DATALOT_AGENT_INVOICING'  --SQL_JOB_NAME
,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,111),'/','')   --FILENM   YYYYMMDD_...
,dbo.getdate()  --CST_ROW_CREATED_TIME

--=====================================
--RETURN DATASET:
--=====================================
SELECT 
 CASE WHEN @DUR_IN = 'SS' THEN '' ELSE 'F' END AS DUR_FORMAT
,CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
,V.*

FROM      #IMPORTS_DATALOT_AGENT_INVOICING_RTN  V

ORDER BY 
 V.GRPNO
,V.SCHEDULER_ACL_NAME
,V.EMPLOYEE_ID
,V.CAL_YEAR_MONTH_NUM
,V.DATE_INTERVAL
,V.TIME_INTERVAL  --SINCE IN MILITARY TIME!




--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_DATALOT_AGG_PERFORMANCE_IMPORT_STATUS]...';


GO






CREATE PROCEDURE [dbo].[uspIMPORTS_DATALOT_AGG_PERFORMANCE_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_DATALOT_AGG_PERFORMANCE_IMPORT_STATUS] '06/01/2014','06/06/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_DATALOT_AGG_PERFORMANCE_IMPORT_STATUS] '06/20/2014','06/30/2014','','W'

--===========================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--===========================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_DATALOT_AGG_PERFORMANCE_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_DATALOT_AGG_PERFORMANCE_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_DATALOT_AGG_PERFORMANCE_IMPORT_STATUS
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_DATALOT_AGG_PERFORMANCE_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0)															AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_DATALOT_AGG_PERFORMANCE  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

---- AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA
--END  --IF @PSW...

--=================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=================================================================
--DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = @TENANT_KEY
----  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 106
--=================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

--CREATE CURSOR, POPULATE CURSOR FOR DATE RANGE, SPIN THROUGH EACH OF THE DAILY RECORDS, CONCATENATING TO STRING FOR EACH DATE MISSING.

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	
	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_DATALOT_AGG_PERFORMANCE_IMPORT_STATUS   I   ON I.FILEDATETIME                   = DT.FILEDATETIME

WHERE ISNULL(I.RCD_CNT,0) = 0

  --AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)
  --AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
		SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

			SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 8:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
		END
	END
	ELSE BEGIN
		SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
		END
	END
	
END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--DATALOT_AGG_PERFORMANCE:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM WSOL_TB_IMPORT_ERRORS_FOUND
							   WHERE TENANT_KEY = 900704 AND SUB_GROUP_NAME = 'DATALOT_AGG_PERFORMANCE' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_DATALOT_AGG_PERFORMANCE_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_DATALOT_AGG_PERFORMANCE_Summary]...';


GO







CREATE PROCEDURE [dbo].[uspIMPORTS_DATALOT_AGG_PERFORMANCE_Summary]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_DATALOT_AGG_PERFORMANCE_Summary] '06/01/2014','06/07/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_DATALOT_AGG_PERFORMANCE_Summary] '06/07/2014','06/07/2014','','W'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

			IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly 
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--TO TEST:
		--DECLARE
		-- @DTM_BEG DATETIME
		--,@DTM_END DATETIME
		----SET @DTM_BEG = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_END = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_BEG = CAST('08/02/2012' AS DATETIME)
		----SET @DTM_END = CAST('08/02/2012' AS DATETIME)
		--SET @DTM_BEG = CAST('08/03/2012' AS DATETIME)
		--SET @DTM_END = CAST('08/03/2012' AS DATETIME)

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		--SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		--SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--07/06/2012 IS AN INVOICE FRIDAY.  SAME AS 05/23/2014.
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_DATALOT_AGG_PERFORMANCE_Summary') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_DATALOT_AGG_PERFORMANCE_Summary
END
CREATE TABLE #IMPORTS_DATALOT_AGG_PERFORMANCE_Summary
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_DATALOT_AGG_PERFORMANCE_Summary
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')       --AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') --AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')             --AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_DATALOT_AGG_PERFORMANCE  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA

--END  --IF @PSW...


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT      
,'White' AS BG_COLOR

FROM #IMPORTS_DATALOT_AGG_PERFORMANCE_Summary 

ORDER BY
-- CALL_DATETIME           
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT      


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_DATALOT_AIA_AGENT_MAPPING_IMPORT]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_DATALOT_AIA_AGENT_MAPPING_IMPORT]
AS
SET NOCOUNT ON  -- EXECUTE [dbo].[uspIMPORTS_DATALOT_AIA_AGENT_MAPPING_IMPORT]

--  DELETE FROM YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1

--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1

--Data Loading FTP Pathway
--  FTP server   = ftp.workingsol.com
--  FTP Username = global_imports
--  FTP Password = Welcome2013
--  FTP Pathway  = /DataLot/Client_Delivery/AIA_Stats/AIA_AGENT_MAPPING

--USES YZ_TB_ERRORS_FOUND.  NOT TOTALLY INDEPENDANT OF OTHER CLIENTS/TENANTS...

--=============================================  --COPY AND REPLACE THESE VARIABLES WHEN CREATING NEW USP FROM THIS USP.
DECLARE
 @TENANT_KEY      INT
,@SUB_GROUP_NAME  VARCHAR(50)
SET @TENANT_KEY     =       900700  --DATALOT    --will begin with 900+ for external tenants.  the '900' is Not part of yz_tb_tenant_key in YZ_TB_TENANTS table.
SET @SUB_GROUP_NAME = 'DATALOT_AIA_AGENT_MAPPING'
--=============================================
--WHEN RUNNING MANUALLY DURING TESTING:DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900700  AND SUB_GROUP_NAME = 'DATALOT_AIA_AGENT_MAPPING'
DELETE FROM YZ_TB_ERRORS_FOUND 
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = @SUB_GROUP_NAME  --'DATALOT_AIA_AGENT_MAPPING'    --  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900700
--=============================================
--WHEN RUNNING MANUALLY DURING TESTING:DELETE FROM YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_ERRORS WHERE TENANT_KEY = 900700  AND IMPORT_SUB_GROUP_NAME = 'DATALOT_AIA_AGENT_MAPPING'
DELETE FROM YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_ERRORS
WHERE IMPORT_SUB_GROUP_NAME = @SUB_GROUP_NAME  --'DATALOT_AIA_AGENT_MAPPING' --SELECT * FROM YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_ERRORS WHERE TENANT_KEY = 900700
--=============================================

--SHOULD I GO FOR DIVISION/SEPARATION SO THAT ITS EASIER TO GIVE PROCESSES TO OTHER PROGRAMMERS/RPT WRITERS, OR CONSOLIDATE AND STANDARDIZE?  
--  LOOKING IN THE SAME TABLES SHOULDN'T BE ANY DIFFERENT THAN LOOKING IN IRF OR MSF IN GENESYS.  CONSOLIDATION MAKES MORE SENSE PROGRAMMATICALLY,
--    BUT THE PAST LESSONS LEARNED POUNDS THE MESSAGE IN THAT ANY SIMILARITIES BETWEEN TENANTS NOW IS SHORT-LIVED!!!
--WE'RE STILL GOING TO DO CONSOLIDATED AND STANDARDIZED, FOR NOW ANYWAY !!!

--=============================================
--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1
--=============================================

--=============================================
--CLEANUP WORK (_1) TABLE:
--=============================================
--DELETE FROM YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1 
--WHERE ( ISNULL(INVOICE_MAP_KEY,'') = '' )
--   OR ( ISNULL(PAY_GROUP,'') = '' )

--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1

--=============================================
--THE ELIMINATION OF THE 'SPECIAL CHARACTER' !!!
--  This ' ' is a special character!! and maybe just a cocky space!!!
--  Hightlight it and do ctl+f, on suspected data, you'll see it isn't a space !
--=============================================
UPDATE YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1 SET
 RESOURCE_NAME            = RTRIM(LTRIM(REPLACE(ISNULL(RESOURCE_NAME	,''),' ',' ')))
,[EMAIL]                  = RTRIM(LTRIM(REPLACE(ISNULL([EMAIL]			,''),' ',' ')))
,FF_USERNAME			  = RTRIM(LTRIM(REPLACE(ISNULL(FF_USERNAME		,''),' ',' ')))
,FF_AGENT_ID			  = RTRIM(LTRIM(REPLACE(ISNULL(FF_AGENT_ID		,''),' ',' ')))
,INVOICE_MAP_KEY          = RTRIM(LTRIM(REPLACE(ISNULL(INVOICE_MAP_KEY	,''),' ',' ')))    
,FF_RESOURCE              = RTRIM(LTRIM(REPLACE(ISNULL(FF_RESOURCE		,''),' ',' ')))
,PAY_GROUP				  = RTRIM(LTRIM(REPLACE(ISNULL(PAY_GROUP		,''),' ',' ')))
,FF_ASA_NAME			  = RTRIM(LTRIM(REPLACE(ISNULL(FF_ASA_NAME		,''),' ',' ')))

--=============================================
--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1
--=============================================

--=============================================
--POPULATE ANY/OTHER ADDITIONAL FIELDS IN WORK TABLE (_1) THAT WEREN'T IN IMPORTED FILE:
--=============================================
UPDATE YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1 SET
 FF_AGENT_ID = INVOICE_MAP_KEY

--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_ERRORS
--======================================================================
--PROCESS DUPLICATES:
--======================================================================
INSERT INTO YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_ERRORS
(RESOURCE_NAME
,EMAIL
,FF_USERNAME
,FF_AGENT_ID
,INVOICE_MAP_KEY
,FF_RESOURCE
,FTP_FILE_NAME
,PAY_GROUP
,FF_ASA_NAME
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG
)
SELECT
 W1.RESOURCE_NAME
,W1.[EMAIL]
,W1.FF_USERNAME
,W1.FF_AGENT_ID
,W1.INVOICE_MAP_KEY
,W1.FF_RESOURCE
,W1.FTP_FILE_NAME
,W1.PAY_GROUP
,W1.FF_ASA_NAME
,dbo.getdate()        --WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'DATALOT_AIA_AGENT_MAPPING'  --IMPORT_SUB_GROUP_NAME
,'DUP'            --ERROR_TAG
,'The invoice_map_key exists more than once in the agent mapping file.'  --ERROR_MSG
--  SELECT *  
FROM YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1  W1
INNER JOIN
(	SELECT
	 INVOICE_MAP_KEY
	,ROW_NUMBER() over (partition by INVOICE_MAP_KEY
                            order by INVOICE_MAP_KEY) ROWNO
	FROM YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1
) TNM  ON TNM.INVOICE_MAP_KEY = W1.INVOICE_MAP_KEY

LEFT OUTER JOIN YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_ERRORS AME   ON AME.INVOICE_MAP_KEY = W1.INVOICE_MAP_KEY

WHERE TNM.ROWNO > 1   

  AND ISNULL(AME.ERROR_TAG,'') = ''   --THE JOIN TO AME AND THIS LINE IS NOT REALLY NECESSARY SINCE THIS IS FIRST INSERTS INTO AME.!!!

----=============================================
----DELETE DUPLICATES FROM WORK (_1) TABLE:
----  THERE IS NO WAY TO KNOW WHICH DUPLICATE SHOULD BE KEPT AND WHICH SHOULD BE DELETED, SO THEY BOTH GET DELETED AND PM CAN CORRECT AND SO ON...
----=============================================
--DON'T NEED TO DO DELETES, BECAUSE THE RECORDS NEEDING TO BE DELETED EXIST IN THE MAPPING ERRORS TABLE.
--  THE MAPPING ERRORS TABLE CAN BE USED BELOW WHEN DOING THE INSERT INTO THE PERMANENT TABLE, SO THAT THE BAD RECORDS IN THE WORK TABLE DON'T GET INSERTED.
--===============================================

--=============================================	--Hopefully generic enough for all Tenant SSIS to use!
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=============================================
--WHEN RUNNING MANUALLY DURING TESTING:INSERT INTO YZ_TB_ERRORS_FOUND SELECT 900700,'DATALOT_AIA_AGENT_MAPPING',''              
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--SQL won't insert special characters!!!  + CHAR(9)  --CHAR(10) + CHAR(13)
--Check #1:  ===================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1)
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + '1) File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #2:  ===================================================================================================
	
--Check #3:  ===================================================================================================
--	SET @RCD_CNT  = (	SELECT COUNT(*)
--						FROM YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1
--						WHERE ACD_ID_EXTENSION NOT IN ('G??')
--					)  
--	IF @RCD_CNT > 0 BEGIN
--		SET @MSG1 = @MSG1 + '3) Invalid ID Extension(s) in File.  Import was Cancelled.  Nothing was Imported.   |   ' 
--		SET @ERR_CNT = @ERR_CNT + 1
--	END
--Check #n:  ===================================================================================================
--	SET @MSG1 = @MSG1 + '2) Something not right with something.  Import was cancelled.  Nothing was Imported.     '
--	--SET @RCD_CNT = (	SELECT COUNT(*)
--	--					FROM YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1
--	--					WHERE 'something' <> 'somethingelse'
--	--				  )  --If nothing imported in work table, don't need to return error.  That check is done in SSIS currently.

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	--SSIS reads yz_tb_errors_found table where tenant_key = 900700, and if record exists, outputs results/error_msg field in an email.
	INSERT INTO YZ_TB_ERRORS_FOUND
	(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY      --TENANT_KEY
	,@SUB_GROUP_NAME  --'DATALOT_AIA_AGENT_MAPPING'   --SUB_GROUP_NAME
	,@MSG1            --ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	--Check #1:  ===================================================================================================
	--DECLARE
	-- @DTM_BEG AS DATETIME
	--,@DTM_END AS DATETIME              --Don't change '07/06/2012' !!!
	--SET @DTM_BEG = (DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 14)
	--SET @DTM_END = (DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) -  1) + 1

	--CREATE CURSOR, POPULATE CURSOR FOR 2 WEEK DATE RANGE, SPIN THROUGH EACH OF 14 RECORDS, CONCATENATING TO STRING FOR EACH DATE MISSING.
	--INSERT MISSING DATES STRING INTO YZ_TB_IMPORTS_STATUS TABLE.

	--=============================================
	--Have to return a record for SSIS, no matter what, otherwise the f thing needs it's mommy:  Can't figure out how to get SSIS to work otherwise!!!
	INSERT INTO YZ_TB_ERRORS_FOUND
		(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY      --TENANT_KEY
	,@SUB_GROUP_NAME  --'DATALOT_AIA_AGENT_MAPPING'   --SUB_GROUP_NAME
	,''               --ERROR_MSG  --Never make this @MSG1 !!!  Must stay as ''.
	--Do NOT want to got to early exit here because data was good, according to 'checks'!  We want to import data into permanent table.
END
--IN SSIS, WOULD SELECT FROM TABLE WHERE TENANT_KEY = 900700 AND STORE IN SSIS VARIABLE.  IF VARIABLE NOT EMPTY, WILL SEND EMAIL AND END SSIS...
--=============================================

--======================================================================
--PROCESS BAD RESOURCE FLAG VALUES:
--======================================================================
INSERT INTO YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_ERRORS
(RESOURCE_NAME
,EMAIL
,FF_USERNAME
,FF_AGENT_ID
,INVOICE_MAP_KEY
,FF_RESOURCE
,FTP_FILE_NAME
,PAY_GROUP
,FF_ASA_NAME
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG
)
SELECT
 W1.RESOURCE_NAME
,W1.[EMAIL]
,W1.FF_USERNAME
,W1.FF_AGENT_ID
,W1.INVOICE_MAP_KEY
,W1.FF_RESOURCE
,W1.FTP_FILE_NAME
,W1.PAY_GROUP
,W1.FF_ASA_NAME
,dbo.getdate()        --WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'DATALOT_AIA_AGENT_MAPPING'  --IMPORT_SUB_GROUP_NAME
,'SAN'            --ERROR_TAG
,'The Resource Identifier is invalid or is missing in AIA Agent Mapping file.'  --ERROR_MSG
--  SELECT *  
FROM            YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1           W1

--LEFT OUTER JOIN YZ_TB_AGENT_INVOICE_AUTOMATION_STATIC_DEFAULTS  AIASD ON AIASD.SCHEDULER_ACL_NAME = W1.SCHEDULER_ACL_NAME

LEFT JOIN       YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_ERRORS          AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
WHERE ISNULL(W1.FF_RESOURCE,'') NOT IN ('','Resource','Priority')  --Resource, Priority, or blank, where blank becomes 'Standard Agent', 'Resource' becomes 'Resource Agent', 'Priority' becomes 'Priority Agent'.

  AND ISNULL(AME.ERROR_TAG,'') = ''

--======================================================================
--PROCESS MISSING OR INVALID PAY GROUP VALUES:
--======================================================================
INSERT INTO YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_ERRORS
(RESOURCE_NAME
,EMAIL
,FF_USERNAME
,FF_AGENT_ID
,INVOICE_MAP_KEY
,FF_RESOURCE
,FTP_FILE_NAME
,PAY_GROUP
,FF_ASA_NAME
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG
)
SELECT
 W1.RESOURCE_NAME
,W1.[EMAIL]
,W1.FF_USERNAME
,W1.FF_AGENT_ID
,W1.INVOICE_MAP_KEY
,W1.FF_RESOURCE
,W1.FTP_FILE_NAME
,W1.PAY_GROUP
,W1.FF_ASA_NAME
,dbo.getdate()        --WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'DATALOT_AIA_AGENT_MAPPING'  --IMPORT_SUB_GROUP_NAME
,'PAY'            --ERROR_TAG
,'The PAY GROUP is missing in the AIA Agent Mapping file or it is an invalid value (must be an integer value).'  --ERROR_MSG
--  SELECT *  
FROM            YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1           W1

--LEFT OUTER JOIN YZ_TB_AGENT_INVOICE_AUTOMATION_STATIC_DEFAULTS  AIASD ON AIASD.SCHEDULER_ACL_NAME = W1.SCHEDULER_ACL_NAME

LEFT JOIN       YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_ERRORS          AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
WHERE (ISNULL(W1.PAY_GROUP,'') = ''					-- Currently 0 is original and only pay contract
   OR  ISNUMERIC(ISNULL(W1.PAY_GROUP,'')) <> 1
	   )  
  AND ISNULL(AME.ERROR_TAG,'') = ''

--======================================================================
--PROCESS MISSING INVOICE MAP KEY VALUES:
--======================================================================
INSERT INTO YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_ERRORS
(RESOURCE_NAME
,EMAIL
,FF_USERNAME
,FF_AGENT_ID
,INVOICE_MAP_KEY
,FF_RESOURCE
,FTP_FILE_NAME
,PAY_GROUP
,FF_ASA_NAME
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG
)
SELECT
 W1.RESOURCE_NAME
,W1.[EMAIL]
,W1.FF_USERNAME
,W1.FF_AGENT_ID
,W1.INVOICE_MAP_KEY
,W1.FF_RESOURCE
,W1.FTP_FILE_NAME
,W1.PAY_GROUP
,W1.FF_ASA_NAME
,dbo.getdate()        --WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'DATALOT_AIA_AGENT_MAPPING'  --IMPORT_SUB_GROUP_NAME
,'MAP'            --ERROR_TAG
,'The AGENT ID is missing in the AIA Agent Mapping file.'  --ERROR_MSG
--  SELECT *  
FROM            YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1           W1

--LEFT OUTER JOIN YZ_TB_AGENT_INVOICE_AUTOMATION_STATIC_DEFAULTS  AIASD ON AIASD.SCHEDULER_ACL_NAME = W1.SCHEDULER_ACL_NAME

LEFT JOIN       YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_ERRORS          AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
WHERE ISNULL(W1.INVOICE_MAP_KEY,'') = ''  -- Currently equal to the Agent ID

  AND ISNULL(AME.ERROR_TAG,'') = ''

--=============================================
--DELETE RECORDS WITH INVALID SCHEDULER_ACL_NAME(S):
--=============================================
--DON'T NEED TO DO DELETES, BECAUSE THE RECORDS NEEDING TO BE DELETED EXIST IN THE MAPPING ERRORS TABLE.
--  THE MAPPING ERRORS TABLE CAN BE USED BELOW WHEN DOING THE INSERT INTO THE PERMANENT TABLE, SO THAT THE BAD RECORDS IN THE WORK TABLE DON'T GET INSERTED.
--=============================================


--!!! UPDATING """PERMANENT""" TABLE HERE: !!!
--=============================================
--UPDATE PERMANENT TABLE WITH WORK TABLE DATA WHERE TENANT_KEY AND INVOICE_MAP_KEY FIELDS/VALUES MATCH:
--=============================================
UPDATE YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING SET
 RESOURCE_NAME    = W1.RESOURCE_NAME
,[EMAIL]          = W1.[EMAIL]
,FF_USERNAME      = W1.FF_USERNAME
,FF_AGENT_ID      = W1.FF_AGENT_ID
,INVOICE_MAP_KEY  = W1.INVOICE_MAP_KEY
,FF_RESOURCE      = W1.FF_RESOURCE
,FTP_FILE_NAME    = W1.FTP_FILE_NAME
,PAY_GROUP        = W1.PAY_GROUP
,FF_ASA_NAME	  = W1.FF_ASA_NAME
--,WS_ROW_CREATED_TIME
,CST_ROW_UPDATED_TIME = dbo.getdate()
--  SELECT *
FROM            YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1          W1
--INNER JOIN MUST BE HERE.  NEVER CHANGE!
INNER JOIN      YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING            G     ON G.INVOICE_MAP_KEY        = W1.INVOICE_MAP_KEY
LEFT JOIN       YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_ERRORS     AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
--Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE ISNULL(AME.ERROR_TAG,'') = ''

  AND (   ( G.RESOURCE_NAME   <> W1.RESOURCE_NAME )
	   OR ( G.[EMAIL]         <> W1.[EMAIL] )
	   OR ( G.FF_USERNAME     <> W1.FF_USERNAME )
	   OR ( G.FF_AGENT_ID     <> W1.FF_AGENT_ID )
	   OR ( G.INVOICE_MAP_KEY <> W1.INVOICE_MAP_KEY )
	   OR ( G.FF_RESOURCE     <> W1.FF_RESOURCE )
       OR ( G.PAY_GROUP       <> W1.PAY_GROUP )
	   OR ( G.FF_ASA_NAME	  <> W1.FF_ASA_NAME )
	   OR ( G.PAY_GROUP IS NULL)
	  )


--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING
--!!! INSERTING INTO """PERMANENT""" TABLE HERE: !!!
--=============================================
--INSERT "NEW" DATA FROM WORK TABLE INTO PERMANENT TABLE: 
--=============================================
INSERT INTO YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING
(RESOURCE_NAME
,EMAIL
,FF_USERNAME
,FF_AGENT_ID
,INVOICE_MAP_KEY
,FF_RESOURCE
,FTP_FILE_NAME
,PAY_GROUP
,FF_ASA_NAME
,CST_ROW_CREATED_TIME
,CST_ROW_UPDATED_TIME
)
SELECT
 W1.RESOURCE_NAME    
,W1.[EMAIL]          
,W1.FF_USERNAME
,W1.FF_AGENT_ID
,W1.INVOICE_MAP_KEY  
,W1.FF_RESOURCE      
,W1.FTP_FILE_NAME
,W1.PAY_GROUP  
,W1.FF_ASA_NAME  
,dbo.getdate()        --WS_ROW_CREATED_TIME
,NULL             --WS_ROW_UPDATED_TIME

FROM            YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_1          W1
LEFT JOIN       YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING            G     ON G.INVOICE_MAP_KEY        = W1.INVOICE_MAP_KEY
LEFT JOIN       YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_ERRORS     AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:
WHERE ( G.INVOICE_MAP_KEY IS NULL AND ISNULL(W1.INVOICE_MAP_KEY,'') <> '' )

  AND ISNULL(AME.ERROR_TAG,'') = ''

--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING    ORDER BY INVOICE_MAP_KEY 

--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_DATALOT_AIA_AGENT_MAPPING_IMPORT_STATUS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_DATALOT_AIA_AGENT_MAPPING_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHAT PROBLEMS THE RECENTLY IMPORTED AIA AGENT MAPPING FILE HAD DURING THE IMPORT/CLEANUP PROCESS.
--THIS USP IS DATA SOURCE FOR SRS GRID ON "AIA AGENT MAPPING" IMPORTS STATUS REPORT!!!

--  EXECUTE [dbo].[uspIMPORTS_DATALOT_AIA_AGENT_MAPPING_IMPORT_STATUS] '06/01/2014','06/10/2014','','R'

--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_ERRORS
--  SELECT * FROM YZ_TB_ERRORS_FOUND  --STILL NOT TOTALLY DEPENDANT BETWEEN OF OTHER CLIENTS/TENANTS.

--==================================
DECLARE 
 @TENANT_KEY      INT
,@SUB_GROUP_NAME  VARCHAR(50)
SET @TENANT_KEY     = 900700
SET @SUB_GROUP_NAME = 'DATALOT_AIA_AGENT_MAPPING'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
--	IF @TIME_INTERVAL IN ('15','30','HR','DY') BEGIN
--	    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)  --!!! HAVE TO CHANGE '-1' IF NEED TO PULL FILE FOR PREVIOUS DATE OTHER THAN YESTERDAY.!!!
--		SET @DTM_END = @DTM_BEG -- + 1
--	END
--	ELSE BEGIN
--		IF @TIME_INTERVAL IN ('WK') BEGIN  --SQL Job will run SRS Subscription on Sunday for previous Sunday to Saturday date range:
--		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 7,101) AS DATETIME)  --!!! HAVE TO CHANGE '-7' IF NEED TO PULL FILE FOR PREVIOUS DATE OTHER THAN YESTERDAY.!!!
--		    SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)  --!!! HAVE TO CHANGE '-1' IF NEED TO PULL FILE FOR PREVIOUS DATE OTHER THAN YESTERDAY.!!!
--		END
--		ELSE BEGIN  --'MO'  --SQL Job will run SRS Subscription on 1st of each month for previous Month date range:
			--SELECT DATEDIFF(dd,CAST('05/02/11' AS DATETIME),dbo.getdate())  --SELECT DATEADD(mm,1,dbo.getdate())

			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END

			--END
			--ELSE BEGIN
			--	SET @DTM_END      = CAST(CAST(DATEPART(mm  ,dbo.getdate() - 0) AS VARCHAR(2)) 
		    --                  + '/01/' + CAST(DATEPART(yyyy,dbo.getdate() - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
			--	--Subtract one day from 1st day of current date, which gives us last day of previous month:
			--	SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
			--	--Get 1st day of previous month from previous end date value:
			--	SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))
			--END
--		END
--	END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--TO TEST:
		--DECLARE
		-- @DTM_BEG DATETIME
		--,@DTM_END DATETIME
		----SET @DTM_BEG = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_END = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_BEG = CAST('08/02/2012' AS DATETIME)
		----SET @DTM_END = CAST('08/02/2012' AS DATETIME)
		--SET @DTM_BEG = CAST('08/03/2012' AS DATETIME)
		--SET @DTM_END = CAST('08/03/2012' AS DATETIME)

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('09/27/2013' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('09/27/2013' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

		--WHEN RAN ON FRI, 01/04/13, THE RESULTS RETURNS:  2012.12.21 - 2013.01.03    --FRI-THU   CORRECT!!!
		--SELECT CONVERT(VARCHAR(10),(DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 14),102) + ' - ' +
		--       CONVERT(VARCHAR(10),(DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 1),102)
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.




IF OBJECT_ID('TEMPDB..#IMPORTS_DATALOT_AIA_AGENT_MAPPING_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_DATALOT_AIA_AGENT_MAPPING_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_DATALOT_AIA_AGENT_MAPPING_IMPORT_STATUS
(	[RESOURCE_NAME] [varchar](100) NULL,
	[EMAIL] [varchar](100) NULL,
	[FF_USERNAME] [varchar] (50) NOT NULL,
	[FF_AGENT_ID] [varchar] (50) NULL,
	[INVOICE_MAP_KEY] [varchar](50) NOT NULL,
	[FF_RESOURCE] [varchar](50) NOT NULL,
	[FTP_FILE_NAME] [varchar](100) NULL,
	[PAY_GROUP] [varchar] (50) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[IMPORT_SUB_GROUP_NAME] [varchar](100) NULL,
	[ERROR_TAG] [varchar](50) NULL,
	[ERROR_MSG] [varchar](2500) NULL
)
INSERT INTO #IMPORTS_DATALOT_AIA_AGENT_MAPPING_IMPORT_STATUS
SELECT
 RESOURCE_NAME
,[EMAIL]
,FF_USERNAME
,FF_AGENT_ID
,INVOICE_MAP_KEY
,FF_RESOURCE
--,FTP_FILE_NAME
,REPLACE(FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
,PAY_GROUP
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG

FROM            YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING_ERRORS     I   



--==================================
--ALTER TABLE IF DURATIONS WANTED IN SECONDS:  --TABLE FIRST CREATED WITH FIELDS DEFINED AS "DECIMAL(10,2)"...
--==================================
--IF @DUR_IN = 'SS' BEGIN
--	ALTER TABLE #IMPORTS_DATALOT_AIA_AGENT_MAPPING_IMPORT_STATUS ALTER COLUMN LOGIN_DUR     INT
--END

--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_DATALOT_AIA_AGENT_MAPPING_IMPORT_STATUS)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
--=============================================
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_DATALOT_AIA_AGENT_MAPPING_IMPORT_STATUS
	SELECT
	 ''  --RESOURCE_NAME
	,''  --[EMAIL]
	,''  --FF_USERNAME
	,''  --FF_AGENT_ID
	,''  --INVOICE_MAP_KEY
	,''  --FF_RESOURCE
	,''  --FTP_FILE_NAME
	,''  --PAY_GROUP
	,dbo.getdate()  --WS_ROW_CREATED_TIME
	,''  --IMPORT_SUB_GROUP_NAME
	,''  --ERROR_TAG
	,''  --ERROR_MSG
END 
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RCD_CNT = 0 BEGIN  --IF @RCD_CNT = 0 HERE,IT ACTUALLY EQUALS THE ONE INSERTED STATING 'No Prolems.' IN ERROR_MSG.
	SET @MSG1 = @MSG1 + 'There were No DataLot AIA Agent Mapping Import Errors Found.'
END
ELSE BEGIN
	--IF (DATEDIFF(DD,CAST('01/20/2012' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN 
	--IF (DATEDIFF(DD,CAST('09/27/2013' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
	IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
		--This is an Invoice Friday:
		IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN  --end date + 1 may not be today, so dbo.getdate() is checked...
			SET @MSG1 = 'Today, '
		END
		SET @MSG1 = @MSG1 + CONVERT(VARCHAR(10),@DTM_END,101) + ', is Invoice Friday. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	END
	SET @MSG1 = @MSG1 + 'The list below contains errors found during the process of importing the DataLot AIA Agent Mapping .csv file. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	SET @MSG1 = @MSG1 + 'Project Management will need to add, remove, or update agent information in their DataLot AIA Agent Mapping .csv/"living" documents '
	SET @MSG1 = @MSG1 + 'and copy them to the FTP directory in order for these agents to be invoiced through the Scheduler system. ' + CHAR(13) + CHAR(10)

	--This put directly in report at bottom, in new table, with different font size...:
	--SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Please forward any questions or problems with this notification to dthola@wslive.com.  Thanks.'
END

IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF @RCD_CNT = 0 BEGIN
		SET @MSG1 = @MSG1 + 'There were No DataLot AIA Agent Mapping Import Errors Found.'
	END
	ELSE BEGIN
		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
			SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Posting Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		END

		SET @MSG1 = @MSG1 + 'The list below contains errors found during the process of importing the DataLot AIA Agent Mapping .csv file. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
		SET @MSG1 = @MSG1 + 'Project Management will need to add, remove, or update agent information in their DataLot AIA Agent Mapping .csv/"living" documents '
		SET @MSG1 = @MSG1 + 'and copy them to the FTP directory in order for these agents to be invoiced through the Scheduler system. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	END
END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)

	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM YZ_TB_ERRORS_FOUND 
							   WHERE TENANT_KEY = @TENANT_KEY AND SUB_GROUP_NAME = @SUB_GROUP_NAME )
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some problems were noticed during the DataLot AIA Agent Mapping import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'And any in list below.'
	END
END



--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_DATALOT_AIA_AGENT_MAPPING_IMPORT_STATUS 

ORDER BY
 INVOICE_MAP_KEY

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_AGENTS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_AGENTS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHICH INVOICE_MAP_KEY VALUES EXIST IN THE ACTIVITY FILES, BUT NOT IN THE AIA_AGENT_MAPPING .CSV FILES.
--            NO MATCHES BETWEEN ACTIVITY AND AGENT MAPPING.  WHEN NO MATCHES, THEN NO 'SCHEDULER' INVOICING.
--THIS USP IS DATA SOURCE FOR SRS GRID ON "ACTIVITY IMPORTS" STATUS REPORT!!!

--  EXECUTE [dbo].[uspIMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_AGENTS] '10/25/2013','11/17/2013','900611','DATALOT_AIA_AGENT_MAPPING','','R'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
--	IF @TIME_INTERVAL IN ('15','30','HR','DY') BEGIN
--	    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)  --!!! HAVE TO CHANGE '-1' IF NEED TO PULL FILE FOR PREVIOUS DATE OTHER THAN YESTERDAY.!!!
--		SET @DTM_END = @DTM_BEG -- + 1
--	END
--	ELSE BEGIN
--		IF @TIME_INTERVAL IN ('WK') BEGIN  --SQL Job will run SRS Subscription on Sunday for previous Sunday to Saturday date range:
--		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 7,101) AS DATETIME)  --!!! HAVE TO CHANGE '-7' IF NEED TO PULL FILE FOR PREVIOUS DATE OTHER THAN YESTERDAY.!!!
--		    SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)  --!!! HAVE TO CHANGE '-1' IF NEED TO PULL FILE FOR PREVIOUS DATE OTHER THAN YESTERDAY.!!!
--		END
--		ELSE BEGIN  --'MO'  --SQL Job will run SRS Subscription on 1st of each month for previous Month date range:
			--SELECT DATEDIFF(dd,CAST('05/02/11' AS DATETIME),dbo.getdate())  --SELECT DATEADD(mm,1,dbo.getdate())

			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END

			--END
			--ELSE BEGIN
			--	SET @DTM_END      = CAST(CAST(DATEPART(mm  ,dbo.getdate() - 0) AS VARCHAR(2)) 
		    --                  + '/01/' + CAST(DATEPART(yyyy,dbo.getdate() - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
			--	--Subtract one day from 1st day of current date, which gives us last day of previous month:
			--	SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
			--	--Get 1st day of previous month from previous end date value:
			--	SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))
			--END
--		END
--	END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--TO TEST:
		--DECLARE
		-- @DTM_BEG DATETIME
		--,@DTM_END DATETIME
		----SET @DTM_BEG = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_END = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_BEG = CAST('08/02/2012' AS DATETIME)
		----SET @DTM_END = CAST('08/02/2012' AS DATETIME)
		--SET @DTM_BEG = CAST('08/03/2012' AS DATETIME)
		--SET @DTM_END = CAST('08/03/2012' AS DATETIME)

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

		--WHEN RAN ON FRI, 01/04/13, THE RESULTS RETURNS:  2012.12.21 - 2013.01.03    --FRI-THU   CORRECT!!!
		--SELECT CONVERT(VARCHAR(10),(DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 14),102) + ' - ' +
		--       CONVERT(VARCHAR(10),(DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 1),102)
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.




IF OBJECT_ID('TEMPDB..#IMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_AGENTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_AGENTS
END
CREATE TABLE #IMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_AGENTS
(FILEDATETIME          VARCHAR(50)
,FTP_FILE_NAME         VARCHAR(100)
,WS_ROW_CREATED_TIME   DATETIME
,INVOICE_MAP_KEY       VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,RCD_CNT               INT
)
INSERT INTO #IMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_AGENTS
SELECT
 DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
--,I.FTP_FILE_NAME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
,I.WS_ROW_CREATED_TIME
,I.FF_AGENT_ID  AS INVOICE_MAP_KEY
,I.FF_USERNAME AS RESOURCE_NAME
,COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
FROM            YZ_TB_IMPORTS_DATALOT_INVOICING               I   
LEFT JOIN       YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING       IAM  ON IAM.INVOICE_MAP_KEY     = I.FF_AGENT_ID
INNER JOIN      DATE_TIME                                 DT   ON DT.DATE_TIME_KEY        = I.STD_TENANT_START_DATE_TIME_KEY
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND ISNULL(IAM.INVOICE_MAP_KEY,'') = ''
  AND ISNULL(I.FF_USERNAME,'') NOT IN ('cholmes_ws','twinders_258','ljardine','ale')  -- FILTER OUT SPECIFIC USERS
GROUP BY
 DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
--,I.FTP_FILE_NAME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
,I.WS_ROW_CREATED_TIME
,I.FF_USERNAME
,I.FF_AGENT_ID

--==================================
UPDATE #IMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_AGENTS SET
 FILEDATETIME = REPLACE(CONVERT(VARCHAR(10),ISNULL(FILEDATETIME,'1/1/1900'),102),'/',' . ')


--==================================
--ALTER TABLE IF DURATIONS WANTED IN SECONDS:  --TABLE FIRST CREATED WITH FIELDS DEFINED AS "DECIMAL(10,2)"...
--==================================
--IF @DUR_IN = 'SS' BEGIN
--	ALTER TABLE #IMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_AGENTS ALTER COLUMN LOGIN_DUR     INT
--END

--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_AGENTS)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_AGENTS
	SELECT
	 ''  --DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
	,''  --I.FTP_FILE_NAME
	,dbo.getdate()  --I.WS_ROW_CREATED_TIME
	,''  --I.FF_USERNAME  AS INVOICE_MAP_KEY
	,''  --I.RESOURCE_NAME
	,0   --COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
END
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RCD_CNT = 0 BEGIN  --@RCD_CNT WILL BE 0 STILL, EVEN THOUGH ONE BLANK RECORD WAS ADDED...
	SET @MSG1 = @MSG1 + 'There are No Missing AIA Agent Mappings.'
END
ELSE BEGIN
	--IF (DATEDIFF(DD,CAST('01/20/2012' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN 
	--IF (DATEDIFF(DD,CAST('09/27/2013' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
	IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
		--This is an Invoice Friday:
		IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN  --end date + 1 may not be today, so dbo.getdate() is checked...
			SET @MSG1 = 'Today, '
		END
		SET @MSG1 = @MSG1 + CONVERT(VARCHAR(10),@DTM_END,101) + ', is Invoice Friday. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	END
	SET @MSG1 = @MSG1 + 'The list below contains Invoice Map Key values for agents that are associated to activity for the report date range, but ' 
	SET @MSG1 = @MSG1 + 'do not exist in the AIA Agent Mapping file. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

	SET @MSG1 = @MSG1 + 'Agents in this list will not be invoiced (for activity dates showing), unless a special request is created and received '
	SET @MSG1 = @MSG1 + 'in plenty of time before invoicing begins.  The programmer will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	SET @MSG1 = @MSG1 + 'Also, Project Management may need to add or update agent information in their AIA Agent Mapping .csv/"living" documents '
	SET @MSG1 = @MSG1 + 'and copy it to the FTP directory before Programming can update agents correctly. ' + CHAR(13) + CHAR(10)

	--This put directly in report at bottom, in new table, with different font size...:
	--SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Please forward any questions or problems with this notification to dthola@wslive.com.  Thanks.'
END

IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''
	
	IF @RCD_CNT = 0 BEGIN
		SET @MSG1 = @MSG1 + 'There are NO missing AIA agent mappings!'
	END
	ELSE BEGIN
		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
			SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Posting Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		END
		SET @MSG1 = @MSG1 + 'The list below contains Invoice Map Key values for agents that are associated with activity for the report date range, but ' + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + 'who have not been added to or have incorrect values in the AIA Agent Mapping File. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

		SET @MSG1 = @MSG1 + 'Agents who are on this list will not be invoiced (for activity dates shown), unless a special request is made and received '
		SET @MSG1 = @MSG1 + 'with plenty of time before the automated invoice process begins.  The analyst will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

		SET @MSG1 = @MSG1 + 'Also, Project Management may need to add or update agent information in their AIA Agent Mapping CSV file and upload it '
		SET @MSG1 = @MSG1 + 'to the appropriate FTP directory before the Analyst can correctly update agent data. ' + CHAR(13) + CHAR(10)
	END

END

--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_AGENTS 

ORDER BY
 INVOICE_MAP_KEY
,FTP_FILE_NAME

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_ASA]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_ASA]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHICH INVOICE_MAP_KEY VALUES EXIST IN THE ACTIVITY FILES, BUT NOT IN THE AIA_AGENT_MAPPING .CSV FILES.
--            NO MATCHES BETWEEN ACTIVITY AND AGENT MAPPING.  WHEN NO MATCHES, THEN NO 'SCHEDULER' INVOICING.
--THIS USP IS DATA SOURCE FOR SRS GRID ON "ACTIVITY IMPORTS" STATUS REPORT!!!

--  EXECUTE [dbo].[uspIMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_ASA] '04/01/2016','04/04/2016','','M'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
--	IF @TIME_INTERVAL IN ('15','30','HR','DY') BEGIN
--	    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)  --!!! HAVE TO CHANGE '-1' IF NEED TO PULL FILE FOR PREVIOUS DATE OTHER THAN YESTERDAY.!!!
--		SET @DTM_END = @DTM_BEG -- + 1
--	END
--	ELSE BEGIN
--		IF @TIME_INTERVAL IN ('WK') BEGIN  --SQL Job will run SRS Subscription on Sunday for previous Sunday to Saturday date range:
--		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 7,101) AS DATETIME)  --!!! HAVE TO CHANGE '-7' IF NEED TO PULL FILE FOR PREVIOUS DATE OTHER THAN YESTERDAY.!!!
--		    SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)  --!!! HAVE TO CHANGE '-1' IF NEED TO PULL FILE FOR PREVIOUS DATE OTHER THAN YESTERDAY.!!!
--		END
--		ELSE BEGIN  --'MO'  --SQL Job will run SRS Subscription on 1st of each month for previous Month date range:
			--SELECT DATEDIFF(dd,CAST('05/02/11' AS DATETIME),dbo.getdate())  --SELECT DATEADD(mm,1,dbo.getdate())

			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END

			--END
			--ELSE BEGIN
			--	SET @DTM_END      = CAST(CAST(DATEPART(mm  ,dbo.getdate() - 0) AS VARCHAR(2)) 
		    --                  + '/01/' + CAST(DATEPART(yyyy,dbo.getdate() - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
			--	--Subtract one day from 1st day of current date, which gives us last day of previous month:
			--	SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
			--	--Get 1st day of previous month from previous end date value:
			--	SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))
			--END
--		END
--	END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--TO TEST:
		--DECLARE
		-- @DTM_BEG DATETIME
		--,@DTM_END DATETIME
		----SET @DTM_BEG = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_END = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_BEG = CAST('08/02/2012' AS DATETIME)
		----SET @DTM_END = CAST('08/02/2012' AS DATETIME)
		--SET @DTM_BEG = CAST('08/03/2012' AS DATETIME)
		--SET @DTM_END = CAST('08/03/2012' AS DATETIME)

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

		--WHEN RAN ON FRI, 01/04/13, THE RESULTS RETURNS:  2012.12.21 - 2013.01.03    --FRI-THU   CORRECT!!!
		--SELECT CONVERT(VARCHAR(10),(DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 14),102) + ' - ' +
		--       CONVERT(VARCHAR(10),(DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 1),102)
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.




IF OBJECT_ID('TEMPDB..#IMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_ASA') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_ASA
END
CREATE TABLE #IMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_ASA
(FILEDATETIME          VARCHAR(50)
,FTP_FILE_NAME         VARCHAR(100)
,WS_ROW_CREATED_TIME   DATETIME
,INVOICE_MAP_KEY       VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,RCD_CNT               INT
)
INSERT INTO #IMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_ASA
SELECT
 DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
--,I.FTP_FILE_NAME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
,I.WS_ROW_CREATED_TIME
,I.FF_AGENT_ID  AS INVOICE_MAP_KEY
,I.FF_USERNAME AS RESOURCE_NAME
,COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
FROM            YZ_TB_IMPORTS_DATALOT_INVOICING               I   
LEFT JOIN       YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING       IAM  ON IAM.INVOICE_MAP_KEY     = I.FF_AGENT_ID
																AND   IAM.FF_ASA_NAME		  = I.ASA_NAME
INNER JOIN      DATE_TIME                                 DT   ON DT.DATE_TIME_KEY        = I.STD_TENANT_START_DATE_TIME_KEY
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND ISNULL(IAM.FF_ASA_NAME,'') = ''
  AND ISNULL(I.ASA_NAME,'') = ''
  AND ISNULL(I.FF_USERNAME,'') NOT IN ('cholmes_ws','twinders_258','ljardine','ale')  -- FILTER OUT SPECIFIC USERS
GROUP BY
 DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
--,I.FTP_FILE_NAME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
,I.WS_ROW_CREATED_TIME
,I.FF_USERNAME
,I.FF_AGENT_ID

--==================================
UPDATE #IMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_ASA SET
 FILEDATETIME = REPLACE(CONVERT(VARCHAR(10),ISNULL(FILEDATETIME,'1/1/1900'),102),'/',' . ')


--==================================
--ALTER TABLE IF DURATIONS WANTED IN SECONDS:  --TABLE FIRST CREATED WITH FIELDS DEFINED AS "DECIMAL(10,2)"...
--==================================
--IF @DUR_IN = 'SS' BEGIN
--	ALTER TABLE #IMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_AGENTS ALTER COLUMN LOGIN_DUR     INT
--END

--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_ASA)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_ASA
	SELECT
	 ''  --DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
	,''  --I.FTP_FILE_NAME
	,dbo.getdate()  --I.WS_ROW_CREATED_TIME
	,''  --I.FF_USERNAME  AS INVOICE_MAP_KEY
	,''  --I.RESOURCE_NAME
	,0   --COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
END
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RCD_CNT = 0 BEGIN  --@RCD_CNT WILL BE 0 STILL, EVEN THOUGH ONE BLANK RECORD WAS ADDED...
	SET @MSG1 = @MSG1 + 'There are No Missing ASA Mappings.'
END
ELSE BEGIN
	--IF (DATEDIFF(DD,CAST('01/20/2012' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN 
	--IF (DATEDIFF(DD,CAST('09/27/2013' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
	IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
		--This is an Invoice Friday:
		IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN  --end date + 1 may not be today, so dbo.getdate() is checked...
			SET @MSG1 = 'Today, '
		END
		SET @MSG1 = @MSG1 + CONVERT(VARCHAR(10),@DTM_END,101) + ', is Invoice Friday. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	END
	SET @MSG1 = @MSG1 + 'The list below contains Invoice Map Key values for agents that are associated to activity for the report date range, but ' 
	SET @MSG1 = @MSG1 + 'do not exist in the AIA Agent Mapping file. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

	SET @MSG1 = @MSG1 + 'Agents in this list will not be invoiced (for activity dates showing), unless a special request is created and received '
	SET @MSG1 = @MSG1 + 'in plenty of time before invoicing begins.  The programmer will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	SET @MSG1 = @MSG1 + 'Also, Project Management may need to add or update agent information in their AIA Agent Mapping .csv/"living" documents '
	SET @MSG1 = @MSG1 + 'and copy it to the FTP directory before Programming can update agents correctly. ' + CHAR(13) + CHAR(10)

	--This put directly in report at bottom, in new table, with different font size...:
	--SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Please forward any questions or problems with this notification to dthola@wslive.com.  Thanks.'
END

IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''
	
	IF @RCD_CNT = 0 BEGIN
		SET @MSG1 = @MSG1 + 'There are NO missing ASA Mappings!'
	END
	ELSE BEGIN
		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
			SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		END
		SET @MSG1 = @MSG1 + 'The list below contains Invoice Map Key values for agents that are associated with activity for the report date range, but ' + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + 'who have not been assigned an ASA in the AIA Agent Mapping File. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

		SET @MSG1 = @MSG1 + 'Agents who are on this list will not be properly reported in Datalot Agent Performance Reports' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

		SET @MSG1 = @MSG1 + 'Project Management may need to add or update agent information in their AIA Agent Mapping CSV file and upload it '
		SET @MSG1 = @MSG1 + 'to the appropriate FTP directory before the Analyst can correctly update agent data. ' + CHAR(13) + CHAR(10)
	END

END

--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_DATALOT_AIA_AGENT_MAPPING_MISSING_ASA 

ORDER BY
 INVOICE_MAP_KEY
,FTP_FILE_NAME

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_DATALOT_AIA_XML]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_DATALOT_AIA_XML]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(30)  --Hid. Def=' '   --Most likely useless.
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'-Manual - when users run report - what SRS reports are defaulted to.  MAN means use date range that user specified.  The exception is when a report is defined with PTD/YTD and MTD rows in it.
                                  --         'SUB'-Subscription - what SRS subscriptions are defaulted to.  SUB means set date range @vars based on @TIME_INTERVAL. (since date range in SRS Subscription can't be set correctly)
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='AIA'-Agent Invoice Automation - what Sergey uses for/in Scheduler...
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='XML'-AIA RPT (DETAIL) (XML FILE/EXPORT),
AS
SET NOCOUNT ON  

-- !!!*** @ID_EXT HARDCODED BELOW IF @EXECUTIONER = 'SUB', SO THAT 14 SUBSCRIPTIONS DON'T NEED TO BE CHANGED EVERY TIME... ***!!!

--  EXECUTE [dbo].[uspIMPORTS_DATALOT_AIA_XML] '05/19/2014','05/19/2014','352',' ',' ','0','HR','Y','SS','NM','Y','4','MAN','AIA','XML'
--  EXECUTE [dbo].[uspIMPORTS_DATALOT_AIA_XML] '05/19/2014','05/19/2014','0',' ',' ','0','HR','Y','SS','NM','Y','4','MAN','AIA','XML'
--  EXECUTE [dbo].[uspIMPORTS_DATALOT_AIA_XML] '05/19/2014','05/19/2014','0',' ','Y','0','HR','Y','SS','NM','Y','4','MAN','AIA','XML' --in test mode
--  EXECUTE [dbo].[uspIMPORTS_DATALOT_AIA_XML] '04/11/2016','04/11/2016','0',' ','Y','0','W14','Y','SS','NM','Y','4','NEW','AIA','XML'

--SELECT @ID_EXT
--GOTO EARLY_EXIT

--    531 IS ACTUAL TENANT_KEY FOR DATALOT.  BUT 900700 IS BEING USED IN ERROR MESSAGES...

--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_SD_INVOICE_GROUPS

--Going to use @id_ext to pass in test or notest indicator so that I can pull in data where ready_for_xml = 'N'  !!!  When @id_ext = 'Y'=In Test Mode.

--tmp:  WHEN RUNNING SQL JOB FOR DATE AFTER SCHEDULED DATE:
--SET @DATE_BEG = CAST('06/08/2012' AS DATETIME)
--SET @DATE_END = CAST('06/21/2012' AS DATETIME)  

--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)  
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 0,101) AS DATETIME)  
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) + 1
END

--IF @EXECUTIONER = 'MAN', DON'T CHANGE DATES -- THE REPORT IS BEING RAN MANUALLY, AND THE DATE RANGE WANTED BY THE USER IS BEING SET MANUALLY.

IF @EXECUTIONER = 'NEW' BEGIN -- NEW BI-MONTHLY PAYMENT CYCLE 1ST AND 16TH OF EACH MONTH
	IF @TIME_INTERVAL = 'W14' BEGIN
		IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate() - 1)) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
			END
		END		
		ELSE IF DAY(dbo.getdate()) = 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) < 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
	END
END

--========================================================================================
--FORMAT 'MULTIPLES' "IN THAT" VALUES:  (Referring to CHARINDEX(search for this, in that))
--========================================================================================
SET @TENANT_KEY      = ',' + LTRIM(RTRIM(@TENANT_KEY))      + ','
SET @SCHEDULER_GROUP = ',' + LTRIM(RTRIM(@SCHEDULER_GROUP)) + ','

--============================================================
--SET AMOUNT TO DIVIDE BY:
--============================================================
DECLARE @DS DECIMAL(10,2)  --INT  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.0       --DIVIDE SECONDS BY 1 TO GET SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
	SET @DS = 60.0    --DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
	SET @DS = 3600.0  --DIVIDE SECONDS BY 3600 TO GET HOURS.
END

IF @RPT_TYPE_GRP = 'AIA' BEGIN

	--POPULATES XML REPORT.  SRS SUBSCRIPTION EXPORTS TO XML.  SSIS RENAMES AND MOVES XML FILE TO FTP.  SERGEY PICKS UP FILE?
	--  SERGEY IS SUPPOSEDLY DIRECTLY CONNECTED WITH YZ_TB_AGENT_INVOICE_AUTOMATION TABLE IN INFOMART ALSO.
	--    SO WHY THE XML FILE NEEDS TO BE CREATED ALSO, IS WONDER?

	IF @RPT_TYPE = 'XML' BEGIN  --AIA REPORT  --EXACTLY WHAT IS IN XML FILE AND/OR AIA TABLE.

		DELETE FROM YZ_TB_IMPORTS_DATALOT_INVOICING_XML_1

		INSERT INTO YZ_TB_IMPORTS_DATALOT_INVOICING_XML_1
		([PLATFORM]
		,[STATUS]
		,INVOICE_MAP_KEY
		,FIELD_NAME
		,SCHEDULER_PROJECT_ID
		,SCHEDULER_ACL_NAME
		,ACD_ID_EXTENSION
		,OFFICIAL_WSOL_CLIENT_ID
		,OFFICIAL_WSOL_CLIENT_NAME
		,OFFICIAL_ACD_CLIENT_ID
		,OFFICIAL_ACD_CLIENT_NAME
		,PRIMARY_PROJECT_MANAGER_ID
		,DIRECTOR_OF_PROJECT_MANAGEMENT_ID
		,AGENT_TECHNOLOGY_MANAGER_ID
		,CONTRACTOR_SUPPORT_PATHWAY
		,INVOICE_SYSTEM_ID
		,HOLIDAY_INVOICE_ID
		,HOLIDAY
		,FILE_FORMAT_OF_PUSH
		,AGENT_PREPARATION_INVOICE_ID
		,NEW_ACL
		,CURRENT_CATS
		,CATS_ID
		,PATS_ID
		,SMART_ELIGIBLE
		,SMART_TIER_1
		,SMART_TIER_2
		,SMART_TIER_3
		,INTERVAL
		,[DATE]
		,HOD_INTERVAL
		,AU_DK_LOGGED_IN_DURATION
		,AU_DK_AVAILABLE_DURATION
		,AU_DK_TALK_DURATION
		,AU_DK_IB_TALK_DURATION
		,AU_DK_OB_TALK_DURATION
		,AU_DK_CONVENTIONAL_ACW
		,AU_DK_NR_DURATION
		,AU_DK_PSEUDO_PRODUCTIVE_DURATION
		,AU_DK_ADJUSTED_NR_DURATION
		,AU_DK_TOTAL_PRODUCTIVE_DURATION
		,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
		,AU_DK_XFER_COUNT
		,AU_DK_HOLD_COUNT
		,AU_DK_CONFERENCE_COUNT
		,AU_DK_CONSULT_COUNT
		,AU_DK_PUP_COUNT
		,AU_DK_OFFERED_COUNT
		,AU_DK_HANDLED_COUNT
		,AU_DK_IB_HANDLE_COUNT
		,AU_DK_OB_HANDLE_COUNT
		,AU_DK_RONA_COUNT
		,AU_DK_AWR_COUNT
		,MINIMUM_GUARANTEE
		,AUTHORIZED_TO_INVOICE
		,WEEK_ENDING_DATE
		,PAY_CYCLE_CLOSURE_DATE
		,CAL_DATE
		,TENANT_KEY
		,INVOICE_ID
		,CST_ROW_CREATED_TIME
		,ELIGIBLE_FOR_XFER_BONUS
		)
		SELECT --AIA.*
		 AIA.[PLATFORM]
		,AIA.[STATUS]                       
		,AIA.INVOICE_MAP_KEY              
		,AIA.FIELD_NAME                   
		,AIA.SCHEDULER_PROJECT_ID         
		,AIA.SCHEDULER_ACL_NAME           
		,AIA.ACD_ID_EXTENSION             
		,AIA.OFFICIAL_WSOL_CLIENT_ID      
		,AIA.OFFICIAL_WSOL_CLIENT_NAME    
		,AIA.OFFICIAL_ACD_CLIENT_ID       
		,AIA.OFFICIAL_ACD_CLIENT_NAME     
		,AIA.PRIMARY_PROJECT_MANAGER_ID   
		,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID 
		,AIA.AGENT_TECHNOLOGY_MANAGER_ID  
		,AIA.CONTRACTOR_SUPPORT_PATHWAY   
		,AIA.INVOICE_SYSTEM_ID            
		,AIA.HOLIDAY_INVOICE_ID           
		,AIA.HOLIDAY                      
		,AIA.FILE_FORMAT_OF_PUSH          
		,AIA.AGENT_PREPARATION_INVOICE_ID 
		,AIA.NEW_ACL                      
		,AIA.CURRENT_CATS                 
		,AIA.CATS_ID                      
		,AIA.PATS_ID                      
		,AIA.SMART_ELIGIBLE               
		,AIA.SMART_TIER_1                 
		,AIA.SMART_TIER_2                 
		,AIA.SMART_TIER_3                 
		,AIA.INTERVAL                     
		,AIA.[DATE]                       
		,AIA.HOD_INTERVAL                 
		,AIA.AU_DK_LOGGED_IN_DURATION
		,AIA.AU_DK_AVAILABLE_DURATION
		,AIA.AU_DK_TALK_DURATION
		,AIA.AU_DK_IB_TALK_DURATION
		,AIA.AU_DK_OB_TALK_DURATION
		,AIA.AU_DK_CONVENTIONAL_ACW
		,AIA.AU_DK_NR_DURATION
		,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
		,AIA.AU_DK_ADJUSTED_NR_DURATION
		,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
		,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
		,AIA.AU_DK_XFER_COUNT
		,AIA.AU_DK_HOLD_COUNT
		,AIA.AU_DK_CONFERENCE_COUNT
		,AIA.AU_DK_CONSULT_COUNT
		,AIA.AU_DK_PUP_COUNT
		,AIA.AU_DK_OFFERED_COUNT
		,AIA.AU_DK_HANDLED_COUNT
		,AIA.AU_DK_IB_HANDLE_COUNT
		,AIA.AU_DK_OB_HANDLE_COUNT
		,AIA.AU_DK_RONA_COUNT
		,AIA.AU_DK_AWR_COUNT
		,AIA.MINIMUM_GUARANTEE
		,AIA.AUTHORIZED_TO_INVOICE
		,AIA.WEEK_ENDING_DATE             
		,AIA.PAY_CYCLE_CLOSURE_DATE       
		,AIA.CAL_DATE                     
		,AIA.TENANT_KEY                   
		,AIA.INVOICE_ID                   
		,AIA.WS_ROW_CREATED_TIME
		,AIA.ELIGIBLE_FOR_XFER_BONUS      

		--  SELECT *
		FROM            YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA      AIA
		INNER JOIN      DATE_TIME                             DT    ON DT.DATE_TIME_KEY      = AIA.STD_TENANT_START_DATE_TIME_KEY
		
		WHERE ( DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END )
		  AND ( @TENANT_KEY      IN (',0,',',,') OR CHARINDEX(',' + CAST(AIA.TENANT_KEY       AS VARCHAR(10)) + ',',@TENANT_KEY)      > 0 )
		  AND AIA.STATUS = 'Active'
		  AND ( (ISNULL(AIA.READY_FOR_XML,'') = 'Y')  --<----Maintain this field, and the AIA will populate the XML correctly every time!!!!!!!!!
				OR (@ID_EXT = 'Y') )  --<----In Test Mode (ignore what ready_for_xml is set to).

		ORDER BY 
		 AIA.OFFICIAL_ACD_CLIENT_NAME
		,AIA.INVOICE_ID
		,AIA.ACD_ID_EXTENSION     
		,AIA.INVOICE_MAP_KEY
		,AIA.DATE
		,AIA.HOD_INTERVAL

		DELETE FROM YZ_TB_IMPORTS_DATALOT_INVOICING_XML_XFER_BONUS

		INSERT INTO YZ_TB_IMPORTS_DATALOT_INVOICING_XML_XFER_BONUS
		(INVOICE_MAP_KEY
		,LOGGED_IN_HOURS
		,THREE_MINUTE_XFERS
		,THREE_MINUTE_XFERS_PER_HOUR
		,ELIGIBLE_FOR_XFER_BONUS
		,ACD_ID_EXTENSION)
		SELECT	--DLX RECORDS
		 XM1.INVOICE_MAP_KEY																				AS INVOICE_MAP_KEY
		,SUM(ISNULL(XM1.AU_DK_LOGGED_IN_DURATION,0.00)) / 3600.00											AS LOGGED_IN_HOURS
		,SUM(ISNULL(XM1.AU_DK_XFER_COUNT,0))																AS THREE_MINUTE_XFERS
		,SUM(ISNULL(XM1.AU_DK_XFER_COUNT,0)) / (SUM(ISNULL(XM1.AU_DK_LOGGED_IN_DURATION,0.00) / 3600.00))	AS THREE_MIN_XFERS_PER_HOUR
		,NULL																								AS ELIGIBLE_FOR_XFER_BONUS
		,XM1.ACD_ID_EXTENSION																				AS ACD_ID_EXTENSION

		FROM		YZ_TB_IMPORTS_DATALOT_INVOICING_XML_1	XM1
		WHERE		ISNULL(XM1.ACD_ID_EXTENSION,'') = 'DLX'

		GROUP BY
		 XM1.INVOICE_MAP_KEY
		,XM1.ACD_ID_EXTENSION
		
		UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_XML_XFER_BONUS SET
		 ELIGIBLE_FOR_XFER_BONUS = CASE WHEN THREE_MINUTE_XFERS_PER_HOUR >= 5 THEN 'Y'		--<<<<<<<<<<<< SET MINIMUM XFERS PER HOUR ELIGIBILITY HERE *************************
										ELSE 'N' END										-------------- CHANGED FROM 6 TO 5 EFFECTIVE 11/01/2017    -------------------------	

		UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_XML_1 SET
		 ELIGIBLE_FOR_XFER_BONUS = XMB.ELIGIBLE_FOR_XFER_BONUS
		FROM		YZ_TB_IMPORTS_DATALOT_INVOICING_XML_1				XM1
		LEFT JOIN	YZ_TB_IMPORTS_DATALOT_INVOICING_XML_XFER_BONUS		XMB ON XMB.INVOICE_MAP_KEY  = XM1.INVOICE_MAP_KEY
																		   AND XMB.ACD_ID_EXTENSION = XM1.ACD_ID_EXTENSION

		UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_XML_1 SET
		 AUTHORIZED_TO_INVOICE = CASE WHEN ELIGIBLE_FOR_XFER_BONUS = 'N' THEN MINIMUM_GUARANTEE
									  ELSE AUTHORIZED_TO_INVOICE END
		WHERE ACD_ID_EXTENSION = 'DLX'

		-- GOTO EARLY_EXIT

		--==================================		--CREATE TMP TABLE:
		IF OBJECT_ID('TEMPDB..#IMPORTS_DATALOT_AIA_XML') IS NOT NULL BEGIN
		   DROP TABLE #IMPORTS_DATALOT_AIA_XML
		END
		CREATE TABLE #IMPORTS_DATALOT_AIA_XML
		([PLATFORM]                   VARCHAR(50)
		,[STATUS]                     VARCHAR(50) 
		,INVOICE_MAP_KEY              VARCHAR(50) 
		,FIELD_NAME                   VARCHAR(50) 
		,SCHEDULER_PROJECT_ID         VARCHAR(50) 
		,SCHEDULER_ACL_NAME           VARCHAR(50) 
		,ACD_ID_EXTENSION             VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_ID      VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_NAME    VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_ID       VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_NAME     VARCHAR(50) 
		,PRIMARY_PROJECT_MANAGER_ID   VARCHAR(500) 
		,DIRECTOR_OF_PROJECT_MANAGEMENT_ID VARCHAR(500) 
		,AGENT_TECHNOLOGY_MANAGER_ID  VARCHAR(500) 
		,CONTRACTOR_SUPPORT_PATHWAY   VARCHAR(500) 
		,INVOICE_SYSTEM_ID            VARCHAR(50) 
		,HOLIDAY_INVOICE_ID           VARCHAR(50) 
		,HOLIDAY                      VARCHAR(50) 
		,FILE_FORMAT_OF_PUSH          VARCHAR(50) 
		,AGENT_PREPARATION_INVOICE_ID VARCHAR(50) 
		,NEW_ACL                      VARCHAR(50) 
		,CURRENT_CATS                 VARCHAR(50) 
		,CATS_ID                      VARCHAR(50) 
		,PATS_ID                      VARCHAR(50) 
		,SMART_ELIGIBLE               VARCHAR(50) 
		,SMART_TIER_1                 VARCHAR(50) 
		,SMART_TIER_2                 VARCHAR(50) 
		,SMART_TIER_3                 VARCHAR(50) 
		,INTERVAL                     VARCHAR(50) 
		,DATE                         VARCHAR(50) 
		,HOD_INTERVAL                 VARCHAR(50) 
		,AU_DK_LOGGED_IN_DURATION     DECIMAL(10,2)  --INT 
		,AU_DK_AVAILABLE_DURATION     DECIMAL(10,2)  --INT 
		,AU_DK_TALK_DURATION          DECIMAL(10,2)  --INT 
		,AU_DK_IB_TALK_DURATION       DECIMAL(10,2)  --INT 
		,AU_DK_OB_TALK_DURATION       DECIMAL(10,2)  --INT 
		,AU_DK_CONVENTIONAL_ACW       DECIMAL(10,2)  --INT 
		,AU_DK_NR_DURATION            DECIMAL(10,2)  --INT 
		,AU_DK_PSEUDO_PRODUCTIVE_DURATION   DECIMAL(10,2)  --INT 
		,AU_DK_ADJUSTED_NR_DURATION         DECIMAL(10,2)  --INT 
		,AU_DK_TOTAL_PRODUCTIVE_DURATION    DECIMAL(10,2)  --INT 
		,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS DECIMAL(10,2)  --INT 
		,AU_DK_XFER_COUNT             INT 
		,AU_DK_HOLD_COUNT             INT 
		,AU_DK_CONFERENCE_COUNT       INT 
		,AU_DK_CONSULT_COUNT          INT 
		,AU_DK_PUP_COUNT              INT 
		,AU_DK_OFFERED_COUNT          INT 
		,AU_DK_HANDLED_COUNT          INT 
		,AU_DK_IB_HANDLE_COUNT        INT 
		,AU_DK_OB_HANDLE_COUNT        INT 
		,AU_DK_RONA_COUNT             INT 
		,AU_DK_AWR_COUNT              INT 
		,MINIMUM_GUARANTEE            DECIMAL(10,2) 
		,AUTHORIZED_TO_INVOICE        DECIMAL(10,2) 
		,WEEK_ENDING_DATE             VARCHAR(50) 
		,PAY_CYCLE_CLOSURE_DATE       VARCHAR(50) 
		,CAL_DATE                     DATETIME
		,TENANT_KEY                   INT 
		,INVOICE_ID                   VARCHAR(50) 
		,CST_ROW_CREATED_TIME         DATETIME
		)
		--==================================		
--		IF @DUR_IN IN ('MM','HH') BEGIN
--			ALTER TABLE #IMPORTS_DATALOT_AIA_XML ALTER COLUMN AU_DK_LOGGED_IN_DURATION DECIMAL(10,2)
--			ALTER TABLE #IMPORTS_DATALOT_AIA_XML ALTER COLUMN AU_DK_AVAILABLE_DURATION DECIMAL(10,2)
--			ALTER TABLE #IMPORTS_DATALOT_AIA_XML ALTER COLUMN AU_DK_TALK_DURATION      DECIMAL(10,2)
--			ALTER TABLE #IMPORTS_DATALOT_AIA_XML ALTER COLUMN AU_DK_IB_TALK_DURATION   DECIMAL(10,2)
--			ALTER TABLE #IMPORTS_DATALOT_AIA_XML ALTER COLUMN AU_DK_OB_TALK_DURATION   DECIMAL(10,2)
--			ALTER TABLE #IMPORTS_DATALOT_AIA_XML ALTER COLUMN AU_DK_CONVENTIONAL_ACW   DECIMAL(10,2)
--			ALTER TABLE #IMPORTS_DATALOT_AIA_XML ALTER COLUMN AU_DK_NR_DURATION        DECIMAL(10,2)
--			ALTER TABLE #IMPORTS_DATALOT_AIA_XML ALTER COLUMN AU_DK_PSEUDO_PRODUCTIVE_DURATION   DECIMAL(10,2)
--			ALTER TABLE #IMPORTS_DATALOT_AIA_XML ALTER COLUMN AU_DK_ADJUSTED_NR_DURATION         DECIMAL(10,2)
--			ALTER TABLE #IMPORTS_DATALOT_AIA_XML ALTER COLUMN AU_DK_TOTAL_PRODUCTIVE_DURATION    DECIMAL(10,2)
--			ALTER TABLE #IMPORTS_DATALOT_AIA_XML ALTER COLUMN AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS DECIMAL(10,2)
--		END
		--==================================
		INSERT INTO #IMPORTS_DATALOT_AIA_XML
		SELECT --AIA.*
		 AIA.[PLATFORM]
		,AIA.[STATUS]                       
		,AIA.INVOICE_MAP_KEY              
		,AIA.FIELD_NAME                   
		,AIA.SCHEDULER_PROJECT_ID         
		,AIA.SCHEDULER_ACL_NAME           
		,AIA.ACD_ID_EXTENSION             
		,AIA.OFFICIAL_WSOL_CLIENT_ID      
		,AIA.OFFICIAL_WSOL_CLIENT_NAME    
		,AIA.OFFICIAL_ACD_CLIENT_ID       
		,AIA.OFFICIAL_ACD_CLIENT_NAME     
		,AIA.PRIMARY_PROJECT_MANAGER_ID   
		,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID 
		,AIA.AGENT_TECHNOLOGY_MANAGER_ID  
		,AIA.CONTRACTOR_SUPPORT_PATHWAY   
		,AIA.INVOICE_SYSTEM_ID            
		,AIA.HOLIDAY_INVOICE_ID           
		,AIA.HOLIDAY                      
		,AIA.FILE_FORMAT_OF_PUSH          
		,AIA.AGENT_PREPARATION_INVOICE_ID 
		,AIA.NEW_ACL                      
		,AIA.CURRENT_CATS                 
		,AIA.CATS_ID                      
		,AIA.PATS_ID                      
		,AIA.SMART_ELIGIBLE               
		,AIA.SMART_TIER_1                 
		,AIA.SMART_TIER_2                 
		,AIA.SMART_TIER_3                 
		,AIA.INTERVAL                     
		,AIA.DATE                         
		,AIA.HOD_INTERVAL                 
		,CAST( ( 1.0 * (AIA.AU_DK_LOGGED_IN_DURATION) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_LOGGED_IN_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_AVAILABLE_DURATION) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_AVAILABLE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_TALK_DURATION) )      / @DS AS DECIMAL(10,2)) --AS AU_DK_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_IB_TALK_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_IB_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_OB_TALK_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_OB_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_CONVENTIONAL_ACW) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_CONVENTIONAL_ACW
		,CAST( ( 1.0 * (AIA.AU_DK_NR_DURATION) )        / @DS AS DECIMAL(10,2)) --AS AU_DK_NR_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_PSEUDO_PRODUCTIVE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_ADJUSTED_NR_DURATION) )         / @DS AS DECIMAL(10,2)) --AS AU_DK_ADJUSTED_NR_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION) )    / @DS AS DECIMAL(10,2)) --AS AU_DK_TOTAL_PRODUCTIVE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
		,(AIA.AU_DK_XFER_COUNT)         --AS AU_DK_XFER_COUNT
		,(AIA.AU_DK_HOLD_COUNT)         --AS AU_DK_HOLD_COUNT
		,(AIA.AU_DK_CONFERENCE_COUNT)   --AS AU_DK_CONFERENCE_COUNT
		,(AIA.AU_DK_CONSULT_COUNT)      --AS AU_DK_CONSULT_COUNT
		,(AIA.AU_DK_PUP_COUNT)          --AS AU_DK_PUP_COUNT
		,(AIA.AU_DK_OFFERED_COUNT)      --AS AU_DK_OFFERED_COUNT
		,(AIA.AU_DK_HANDLED_COUNT)      --AS AU_DK_HANDLED_COUNT
		,(AIA.AU_DK_IB_HANDLE_COUNT)    --AS AU_DK_IB_HANDLE_COUNT
		,(AIA.AU_DK_OB_HANDLE_COUNT)    --AS AU_DK_OB_HANDLE_COUNT
		,(AIA.AU_DK_RONA_COUNT)         --AS AU_DK_RONA_COUNT
		,(AIA.AU_DK_AWR_COUNT)          --AS AU_DK_AWR_COUNT
		,CAST( ( 1.0 * (AIA.MINIMUM_GUARANTEE) )     / @DS AS DECIMAL(10,2)) --AS MINIMUM_GUARANTEE
		,CAST( ( 1.0 * (AIA.AUTHORIZED_TO_INVOICE) ) / @DS AS DECIMAL(10,2)) --AS AUTHORIZED_TO_INVOICE
		,AIA.WEEK_ENDING_DATE             
		,AIA.PAY_CYCLE_CLOSURE_DATE       
		,AIA.CAL_DATE                     
		,AIA.TENANT_KEY                   
		,AIA.INVOICE_ID                   
		,AIA.CST_ROW_CREATED_TIME	         

		--  SELECT *
--		FROM            YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA         AIA
		FROM			YZ_TB_IMPORTS_DATALOT_INVOICING_XML_1 AIA
--		INNER JOIN      DATE_TIME                             DT    ON DT.DATE_TIME_KEY      = AIA.STD_TENANT_START_DATE_TIME_KEY
		--HERE JUST FOR FILTER:
--		LEFT JOIN       YZ_TB_IMPORTS_DATALOT_SD_INVOICE_GROUPS  IG    ON IG.ID_EXT = AIA.ACD_ID_EXTENSION
--																   AND IG.TENANT_KEY         = AIA.TENANT_KEY  --FOR SAG.

--		WHERE ( DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END )
--		  AND ( @TENANT_KEY      IN (',0,',',,') OR CHARINDEX(',' + CAST(AIA.TENANT_KEY       AS VARCHAR(10)) + ',',@TENANT_KEY)      > 0 )
	--	  AND ( @SCHEDULER_GROUP IN (',0,',',,') OR CHARINDEX(',' + CAST(IG.INVOICE_GROUP_KEY AS VARCHAR(10)) + ',',@SCHEDULER_GROUP) > 0 )

--		  AND AIA.STATUS = 'Active'
--		  AND ( (ISNULL(AIA.READY_FOR_XML,'') = 'Y')  --<----Maintain this field, and the AIA will populate the XML correctly every time!!!!!!!!!
--				OR (@ID_EXT = 'Y') )  --<----In Test Mode (ignore what ready_for_xml is set to).
		  -- AND AIA.ACD_ID_EXTENSION = 'DLX'  --<---- Used when you only want to include the transfer counts
--Note, AIA.READY_FOR_XML is Not the same, or may not be the same as IG.READY_FOR_XML !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

		ORDER BY 
		 AIA.OFFICIAL_ACD_CLIENT_NAME
		--,AIA.SCHEDULER_ACL_NAME
		,AIA.INVOICE_ID

		,AIA.ACD_ID_EXTENSION     
		,AIA.INVOICE_MAP_KEY
		,AIA.DATE
		,AIA.HOD_INTERVAL


		--==================================!!!--INSERT RECORD FOR REPORT SO SSIS KNOWS DATE OF DATA IN DATASET:
		--Have to include 'D??' or 'W??' because SRS Subscriptions are being ran at about same time in one sql job step.
		--  If one subscription takes longer than the other, the wrong date will get used/pulled from the YZ_TB_FILENAMES_FOR_SSIS in the ssis. and so on.
		IF CHARINDEX('D',@TIME_INTERVAL) > 0 BEGIN
			INSERT INTO YZ_TB_FILENAMES_FOR_SSIS
			(
			 SQL_JOB_NAME
			,FILENM
			,CST_ROW_CREATED_TIME)
			SELECT  --FOR THE .XML FILES FOR EACH DATE:
			 'iNetAIA_' + LTRIM(RTRIM(@TIME_INTERVAL))  --'iNetAIA_D09' for internal wsinet tenants 9 days from current date.  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.getdate()  --CST_ROW_CREATED_TIME
		END
		ELSE BEGIN  --'W' MEANING NEED TO PASS/POPULATE WITH DATE RANGE, LIKE 'MMDDYY_MMDDYY'. -- FOR GAR AND NW.
			INSERT INTO YZ_TB_FILENAMES_FOR_SSIS
			(SQL_JOB_NAME
			,FILENM
			,CST_ROW_CREATED_TIME)


			SELECT  --FOR GETAROOM AND NINE_WEST:    --old:-- 'AGENT_INVOICE_AIA_XML'  --SQL_JOB_NAME 
			 'iNetAIA_' + LTRIM(RTRIM(@TIME_INTERVAL)) + '_' + '900700'  --LTRIM(RTRIM(CAST(@TENANT_KEY AS VARCHAR(10))))  --'iNetAIA_W14_900595' for GAR  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_BEG,1),'/','') + '_' + REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.getdate()  --CST_ROW_CREATED_TIME
		END
		--  SELECT * FROM YZ_TB_FILENAMES_FOR_SSIS ORDER BY CST_ROW_CREATED_TIME DESC   
		--    531 IS ACTUAL TENANT_KEY FOR DATALOT.  BUT 900700 IS BEING USED IN ERROR MESSAGES...

		--==================================!!!--RETURN DATASET TO REPORT:
		SELECT *
		FROM #IMPORTS_DATALOT_AIA_XML
		ORDER BY 
		 OFFICIAL_ACD_CLIENT_NAME
		--,SCHEDULER_ACL_NAME
		,INVOICE_ID

		,ACD_ID_EXTENSION     
		,INVOICE_MAP_KEY
		,DATE
		,HOD_INTERVAL
	END  --AIA_XML



END  --IF @RPT_TYPE_GRP = 'AIA'


--===============================
EARLY_EXIT:
--===============================
GO
PRINT N'Creating [dbo].[uspIMPORTS_DATALOT_IMPORT_STATUS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_DATALOT_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_DATALOT_IMPORT_STATUS] '06/01/2014','06/06/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_DATALOT_IMPORT_STATUS] '06/20/2014','06/30/2014','','W'  --WILL BE RUNNING ON A FRI., BUT DATES PASSED IN WILL BE YESTERDAY/THU..

--!*** Weekend dates are not being checked, included in selects !!!  Has to be changed when they decide they want! ***!

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--TO TEST:
		--DECLARE
		-- @DTM_BEG DATETIME
		--,@DTM_END DATETIME
		----SET @DTM_BEG = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_END = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_BEG = CAST('08/02/2012' AS DATETIME)
		----SET @DTM_END = CAST('08/02/2012' AS DATETIME)
		--SET @DTM_BEG = CAST('08/03/2012' AS DATETIME)
		--SET @DTM_END = CAST('08/03/2012' AS DATETIME)

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		--SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		--SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--07/06/2012 IS AN INVOICE FRIDAY.  SAME AS 05/23/2014.
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

		--WHEN RAN ON FRI, 01/04/13, THE RESULTS RETURNS:  2012.12.21 - 2013.01.03    --FRI-THU   CORRECT!!!
		--SELECT CONVERT(VARCHAR(10),(DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 14),102) + ' - ' +
		--       CONVERT(VARCHAR(10),(DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 1),102)
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_DATALOT_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_DATALOT_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_DATALOT_IMPORT_STATUS
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--ALTER TABLE IF DURATIONS WANTED IN SECONDS:  --TABLE FIRST CREATED WITH FIELDS DEFINED AS "DECIMAL(10,2)"...
--==================================
--IF @DUR_IN = 'SS' BEGIN
--	ALTER TABLE #IMPORTS_DATALOT_IMPORT_STATUS ALTER COLUMN LOGIN_DUR     INT
--END

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_DATALOT_IMPORT_STATUS
	SELECT 
	 --REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),101),'/',' . ') AS FILEDATETIME
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'') AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0) AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME  --CAST(CONVERT(VARCHAR(10),C.FILEDATETIME,101) AS DATETIME) AS FILEDATETIME
		--,C.FTP_FILE_NAME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		--SELECT TOP 100 *

		FROM            YZ_TB_IMPORTS_DATALOT_INVOICING  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

---- AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME  --CAST(CONVERT(VARCHAR(10),C.FILEDATETIME,101) AS DATETIME) AS FILEDATETIME		 DT.CAL_DATE --AS FILEDATETIME  --CAST(CONVERT(VARCHAR(10),C.FILEDATETIME,101) AS DATETIME) AS FILEDATETIME
		--,C.FTP_FILE_NAME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
		,C.WS_ROW_CREATED_TIME
		--UNION ALL  --UUUUUUUUUUNNNNNNNNNNIIIIIIIIIIOOOOOOOOOONNNNNNNNNN
	) UA
--END  --IF @PSW...

--FOR TESTING:
----SELECT * FROM #IMPORTS_DATALOT_IMPORT_STATUS
--GOTO EARLY_EXIT

--  EXECUTE [dbo].[uspAAA_TEST] '12/21/2012','12/28/2012','','K'  --W'

--IF dbo.getdate() > 
--IF > 10:30 AND < 11:00 THEN GIVE FULL UPDATE
--ELSE JUST GIVE IMPORT STATUS/ERRORS
--OR DO I JUST SAY, THIS EMAIL IS SENT EVERY TIME THERE'S AN IMPORT FILE ON FTP AND AGAIN AT 10:30AM. ?


--=============================================	--Hopefully generic enough for all Tenant SSIS to use!
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=============================================
--DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = @TENANT_KEY
----  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900700
--=======================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''
--Check #1:  ===================================================================================================
--DECLARE
-- @DTM_BEG AS DATETIME
--,@DTM_END AS DATETIME              --Don't change '07/06/2012' !!!
--SET @DTM_BEG = (DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 14)
--SET @DTM_END = (DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) -  1) + 1

--  SELECT TOP 10 * FROM DATE_TIME  --CAL_DAY_NAME  'Sunday'  'Saturday'    CAL_DAY_NUM_IN_WEEK  1=Sunday   7=Saturday

--CREATE CURSOR, POPULATE CURSOR FOR 2 WEEK DATE RANGE, SPIN THROUGH EACH OF 14 RECORDS, CONCATENATING TO STRING FOR EACH DATE MISSING.

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	--SELECT REPLACE(CONVERT(VARCHAR(10),ISNULL(DT.CAL_DATE,'1/1/1900'),101),'/',' . ') AS FILEDATETIME
	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

----FOR 'WEEKEND' CODE/FILTER:!!!
--LEFT JOIN YZ_TB_IMPORTS_DATALOT_INVOICING  C ON   C.STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)

	GROUP BY
	-- REPLACE(CONVERT(VARCHAR(10),ISNULL(DT.CAL_DATE,'1/1/1900'),101),'/',' . ')
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_DATALOT_IMPORT_STATUS   I   ON I.FILEDATETIME                   = DT.FILEDATETIME

--LEFT JOIN       DATE_TIME                    DT2 ON CONVERT(VARCHAR(10),DT2.CAL_DATE,101) = CONVERT(VARCHAR(10),DT.FILEDATETIME,101)
----FOR 'WEEKEND' CODE/FILTER:!!!
--LEFT JOIN       YZ_TB_IMPORTS_DATALOT_INVOICING  C   ON C.STD_TENANT_START_DATE_TIME_KEY = DT2.DATE_TIME_KEY

----WHERE ISNULL(I.FTP_FILE_NAME,'') = ''  -- ISNULL(I.FILEDATETIME,'1.1.1900') = ''
WHERE ISNULL(I.RCD_CNT,0) = 0

	--AND DT.CAL_DAY_NUM_IN_WEEK <> 7  -- DATALOT AGENTS DO NOT WORK ON SUNDAYS  -- BUT NOW THEY DO WORK SUNDAYS -- BUT NOW THEY DON'T WORK SATURDAYS

--  AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

--  EXECUTE [dbo].[uspIMPORTS_DATALOT_IMPORT_STATUS] '06/20/2014','06/30/2014','','W'  --WILL BE RUNNING ON A FRI., BUT DATES PASSED IN WILL BE YESTERDAY/THU..

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
--This code is ran at 10:30am each day, and again at 11:00am on Invoice Fridays, or similar schedule:
--IF (DATEDIFF(DD,CAST('01/20/2012' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN 
--IF (DATEDIFF(DD,CAST('09/27/2013' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
	--This is an Invoice Friday:
	IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN  --end date + 1 may not be today, so dbo.getdate() is checked...
		SET @MSG1 = 'Today, '
	END
	SET @MSG1 = @MSG1 + CONVERT(VARCHAR(10),@DTM_END,101) + ', is Invoice Friday. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
	--IF LEN(REPLACE(REPLACE(@MSG1,',',''),' ','')) > 2 BEGIN
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + 'Imported file(s) for the past 2 weeks show the following date(s) might still be ' + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + '  missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
		SET @MSG1 = @MSG1 + 'Invoicing processes begin at 11:59am, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + 'Any missing import files not on ftp by 11:59am, will Not be included in Today''s invoicing.' + CHAR(10) + CHAR(13)
	END
	ELSE BEGIN
		SET @MSG1 = @MSG1 + 'ALL date(s) appear to be imported.    Thank you.' + CHAR(10) + CHAR(13)
	END
END
ELSE BEGIN  --This is Not an Invoice Friday:
	SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
	--IF LEN(REPLACE(REPLACE(@MSG1,',',''),' ','')) > 2 BEGIN
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
	END
	ELSE BEGIN
		SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent.' + CHAR(10) + CHAR(13)
	END
END

IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
		SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Posting Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

			SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 9:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
		END
	END
	ELSE BEGIN
		SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
		END
	END
	
END
--This put directly in report at bottom, in new table, with different font size...:
--SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Please forward any questions or problems with this notification to dthola@wslive.com.  Thanks.'

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--DATALOT:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM YZ_TB_ERRORS_FOUND
							   WHERE TENANT_KEY = 900700 AND SUB_GROUP_NAME = 'DATALOT_INVOICING' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--  SELECT TOP 10 * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900700
--=============================================
	--SELECT * FROM #IMPORTS_DATALOT_IMPORT_STATUS ORDER BY FILEDATETIME, FTP_FILE_NAME
	--INSERT MISSING DATES STRING INTO YZ_TB_IMPORTS_STATUS TABLE.
	--=============================================
	--Have to return a record for SSIS, no matter what, otherwise the f thing needs it's mommy:  Can't figure out how to get SSIS to work otherwise!!!
	--INSERT INTO YZ_TB_IMPORTS_STATUS
	--SELECT 
	-- @TENANT_KEY     --TENANT_KEY
	--,''              --ERROR_MSG  --Never make this @MSG1 !!!  Must stay as ''.
	--Do NOT want to got to early exit here because data was good, according to 'checks'!  We want to import data into permanent table.
--IN SSIS, WOULD SELECT FROM TABLE WHERE TENANT_KEY = 900700 AND STORE IN SSIS VARIABLE.  IF VARIABLE NOT EMPTY, WILL SEND EMAIL AND END SSIS...
--=============================================

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_DATALOT_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_DATALOT_INVOICING_IMPORT]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_DATALOT_INVOICING_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_DATALOT_INVOICING_IMPORT]

--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1 ORDER BY [DATETIME] DESC

--Durations in file are in minutes.  Must convert to seconds.  Store as seconds. !!!
--  This is anything but 'standard', but it doesn't matter if they don't follow them !!!


--=============================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY =       900700  --DATALOT
--=============================================
DELETE FROM YZ_TB_ERRORS_FOUND 
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = 'DATALOT_INVOICING'    --  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900700
--=============================================

--===================================================================================
--USING @WS_ROW_CREATED_TIME FOR ALL INSERTS WILL ALLOW ME TO DELETE SPECIFIC INSERT PROCESSES/FILES.  MOST IMPORTANT!!!  FOR ALL TABLES.
--  IN CASE OF EMERGENCY, CRACK GLASS.
--===================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.getdate()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===================================================================================

--DELETE FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1 
--WHERE ISNULL(FF_USERNAME,'') IN ('username','')  OR  ISNULL(FF_AGENT_ID,'') = ''  OR  ISNULL(FF_HOUR,'') = ''
--======================================================================
--HANDLE COLUMN HEADER AND JUNK RECORDS:
--======================================================================
INSERT INTO YZ_TB_IMPORTS_DATALOT_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_USERNAME
,FF_AGENT_ID
,FF_DAY
,FF_DATE
,FF_HOUR
,FF_ONLINE_MINS
,FF_CONNECTED_MINS
,FF_WRAP_MINS
,FF_WAITING_MINS
,FF_SUCCESSFUL_XFERS
,FF_INBOUNDS
,FF_OUTBOUNDS
,FF_WRAP_ADJUSTMENT
,FF_TOTAL_XFERS
,FF_3_MIN_XFERS
,FF_3_MIN_RETAIL_XFERS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,INBOUND_CALLS
,OUTBOUND_CALLS
,TOTAL_CALLS
,SUCCESSFUL_TRANSFERS
,ONLINE_TIME
,CONNECTED_TIME
,WRAP_TIME
,WAITING_TIME
,WRAP_ADJ_TIME
,WRAP_ALLOWED
,AUTHORIZED_WRAP
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES
,BILLABLE_TALK
,BILLABLE_WRAP
,AUTHORIZED_TRANSFERS
,TOTAL_TRANSFERS
,THREE_MIN_TRANSFERS
,THREE_MIN_RETAIL_TRANSFERS
,BASE_3_MINUTE_TRANSFER
,[3_MINUTE_TRANSFER_BONUS]
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,PAY_GROUP
,ASA_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,WRAP_MINUTE_RATE
,BASE_3_MINUTE_XFER_RATE
,[3_MINUTE_XFER_BONUS_RATE]
,ELIGIBLE_FOR_XFER_BONUS
,AUTHORIZED_TO_INVOICE_TYPE
,TOTAL_AUTHORIZED_PAY
,TOTAL_AUTHORIZED_XFER_PAY
,HAS_HOLIDAYS
,PAY_RATE_STANDARD
,PAY_RATE_HOLIDAY
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,XFER_ID_EXT
)
SELECT
 24                     --BAD_IMPORTS_NO  --'Junk Record'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE.
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_USERNAME
,W1.FF_AGENT_ID
,W1.FF_DAY
,W1.FF_DATE
,W1.FF_HOUR
,W1.FF_ONLINE_MINS
,W1.FF_CONNECTED_MINS
,W1.FF_WRAP_MINS
,W1.FF_WAITING_MINS
,W1.FF_SUCCESSFUL_XFERS
,W1.FF_INBOUNDS
,W1.FF_OUTBOUNDS
,W1.FF_WRAP_ADJUSTMENT
,W1.FF_TOTAL_XFERS
,W1.FF_3_MIN_XFERS
,W1.FF_3_MIN_RETAIL_XFERS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.INBOUND_CALLS
,W1.OUTBOUND_CALLS
,W1.TOTAL_CALLS
,W1.SUCCESSFUL_TRANSFERS
,W1.ONLINE_TIME
,W1.CONNECTED_TIME
,W1.WRAP_TIME
,W1.WAITING_TIME
,W1.WRAP_ADJ_TIME
,W1.WRAP_ALLOWED
,W1.AUTHORIZED_WRAP
,W1.CPROD
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_MINUTES
,W1.BILLABLE_TALK
,W1.BILLABLE_WRAP
,W1.AUTHORIZED_TRANSFERS
,W1.TOTAL_TRANSFERS
,W1.THREE_MIN_TRANSFERS
,W1.THREE_MIN_RETAIL_TRANSFERS
,W1.BASE_3_MINUTE_TRANSFER
,W1.[3_MINUTE_TRANSFER_BONUS]
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.PAY_GROUP
,W1.ASA_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.WRAP_MINUTE_RATE
,W1.BASE_3_MINUTE_XFER_RATE
,W1.[3_MINUTE_XFER_BONUS_RATE]
,W1.ELIGIBLE_FOR_XFER_BONUS
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.TOTAL_AUTHORIZED_PAY
,W1.TOTAL_AUTHORIZED_XFER_PAY
,W1.HAS_HOLIDAYS
,W1.PAY_RATE_STANDARD
,W1.PAY_RATE_HOLIDAY
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.XFER_ID_EXT

FROM           YZ_TB_IMPORTS_DATALOT_INVOICING_1    W1
WHERE ISNULL(W1.FF_USERNAME,'') IN ('username','')  OR  ISNULL(W1.FF_AGENT_ID,'') = ''  OR  ISNULL(W1.FF_HOUR,'') = ''

--GOOD LUCK EVER PULLING OUT THE CORRECT DATA FROM THE _BAD TABLE TO REIMPORT INTO THE _INVOICING TABLE !!!
--======================================================================
--DELETE COLUMN HEADER AND JUNK RECORDS;
--======================================================================
DELETE FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1
WHERE ISNULL(FF_USERNAME,'') IN ('username','')  OR  ISNULL(FF_AGENT_ID,'') = ''  OR  ISNULL(FF_HOUR,'') = ''
--======================================================================

--TIMEZONE IS IN: ????????

--!!!********************************
--   FF_DATETIME IS TIME OF ACTIVITY WHEN ON THE EAST COAST.  BUT "TIME OF ACTIVITY" SHOULD BE IN CENTRAL TIMEZONE FOR US IN CENTRAL TIMEZONE!!!
--     US/WE IN CENTRAL TIMEZONE CAN'T RUN A REPORT FOR 3PM, WHEN IT IS ONLY 2PM CST TO US/WE (IN CENTRAL TIMEZONE) !!! WE DON'T RUN FUTURE TIME REPORTS.
--!!!********************************
--=============================================
--POPULATE ADDITIONAL FIELDS IN WORK (_1) TABLE THAT WEREN'T IN IMPORTED FILE:
--=============================================
UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
 HOUR_INTERVAL     = CASE WHEN CHARINDEX('12p' ,FF_HOUR) = 1 THEN LEFT(FF_HOUR, 2)
						  WHEN CHARINDEX('12a' ,FF_HOUR) = 1 THEN 0
						  WHEN CHARINDEX('p'   ,FF_HOUR) = 2 THEN LEFT(FF_HOUR, 1) + 12
						  WHEN CHARINDEX('p'   ,FF_HOUR) = 3 THEN LEFT(FF_HOUR, 2) + 12
						  WHEN CHARINDEX('a'   ,FF_HOUR) = 2 THEN LEFT(FF_HOUR, 1)
						  WHEN CHARINDEX('a'   ,FF_HOUR) = 3 THEN LEFT(FF_HOUR, 2)
					      ELSE 35 END														-- VALUE WILL CAUSE ERROR SO WE CAN CATCH INVALID HOUR INTERVALS
,INBOUND_CALLS				= CAST(ISNULL(FF_INBOUNDS         ,'0') AS INTEGER)
,OUTBOUND_CALLS				= CAST(ISNULL(FF_OUTBOUNDS        ,'0') AS INTEGER)
,SUCCESSFUL_TRANSFERS		= CAST(ISNULL(FF_SUCCESSFUL_XFERS ,'0') AS INTEGER)
,ONLINE_TIME				= CAST(ISNULL(FF_ONLINE_MINS      ,'0.00') AS DECIMAL(10,2))
,CONNECTED_TIME				= CAST(ISNULL(FF_CONNECTED_MINS   ,'0.00') AS DECIMAL(10,2))
,WRAP_TIME					= CAST(ISNULL(FF_WRAP_MINS        ,'0.00') AS DECIMAL(10,2))
,WAITING_TIME				= CAST(ISNULL(FF_WAITING_MINS     ,'0.00') AS DECIMAL(10,2))
,WRAP_ADJ_TIME				= CAST(ISNULL(FF_WRAP_ADJUSTMENT  ,'0.00') AS DECIMAL(10,2))
,TOTAL_TRANSFERS			= CAST(ISNULL(FF_TOTAL_XFERS		,'0') AS INTEGER)
,THREE_MIN_TRANSFERS		= CAST(ISNULL(FF_3_MIN_XFERS		,'0') AS INTEGER)
,THREE_MIN_RETAIL_TRANSFERS	= CAST(ISNULL(FF_3_MIN_RETAIL_XFERS	,'0') AS INTEGER)
,TENANT_KEY					= @TENANT_KEY  --NOT REALLY NECESSARY.
,XFER_ID_EXT				= 'DLX'


--===============================================
-- CHANGE NEGATIVE ONLINE MIN VALUES TO ZERO
--===============================================
UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
 ONLINE_TIME = 0
FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1
WHERE ONLINE_TIME < 0

--===============================================
-- UPDATE DATETIME
--===============================================
UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
[DATETIME]			  = CAST(RTRIM(ISNULL(FF_DATE,'01/01/1900')) + ' ' + CAST(HOUR_INTERVAL AS VARCHAR) + ':00:00' AS DATETIME)

--======================================================================
--Need when populating tmp DEW table for insert into _AIA table.
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME

SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN([DATETIME]) FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX([DATETIME]) FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1))  
--======================================================================

--======================================================================
UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM            YZ_TB_IMPORTS_DATALOT_INVOICING_1      I
INNER JOIN      DATE_TIME                          DT   ON DT.CAL_DATE = I.[DATETIME]

--===============================================
-- GENERATE ANY ENGINEERED VALUES
--===============================================
-- SELECT * FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1
UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
 TOTAL_CALLS = INBOUND_CALLS + OUTBOUND_CALLS

--===============================================
-- CALCULATE PAYMENT VALUES
--===============================================
--UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
-- WRAP_ALLOWED = (TOTAL_CALLS * 5.0) / 60.0			-- 5 SECONDS OF WRAP ALLOWED PER CALL CONVERTED TO MINUTES

--UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
-- AUTHORIZED_WRAP = CASE WHEN WRAP_ALLOWED > WRAP_TIME THEN
--						  WRAP_TIME
--						ELSE
--						  WRAP_ALLOWED
--						END

--UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
-- CPROD = CONNECTED_TIME + WAITING_TIME + AUTHORIZED_WRAP
			  
--UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
-- MINIMUM_GUARANTEE = CPROD * (37.0 / 60.0)		-- 37 MINIMUM GUARANTEE

--UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
-- AUTHORIZED_MINUTES   = CASE WHEN MINIMUM_GUARANTEE > (CONNECTED_TIME + AUTHORIZED_WRAP) THEN	-- INCLUDED AUTHORIZED_WRAP AS OF 12/16/15 PER KRISTIE LUOMA
--							   MINIMUM_GUARANTEE
--							 ELSE
--							   CONNECTED_TIME + AUTHORIZED_WRAP									-- INCLUDED AUTHORIZED_WRAP AS OF 12/16/15 PER KRISTIE LUOMA
--							 END
--,AUTHORIZED_TRANSFERS = SUCCESSFUL_TRANSFERS
--,AUTHORIZED_TRANSFERS = THREE_MIN_TRANSFERS

--======================================================================
--HANDLE INVALID DATE/TIME RECORDS:  ( [DATETIME] is joined with DATE_TIME table by cal_date.  If [DATETIME] is not an exact 15 minute interval, issue.)
--======================================================================
INSERT INTO YZ_TB_IMPORTS_DATALOT_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_USERNAME
,FF_AGENT_ID
,FF_DAY
,FF_DATE
,FF_HOUR
,FF_ONLINE_MINS
,FF_CONNECTED_MINS
,FF_WRAP_MINS
,FF_WAITING_MINS
,FF_SUCCESSFUL_XFERS
,FF_INBOUNDS
,FF_OUTBOUNDS
,FF_WRAP_ADJUSTMENT
,FF_TOTAL_XFERS
,FF_3_MIN_XFERS
,FF_3_MIN_RETAIL_XFERS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,INBOUND_CALLS
,OUTBOUND_CALLS
,TOTAL_CALLS
,SUCCESSFUL_TRANSFERS
,ONLINE_TIME
,CONNECTED_TIME
,WRAP_TIME
,WAITING_TIME
,WRAP_ADJ_TIME
,WRAP_ALLOWED
,AUTHORIZED_WRAP
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES
,BILLABLE_TALK
,BILLABLE_WRAP
,AUTHORIZED_TRANSFERS
,TOTAL_TRANSFERS
,THREE_MIN_TRANSFERS
,THREE_MIN_RETAIL_TRANSFERS
,BASE_3_MINUTE_TRANSFER
,[3_MINUTE_TRANSFER_BONUS]
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,PAY_GROUP
,ASA_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,WRAP_MINUTE_RATE
,BASE_3_MINUTE_XFER_RATE
,[3_MINUTE_XFER_BONUS_RATE]
,ELIGIBLE_FOR_XFER_BONUS
,AUTHORIZED_TO_INVOICE_TYPE
,TOTAL_AUTHORIZED_PAY
,TOTAL_AUTHORIZED_XFER_PAY
,HAS_HOLIDAYS
,PAY_RATE_STANDARD
,PAY_RATE_HOLIDAY
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,XFER_ID_EXT
)
SELECT
 26                     --BAD_IMPORTS_NO  --'Invalid Date/Time'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE,  'ACE' FILE.
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_USERNAME
,W1.FF_AGENT_ID
,W1.FF_DAY
,W1.FF_DATE
,W1.FF_HOUR
,W1.FF_ONLINE_MINS
,W1.FF_CONNECTED_MINS
,W1.FF_WRAP_MINS
,W1.FF_WAITING_MINS
,W1.FF_SUCCESSFUL_XFERS
,W1.FF_INBOUNDS
,W1.FF_OUTBOUNDS
,W1.FF_WRAP_ADJUSTMENT
,W1.FF_TOTAL_XFERS
,W1.FF_3_MIN_XFERS
,W1.FF_3_MIN_RETAIL_XFERS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.INBOUND_CALLS
,W1.OUTBOUND_CALLS
,W1.TOTAL_CALLS
,W1.SUCCESSFUL_TRANSFERS
,W1.ONLINE_TIME
,W1.CONNECTED_TIME
,W1.WRAP_TIME
,W1.WAITING_TIME
,W1.WRAP_ADJ_TIME
,W1.WRAP_ALLOWED
,W1.AUTHORIZED_WRAP
,W1.CPROD
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_MINUTES
,W1.BILLABLE_TALK
,W1.BILLABLE_WRAP
,W1.AUTHORIZED_TRANSFERS
,W1.TOTAL_TRANSFERS
,W1.THREE_MIN_TRANSFERS
,W1.THREE_MIN_RETAIL_TRANSFERS
,W1.BASE_3_MINUTE_TRANSFER
,W1.[3_MINUTE_TRANSFER_BONUS]
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.PAY_GROUP
,W1.ASA_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.WRAP_MINUTE_RATE
,W1.BASE_3_MINUTE_XFER_RATE
,W1.[3_MINUTE_XFER_BONUS_RATE]
,W1.ELIGIBLE_FOR_XFER_BONUS
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.TOTAL_AUTHORIZED_PAY
,W1.TOTAL_AUTHORIZED_XFER_PAY
,W1.HAS_HOLIDAYS
,W1.PAY_RATE_STANDARD
,W1.PAY_RATE_HOLIDAY
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.XFER_ID_EXT
FROM           YZ_TB_IMPORTS_DATALOT_INVOICING_1    W1
WHERE ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================
--DELETE INVALID DATE/TIME RECORDS;
--======================================================================
DELETE FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================


--======================================================================
--HANDLE DUPLICATES:
--======================================================================
INSERT INTO YZ_TB_IMPORTS_DATALOT_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_USERNAME
,FF_AGENT_ID
,FF_DAY
,FF_DATE
,FF_HOUR
,FF_ONLINE_MINS
,FF_CONNECTED_MINS
,FF_WRAP_MINS
,FF_WAITING_MINS
,FF_SUCCESSFUL_XFERS
,FF_INBOUNDS
,FF_OUTBOUNDS
,FF_WRAP_ADJUSTMENT
,FF_TOTAL_XFERS
,FF_3_MIN_XFERS
,FF_3_MIN_RETAIL_XFERS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,INBOUND_CALLS
,OUTBOUND_CALLS
,TOTAL_CALLS
,SUCCESSFUL_TRANSFERS
,ONLINE_TIME
,CONNECTED_TIME
,WRAP_TIME
,WAITING_TIME
,WRAP_ADJ_TIME
,WRAP_ALLOWED
,AUTHORIZED_WRAP
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES
,BILLABLE_TALK
,BILLABLE_WRAP
,AUTHORIZED_TRANSFERS
,TOTAL_TRANSFERS
,THREE_MIN_TRANSFERS
,THREE_MIN_RETAIL_TRANSFERS
,BASE_3_MINUTE_TRANSFER
,[3_MINUTE_TRANSFER_BONUS]
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,PAY_GROUP
,ASA_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,WRAP_MINUTE_RATE
,BASE_3_MINUTE_XFER_RATE
,[3_MINUTE_XFER_BONUS_RATE]
,ELIGIBLE_FOR_XFER_BONUS
,AUTHORIZED_TO_INVOICE_TYPE
,TOTAL_AUTHORIZED_PAY
,TOTAL_AUTHORIZED_XFER_PAY
,HAS_HOLIDAYS
,PAY_RATE_STANDARD
,PAY_RATE_HOLIDAY
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,XFER_ID_EXT
)
SELECT
 21                     --BAD_IMPORTS_NO  --'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE,  'ACE' FILE.
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_USERNAME
,W1.FF_AGENT_ID
,W1.FF_DAY
,W1.FF_DATE
,W1.FF_HOUR
,W1.FF_ONLINE_MINS
,W1.FF_CONNECTED_MINS
,W1.FF_WRAP_MINS
,W1.FF_WAITING_MINS
,W1.FF_SUCCESSFUL_XFERS
,W1.FF_INBOUNDS
,W1.FF_OUTBOUNDS
,W1.FF_WRAP_ADJUSTMENT
,W1.FF_TOTAL_XFERS
,W1.FF_3_MIN_XFERS
,W1.FF_3_MIN_RETAIL_XFERS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.INBOUND_CALLS
,W1.OUTBOUND_CALLS
,W1.TOTAL_CALLS
,W1.SUCCESSFUL_TRANSFERS
,W1.ONLINE_TIME
,W1.CONNECTED_TIME
,W1.WRAP_TIME
,W1.WAITING_TIME
,W1.WRAP_ADJ_TIME
,W1.WRAP_ALLOWED
,W1.AUTHORIZED_WRAP
,W1.CPROD
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_MINUTES
,W1.BILLABLE_TALK
,W1.BILLABLE_WRAP
,W1.AUTHORIZED_TRANSFERS
,W1.TOTAL_TRANSFERS
,W1.THREE_MIN_TRANSFERS
,W1.THREE_MIN_RETAIL_TRANSFERS
,W1.BASE_3_MINUTE_TRANSFER
,W1.[3_MINUTE_TRANSFER_BONUS]
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.PAY_GROUP
,W1.ASA_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.WRAP_MINUTE_RATE
,W1.BASE_3_MINUTE_XFER_RATE
,W1.[3_MINUTE_XFER_BONUS_RATE]
,W1.ELIGIBLE_FOR_XFER_BONUS
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.TOTAL_AUTHORIZED_PAY
,W1.TOTAL_AUTHORIZED_XFER_PAY
,W1.HAS_HOLIDAYS
,W1.PAY_RATE_STANDARD
,W1.PAY_RATE_HOLIDAY
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.XFER_ID_EXT
FROM
(	SELECT
	 [DATETIME]
	,FF_AGENT_ID
	,ROW_NUMBER() over (partition by [DATETIME], FF_AGENT_ID
                            order by [DATETIME], FF_AGENT_ID, ONLINE_TIME DESC) ROWNO
	FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1 
) TNM
LEFT JOIN      YZ_TB_IMPORTS_DATALOT_INVOICING_1    W1   ON W1.[DATETIME] = TNM.[DATETIME]
													AND W1.FF_AGENT_ID    = TNM.FF_AGENT_ID
WHERE TNM.ROWNO > 1

--GOOD LUCK EVER PULLING OUT THE CORRECT DATA FROM THE _BAD TABLE TO REIMPORT INTO THE _UV_ TABLES !!!!!!!!!!!!!!!!!!!!!!!!!!!!!
--======================================================================
--DELETE DUPLICATES:
--======================================================================
DELETE FROM TNM  
FROM
(	SELECT
	 [DATETIME]
	,FF_AGENT_ID
	,ROW_NUMBER() over (partition by [DATETIME], FF_AGENT_ID
                            order by [DATETIME], FF_AGENT_ID, ONLINE_TIME DESC) ROWNO
	FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1
) TNM
WHERE TNM.ROWNO > 1
--======================================================================


--===============================================
UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
  EMAIL              = ISNULL(IAM.EMAIL,'')
 ,SCHEDULER_ACL_NAME = ISNULL(IAM.FF_RESOURCE,'')   --BLANK for 'Standard' OR 'Resource' if 'Resource'.  POP'D TEMPORARILY WITH STUFF FROM MAP FILE!
 ,PAY_GROUP		     = ISNULL(IAM.PAY_GROUP,'')
 ,RESOURCE_NAME      = ISNULL(IAM.RESOURCE_NAME,'')
 ,ASA_NAME			 = ISNULL(IAM.FF_ASA_NAME,'')
 FROM            YZ_TB_IMPORTS_DATALOT_INVOICING_1        I
 LEFT JOIN       YZ_TB_IMPORTS_DATALOT_AIA_AGENT_MAPPING  IAM  ON IAM.INVOICE_MAP_KEY      = I.FF_AGENT_ID

--===============================================
SET DATEFIRST 1  -- = Monday  
--===============================================  --THE INSANITY OF IT ALL !!!!!!!!

UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
	ID_EXT = CASE WHEN I.SCHEDULER_ACL_NAME = ''		  THEN 'DLS' -- DLS = Datalot Standard Agents
				  WHEN I.SCHEDULER_ACL_NAME = 'Resource'  THEN 'DLR' -- DLR = Datalot Resource Agents
				  WHEN I.SCHEDULER_ACL_NAME = 'Priority'  THEN 'DLP' -- DLP = Datalot Priority
				  ELSE '' END
 FROM            YZ_TB_IMPORTS_DATALOT_INVOICING_1        I     --NO WAY TO JOIN YZ_TB_IMPORTS_DATALOT_SD_INVOICE_GROUPS TABLE TO _1; ABSOLUTELY NONE !@!!!
 INNER JOIN      DATE_TIME                            DT   ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY

--===============================================
UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET     -- SELECT
  AIR_DAY_TYPE = CASE WHEN IG.HAS_HOLIDAYS = 'Y' AND
						 (    ISNULL(IH.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) OR
						   ( ISNULL(IHA.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) AND ISNULL(IHA.ID_EXT,'') <> '' )
						 )
					  THEN 'H' ELSE 'S' END  --AS AIR_DAY_TYPE  --H=Holiday  --S=Standard
 FROM            YZ_TB_IMPORTS_DATALOT_INVOICING_1               I
 INNER JOIN      DATE_TIME                                   DT   ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY
 LEFT JOIN       YZ_TB_IMPORTS_DATALOT_SD_INVOICE_GROUPS         IG   ON IG.ID_EXT              = I.ID_EXT
 LEFT JOIN       YZ_TB_IMPORTS_DATALOT_SD_INVOICE_HOLIDAYS       IH   ON IH.HOLIDAY_DATE        = CAST(DT.CAL_DATE_STRING AS DATETIME)
 LEFT JOIN       YZ_TB_IMPORTS_DATALOT_SD_INVOICE_HOLIDAYS_ADDL  IHA  ON IHA.HOLIDAY_DATE       = CAST(DT.CAL_DATE_STRING AS DATETIME)
															    AND IHA.ID_EXT             = I.ID_EXT	

--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1 WHERE AIR_DAY_TYPE = 'H'
--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_INVOICING   WHERE AIR_DAY_TYPE = 'H'
--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_SD_INVOICE_HOLIDAYS

--===============================================
UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
  AIR_ACW_FONT_COLOR			= 'Black'
 ,MIN_GUARANTEE_RATE			= ISNULL(IG.MIN_GUARANTEE_RATE,0)           --varies between scheduler acl names.
 ,MIN_GUARANTEE_MINUTES			= ISNULL(IG.MIN_GUARANTEE_MINUTES,0)		--EFFECTIVE 4/1/16
 ,MIN_GUARANTEE_TYPE			= ISNULL(IG.MIN_GUARANTEE_TYPE,'')			--varies between scheduler acl names.
 ,WRAP_MINUTE_RATE				= ISNULL(IG.WRAP_MINUTE_RATE,0)				--EFFECTIVE 4/1/16
 ,BASE_3_MINUTE_XFER_RATE		= ISNULL(IG.BASE_3_MINUTE_XFER_RATE,0)		--EFFECTIVE 4/1/16
 ,[3_MINUTE_XFER_BONUS_RATE]	= ISNULL(IG.[3_MINUTE_XFER_BONUS_RATE],0)	--EFFECTIVE 4/1/16
 ,AUTHORIZED_TO_INVOICE_TYPE	= ISNULL(IG.AUTHORIZED_TO_INVOICE_TYPE,'')  --varies between scheduler acl names.
 ,HAS_HOLIDAYS					= IG.HAS_HOLIDAYS
 ,PAY_RATE_STANDARD				= ISNULL(IG.PAY_RATE_STANDARD,0)			--EFFECTIVE 4/1/16
 ,PAY_RATE_HOLIDAY				= ISNULL(IG.PAY_RATE_HOLIDAY,0)				--EFFECTIVE 4/1/16
 ,INCLUDE_IN_CAS				= IG.INCLUDE_IN_CAS
 ,READY_FOR_XML					= IG.READY_FOR_XML
 ,SHOW_ID_EXTS					= IG.SHOW_ID_EXTS
-- ,RESOURCE_NAME   = I.FF_FULL_NAME
 FROM            YZ_TB_IMPORTS_DATALOT_INVOICING_1        I
 LEFT JOIN       YZ_TB_IMPORTS_DATALOT_SD_INVOICE_GROUPS  IG  ON IG.ID_EXT    = I.ID_EXT
												
--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_SD_INVOICE_GROUPS
	
--===============================================
 UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
   INVOICE_ID         = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
  ,SCHEDULER_ACL_NAME = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
 FROM            YZ_TB_IMPORTS_DATALOT_INVOICING_1            AIA 
 LEFT JOIN       YZ_TB_IMPORTS_DATALOT_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT

--====================================================================================================================================
-- UPDATE PAYMENT FIELDS EFFECTIVE 4/1/16
--====================================================================================================================================
-- SELECT * FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1

UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
 AUTHORIZED_TRANSFERS = THREE_MIN_TRANSFERS

UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
 CPROD = CONNECTED_TIME + WAITING_TIME

UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
 MINIMUM_GUARANTEE = CPROD * (MIN_GUARANTEE_MINUTES / 60.00)

UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
 AUTHORIZED_MINUTES = CASE WHEN MINIMUM_GUARANTEE > CONNECTED_TIME THEN
							 MINIMUM_GUARANTEE
						   ELSE
							 CONNECTED_TIME
						   END

UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
 BILLABLE_TALK				= CASE WHEN AIR_DAY_TYPE = 'S' THEN
									AUTHORIZED_MINUTES * PAY_RATE_STANDARD
								   WHEN AIR_DAY_TYPE = 'H' THEN
									AUTHORIZED_MINUTES * PAY_RATE_HOLIDAY
								   ELSE AUTHORIZED_MINUTES * PAY_RATE_STANDARD END

,BILLABLE_WRAP				= TOTAL_CALLS * WRAP_MINUTE_RATE
,BASE_3_MINUTE_TRANSFER		= AUTHORIZED_TRANSFERS * BASE_3_MINUTE_XFER_RATE
,[3_MINUTE_TRANSFER_BONUS]	= AUTHORIZED_TRANSFERS * [3_MINUTE_XFER_BONUS_RATE]

UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING_1 SET
 TOTAL_AUTHORIZED_PAY		= BILLABLE_TALK + BILLABLE_WRAP
,TOTAL_AUTHORIZED_XFER_PAY	= BASE_3_MINUTE_TRANSFER + [3_MINUTE_TRANSFER_BONUS] -- <--------- BONUS MAY NEED TO BE SUBTRACTED IF AGENT DOES NOT ACHIEVE >= 5 XFERS/HR FOR INVOICE PERIOD
																				 -- <--------- CHANGED FROM 6 XFERS/HR TO 5 XFERS/HR EFFECTIVE 11/01/2017


--===============================================  --YOU WANT TO CHANGE THIS, BUT DON'T !!!!!!!  INVOICE GROUPS POPULATED, IT COULD BE CHANGED TO USE...

--=============================================	--Hopefully generic enough for all Tenant SSIS to use!
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=============================================
--DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = @TENANT_KEY  --DONE ABOVE SO NOT SEEING LAST FAILED MESSAGE IF FAILURE BEFORE THIS POINT!!!
--  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900624
--=======================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--SQL won't insert special characters!!!  + CHAR(9)  --CHAR(10) + CHAR(13)
--Check #1:  ===================================================================================================I DON'T THINK THEY ARE PUTTING DUD FILES ON FTP.
	SET @RCD_CNT = (	SELECT COUNT(*) FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1 )
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + '1) File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	--SSIS reads yz_tb_errors_found table where tenant_key = 900543, and if record exists, outputs results/error_msg field in an email.
	INSERT INTO YZ_TB_ERRORS_FOUND
	(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY     --TENANT_KEY
	,'DATALOT_INVOICING'           --SUB_GROUP_NAME
	,@MSG1           --ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	
	--=============================================
	--Have to return a record for SSIS, no matter what, otherwise the f thing needs it's mommy:  Can't figure out how to get SSIS to work otherwise!!!
	INSERT INTO YZ_TB_ERRORS_FOUND
	(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY     --TENANT_KEY
	,'DATALOT_INVOICING'           --SUB_GROUP_NAME
	,''              --ERROR_MSG  --Never make this @MSG1 !!!  Must stay as ''.
	--Do NOT want to got to early exit here because data was good, according to 'checks'!  We want to import data into permanent table.
END
--IN SSIS, WOULD SELECT FROM TABLE WHERE TENANT_KEY = 900??? AND STORE IN SSIS VARIABLE.  IF VARIABLE NOT EMPTY, WILL SEND EMAIL AND END SSIS...
--=============================================

--=============================================
--=============================================
UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING SET
 FF_USERNAME				= W1.FF_USERNAME
,FF_AGENT_ID				= W1.FF_AGENT_ID
,FF_DAY						= W1.FF_DAY
,FF_DATE					= W1.FF_DATE
,FF_HOUR					= W1.FF_HOUR
,FF_ONLINE_MINS				= W1.FF_ONLINE_MINS
,FF_CONNECTED_MINS			= W1.FF_CONNECTED_MINS
,FF_WRAP_MINS				= W1.FF_WRAP_MINS
,FF_WAITING_MINS			= W1.FF_WAITING_MINS
,FF_SUCCESSFUL_XFERS		= W1.FF_SUCCESSFUL_XFERS
,FF_INBOUNDS				= W1.FF_INBOUNDS
,FF_OUTBOUNDS				= W1.FF_OUTBOUNDS
,FF_WRAP_ADJUSTMENT			= W1.FF_WRAP_ADJUSTMENT
,FF_TOTAL_XFERS				= W1.FF_TOTAL_XFERS
,FF_3_MIN_XFERS				= W1.FF_3_MIN_XFERS
,FF_3_MIN_RETAIL_XFERS		= W1.FF_3_MIN_RETAIL_XFERS

,SEQNO_ADDED_TIME			= W1.SEQNO_ADDED_TIME
,SEQNO						= W1.SEQNO
,FTP_FILE_NAME				= W1.FTP_FILE_NAME

,[DATETIME]					= W1.[DATETIME]
,HOUR_INTERVAL				= W1.HOUR_INTERVAL
,INBOUND_CALLS				= W1.INBOUND_CALLS
,OUTBOUND_CALLS				= W1.OUTBOUND_CALLS
,TOTAL_CALLS				= W1.TOTAL_CALLS
,SUCCESSFUL_TRANSFERS		= W1.SUCCESSFUL_TRANSFERS
,ONLINE_TIME				= W1.ONLINE_TIME
,CONNECTED_TIME				= W1.CONNECTED_TIME
,WRAP_TIME					= W1.WRAP_TIME
,WAITING_TIME				= W1.WAITING_TIME
,WRAP_ADJ_TIME				= W1.WRAP_ADJ_TIME
,WRAP_ALLOWED				= W1.WRAP_ALLOWED
,AUTHORIZED_WRAP			= W1.AUTHORIZED_WRAP
,CPROD						= W1.CPROD
,MINIMUM_GUARANTEE			= W1.MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES			= W1.AUTHORIZED_MINUTES
,BILLABLE_TALK				= W1.BILLABLE_TALK
,BILLABLE_WRAP				= W1.BILLABLE_WRAP
,AUTHORIZED_TRANSFERS		= W1.AUTHORIZED_TRANSFERS
,TOTAL_TRANSFERS			= W1.TOTAL_TRANSFERS
,THREE_MIN_TRANSFERS		= W1.THREE_MIN_TRANSFERS
,THREE_MIN_RETAIL_TRANSFERS	= W1.THREE_MIN_RETAIL_TRANSFERS
,BASE_3_MINUTE_TRANSFER		= W1.BASE_3_MINUTE_TRANSFER
,[3_MINUTE_TRANSFER_BONUS]	= W1.[3_MINUTE_TRANSFER_BONUS]
,EMAIL						= W1.EMAIL
,ID_EXT						= W1.ID_EXT
,SCHEDULER_ACL_NAME			= W1.SCHEDULER_ACL_NAME
,PAY_GROUP					= W1.PAY_GROUP
,ASA_NAME					= W1.ASA_NAME
--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE					= W1.CAL_DATE
,TENANT_KEY					= W1.TENANT_KEY
,AIR_DAY_TYPE				= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR			= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE			= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_MINUTES		= W1.MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE			= W1.MIN_GUARANTEE_TYPE
,WRAP_MINUTE_RATE			= W1.WRAP_MINUTE_RATE
,BASE_3_MINUTE_XFER_RATE	= W1.BASE_3_MINUTE_XFER_RATE
,[3_MINUTE_XFER_BONUS_RATE]	= W1.[3_MINUTE_XFER_BONUS_RATE]
,ELIGIBLE_FOR_XFER_BONUS	= W1.ELIGIBLE_FOR_XFER_BONUS
,AUTHORIZED_TO_INVOICE_TYPE = W1.AUTHORIZED_TO_INVOICE_TYPE
,TOTAL_AUTHORIZED_PAY		= W1.TOTAL_AUTHORIZED_PAY
,TOTAL_AUTHORIZED_XFER_PAY	= W1.TOTAL_AUTHORIZED_XFER_PAY
,HAS_HOLIDAYS				= W1.HAS_HOLIDAYS
,PAY_RATE_STANDARD			= W1.PAY_RATE_STANDARD
,PAY_RATE_HOLIDAY			= W1.PAY_RATE_HOLIDAY
,INCLUDE_IN_CAS				= W1.INCLUDE_IN_CAS
,READY_FOR_XML				= W1.READY_FOR_XML
,SHOW_ID_EXTS				= W1.SHOW_ID_EXTS
,INVOICE_ID					= W1.INVOICE_ID
,RESOURCE_NAME				= W1.RESOURCE_NAME
,XFER_ID_EXT				= W1.XFER_ID_EXT				-- USED FOR GENERATING DATA FOR TRANSFER INCENTIVE PAY

--,WS_ROW_CREATED_TIME		= NULL
,WS_ROW_UPDATED_TIME		= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            YZ_TB_IMPORTS_DATALOT_INVOICING_1  W1
----INNER JOIN SHOULD TAKE CARE OF MOST OF THE WORRY IN THE WHERE CLAUSE...
INNER JOIN      YZ_TB_IMPORTS_DATALOT_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
--												  AND G.ID_EXT                         = W1.ID_EXT
									              AND G.FF_AGENT_ID                    = W1.FF_AGENT_ID

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
--  AND G.ID_EXT                         = W1.ID_EXT
  AND G.FF_AGENT_ID                    = W1.FF_AGENT_ID
--IF I DO UPDATE NO MATTER WHAT, THEN I CAN SEE WHEN SAME DATA EXISTED IN MULTIPLE FILES!!!  PLUS ASSUMING LAST ON FTP IS WHAT THEY WANT.
--  AND (    ( G.FF_ACD_CALLS       <> W1.FF_ACD_CALLS )
--		OR ( G.FF_EXTN_OUT_CALLS  <> W1.FF_EXTN_OUT_CALLS )
--		OR ( G.FF_EXTN_IN_CALLS   <> W1.FF_EXTN_IN_CALLS )
--	  )

--AGENT CAN'T BE IN THE SAME TIME INTERVAL MORE THAN ONCE, NO MATTER WHAT THEIR ID_EXT...
--  ID_EXT IS DERIVED FROM THE AIA_AGENT_MAPPING TABLE BY JOINING FF_LOGIN_ID, SO ID_EXT IS IRRELEVANT !!!

--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_INVOICING WHERE ISNULL(ID_EXT,'') = ''
--  ID_EXT IS BLANK FOR ACE AND FOR AGENTS NOT IN THE AIA_AGENT_MAPPING TABLE.


--=============================================
--INSERT INTO PERMANENT IMPORT TABLE: 
--=============================================
INSERT INTO YZ_TB_IMPORTS_DATALOT_INVOICING
(
FF_USERNAME
,FF_AGENT_ID
,FF_DAY
,FF_DATE
,FF_HOUR
,FF_ONLINE_MINS
,FF_CONNECTED_MINS
,FF_WRAP_MINS
,FF_WAITING_MINS
,FF_SUCCESSFUL_XFERS
,FF_INBOUNDS
,FF_OUTBOUNDS
,FF_WRAP_ADJUSTMENT
,FF_TOTAL_XFERS
,FF_3_MIN_XFERS
,FF_3_MIN_RETAIL_XFERS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,INBOUND_CALLS
,OUTBOUND_CALLS
,TOTAL_CALLS
,SUCCESSFUL_TRANSFERS
,ONLINE_TIME
,CONNECTED_TIME
,WRAP_TIME
,WAITING_TIME
,WRAP_ADJ_TIME
,WRAP_ALLOWED
,AUTHORIZED_WRAP
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES
,BILLABLE_TALK
,BILLABLE_WRAP
,AUTHORIZED_TRANSFERS
,TOTAL_TRANSFERS
,THREE_MIN_TRANSFERS
,THREE_MIN_RETAIL_TRANSFERS
,BASE_3_MINUTE_TRANSFER
,[3_MINUTE_TRANSFER_BONUS]
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,PAY_GROUP
,ASA_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,WRAP_MINUTE_RATE
,BASE_3_MINUTE_XFER_RATE
,[3_MINUTE_XFER_BONUS_RATE]
,ELIGIBLE_FOR_XFER_BONUS
,AUTHORIZED_TO_INVOICE_TYPE
,TOTAL_AUTHORIZED_PAY
,TOTAL_AUTHORIZED_XFER_PAY
,HAS_HOLIDAYS
,PAY_RATE_STANDARD
,PAY_RATE_HOLIDAY
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,XFER_ID_EXT
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W1.FF_USERNAME
,W1.FF_AGENT_ID
,W1.FF_DAY
,W1.FF_DATE
,W1.FF_HOUR
,W1.FF_ONLINE_MINS
,W1.FF_CONNECTED_MINS
,W1.FF_WRAP_MINS
,W1.FF_WAITING_MINS
,W1.FF_SUCCESSFUL_XFERS
,W1.FF_INBOUNDS
,W1.FF_OUTBOUNDS
,W1.FF_WRAP_ADJUSTMENT
,W1.FF_TOTAL_XFERS
,W1.FF_3_MIN_XFERS
,W1.FF_3_MIN_RETAIL_XFERS

,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME

,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.INBOUND_CALLS
,W1.OUTBOUND_CALLS
,W1.TOTAL_CALLS
,W1.SUCCESSFUL_TRANSFERS
,W1.ONLINE_TIME
,W1.CONNECTED_TIME
,W1.WRAP_TIME
,W1.WAITING_TIME
,W1.WRAP_ADJ_TIME
,W1.WRAP_ALLOWED
,W1.AUTHORIZED_WRAP
,W1.CPROD
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_MINUTES
,W1.BILLABLE_TALK
,W1.BILLABLE_WRAP
,W1.AUTHORIZED_TRANSFERS
,W1.TOTAL_TRANSFERS
,W1.THREE_MIN_TRANSFERS
,W1.THREE_MIN_RETAIL_TRANSFERS
,W1.BASE_3_MINUTE_TRANSFER
,W1.[3_MINUTE_TRANSFER_BONUS]
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.PAY_GROUP
,W1.ASA_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.WRAP_MINUTE_RATE
,W1.BASE_3_MINUTE_XFER_RATE
,W1.[3_MINUTE_XFER_BONUS_RATE]
,W1.ELIGIBLE_FOR_XFER_BONUS
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.TOTAL_AUTHORIZED_PAY
,W1.TOTAL_AUTHORIZED_XFER_PAY
,W1.HAS_HOLIDAYS
,W1.PAY_RATE_STANDARD
,W1.PAY_RATE_HOLIDAY
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.XFER_ID_EXT

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            YZ_TB_IMPORTS_DATALOT_INVOICING_1  W1

LEFT JOIN       YZ_TB_IMPORTS_DATALOT_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
--												  AND G.ID_EXT                         = W1.ID_EXT
									              AND G.FF_AGENT_ID                    = W1.FF_AGENT_ID

WHERE (G.FF_AGENT_ID                     IS NULL AND ISNULL(W1.FF_AGENT_ID,'') <> '' )
--  AND (G.ID_EXT                          IS NULL AND ISNULL(W1.ID_EXT,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY  IS NULL AND ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )

--IF BLANK ID_EXT, THEY WANT TO SEE IT ON CAR INVOICE REPORTS, BUT NEVER IN XML REPORT/FILE.
--  BLANK ID_EXT ALMOST ALWAYS TRANSLATES INTO MISSING LOGIN_ID IN AIA_AGENT_MAPPING FILE...

--AGENT CAN'T BE IN THE SAME TIME INTERVAL MORE THAN ONCE, NO MATTER WHAT THEIR ID_EXT...
--  ID_EXT IS DERIVED FROM THE AIA_AGENT_MAPPING TABLE BY JOINING FF_LOGIN_ID, SO ID_EXT IS IRRELEVANT !!!

--  SELECT * FROM YZ_TB_IMPORTS_DATALOT_INVOICING WHERE ISNULL(ID_EXT,'') = ''
--  ID_EXT IS BLANK FOR ACE AND FOR AGENTS NOT IN THE AIA_AGENT_MAPPING TABLE.



--==================================
SET DATEFIRST 1  -- = Monday  --SELECT DATEPART(DW,dbo.getdate())  --SELECT @@DATEFIRST AS '1st Day', DATEPART(dw, dbo.getdate()) AS 'Today'
--==================================

--===========================
IF OBJECT_ID('TEMPDB..#DT_EASY_WEEKS') IS NOT NULL BEGIN
   DROP TABLE #DT_EASY_WEEKS
END
CREATE TABLE #DT_EASY_WEEKS
(CAL_DATE_STRING      VARCHAR(10)
,CAL_WEEK_START_DATE  DATETIME
,CAL_WEEK_END_DATE    DATETIME
,PAY_CYCLE_CLOSURE_DATE DATETIME
)
INSERT INTO #DT_EASY_WEEKS
SELECT
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
FROM DATE_TIME DT
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
--WHERE DT.CAL_DATE >= CAST('06/01/2011' AS DATETIME) AND DT.CAL_DATE <  CAST('06/20/2011' AS DATETIME)
GROUP BY 
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
--===========================
UPDATE #DT_EASY_WEEKS SET CAL_WEEK_END_DATE = DATEADD(DD,6,CAL_WEEK_START_DATE)
--110713: WAS: 06/26/2011
UPDATE #DT_EASY_WEEKS SET
 PAY_CYCLE_CLOSURE_DATE = (CASE WHEN (DATEDIFF(DD,CAST('09/29/2013' AS DATETIME),CAL_WEEK_END_DATE) % 14) = 0 THEN
									CAL_WEEK_END_DATE
								ELSE
									DATEADD(DD,7,CAL_WEEK_END_DATE)
								END)
--SELECT * FROM #DT_EASY_WEEKS ORDER BY CAL_DATE_STRING

--==================================--Currently same structure as:  [YZ_TB_AGENT_INVOICE_AUTOMATION]
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA') IS NOT NULL BEGIN
   DROP TABLE #YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA
END
CREATE TABLE #YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA   --Currently same structure as:  [YZ_TB_AGENT_INVOICE_AUTOMATION]
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[TEAM_NAME] [varchar](50)  NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_MINUTES] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[WRAP_MINUTE_RATE] [decimal](6, 3) NULL,
	[BASE_3_MINUTE_XFER_RATE] [decimal](6, 3) NULL,
	[3_MINUTE_XFER_BONUS_RATE] [decimal](6, 3) NULL,
	[ELIGIBLE_FOR_XFER_BONUS] [varchar](1) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[TOTAL_AUTHORIZED_PAY] [decimal](6, 3) NULL,
	[TOTAL_AUTHORIZED_XFER_PAY] [decimal](6, 3) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[PAY_RATE_STANDARD] [decimal](6, 3) NULL,
	[PAY_RATE_HOLIDAY] [decimal](6, 3) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](50) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[PAY_GROUP] [int] NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.FF_AGENT_ID  --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING				--[DATE]             
,DT.LABEL_HH24 + ':00'			--HOD_INTERVAL

,AIA.ONLINE_TIME * 60.00        --AU_DK_LOGGED_IN_DURATION
,AIA.WAITING_TIME * 60.00       --AU_DK_AVAILABLE_DURATION

,AIA.CONNECTED_TIME * 60.00	    --AU_DK_TALK_DURATION
,0								--AU_DK_IB_TALK_DURATION
,0								--AU_DK_OB_TALK_DURATION

,AIA.BILLABLE_WRAP * 60.00		--AU_DK_CONVENTIONAL_ACW  $ (TOTAL_CALLS * WRAP_MINUTE_RATE)
,0					            --AU_DK_NR_DURATION
,0								--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0								--AU_DK_ADJUSTED_NR_DURATION
,AIA.CPROD * 60.00				--AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.CPROD * 60.00				--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS  

,AIA.AUTHORIZED_TRANSFERS		--AU_DK_XFER_COUNT
,0								--AU_DK_HOLD_COUNT
,0								--AU_DK_CONFERENCE_COUNT
,0								--AU_DK_CONSULT_COUNT
,0								--AU_DK_PUP_COUNT

,0					            --AU_DK_OFFERED_COUNT
,AIA.TOTAL_CALLS			    --AU_DK_HANDLED_COUNT
,0								--AU_DK_IB_HANDLE_COUNT
,0					            --AU_DK_OB_HANDLE_COUNT
													
,0								--AU_DK_RONA_COUNT
,0								--AU_DK_AWR_COUNT

,AIA.MINIMUM_GUARANTEE  * 60.00		--MINIMUM_GUARANTEE
,AIA.TOTAL_AUTHORIZED_PAY * 60.00	--AUTHORIZED_TO_INVOICE

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,NULL							--TEAM_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_MINUTES
,AIA.MIN_GUARANTEE_TYPE
,AIA.WRAP_MINUTE_RATE
,AIA.BASE_3_MINUTE_XFER_RATE
,AIA.[3_MINUTE_XFER_BONUS_RATE]
,AIA.ELIGIBLE_FOR_XFER_BONUS
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.TOTAL_AUTHORIZED_PAY
,AIA.TOTAL_AUTHORIZED_XFER_PAY
,AIA.HAS_HOLIDAYS
,AIA.PAY_RATE_STANDARD
,AIA.PAY_RATE_HOLIDAY
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID  --CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID 
,AIA.RESOURCE_NAME
,NULL							--AIA.AIRITKDUR
,NULL							--AIA.AIRIACDUR
,AIA.PAY_GROUP
,dbo.getdate()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL       --	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
--SELECT * FROM YZ_TB_IMPORTS_ATT_SD_AIA_STATIC_DEFAULTS ORDER BY OFFICIAL_WSOL_CLIENT_ID
--SELECT TOP 1000 *
FROM            YZ_TB_IMPORTS_DATALOT_INVOICING_1            AIA 
--Only want to include valid id exts in _AIA table -- id exts that have ming and aut2 formulas and static defaults setup...:
INNER JOIN      YZ_TB_IMPORTS_DATALOT_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      YZ_TB_IMPORTS_DATALOT_SD_INVOICE_GROUPS      CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME                                DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS                           DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')
  AND (ISNULL(AIA.RESOURCE_NAME,'') <> '')

--==================================
--UPDATE YZ_TB_...UV_ANT_AIA TABLE:
--==================================  --  SELECT TOP 100 * FROM YZ_TB_IMPORTS_ATT_UV_ANT_AIA
UPDATE YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA SET
 [PLATFORM]                   = W1.[PLATFORM]
,[STATUS]                     = W1.[STATUS]
--,INVOICE_MAP_KEY              = W1.INVOICE_MAP_KEY
,FIELD_NAME                   = W1.FIELD_NAME
,SCHEDULER_PROJECT_ID         = W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME           = W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION             = W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID      = W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME    = W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID       = W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME     = W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID        = W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID = W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID       = W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY        = W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID            = W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID           = W1.HOLIDAY_INVOICE_ID
,HOLIDAY                      = W1.HOLIDAY
,FILE_FORMAT_OF_PUSH          = W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID = W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL                      = W1.NEW_ACL
,CURRENT_CATS                 = W1.CURRENT_CATS
,CATS_ID                      = W1.CATS_ID
,PATS_ID                      = W1.PATS_ID
,SMART_ELIGIBLE               = W1.SMART_ELIGIBLE
,SMART_TIER_1                 = W1.SMART_TIER_1
,SMART_TIER_2                 = W1.SMART_TIER_2
,SMART_TIER_3                 = W1.SMART_TIER_3
,INTERVAL                     = W1.INTERVAL
,[DATE]                       = W1.[DATE]
,HOD_INTERVAL                 = W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION     = W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION     = W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION          = W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION       = W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION       = W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW       = W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION            = W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT             = W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT             = W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT       = W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT          = W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT              = W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT          = W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT          = W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT        = W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT        = W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT             = W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT              = W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE            = W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE        = W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE             = W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE       = W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
,FTP_FILE_NAME = W1.FTP_FILE_NAME
,TEAM_NAME     = W1.TEAM_NAME
,EMAIL         = W1.EMAIL

--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE                     = W1.CAL_DATE
,TENANT_KEY                   = W1.TENANT_KEY
,AIR_DAY_TYPE                 = W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR           = W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE           = W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_MINUTES		  = W1.MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE           = W1.MIN_GUARANTEE_TYPE
,WRAP_MINUTE_RATE			  = W1.WRAP_MINUTE_RATE
,BASE_3_MINUTE_XFER_RATE	  = W1.BASE_3_MINUTE_XFER_RATE
,[3_MINUTE_XFER_BONUS_RATE]	  = W1.[3_MINUTE_XFER_BONUS_RATE]
,ELIGIBLE_FOR_XFER_BONUS	  = W1.ELIGIBLE_FOR_XFER_BONUS
,AUTHORIZED_TO_INVOICE_TYPE   = W1.AUTHORIZED_TO_INVOICE_TYPE
,TOTAL_AUTHORIZED_PAY		  = W1.TOTAL_AUTHORIZED_PAY
,TOTAL_AUTHORIZED_XFER_PAY	  = W1.TOTAL_AUTHORIZED_XFER_PAY
,HAS_HOLIDAYS                 = W1.HAS_HOLIDAYS
,PAY_RATE_STANDARD			  = W1.PAY_RATE_STANDARD
,PAY_RATE_HOLIDAY			  = W1.PAY_RATE_HOLIDAY
,INCLUDE_IN_CAS               = W1.INCLUDE_IN_CAS
,READY_FOR_XML                = W1.READY_FOR_XML
,SHOW_ID_EXTS                 = W1.SHOW_ID_EXTS
,INVOICE_ID                   = W1.INVOICE_ID
,RESOURCE_NAME                = W1.RESOURCE_NAME

,PAY_GROUP					  = W1.PAY_GROUP
,AIRITKDUR                    = W1.AIRITKDUR
,AIRIACDUR                    = W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME          = @WS_ROW_CREATED_TIME

FROM            #YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA   W1

INNER JOIN      YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
												   AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
												   AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )

--================================================
--INSERT TMP TABLE FIELDS INTO YZ_TB_... TABLE:
--================================================
INSERT INTO [YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.TEAM_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_MINUTES
,AIA.MIN_GUARANTEE_TYPE
,AIA.WRAP_MINUTE_RATE
,AIA.BASE_3_MINUTE_XFER_RATE
,AIA.[3_MINUTE_XFER_BONUS_RATE]
,AIA.ELIGIBLE_FOR_XFER_BONUS
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.TOTAL_AUTHORIZED_PAY
,AIA.TOTAL_AUTHORIZED_XFER_PAY
,AIA.HAS_HOLIDAYS
,AIA.PAY_RATE_STANDARD
,AIA.PAY_RATE_HOLIDAY
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.PAY_GROUP
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA   AIA
LEFT JOIN       YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
												   AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
												   AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )


--==================================================================================================================================
-- INSERT DATA FOR TRANSFER INCENTIVE
--==================================================================================================================================

IF OBJECT_ID('TEMPDB..#YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA_XFER') IS NOT NULL BEGIN
   DROP TABLE #YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA_XFER
END
CREATE TABLE #YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA_XFER   --Currently same structure as:  [YZ_TB_AGENT_INVOICE_AUTOMATION]
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[TEAM_NAME] [varchar](50)  NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_MINUTES] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[WRAP_MINUTE_RATE] [decimal](6, 3) NULL,
	[BASE_3_MINUTE_XFER_RATE] [decimal](6, 3) NULL,
	[3_MINUTE_XFER_BONUS_RATE] [decimal](6, 3) NULL,
	[ELIGIBLE_FOR_XFER_BONUS] [varchar] (1) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[TOTAL_AUTHORIZED_PAY] [decimal](6, 3) NULL,
	[TOTAL_AUTHORIZED_XFER_PAY] [decimal](6, 3) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[PAY_RATE_STANDARD] [decimal](6, 3) NULL,
	[PAY_RATE_HOLIDAY] [decimal](6, 3) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](50) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[PAY_GROUP] [int] NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA_XFER
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.FF_AGENT_ID  --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,'No' AS HOLIDAY							-- NO HOLIDAY PAY FOR DLX ID EXTENSION
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING				--[DATE]             
,DT.LABEL_HH24 + ':00'			--HOD_INTERVAL

,(AIA.ONLINE_TIME + AIA.WRAP_ADJ_TIME) * 60.00		--AU_DK_LOGGED_IN_DURATION -- ONLINE TIME + WRAP ADJUSTMENT TIME
,0				                --AU_DK_AVAILABLE_DURATION

,0							    --AU_DK_TALK_DURATION
,0								--AU_DK_IB_TALK_DURATION
,0								--AU_DK_OB_TALK_DURATION

,0						        --AU_DK_CONVENTIONAL_ACW
,0					            --AU_DK_NR_DURATION
,0								--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0								--AU_DK_ADJUSTED_NR_DURATION
,0								--AU_DK_TOTAL_PRODUCTIVE_DURATION
,0								--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS  

,AIA.AUTHORIZED_TRANSFERS		--AU_DK_XFER_COUNT
,0								--AU_DK_HOLD_COUNT
,0								--AU_DK_CONFERENCE_COUNT
,0								--AU_DK_CONSULT_COUNT
,0								--AU_DK_PUP_COUNT

,0					            --AU_DK_OFFERED_COUNT
,AIA.AUTHORIZED_TRANSFERS		--AU_DK_HANDLED_COUNT
,0								--AU_DK_IB_HANDLE_COUNT
,0					            --AU_DK_OB_HANDLE_COUNT
													
,0								--AU_DK_RONA_COUNT
,0								--AU_DK_AWR_COUNT

,AIA.BASE_3_MINUTE_TRANSFER	   * 60.00		--MINIMUM_GUARANTEE  --MAKE IT LOOKS LIKE SECONDS SO THAT WHEN SERGEY DIVIDES BY 60 IT RESULTS BACK INTO THE ORIGINAL XFER COUNT
,AIA.TOTAL_AUTHORIZED_XFER_PAY * 60.00		--AUTHORIZED_TO_INVOICE  --MAKE IT LOOKS LIKE SECONDS SO THAT WHEN SERGEY DIVIDES BY 60 IT RESULTS BACK INTO THE ORIGINAL XFER COUNT

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,NULL							--TEAM_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_MINUTES
,AIA.MIN_GUARANTEE_TYPE
,AIA.WRAP_MINUTE_RATE
,AIA.BASE_3_MINUTE_XFER_RATE
,AIA.[3_MINUTE_XFER_BONUS_RATE]
,AIA.ELIGIBLE_FOR_XFER_BONUS
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.TOTAL_AUTHORIZED_PAY
,AIA.TOTAL_AUTHORIZED_XFER_PAY
,'N' AS HAS_HOLIDAYS
,AIA.PAY_RATE_STANDARD
,AIA.PAY_RATE_HOLIDAY
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,'Datalot Transfer Incentive R3' AS INVOICE_ID  -- ALWAYS THE SAME FOR THE TRANSFER INCENTIVE *R2 EFFECTIVE 8/1/15 *R3 EFFECTIVE 4/1/16
,AIA.RESOURCE_NAME
,NULL							--AIA.AIRITKDUR
,NULL							--AIA.AIRIACDUR
,AIA.PAY_GROUP
,dbo.getdate()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL       --	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
--SELECT * FROM YZ_TB_IMPORTS_ATT_SD_AIA_STATIC_DEFAULTS ORDER BY OFFICIAL_WSOL_CLIENT_ID
--SELECT TOP 1000 *
FROM            YZ_TB_IMPORTS_DATALOT_INVOICING_1            AIA 
--Only want to include valid id exts in _AIA table -- id exts that have ming and aut2 formulas and static defaults setup...:
INNER JOIN      YZ_TB_IMPORTS_DATALOT_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.XFER_ID_EXT
INNER JOIN      YZ_TB_IMPORTS_DATALOT_SD_INVOICE_GROUPS      CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME                                DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS                           DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')
  AND (ISNULL(AIA.RESOURCE_NAME,'') <> '')

--==================================
--UPDATE YZ_TB_...UV_ANT_AIA TABLE:
--==================================  --  SELECT TOP 100 * FROM YZ_TB_IMPORTS_ATT_UV_ANT_AIA
UPDATE YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA SET
 [PLATFORM]                   = W1.[PLATFORM]
,[STATUS]                     = W1.[STATUS]
--,INVOICE_MAP_KEY              = W1.INVOICE_MAP_KEY
,FIELD_NAME                   = W1.FIELD_NAME
,SCHEDULER_PROJECT_ID         = W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME           = W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION             = W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID      = W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME    = W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID       = W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME     = W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID        = W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID = W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID       = W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY        = W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID            = W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID           = W1.HOLIDAY_INVOICE_ID
,HOLIDAY                      = W1.HOLIDAY
,FILE_FORMAT_OF_PUSH          = W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID = W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL                      = W1.NEW_ACL
,CURRENT_CATS                 = W1.CURRENT_CATS
,CATS_ID                      = W1.CATS_ID
,PATS_ID                      = W1.PATS_ID
,SMART_ELIGIBLE               = W1.SMART_ELIGIBLE
,SMART_TIER_1                 = W1.SMART_TIER_1
,SMART_TIER_2                 = W1.SMART_TIER_2
,SMART_TIER_3                 = W1.SMART_TIER_3
,INTERVAL                     = W1.INTERVAL
,[DATE]                       = W1.[DATE]
,HOD_INTERVAL                 = W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION     = W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION     = W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION          = W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION       = W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION       = W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW       = W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION            = W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT             = W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT             = W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT       = W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT          = W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT              = W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT          = W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT          = W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT        = W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT        = W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT             = W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT              = W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE            = W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE        = W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE             = W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE       = W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
,FTP_FILE_NAME = W1.FTP_FILE_NAME
,TEAM_NAME     = W1.TEAM_NAME
,EMAIL         = W1.EMAIL

--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE                     = W1.CAL_DATE
,TENANT_KEY                   = W1.TENANT_KEY
,AIR_DAY_TYPE                 = W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR           = W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE           = W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_MINUTES		  = W1.MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE           = W1.MIN_GUARANTEE_TYPE
,WRAP_MINUTE_RATE			  = W1.WRAP_MINUTE_RATE
,BASE_3_MINUTE_XFER_RATE	  = W1.BASE_3_MINUTE_XFER_RATE
,[3_MINUTE_XFER_BONUS_RATE]	  = W1.[3_MINUTE_XFER_BONUS_RATE]
,ELIGIBLE_FOR_XFER_BONUS	  = W1.ELIGIBLE_FOR_XFER_BONUS
,AUTHORIZED_TO_INVOICE_TYPE   = W1.AUTHORIZED_TO_INVOICE_TYPE
,TOTAL_AUTHORIZED_PAY		  = W1.TOTAL_AUTHORIZED_PAY
,TOTAL_AUTHORIZED_XFER_PAY	  = W1.TOTAL_AUTHORIZED_XFER_PAY
,HAS_HOLIDAYS                 = W1.HAS_HOLIDAYS
,PAY_RATE_STANDARD			  = W1.PAY_RATE_STANDARD
,PAY_RATE_HOLIDAY			  = W1.PAY_RATE_HOLIDAY
,INCLUDE_IN_CAS               = W1.INCLUDE_IN_CAS
,READY_FOR_XML                = W1.READY_FOR_XML
,SHOW_ID_EXTS                 = W1.SHOW_ID_EXTS
,INVOICE_ID                   = W1.INVOICE_ID
,RESOURCE_NAME                = W1.RESOURCE_NAME

,PAY_GROUP					  = W1.PAY_GROUP
,AIRITKDUR                    = W1.AIRITKDUR
,AIRIACDUR                    = W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME          = @WS_ROW_CREATED_TIME

FROM            #YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA_XFER   W1

INNER JOIN      YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
												   AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
												   AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )

--================================================
--INSERT TMP TABLE FIELDS INTO YZ_TB_... TABLE:
--================================================
INSERT INTO [YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.TEAM_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_MINUTES
,AIA.MIN_GUARANTEE_TYPE
,AIA.WRAP_MINUTE_RATE
,AIA.BASE_3_MINUTE_XFER_RATE
,AIA.[3_MINUTE_XFER_BONUS_RATE]
,AIA.ELIGIBLE_FOR_XFER_BONUS
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.TOTAL_AUTHORIZED_PAY
,AIA.TOTAL_AUTHORIZED_XFER_PAY
,AIA.HAS_HOLIDAYS
,AIA.PAY_RATE_STANDARD
,AIA.PAY_RATE_HOLIDAY
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.PAY_GROUP
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA_XFER   AIA
LEFT JOIN       YZ_TB_IMPORTS_DATALOT_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
												   AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
												   AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )

--==========================================================================================================================
--INSERT DATA INTO GLOBAL WORK TABLE FOR WA/SA
--==========================================================================================================================
--SELECT * FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_DATALOT_WORK_HOURS_ALL') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_DATALOT_WORK_HOURS_ALL
END
CREATE TABLE #WSOL_TB_IMPORTS_DATALOT_WORK_HOURS_ALL
(	[TENANT_NAME] [varchar] (100) NOT NULL,
	[OFFICIAL_ACL_NAME] [varchar] (200) NOT NULL,
	[AGENT_NAME] [varchar] (200) NULL,
	[FIELD_MAP_ID] [varchar] (100) NOT NULL,
	[EMAIL] [varchar] (100) NULL,
	[LOGGED_IN_HOURS] [decimal] (10,2) NULL,
	[PRODUCTIVE_HOURS] [decimal] (10,2) NULL,
	[DATETIME] [datetime] NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[FTP_FILE_NAME] [varchar] (100) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL
)

INSERT INTO #WSOL_TB_IMPORTS_DATALOT_WORK_HOURS_ALL
SELECT
 'DATALOT'
,WT.OFFICIAL_ACL_NAME
,WT.AGENT_NAME
,WT.FIELD_MAP_ID
,WT.EMAIL
,WT.LOGGED_IN_HOURS
,WT.PRODUCTIVE_HOURS
,WT.DATETIME
,WT.STD_TENANT_START_DATE_TIME_KEY
,WT.FTP_FILE_NAME
,WT.WS_ROW_CREATED_TIME
FROM
(	SELECT
	 --TENANT_NAME
	 CASE WHEN W1.ID_EXT = 'DLS' THEN
			'Datalot Standard Agents'
		  WHEN W1.ID_EXT = 'DLR' THEN
			'Datalot Resource Agents'
		  WHEN W1.ID_EXT = 'DLP' THEN
		    'Datalot Standard Agents'
		  ELSE W1.SCHEDULER_ACL_NAME END						AS OFFICIAL_ACL_NAME
	,W1.RESOURCE_NAME											AS AGENT_NAME
	,W1.FF_AGENT_ID												AS FIELD_MAP_ID
	,W1.EMAIL													AS [EMAIL]
	,(SUM(W1.ONLINE_TIME) + SUM(W1.WRAP_ADJ_TIME))/60.00		AS LOGGED_IN_HOURS
	,(SUM(W1.ONLINE_TIME) + SUM(W1.WRAP_ADJ_TIME))/60.00		AS PRODUCTIVE_HOURS
	,CAST(CONVERT(VARCHAR(10), W1.[DATETIME], 111) AS DATETIME)	AS [DATETIME]
	,DT.DATE_TIME_DAY_KEY										AS STD_TENANT_START_DATE_TIME_KEY
	,W1.FTP_FILE_NAME											AS FTP_FILE_NAME
	,dbo.getdate()													AS WS_ROW_CREATED_TIME
	
	FROM YZ_TB_IMPORTS_DATALOT_INVOICING_1	W1
	INNER JOIN DATE_TIME					DT		ON DT.DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY

	GROUP BY
	 CASE WHEN W1.ID_EXT = 'DLS' THEN
			'Datalot Standard Agents'
		  WHEN W1.ID_EXT = 'DLR' THEN
			'Datalot Resource Agents'
		  WHEN W1.ID_EXT = 'DLP' THEN
		    'Datalot Standard Agents'
		  ELSE W1.SCHEDULER_ACL_NAME END
	,W1.RESOURCE_NAME
	,W1.FF_AGENT_ID
	,W1.EMAIL
	,CAST(CONVERT(VARCHAR(10), W1.[DATETIME], 111) AS DATETIME)
	,DT.DATE_TIME_DAY_KEY
	,W1.FTP_FILE_NAME
) WT

UPDATE WSOL_TB_IMPORTS_WORK_HOURS_ALL SET
 TENANT_NAME					= WTT.TENANT_NAME
--,OFFICIAL_ACL_NAME			= WTT.OFFICIAL_ACL_NAME
,AGENT_NAME						= WTT.AGENT_NAME
--,FIELD_MAP_ID					= WTT.FIELD_MAP_ID
,[EMAIL]						= WTT.EMAIL
,LOGGED_IN_HOURS				= WTT.LOGGED_IN_HOURS
,PRODUCTIVE_HOURS				= WTT.PRODUCTIVE_HOURS
,[DATETIME]						= WTT.DATETIME
--,STD_TENANT_START_DATE_TIME_KEY	= WTT.STD_TENANT_START_DATE_TIME_KEY
,FTP_FILE_NAME					= WTT.FTP_FILE_NAME
--,WS_ROW_CREATED_TIME			= dbo.getdate()
,WS_ROW_UPDATED_TIME			= dbo.getdate()

FROM #WSOL_TB_IMPORTS_DATALOT_WORK_HOURS_ALL WTT

INNER JOIN WSOL_TB_IMPORTS_WORK_HOURS_ALL WHR ON WHR.STD_TENANT_START_DATE_TIME_KEY = WTT.STD_TENANT_START_DATE_TIME_KEY
											 AND WHR.FIELD_MAP_ID					= WTT.FIELD_MAP_ID
											 AND WHR.OFFICIAL_ACL_NAME				= WTT.OFFICIAL_ACL_NAME

WHERE WHR.STD_TENANT_START_DATE_TIME_KEY	= WTT.STD_TENANT_START_DATE_TIME_KEY
  AND WHR.FIELD_MAP_ID						= WTT.FIELD_MAP_ID
  AND WHR.OFFICIAL_ACL_NAME					= WTT.OFFICIAL_ACL_NAME

INSERT INTO WSOL_TB_IMPORTS_WORK_HOURS_ALL
SELECT
 WTI.TENANT_NAME
,WTI.OFFICIAL_ACL_NAME
,WTI.AGENT_NAME
,WTI.FIELD_MAP_ID
,WTI.EMAIL
,WTI.LOGGED_IN_HOURS
,WTI.PRODUCTIVE_HOURS
,WTI.DATETIME
,WTI.STD_TENANT_START_DATE_TIME_KEY
,WTI.FTP_FILE_NAME
,WTI.WS_ROW_CREATED_TIME
,NULL
FROM #WSOL_TB_IMPORTS_DATALOT_WORK_HOURS_ALL	WTI

LEFT JOIN WSOL_TB_IMPORTS_WORK_HOURS_ALL	WRK  ON WRK.STD_TENANT_START_DATE_TIME_KEY	= WTI.STD_TENANT_START_DATE_TIME_KEY
												AND WRK.FIELD_MAP_ID					= WTI.FIELD_MAP_ID
												AND WRK.OFFICIAL_ACL_NAME				= WTI.OFFICIAL_ACL_NAME

WHERE ( WRK.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(WTI.STD_TENANT_START_DATE_TIME_KEY,0 ) <> 0 )
  AND ( WRK.FIELD_MAP_ID					IS NULL AND ISNULL(WTI.FIELD_MAP_ID,'') <> '' )
  AND ( WRK.OFFICIAL_ACL_NAME				IS NULL AND ISNULL(WTI.OFFICIAL_ACL_NAME,'') <> '' )

--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_DATALOT_INVOICING_IMPORT_UPDATE]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_DATALOT_INVOICING_IMPORT_UPDATE]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PROCESS_TYPE       VARCHAR(4)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_DATALOT_INVOICING_IMPORT_UPDATE] '12/16/2016','12/31/2016','MANU'

--========================================
-- SET DATE VARIABLES
--========================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @PROCESS_TYPE = 'AUTO'
	BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE 
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),DATEADD(DD,-1,DBO.GETDATE()),101) AS DATETIME)	-- SET TO YESTERDAY --CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE 
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--	SELECT @DTM_BEG, @DTM_END
--	SELECT * FROM YZ_TB_IMPORTS_DATALOT_INVOICING ORDER BY [DATETIME] DESC
--=========================================================================
--CREATE TMP TABLE:
--=========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_DATALOT_INVOICING_XFERS_PER_HOUR') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_DATALOT_INVOICING_XFERS_PER_HOUR
END
CREATE TABLE #IMPORTS_DATALOT_INVOICING_XFERS_PER_HOUR
(AGENT_ID						VARCHAR(50)
,LOGGED_IN_TIME					DECIMAL(10,2)
,THREE_MINUTE_XFERS				INT
,THREE_MINUTE_XFERS_PER_HOUR	DECIMAL(10,2)
,ELIGIBLE_FOR_XFER_BONUS		VARCHAR(1)
)

--========================================================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================================================
    INSERT INTO #IMPORTS_DATALOT_INVOICING_XFERS_PER_HOUR
	SELECT 
	 UA.AGENT_ID						AS AGENT_ID
	,ISNULL(UA.LOGGED_IN_TIME,0.00)		AS LOGGED_IN_TIME
	,ISNULL(UA.THREE_MINUTE_XFERS,0)	AS THREE_MINUTE_XFERS
	,UA.THREE_MINUTE_XFERS_PER_HOUR		AS THREE_MINUTE_XFERS_PER_HOUR
	,UA.ELIGIBLE_FOR_XFER_BONUS			AS ELIGIBLE_FOR_XFER_BONUS
	FROM
	(	SELECT
		 C.FF_AGENT_ID									AS AGENT_ID
		,( SUM(ISNULL(C.ONLINE_TIME,0.00)) + 
		   SUM(ISNULL(C.WRAP_ADJ_TIME,0.00)) ) / 60.0	AS LOGGED_IN_TIME
		,SUM(ISNULL(C.AUTHORIZED_TRANSFERS,0))			AS THREE_MINUTE_XFERS
		,NULL											AS THREE_MINUTE_XFERS_PER_HOUR
		,NULL											AS ELIGIBLE_FOR_XFER_BONUS
		--SELECT TOP 100 *

		FROM            YZ_TB_IMPORTS_DATALOT_INVOICING		C
		INNER JOIN      DATE_TIME							DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 C.FF_AGENT_ID
	) UA

UPDATE #IMPORTS_DATALOT_INVOICING_XFERS_PER_HOUR SET
 THREE_MINUTE_XFERS_PER_HOUR = THREE_MINUTE_XFERS / LOGGED_IN_TIME

UPDATE #IMPORTS_DATALOT_INVOICING_XFERS_PER_HOUR SET
 ELIGIBLE_FOR_XFER_BONUS = CASE WHEN THREE_MINUTE_XFERS_PER_HOUR >= 5 THEN 'Y'		--<<<<<<<<<<< SET XFER PER HOUR THRESHOLD HERE --<<<<<<<<<<<<<<
								ELSE 'N' END


--SELECT * FROM #IMPORTS_DATALOT_INVOICING_XFERS_PER_HOUR
--SELECT * FROM  YZ_TB_IMPORTS_DATALOT_INVOICING
--=============================================
--UPDATE PERMANENT INVOICE TABLE
--=============================================
UPDATE YZ_TB_IMPORTS_DATALOT_INVOICING SET
 ELIGIBLE_FOR_XFER_BONUS	= TMP1.ELIGIBLE_FOR_XFER_BONUS
,WS_ROW_UPDATED_TIME		= DBO.GETDATE()
--  SELECT *
FROM            #IMPORTS_DATALOT_INVOICING_XFERS_PER_HOUR	TMP1
INNER JOIN      YZ_TB_IMPORTS_DATALOT_INVOICING				G   ON G.FF_AGENT_ID	= TMP1.AGENT_ID
--															   AND G.ID_EXT			= TMP1.ID_EXT

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.FF_AGENT_ID	= TMP1.AGENT_ID
--  AND G.ID_EXT		= TMP1.ID_EXT
  AND ( G.[DATETIME] >= @DTM_BEG AND G.[DATETIME] <  @DTM_END )

/*
--=============================================
--UPDATE PERMANENT UV INVOICE TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA SET
 INVOICE_ID				= TMP1.INVOICE_ID
,INVOICE_SYSTEM_ID		= TMP1.INVOICE_ID
,WS_ROW_UPDATED_TIME	= DBO.GETDATE()
--  SELECT *
FROM            #IMPORTS_EGENCIA_INVOICING_AGGREGATE_CPROD	TMP1
INNER JOIN      WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA			U   ON U.INVOICE_MAP_KEY	= TMP1.LOGIN_ID
															   AND U.ACD_ID_EXTENSION	= TMP1.ID_EXT

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE U.INVOICE_MAP_KEY		= TMP1.LOGIN_ID
  AND U.ACD_ID_EXTENSION	= TMP1.ID_EXT
  AND ( U.CAL_DATE >= @DTM_BEG AND U.CAL_DATE <  @DTM_END )
  AND U.HOLIDAY <> 'Yes'
  --AND ISNULL(U.INVOICE_SYSTEM_ID,'') = ''

*/

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_DATALOT_REP_SCORECARD_IMPORT_STATUS]...';


GO







CREATE PROCEDURE [dbo].[uspIMPORTS_DATALOT_REP_SCORECARD_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_DATALOT_REP_SCORECARD_IMPORT_STATUS] '06/01/2014','06/06/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_DATALOT_REP_SCORECARD_IMPORT_STATUS] '06/20/2014','06/30/2014','','W'

--===========================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--===========================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_DATALOT_REP_SCORECARD_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_DATALOT_REP_SCORECARD_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_DATALOT_REP_SCORECARD_IMPORT_STATUS
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_DATALOT_REP_SCORECARD_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0)															AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_DATALOT_REP_SCORECARD  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

---- AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA
--END  --IF @PSW...

--=================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=================================================================
--DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = @TENANT_KEY
----  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 106
--=================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

--CREATE CURSOR, POPULATE CURSOR FOR DATE RANGE, SPIN THROUGH EACH OF THE DAILY RECORDS, CONCATENATING TO STRING FOR EACH DATE MISSING.

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	
	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_DATALOT_REP_SCORECARD_IMPORT_STATUS   I   ON I.FILEDATETIME                   = DT.FILEDATETIME

WHERE ISNULL(I.RCD_CNT,0) = 0

  --AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)
  --AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
		SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

			SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 8:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
		END
	END
	ELSE BEGIN
		SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
		END
	END
	
END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--DATALOT_REP_SCORECARD:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM WSOL_TB_IMPORT_ERRORS_FOUND
							   WHERE TENANT_KEY = 900704 AND SUB_GROUP_NAME = 'DATALOT_REP_SCORECARD' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_DATALOT_REP_SCORECARD_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_DATALOT_REP_SCORECARD_Summary]...';


GO








CREATE PROCEDURE [dbo].[uspIMPORTS_DATALOT_REP_SCORECARD_Summary]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_DATALOT_REP_SCORECARD_Summary] '06/01/2014','06/07/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_DATALOT_REP_SCORECARD_Summary] '06/07/2014','06/07/2014','','W'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

			IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly 
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--TO TEST:
		--DECLARE
		-- @DTM_BEG DATETIME
		--,@DTM_END DATETIME
		----SET @DTM_BEG = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_END = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_BEG = CAST('08/02/2012' AS DATETIME)
		----SET @DTM_END = CAST('08/02/2012' AS DATETIME)
		--SET @DTM_BEG = CAST('08/03/2012' AS DATETIME)
		--SET @DTM_END = CAST('08/03/2012' AS DATETIME)

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		--SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		--SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--07/06/2012 IS AN INVOICE FRIDAY.  SAME AS 05/23/2014.
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_DATALOT_REP_SCORECARD_Summary') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_DATALOT_REP_SCORECARD_Summary
END
CREATE TABLE #IMPORTS_DATALOT_REP_SCORECARD_Summary
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_DATALOT_REP_SCORECARD_Summary
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')       --AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') --AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')             --AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_DATALOT_REP_SCORECARD  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA

--END  --IF @PSW...


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT      
,'White' AS BG_COLOR

FROM #IMPORTS_DATALOT_REP_SCORECARD_Summary 

ORDER BY
-- CALL_DATETIME           
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT      


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_DATALOT_Summary]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_DATALOT_Summary]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_DATALOT_Summary] '06/01/2014','06/07/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_DATALOT_Summary] '06/07/2014','06/07/2014','','W'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

			IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly 
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--TO TEST:
		--DECLARE
		-- @DTM_BEG DATETIME
		--,@DTM_END DATETIME
		----SET @DTM_BEG = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_END = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_BEG = CAST('08/02/2012' AS DATETIME)
		----SET @DTM_END = CAST('08/02/2012' AS DATETIME)
		--SET @DTM_BEG = CAST('08/03/2012' AS DATETIME)
		--SET @DTM_END = CAST('08/03/2012' AS DATETIME)

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		--SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		--SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--07/06/2012 IS AN INVOICE FRIDAY.  SAME AS 05/23/2014.
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_DATALOT_Summary') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_DATALOT_Summary
END
CREATE TABLE #IMPORTS_DATALOT_Summary
(FILEDATETIME			VARCHAR(20)
,FTP_FILE_NAME			VARCHAR(100)
,CST_ROW_CREATED_TIME	DATETIME
,RCD_CNT				INT
,WRAP_DELTA				DECIMAL(10,2)
)

--==================================
--ALTER TABLE IF DURATIONS WANTED IN SECONDS:  --TABLE FIRST CREATED WITH FIELDS DEFINED AS "DECIMAL(10,2)"...
--==================================
--IF @DUR_IN = 'SS' BEGIN
--	ALTER TABLE #IMPORTS_DATALOT_Summary ALTER COLUMN LOGIN_DUR     INT
--END

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_DATALOT_Summary
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')		--AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')	--AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')				--AS RCD_CNT
	,ISNULL(UA.WRAP_DELTA,0)			--AS WRAP_DELTA
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		--,C.FTP_FILE_NAME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		,(SUM(ISNULL(WRAP_ADJ_TIME,0)) - SUM(ISNULL(WRAP_TIME,0))) AS WRAP_DELTA
		--  SELECT * 
		FROM            YZ_TB_IMPORTS_DATALOT_INVOICING  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		--,C.FTP_FILE_NAME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
		,C.WS_ROW_CREATED_TIME
		--UNION ALL  --UUUUUUUUUUNNNNNNNNNNIIIIIIIIIIOOOOOOOOOONNNNNNNNNN
	) UA

--END  --IF @PSW...


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           

,CST_ROW_CREATED_TIME

,RCD_CNT

,WRAP_DELTA      

--,CASE WHEN DATEDIFF(HH,CALL_DATETIME,CST_ROW_CREATED_TIME) > 35 THEN 'Pink' ELSE 'White' END AS BG_COLOR
,'White' AS BG_COLOR

FROM #IMPORTS_DATALOT_Summary 

ORDER BY
-- CALL_DATETIME           
 FTP_FILE_NAME
,FILEDATETIME        

,CST_ROW_CREATED_TIME
   
,RCD_CNT      


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1







--SELECT (DATEDIFF(DD,CAST('07/05/2012' AS DATETIME),CAST('07/16/2012' AS DATETIME)) % 14)  --11
--SELECT (DATEDIFF(DD,CAST('07/05/2012' AS DATETIME),CAST('07/18/2012' AS DATETIME)) % 14)  --13
--
--SELECT (DATEDIFF(DD,CAST('07/19/2012' AS DATETIME),CAST('07/19/2012' AS DATETIME)) % 14)  --0
--SELECT (DATEDIFF(DD,CAST('07/19/2012' AS DATETIME),CAST('07/20/2012' AS DATETIME)) % 14)  --1
--SELECT (DATEDIFF(DD,CAST('07/19/2012' AS DATETIME),CAST('07/21/2012' AS DATETIME)) % 14)  --2
--SELECT (DATEDIFF(DD,CAST('07/19/2012' AS DATETIME),CAST('07/25/2012' AS DATETIME)) % 14)  --6
--SELECT (DATEDIFF(DD,CAST('07/19/2012' AS DATETIME),CAST('07/31/2012' AS DATETIME)) % 14)  --12
--SELECT (DATEDIFF(DD,CAST('07/19/2012' AS DATETIME),CAST('08/01/2012' AS DATETIME)) % 14)  --13
--
--SELECT (DATEDIFF(DD,CAST('07/19/2012' AS DATETIME),CAST('08/02/2012' AS DATETIME)) % 14)  --0
--SELECT (DATEDIFF(DD,CAST('07/19/2012' AS DATETIME),CAST('08/03/2012' AS DATETIME)) % 14)  --1
GO
PRINT N'Creating [dbo].[uspIMPORTS_EGENCIA_AGENT_INVOICING_REPORTS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_EGENCIA_AGENT_INVOICING_REPORTS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300) --Hid. Def=' '
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
--,@SHOW_DETAILS		 BIT		  --	 DEF='TRUE'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'  MANual,SUBscription
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='INV'
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='INV'  
AS
SET NOCOUNT ON    

--  EXECUTE [dbo].[uspIMPORTS_EGENCIA_AGENT_INVOICING_REPORTS] '10/01/2017','10/15/2017','0','0','0','0','HR','Y','SS','NM','Y','4','MAN','INV','INV'

--	@TIME_INTERVAL:  Can show invoicing report at hourly level or higher !!!

--	Durations in SFTP FILE are in seconds.  Therefore, reporting may be in seconds, minutes, or hours.

--  SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_SD_INVOICE_GROUPS
--  SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA


--========================================================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) 
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) -- + 1
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
END
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

DECLARE
 @MTD_BEG AS DATETIME
,@MTD_END AS DATETIME  --,@YTD_BEG AS DATETIME--,@YTD_END AS DATETIME
SET @MTD_BEG = CAST(CAST(DATEPART(mm,@DTM_BEG) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)
SET @MTD_END = @DTM_END  

IF @TIME_INTERVAL IN ('MR','MD') BEGIN  --MONTH DETERMINED BY @DTM_BEG.
	SET @DTM_BEG = @MTD_BEG
	SET @DTM_END = @MTD_END
END

IF @EXECUTIONER = 'DLY' BEGIN
	IF DATEPART(DW,dbo.getdate()) = 2 BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 3,101) AS DATETIME)
	END
	ELSE BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
	END
	SET @DTM_END = @DTM_BEG + 1
END

IF @EXECUTIONER = 'WKY' BEGIN
	SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 7,101) AS DATETIME)
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate()	 ,101) AS DATETIME)
END

IF @EXECUTIONER = 'MTH' BEGIN
	IF MONTH(dbo.getdate()) = 1
		BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
		END
	ELSE
		BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) AS DATETIME)
END



--========================================================================
--	SET AMOUNT TO DIVIDE BY:
--========================================================================
DECLARE @DS DECIMAL(10,2)  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.00     --DIVIDE SECONDS BY 1  TO GET SAME, SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
    SET @DS = 60.00    --DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
    SET @DS = 3600.00  --DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
--	CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_EGENCIA_AGENT_INVOICING_REPORTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_EGENCIA_AGENT_INVOICING_REPORTS
END
CREATE TABLE #IMPORTS_EGENCIA_AGENT_INVOICING_REPORTS
(TENANT_NAME					VARCHAR(50)
,ID_EXT							VARCHAR(3)
,SCHEDULER_ACL_NAME				VARCHAR(100)  
,EMPLOYEE_ID					VARCHAR(50)
,STD_TENANT_START_DATE_TIME_KEY INT
,RESOURCE_NAME					VARCHAR(100)

,AIR_DAY_TYPE					VARCHAR(1)
,AIR_ACW_FONT_COLOR				VARCHAR(50)
,MIN_GUARANTEE_MINUTES			DECIMAL(6,3)
,MIN_GUARANTEE_TYPE				VARCHAR(50)
,AUTHORIZED_TO_INVOICE_TYPE		VARCHAR(50)
,HAS_HOLIDAYS					VARCHAR(1)
,INCLUDE_IN_CAS					VARCHAR(1)
,READY_FOR_XML					VARCHAR(1)
,SHOW_ID_EXTS					VARCHAR(1)
,
[STAFFED_SECS] [decimal](10, 2) NULL,
[AVAILABLE_SECS] [decimal](10, 2) NULL,
[ACD_SECS] [decimal](10, 2) NULL,
[OTHER_SECS] [decimal](10, 2) NULL,
[ACW_SECS] [decimal](10, 2) NULL,
[RING_SECS] [decimal](10, 2) NULL,
[AUX_0_DEFAULT_SECS] [decimal](10, 2) NULL,
[AUX_1_BREAK_SECS] [decimal](10, 2) NULL,
[AUX_2_COACHING_SECS] [decimal](10, 2) NULL,
[AUX_3_MEETING_SECS] [decimal](10, 2) NULL,
[AUX_4_PROJECT_SECS] [decimal](10, 2) NULL,
[AUX_5_EGE_TRAINING_SECS] [decimal](10, 2) NULL,
[AUX_6_OUTBOUND_SECS] [decimal](10, 2) NULL,
[AUX_7_EMAIL_SECS] [decimal](10, 2) NULL,
[AUX_8_QUEUE_WORK_SECS] [decimal](10, 2) NULL,
[AUX_9_SYSTEM_DOWN_SECS] [decimal](10, 2) NULL,
[AUX_10_EXCHANGE_SECS] [decimal](10, 2) NULL,
[AUX_11_PERSONAL_SECS] [decimal](10, 2) NULL,
[AUX_34_SECS] [decimal](10, 2) NULL,
[AUX_35_SECS] [decimal](10, 2) NULL,
[AUX_37_SECS] [decimal](10, 2) NULL,
[AUX_40_SECS] [decimal](10, 2) NULL,
[OUTBOUND_SECS] [decimal](10, 2) NULL,
[EMAIL_SECS] [decimal](10, 2) NULL,
[PROJECT_SECS] [decimal](10, 2) NULL,
[MEETING_SECS] [decimal](10, 2) NULL,
[TOTAL_AUX_SECS] [decimal](10, 2) NULL,
[PROD_BILLING_SECS] [decimal](10, 2) NULL,
[AUTHORIZED_CSAT_SAT_KEY_SECS] [decimal](10, 2) NULL,
[AUTHORIZED_RESOURCE_SECS] [decimal](10, 2) NULL,
[LINE_OF_BUSINESS] [varchar](100) NULL,
[WEEKEND] [char](1) NULL,
[CPROD] [decimal](10, 2) NULL,
[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
[AUTHORIZED_MINUTES] [decimal](10, 2) NULL,
)

INSERT INTO #IMPORTS_EGENCIA_AGENT_INVOICING_REPORTS
SELECT
 'EGENCIA'	--T.TENANT_NAME
,''			--UAA.ACD_ID_EXTENSION
,UAA.SCHEDULER_ACL_NAME
,UAA.EMPLOYEE_ID
,UAA.STD_TENANT_START_DATE_TIME_KEY
,UAA.RESOURCE_NAME

,(ISNULL(UAA.AIR_DAY_TYPE,''))					--AS AIR_DAY_TYPE
,(ISNULL(UAA.AIR_ACW_FONT_COLOR,''))			--AS AIR_ACW_FONT_COLOR
,(ISNULL(UAA.MIN_GUARANTEE_MINUTES,0.000))		--AS MIN_GUARANTEE_MINUTES
,(ISNULL(UAA.MIN_GUARANTEE_TYPE,''))			--AS MIN_GUARANTEE_TYPE
,(ISNULL(UAA.AUTHORIZED_TO_INVOICE_TYPE,''))	--AS AUTHORIZED_TO_INVOICE_TYPE
,(ISNULL(UAA.HAS_HOLIDAYS,''))					--AS HAS_HOLIDAYS
,(ISNULL(UAA.INCLUDE_IN_CAS,''))				--AS INCLUDE_IN_CAS
,(ISNULL(UAA.READY_FOR_XML,''))					--AS READY_FOR_XML
,(ISNULL(UAA.SHOW_ID_EXTS,''))					--AS SHOW_ID_EXTS

,(ISNULL(UAA.STAFFED_SECS					,0.00))
,(ISNULL(UAA.AVAILABLE_SECS					,0.00))
,(ISNULL(UAA.ACD_SECS						,0.00))
,(ISNULL(UAA.OTHER_SECS						,0.00))
,(ISNULL(UAA.ACW_SECS						,0.00))
,(ISNULL(UAA.RING_SECS						,0.00))
,(ISNULL(UAA.AUX_0_DEFAULT_SECS				,0.00))
,(ISNULL(UAA.AUX_1_BREAK_SECS				,0.00))
,(ISNULL(UAA.AUX_2_COACHING_SECS			,0.00))
,(ISNULL(UAA.AUX_3_MEETING_SECS				,0.00))
,(ISNULL(UAA.AUX_4_PROJECT_SECS				,0.00))
,(ISNULL(UAA.AUX_5_EGE_TRAINING_SECS		,0.00))
,(ISNULL(UAA.AUX_6_OUTBOUND_SECS			,0.00))
,(ISNULL(UAA.AUX_7_EMAIL_SECS				,0.00))
,(ISNULL(UAA.AUX_8_QUEUE_WORK_SECS			,0.00))
,(ISNULL(UAA.AUX_9_SYSTEM_DOWN_SECS			,0.00))
,(ISNULL(UAA.AUX_10_EXCHANGE_SECS			,0.00))
,(ISNULL(UAA.AUX_11_PERSONAL_SECS			,0.00))
,(ISNULL(UAA.AUX_34_SECS					,0.00))
,(ISNULL(UAA.AUX_35_SECS					,0.00))
,(ISNULL(UAA.AUX_37_SECS					,0.00))
,(ISNULL(UAA.AUX_40_SECS					,0.00))
,(ISNULL(UAA.OUTBOUND_SECS					,0.00))
,(ISNULL(UAA.EMAIL_SECS						,0.00))
,(ISNULL(UAA.PROJECT_SECS					,0.00))
,(ISNULL(UAA.MEETING_SECS					,0.00))
,(ISNULL(UAA.TOTAL_AUX_SECS					,0.00))
,(ISNULL(UAA.PROD_BILLING_SECS				,0.00))
,(ISNULL(UAA.AUTHORIZED_CSAT_SAT_KEY_SECS	,0.00))
,(ISNULL(UAA.AUTHORIZED_RESOURCE_SECS		,0.00))

,(ISNULL(UAA.LINE_OF_BUSINESS,''))				--AS LINE_OF_BUSINESS
,(ISNULL(UAA.WEEKEND,''))						--AS WEEKEND

,(ISNULL(UAA.CPROD							,0.00))
,(ISNULL(UAA.MINIMUM_GUARANTEE				,0.00))
,(ISNULL(UAA.AUTHORIZED_MINUTES				,0.00))

--SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING

FROM
(	SELECT	
	-- UA.TENANT_KEY
	 ''									AS ACD_ID_EXTENSION
	,UA.INVOICE_ID					    AS SCHEDULER_ACL_NAME
	,UA.FF_LOGIN_ID						AS EMPLOYEE_ID 
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,MAX(UA.RESOURCE_NAME)              AS RESOURCE_NAME
	,MAX(UA.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,'BLACK'                            AS AIR_ACW_FONT_COLOR
	,0									AS MIN_GUARANTEE_MINUTES
	,''									AS MIN_GUARANTEE_TYPE
	,''									AS AUTHORIZED_TO_INVOICE_TYPE
	,'Y'								AS HAS_HOLIDAYS
	,''									AS INCLUDE_IN_CAS
	,''									AS READY_FOR_XML
	,''									AS SHOW_ID_EXTS

	,SUM(ISNULL(UA.STAFFED_SECS					,0.00))	AS STAFFED_SECS
	,SUM(ISNULL(UA.AVAILABLE_SECS				,0.00))	AS AVAILABLE_SECS
	,SUM(ISNULL(UA.ACD_SECS						,0.00))	AS ACD_SECS
	,SUM(ISNULL(UA.OTHER_SECS					,0.00))	AS OTHER_SECS
	,SUM(ISNULL(UA.ACW_SECS						,0.00))	AS ACW_SECS
	,SUM(ISNULL(UA.RING_SECS					,0.00))	AS RING_SECS
	,SUM(ISNULL(UA.AUX_0_DEFAULT_SECS			,0.00))	AS AUX_0_DEFAULT_SECS
	,SUM(ISNULL(UA.AUX_1_BREAK_SECS				,0.00))	AS AUX_1_BREAK_SECS
	,SUM(ISNULL(UA.AUX_2_COACHING_SECS			,0.00))	AS AUX_2_COACHING_SECS
	,SUM(ISNULL(UA.AUX_3_MEETING_SECS			,0.00))	AS AUX_3_MEETING_SECS
	,SUM(ISNULL(UA.AUX_4_PROJECT_SECS			,0.00))	AS AUX_4_PROJECT_SECS
	,SUM(ISNULL(UA.AUX_5_EGE_TRAINING_SECS		,0.00))	AS AUX_5_EGE_TRAINING_SECS
	,SUM(ISNULL(UA.AUX_6_OUTBOUND_SECS			,0.00))	AS AUX_6_OUTBOUND_SECS
	,SUM(ISNULL(UA.AUX_7_EMAIL_SECS				,0.00)) AS AUX_7_EMAIL_SECS
	,SUM(ISNULL(UA.AUX_8_QUEUE_WORK_SECS		,0.00)) AS AUX_8_QUEUE_WORK_SECS
	,SUM(ISNULL(UA.AUX_9_SYSTEM_DOWN_SECS		,0.00)) AS AUX_9_SYSTEM_DOWN_SECS
	,SUM(ISNULL(UA.AUX_10_EXCHANGE_SECS			,0.00)) AS AUX_10_EXCHANGE_SECS
	,SUM(ISNULL(UA.AUX_11_PERSONAL_SECS			,0.00)) AS AUX_11_PERSONAL_SECS
	,SUM(ISNULL(UA.AUX_34_SECS					,0.00)) AS AUX_34_SECS
	,SUM(ISNULL(UA.AUX_35_SECS					,0.00)) AS AUX_35_SECS
	,SUM(ISNULL(UA.AUX_37_SECS					,0.00)) AS AUX_37_SECS
	,SUM(ISNULL(UA.AUX_40_SECS					,0.00)) AS AUX_40_SECS
	,SUM(ISNULL(UA.OUTBOUND_SECS				,0.00)) AS OUTBOUND_SECS
	,SUM(ISNULL(UA.EMAIL_SECS					,0.00)) AS EMAIL_SECS
	,SUM(ISNULL(UA.PROJECT_SECS					,0.00)) AS PROJECT_SECS
	,SUM(ISNULL(UA.MEETING_SECS					,0.00)) AS MEETING_SECS
	,SUM(ISNULL(UA.TOTAL_AUX_SECS				,0.00)) AS TOTAL_AUX_SECS
	,SUM(ISNULL(UA.PROD_BILLING_SECS			,0.00)) AS PROD_BILLING_SECS
	,SUM(ISNULL(UA.AUTHORIZED_CSAT_SAT_KEY_SECS	,0.00)) AS AUTHORIZED_CSAT_SAT_KEY_SECS
	,SUM(ISNULL(UA.AUTHORIZED_RESOURCE_SECS		,0.00)) AS AUTHORIZED_RESOURCE_SECS

	,ISNULL(UA.LINE_OF_BUSINESS	,''  ) AS LINE_OF_BUSINESS
	,ISNULL(UA.WEEKEND			,''  ) AS WEEKEND

	,SUM(ISNULL(UA.CPROD						,0.00))	AS CPROD
	,SUM(ISNULL(UA.MINIMUM_GUARANTEE			,0.00))	AS MINIMUM_GUARANTEE
	,SUM(ISNULL(UA.AUTHORIZED_MINUTES			,0.00))	AS AUTHORIZED_MINUTES
	
	--  SELECT *
	FROM            WSOL_TB_IMPORTS_EGENCIA_INVOICING	UA
	INNER JOIN      DATE_TIME							DT	ON DT.DATE_TIME_KEY = UA.STD_TENANT_START_DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
		
	GROUP BY 
	 UA.INVOICE_ID
	,UA.FF_LOGIN_ID
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,UA.LINE_OF_BUSINESS
	,UA.WEEKEND
) UAA

--==============================================================
-- CREATE TEMPORARY TABLE TO RETURN RESULTS
--==============================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_EGENCIA_AGENT_INVOICING_REPORTS_RTN') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_EGENCIA_AGENT_INVOICING_REPORTS_RTN
END
CREATE TABLE #IMPORTS_EGENCIA_AGENT_INVOICING_REPORTS_RTN
(GRPNO                 INT
,TENANT_NAME           VARCHAR(50)
,ID_EXT                VARCHAR(3)
,SCHEDULER_ACL_NAME    VARCHAR(100)
,EMPLOYEE_ID           VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,CAL_YEAR_MONTH_NUM    VARCHAR(10)
,DATE_INTERVAL         VARCHAR(50)
,TIME_INTERVAL         VARCHAR(10)

,AIR_DAY_TYPE				varchar(1)
,AIR_ACW_FONT_COLOR			varchar(50)
,MIN_GUARANTEE_MINUTES		decimal(6,3)
,MIN_GUARANTEE_TYPE			varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE	varchar(50)
,HAS_HOLIDAYS				varchar(1)
,INCLUDE_IN_CAS				varchar(1)
,READY_FOR_XML				varchar(1)
,SHOW_ID_EXTS				varchar(1)

,AIR_HOLIDAY_IN				VARCHAR(1)
,ALL_AUTHORIZED_TIME		DECIMAL(10,2)
,ALL_AUTHORIZED_WE_TIME		DECIMAL(10,2)

,
[STAFFED_SECS] [decimal](10, 2) NULL,
[AVAILABLE_SECS] [decimal](10, 2) NULL,
[ACD_SECS] [decimal](10, 2) NULL,
[OTHER_SECS] [decimal](10, 2) NULL,
[ACW_SECS] [decimal](10, 2) NULL,
[RING_SECS] [decimal](10, 2) NULL,
[AUX_0_DEFAULT_SECS] [decimal](10, 2) NULL,
[AUX_1_BREAK_SECS] [decimal](10, 2) NULL,
[AUX_2_COACHING_SECS] [decimal](10, 2) NULL,
[AUX_3_MEETING_SECS] [decimal](10, 2) NULL,
[AUX_4_PROJECT_SECS] [decimal](10, 2) NULL,
[AUX_5_EGE_TRAINING_SECS] [decimal](10, 2) NULL,
[AUX_6_OUTBOUND_SECS] [decimal](10, 2) NULL,
[AUX_7_EMAIL_SECS] [decimal](10, 2) NULL,
[AUX_8_QUEUE_WORK_SECS] [decimal](10, 2) NULL,
[AUX_9_SYSTEM_DOWN_SECS] [decimal](10, 2) NULL,
[AUX_10_EXCHANGE_SECS] [decimal](10, 2) NULL,
[AUX_11_PERSONAL_SECS] [decimal](10, 2) NULL,
[AUX_34_SECS] [decimal](10, 2) NULL,
[AUX_35_SECS] [decimal](10, 2) NULL,
[AUX_37_SECS] [decimal](10, 2) NULL,
[AUX_40_SECS] [decimal](10, 2) NULL,
[OUTBOUND_SECS] [decimal](10, 2) NULL,
[EMAIL_SECS] [decimal](10, 2) NULL,
[PROJECT_SECS] [decimal](10, 2) NULL,
[MEETING_SECS] [decimal](10, 2) NULL,
[TOTAL_AUX_SECS] [decimal](10, 2) NULL,
[PROD_BILLING_SECS] [decimal](10, 2) NULL,
[AUTHORIZED_CSAT_SAT_KEY_SECS] [decimal](10, 2) NULL,
[AUTHORIZED_RESOURCE_SECS] [decimal](10, 2) NULL,
[LINE_OF_BUSINESS] [varchar](100) NULL,
[WEEKEND] [char](1) NULL,
[CPROD] [decimal](10, 2) NULL,
[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
[AUTHORIZED_MINUTES] [decimal](10, 2) NULL,
)

--==================================
-- POPULATE TEMPORARY TABLE
--==================================
INSERT INTO #IMPORTS_EGENCIA_AGENT_INVOICING_REPORTS_RTN
SELECT
 20								--AS GRPNO  
,ISNULL(GG.TENANT_NAME       ,'') AS TENANT_NAME
,ISNULL(GG.ID_EXT            ,'') AS ID_EXT
,ISNULL(GG.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
,ISNULL(GG.EMPLOYEE_ID       ,'') AS EMPLOYEE_ID
,ISNULL(GG.RESOURCE_NAME     ,'') AS RESOURCE_NAME
,ISNULL(GG.CAL_YEAR_MONTH_NUM,'') AS CAL_YEAR_MONTH_NUM
,ISNULL(GG.DI                ,'') AS DI
,ISNULL(GG.TI                ,'') AS TI

,(GG.AIR_DAY_TYPE)                AS AIR_DAY_TYPE
,(GG.AIR_ACW_FONT_COLOR)          AS AIR_ACW_FONT_COLOR
,(GG.MIN_GUARANTEE_MINUTES)       AS MIN_GUARANTEE_MINUTES
,(GG.MIN_GUARANTEE_TYPE)          AS MIN_GUARANTEE_TYPE
,(GG.AUTHORIZED_TO_INVOICE_TYPE)  AS AUTHORIZED_TO_INVOICE_TYPE
,(GG.HAS_HOLIDAYS)                AS HAS_HOLIDAYS
,(GG.INCLUDE_IN_CAS)              AS INCLUDE_IN_CAS
,(GG.READY_FOR_XML)               AS READY_FOR_XML
,(GG.SHOW_ID_EXTS)                AS SHOW_ID_EXTS

,'' --AS AIR_HOLIDAY_IN
,0  --AS ALL_AUTHORIZED_TIME
,0	--AS ALL_AUTHORIZED_WE_TIME

,CAST((ISNULL(GG.STAFFED_SECS					,0.00)) / @DS AS DECIMAL(10,2))	AS STAFFED_SECS
,CAST((ISNULL(GG.AVAILABLE_SECS					,0.00)) / @DS AS DECIMAL(10,2))	AS AVAILABLE_SECS
,CAST((ISNULL(GG.ACD_SECS						,0.00)) / @DS AS DECIMAL(10,2))	AS ACD_SECS
,CAST((ISNULL(GG.OTHER_SECS						,0.00)) / @DS AS DECIMAL(10,2))	AS OTHER_SECS
,CAST((ISNULL(GG.ACW_SECS						,0.00)) / @DS AS DECIMAL(10,2))	AS ACW_SECS
,CAST((ISNULL(GG.RING_SECS						,0.00)) / @DS AS DECIMAL(10,2))	AS RING_SECS
,CAST((ISNULL(GG.AUX_0_DEFAULT_SECS				,0.00)) / @DS AS DECIMAL(10,2))	AS AUX_0_DEFAULT_SECS
,CAST((ISNULL(GG.AUX_1_BREAK_SECS				,0.00)) / @DS AS DECIMAL(10,2))	AS AUX_1_BREAK_SECS
,CAST((ISNULL(GG.AUX_2_COACHING_SECS			,0.00)) / @DS AS DECIMAL(10,2)) AS AUX_2_COACHING_SECS
,CAST((ISNULL(GG.AUX_3_MEETING_SECS				,0.00)) / @DS AS DECIMAL(10,2)) AS AUX_3_MEETING_SECS
,CAST((ISNULL(GG.AUX_4_PROJECT_SECS				,0.00)) / @DS AS DECIMAL(10,2)) AS AUX_4_PROJECT_SECS
,CAST((ISNULL(GG.AUX_5_EGE_TRAINING_SECS		,0.00)) / @DS AS DECIMAL(10,2)) AS AUX_5_EGE_TRAINING_SECS
,CAST((ISNULL(GG.AUX_6_OUTBOUND_SECS			,0.00)) / @DS AS DECIMAL(10,2)) AS AUX_6_OUTBOUND_SECS
,CAST((ISNULL(GG.AUX_7_EMAIL_SECS				,0.00)) / @DS AS DECIMAL(10,2)) AS AUX_7_EMAIL_SECS
,CAST((ISNULL(GG.AUX_8_QUEUE_WORK_SECS			,0.00)) / @DS AS DECIMAL(10,2)) AS AUX_8_QUEUE_WORK_SECS
,CAST((ISNULL(GG.AUX_9_SYSTEM_DOWN_SECS			,0.00)) / @DS AS DECIMAL(10,2)) AS AUX_9_SYSTEM_DOWN_SECS
,CAST((ISNULL(GG.AUX_10_EXCHANGE_SECS			,0.00)) / @DS AS DECIMAL(10,2)) AS AUX_10_EXCHANGE_SECS
,CAST((ISNULL(GG.AUX_11_PERSONAL_SECS			,0.00)) / @DS AS DECIMAL(10,2)) AS AUX_11_PERSONAL_SECS
,CAST((ISNULL(GG.AUX_34_SECS					,0.00)) / @DS AS DECIMAL(10,2)) AS AUX_34_SECS
,CAST((ISNULL(GG.AUX_35_SECS					,0.00)) / @DS AS DECIMAL(10,2)) AS AUX_35_SECS
,CAST((ISNULL(GG.AUX_37_SECS					,0.00)) / @DS AS DECIMAL(10,2)) AS AUX_37_SECS
,CAST((ISNULL(GG.AUX_40_SECS					,0.00)) / @DS AS DECIMAL(10,2)) AS AUX_40_SECS
,CAST((ISNULL(GG.OUTBOUND_SECS					,0.00)) / @DS AS DECIMAL(10,2)) AS OUTBOUND_SECS
,CAST((ISNULL(GG.EMAIL_SECS						,0.00)) / @DS AS DECIMAL(10,2)) AS EMAIL_SECS
,CAST((ISNULL(GG.PROJECT_SECS					,0.00)) / @DS AS DECIMAL(10,2)) AS PROJECT_SECS
,CAST((ISNULL(GG.MEETING_SECS					,0.00)) / @DS AS DECIMAL(10,2)) AS MEETING_SECS
,CAST((ISNULL(GG.TOTAL_AUX_SECS					,0.00)) / @DS AS DECIMAL(10,2)) AS TOTAL_AUX_SECS
,CAST((ISNULL(GG.PROD_BILLING_SECS				,0.00)) / @DS AS DECIMAL(10,2)) AS PROD_BILLING_SECS
,CAST((ISNULL(GG.AUTHORIZED_CSAT_SAT_KEY_SECS	,0.00)) / @DS AS DECIMAL(10,2)) AS AUTHORIZED_CSAT_SAT_KEY_SECS
,CAST((ISNULL(GG.AUTHORIZED_RESOURCE_SECS		,0.00)) / @DS AS DECIMAL(10,2)) AS AUTHORIZED_RESOURCE_SECS

,ISNULL(GG.LINE_OF_BUSINESS	,'') AS LINE_OF_BUSINESS
,ISNULL(GG.WEEKEND			,'') AS WEEKEND

,CAST((ISNULL(GG.CPROD							,0.00)) / @DS AS DECIMAL(10,2))	AS CPROD
,CAST((ISNULL(GG.MINIMUM_GUARANTEE				,0.00)) / @DS AS DECIMAL(10,2))	AS MINIMUM_GUARANTEE
,CAST((ISNULL(GG.AUTHORIZED_MINUTES				,0.00)) / @DS AS DECIMAL(10,2))	AS AUTHORIZED_MINUTES


FROM  -- GG STARTS HERE:
(	SELECT
	 ISNULL(SW.TENANT_NAME,'')        AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  AS EMPLOYEE_ID
	,MAX(RESOURCE_NAME)               AS RESOURCE_NAME

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) AS TI

	,MAX(SW.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,MAX(SW.AIR_ACW_FONT_COLOR)         AS AIR_ACW_FONT_COLOR
	,MAX(SW.MIN_GUARANTEE_MINUTES)      AS MIN_GUARANTEE_MINUTES
	,MAX(SW.MIN_GUARANTEE_TYPE)         AS MIN_GUARANTEE_TYPE
	,MAX(SW.AUTHORIZED_TO_INVOICE_TYPE) AS AUTHORIZED_TO_INVOICE_TYPE
	,MAX(SW.HAS_HOLIDAYS)               AS HAS_HOLIDAYS
	,MAX(SW.INCLUDE_IN_CAS)             AS INCLUDE_IN_CAS
	,MAX(SW.READY_FOR_XML)              AS READY_FOR_XML
	,MAX(SW.SHOW_ID_EXTS)               AS SHOW_ID_EXTS

	,SUM(ISNULL(SW.STAFFED_SECS					,0.00))	AS STAFFED_SECS
	,SUM(ISNULL(SW.AVAILABLE_SECS				,0.00))	AS AVAILABLE_SECS
	,SUM(ISNULL(SW.ACD_SECS						,0.00))	AS ACD_SECS
	,SUM(ISNULL(SW.OTHER_SECS					,0.00))	AS OTHER_SECS
	,SUM(ISNULL(SW.ACW_SECS						,0.00))	AS ACW_SECS
	,SUM(ISNULL(SW.RING_SECS					,0.00))	AS RING_SECS
	,SUM(ISNULL(SW.AUX_0_DEFAULT_SECS			,0.00))	AS AUX_0_DEFAULT_SECS
	,SUM(ISNULL(SW.AUX_1_BREAK_SECS				,0.00))	AS AUX_1_BREAK_SECS
	,SUM(ISNULL(SW.AUX_2_COACHING_SECS			,0.00))	AS AUX_2_COACHING_SECS
	,SUM(ISNULL(SW.AUX_3_MEETING_SECS			,0.00))	AS AUX_3_MEETING_SECS
	,SUM(ISNULL(SW.AUX_4_PROJECT_SECS			,0.00))	AS AUX_4_PROJECT_SECS
	,SUM(ISNULL(SW.AUX_5_EGE_TRAINING_SECS		,0.00))	AS AUX_5_EGE_TRAINING_SECS
	,SUM(ISNULL(SW.AUX_6_OUTBOUND_SECS			,0.00))	AS AUX_6_OUTBOUND_SECS
	,SUM(ISNULL(SW.AUX_7_EMAIL_SECS				,0.00))	AS AUX_7_EMAIL_SECS
	,SUM(ISNULL(SW.AUX_8_QUEUE_WORK_SECS		,0.00))	AS AUX_8_QUEUE_WORK_SECS
	,SUM(ISNULL(SW.AUX_9_SYSTEM_DOWN_SECS		,0.00))	AS AUX_9_SYSTEM_DOWN_SECS
	,SUM(ISNULL(SW.AUX_10_EXCHANGE_SECS			,0.00))	AS AUX_10_EXCHANGE_SECS
	,SUM(ISNULL(SW.AUX_11_PERSONAL_SECS			,0.00))	AS AUX_11_PERSONAL_SECS
	,SUM(ISNULL(SW.AUX_34_SECS					,0.00)) AS AUX_34_SECS
	,SUM(ISNULL(SW.AUX_35_SECS					,0.00)) AS AUX_35_SECS
	,SUM(ISNULL(SW.AUX_37_SECS					,0.00)) AS AUX_37_SECS
	,SUM(ISNULL(SW.AUX_40_SECS					,0.00)) AS AUX_40_SECS
	,SUM(ISNULL(SW.OUTBOUND_SECS				,0.00)) AS OUTBOUND_SECS
	,SUM(ISNULL(SW.EMAIL_SECS					,0.00)) AS EMAIL_SECS
	,SUM(ISNULL(SW.PROJECT_SECS					,0.00)) AS PROJECT_SECS
	,SUM(ISNULL(SW.MEETING_SECS					,0.00)) AS MEETING_SECS
	,SUM(ISNULL(SW.TOTAL_AUX_SECS				,0.00)) AS TOTAL_AUX_SECS
	,SUM(ISNULL(SW.PROD_BILLING_SECS			,0.00)) AS PROD_BILLING_SECS
	,SUM(ISNULL(SW.AUTHORIZED_CSAT_SAT_KEY_SECS	,0.00)) AS AUTHORIZED_CSAT_SAT_KEY_SECS
	,SUM(ISNULL(SW.AUTHORIZED_RESOURCE_SECS		,0.00)) AS AUTHORIZED_RESOURCE_SECS

	,ISNULL(SW.LINE_OF_BUSINESS	,'')	AS LINE_OF_BUSINESS
	,ISNULL(SW.WEEKEND			,'')	AS WEEKEND

	,SUM(ISNULL(SW.CPROD						,0.00))	AS CPROD
	,SUM(ISNULL(SW.MINIMUM_GUARANTEE			,0.00))	AS MINIMUM_GUARANTEE
	,SUM(ISNULL(SW.AUTHORIZED_MINUTES			,0.00))	AS AUTHORIZED_MINUTES
	
	FROM            #IMPORTS_EGENCIA_AGENT_INVOICING_REPORTS	SW
	INNER JOIN      DATE_TIME									DT   ON DT.DATE_TIME_KEY	=	SW.STD_TENANT_START_DATE_TIME_KEY

	GROUP BY 
	 ISNULL(SW.TENANT_NAME,'')			--AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')				--AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'')	--AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')			--AS EMPLOYEE_ID
	,ISNULL(SW.LINE_OF_BUSINESS,'')		--AS LINE_OF_BUSINESS
	,ISNULL(SW.WEEKEND,'')				--AS WEEKEND

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) --AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) --AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) --AS TI

) GG

--==================================
--IS A HOLIDAY DATE IN THE MIX:
--==================================
DECLARE @HOLIDAY_IN VARCHAR(1)
SET @HOLIDAY_IN = 'N'
DECLARE @I INT
SET @I = (SELECT COUNT(*) FROM #IMPORTS_EGENCIA_AGENT_INVOICING_REPORTS_RTN WHERE AIR_DAY_TYPE = 'H')  --  AND INCLUDE_IN_CAS = 'Y')
IF @I > 0 BEGIN
	SET @HOLIDAY_IN = 'Y'
END
--==================================
UPDATE #IMPORTS_EGENCIA_AGENT_INVOICING_REPORTS_RTN SET
 AIR_HOLIDAY_IN = @HOLIDAY_IN

--======================================================
--UPDATE TOTALS LINE ON REPORT FOR STANDARD AND HOLIDAY:
--======================================================
UPDATE #IMPORTS_EGENCIA_AGENT_INVOICING_REPORTS_RTN SET
 ALL_AUTHORIZED_TIME = ISNULL(LOJ.ALL_AUTHORIZED_TIME,0.0)
FROM #IMPORTS_EGENCIA_AGENT_INVOICING_REPORTS_RTN TA
LEFT OUTER JOIN
(	SELECT
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
	,SUM(AUTHORIZED_MINUTES) AS ALL_AUTHORIZED_TIME
	FROM #IMPORTS_EGENCIA_AGENT_INVOICING_REPORTS_RTN 
	GROUP BY 
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
) LOJ ON LOJ.SCHEDULER_ACL_NAME = TA.SCHEDULER_ACL_NAME
	 AND LOJ.EMPLOYEE_ID        = TA.EMPLOYEE_ID
	 AND LOJ.AIR_DAY_TYPE       = TA.AIR_DAY_TYPE

--======================================================
--UPDATE TOTALS LINE ON REPORT FOR WEEKEND:
--======================================================
UPDATE #IMPORTS_EGENCIA_AGENT_INVOICING_REPORTS_RTN SET
 ALL_AUTHORIZED_WE_TIME = ISNULL(LOJ.ALL_AUTHORIZED_WE_TIME,0.0)
FROM #IMPORTS_EGENCIA_AGENT_INVOICING_REPORTS_RTN TA
LEFT OUTER JOIN
(	SELECT
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
	,WEEKEND
	,SUM(AUTHORIZED_MINUTES) AS ALL_AUTHORIZED_WE_TIME
	FROM #IMPORTS_EGENCIA_AGENT_INVOICING_REPORTS_RTN
	WHERE WEEKEND = 'Y'
	GROUP BY 
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
	,WEEKEND
) LOJ ON LOJ.SCHEDULER_ACL_NAME = TA.SCHEDULER_ACL_NAME
	 AND LOJ.EMPLOYEE_ID        = TA.EMPLOYEE_ID
	 AND LOJ.AIR_DAY_TYPE       = TA.AIR_DAY_TYPE

--==================================
--RETURN DATA
--==================================
--==================================
--POPULATE TABLE READ BY SSIS TO GET END DATE OF DATA REPORT/FILE HAS BEEN RUN FOR:
--==================================
INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
SELECT
 'uspIMPORTS_EGENCIA_AGENT_INVOICING_REPORTS'			--SQL_JOB_NAME
,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,111),'/','')  --FILENM   YYYYMMDD_...
,dbo.GETDATE()											--CST_ROW_CREATED_TIME

--=====================================
--RETURN DATASET:
--=====================================
SELECT 
 CASE WHEN @DUR_IN = 'SS' THEN '' ELSE 'F' END AS DUR_FORMAT
,CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
,V.*

FROM      #IMPORTS_EGENCIA_AGENT_INVOICING_REPORTS_RTN  V

ORDER BY 
 V.GRPNO
,V.SCHEDULER_ACL_NAME
,V.RESOURCE_NAME
,V.EMPLOYEE_ID
,V.LINE_OF_BUSINESS
,V.WEEKEND
,V.CAL_YEAR_MONTH_NUM
,V.DATE_INTERVAL
,V.TIME_INTERVAL  --SINCE IN MILITARY TIME!




--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_EGENCIA_AIA_AGENT_MAPPING_IMPORT]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_EGENCIA_AIA_AGENT_MAPPING_IMPORT]
AS
SET NOCOUNT ON  -- EXECUTE [dbo].[uspIMPORTS_EGENCIA_AIA_AGENT_MAPPING_IMPORT]

--  DELETE FROM WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_1

--  SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_1

--  Data Loading SFTP Pathway
--  FTP server   = 52.173.192.182:22
--  FTP Username = Egencia
--  FTP Password = Q13zj3NjKGdJh4Jx6D0u
--  FTP Pathway  = /EGENCIA/AIA/AIA_AGENT_MAPPING

--  USES WSOL_TB_IMPORT_ERRORS_FOUND.  NOT TOTALLY INDEPENDANT OF OTHER CLIENTS/TENANTS...

--=================================================================================================
DECLARE
 @TENANT_KEY      INT
,@SUB_GROUP_NAME  VARCHAR(50)
SET @TENANT_KEY		= 106  -- Egencia CLIENT_ID in WSOL Database
SET @SUB_GROUP_NAME = 'EGENCIA_AIA_AGENT_MAPPING'
--===========================================================================================================================================================================================
--WHEN RUNNING MANUALLY DURING TESTING:DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 106 AND SUB_GROUP_NAME = 'EGENCIA_AIA_AGENT_MAPPING'
DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = @SUB_GROUP_NAME  --'EGENCIA_AIA_AGENT_MAPPING'    --  SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 106
--===========================================================================================================================================================================================
--WHEN RUNNING MANUALLY DURING TESTING:DELETE FROM WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_ERRORS WHERE TENANT_KEY = 106 AND IMPORT_SUB_GROUP_NAME = 'EGENCIA_AIA_AGENT_MAPPING'
DELETE FROM WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_ERRORS
WHERE IMPORT_SUB_GROUP_NAME = @SUB_GROUP_NAME  --'EGENCIA_AIA_AGENT_MAPPING' --SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_ERRORS WHERE TENANT_KEY = 106
--===========================================================================================================================================================================================
UPDATE WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_1 SET
 INVOICE_MAP_KEY		= RTRIM(LTRIM(REPLACE(ISNULL(INVOICE_MAP_KEY		,''),' ',' ')))
,FF_SKILL				= RTRIM(LTRIM(REPLACE(ISNULL(FF_SKILL				,''),' ',' ')))
,FF_EMAIL_ADDRESS		= RTRIM(LTRIM(REPLACE(ISNULL(FF_EMAIL_ADDRESS		,''),' ',' ')))
,FF_EFFECTIVE_DATE		= RTRIM(LTRIM(REPLACE(ISNULL(FF_EFFECTIVE_DATE		,''),' ',' ')))
,FF_OFFICIAL_ACL_NAME	= RTRIM(LTRIM(REPLACE(ISNULL(FF_OFFICIAL_ACL_NAME	,''),' ',' ')))

						  
--  SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_ERRORS
--======================================================================
--PROCESS DUPLICATES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_ERRORS
SELECT
 W1.INVOICE_MAP_KEY
,W1.FF_SKILL
,W1.FF_EMAIL_ADDRESS
,W1.FF_EFFECTIVE_DATE
,W1.FF_OFFICIAL_ACL_NAME
,W1.FTP_FILE_NAME
,dbo.GETDATE()																	--WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'EGENCIA_AIA_AGENT_MAPPING'								--IMPORT_SUB_GROUP_NAME
,'DUP'																			--ERROR_TAG
,'The Egencia Invoice Map Key exists more than once in the agent mapping file.'	--ERROR_MSG
--  SELECT *  
FROM WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_1  W1
INNER JOIN
(	SELECT
	 INVOICE_MAP_KEY
	,ROW_NUMBER() over (partition by INVOICE_MAP_KEY
                            order by INVOICE_MAP_KEY) ROWNO
	FROM WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_1
) TNM  ON TNM.INVOICE_MAP_KEY = W1.INVOICE_MAP_KEY

LEFT OUTER JOIN WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_ERRORS AME   ON AME.INVOICE_MAP_KEY = W1.INVOICE_MAP_KEY

WHERE TNM.ROWNO > 1   
  AND ISNULL(AME.ERROR_TAG,'') = ''

--===============================================
--CHECK FOR BAD DATA FOUND IN IMPORT .CSV FILES:
--===============================================
--WHEN RUNNING MANUALLY DURING TESTING:INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND SELECT 106,'EGENCIA_AIA_AGENT_MAPPING',''              
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--SQL won't insert special characters!!!  + CHAR(9)  --CHAR(10) + CHAR(13)
--Check #1:  ===================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_1)
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + '1) File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	--SSIS reads WSOL_TB_IMPORT_ERRORS_FOUND table where TENANT_KEY = 106, and if record exists, outputs results/error_msg field in an email.
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	SELECT 
	 @TENANT_KEY									--TENANT_KEY
	,@SUB_GROUP_NAME  --'EGENCIA_AIA_AGENT_MAPPING'	--SUB_GROUP_NAME
	,@MSG1											--ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	--=============================================
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	SELECT 
	 @TENANT_KEY									--TENANT_KEY
	,@SUB_GROUP_NAME  --'EGENCIA_AIA_AGENT_MAPPING'	--SUB_GROUP_NAME
	,''												--ERROR_MSG			--NEVER SET THIS TO @MSG1 !!!  MUST BE ''.
END

--======================================================================
--PROCESS BAD SKILL VALUES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_ERRORS
SELECT
 W1.INVOICE_MAP_KEY
,W1.FF_SKILL
,W1.FF_EMAIL_ADDRESS
,W1.FF_EFFECTIVE_DATE
,W1.FF_OFFICIAL_ACL_NAME
,W1.FTP_FILE_NAME
,dbo.GETDATE()															--WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'EGENCIA_AIA_AGENT_MAPPING'						--IMPORT_SUB_GROUP_NAME
,'SKI'																	--ERROR_TAG --INVALID SKILL
,'The SKILL identifier found in the AIA Agent Mapping file is invalid.'	--ERROR_MSG
--  SELECT *  
FROM            WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_1			W1

LEFT JOIN       WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_ERRORS	AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
WHERE ISNULL(W1.FF_SKILL,'') NOT IN ('C-Select','SAT','Resource','KEY','SME')

  AND ISNULL(AME.ERROR_TAG,'') = ''

--======================================================================
--PROCESS MISSING INVOICE MAP KEY VALUES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_ERRORS
SELECT
 W1.INVOICE_MAP_KEY
,W1.FF_SKILL
,W1.FF_EMAIL_ADDRESS
,W1.FF_EFFECTIVE_DATE
,W1.FF_OFFICIAL_ACL_NAME
,W1.FTP_FILE_NAME
,dbo.GETDATE()														--WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'EGENCIA_AIA_AGENT_MAPPING'					--IMPORT_SUB_GROUP_NAME
,'KEY'																--ERROR_TAG
,'The INVOICE MAP KEY is missing in the AIA Agent Mapping file.'	--ERROR_MSG
--  SELECT *  
FROM            WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_1			W1

LEFT JOIN       WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_ERRORS	AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
WHERE ISNULL(W1.INVOICE_MAP_KEY,'') = ''  -- CURRENTLY SET TO AVAYA LOGIN ID

  AND ISNULL(AME.ERROR_TAG,'') = ''

-- SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING ORDER BY FF_RESOURCE_NAME
--!!! UPDATING """PERMANENT""" TABLE HERE: !!!
--=======================================================================================================
--UPDATE PERMANENT TABLE WITH WORK TABLE DATA WHERE TENANT_KEY AND INVOICE_MAP_KEY FIELDS/VALUES MATCH:
--=======================================================================================================
UPDATE WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING SET
 INVOICE_MAP_KEY		= W1.INVOICE_MAP_KEY
,SKILL					= W1.FF_SKILL
,EMAIL_ADDRESS			= W1.FF_EMAIL_ADDRESS
,EFFECTIVE_DATE			= CAST(W1.FF_EFFECTIVE_DATE AS DATETIME)
,RESOURCE_NAME			= W1.FF_OFFICIAL_ACL_NAME
,FTP_FILE_NAME			= W1.FTP_FILE_NAME
--,WS_ROW_CREATED_TIME
,CST_ROW_UPDATED_TIME	= dbo.GETDATE()
--  SELECT *
FROM            WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_1			W1
--INNER JOIN MUST BE HERE.  NEVER CHANGE!
INNER JOIN      WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING			G     ON G.INVOICE_MAP_KEY        = W1.INVOICE_MAP_KEY
LEFT JOIN       WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_ERRORS	AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
--Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE ISNULL(AME.ERROR_TAG,'') = ''
  AND (   ( G.SKILL				<> W1.FF_SKILL)
	   OR ( G.EMAIL_ADDRESS		<> W1.FF_EMAIL_ADDRESS )
	 --OR ( G.INVOICE_MAP_KEY	<> W1.INVOICE_MAP_KEY )
	   OR ( G.EFFECTIVE_DATE	<> CAST(W1.FF_EFFECTIVE_DATE AS DATETIME) )
	   OR ( G.RESOURCE_NAME		<> W1.FF_OFFICIAL_ACL_NAME )
	  )

--  SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING
--!!! INSERTING INTO """PERMANENT""" TABLE HERE: !!!
--========================================================
--INSERT "NEW" DATA FROM WORK TABLE INTO PERMANENT TABLE: 
--========================================================
INSERT INTO WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING
SELECT
 W1.INVOICE_MAP_KEY
,W1.FF_SKILL
,W1.FF_EMAIL_ADDRESS
,CAST(W1.FF_EFFECTIVE_DATE AS DATETIME)
,W1.FF_OFFICIAL_ACL_NAME
,W1.FTP_FILE_NAME
,dbo.GETDATE()    --WS_ROW_CREATED_TIME
,NULL             --WS_ROW_UPDATED_TIME

FROM            WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_1			W1
LEFT JOIN       WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING			G     ON G.INVOICE_MAP_KEY        = W1.INVOICE_MAP_KEY
LEFT JOIN       WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_ERRORS	AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:
WHERE ( G.INVOICE_MAP_KEY IS NULL AND ISNULL(W1.INVOICE_MAP_KEY,'') <> '' )

  AND ISNULL(AME.ERROR_TAG,'') = ''

--  SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING ORDER BY INVOICE_MAP_KEY 

--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_EGENCIA_AIA_AGENT_MAPPING_IMPORT_STATUS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_EGENCIA_AIA_AGENT_MAPPING_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--	PURPOSE:  SHOW WHAT PROBLEMS THE RECENTLY IMPORTED AIA AGENT MAPPING FILE HAD DURING THE IMPORT/CLEANUP PROCESS.
--	THIS USP IS DATA SOURCE FOR SSRS GRID ON "AIA AGENT MAPPING" IMPORTS STATUS REPORT!!!

--  EXECUTE [dbo].[uspIMPORTS_EGENCIA_AIA_AGENT_MAPPING_IMPORT_STATUS] '10/01/2017','10/31/2017','','B'

--  SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_ERRORS
--  SELECT * FROM WSOL_TB_ERRORS_FOUND

--===================================================================================================================================================
DECLARE 
 @TENANT_KEY      INT
,@SUB_GROUP_NAME  VARCHAR(50)
SET @TENANT_KEY     = 106
SET @SUB_GROUP_NAME = 'EGENCIA_AIA_AGENT_MAPPING'

--===================================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--===================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME

IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
			--Dates passed in are for previous day:
	IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
	END
	ELSE IF DAY(dbo.getdate()) = 1 BEGIN
		IF MONTH(dbo.getdate()) = 1 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
	END
	ELSE BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
	END
	
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

END

ELSE BEGIN  --DAILY - Run report for YESTERDAY, 1 Day Only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- @DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
END

SET @DTM_END = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--===========================================================================================================
-- CREATE TEMP TABLE
--===========================================================================================================

IF OBJECT_ID('TEMPDB..#IMPORTS_EGENCIA_AIA_AGENT_MAPPING_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_EGENCIA_AIA_AGENT_MAPPING_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_EGENCIA_AIA_AGENT_MAPPING_IMPORT_STATUS
(	[RESOURCE_NAME] [varchar](100) NULL,
	[INVOICE_MAP_KEY] [varchar](50) NOT NULL,
	[EMAIL] [varchar](100) NULL,
	[INVOICE_GROUP] [varchar](50) NOT NULL,
	[FTP_FILE_NAME] [varchar](100) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[IMPORT_SUB_GROUP_NAME] [varchar](100) NULL,
	[ERROR_TAG] [varchar](50) NULL,
	[ERROR_MSG] [varchar](2500) NULL
)
INSERT INTO #IMPORTS_EGENCIA_AIA_AGENT_MAPPING_IMPORT_STATUS
SELECT
 RESOURCE_NAME
,INVOICE_MAP_KEY
,EMAIL_ADDRESS
,SKILL
,REPLACE(FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG

-- SELECT *
FROM WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING_ERRORS		I   

--=================================================================================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_EGENCIA_AIA_AGENT_MAPPING_IMPORT_STATUS)
--=================================================================================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
--=================================================================================================
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_EGENCIA_AIA_AGENT_MAPPING_IMPORT_STATUS
	SELECT
	 ''				--RESOURCE_NAME
	,''				--INVOICE_MAP_KEY
	,''				--[EMAIL]
	,''				--INVOICE_GROUP
	,''				--FTP_FILE_NAME
	,DBO.GETDATE()	--WS_ROW_CREATED_TIME
	,''				--IMPORT_SUB_GROUP_NAME
	,''				--ERROR_TAG
	,''				--ERROR_MSG
END 

--====================================================================================================================================================================================================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''

IF @RCD_CNT = 0 BEGIN  --IF @RCD_CNT = 0 HERE,IT ACTUALLY EQUALS THE ONE INSERTED STATING 'No Prolems.' IN ERROR_MSG.
	SET @MSG1 = @MSG1 + 'There were NO EGENCIA AIA Agent Mapping Import ERRORS found.'
END

ELSE BEGIN

IF @RPT_TYPE = 'B' BEGIN

	IF DAY(DBO.GETDATE()) = 16 OR DAY(DBO.GETDATE()) = 1 BEGIN
		SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
	END

	SET @MSG1 = @MSG1 + 'The list below contains errors found during the process of importing the EGENCIA AIA Agent Mapping .csv file. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	SET @MSG1 = @MSG1 + 'Project Management will need to add, remove, or update agent information in their EGENCIA AIA Agent Mapping .csv document '
	SET @MSG1 = @MSG1 + 'and upload the updated file to the SFTP directory in order for these agents to be invoiced through the Agent Invoice Automation system. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	END
END
--====================================================================================================================================================================================================================

DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),DBO.GETDATE(),101) + ' 10:30:00' AS DATETIME)
IF DBO.GETDATE() >  @TODAY_1030 AND DBO.GETDATE() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If DBO.GETDATE() after 10:30AM and before 11:00AM, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)

	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM YZ_TB_ERRORS_FOUND 
							   WHERE TENANT_KEY = @TENANT_KEY AND SUB_GROUP_NAME = @SUB_GROUP_NAME )
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some problems were encountered during the EGENCIA AIA Agent Mapping import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'And any in list below.'
	END
END


--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_EGENCIA_AIA_AGENT_MAPPING_IMPORT_STATUS 

ORDER BY
 INVOICE_MAP_KEY

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_EGENCIA_AIA_AGENT_MAPPING_MISSING_AGENTS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_EGENCIA_AIA_AGENT_MAPPING_MISSING_AGENTS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHICH INVOICE_MAP_KEY VALUES EXIST IN THE ACTIVITY FILES, BUT NOT IN THE AIA_AGENT_MAPPING .CSV FILES.
--          NO MATCHES BETWEEN ACTIVITY AND AGENT MAPPING.  WHEN NO MATCHES, THEN NO 'SCHEDULER' INVOICING.
--THIS USP IS DATA SOURCE FOR SRS GRID ON "ACTIVITY IMPORTS" STATUS REPORT!!!

--EXECUTE [dbo].[uspIMPORTS_EGENCIA_AIA_AGENT_MAPPING_MISSING_AGENTS] '10/01/2017','10/15/2017','','B'

--========================================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--========================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME

IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.


--===================================================================================================
--CREATE AND POPULATE TMP TABLE
--===================================================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_EGENCIA_AIA_AGENT_MAPPING_MISSING_AGENTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_EGENCIA_AIA_AGENT_MAPPING_MISSING_AGENTS
END
CREATE TABLE #IMPORTS_EGENCIA_AIA_AGENT_MAPPING_MISSING_AGENTS
(FILEDATETIME          VARCHAR(50)
,FTP_FILE_NAME         VARCHAR(100)
,WS_ROW_CREATED_TIME   DATETIME
,INVOICE_MAP_KEY       VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,RCD_CNT               INT
)
INSERT INTO #IMPORTS_EGENCIA_AIA_AGENT_MAPPING_MISSING_AGENTS
SELECT
 DT.CAL_DATE_STRING					AS FILEDATETIME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME
,I.WS_ROW_CREATED_TIME
,I.FF_LOGIN_ID						AS INVOICE_MAP_KEY
,I.RESOURCE_NAME					AS RESOURCE_NAME
,COUNT(*)							AS RCD_CNT
--SELECT *
FROM            WSOL_TB_IMPORTS_EGENCIA_INVOICING			I   
LEFT JOIN       WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING	IAM  ON IAM.INVOICE_MAP_KEY     = I.FF_LOGIN_ID
INNER JOIN      DATE_TIME									DT   ON DT.DATE_TIME_KEY        = I.STD_TENANT_START_DATE_TIME_KEY
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND ISNULL(IAM.INVOICE_MAP_KEY,'') = ''
  AND ISNULL(I.FF_LOGIN_ID,'') NOT IN ('Smith, Colin_EG_WS','Miller, Amy_EG_WS','King, C_EGE_WKS','Lawrence, Brad_EG_WS') -- EXCLUDE EDUCATION LEADERS / WSOL EMPLOYEES
GROUP BY
 DT.CAL_DATE_STRING
,REPLACE(I.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME
,I.WS_ROW_CREATED_TIME
,I.FF_LOGIN_ID						--AS INVOICE_MAP_KEY
,I.RESOURCE_NAME					--AS RESOURCE_NAME

--==================================
UPDATE #IMPORTS_EGENCIA_AIA_AGENT_MAPPING_MISSING_AGENTS SET
 FILEDATETIME = REPLACE(CONVERT(VARCHAR(10),ISNULL(FILEDATETIME,'1/1/1900'),102),'/',' . ')

--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_EGENCIA_AIA_AGENT_MAPPING_MISSING_AGENTS)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_EGENCIA_AIA_AGENT_MAPPING_MISSING_AGENTS
	SELECT
	 ''				--DT.CAL_DATE_STRING
	,''				--I.FTP_FILE_NAME
	,dbo.GETDATE()  --I.WS_ROW_CREATED_TIME
	,''				--I.FF_AGENT_NAME		AS INVOICE_MAP_KEY
	,''				--I.FF_AGENT_NAME		AS RESOURCE_NAME
	,0				--COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
END
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RCD_CNT = 0 
	BEGIN  --@RCD_CNT WILL BE 0 STILL, EVEN THOUGH ONE BLANK RECORD WAS ADDED...
		SET @MSG1 = @MSG1 + 'There are NO Missing AIA Agent Mappings.'
	END
ELSE
	BEGIN
		IF @RPT_TYPE = 'B'
			BEGIN
				SET @MSG1 = ''
	
				IF @RCD_CNT = 0
					BEGIN
						SET @MSG1 = @MSG1 + 'There are NO missing AIA agent mappings!'
					END
				ELSE
					BEGIN
						IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1
							BEGIN
								SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
							END
		
								SET @MSG1 = @MSG1 + 'The list below contains Invoice Map Key values for agents that are associated with activity for the report date range, but ' + CHAR(10) + CHAR(13)
								SET @MSG1 = @MSG1 + 'who have not been added to or have incorrect values in the AIA Agent Mapping File. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

								SET @MSG1 = @MSG1 + 'Agents who are on this list will not be invoiced (for activity dates shown), unless a special request is made and received '
								SET @MSG1 = @MSG1 + 'with plenty of time before the automated invoice process begins.  The analyst will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

								SET @MSG1 = @MSG1 + 'Also, Project Management may need to add or update agent information in their AIA Agent Mapping CSV file and upload it '
								SET @MSG1 = @MSG1 + 'to the appropriate SFTP directory before the Analyst can correctly update agent data. ' + CHAR(13) + CHAR(10)
					END

			END
	END

--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_EGENCIA_AIA_AGENT_MAPPING_MISSING_AGENTS 

ORDER BY
 INVOICE_MAP_KEY
,FTP_FILE_NAME

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_EGENCIA_AIA_XML]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_EGENCIA_AIA_XML]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300)
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='DY'  DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'-Manual - when users run report - what SRS reports are defaulted to.  MAN means use date range that user specified.  The exception is when a report is defined with PTD/YTD and MTD rows in it.
                                  --         'SUB'-Subscription - what SRS subscriptions are defaulted to.  SUB means set date range @vars based on @TIME_INTERVAL. (since date range in SRS Subscription can't be set correctly)
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='AIA'-Agent Invoice Automation - what Sergey uses for/in Scheduler...
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='XML'-AIA RPT (DETAIL) (XML FILE/EXPORT),
AS
SET NOCOUNT ON

SET @TENANT_KEY = 106  -- EGENCIA CLIENT ID IN WSOL DATABASE

--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)  
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 0,101) AS DATETIME)  
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) + 1
END

--IF @EXECUTIONER = 'MAN', DON'T CHANGE DATES -- THE REPORT IS BEING RAN MANUALLY, AND THE DATE RANGE WANTED BY THE USER IS BEING SET MANUALLY.

IF @EXECUTIONER = 'NEW' BEGIN -- NEW BI-MONTHLY PAYMENT CYCLE 1ST AND 16TH OF EACH MONTH
	IF @TIME_INTERVAL = 'W14' BEGIN
		IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate() - 1)) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
			END
		END		
		ELSE IF DAY(dbo.getdate()) = 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) < 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
	END
END

--=========================================================================================
--FORMAT 'MULTIPLES' "IN THAT" VALUES:  (Referring to CHARINDEX(search for this, in that))
--=========================================================================================
SET @ID_EXT          = ',' + LTRIM(RTRIM(@ID_EXT)) + ','
SET @SCHEDULER_GROUP = ',' + LTRIM(RTRIM(@SCHEDULER_GROUP)) + ','
 

--==============================================================
--SET AMOUNT TO DIVIDE BY:
--==============================================================
DECLARE @DS DECIMAL(10,2)  --INT  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.0       --DIVIDE SECONDS BY 1 TO GET SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
	SET @DS = 60.0		--DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
	SET @DS = 3600.0	--DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
IF @RPT_TYPE_GRP = 'AIA' BEGIN

	--POPULATES XML REPORT.  SRS SUBSCRIPTION EXPORTS TO XML.  SSIS RENAMES AND MOVES XML FILE TO FTP.  SERGEY PICKS UP FILE
	
	IF @RPT_TYPE = 'XML' BEGIN  --AIA REPORT  --EXACTLY WHAT IS IN XML FILE AND/OR AIA TABLE.
		--==================================		--CREATE TMP TABLE:
		IF OBJECT_ID('TEMPDB..#IMPORTS_EGENCIA_AIA_XML') IS NOT NULL BEGIN
		   DROP TABLE #IMPORTS_EGENCIA_AIA_XML
		END
		CREATE TABLE #IMPORTS_EGENCIA_AIA_XML
		([PLATFORM]                   VARCHAR(50)
		,[STATUS]                     VARCHAR(50) 
		,INVOICE_MAP_KEY              VARCHAR(50) 
		,FIELD_NAME                   VARCHAR(100) 
		,SCHEDULER_PROJECT_ID         VARCHAR(50) 
		,SCHEDULER_ACL_NAME           VARCHAR(100) 
		,ACD_ID_EXTENSION             VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_ID      VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_NAME    VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_ID       VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_NAME     VARCHAR(50) 
		,PRIMARY_PROJECT_MANAGER_ID   VARCHAR(500) 
		,DIRECTOR_OF_PROJECT_MANAGEMENT_ID VARCHAR(500) 
		,AGENT_TECHNOLOGY_MANAGER_ID  VARCHAR(500) 
		,CONTRACTOR_SUPPORT_PATHWAY   VARCHAR(500) 
		,INVOICE_SYSTEM_ID            VARCHAR(100) 
		,HOLIDAY_INVOICE_ID           VARCHAR(100) 
		,HOLIDAY                      VARCHAR(50) 
		,FILE_FORMAT_OF_PUSH          VARCHAR(50) 
		,AGENT_PREPARATION_INVOICE_ID VARCHAR(50) 
		,NEW_ACL                      VARCHAR(50) 
		,CURRENT_CATS                 VARCHAR(50) 
		,CATS_ID                      VARCHAR(50) 
		,PATS_ID                      VARCHAR(50) 
		,SMART_ELIGIBLE               VARCHAR(50) 
		,SMART_TIER_1                 VARCHAR(50) 
		,SMART_TIER_2                 VARCHAR(50) 
		,SMART_TIER_3                 VARCHAR(50) 
		,INTERVAL                     VARCHAR(50) 
		,DATE                         VARCHAR(50) 
		,HOD_INTERVAL                 VARCHAR(50) 
		,AU_DK_LOGGED_IN_DURATION     DECIMAL(10,2)  --INT 
		,AU_DK_AVAILABLE_DURATION     DECIMAL(10,2)  --INT 
		,AU_DK_TALK_DURATION          DECIMAL(10,2)  --INT 
		,AU_DK_IB_TALK_DURATION       DECIMAL(10,2)  --INT 
		,AU_DK_OB_TALK_DURATION       DECIMAL(10,2)  --INT 
		,AU_DK_CONVENTIONAL_ACW       DECIMAL(10,2)  --INT 
		,AU_DK_NR_DURATION            DECIMAL(10,2)  --INT 
		,AU_DK_PSEUDO_PRODUCTIVE_DURATION   DECIMAL(10,2)  --INT 
		,AU_DK_ADJUSTED_NR_DURATION         DECIMAL(10,2)  --INT 
		,AU_DK_TOTAL_PRODUCTIVE_DURATION    DECIMAL(10,2)  --INT 
		,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS DECIMAL(10,2)  --INT 
		,AU_DK_XFER_COUNT             INT 
		,AU_DK_HOLD_COUNT             INT 
		,AU_DK_CONFERENCE_COUNT       INT 
		,AU_DK_CONSULT_COUNT          INT 
		,AU_DK_PUP_COUNT              INT 
		,AU_DK_OFFERED_COUNT          INT 
		,AU_DK_HANDLED_COUNT          INT 
		,AU_DK_IB_HANDLE_COUNT        INT 
		,AU_DK_OB_HANDLE_COUNT        INT 
		,AU_DK_RONA_COUNT             INT 
		,AU_DK_AWR_COUNT              INT 
		,MINIMUM_GUARANTEE            DECIMAL(10,2) 
		,AUTHORIZED_TO_INVOICE        DECIMAL(10,2) 
		,WEEK_ENDING_DATE             VARCHAR(50) 
		,PAY_CYCLE_CLOSURE_DATE       VARCHAR(50) 
		,CAL_DATE                     DATETIME
		,TENANT_KEY                   INT 
		,INVOICE_ID                   VARCHAR(100) 
		,CST_ROW_CREATED_TIME         DATETIME
		)
		--==================================		
		-- INSERT INTO TEMP TABLE
		--==================================
		INSERT INTO #IMPORTS_EGENCIA_AIA_XML
		SELECT --AIA.*
		 AIA.[PLATFORM]
		,AIA.[STATUS]                       
		,AIA.INVOICE_MAP_KEY              
		,AIA.FIELD_NAME                   
		,AIA.SCHEDULER_PROJECT_ID         
		,AIA.SCHEDULER_ACL_NAME           
		,AIA.ACD_ID_EXTENSION             
		,AIA.OFFICIAL_WSOL_CLIENT_ID      
		,AIA.OFFICIAL_WSOL_CLIENT_NAME    
		,AIA.OFFICIAL_ACD_CLIENT_ID       
		,AIA.OFFICIAL_ACD_CLIENT_NAME     
		,AIA.PRIMARY_PROJECT_MANAGER_ID   
		,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID 
		,AIA.AGENT_TECHNOLOGY_MANAGER_ID  
		,AIA.CONTRACTOR_SUPPORT_PATHWAY   
		,AIA.INVOICE_SYSTEM_ID            
		,AIA.HOLIDAY_INVOICE_ID           
		,AIA.HOLIDAY                      
		,AIA.FILE_FORMAT_OF_PUSH          
		,AIA.AGENT_PREPARATION_INVOICE_ID 
		,AIA.NEW_ACL                      
		,AIA.CURRENT_CATS                 
		,AIA.CATS_ID                      
		,AIA.PATS_ID                      
		,AIA.SMART_ELIGIBLE               
		,AIA.SMART_TIER_1                 
		,AIA.SMART_TIER_2                 
		,AIA.SMART_TIER_3                 
		,AIA.INTERVAL                     
		,AIA.DATE                         
		,AIA.HOD_INTERVAL                 
		,CAST( ( 1.0 * (AIA.AU_DK_LOGGED_IN_DURATION) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_LOGGED_IN_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_AVAILABLE_DURATION) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_AVAILABLE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_TALK_DURATION) )      / @DS AS DECIMAL(10,2)) --AS AU_DK_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_IB_TALK_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_IB_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_OB_TALK_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_OB_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_CONVENTIONAL_ACW) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_CONVENTIONAL_ACW
		,CAST( ( 1.0 * (AIA.AU_DK_NR_DURATION) )        / @DS AS DECIMAL(10,2)) --AS AU_DK_NR_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_PSEUDO_PRODUCTIVE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_ADJUSTED_NR_DURATION) )         / @DS AS DECIMAL(10,2)) --AS AU_DK_ADJUSTED_NR_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION) )    / @DS AS DECIMAL(10,2)) --AS AU_DK_TOTAL_PRODUCTIVE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
		,(AIA.AU_DK_XFER_COUNT)         --AS AU_DK_XFER_COUNT
		,(AIA.AU_DK_HOLD_COUNT)         --AS AU_DK_HOLD_COUNT
		,(AIA.AU_DK_CONFERENCE_COUNT)   --AS AU_DK_CONFERENCE_COUNT
		,(AIA.AU_DK_CONSULT_COUNT)      --AS AU_DK_CONSULT_COUNT
		,(AIA.AU_DK_PUP_COUNT)          --AS AU_DK_PUP_COUNT
		,(AIA.AU_DK_OFFERED_COUNT)      --AS AU_DK_OFFERED_COUNT
		,(AIA.AU_DK_HANDLED_COUNT)      --AS AU_DK_HANDLED_COUNT
		,(AIA.AU_DK_IB_HANDLE_COUNT)    --AS AU_DK_IB_HANDLE_COUNT
		,(AIA.AU_DK_OB_HANDLE_COUNT)    --AS AU_DK_OB_HANDLE_COUNT
		,(AIA.AU_DK_RONA_COUNT)         --AS AU_DK_RONA_COUNT
		,(AIA.AU_DK_AWR_COUNT)          --AS AU_DK_AWR_COUNT
		,CAST( ( 1.0 * (AIA.MINIMUM_GUARANTEE) )     / @DS AS DECIMAL(10,2)) --AS MINIMUM_GUARANTEE
		,CAST( ( 1.0 * (AIA.AUTHORIZED_TO_INVOICE) ) / @DS AS DECIMAL(10,2)) --AS AUTHORIZED_TO_INVOICE
		,AIA.WEEK_ENDING_DATE             
		,AIA.PAY_CYCLE_CLOSURE_DATE       
		,AIA.CAL_DATE                     
		,AIA.TENANT_KEY                   
		,AIA.INVOICE_ID                   
		,AIA.WS_ROW_CREATED_TIME         

		--  SELECT *
		FROM            WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA	AIA
		INNER JOIN      DATE_TIME							DT		ON DT.DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
		
		WHERE ( DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END )
		  AND AIA.STATUS = 'Active'
		  AND ( (ISNULL(AIA.READY_FOR_XML,'') = 'Y')	--<----Maintain this field, and the AIA will populate the XML correctly every time!!!!!!!!!
				OR (@ID_EXT = 'Y') )					--<----In Test Mode (ignore what ready_for_xml is set to).
		  AND ( ISNULL(AIA.INVOICE_ID,'') <> '' )		--<----INSURANCE, IN CASE BLANK ID EXTENSION SLIPS THROUGH
--		  AND ( ISNULL(AIA.RESOURCE_NAME,'') <> '')		--<----INSURANCE, FILTER OUT THOSE NOT IN AIA AGENT MAPPING SINCE INVOICE_ID IS JUST FF_USER_NAME FROM IMPORT FILE

		ORDER BY 
		 AIA.OFFICIAL_ACD_CLIENT_NAME
		--,AIA.SCHEDULER_ACL_NAME
		,AIA.INVOICE_ID

		,AIA.ACD_ID_EXTENSION     
		,AIA.INVOICE_MAP_KEY
		,AIA.DATE
		,AIA.HOD_INTERVAL


		--==================================!!!--INSERT RECORD FOR REPORT SO SSIS KNOWS DATE OF DATA IN DATASET:
		--Have to include 'D??' or 'W??' because SRS Subscriptions are being ran at about same time in one sql job step.
		--  If one subscription takes longer than the other, the wrong date will get used/pulled from the YZ_TB_FILENAMES_FOR_SSIS in the ssis. and so on.
		IF CHARINDEX('D',@TIME_INTERVAL) > 0 BEGIN
			INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
			(SQL_JOB_NAME
			,FILENM
			,CST_ROW_CREATED_TIME)
			SELECT  --FOR THE .XML FILES FOR EACH DATE:
			 'iNetAIA_' + LTRIM(RTRIM(@TIME_INTERVAL))  --'iNetAIA_D09' for internal wsinet tenants 9 days from current date.  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.GETDATE()  --CST_ROW_CREATED_TIME
		END
		ELSE BEGIN  --'W' MEANING NEED TO PASS/POPULATE WITH DATE RANGE, LIKE 'MMDDYY_MMDDYY'. -- FOR GAR AND NW.
	

			INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
				(SQL_JOB_NAME
				,FILENM
				,CST_ROW_CREATED_TIME)
			SELECT  --FOR GETAROOM AND NINE_WEST:    --old:-- 'AGENT_INVOICE_AIA_XML'  --SQL_JOB_NAME 
			 'iNetAIA_' + LTRIM(RTRIM(@TIME_INTERVAL)) + '_' + REPLACE(LTRIM(RTRIM(CAST(@TENANT_KEY AS VARCHAR(10)))),',','')  --'iNetAIA_W14_900595' for GAR  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_BEG,1),'/','') + '_' + REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.GETDATE()  --CST_ROW_CREATED_TIME
		END
		--  SELECT * FROM WSOL_TB_FILENAMES_FOR_SSIS ORDER BY CST_ROW_CREATED_TIME DESC

		--==================================!!!--RETURN DATASET TO REPORT:
		SELECT *
		FROM #IMPORTS_EGENCIA_AIA_XML
		ORDER BY 
		 OFFICIAL_ACD_CLIENT_NAME
		--,SCHEDULER_ACL_NAME
		,INVOICE_ID
		,ACD_ID_EXTENSION     
		,INVOICE_MAP_KEY
		,DATE
		,HOD_INTERVAL
	END  --AIA_XML



END  --IF @RPT_TYPE_GRP = 'AIA'


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
--==================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_EGENCIA_ASPECT_EXCEPTIONS_IMPORT_STATUS]...';


GO


CREATE PROCEDURE [dbo].[uspIMPORTS_EGENCIA_ASPECT_EXCEPTIONS_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_EGENCIA_ASPECT_EXCEPTIONS_IMPORT_STATUS] '06/01/2014','06/06/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_EGENCIA_ASPECT_EXCEPTIONS_IMPORT_STATUS] '06/20/2014','06/30/2014','','W'

--===========================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--===========================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_EGENCIA_ASPECT_EXCEPTIONS_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_EGENCIA_ASPECT_EXCEPTIONS_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_EGENCIA_ASPECT_EXCEPTIONS_IMPORT_STATUS
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_EGENCIA_ASPECT_EXCEPTIONS_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0)															AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_EGENCIA_ASPECT_EXCEPTIONS  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

---- AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA
--END  --IF @PSW...

--=================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=================================================================
--DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = @TENANT_KEY
----  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 106
--=================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

--CREATE CURSOR, POPULATE CURSOR FOR DATE RANGE, SPIN THROUGH EACH OF THE DAILY RECORDS, CONCATENATING TO STRING FOR EACH DATE MISSING.

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	
	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_EGENCIA_ASPECT_EXCEPTIONS_IMPORT_STATUS   I   ON I.FILEDATETIME                   = DT.FILEDATETIME

WHERE ISNULL(I.RCD_CNT,0) = 0

  --AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)
  --AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
		SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

			SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 8:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
		END
	END
	ELSE BEGIN
		SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
		END
	END
	
END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--EGENCIA_ASPECT_EXCEPTIONS:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM YZ_TB_ERRORS_FOUND
							   WHERE TENANT_KEY = 900602 AND SUB_GROUP_NAME = 'EGENCIA_ASPECT_EXCEPTIONS' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_EGENCIA_ASPECT_EXCEPTIONS_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_EGENCIA_ASPECT_EXCEPTIONS_Summary]...';


GO


CREATE PROCEDURE [dbo].[uspIMPORTS_EGENCIA_ASPECT_EXCEPTIONS_Summary]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_EGENCIA_ASPECT_EXCEPTIONS_Summary] '06/01/2014','06/07/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_EGENCIA_ASPECT_EXCEPTIONS_Summary] '06/07/2014','06/07/2014','','W'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

			IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly 
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--TO TEST:
		--DECLARE
		-- @DTM_BEG DATETIME
		--,@DTM_END DATETIME
		----SET @DTM_BEG = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_END = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_BEG = CAST('08/02/2012' AS DATETIME)
		----SET @DTM_END = CAST('08/02/2012' AS DATETIME)
		--SET @DTM_BEG = CAST('08/03/2012' AS DATETIME)
		--SET @DTM_END = CAST('08/03/2012' AS DATETIME)

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		--SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		--SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--07/06/2012 IS AN INVOICE FRIDAY.  SAME AS 05/23/2014.
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_EGENCIA_ASPECT_EXCEPTIONS_Summary') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_EGENCIA_ASPECT_EXCEPTIONS_Summary
END
CREATE TABLE #IMPORTS_EGENCIA_ASPECT_EXCEPTIONS_Summary
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_EGENCIA_ASPECT_EXCEPTIONS_Summary
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')       --AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') --AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')             --AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_EGENCIA_ASPECT_EXCEPTIONS  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA

--END  --IF @PSW...


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT      
,'White' AS BG_COLOR

FROM #IMPORTS_EGENCIA_ASPECT_EXCEPTIONS_Summary 

ORDER BY
-- CALL_DATETIME           
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT      


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_EGENCIA_CMS_IMPORT_STATUS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_EGENCIA_CMS_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_EGENCIA_CMS_IMPORT_STATUS] '06/01/2014','06/06/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_EGENCIA_CMS_IMPORT_STATUS] '06/20/2014','06/30/2014','','W'

--===========================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--===========================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_EGENCIA_CMS_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_EGENCIA_CMS_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_EGENCIA_CMS_IMPORT_STATUS
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_EGENCIA_CMS_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0)															AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_EGENCIA_CMS  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

---- AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA
--END  --IF @PSW...

--=================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=================================================================
--DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = @TENANT_KEY
----  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 106
--=================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

--CREATE CURSOR, POPULATE CURSOR FOR DATE RANGE, SPIN THROUGH EACH OF THE DAILY RECORDS, CONCATENATING TO STRING FOR EACH DATE MISSING.

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	
	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_EGENCIA_CMS_IMPORT_STATUS   I   ON I.FILEDATETIME                   = DT.FILEDATETIME

WHERE ISNULL(I.RCD_CNT,0) = 0

  --AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)
  --AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
		SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

			SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 8:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
		END
	END
	ELSE BEGIN
		SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
		END
	END
	
END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--EGENCIA_CMS:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM YZ_TB_ERRORS_FOUND
							   WHERE TENANT_KEY = 106 AND SUB_GROUP_NAME = 'EGENCIA_CMS_INTERVAL_W_SKILL' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_EGENCIA_CMS_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_EGENCIA_CMS_Summary]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_EGENCIA_CMS_Summary]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_EGENCIA_CMS_Summary] '06/01/2014','06/07/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_EGENCIA_CMS_Summary] '06/07/2014','06/07/2014','','W'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

			IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly 
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--TO TEST:
		--DECLARE
		-- @DTM_BEG DATETIME
		--,@DTM_END DATETIME
		----SET @DTM_BEG = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_END = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_BEG = CAST('08/02/2012' AS DATETIME)
		----SET @DTM_END = CAST('08/02/2012' AS DATETIME)
		--SET @DTM_BEG = CAST('08/03/2012' AS DATETIME)
		--SET @DTM_END = CAST('08/03/2012' AS DATETIME)

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		--SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		--SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--07/06/2012 IS AN INVOICE FRIDAY.  SAME AS 05/23/2014.
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_EGENCIA_CMS_Summary') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_EGENCIA_CMS_Summary
END
CREATE TABLE #IMPORTS_EGENCIA_CMS_Summary
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_EGENCIA_CMS_Summary
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')       --AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') --AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')             --AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_EGENCIA_CMS  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA

--END  --IF @PSW...


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT      
,'White' AS BG_COLOR

FROM #IMPORTS_EGENCIA_CMS_Summary 

ORDER BY
-- CALL_DATETIME           
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT      


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_EGENCIA_IMPORT_STATUS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_EGENCIA_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_EGENCIA_IMPORT_STATUS] '10/01/2017','10/09/2017','','B'

--========================================
-- SET DATE VARIABLES
--========================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE 
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE 
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--=========================================================================
--CREATE TMP TABLE:
--=========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_EGENCIA_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_EGENCIA_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_EGENCIA_IMPORT_STATUS
(FILEDATETIME			VARCHAR(20)
,FTP_FILE_NAME			VARCHAR(100)
,CST_ROW_CREATED_TIME	DATETIME
,RCD_CNT				INT
)

--========================================================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================================================
    INSERT INTO #IMPORTS_EGENCIA_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'') AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0) AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_EGENCIA_INVOICING		C

		INNER JOIN      DATE_TIME								DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
--		AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )  -- USE IF YOU WANT TO IGNORE WEEKENDS

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME)
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')
		,C.WS_ROW_CREATED_TIME
	) UA

--================================================================================
--CREATE CURSOR TO CHECK FOR MISSING DATES
--================================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	--,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

--FOR 'WEEKEND' CODE/FILTER:!!!
--LEFT JOIN WSOL_TB_IMPORTS_MONAT_INVOICING  C ON   C.STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1)

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	--,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_EGENCIA_IMPORT_STATUS   I   ON I.FILEDATETIME = DT.FILEDATETIME

--LEFT JOIN       DATE_TIME                    DT2 ON CONVERT(VARCHAR(10),DT2.CAL_DATE,101) = CONVERT(VARCHAR(10),DT.FILEDATETIME,101)
--FOR 'WEEKEND' CODE/FILTER:!!!
--LEFT JOIN       WSOL_TB_IMPORTS_MONAT_INVOICING  C   ON C.STD_TENANT_START_DATE_TIME_KEY = DT2.DATE_TIME_KEY

--WHERE ISNULL(I.FTP_FILE_NAME,'') = ''  -- ISNULL(I.FILEDATETIME,'1.1.1900') = ''

WHERE ISNULL(I.RCD_CNT,0) = 0
--  AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)  -- WORLD VENTURES AGENTS WORKING EMAIL ON WEEKENDS
--  AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--====================================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
--====================================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B'
	BEGIN

		SET @MSG1 = ''

		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1
			BEGIN
				SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
				IF @RCD_CNT > 0
					BEGIN
						SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
						SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

						SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
						SET @MSG1 = @MSG1 + 'Any missing import files not on the SFTP server by 9:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
					END
				ELSE
					BEGIN
						SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
					END
			END
		ELSE 
			BEGIN
				SET @MSG1 = 'Imported file(s) from ' 
					+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
				
				IF @RCD_CNT > 0
					BEGIN
						SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
					END
				ELSE
					BEGIN
						SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
					END
			END
	
	END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--WESTERN DENTAL:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM WSOL_TB_IMPORT_ERRORS_FOUND
							   WHERE TENANT_KEY = 106 AND SUB_GROUP_NAME = 'EGENCIA_INVOICING' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_MONAT_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_EGENCIA_IMPORT_STATUS_MISSING_DATA]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_EGENCIA_IMPORT_STATUS_MISSING_DATA]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_EGENCIA_IMPORT_STATUS_MISSING_DATA] '10/01/2017','10/09/2017','','B'

--==============================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==============================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME

IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE 
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--========================================================================
--CREATE TMP TABLE:
--========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_EGENCIA_IMPORT_STATUS_MISSING_DATA') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_EGENCIA_IMPORT_STATUS_MISSING_DATA
END
CREATE TABLE #IMPORTS_EGENCIA_IMPORT_STATUS_MISSING_DATA
(FILEDATETIME			VARCHAR(20)
,FTP_FILE_NAME			VARCHAR(100)
,CST_ROW_CREATED_TIME	DATETIME
,RCD_CNT				INT
)

--========================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================
    INSERT INTO #IMPORTS_EGENCIA_IMPORT_STATUS_MISSING_DATA
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													--AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												--AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')															--AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_EGENCIA_INVOICING		C

		INNER JOIN      DATE_TIME								DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT
,'White' AS BG_COLOR

FROM #IMPORTS_EGENCIA_IMPORT_STATUS_MISSING_DATA

ORDER BY
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_EGENCIA_INVOICING_IMPORT]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_EGENCIA_INVOICING_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_EGENCIA_INVOICING_IMPORT]

--  SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_1

--	Data is received in Pacific Time Zone.  Data will be converted to Central Time Zone.
--  Durations are in seconds by 30 minute intervals.

--=================================================================================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY = 106  -- Egencia CLIENT_ID in WSOL Database
--=================================================================================================
DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND
WHERE TENANT_KEY		= @TENANT_KEY
  AND SUB_GROUP_NAME	= 'EGENCIA_INVOICING'
  --  SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 106
--=================================================================================================

--===========================================================================================================
--  USING @WS_ROW_CREATED_TIME FOR ALL INSERTS WILL ALLOW TO DELETE SPECIFIC INSERT PROCESSES/FILES.
--  IN CASE OF EMERGENCY, BREAK GLASS.
--===========================================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = DBO.GETDATE()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===========================================================================================================

--	SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_1
--==============================================================
--	DETERMINE DATE OF DATA AND UPDATE WORK TABLE
--==============================================================
IF OBJECT_ID('TEMPDB..#EGENCIA_GET_DATE') IS NOT NULL BEGIN
   DROP TABLE #EGENCIA_GET_DATE
END
CREATE TABLE #EGENCIA_GET_DATE
(DATE_STRING	VARCHAR(50)
,FTP_FILE_NAME	VARCHAR(100)
)
INSERT INTO #EGENCIA_GET_DATE
SELECT
 W1.FF_HOUR
,W1.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_1 W1
WHERE W1.FF_LOGIN_ID = 'Date:'

UPDATE WSOL_TB_IMPORTS_EGENCIA_INVOICING_1 SET
 DATA_DATE =  EGE.DATE_STRING
FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_1 I
INNER JOIN #EGENCIA_GET_DATE EGE ON EGE.FTP_FILE_NAME = I.FTP_FILE_NAME

--==============================================================
--	DETERMINE CMS GROUP FOR DATA AND UPDATE WORK TABLE
--==============================================================
IF OBJECT_ID('TEMPDB..#EGENCIA_GET_CMS_GROUP') IS NOT NULL BEGIN
   DROP TABLE #EGENCIA_GET_CMS_GROUP
END
CREATE TABLE #EGENCIA_GET_CMS_GROUP
(CMS_GROUP		VARCHAR(100)
,FTP_FILE_NAME	VARCHAR(100)
)
INSERT INTO #EGENCIA_GET_CMS_GROUP
SELECT
 W1.FF_HOUR
,W1.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_1 W1
WHERE W1.FF_LOGIN_ID = 'Agent Group:'

UPDATE WSOL_TB_IMPORTS_EGENCIA_INVOICING_1 SET
 CMS_GROUP =  EGE.CMS_GROUP
FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_1 I
INNER JOIN #EGENCIA_GET_CMS_GROUP EGE ON EGE.FTP_FILE_NAME = I.FTP_FILE_NAME

--======================================================
--	CLEANUP WORK (_1) TABLE:
--======================================================
DELETE FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_1 
WHERE FF_LOGIN_ID = 'Date:'
   OR FF_LOGIN_ID = 'Agent Group:'
   OR FF_LOGIN_ID = 'Login ID'
   OR FF_LOGIN_ID = 'Totals'
   OR FF_LOGIN_ID = ''

--	SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_1
--============================================================================================
--	POPULATE ADDITIONAL FIELDS IN WORK (_1) TABLE THAT WEREN'T IN IMPORTED FILE:
--============================================================================================
UPDATE WSOL_TB_IMPORTS_EGENCIA_INVOICING_1 SET
 DATETIME_PT				= CAST((DATA_DATE + ' ' + FF_HOUR) AS DATETIME)
,STAFFED_SECS				= ISNULL(CAST(FF_STAFFED_TIME		AS DECIMAL(10,2)),0.00)
,AVAILABLE_SECS				= ISNULL(CAST(FF_AVAIL_TIME			AS DECIMAL(10,2)),0.00)
,ACD_SECS					= ISNULL(CAST(FF_ACD_TIME			AS DECIMAL(10,2)),0.00)
,OTHER_SECS					= ISNULL(CAST(FF_OTHER_TIME			AS DECIMAL(10,2)),0.00)
,ACW_SECS					= ISNULL(CAST(FF_ACW_TIME			AS DECIMAL(10,2)),0.00)
,RING_SECS					= ISNULL(CAST(FF_AGENT_RING_TIME	AS DECIMAL(10,2)),0.00)
,AUX_0_DEFAULT_SECS			= ISNULL(CAST(FF_AUX_0_DEFAULT		AS DECIMAL(10,2)),0.00)
,AUX_1_BREAK_SECS			= ISNULL(CAST(FF_AUX_1_BREAK		AS DECIMAL(10,2)),0.00)
,AUX_2_COACHING_SECS		= ISNULL(CAST(FF_AUX_2_COACHING		AS DECIMAL(10,2)),0.00)
,AUX_3_MEETING_SECS			= ISNULL(CAST(FF_AUX_3_MEETING		AS DECIMAL(10,2)),0.00)
,AUX_4_PROJECT_SECS			= ISNULL(CAST(FF_AUX_4_PROJECT		AS DECIMAL(10,2)),0.00)
,AUX_5_EGE_TRAINING_SECS	= ISNULL(CAST(FF_AUX_5_EGE_TRAINING	AS DECIMAL(10,2)),0.00)
,AUX_6_OUTBOUND_SECS		= ISNULL(CAST(FF_AUX_6_OUTBOUND		AS DECIMAL(10,2)),0.00)
,AUX_7_EMAIL_SECS			= ISNULL(CAST(FF_AUX_7_EMAIL		AS DECIMAL(10,2)),0.00)
,AUX_8_QUEUE_WORK_SECS		= ISNULL(CAST(FF_AUX_8_QUEUE_WORK	AS DECIMAL(10,2)),0.00)
,AUX_9_SYSTEM_DOWN_SECS		= ISNULL(CAST(FF_AUX_9_SYSTEM_DOWN	AS DECIMAL(10,2)),0.00)
,AUX_10_EXCHANGE_SECS		= ISNULL(CAST(FF_AUX_10_EXCHANGE	AS DECIMAL(10,2)),0.00)
,AUX_11_PERSONAL_SECS		= ISNULL(CAST(FF_AUX_11_PERSONAL	AS DECIMAL(10,2)),0.00)
,AUX_34_SECS				= ISNULL(CAST(FF_TI_AUXTIME_34		AS DECIMAL(10,2)),0.00)
,AUX_35_SECS				= ISNULL(CAST(FF_TI_AUXTIME_35		AS DECIMAL(10,2)),0.00)
,AUX_37_SECS				= ISNULL(CAST(FF_TI_AUXTIME_37		AS DECIMAL(10,2)),0.00)
,AUX_40_SECS				= ISNULL(CAST(FF_TI_AUXTIME_40		AS DECIMAL(10,2)),0.00)
,TOTAL_AUX_SECS				= ISNULL(CAST(FF_AUX_TIME			AS DECIMAL(10,2)),0.00)
,TENANT_KEY					= @TENANT_KEY

--============================================================================================
-- CORRECT DURATIONS FOR DAYLIGHT SAVINGS TIME ***** ONLY WHEN APPLICABLE *****
--============================================================================================
/*UPDATE WSOL_TB_IMPORTS_EGENCIA_INVOICING_1 SET
 STAFFED_SECS				= STAFFED_SECS				/ 2.00
,AVAILABLE_SECS				= AVAILABLE_SECS			/ 2.00
,ACD_SECS					= ACD_SECS					/ 2.00
,OTHER_SECS					= OTHER_SECS				/ 2.00
,ACW_SECS					= ACW_SECS					/ 2.00
,RING_SECS					= RING_SECS					/ 2.00
,AUX_0_DEFAULT_SECS			= AUX_0_DEFAULT_SECS		/ 2.00
,AUX_1_BREAK_SECS			= AUX_1_BREAK_SECS			/ 2.00
,AUX_2_COACHING_SECS		= AUX_2_COACHING_SECS		/ 2.00
,AUX_3_MEETING_SECS			= AUX_3_MEETING_SECS		/ 2.00
,AUX_4_PROJECT_SECS			= AUX_4_PROJECT_SECS		/ 2.00
,AUX_5_EGE_TRAINING_SECS	= AUX_5_EGE_TRAINING_SECS	/ 2.00
,AUX_6_OUTBOUND_SECS		= AUX_6_OUTBOUND_SECS		/ 2.00
,AUX_7_EMAIL_SECS			= AUX_7_EMAIL_SECS			/ 2.00
,AUX_8_QUEUE_WORK_SECS		= AUX_8_QUEUE_WORK_SECS		/ 2.00
,AUX_9_SYSTEM_DOWN_SECS		= AUX_9_SYSTEM_DOWN_SECS	/ 2.00
,AUX_10_EXCHANGE_SECS		= AUX_10_EXCHANGE_SECS		/ 2.00
,AUX_11_PERSONAL_SECS		= AUX_11_PERSONAL_SECS		/ 2.00
,AUX_34_SECS				= AUX_34_SECS				/ 2.00
,AUX_35_SECS				= AUX_35_SECS				/ 2.00
,AUX_37_SECS				= AUX_37_SECS				/ 2.00
,AUX_40_SECS				= AUX_40_SECS				/ 2.00
,TOTAL_AUX_SECS				= TOTAL_AUX_SECS			/ 2.00
WHERE FF_HOUR IN ('1:00','1:30')
*/

--===================================================================================
--	POPULATE ADDITIONAL FIELDS IN WORK (_1) TABLE THAT WEREN'T IN IMPORTED FILE:
--===================================================================================
UPDATE WSOL_TB_IMPORTS_EGENCIA_INVOICING_1 SET
 DATETIME_CT	= DATEADD(HH,+2,DATETIME_PT)
,[DATETIME]		= DATETIME_PT
,HOUR_INTERVAL	= DATEPART(HH,DATETIME_PT)
,OUTBOUND_SECS	= AUX_6_OUTBOUND_SECS + AUX_35_SECS
,EMAIL_SECS		= AUX_7_EMAIL_SECS + AUX_34_SECS
,PROJECT_SECS	= AUX_4_PROJECT_SECS + AUX_37_SECS
,MEETING_SECS	= AUX_3_MEETING_SECS + AUX_40_SECS

--================================================================================================================================================================================================
--	POPULATE INITIAL INVOICE VALUES
--================================================================================================================================================================================================
UPDATE WSOL_TB_IMPORTS_EGENCIA_INVOICING_1 SET
 PROD_BILLING_SECS				= AVAILABLE_SECS + ACD_SECS + OTHER_SECS + ACW_SECS + AUX_0_DEFAULT_SECS + OUTBOUND_SECS + EMAIL_SECS + AUX_10_EXCHANGE_SECS + RING_SECS
,AUTHORIZED_CSAT_SAT_KEY_SECS	= AVAILABLE_SECS + ACD_SECS + OTHER_SECS + ACW_SECS + AUX_0_DEFAULT_SECS + OUTBOUND_SECS + EMAIL_SECS + AUX_10_EXCHANGE_SECS
,AUTHORIZED_RESOURCE_SECS		= AVAILABLE_SECS + ACD_SECS + OTHER_SECS + ACW_SECS + AUX_0_DEFAULT_SECS + OUTBOUND_SECS + EMAIL_SECS + AUX_10_EXCHANGE_SECS + PROJECT_SECS + MEETING_SECS 

--===================================================================================================
--	UPDATE DATETIME KEY
--===================================================================================================
UPDATE WSOL_TB_IMPORTS_EGENCIA_INVOICING_1 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM		WSOL_TB_IMPORTS_EGENCIA_INVOICING_1	I
INNER JOIN	DATE_TIME							DT	ON DT.CAL_DATE = I.DATETIME_PT

--===================================================================================================
--	SET WEEKEND FLAG (SAT 08:00 - SUN 23:59 CT) (SAT 06:00 - SUN 21:59 PT)
--===================================================================================================
SET DATEFIRST 1  -- = Monday  

UPDATE WSOL_TB_IMPORTS_EGENCIA_INVOICING_1 SET
 WEEKEND = CASE WHEN ( DATEPART(DW, DATETIME_PT) = 6 AND CAST(HOUR_INTERVAL AS INT) > 5  ) THEN 'Y'	-- > SAT 05:00 
				WHEN ( DATEPART(DW, DATETIME_PT) = 7 AND CAST(HOUR_INTERVAL AS INT) < 22 ) THEN 'Y'	-- < SUN 22:00
				ELSE 'N' END

--	SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_1

--===============================================
--HANDLE INVALID DATE/TIME RECORDS:
--===============================================
INSERT INTO WSOL_TB_IMPORTS_EGENCIA_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_LOGIN_ID
,FF_HOUR
,FF_STAFFED_TIME
,FF_AVAIL_TIME
,FF_ACD_TIME
,FF_OTHER_TIME
,FF_ACW_TIME
,FF_AGENT_RING_TIME
,FF_AUX_TIME
,FF_AUX_0_DEFAULT
,FF_AUX_1_BREAK
,FF_AUX_2_COACHING
,FF_AUX_3_MEETING
,FF_AUX_4_PROJECT
,FF_AUX_5_EGE_TRAINING
,FF_AUX_6_OUTBOUND
,FF_AUX_7_EMAIL
,FF_AUX_8_QUEUE_WORK
,FF_AUX_9_SYSTEM_DOWN
,FF_AUX_10_EXCHANGE
,FF_AUX_11_PERSONAL
,FF_TI_AUXTIME_12
,FF_TI_AUXTIME_13
,FF_TI_AUXTIME_14
,FF_TI_AUXTIME_15
,FF_TI_AUXTIME_16
,FF_TI_AUXTIME_17
,FF_TI_AUXTIME_18
,FF_TI_AUXTIME_19
,FF_TI_AUXTIME_20
,FF_TI_AUXTIME_21
,FF_TI_AUXTIME_22
,FF_TI_AUXTIME_23
,FF_TI_AUXTIME_24
,FF_TI_AUXTIME_25
,FF_TI_AUXTIME_26
,FF_TI_AUXTIME_27
,FF_TI_AUXTIME_28
,FF_TI_AUXTIME_29
,FF_TI_AUXTIME_30
,FF_TI_AUXTIME_31
,FF_TI_AUXTIME_32
,FF_TI_AUXTIME_33
,FF_TI_AUXTIME_34
,FF_TI_AUXTIME_35
,FF_TI_AUXTIME_36
,FF_TI_AUXTIME_37
,FF_TI_AUXTIME_38
,FF_TI_AUXTIME_39
,FF_TI_AUXTIME_40
,FF_TI_AUXTIME_41
,FF_TI_AUXTIME_42
,FF_TI_AUXTIME_43
,FF_TI_AUXTIME_44
,FF_TI_AUXTIME_45
,FF_TI_AUXTIME_46
,FF_TI_AUXTIME_47
,FF_TI_AUXTIME_48
,FF_TI_AUXTIME_49
,FF_TI_AUXTIME_50
,FF_TI_AUXTIME_51
,FF_TI_AUXTIME_52
,FF_TI_AUXTIME_53
,FF_TI_AUXTIME_54
,FF_TI_AUXTIME_55
,FF_TI_AUXTIME_56
,FF_TI_AUXTIME_57
,FF_TI_AUXTIME_58
,FF_TI_AUXTIME_59
,FF_TI_AUXTIME_60
,FF_TI_AUXTIME_61
,FF_TI_AUXTIME_62
,FF_TI_AUXTIME_63
,FF_TI_AUXTIME_64
,FF_TI_AUXTIME_65
,FF_TI_AUXTIME_66
,FF_TI_AUXTIME_67
,FF_TI_AUXTIME_68
,FF_TI_AUXTIME_69
,FF_TI_AUXTIME_70
,FF_TI_AUXTIME_71
,FF_TI_AUXTIME_72
,FF_TI_AUXTIME_73
,FF_TI_AUXTIME_74
,FF_TI_AUXTIME_75
,FF_TI_AUXTIME_76
,FF_TI_AUXTIME_77
,FF_TI_AUXTIME_78
,FF_TI_AUXTIME_79
,FF_TI_AUXTIME_80
,FF_TI_AUXTIME_81
,FF_TI_AUXTIME_82
,FF_TI_AUXTIME_83
,FF_TI_AUXTIME_84
,FF_TI_AUXTIME_85
,FF_TI_AUXTIME_86
,FF_TI_AUXTIME_87
,FF_TI_AUXTIME_88
,FF_TI_AUXTIME_89
,FF_TI_AUXTIME_90
,FF_TI_AUXTIME_91
,FF_TI_AUXTIME_92
,FF_TI_AUXTIME_93
,FF_TI_AUXTIME_94
,FF_TI_AUXTIME_95
,FF_TI_AUXTIME_96
,FF_TI_AUXTIME_97
,FF_TI_AUXTIME_98
,FF_TI_AUXTIME_99
,CMS_GROUP
,DATA_DATE
,DATETIME_CT
,DATETIME_PT
,[DATETIME]
,HOUR_INTERVAL
,RESOURCE_NAME
,STAFFED_SECS
,AVAILABLE_SECS
,ACD_SECS
,OTHER_SECS
,ACW_SECS
,RING_SECS
,AUX_0_DEFAULT_SECS
,AUX_1_BREAK_SECS
,AUX_2_COACHING_SECS
,AUX_3_MEETING_SECS
,AUX_4_PROJECT_SECS
,AUX_5_EGE_TRAINING_SECS
,AUX_6_OUTBOUND_SECS
,AUX_7_EMAIL_SECS
,AUX_8_QUEUE_WORK_SECS
,AUX_9_SYSTEM_DOWN_SECS
,AUX_10_EXCHANGE_SECS
,AUX_11_PERSONAL_SECS
,AUX_34_SECS
,AUX_35_SECS
,AUX_37_SECS
,AUX_40_SECS
,OUTBOUND_SECS
,EMAIL_SECS
,PROJECT_SECS
,MEETING_SECS
,TOTAL_AUX_SECS
,PROD_BILLING_SECS
,AUTHORIZED_CSAT_SAT_KEY_SECS
,AUTHORIZED_RESOURCE_SECS
,LINE_OF_BUSINESS
,WEEKEND
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES
,[EMAIL]
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 'DTM'					--BAD_IMPORTS_CODE		--'Invalid Datetime'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME	--WS_ROW_CREATED_TIME
,W1.FF_LOGIN_ID
,W1.FF_HOUR
,W1.FF_STAFFED_TIME
,W1.FF_AVAIL_TIME
,W1.FF_ACD_TIME
,W1.FF_OTHER_TIME
,W1.FF_ACW_TIME
,W1.FF_AGENT_RING_TIME
,W1.FF_AUX_TIME
,W1.FF_AUX_0_DEFAULT
,W1.FF_AUX_1_BREAK
,W1.FF_AUX_2_COACHING
,W1.FF_AUX_3_MEETING
,W1.FF_AUX_4_PROJECT
,W1.FF_AUX_5_EGE_TRAINING
,W1.FF_AUX_6_OUTBOUND
,W1.FF_AUX_7_EMAIL
,W1.FF_AUX_8_QUEUE_WORK
,W1.FF_AUX_9_SYSTEM_DOWN
,W1.FF_AUX_10_EXCHANGE
,W1.FF_AUX_11_PERSONAL
,W1.FF_TI_AUXTIME_12
,W1.FF_TI_AUXTIME_13
,W1.FF_TI_AUXTIME_14
,W1.FF_TI_AUXTIME_15
,W1.FF_TI_AUXTIME_16
,W1.FF_TI_AUXTIME_17
,W1.FF_TI_AUXTIME_18
,W1.FF_TI_AUXTIME_19
,W1.FF_TI_AUXTIME_20
,W1.FF_TI_AUXTIME_21
,W1.FF_TI_AUXTIME_22
,W1.FF_TI_AUXTIME_23
,W1.FF_TI_AUXTIME_24
,W1.FF_TI_AUXTIME_25
,W1.FF_TI_AUXTIME_26
,W1.FF_TI_AUXTIME_27
,W1.FF_TI_AUXTIME_28
,W1.FF_TI_AUXTIME_29
,W1.FF_TI_AUXTIME_30
,W1.FF_TI_AUXTIME_31
,W1.FF_TI_AUXTIME_32
,W1.FF_TI_AUXTIME_33
,W1.FF_TI_AUXTIME_34
,W1.FF_TI_AUXTIME_35
,W1.FF_TI_AUXTIME_36
,W1.FF_TI_AUXTIME_37
,W1.FF_TI_AUXTIME_38
,W1.FF_TI_AUXTIME_39
,W1.FF_TI_AUXTIME_40
,W1.FF_TI_AUXTIME_41
,W1.FF_TI_AUXTIME_42
,W1.FF_TI_AUXTIME_43
,W1.FF_TI_AUXTIME_44
,W1.FF_TI_AUXTIME_45
,W1.FF_TI_AUXTIME_46
,W1.FF_TI_AUXTIME_47
,W1.FF_TI_AUXTIME_48
,W1.FF_TI_AUXTIME_49
,W1.FF_TI_AUXTIME_50
,W1.FF_TI_AUXTIME_51
,W1.FF_TI_AUXTIME_52
,W1.FF_TI_AUXTIME_53
,W1.FF_TI_AUXTIME_54
,W1.FF_TI_AUXTIME_55
,W1.FF_TI_AUXTIME_56
,W1.FF_TI_AUXTIME_57
,W1.FF_TI_AUXTIME_58
,W1.FF_TI_AUXTIME_59
,W1.FF_TI_AUXTIME_60
,W1.FF_TI_AUXTIME_61
,W1.FF_TI_AUXTIME_62
,W1.FF_TI_AUXTIME_63
,W1.FF_TI_AUXTIME_64
,W1.FF_TI_AUXTIME_65
,W1.FF_TI_AUXTIME_66
,W1.FF_TI_AUXTIME_67
,W1.FF_TI_AUXTIME_68
,W1.FF_TI_AUXTIME_69
,W1.FF_TI_AUXTIME_70
,W1.FF_TI_AUXTIME_71
,W1.FF_TI_AUXTIME_72
,W1.FF_TI_AUXTIME_73
,W1.FF_TI_AUXTIME_74
,W1.FF_TI_AUXTIME_75
,W1.FF_TI_AUXTIME_76
,W1.FF_TI_AUXTIME_77
,W1.FF_TI_AUXTIME_78
,W1.FF_TI_AUXTIME_79
,W1.FF_TI_AUXTIME_80
,W1.FF_TI_AUXTIME_81
,W1.FF_TI_AUXTIME_82
,W1.FF_TI_AUXTIME_83
,W1.FF_TI_AUXTIME_84
,W1.FF_TI_AUXTIME_85
,W1.FF_TI_AUXTIME_86
,W1.FF_TI_AUXTIME_87
,W1.FF_TI_AUXTIME_88
,W1.FF_TI_AUXTIME_89
,W1.FF_TI_AUXTIME_90
,W1.FF_TI_AUXTIME_91
,W1.FF_TI_AUXTIME_92
,W1.FF_TI_AUXTIME_93
,W1.FF_TI_AUXTIME_94
,W1.FF_TI_AUXTIME_95
,W1.FF_TI_AUXTIME_96
,W1.FF_TI_AUXTIME_97
,W1.FF_TI_AUXTIME_98
,W1.FF_TI_AUXTIME_99
,W1.CMS_GROUP
,W1.DATA_DATE
,W1.DATETIME_CT
,W1.DATETIME_PT
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.RESOURCE_NAME
,W1.STAFFED_SECS
,W1.AVAILABLE_SECS
,W1.ACD_SECS
,W1.OTHER_SECS
,W1.ACW_SECS
,W1.RING_SECS
,W1.AUX_0_DEFAULT_SECS
,W1.AUX_1_BREAK_SECS
,W1.AUX_2_COACHING_SECS
,W1.AUX_3_MEETING_SECS
,W1.AUX_4_PROJECT_SECS
,W1.AUX_5_EGE_TRAINING_SECS
,W1.AUX_6_OUTBOUND_SECS
,W1.AUX_7_EMAIL_SECS
,W1.AUX_8_QUEUE_WORK_SECS
,W1.AUX_9_SYSTEM_DOWN_SECS
,W1.AUX_10_EXCHANGE_SECS
,W1.AUX_11_PERSONAL_SECS
,W1.AUX_34_SECS
,W1.AUX_35_SECS
,W1.AUX_37_SECS
,W1.AUX_40_SECS
,W1.OUTBOUND_SECS
,W1.EMAIL_SECS
,W1.PROJECT_SECS
,W1.MEETING_SECS
,W1.TOTAL_AUX_SECS
,W1.PROD_BILLING_SECS
,W1.AUTHORIZED_CSAT_SAT_KEY_SECS
,W1.AUTHORIZED_RESOURCE_SECS
,W1.LINE_OF_BUSINESS
,W1.WEEKEND
,W1.CPROD
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_MINUTES
,W1.[EMAIL]
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
--SELECT *
FROM           WSOL_TB_IMPORTS_EGENCIA_INVOICING_1   W1
WHERE  ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) = 0

--======================================================================
--DELETE INVALID DATE/TIME RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_1
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================

--===========================================================================================================
--HANDLE DUPLICATES:
--===========================================================================================================
INSERT INTO WSOL_TB_IMPORTS_EGENCIA_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_LOGIN_ID
,FF_HOUR
,FF_STAFFED_TIME
,FF_AVAIL_TIME
,FF_ACD_TIME
,FF_OTHER_TIME
,FF_ACW_TIME
,FF_AGENT_RING_TIME
,FF_AUX_TIME
,FF_AUX_0_DEFAULT
,FF_AUX_1_BREAK
,FF_AUX_2_COACHING
,FF_AUX_3_MEETING
,FF_AUX_4_PROJECT
,FF_AUX_5_EGE_TRAINING
,FF_AUX_6_OUTBOUND
,FF_AUX_7_EMAIL
,FF_AUX_8_QUEUE_WORK
,FF_AUX_9_SYSTEM_DOWN
,FF_AUX_10_EXCHANGE
,FF_AUX_11_PERSONAL
,FF_TI_AUXTIME_12
,FF_TI_AUXTIME_13
,FF_TI_AUXTIME_14
,FF_TI_AUXTIME_15
,FF_TI_AUXTIME_16
,FF_TI_AUXTIME_17
,FF_TI_AUXTIME_18
,FF_TI_AUXTIME_19
,FF_TI_AUXTIME_20
,FF_TI_AUXTIME_21
,FF_TI_AUXTIME_22
,FF_TI_AUXTIME_23
,FF_TI_AUXTIME_24
,FF_TI_AUXTIME_25
,FF_TI_AUXTIME_26
,FF_TI_AUXTIME_27
,FF_TI_AUXTIME_28
,FF_TI_AUXTIME_29
,FF_TI_AUXTIME_30
,FF_TI_AUXTIME_31
,FF_TI_AUXTIME_32
,FF_TI_AUXTIME_33
,FF_TI_AUXTIME_34
,FF_TI_AUXTIME_35
,FF_TI_AUXTIME_36
,FF_TI_AUXTIME_37
,FF_TI_AUXTIME_38
,FF_TI_AUXTIME_39
,FF_TI_AUXTIME_40
,FF_TI_AUXTIME_41
,FF_TI_AUXTIME_42
,FF_TI_AUXTIME_43
,FF_TI_AUXTIME_44
,FF_TI_AUXTIME_45
,FF_TI_AUXTIME_46
,FF_TI_AUXTIME_47
,FF_TI_AUXTIME_48
,FF_TI_AUXTIME_49
,FF_TI_AUXTIME_50
,FF_TI_AUXTIME_51
,FF_TI_AUXTIME_52
,FF_TI_AUXTIME_53
,FF_TI_AUXTIME_54
,FF_TI_AUXTIME_55
,FF_TI_AUXTIME_56
,FF_TI_AUXTIME_57
,FF_TI_AUXTIME_58
,FF_TI_AUXTIME_59
,FF_TI_AUXTIME_60
,FF_TI_AUXTIME_61
,FF_TI_AUXTIME_62
,FF_TI_AUXTIME_63
,FF_TI_AUXTIME_64
,FF_TI_AUXTIME_65
,FF_TI_AUXTIME_66
,FF_TI_AUXTIME_67
,FF_TI_AUXTIME_68
,FF_TI_AUXTIME_69
,FF_TI_AUXTIME_70
,FF_TI_AUXTIME_71
,FF_TI_AUXTIME_72
,FF_TI_AUXTIME_73
,FF_TI_AUXTIME_74
,FF_TI_AUXTIME_75
,FF_TI_AUXTIME_76
,FF_TI_AUXTIME_77
,FF_TI_AUXTIME_78
,FF_TI_AUXTIME_79
,FF_TI_AUXTIME_80
,FF_TI_AUXTIME_81
,FF_TI_AUXTIME_82
,FF_TI_AUXTIME_83
,FF_TI_AUXTIME_84
,FF_TI_AUXTIME_85
,FF_TI_AUXTIME_86
,FF_TI_AUXTIME_87
,FF_TI_AUXTIME_88
,FF_TI_AUXTIME_89
,FF_TI_AUXTIME_90
,FF_TI_AUXTIME_91
,FF_TI_AUXTIME_92
,FF_TI_AUXTIME_93
,FF_TI_AUXTIME_94
,FF_TI_AUXTIME_95
,FF_TI_AUXTIME_96
,FF_TI_AUXTIME_97
,FF_TI_AUXTIME_98
,FF_TI_AUXTIME_99
,CMS_GROUP
,DATA_DATE
,DATETIME_CT
,DATETIME_PT
,[DATETIME]
,HOUR_INTERVAL
,RESOURCE_NAME
,STAFFED_SECS
,AVAILABLE_SECS
,ACD_SECS
,OTHER_SECS
,ACW_SECS
,RING_SECS
,AUX_0_DEFAULT_SECS
,AUX_1_BREAK_SECS
,AUX_2_COACHING_SECS
,AUX_3_MEETING_SECS
,AUX_4_PROJECT_SECS
,AUX_5_EGE_TRAINING_SECS
,AUX_6_OUTBOUND_SECS
,AUX_7_EMAIL_SECS
,AUX_8_QUEUE_WORK_SECS
,AUX_9_SYSTEM_DOWN_SECS
,AUX_10_EXCHANGE_SECS
,AUX_11_PERSONAL_SECS
,AUX_34_SECS
,AUX_35_SECS
,AUX_37_SECS
,AUX_40_SECS
,OUTBOUND_SECS
,EMAIL_SECS
,PROJECT_SECS
,MEETING_SECS
,TOTAL_AUX_SECS
,PROD_BILLING_SECS
,AUTHORIZED_CSAT_SAT_KEY_SECS
,AUTHORIZED_RESOURCE_SECS
,LINE_OF_BUSINESS
,WEEKEND
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES
,[EMAIL]
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 'DUP'					--BAD_IMPORTS_CODE		--'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME	--WS_ROW_CREATED_TIME
,W1.FF_LOGIN_ID
,W1.FF_HOUR
,W1.FF_STAFFED_TIME
,W1.FF_AVAIL_TIME
,W1.FF_ACD_TIME
,W1.FF_OTHER_TIME
,W1.FF_ACW_TIME
,W1.FF_AGENT_RING_TIME
,W1.FF_AUX_TIME
,W1.FF_AUX_0_DEFAULT
,W1.FF_AUX_1_BREAK
,W1.FF_AUX_2_COACHING
,W1.FF_AUX_3_MEETING
,W1.FF_AUX_4_PROJECT
,W1.FF_AUX_5_EGE_TRAINING
,W1.FF_AUX_6_OUTBOUND
,W1.FF_AUX_7_EMAIL
,W1.FF_AUX_8_QUEUE_WORK
,W1.FF_AUX_9_SYSTEM_DOWN
,W1.FF_AUX_10_EXCHANGE
,W1.FF_AUX_11_PERSONAL
,W1.FF_TI_AUXTIME_12
,W1.FF_TI_AUXTIME_13
,W1.FF_TI_AUXTIME_14
,W1.FF_TI_AUXTIME_15
,W1.FF_TI_AUXTIME_16
,W1.FF_TI_AUXTIME_17
,W1.FF_TI_AUXTIME_18
,W1.FF_TI_AUXTIME_19
,W1.FF_TI_AUXTIME_20
,W1.FF_TI_AUXTIME_21
,W1.FF_TI_AUXTIME_22
,W1.FF_TI_AUXTIME_23
,W1.FF_TI_AUXTIME_24
,W1.FF_TI_AUXTIME_25
,W1.FF_TI_AUXTIME_26
,W1.FF_TI_AUXTIME_27
,W1.FF_TI_AUXTIME_28
,W1.FF_TI_AUXTIME_29
,W1.FF_TI_AUXTIME_30
,W1.FF_TI_AUXTIME_31
,W1.FF_TI_AUXTIME_32
,W1.FF_TI_AUXTIME_33
,W1.FF_TI_AUXTIME_34
,W1.FF_TI_AUXTIME_35
,W1.FF_TI_AUXTIME_36
,W1.FF_TI_AUXTIME_37
,W1.FF_TI_AUXTIME_38
,W1.FF_TI_AUXTIME_39
,W1.FF_TI_AUXTIME_40
,W1.FF_TI_AUXTIME_41
,W1.FF_TI_AUXTIME_42
,W1.FF_TI_AUXTIME_43
,W1.FF_TI_AUXTIME_44
,W1.FF_TI_AUXTIME_45
,W1.FF_TI_AUXTIME_46
,W1.FF_TI_AUXTIME_47
,W1.FF_TI_AUXTIME_48
,W1.FF_TI_AUXTIME_49
,W1.FF_TI_AUXTIME_50
,W1.FF_TI_AUXTIME_51
,W1.FF_TI_AUXTIME_52
,W1.FF_TI_AUXTIME_53
,W1.FF_TI_AUXTIME_54
,W1.FF_TI_AUXTIME_55
,W1.FF_TI_AUXTIME_56
,W1.FF_TI_AUXTIME_57
,W1.FF_TI_AUXTIME_58
,W1.FF_TI_AUXTIME_59
,W1.FF_TI_AUXTIME_60
,W1.FF_TI_AUXTIME_61
,W1.FF_TI_AUXTIME_62
,W1.FF_TI_AUXTIME_63
,W1.FF_TI_AUXTIME_64
,W1.FF_TI_AUXTIME_65
,W1.FF_TI_AUXTIME_66
,W1.FF_TI_AUXTIME_67
,W1.FF_TI_AUXTIME_68
,W1.FF_TI_AUXTIME_69
,W1.FF_TI_AUXTIME_70
,W1.FF_TI_AUXTIME_71
,W1.FF_TI_AUXTIME_72
,W1.FF_TI_AUXTIME_73
,W1.FF_TI_AUXTIME_74
,W1.FF_TI_AUXTIME_75
,W1.FF_TI_AUXTIME_76
,W1.FF_TI_AUXTIME_77
,W1.FF_TI_AUXTIME_78
,W1.FF_TI_AUXTIME_79
,W1.FF_TI_AUXTIME_80
,W1.FF_TI_AUXTIME_81
,W1.FF_TI_AUXTIME_82
,W1.FF_TI_AUXTIME_83
,W1.FF_TI_AUXTIME_84
,W1.FF_TI_AUXTIME_85
,W1.FF_TI_AUXTIME_86
,W1.FF_TI_AUXTIME_87
,W1.FF_TI_AUXTIME_88
,W1.FF_TI_AUXTIME_89
,W1.FF_TI_AUXTIME_90
,W1.FF_TI_AUXTIME_91
,W1.FF_TI_AUXTIME_92
,W1.FF_TI_AUXTIME_93
,W1.FF_TI_AUXTIME_94
,W1.FF_TI_AUXTIME_95
,W1.FF_TI_AUXTIME_96
,W1.FF_TI_AUXTIME_97
,W1.FF_TI_AUXTIME_98
,W1.FF_TI_AUXTIME_99
,W1.CMS_GROUP
,W1.DATA_DATE
,W1.DATETIME_CT
,W1.DATETIME_PT
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.RESOURCE_NAME
,W1.STAFFED_SECS
,W1.AVAILABLE_SECS
,W1.ACD_SECS
,W1.OTHER_SECS
,W1.ACW_SECS
,W1.RING_SECS
,W1.AUX_0_DEFAULT_SECS
,W1.AUX_1_BREAK_SECS
,W1.AUX_2_COACHING_SECS
,W1.AUX_3_MEETING_SECS
,W1.AUX_4_PROJECT_SECS
,W1.AUX_5_EGE_TRAINING_SECS
,W1.AUX_6_OUTBOUND_SECS
,W1.AUX_7_EMAIL_SECS
,W1.AUX_8_QUEUE_WORK_SECS
,W1.AUX_9_SYSTEM_DOWN_SECS
,W1.AUX_10_EXCHANGE_SECS
,W1.AUX_11_PERSONAL_SECS
,W1.AUX_34_SECS
,W1.AUX_35_SECS
,W1.AUX_37_SECS
,W1.AUX_40_SECS
,W1.OUTBOUND_SECS
,W1.EMAIL_SECS
,W1.PROJECT_SECS
,W1.MEETING_SECS
,W1.TOTAL_AUX_SECS
,W1.PROD_BILLING_SECS
,W1.AUTHORIZED_CSAT_SAT_KEY_SECS
,W1.AUTHORIZED_RESOURCE_SECS
,W1.LINE_OF_BUSINESS
,W1.WEEKEND
,W1.CPROD
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_MINUTES
,W1.[EMAIL]
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
FROM
(	SELECT
	 [DATETIME]
	,FF_LOGIN_ID
	,ROW_NUMBER() over (partition by [DATETIME], FF_LOGIN_ID
                            order by [DATETIME], FF_LOGIN_ID, STAFFED_SECS DESC) ROWNO
	FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_1
) TNM
LEFT JOIN      WSOL_TB_IMPORTS_EGENCIA_INVOICING_1	W1   ON W1.[DATETIME]		= TNM.[DATETIME]
														AND W1.FF_LOGIN_ID		= TNM.FF_LOGIN_ID
WHERE TNM.ROWNO > 1

--===========================================================================================================
--DELETE DUPLICATES:
--===========================================================================================================
DELETE FROM TNM
FROM
(	SELECT
	 [DATETIME]
	,FF_LOGIN_ID
	,ROW_NUMBER() over (partition by [DATETIME], FF_LOGIN_ID
                            order by [DATETIME], FF_LOGIN_ID, STAFFED_SECS DESC) ROWNO
	FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_1
) TNM
WHERE TNM.ROWNO > 1
--===========================================================================================================

--	SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_1
--	SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING
--===========================================================================================================
--	UPDATE FIELDS FROM MAPPING DATA AND ADDITIONAL INVOICE FIELDS
--===========================================================================================================
UPDATE WSOL_TB_IMPORTS_EGENCIA_INVOICING_1 SET
  EMAIL				= ISNULL(IAM.EMAIL_ADDRESS,'')
 ,LINE_OF_BUSINESS	= ISNULL(IAM.SKILL,'')
 ,ID_EXT			= CASE WHEN IAM.SKILL = 'Resource'	THEN 'ERA'
						   WHEN IAM.SKILL = 'C-Select'	THEN 'ECS'
						   WHEN IAM.SKILL = 'KEY'		THEN 'EKA'
						   WHEN IAM.SKILL = 'SAT'		THEN 'ESA'
						   WHEN IAM.SKILL = 'SME'		THEN 'ESM'
						   ELSE '' END
 ,RESOURCE_NAME		= ISNULL(IAM.RESOURCE_NAME,'')
 FROM            WSOL_TB_IMPORTS_EGENCIA_INVOICING_1			I
 LEFT JOIN       WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING		IAM  ON IAM.INVOICE_MAP_KEY = I.FF_LOGIN_ID

--	SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_AIA_AGENT_MAPPING

--	SELECT DISTINCT(ID_EXT) FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_1

--===================================================================================================================================================
--SET ADDITIONAL INVOICE FIELDS
--===================================================================================================================================================
UPDATE WSOL_TB_IMPORTS_EGENCIA_INVOICING_1 SET	-- SELECT
  AIR_DAY_TYPE = CASE WHEN IG.HAS_HOLIDAYS = 'Y' AND
						 (    ISNULL(IH.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) OR
						   ( ISNULL(IHA.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) AND ISNULL(IHA.ID_EXT,'') <> '' )
						 )
					  THEN 'H' ELSE 'S' END  --AS AIR_DAY_TYPE  --H=Holiday  --S=Standard
 FROM            WSOL_TB_IMPORTS_EGENCIA_INVOICING_1				I
 INNER JOIN      DATE_TIME											DT	ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY
 LEFT JOIN       WSOL_TB_IMPORTS_EGENCIA_SD_INVOICE_GROUPS			IG	ON IG.ID_EXT              = I.ID_EXT
 LEFT JOIN       WSOL_TB_IMPORTS_EGENCIA_SD_INVOICE_HOLIDAYS		IH	ON IH.HOLIDAY_DATE        = CAST(DT.CAL_DATE_STRING AS DATETIME)
 LEFT JOIN       WSOL_TB_IMPORTS_EGENCIA_SD_INVOICE_HOLIDAYS_ADDL	IHA ON IHA.HOLIDAY_DATE       = CAST(DT.CAL_DATE_STRING AS DATETIME)
																	   AND IHA.ID_EXT             = I.ID_EXT

UPDATE WSOL_TB_IMPORTS_EGENCIA_INVOICING_1 SET
  AIR_ACW_FONT_COLOR             = 'Black'
 ,MIN_GUARANTEE_MINUTES          = ISNULL(IG.MIN_GUARANTEE_MINUTES,0)        --varies between scheduler acl names.
 ,MIN_GUARANTEE_TYPE             = ISNULL(IG.MIN_GUARANTEE_TYPE,'')          --varies between scheduler acl names.
 ,AUTHORIZED_TO_INVOICE_TYPE     = ISNULL(IG.AUTHORIZED_TO_INVOICE_TYPE,'')  --varies between scheduler acl names.

 ,HAS_HOLIDAYS    = IG.HAS_HOLIDAYS
 ,INCLUDE_IN_CAS  = IG.INCLUDE_IN_CAS
 ,READY_FOR_XML   = IG.READY_FOR_XML
 ,SHOW_ID_EXTS    = IG.SHOW_ID_EXTS
 FROM            WSOL_TB_IMPORTS_EGENCIA_INVOICING_1		I
 LEFT JOIN       WSOL_TB_IMPORTS_EGENCIA_SD_INVOICE_GROUPS	IG  ON IG.ID_EXT    = I.ID_EXT
												
--	SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_1

/*
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_1 SET
   INVOICE_ID         = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
  ,SCHEDULER_ACL_NAME = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
 FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_1				AIA 
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_AIA_STATIC_DEFAULTS	AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
 */

--======================================================================
--	CHECK FOR BAD DATA FOUND IN IMPORT .CSV FILES:
--======================================================================
--	SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 106
--======================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--Check #1:  ==============================================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_1)
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + 'ERROR!  File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END

--Check #2:  ==============================================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_1 WHERE STAFFED_SECS > 1800)
	IF @RCD_CNT > 1 BEGIN
		SET @MSG1 = @MSG1 + 'ERROR! Values Greater than 1800.  File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
(
 TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY			--TENANT_KEY
	,'EGENCIA_INVOICING'	--SUB_GROUP_NAME
	,@MSG1					--ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	--MUST RETURN AT LEAST ONE RECORD TO SSIS
INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY			--TENANT_KEY
	,'EGENCIA_INVOICING'	--SUB_GROUP_NAME
	,''						--ERROR_MSG
END

--===============================================
-- CALCULATE PAYMENT VALUES
--===============================================
-- SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_1
UPDATE WSOL_TB_IMPORTS_EGENCIA_INVOICING_1 SET
 CPROD = CASE WHEN LINE_OF_BUSINESS IN ('Resource','SME')		THEN AUTHORIZED_RESOURCE_SECS
			  WHEN LINE_OF_BUSINESS IN ('C-Select','SAT','KEY') THEN AUTHORIZED_CSAT_SAT_KEY_SECS
			  ELSE 0.00 END

UPDATE WSOL_TB_IMPORTS_EGENCIA_INVOICING_1 SET
 MINIMUM_GUARANTEE  = CPROD
,AUTHORIZED_MINUTES	= CPROD

--SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_SA_WA
--=============================================
--UPDATE PERMANENT SA/WA TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_EGENCIA_SA_WA SET
-- FF_LOGIN_ID						= W1.FF_LOGIN_ID
 FF_HOUR							= W1.FF_HOUR
,FF_STAFFED_TIME					= W1.FF_STAFFED_TIME
,FF_AVAIL_TIME						= W1.FF_AVAIL_TIME
,FF_ACD_TIME						= W1.FF_ACD_TIME
,FF_OTHER_TIME						= W1.FF_OTHER_TIME
,FF_ACW_TIME						= W1.FF_ACW_TIME
,FF_AGENT_RING_TIME					= W1.FF_AGENT_RING_TIME
,FF_AUX_TIME						= W1.FF_AUX_TIME
,FF_AUX_0_DEFAULT					= W1.FF_AUX_0_DEFAULT
,FF_AUX_1_BREAK						= W1.FF_AUX_1_BREAK
,FF_AUX_2_COACHING					= W1.FF_AUX_2_COACHING
,FF_AUX_3_MEETING					= W1.FF_AUX_3_MEETING
,FF_AUX_4_PROJECT					= W1.FF_AUX_4_PROJECT
,FF_AUX_5_EGE_TRAINING				= W1.FF_AUX_5_EGE_TRAINING
,FF_AUX_6_OUTBOUND					= W1.FF_AUX_6_OUTBOUND
,FF_AUX_7_EMAIL						= W1.FF_AUX_7_EMAIL
,FF_AUX_8_QUEUE_WORK				= W1.FF_AUX_8_QUEUE_WORK
,FF_AUX_9_SYSTEM_DOWN				= W1.FF_AUX_9_SYSTEM_DOWN
,FF_AUX_10_EXCHANGE					= W1.FF_AUX_10_EXCHANGE
,FF_AUX_11_PERSONAL					= W1.FF_AUX_11_PERSONAL
,FF_TI_AUXTIME_12					= W1.FF_TI_AUXTIME_12
,FF_TI_AUXTIME_13					= W1.FF_TI_AUXTIME_13
,FF_TI_AUXTIME_14					= W1.FF_TI_AUXTIME_14
,FF_TI_AUXTIME_15					= W1.FF_TI_AUXTIME_15
,FF_TI_AUXTIME_16					= W1.FF_TI_AUXTIME_16
,FF_TI_AUXTIME_17					= W1.FF_TI_AUXTIME_17
,FF_TI_AUXTIME_18					= W1.FF_TI_AUXTIME_18
,FF_TI_AUXTIME_19					= W1.FF_TI_AUXTIME_19
,FF_TI_AUXTIME_20					= W1.FF_TI_AUXTIME_20
,FF_TI_AUXTIME_21					= W1.FF_TI_AUXTIME_21
,FF_TI_AUXTIME_22					= W1.FF_TI_AUXTIME_22
,FF_TI_AUXTIME_23					= W1.FF_TI_AUXTIME_23
,FF_TI_AUXTIME_24					= W1.FF_TI_AUXTIME_24
,FF_TI_AUXTIME_25					= W1.FF_TI_AUXTIME_25
,FF_TI_AUXTIME_26					= W1.FF_TI_AUXTIME_26
,FF_TI_AUXTIME_27					= W1.FF_TI_AUXTIME_27
,FF_TI_AUXTIME_28					= W1.FF_TI_AUXTIME_28
,FF_TI_AUXTIME_29					= W1.FF_TI_AUXTIME_29
,FF_TI_AUXTIME_30					= W1.FF_TI_AUXTIME_30
,FF_TI_AUXTIME_31					= W1.FF_TI_AUXTIME_31
,FF_TI_AUXTIME_32					= W1.FF_TI_AUXTIME_32
,FF_TI_AUXTIME_33					= W1.FF_TI_AUXTIME_33
,FF_TI_AUXTIME_34					= W1.FF_TI_AUXTIME_34
,FF_TI_AUXTIME_35					= W1.FF_TI_AUXTIME_35
,FF_TI_AUXTIME_36					= W1.FF_TI_AUXTIME_36
,FF_TI_AUXTIME_37					= W1.FF_TI_AUXTIME_37
,FF_TI_AUXTIME_38					= W1.FF_TI_AUXTIME_38
,FF_TI_AUXTIME_39					= W1.FF_TI_AUXTIME_39
,FF_TI_AUXTIME_40					= W1.FF_TI_AUXTIME_40
,FF_TI_AUXTIME_41					= W1.FF_TI_AUXTIME_41
,FF_TI_AUXTIME_42					= W1.FF_TI_AUXTIME_42
,FF_TI_AUXTIME_43					= W1.FF_TI_AUXTIME_43
,FF_TI_AUXTIME_44					= W1.FF_TI_AUXTIME_44
,FF_TI_AUXTIME_45					= W1.FF_TI_AUXTIME_45
,FF_TI_AUXTIME_46					= W1.FF_TI_AUXTIME_46
,FF_TI_AUXTIME_47					= W1.FF_TI_AUXTIME_47
,FF_TI_AUXTIME_48					= W1.FF_TI_AUXTIME_48
,FF_TI_AUXTIME_49					= W1.FF_TI_AUXTIME_49
,FF_TI_AUXTIME_50					= W1.FF_TI_AUXTIME_50
,FF_TI_AUXTIME_51					= W1.FF_TI_AUXTIME_51
,FF_TI_AUXTIME_52					= W1.FF_TI_AUXTIME_52
,FF_TI_AUXTIME_53					= W1.FF_TI_AUXTIME_53
,FF_TI_AUXTIME_54					= W1.FF_TI_AUXTIME_54
,FF_TI_AUXTIME_55					= W1.FF_TI_AUXTIME_55
,FF_TI_AUXTIME_56					= W1.FF_TI_AUXTIME_56
,FF_TI_AUXTIME_57					= W1.FF_TI_AUXTIME_57
,FF_TI_AUXTIME_58					= W1.FF_TI_AUXTIME_58
,FF_TI_AUXTIME_59					= W1.FF_TI_AUXTIME_59
,FF_TI_AUXTIME_60					= W1.FF_TI_AUXTIME_60
,FF_TI_AUXTIME_61					= W1.FF_TI_AUXTIME_61
,FF_TI_AUXTIME_62					= W1.FF_TI_AUXTIME_62
,FF_TI_AUXTIME_63					= W1.FF_TI_AUXTIME_63
,FF_TI_AUXTIME_64					= W1.FF_TI_AUXTIME_64
,FF_TI_AUXTIME_65					= W1.FF_TI_AUXTIME_65
,FF_TI_AUXTIME_66					= W1.FF_TI_AUXTIME_66
,FF_TI_AUXTIME_67					= W1.FF_TI_AUXTIME_67
,FF_TI_AUXTIME_68					= W1.FF_TI_AUXTIME_68
,FF_TI_AUXTIME_69					= W1.FF_TI_AUXTIME_69
,FF_TI_AUXTIME_70					= W1.FF_TI_AUXTIME_70
,FF_TI_AUXTIME_71					= W1.FF_TI_AUXTIME_71
,FF_TI_AUXTIME_72					= W1.FF_TI_AUXTIME_72
,FF_TI_AUXTIME_73					= W1.FF_TI_AUXTIME_73
,FF_TI_AUXTIME_74					= W1.FF_TI_AUXTIME_74
,FF_TI_AUXTIME_75					= W1.FF_TI_AUXTIME_75
,FF_TI_AUXTIME_76					= W1.FF_TI_AUXTIME_76
,FF_TI_AUXTIME_77					= W1.FF_TI_AUXTIME_77
,FF_TI_AUXTIME_78					= W1.FF_TI_AUXTIME_78
,FF_TI_AUXTIME_79					= W1.FF_TI_AUXTIME_79
,FF_TI_AUXTIME_80					= W1.FF_TI_AUXTIME_80
,FF_TI_AUXTIME_81					= W1.FF_TI_AUXTIME_81
,FF_TI_AUXTIME_82					= W1.FF_TI_AUXTIME_82
,FF_TI_AUXTIME_83					= W1.FF_TI_AUXTIME_83
,FF_TI_AUXTIME_84					= W1.FF_TI_AUXTIME_84
,FF_TI_AUXTIME_85					= W1.FF_TI_AUXTIME_85
,FF_TI_AUXTIME_86					= W1.FF_TI_AUXTIME_86
,FF_TI_AUXTIME_87					= W1.FF_TI_AUXTIME_87
,FF_TI_AUXTIME_88					= W1.FF_TI_AUXTIME_88
,FF_TI_AUXTIME_89					= W1.FF_TI_AUXTIME_89
,FF_TI_AUXTIME_90					= W1.FF_TI_AUXTIME_90
,FF_TI_AUXTIME_91					= W1.FF_TI_AUXTIME_91
,FF_TI_AUXTIME_92					= W1.FF_TI_AUXTIME_92
,FF_TI_AUXTIME_93					= W1.FF_TI_AUXTIME_93
,FF_TI_AUXTIME_94					= W1.FF_TI_AUXTIME_94
,FF_TI_AUXTIME_95					= W1.FF_TI_AUXTIME_95
,FF_TI_AUXTIME_96					= W1.FF_TI_AUXTIME_96
,FF_TI_AUXTIME_97					= W1.FF_TI_AUXTIME_97
,FF_TI_AUXTIME_98					= W1.FF_TI_AUXTIME_98
,FF_TI_AUXTIME_99					= W1.FF_TI_AUXTIME_99
,CMS_GROUP							= W1.CMS_GROUP
,DATA_DATE							= W1.DATA_DATE
,DATETIME_CT						= W1.DATETIME_CT
,DATETIME_PT						= W1.DATETIME_PT
,[DATETIME]							= W1.[DATETIME]
,HOUR_INTERVAL						= W1.HOUR_INTERVAL
,RESOURCE_NAME						= W1.RESOURCE_NAME
,STAFFED_SECS						= W1.STAFFED_SECS
,AVAILABLE_SECS						= W1.AVAILABLE_SECS
,ACD_SECS							= W1.ACD_SECS
,OTHER_SECS							= W1.OTHER_SECS
,ACW_SECS							= W1.ACW_SECS
,RING_SECS							= W1.RING_SECS
,AUX_0_DEFAULT_SECS					= W1.AUX_0_DEFAULT_SECS
,AUX_1_BREAK_SECS					= W1.AUX_1_BREAK_SECS
,AUX_2_COACHING_SECS				= W1.AUX_2_COACHING_SECS
,AUX_3_MEETING_SECS					= W1.AUX_3_MEETING_SECS
,AUX_4_PROJECT_SECS					= W1.AUX_4_PROJECT_SECS
,AUX_5_EGE_TRAINING_SECS			= W1.AUX_5_EGE_TRAINING_SECS
,AUX_6_OUTBOUND_SECS				= W1.AUX_6_OUTBOUND_SECS
,AUX_7_EMAIL_SECS					= W1.AUX_7_EMAIL_SECS
,AUX_8_QUEUE_WORK_SECS				= W1.AUX_8_QUEUE_WORK_SECS
,AUX_9_SYSTEM_DOWN_SECS				= W1.AUX_9_SYSTEM_DOWN_SECS
,AUX_10_EXCHANGE_SECS				= W1.AUX_10_EXCHANGE_SECS
,AUX_11_PERSONAL_SECS				= W1.AUX_11_PERSONAL_SECS
,AUX_34_SECS						= W1.AUX_34_SECS
,AUX_35_SECS						= W1.AUX_35_SECS
,AUX_37_SECS						= W1.AUX_37_SECS
,AUX_40_SECS						= W1.AUX_40_SECS
,OUTBOUND_SECS						= W1.OUTBOUND_SECS
,EMAIL_SECS							= W1.EMAIL_SECS
,PROJECT_SECS						= W1.PROJECT_SECS
,MEETING_SECS						= W1.MEETING_SECS
,TOTAL_AUX_SECS						= W1.TOTAL_AUX_SECS
,PROD_BILLING_SECS					= W1.PROD_BILLING_SECS
,AUTHORIZED_CSAT_SAT_KEY_SECS		= W1.AUTHORIZED_CSAT_SAT_KEY_SECS
,AUTHORIZED_RESOURCE_SECS			= W1.AUTHORIZED_RESOURCE_SECS
,LINE_OF_BUSINESS					= W1.LINE_OF_BUSINESS
,WEEKEND							= W1.WEEKEND
,CPROD								= W1.CPROD
,MINIMUM_GUARANTEE					= W1.MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES					= W1.AUTHORIZED_MINUTES
,[EMAIL]							= W1.EMAIL
--,ID_EXT							= W1.ID_EXT
,SCHEDULER_ACL_NAME					= W1.SCHEDULER_ACL_NAME
--,STD_TENANT_START_DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W1.CAL_DATE
,TENANT_KEY							= W1.TENANT_KEY
,AIR_DAY_TYPE						= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES				= W1.MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE					= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W1.INCLUDE_IN_CAS
,READY_FOR_XML						= W1.READY_FOR_XML
,SHOW_ID_EXTS						= W1.SHOW_ID_EXTS
,INVOICE_ID							= W1.INVOICE_ID

,SEQNO_ADDED_TIME					= W1.SEQNO_ADDED_TIME
,SEQNO								= W1.SEQNO
,FTP_FILE_NAME						= W1.FTP_FILE_NAME

--,WS_ROW_CREATED_TIME				= NULL
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_EGENCIA_INVOICING_1  W1
INNER JOIN      WSOL_TB_IMPORTS_EGENCIA_SA_WA		 G   ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
														AND G.ID_EXT                         = W1.ID_EXT
														AND G.FF_LOGIN_ID					 = W1.FF_LOGIN_ID

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY
  AND G.ID_EXT							= W1.ID_EXT
  AND G.FF_LOGIN_ID						= W1.FF_LOGIN_ID

--=============================================
--INSERT INTO PERMANENT SA/WA IMPORT TABLE:
--=============================================
INSERT INTO WSOL_TB_IMPORTS_EGENCIA_SA_WA
(
 FF_LOGIN_ID
,FF_HOUR
,FF_STAFFED_TIME
,FF_AVAIL_TIME
,FF_ACD_TIME
,FF_OTHER_TIME
,FF_ACW_TIME
,FF_AGENT_RING_TIME
,FF_AUX_TIME
,FF_AUX_0_DEFAULT
,FF_AUX_1_BREAK
,FF_AUX_2_COACHING
,FF_AUX_3_MEETING
,FF_AUX_4_PROJECT
,FF_AUX_5_EGE_TRAINING
,FF_AUX_6_OUTBOUND
,FF_AUX_7_EMAIL
,FF_AUX_8_QUEUE_WORK
,FF_AUX_9_SYSTEM_DOWN
,FF_AUX_10_EXCHANGE
,FF_AUX_11_PERSONAL
,FF_TI_AUXTIME_12
,FF_TI_AUXTIME_13
,FF_TI_AUXTIME_14
,FF_TI_AUXTIME_15
,FF_TI_AUXTIME_16
,FF_TI_AUXTIME_17
,FF_TI_AUXTIME_18
,FF_TI_AUXTIME_19
,FF_TI_AUXTIME_20
,FF_TI_AUXTIME_21
,FF_TI_AUXTIME_22
,FF_TI_AUXTIME_23
,FF_TI_AUXTIME_24
,FF_TI_AUXTIME_25
,FF_TI_AUXTIME_26
,FF_TI_AUXTIME_27
,FF_TI_AUXTIME_28
,FF_TI_AUXTIME_29
,FF_TI_AUXTIME_30
,FF_TI_AUXTIME_31
,FF_TI_AUXTIME_32
,FF_TI_AUXTIME_33
,FF_TI_AUXTIME_34
,FF_TI_AUXTIME_35
,FF_TI_AUXTIME_36
,FF_TI_AUXTIME_37
,FF_TI_AUXTIME_38
,FF_TI_AUXTIME_39
,FF_TI_AUXTIME_40
,FF_TI_AUXTIME_41
,FF_TI_AUXTIME_42
,FF_TI_AUXTIME_43
,FF_TI_AUXTIME_44
,FF_TI_AUXTIME_45
,FF_TI_AUXTIME_46
,FF_TI_AUXTIME_47
,FF_TI_AUXTIME_48
,FF_TI_AUXTIME_49
,FF_TI_AUXTIME_50
,FF_TI_AUXTIME_51
,FF_TI_AUXTIME_52
,FF_TI_AUXTIME_53
,FF_TI_AUXTIME_54
,FF_TI_AUXTIME_55
,FF_TI_AUXTIME_56
,FF_TI_AUXTIME_57
,FF_TI_AUXTIME_58
,FF_TI_AUXTIME_59
,FF_TI_AUXTIME_60
,FF_TI_AUXTIME_61
,FF_TI_AUXTIME_62
,FF_TI_AUXTIME_63
,FF_TI_AUXTIME_64
,FF_TI_AUXTIME_65
,FF_TI_AUXTIME_66
,FF_TI_AUXTIME_67
,FF_TI_AUXTIME_68
,FF_TI_AUXTIME_69
,FF_TI_AUXTIME_70
,FF_TI_AUXTIME_71
,FF_TI_AUXTIME_72
,FF_TI_AUXTIME_73
,FF_TI_AUXTIME_74
,FF_TI_AUXTIME_75
,FF_TI_AUXTIME_76
,FF_TI_AUXTIME_77
,FF_TI_AUXTIME_78
,FF_TI_AUXTIME_79
,FF_TI_AUXTIME_80
,FF_TI_AUXTIME_81
,FF_TI_AUXTIME_82
,FF_TI_AUXTIME_83
,FF_TI_AUXTIME_84
,FF_TI_AUXTIME_85
,FF_TI_AUXTIME_86
,FF_TI_AUXTIME_87
,FF_TI_AUXTIME_88
,FF_TI_AUXTIME_89
,FF_TI_AUXTIME_90
,FF_TI_AUXTIME_91
,FF_TI_AUXTIME_92
,FF_TI_AUXTIME_93
,FF_TI_AUXTIME_94
,FF_TI_AUXTIME_95
,FF_TI_AUXTIME_96
,FF_TI_AUXTIME_97
,FF_TI_AUXTIME_98
,FF_TI_AUXTIME_99
,CMS_GROUP
,DATA_DATE
,DATETIME_CT
,DATETIME_PT
,[DATETIME]
,HOUR_INTERVAL
,RESOURCE_NAME
,STAFFED_SECS
,AVAILABLE_SECS
,ACD_SECS
,OTHER_SECS
,ACW_SECS
,RING_SECS
,AUX_0_DEFAULT_SECS
,AUX_1_BREAK_SECS
,AUX_2_COACHING_SECS
,AUX_3_MEETING_SECS
,AUX_4_PROJECT_SECS
,AUX_5_EGE_TRAINING_SECS
,AUX_6_OUTBOUND_SECS
,AUX_7_EMAIL_SECS
,AUX_8_QUEUE_WORK_SECS
,AUX_9_SYSTEM_DOWN_SECS
,AUX_10_EXCHANGE_SECS
,AUX_11_PERSONAL_SECS
,AUX_34_SECS
,AUX_35_SECS
,AUX_37_SECS
,AUX_40_SECS
,OUTBOUND_SECS
,EMAIL_SECS
,PROJECT_SECS
,MEETING_SECS
,TOTAL_AUX_SECS
,PROD_BILLING_SECS
,AUTHORIZED_CSAT_SAT_KEY_SECS
,AUTHORIZED_RESOURCE_SECS
,LINE_OF_BUSINESS
,WEEKEND
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES
,[EMAIL]
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W1.FF_LOGIN_ID
,W1.FF_HOUR
,W1.FF_STAFFED_TIME
,W1.FF_AVAIL_TIME
,W1.FF_ACD_TIME
,W1.FF_OTHER_TIME
,W1.FF_ACW_TIME
,W1.FF_AGENT_RING_TIME
,W1.FF_AUX_TIME
,W1.FF_AUX_0_DEFAULT
,W1.FF_AUX_1_BREAK
,W1.FF_AUX_2_COACHING
,W1.FF_AUX_3_MEETING
,W1.FF_AUX_4_PROJECT
,W1.FF_AUX_5_EGE_TRAINING
,W1.FF_AUX_6_OUTBOUND
,W1.FF_AUX_7_EMAIL
,W1.FF_AUX_8_QUEUE_WORK
,W1.FF_AUX_9_SYSTEM_DOWN
,W1.FF_AUX_10_EXCHANGE
,W1.FF_AUX_11_PERSONAL
,W1.FF_TI_AUXTIME_12
,W1.FF_TI_AUXTIME_13
,W1.FF_TI_AUXTIME_14
,W1.FF_TI_AUXTIME_15
,W1.FF_TI_AUXTIME_16
,W1.FF_TI_AUXTIME_17
,W1.FF_TI_AUXTIME_18
,W1.FF_TI_AUXTIME_19
,W1.FF_TI_AUXTIME_20
,W1.FF_TI_AUXTIME_21
,W1.FF_TI_AUXTIME_22
,W1.FF_TI_AUXTIME_23
,W1.FF_TI_AUXTIME_24
,W1.FF_TI_AUXTIME_25
,W1.FF_TI_AUXTIME_26
,W1.FF_TI_AUXTIME_27
,W1.FF_TI_AUXTIME_28
,W1.FF_TI_AUXTIME_29
,W1.FF_TI_AUXTIME_30
,W1.FF_TI_AUXTIME_31
,W1.FF_TI_AUXTIME_32
,W1.FF_TI_AUXTIME_33
,W1.FF_TI_AUXTIME_34
,W1.FF_TI_AUXTIME_35
,W1.FF_TI_AUXTIME_36
,W1.FF_TI_AUXTIME_37
,W1.FF_TI_AUXTIME_38
,W1.FF_TI_AUXTIME_39
,W1.FF_TI_AUXTIME_40
,W1.FF_TI_AUXTIME_41
,W1.FF_TI_AUXTIME_42
,W1.FF_TI_AUXTIME_43
,W1.FF_TI_AUXTIME_44
,W1.FF_TI_AUXTIME_45
,W1.FF_TI_AUXTIME_46
,W1.FF_TI_AUXTIME_47
,W1.FF_TI_AUXTIME_48
,W1.FF_TI_AUXTIME_49
,W1.FF_TI_AUXTIME_50
,W1.FF_TI_AUXTIME_51
,W1.FF_TI_AUXTIME_52
,W1.FF_TI_AUXTIME_53
,W1.FF_TI_AUXTIME_54
,W1.FF_TI_AUXTIME_55
,W1.FF_TI_AUXTIME_56
,W1.FF_TI_AUXTIME_57
,W1.FF_TI_AUXTIME_58
,W1.FF_TI_AUXTIME_59
,W1.FF_TI_AUXTIME_60
,W1.FF_TI_AUXTIME_61
,W1.FF_TI_AUXTIME_62
,W1.FF_TI_AUXTIME_63
,W1.FF_TI_AUXTIME_64
,W1.FF_TI_AUXTIME_65
,W1.FF_TI_AUXTIME_66
,W1.FF_TI_AUXTIME_67
,W1.FF_TI_AUXTIME_68
,W1.FF_TI_AUXTIME_69
,W1.FF_TI_AUXTIME_70
,W1.FF_TI_AUXTIME_71
,W1.FF_TI_AUXTIME_72
,W1.FF_TI_AUXTIME_73
,W1.FF_TI_AUXTIME_74
,W1.FF_TI_AUXTIME_75
,W1.FF_TI_AUXTIME_76
,W1.FF_TI_AUXTIME_77
,W1.FF_TI_AUXTIME_78
,W1.FF_TI_AUXTIME_79
,W1.FF_TI_AUXTIME_80
,W1.FF_TI_AUXTIME_81
,W1.FF_TI_AUXTIME_82
,W1.FF_TI_AUXTIME_83
,W1.FF_TI_AUXTIME_84
,W1.FF_TI_AUXTIME_85
,W1.FF_TI_AUXTIME_86
,W1.FF_TI_AUXTIME_87
,W1.FF_TI_AUXTIME_88
,W1.FF_TI_AUXTIME_89
,W1.FF_TI_AUXTIME_90
,W1.FF_TI_AUXTIME_91
,W1.FF_TI_AUXTIME_92
,W1.FF_TI_AUXTIME_93
,W1.FF_TI_AUXTIME_94
,W1.FF_TI_AUXTIME_95
,W1.FF_TI_AUXTIME_96
,W1.FF_TI_AUXTIME_97
,W1.FF_TI_AUXTIME_98
,W1.FF_TI_AUXTIME_99
,W1.CMS_GROUP
,W1.DATA_DATE
,W1.DATETIME_CT
,W1.DATETIME_PT
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.RESOURCE_NAME
,W1.STAFFED_SECS
,W1.AVAILABLE_SECS
,W1.ACD_SECS
,W1.OTHER_SECS
,W1.ACW_SECS
,W1.RING_SECS
,W1.AUX_0_DEFAULT_SECS
,W1.AUX_1_BREAK_SECS
,W1.AUX_2_COACHING_SECS
,W1.AUX_3_MEETING_SECS
,W1.AUX_4_PROJECT_SECS
,W1.AUX_5_EGE_TRAINING_SECS
,W1.AUX_6_OUTBOUND_SECS
,W1.AUX_7_EMAIL_SECS
,W1.AUX_8_QUEUE_WORK_SECS
,W1.AUX_9_SYSTEM_DOWN_SECS
,W1.AUX_10_EXCHANGE_SECS
,W1.AUX_11_PERSONAL_SECS
,W1.AUX_34_SECS
,W1.AUX_35_SECS
,W1.AUX_37_SECS
,W1.AUX_40_SECS
,W1.OUTBOUND_SECS
,W1.EMAIL_SECS
,W1.PROJECT_SECS
,W1.MEETING_SECS
,W1.TOTAL_AUX_SECS
,W1.PROD_BILLING_SECS
,W1.AUTHORIZED_CSAT_SAT_KEY_SECS
,W1.AUTHORIZED_RESOURCE_SECS
,W1.LINE_OF_BUSINESS
,W1.WEEKEND
,W1.CPROD
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_MINUTES
,W1.[EMAIL]
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_EGENCIA_INVOICING_1  W1

LEFT JOIN       WSOL_TB_IMPORTS_EGENCIA_SA_WA		 G   ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
														AND G.ID_EXT                         = W1.ID_EXT
														AND G.FF_LOGIN_ID					 = W1.FF_LOGIN_ID

WHERE (G.FF_LOGIN_ID					IS NULL AND ISNULL(W1.FF_LOGIN_ID					,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY, 0) <>  0 )
--AND (G.INVOICE_ID						IS NULL AND ISNULL(W1.INVOICE_ID					,'') <> '' )			
--AND (G.ID_EXT							IS NULL AND ISNULL(W1.ID_EXT						,'') <> '' )

--	SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_SA_WA ORDER BY SEQNO

--=============================================================================
--	GROUP DATA IN HOURLY INTERVALS
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_2

INSERT INTO WSOL_TB_IMPORTS_EGENCIA_INVOICING_2
(
 FF_LOGIN_ID
,FF_HOUR
,FF_STAFFED_TIME
,FF_AVAIL_TIME
,FF_ACD_TIME
,FF_OTHER_TIME
,FF_ACW_TIME
,FF_AGENT_RING_TIME
,FF_AUX_TIME
,FF_AUX_0_DEFAULT
,FF_AUX_1_BREAK
,FF_AUX_2_COACHING
,FF_AUX_3_MEETING
,FF_AUX_4_PROJECT
,FF_AUX_5_EGE_TRAINING
,FF_AUX_6_OUTBOUND
,FF_AUX_7_EMAIL
,FF_AUX_8_QUEUE_WORK
,FF_AUX_9_SYSTEM_DOWN
,FF_AUX_10_EXCHANGE
,FF_AUX_11_PERSONAL
,FF_TI_AUXTIME_12
,FF_TI_AUXTIME_13
,FF_TI_AUXTIME_14
,FF_TI_AUXTIME_15
,FF_TI_AUXTIME_16
,FF_TI_AUXTIME_17
,FF_TI_AUXTIME_18
,FF_TI_AUXTIME_19
,FF_TI_AUXTIME_20
,FF_TI_AUXTIME_21
,FF_TI_AUXTIME_22
,FF_TI_AUXTIME_23
,FF_TI_AUXTIME_24
,FF_TI_AUXTIME_25
,FF_TI_AUXTIME_26
,FF_TI_AUXTIME_27
,FF_TI_AUXTIME_28
,FF_TI_AUXTIME_29
,FF_TI_AUXTIME_30
,FF_TI_AUXTIME_31
,FF_TI_AUXTIME_32
,FF_TI_AUXTIME_33
,FF_TI_AUXTIME_34
,FF_TI_AUXTIME_35
,FF_TI_AUXTIME_36
,FF_TI_AUXTIME_37
,FF_TI_AUXTIME_38
,FF_TI_AUXTIME_39
,FF_TI_AUXTIME_40
,FF_TI_AUXTIME_41
,FF_TI_AUXTIME_42
,FF_TI_AUXTIME_43
,FF_TI_AUXTIME_44
,FF_TI_AUXTIME_45
,FF_TI_AUXTIME_46
,FF_TI_AUXTIME_47
,FF_TI_AUXTIME_48
,FF_TI_AUXTIME_49
,FF_TI_AUXTIME_50
,FF_TI_AUXTIME_51
,FF_TI_AUXTIME_52
,FF_TI_AUXTIME_53
,FF_TI_AUXTIME_54
,FF_TI_AUXTIME_55
,FF_TI_AUXTIME_56
,FF_TI_AUXTIME_57
,FF_TI_AUXTIME_58
,FF_TI_AUXTIME_59
,FF_TI_AUXTIME_60
,FF_TI_AUXTIME_61
,FF_TI_AUXTIME_62
,FF_TI_AUXTIME_63
,FF_TI_AUXTIME_64
,FF_TI_AUXTIME_65
,FF_TI_AUXTIME_66
,FF_TI_AUXTIME_67
,FF_TI_AUXTIME_68
,FF_TI_AUXTIME_69
,FF_TI_AUXTIME_70
,FF_TI_AUXTIME_71
,FF_TI_AUXTIME_72
,FF_TI_AUXTIME_73
,FF_TI_AUXTIME_74
,FF_TI_AUXTIME_75
,FF_TI_AUXTIME_76
,FF_TI_AUXTIME_77
,FF_TI_AUXTIME_78
,FF_TI_AUXTIME_79
,FF_TI_AUXTIME_80
,FF_TI_AUXTIME_81
,FF_TI_AUXTIME_82
,FF_TI_AUXTIME_83
,FF_TI_AUXTIME_84
,FF_TI_AUXTIME_85
,FF_TI_AUXTIME_86
,FF_TI_AUXTIME_87
,FF_TI_AUXTIME_88
,FF_TI_AUXTIME_89
,FF_TI_AUXTIME_90
,FF_TI_AUXTIME_91
,FF_TI_AUXTIME_92
,FF_TI_AUXTIME_93
,FF_TI_AUXTIME_94
,FF_TI_AUXTIME_95
,FF_TI_AUXTIME_96
,FF_TI_AUXTIME_97
,FF_TI_AUXTIME_98
,FF_TI_AUXTIME_99
,CMS_GROUP
,DATA_DATE
,DATETIME_CT
,DATETIME_PT
,[DATETIME]
,HOUR_INTERVAL
,RESOURCE_NAME
,STAFFED_SECS
,AVAILABLE_SECS
,ACD_SECS
,OTHER_SECS
,ACW_SECS
,RING_SECS
,AUX_0_DEFAULT_SECS
,AUX_1_BREAK_SECS
,AUX_2_COACHING_SECS
,AUX_3_MEETING_SECS
,AUX_4_PROJECT_SECS
,AUX_5_EGE_TRAINING_SECS
,AUX_6_OUTBOUND_SECS
,AUX_7_EMAIL_SECS
,AUX_8_QUEUE_WORK_SECS
,AUX_9_SYSTEM_DOWN_SECS
,AUX_10_EXCHANGE_SECS
,AUX_11_PERSONAL_SECS
,AUX_34_SECS
,AUX_35_SECS
,AUX_37_SECS
,AUX_40_SECS
,OUTBOUND_SECS
,EMAIL_SECS
,PROJECT_SECS
,MEETING_SECS
,TOTAL_AUX_SECS
,PROD_BILLING_SECS
,AUTHORIZED_CSAT_SAT_KEY_SECS
,AUTHORIZED_RESOURCE_SECS
,LINE_OF_BUSINESS
,WEEKEND
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES
,[EMAIL]
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W1.FF_LOGIN_ID
,NULL																--AS FF_HOUR
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_STAFFED_TIME		AS INT)))	--AS FF_STAFFED_TIME
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_AVAIL_TIME			AS INT)))	--AS FF_AVAIL_TIME
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_ACD_TIME			AS INT)))	--AS FF_ACD_TIME
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_OTHER_TIME			AS INT)))	--AS FF_OTHER_TIME
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_ACW_TIME			AS INT)))	--AS FF_ACW_TIME
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_AGENT_RING_TIME	AS INT)))	--AS FF_AGENT_RING_TIME
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_AUX_TIME			AS INT)))	--AS FF_AUX_TIME
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_AUX_0_DEFAULT		AS INT)))	--AS FF_AUX_0_DEFAULT
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_AUX_1_BREAK		AS INT)))	--AS FF_AUX_1_BREAK
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_AUX_2_COACHING		AS INT)))	--AS FF_AUX_2_COACHING
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_AUX_3_MEETING		AS INT)))	--AS FF_AUX_3_MEETING
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_AUX_4_PROJECT		AS INT)))	--AS FF_AUX_4_PROJECT
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_AUX_5_EGE_TRAINING	AS INT)))	--AS FF_AUX_5_EGE_TRAINING
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_AUX_6_OUTBOUND		AS INT)))	--AS FF_AUX_6_OUTBOUND
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_AUX_7_EMAIL		AS INT)))	--AS FF_AUX_7_EMAIL
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_AUX_8_QUEUE_WORK	AS INT)))	--AS FF_AUX_8_QUEUE_WORK
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_AUX_9_SYSTEM_DOWN	AS INT)))	--AS FF_AUX_9_SYSTEM_DOWN
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_AUX_10_EXCHANGE	AS INT)))	--AS FF_AUX_10_EXCHANGE
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_AUX_11_PERSONAL	AS INT)))	--AS FF_AUX_11_PERSONAL
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_12		AS INT)))	--AS FF_TI_AUXTIME_12
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_13		AS INT)))	--AS FF_TI_AUXTIME_13
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_14		AS INT)))	--AS FF_TI_AUXTIME_14
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_15		AS INT)))	--AS FF_TI_AUXTIME_15
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_16		AS INT)))	--AS FF_TI_AUXTIME_16
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_17		AS INT)))	--AS FF_TI_AUXTIME_17
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_18		AS INT)))	--AS FF_TI_AUXTIME_18
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_19		AS INT)))	--AS FF_TI_AUXTIME_19
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_20		AS INT)))	--AS FF_TI_AUXTIME_20
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_21		AS INT)))	--AS FF_TI_AUXTIME_21
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_22		AS INT)))	--AS FF_TI_AUXTIME_22
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_23		AS INT)))	--AS FF_TI_AUXTIME_23
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_24		AS INT)))	--AS FF_TI_AUXTIME_24
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_25		AS INT)))	--AS FF_TI_AUXTIME_25
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_26		AS INT)))	--AS FF_TI_AUXTIME_26
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_27		AS INT)))	--AS FF_TI_AUXTIME_27
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_28		AS INT)))	--AS FF_TI_AUXTIME_28
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_29		AS INT)))	--AS FF_TI_AUXTIME_29
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_30		AS INT)))	--AS FF_TI_AUXTIME_30
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_31		AS INT)))	--AS FF_TI_AUXTIME_31
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_32		AS INT)))	--AS FF_TI_AUXTIME_32
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_33		AS INT)))	--AS FF_TI_AUXTIME_33
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_34		AS INT)))	--AS FF_TI_AUXTIME_34
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_35		AS INT)))	--AS FF_TI_AUXTIME_35
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_36		AS INT)))	--AS FF_TI_AUXTIME_36
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_37		AS INT)))	--AS FF_TI_AUXTIME_37
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_38		AS INT)))	--AS FF_TI_AUXTIME_38
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_39		AS INT)))	--AS FF_TI_AUXTIME_39
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_40		AS INT)))	--AS FF_TI_AUXTIME_40
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_41		AS INT)))	--AS FF_TI_AUXTIME_41
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_42		AS INT)))	--AS FF_TI_AUXTIME_42
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_43		AS INT)))	--AS FF_TI_AUXTIME_43
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_44		AS INT)))	--AS FF_TI_AUXTIME_44
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_45		AS INT)))	--AS FF_TI_AUXTIME_45
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_46		AS INT)))	--AS FF_TI_AUXTIME_46
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_47		AS INT)))	--AS FF_TI_AUXTIME_47
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_48		AS INT)))	--AS FF_TI_AUXTIME_48
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_49		AS INT)))	--AS FF_TI_AUXTIME_49
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_50		AS INT)))	--AS FF_TI_AUXTIME_50
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_51		AS INT)))	--AS FF_TI_AUXTIME_51
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_52		AS INT)))	--AS FF_TI_AUXTIME_52
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_53		AS INT)))	--AS FF_TI_AUXTIME_53
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_54		AS INT)))	--AS FF_TI_AUXTIME_54
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_55		AS INT)))	--AS FF_TI_AUXTIME_55
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_56		AS INT)))	--AS FF_TI_AUXTIME_56
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_57		AS INT)))	--AS FF_TI_AUXTIME_57
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_58		AS INT)))	--AS FF_TI_AUXTIME_58
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_59		AS INT)))	--AS FF_TI_AUXTIME_59
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_60		AS INT)))	--AS FF_TI_AUXTIME_60																										
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_61		AS INT)))	--AS FF_TI_AUXTIME_61
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_62		AS INT)))	--AS FF_TI_AUXTIME_62
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_63		AS INT)))	--AS FF_TI_AUXTIME_63
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_64		AS INT)))	--AS FF_TI_AUXTIME_64
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_65		AS INT)))	--AS FF_TI_AUXTIME_65
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_66		AS INT)))	--AS FF_TI_AUXTIME_66
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_67		AS INT)))	--AS FF_TI_AUXTIME_67
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_68		AS INT)))	--AS FF_TI_AUXTIME_68
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_69		AS INT)))	--AS FF_TI_AUXTIME_69
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_70		AS INT)))	--AS FF_TI_AUXTIME_70																										
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_71		AS INT)))	--AS FF_TI_AUXTIME_71
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_72		AS INT)))	--AS FF_TI_AUXTIME_72
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_73		AS INT)))	--AS FF_TI_AUXTIME_73
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_74		AS INT)))	--AS FF_TI_AUXTIME_74
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_75		AS INT)))	--AS FF_TI_AUXTIME_75
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_76		AS INT)))	--AS FF_TI_AUXTIME_76
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_77		AS INT)))	--AS FF_TI_AUXTIME_77
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_78		AS INT)))	--AS FF_TI_AUXTIME_78
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_79		AS INT)))	--AS FF_TI_AUXTIME_79
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_80		AS INT)))	--AS FF_TI_AUXTIME_80																										
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_81		AS INT)))	--AS FF_TI_AUXTIME_81
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_82		AS INT)))	--AS FF_TI_AUXTIME_82
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_83		AS INT)))	--AS FF_TI_AUXTIME_83
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_84		AS INT)))	--AS FF_TI_AUXTIME_84
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_85		AS INT)))	--AS FF_TI_AUXTIME_85
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_86		AS INT)))	--AS FF_TI_AUXTIME_86
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_87		AS INT)))	--AS FF_TI_AUXTIME_87
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_88		AS INT)))	--AS FF_TI_AUXTIME_88
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_89		AS INT)))	--AS FF_TI_AUXTIME_89
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_90		AS INT)))	--AS FF_TI_AUXTIME_90																										
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_91		AS INT)))	--AS FF_TI_AUXTIME_91
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_92		AS INT)))	--AS FF_TI_AUXTIME_92
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_93		AS INT)))	--AS FF_TI_AUXTIME_93
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_94		AS INT)))	--AS FF_TI_AUXTIME_94
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_95		AS INT)))	--AS FF_TI_AUXTIME_95
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_96		AS INT)))	--AS FF_TI_AUXTIME_96
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_97		AS INT)))	--AS FF_TI_AUXTIME_97
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_98		AS INT)))	--AS FF_TI_AUXTIME_98
,CONVERT(VARCHAR(50), SUM(CAST(W1.FF_TI_AUXTIME_99		AS INT)))	--AS FF_TI_AUXTIME_99
,MAX(ISNULL(W1.CMS_GROUP,''))										--AS CMS_GROUP
,W1.DATA_DATE
,CASE WHEN CHARINDEX(':',W1.FF_HOUR) = 2 THEN
		DATEADD(HH,+2,CAST((W1.DATA_DATE + ' ' + LEFT(W1.FF_HOUR,1) + ':00:00') AS DATETIME))
	  ELSE
		DATEADD(HH,+2,CAST((W1.DATA_DATE + ' ' + LEFT(W1.FF_HOUR,2) + ':00:00') AS DATETIME))
	  END											--AS DATETIME_CT
,CASE WHEN CHARINDEX(':',W1.FF_HOUR) = 2 THEN
		CAST((W1.DATA_DATE + ' ' + LEFT(W1.FF_HOUR,1) + ':00:00') AS DATETIME)
	  ELSE
		CAST((W1.DATA_DATE + ' ' + LEFT(W1.FF_HOUR,2) + ':00:00') AS DATETIME)
	  END											--AS DATETIME_PT
,CASE WHEN CHARINDEX(':',W1.FF_HOUR) = 2 THEN
		CAST((W1.DATA_DATE + ' ' + LEFT(W1.FF_HOUR,1) + ':00:00') AS DATETIME)
	  ELSE
		CAST((W1.DATA_DATE + ' ' + LEFT(W1.FF_HOUR,2) + ':00:00') AS DATETIME)
	  END											--AS DATETIME
,CASE WHEN CHARINDEX(':',W1.FF_HOUR) = 2 THEN
		CAST(LEFT(W1.FF_HOUR,1) AS INT)
	  ELSE
		CAST(LEFT(W1.FF_HOUR,2) AS INT)
	  END											--AS HOUR_INTERVAL
,MAX(ISNULL(W1.RESOURCE_NAME				,''))	--AS RESOURCE_NAME
,SUM(ISNULL(W1.STAFFED_SECS					,0.00))	--AS STAFFED_SECS																										
,SUM(ISNULL(W1.AVAILABLE_SECS				,0.00))	--AS AVAILABLE_SECS																										
,SUM(ISNULL(W1.ACD_SECS						,0.00))	--AS ACD_SECS
,SUM(ISNULL(W1.OTHER_SECS					,0.00))	--AS OTHER_SECS
,SUM(ISNULL(W1.ACW_SECS						,0.00))	--AS ACW_SECS
,SUM(ISNULL(W1.RING_SECS					,0.00))	--AS RING_SECS
,SUM(ISNULL(W1.AUX_0_DEFAULT_SECS			,0.00))	--AS AUX_0_DEFAULT_SECS
,SUM(ISNULL(W1.AUX_1_BREAK_SECS				,0.00))	--AS AUX_1_BREAK_SECS
,SUM(ISNULL(W1.AUX_2_COACHING_SECS			,0.00))	--AS AUX_2_COACHING_SECS
,SUM(ISNULL(W1.AUX_3_MEETING_SECS			,0.00))	--AS AUX_3_MEETING_SECS
,SUM(ISNULL(W1.AUX_4_PROJECT_SECS			,0.00))	--AS AUX_4_PROJECT_SECS
,SUM(ISNULL(W1.AUX_5_EGE_TRAINING_SECS		,0.00))	--AS AUX_5_EGE_TRAINING_SECS
,SUM(ISNULL(W1.AUX_6_OUTBOUND_SECS			,0.00))	--AS AUX_6_OUTBOUND_SECS
,SUM(ISNULL(W1.AUX_7_EMAIL_SECS				,0.00))	--AS AUX_7_EMAIL_SECS
,SUM(ISNULL(W1.AUX_8_QUEUE_WORK_SECS		,0.00))	--AS AUX_8_QUEUE_WORK_SECS
,SUM(ISNULL(W1.AUX_9_SYSTEM_DOWN_SECS		,0.00))	--AS AUX_9_SYSTEM_DOWN_SECS
,SUM(ISNULL(W1.AUX_10_EXCHANGE_SECS			,0.00))	--AS AUX_10_EXCHANGE_SECS
,SUM(ISNULL(W1.AUX_11_PERSONAL_SECS			,0.00))	--AS AUX_11_PERSONAL_SECS
,SUM(ISNULL(W1.AUX_34_SECS					,0.00))	--AS AUX_34_SECS
,SUM(ISNULL(W1.AUX_35_SECS					,0.00))	--AS AUX_35_SECS
,SUM(ISNULL(W1.AUX_37_SECS					,0.00))	--AS AUX_37_SECS
,SUM(ISNULL(W1.AUX_40_SECS					,0.00))	--AS AUX_40_SECS
,SUM(ISNULL(W1.OUTBOUND_SECS				,0.00))	--AS OUTBOUND_SECS
,SUM(ISNULL(W1.EMAIL_SECS					,0.00))	--AS EMAIL_SECS
,SUM(ISNULL(W1.PROJECT_SECS					,0.00))	--AS PROJECT_SECS
,SUM(ISNULL(W1.MEETING_SECS					,0.00))	--AS MEETING_SECS
,SUM(ISNULL(W1.TOTAL_AUX_SECS				,0.00))	--AS TOTAL_AUX_SECS
,SUM(ISNULL(W1.PROD_BILLING_SECS			,0.00))	--AS PROD_BILLING_SECS
,SUM(ISNULL(W1.AUTHORIZED_CSAT_SAT_KEY_SECS	,0.00))	--AS AUTHORIZED_CSAT_SAT_KEY_SECS
,SUM(ISNULL(W1.AUTHORIZED_RESOURCE_SECS		,0.00))	--AS AURHORIZED_RESOURCE_SECS
,MAX(ISNULL(W1.LINE_OF_BUSINESS				,''))	--AS LINE_OF_BUSINESS
,MAX(ISNULL(W1.WEEKEND						,''))	--AS WEEKEND
,SUM(ISNULL(W1.CPROD						,0.00))	--AS CPROD
,SUM(ISNULL(W1.MINIMUM_GUARANTEE			,0.00))	--AS MINIMUM_GUARANTEE
,SUM(ISNULL(W1.AUTHORIZED_MINUTES			,0.00))	--AS AUTHORIZED_MINUTES
,MAX(ISNULL(W1.[EMAIL],''))							--AS EMAIL
,W1.ID_EXT
,MAX(ISNULL(W1.SCHEDULER_ACL_NAME,''))				--AS SCHEDULER_ACL_NAME
,NULL												--AS STD_TENANT_START_DATE_TIME_KEY
,NULL												--AS CAL_DATE
,MAX(ISNULL(W1.TENANT_KEY,0))						--AS TENANT_KEY
,MIN(ISNULL(W1.AIR_DAY_TYPE,''))					--AS AIR_DAY_TYPE
,MAX(ISNULL(W1.AIR_ACW_FONT_COLOR,''))				--AS AIR_ACW_FONT_COLOR
,MAX(ISNULL(W1.MIN_GUARANTEE_MINUTES,0.000))		--AS MIN_GUARANTEE_MINUTES
,MAX(ISNULL(W1.MIN_GUARANTEE_TYPE,''))				--AS MIN_GUARANTEE_TYPE
,MAX(ISNULL(W1.AUTHORIZED_TO_INVOICE_TYPE,''))		--AS AUTHORIZED_TO_INVOICE_TYPE
,MIN(ISNULL(W1.HAS_HOLIDAYS,''))					--AS HAS_HOLIDAYS
,MIN(ISNULL(W1.INCLUDE_IN_CAS,''))					--AS INCLUDE_IN_CAS
,MIN(ISNULL(W1.READY_FOR_XML,''))					--AS READY_FOR_XML
,MIN(ISNULL(W1.SHOW_ID_EXTS,''))					--AS SHOW_ID_EXTS
,MIN(ISNULL(W1.INVOICE_ID,''))						--AS INVOICE_ID
,MAX(W1.SEQNO_ADDED_TIME)							--AS SEQNO_ADDED_TIME
,MIN(W1.SEQNO)										--AS SEQNO
,MAX(W1.FTP_FILE_NAME)								--AS FTP_FILE_NAME
,@WS_ROW_CREATED_TIME								--[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL												--[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_EGENCIA_INVOICING_1  W1

GROUP BY
 W1.FF_LOGIN_ID
,W1.DATA_DATE
,CASE WHEN CHARINDEX(':',W1.FF_HOUR) = 2 THEN
		DATEADD(HH,+2,CAST((W1.DATA_DATE + ' ' + LEFT(W1.FF_HOUR,1) + ':00:00') AS DATETIME))
	  ELSE
		DATEADD(HH,+2,CAST((W1.DATA_DATE + ' ' + LEFT(W1.FF_HOUR,2) + ':00:00') AS DATETIME))
	  END											--AS DATETIME_CT
,CASE WHEN CHARINDEX(':',W1.FF_HOUR) = 2 THEN
		CAST((W1.DATA_DATE + ' ' + LEFT(W1.FF_HOUR,1) + ':00:00') AS DATETIME)
	  ELSE
		CAST((W1.DATA_DATE + ' ' + LEFT(W1.FF_HOUR,2) + ':00:00') AS DATETIME)
	  END											--AS DATETIME_PT
,CASE WHEN CHARINDEX(':',W1.FF_HOUR) = 2 THEN
		CAST((W1.DATA_DATE + ' ' + LEFT(W1.FF_HOUR,1) + ':00:00') AS DATETIME)
	  ELSE
		CAST((W1.DATA_DATE + ' ' + LEFT(W1.FF_HOUR,2) + ':00:00') AS DATETIME)
	  END											--AS DATETIME
,CASE WHEN CHARINDEX(':',W1.FF_HOUR) = 2 THEN
		CAST(LEFT(W1.FF_HOUR,1) AS INT)
	  ELSE
		CAST(LEFT(W1.FF_HOUR,2) AS INT)
	  END											--AS HOUR_INTERVAL
,W1.ID_EXT

ORDER BY
 MIN(W1.SEQNO)

--	SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_2 ORDER BY SEQNO

--===================================================================================================
--	UPDATE DATETIME KEY
--===================================================================================================
UPDATE WSOL_TB_IMPORTS_EGENCIA_INVOICING_2 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM		WSOL_TB_IMPORTS_EGENCIA_INVOICING_2	I
INNER JOIN	DATE_TIME							DT	ON DT.CAL_DATE = I.DATETIME_PT

--===============================================
SET DATEFIRST 1  -- = Monday  
--===============================================
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME
,@DTM_MAX  DATETIME

SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN([DATETIME]) FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_2))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_2))
SET @DTM_MAX = DATEADD(hh, 0,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING_2))

--SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING
--=============================================
--UPDATE PERMANENT INVOICE TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_EGENCIA_INVOICING SET
-- FF_LOGIN_ID						= W2.FF_LOGIN_ID
 FF_HOUR							= W2.FF_HOUR
,FF_STAFFED_TIME					= W2.FF_STAFFED_TIME
,FF_AVAIL_TIME						= W2.FF_AVAIL_TIME
,FF_ACD_TIME						= W2.FF_ACD_TIME
,FF_OTHER_TIME						= W2.FF_OTHER_TIME
,FF_ACW_TIME						= W2.FF_ACW_TIME
,FF_AGENT_RING_TIME					= W2.FF_AGENT_RING_TIME
,FF_AUX_TIME						= W2.FF_AUX_TIME
,FF_AUX_0_DEFAULT					= W2.FF_AUX_0_DEFAULT
,FF_AUX_1_BREAK						= W2.FF_AUX_1_BREAK
,FF_AUX_2_COACHING					= W2.FF_AUX_2_COACHING
,FF_AUX_3_MEETING					= W2.FF_AUX_3_MEETING
,FF_AUX_4_PROJECT					= W2.FF_AUX_4_PROJECT
,FF_AUX_5_EGE_TRAINING				= W2.FF_AUX_5_EGE_TRAINING
,FF_AUX_6_OUTBOUND					= W2.FF_AUX_6_OUTBOUND
,FF_AUX_7_EMAIL						= W2.FF_AUX_7_EMAIL
,FF_AUX_8_QUEUE_WORK				= W2.FF_AUX_8_QUEUE_WORK
,FF_AUX_9_SYSTEM_DOWN				= W2.FF_AUX_9_SYSTEM_DOWN
,FF_AUX_10_EXCHANGE					= W2.FF_AUX_10_EXCHANGE
,FF_AUX_11_PERSONAL					= W2.FF_AUX_11_PERSONAL
,FF_TI_AUXTIME_12					= W2.FF_TI_AUXTIME_12
,FF_TI_AUXTIME_13					= W2.FF_TI_AUXTIME_13
,FF_TI_AUXTIME_14					= W2.FF_TI_AUXTIME_14
,FF_TI_AUXTIME_15					= W2.FF_TI_AUXTIME_15
,FF_TI_AUXTIME_16					= W2.FF_TI_AUXTIME_16
,FF_TI_AUXTIME_17					= W2.FF_TI_AUXTIME_17
,FF_TI_AUXTIME_18					= W2.FF_TI_AUXTIME_18
,FF_TI_AUXTIME_19					= W2.FF_TI_AUXTIME_19
,FF_TI_AUXTIME_20					= W2.FF_TI_AUXTIME_20
,FF_TI_AUXTIME_21					= W2.FF_TI_AUXTIME_21
,FF_TI_AUXTIME_22					= W2.FF_TI_AUXTIME_22
,FF_TI_AUXTIME_23					= W2.FF_TI_AUXTIME_23
,FF_TI_AUXTIME_24					= W2.FF_TI_AUXTIME_24
,FF_TI_AUXTIME_25					= W2.FF_TI_AUXTIME_25
,FF_TI_AUXTIME_26					= W2.FF_TI_AUXTIME_26
,FF_TI_AUXTIME_27					= W2.FF_TI_AUXTIME_27
,FF_TI_AUXTIME_28					= W2.FF_TI_AUXTIME_28
,FF_TI_AUXTIME_29					= W2.FF_TI_AUXTIME_29
,FF_TI_AUXTIME_30					= W2.FF_TI_AUXTIME_30
,FF_TI_AUXTIME_31					= W2.FF_TI_AUXTIME_31
,FF_TI_AUXTIME_32					= W2.FF_TI_AUXTIME_32
,FF_TI_AUXTIME_33					= W2.FF_TI_AUXTIME_33
,FF_TI_AUXTIME_34					= W2.FF_TI_AUXTIME_34
,FF_TI_AUXTIME_35					= W2.FF_TI_AUXTIME_35
,FF_TI_AUXTIME_36					= W2.FF_TI_AUXTIME_36
,FF_TI_AUXTIME_37					= W2.FF_TI_AUXTIME_37
,FF_TI_AUXTIME_38					= W2.FF_TI_AUXTIME_38
,FF_TI_AUXTIME_39					= W2.FF_TI_AUXTIME_39
,FF_TI_AUXTIME_40					= W2.FF_TI_AUXTIME_40
,FF_TI_AUXTIME_41					= W2.FF_TI_AUXTIME_41
,FF_TI_AUXTIME_42					= W2.FF_TI_AUXTIME_42
,FF_TI_AUXTIME_43					= W2.FF_TI_AUXTIME_43
,FF_TI_AUXTIME_44					= W2.FF_TI_AUXTIME_44
,FF_TI_AUXTIME_45					= W2.FF_TI_AUXTIME_45
,FF_TI_AUXTIME_46					= W2.FF_TI_AUXTIME_46
,FF_TI_AUXTIME_47					= W2.FF_TI_AUXTIME_47
,FF_TI_AUXTIME_48					= W2.FF_TI_AUXTIME_48
,FF_TI_AUXTIME_49					= W2.FF_TI_AUXTIME_49
,FF_TI_AUXTIME_50					= W2.FF_TI_AUXTIME_50
,FF_TI_AUXTIME_51					= W2.FF_TI_AUXTIME_51
,FF_TI_AUXTIME_52					= W2.FF_TI_AUXTIME_52
,FF_TI_AUXTIME_53					= W2.FF_TI_AUXTIME_53
,FF_TI_AUXTIME_54					= W2.FF_TI_AUXTIME_54
,FF_TI_AUXTIME_55					= W2.FF_TI_AUXTIME_55
,FF_TI_AUXTIME_56					= W2.FF_TI_AUXTIME_56
,FF_TI_AUXTIME_57					= W2.FF_TI_AUXTIME_57
,FF_TI_AUXTIME_58					= W2.FF_TI_AUXTIME_58
,FF_TI_AUXTIME_59					= W2.FF_TI_AUXTIME_59
,FF_TI_AUXTIME_60					= W2.FF_TI_AUXTIME_60
,FF_TI_AUXTIME_61					= W2.FF_TI_AUXTIME_61
,FF_TI_AUXTIME_62					= W2.FF_TI_AUXTIME_62
,FF_TI_AUXTIME_63					= W2.FF_TI_AUXTIME_63
,FF_TI_AUXTIME_64					= W2.FF_TI_AUXTIME_64
,FF_TI_AUXTIME_65					= W2.FF_TI_AUXTIME_65
,FF_TI_AUXTIME_66					= W2.FF_TI_AUXTIME_66
,FF_TI_AUXTIME_67					= W2.FF_TI_AUXTIME_67
,FF_TI_AUXTIME_68					= W2.FF_TI_AUXTIME_68
,FF_TI_AUXTIME_69					= W2.FF_TI_AUXTIME_69
,FF_TI_AUXTIME_70					= W2.FF_TI_AUXTIME_70
,FF_TI_AUXTIME_71					= W2.FF_TI_AUXTIME_71
,FF_TI_AUXTIME_72					= W2.FF_TI_AUXTIME_72
,FF_TI_AUXTIME_73					= W2.FF_TI_AUXTIME_73
,FF_TI_AUXTIME_74					= W2.FF_TI_AUXTIME_74
,FF_TI_AUXTIME_75					= W2.FF_TI_AUXTIME_75
,FF_TI_AUXTIME_76					= W2.FF_TI_AUXTIME_76
,FF_TI_AUXTIME_77					= W2.FF_TI_AUXTIME_77
,FF_TI_AUXTIME_78					= W2.FF_TI_AUXTIME_78
,FF_TI_AUXTIME_79					= W2.FF_TI_AUXTIME_79
,FF_TI_AUXTIME_80					= W2.FF_TI_AUXTIME_80
,FF_TI_AUXTIME_81					= W2.FF_TI_AUXTIME_81
,FF_TI_AUXTIME_82					= W2.FF_TI_AUXTIME_82
,FF_TI_AUXTIME_83					= W2.FF_TI_AUXTIME_83
,FF_TI_AUXTIME_84					= W2.FF_TI_AUXTIME_84
,FF_TI_AUXTIME_85					= W2.FF_TI_AUXTIME_85
,FF_TI_AUXTIME_86					= W2.FF_TI_AUXTIME_86
,FF_TI_AUXTIME_87					= W2.FF_TI_AUXTIME_87
,FF_TI_AUXTIME_88					= W2.FF_TI_AUXTIME_88
,FF_TI_AUXTIME_89					= W2.FF_TI_AUXTIME_89
,FF_TI_AUXTIME_90					= W2.FF_TI_AUXTIME_90
,FF_TI_AUXTIME_91					= W2.FF_TI_AUXTIME_91
,FF_TI_AUXTIME_92					= W2.FF_TI_AUXTIME_92
,FF_TI_AUXTIME_93					= W2.FF_TI_AUXTIME_93
,FF_TI_AUXTIME_94					= W2.FF_TI_AUXTIME_94
,FF_TI_AUXTIME_95					= W2.FF_TI_AUXTIME_95
,FF_TI_AUXTIME_96					= W2.FF_TI_AUXTIME_96
,FF_TI_AUXTIME_97					= W2.FF_TI_AUXTIME_97
,FF_TI_AUXTIME_98					= W2.FF_TI_AUXTIME_98
,FF_TI_AUXTIME_99					= W2.FF_TI_AUXTIME_99
,CMS_GROUP							= W2.CMS_GROUP
,DATA_DATE							= W2.DATA_DATE
,DATETIME_CT						= W2.DATETIME_CT
,DATETIME_PT						= W2.DATETIME_PT
,[DATETIME]							= W2.[DATETIME]
,HOUR_INTERVAL						= W2.HOUR_INTERVAL
,RESOURCE_NAME						= W2.RESOURCE_NAME
,STAFFED_SECS						= W2.STAFFED_SECS
,AVAILABLE_SECS						= W2.AVAILABLE_SECS
,ACD_SECS							= W2.ACD_SECS
,OTHER_SECS							= W2.OTHER_SECS
,ACW_SECS							= W2.ACW_SECS
,RING_SECS							= W2.RING_SECS
,AUX_0_DEFAULT_SECS					= W2.AUX_0_DEFAULT_SECS
,AUX_1_BREAK_SECS					= W2.AUX_1_BREAK_SECS
,AUX_2_COACHING_SECS				= W2.AUX_2_COACHING_SECS
,AUX_3_MEETING_SECS					= W2.AUX_3_MEETING_SECS
,AUX_4_PROJECT_SECS					= W2.AUX_4_PROJECT_SECS
,AUX_5_EGE_TRAINING_SECS			= W2.AUX_5_EGE_TRAINING_SECS
,AUX_6_OUTBOUND_SECS				= W2.AUX_6_OUTBOUND_SECS
,AUX_7_EMAIL_SECS					= W2.AUX_7_EMAIL_SECS
,AUX_8_QUEUE_WORK_SECS				= W2.AUX_8_QUEUE_WORK_SECS
,AUX_9_SYSTEM_DOWN_SECS				= W2.AUX_9_SYSTEM_DOWN_SECS
,AUX_10_EXCHANGE_SECS				= W2.AUX_10_EXCHANGE_SECS
,AUX_11_PERSONAL_SECS				= W2.AUX_11_PERSONAL_SECS
,AUX_34_SECS						= W2.AUX_34_SECS
,AUX_35_SECS						= W2.AUX_35_SECS
,AUX_37_SECS						= W2.AUX_37_SECS
,AUX_40_SECS						= W2.AUX_40_SECS
,OUTBOUND_SECS						= W2.OUTBOUND_SECS
,EMAIL_SECS							= W2.EMAIL_SECS
,PROJECT_SECS						= W2.PROJECT_SECS
,MEETING_SECS						= W2.MEETING_SECS
,TOTAL_AUX_SECS						= W2.TOTAL_AUX_SECS
,PROD_BILLING_SECS					= W2.PROD_BILLING_SECS
,AUTHORIZED_CSAT_SAT_KEY_SECS		= W2.AUTHORIZED_CSAT_SAT_KEY_SECS
,AUTHORIZED_RESOURCE_SECS			= W2.AUTHORIZED_RESOURCE_SECS
,LINE_OF_BUSINESS					= W2.LINE_OF_BUSINESS
,WEEKEND							= W2.WEEKEND
,CPROD								= W2.CPROD
,MINIMUM_GUARANTEE					= W2.MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES					= W2.AUTHORIZED_MINUTES
,[EMAIL]							= W2.EMAIL
--,ID_EXT							= W2.ID_EXT
,SCHEDULER_ACL_NAME					= W2.SCHEDULER_ACL_NAME
--,STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W2.CAL_DATE
,TENANT_KEY							= W2.TENANT_KEY
,AIR_DAY_TYPE						= W2.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W2.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES				= W2.MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE					= W2.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W2.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W2.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W2.INCLUDE_IN_CAS
,READY_FOR_XML						= W2.READY_FOR_XML
,SHOW_ID_EXTS						= W2.SHOW_ID_EXTS
,INVOICE_ID							= W2.INVOICE_ID

,SEQNO_ADDED_TIME					= W2.SEQNO_ADDED_TIME
,SEQNO								= W2.SEQNO
,FTP_FILE_NAME						= W2.FTP_FILE_NAME

--,WS_ROW_CREATED_TIME				= NULL
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_EGENCIA_INVOICING_2  W2
INNER JOIN      WSOL_TB_IMPORTS_EGENCIA_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
														AND G.ID_EXT                         = W2.ID_EXT
														AND G.FF_LOGIN_ID					 = W2.FF_LOGIN_ID

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
  AND G.ID_EXT							= W2.ID_EXT
  AND G.FF_LOGIN_ID						= W2.FF_LOGIN_ID

--=============================================
--INSERT INTO PERMANENT IMPORT TABLE:
--=============================================
INSERT INTO WSOL_TB_IMPORTS_EGENCIA_INVOICING
(
 FF_LOGIN_ID
,FF_HOUR
,FF_STAFFED_TIME
,FF_AVAIL_TIME
,FF_ACD_TIME
,FF_OTHER_TIME
,FF_ACW_TIME
,FF_AGENT_RING_TIME
,FF_AUX_TIME
,FF_AUX_0_DEFAULT
,FF_AUX_1_BREAK
,FF_AUX_2_COACHING
,FF_AUX_3_MEETING
,FF_AUX_4_PROJECT
,FF_AUX_5_EGE_TRAINING
,FF_AUX_6_OUTBOUND
,FF_AUX_7_EMAIL
,FF_AUX_8_QUEUE_WORK
,FF_AUX_9_SYSTEM_DOWN
,FF_AUX_10_EXCHANGE
,FF_AUX_11_PERSONAL
,FF_TI_AUXTIME_12
,FF_TI_AUXTIME_13
,FF_TI_AUXTIME_14
,FF_TI_AUXTIME_15
,FF_TI_AUXTIME_16
,FF_TI_AUXTIME_17
,FF_TI_AUXTIME_18
,FF_TI_AUXTIME_19
,FF_TI_AUXTIME_20
,FF_TI_AUXTIME_21
,FF_TI_AUXTIME_22
,FF_TI_AUXTIME_23
,FF_TI_AUXTIME_24
,FF_TI_AUXTIME_25
,FF_TI_AUXTIME_26
,FF_TI_AUXTIME_27
,FF_TI_AUXTIME_28
,FF_TI_AUXTIME_29
,FF_TI_AUXTIME_30
,FF_TI_AUXTIME_31
,FF_TI_AUXTIME_32
,FF_TI_AUXTIME_33
,FF_TI_AUXTIME_34
,FF_TI_AUXTIME_35
,FF_TI_AUXTIME_36
,FF_TI_AUXTIME_37
,FF_TI_AUXTIME_38
,FF_TI_AUXTIME_39
,FF_TI_AUXTIME_40
,FF_TI_AUXTIME_41
,FF_TI_AUXTIME_42
,FF_TI_AUXTIME_43
,FF_TI_AUXTIME_44
,FF_TI_AUXTIME_45
,FF_TI_AUXTIME_46
,FF_TI_AUXTIME_47
,FF_TI_AUXTIME_48
,FF_TI_AUXTIME_49
,FF_TI_AUXTIME_50
,FF_TI_AUXTIME_51
,FF_TI_AUXTIME_52
,FF_TI_AUXTIME_53
,FF_TI_AUXTIME_54
,FF_TI_AUXTIME_55
,FF_TI_AUXTIME_56
,FF_TI_AUXTIME_57
,FF_TI_AUXTIME_58
,FF_TI_AUXTIME_59
,FF_TI_AUXTIME_60
,FF_TI_AUXTIME_61
,FF_TI_AUXTIME_62
,FF_TI_AUXTIME_63
,FF_TI_AUXTIME_64
,FF_TI_AUXTIME_65
,FF_TI_AUXTIME_66
,FF_TI_AUXTIME_67
,FF_TI_AUXTIME_68
,FF_TI_AUXTIME_69
,FF_TI_AUXTIME_70
,FF_TI_AUXTIME_71
,FF_TI_AUXTIME_72
,FF_TI_AUXTIME_73
,FF_TI_AUXTIME_74
,FF_TI_AUXTIME_75
,FF_TI_AUXTIME_76
,FF_TI_AUXTIME_77
,FF_TI_AUXTIME_78
,FF_TI_AUXTIME_79
,FF_TI_AUXTIME_80
,FF_TI_AUXTIME_81
,FF_TI_AUXTIME_82
,FF_TI_AUXTIME_83
,FF_TI_AUXTIME_84
,FF_TI_AUXTIME_85
,FF_TI_AUXTIME_86
,FF_TI_AUXTIME_87
,FF_TI_AUXTIME_88
,FF_TI_AUXTIME_89
,FF_TI_AUXTIME_90
,FF_TI_AUXTIME_91
,FF_TI_AUXTIME_92
,FF_TI_AUXTIME_93
,FF_TI_AUXTIME_94
,FF_TI_AUXTIME_95
,FF_TI_AUXTIME_96
,FF_TI_AUXTIME_97
,FF_TI_AUXTIME_98
,FF_TI_AUXTIME_99
,CMS_GROUP
,DATA_DATE
,DATETIME_CT
,DATETIME_PT
,[DATETIME]
,HOUR_INTERVAL
,RESOURCE_NAME
,STAFFED_SECS
,AVAILABLE_SECS
,ACD_SECS
,OTHER_SECS
,ACW_SECS
,RING_SECS
,AUX_0_DEFAULT_SECS
,AUX_1_BREAK_SECS
,AUX_2_COACHING_SECS
,AUX_3_MEETING_SECS
,AUX_4_PROJECT_SECS
,AUX_5_EGE_TRAINING_SECS
,AUX_6_OUTBOUND_SECS
,AUX_7_EMAIL_SECS
,AUX_8_QUEUE_WORK_SECS
,AUX_9_SYSTEM_DOWN_SECS
,AUX_10_EXCHANGE_SECS
,AUX_11_PERSONAL_SECS
,AUX_34_SECS
,AUX_35_SECS
,AUX_37_SECS
,AUX_40_SECS
,OUTBOUND_SECS
,EMAIL_SECS
,PROJECT_SECS
,MEETING_SECS
,TOTAL_AUX_SECS
,PROD_BILLING_SECS
,AUTHORIZED_CSAT_SAT_KEY_SECS
,AUTHORIZED_RESOURCE_SECS
,LINE_OF_BUSINESS
,WEEKEND
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES
,[EMAIL]
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W2.FF_LOGIN_ID
,W2.FF_HOUR
,W2.FF_STAFFED_TIME
,W2.FF_AVAIL_TIME
,W2.FF_ACD_TIME
,W2.FF_OTHER_TIME
,W2.FF_ACW_TIME
,W2.FF_AGENT_RING_TIME
,W2.FF_AUX_TIME
,W2.FF_AUX_0_DEFAULT
,W2.FF_AUX_1_BREAK
,W2.FF_AUX_2_COACHING
,W2.FF_AUX_3_MEETING
,W2.FF_AUX_4_PROJECT
,W2.FF_AUX_5_EGE_TRAINING
,W2.FF_AUX_6_OUTBOUND
,W2.FF_AUX_7_EMAIL
,W2.FF_AUX_8_QUEUE_WORK
,W2.FF_AUX_9_SYSTEM_DOWN
,W2.FF_AUX_10_EXCHANGE
,W2.FF_AUX_11_PERSONAL
,W2.FF_TI_AUXTIME_12
,W2.FF_TI_AUXTIME_13
,W2.FF_TI_AUXTIME_14
,W2.FF_TI_AUXTIME_15
,W2.FF_TI_AUXTIME_16
,W2.FF_TI_AUXTIME_17
,W2.FF_TI_AUXTIME_18
,W2.FF_TI_AUXTIME_19
,W2.FF_TI_AUXTIME_20
,W2.FF_TI_AUXTIME_21
,W2.FF_TI_AUXTIME_22
,W2.FF_TI_AUXTIME_23
,W2.FF_TI_AUXTIME_24
,W2.FF_TI_AUXTIME_25
,W2.FF_TI_AUXTIME_26
,W2.FF_TI_AUXTIME_27
,W2.FF_TI_AUXTIME_28
,W2.FF_TI_AUXTIME_29
,W2.FF_TI_AUXTIME_30
,W2.FF_TI_AUXTIME_31
,W2.FF_TI_AUXTIME_32
,W2.FF_TI_AUXTIME_33
,W2.FF_TI_AUXTIME_34
,W2.FF_TI_AUXTIME_35
,W2.FF_TI_AUXTIME_36
,W2.FF_TI_AUXTIME_37
,W2.FF_TI_AUXTIME_38
,W2.FF_TI_AUXTIME_39
,W2.FF_TI_AUXTIME_40
,W2.FF_TI_AUXTIME_41
,W2.FF_TI_AUXTIME_42
,W2.FF_TI_AUXTIME_43
,W2.FF_TI_AUXTIME_44
,W2.FF_TI_AUXTIME_45
,W2.FF_TI_AUXTIME_46
,W2.FF_TI_AUXTIME_47
,W2.FF_TI_AUXTIME_48
,W2.FF_TI_AUXTIME_49
,W2.FF_TI_AUXTIME_50
,W2.FF_TI_AUXTIME_51
,W2.FF_TI_AUXTIME_52
,W2.FF_TI_AUXTIME_53
,W2.FF_TI_AUXTIME_54
,W2.FF_TI_AUXTIME_55
,W2.FF_TI_AUXTIME_56
,W2.FF_TI_AUXTIME_57
,W2.FF_TI_AUXTIME_58
,W2.FF_TI_AUXTIME_59
,W2.FF_TI_AUXTIME_60
,W2.FF_TI_AUXTIME_61
,W2.FF_TI_AUXTIME_62
,W2.FF_TI_AUXTIME_63
,W2.FF_TI_AUXTIME_64
,W2.FF_TI_AUXTIME_65
,W2.FF_TI_AUXTIME_66
,W2.FF_TI_AUXTIME_67
,W2.FF_TI_AUXTIME_68
,W2.FF_TI_AUXTIME_69
,W2.FF_TI_AUXTIME_70
,W2.FF_TI_AUXTIME_71
,W2.FF_TI_AUXTIME_72
,W2.FF_TI_AUXTIME_73
,W2.FF_TI_AUXTIME_74
,W2.FF_TI_AUXTIME_75
,W2.FF_TI_AUXTIME_76
,W2.FF_TI_AUXTIME_77
,W2.FF_TI_AUXTIME_78
,W2.FF_TI_AUXTIME_79
,W2.FF_TI_AUXTIME_80
,W2.FF_TI_AUXTIME_81
,W2.FF_TI_AUXTIME_82
,W2.FF_TI_AUXTIME_83
,W2.FF_TI_AUXTIME_84
,W2.FF_TI_AUXTIME_85
,W2.FF_TI_AUXTIME_86
,W2.FF_TI_AUXTIME_87
,W2.FF_TI_AUXTIME_88
,W2.FF_TI_AUXTIME_89
,W2.FF_TI_AUXTIME_90
,W2.FF_TI_AUXTIME_91
,W2.FF_TI_AUXTIME_92
,W2.FF_TI_AUXTIME_93
,W2.FF_TI_AUXTIME_94
,W2.FF_TI_AUXTIME_95
,W2.FF_TI_AUXTIME_96
,W2.FF_TI_AUXTIME_97
,W2.FF_TI_AUXTIME_98
,W2.FF_TI_AUXTIME_99
,W2.CMS_GROUP
,W2.DATA_DATE
,W2.DATETIME_CT
,W2.DATETIME_PT
,W2.[DATETIME]
,W2.HOUR_INTERVAL
,W2.RESOURCE_NAME
,W2.STAFFED_SECS
,W2.AVAILABLE_SECS
,W2.ACD_SECS
,W2.OTHER_SECS
,W2.ACW_SECS
,W2.RING_SECS
,W2.AUX_0_DEFAULT_SECS
,W2.AUX_1_BREAK_SECS
,W2.AUX_2_COACHING_SECS
,W2.AUX_3_MEETING_SECS
,W2.AUX_4_PROJECT_SECS
,W2.AUX_5_EGE_TRAINING_SECS
,W2.AUX_6_OUTBOUND_SECS
,W2.AUX_7_EMAIL_SECS
,W2.AUX_8_QUEUE_WORK_SECS
,W2.AUX_9_SYSTEM_DOWN_SECS
,W2.AUX_10_EXCHANGE_SECS
,W2.AUX_11_PERSONAL_SECS
,W2.AUX_34_SECS
,W2.AUX_35_SECS
,W2.AUX_37_SECS
,W2.AUX_40_SECS
,W2.OUTBOUND_SECS
,W2.EMAIL_SECS
,W2.PROJECT_SECS
,W2.MEETING_SECS
,W2.TOTAL_AUX_SECS
,W2.PROD_BILLING_SECS
,W2.AUTHORIZED_CSAT_SAT_KEY_SECS
,W2.AUTHORIZED_RESOURCE_SECS
,W2.LINE_OF_BUSINESS
,W2.WEEKEND
,W2.CPROD
,W2.MINIMUM_GUARANTEE
,W2.AUTHORIZED_MINUTES
,W2.[EMAIL]
,W2.ID_EXT
,W2.SCHEDULER_ACL_NAME
,W2.STD_TENANT_START_DATE_TIME_KEY
,W2.CAL_DATE
,W2.TENANT_KEY
,W2.AIR_DAY_TYPE
,W2.AIR_ACW_FONT_COLOR
,W2.MIN_GUARANTEE_MINUTES
,W2.MIN_GUARANTEE_TYPE
,W2.AUTHORIZED_TO_INVOICE_TYPE
,W2.HAS_HOLIDAYS
,W2.INCLUDE_IN_CAS
,W2.READY_FOR_XML
,W2.SHOW_ID_EXTS
,W2.INVOICE_ID
,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME
,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_EGENCIA_INVOICING_2  W2

LEFT JOIN       WSOL_TB_IMPORTS_EGENCIA_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
														AND G.ID_EXT                         = W2.ID_EXT
														AND G.FF_LOGIN_ID					 = W2.FF_LOGIN_ID

WHERE (G.FF_LOGIN_ID					IS NULL AND ISNULL(W2.FF_LOGIN_ID					,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W2.STD_TENANT_START_DATE_TIME_KEY, 0) <>  0 )
--AND (G.INVOICE_ID						IS NULL AND ISNULL(W2.INVOICE_ID					,'') <> '' )			
--AND (G.ID_EXT							IS NULL AND ISNULL(W2.ID_EXT						,'') <> '' )

--	SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING ORDER BY SEQNO

--===============================================================
SET DATEFIRST 1  -- = Monday
--===============================================================

IF OBJECT_ID('TEMPDB..#DT_EASY_WEEKS') IS NOT NULL BEGIN
   DROP TABLE #DT_EASY_WEEKS
END
CREATE TABLE #DT_EASY_WEEKS
(CAL_DATE_STRING		VARCHAR(10)
,CAL_WEEK_START_DATE	DATETIME
,CAL_WEEK_END_DATE		DATETIME
,PAY_CYCLE_CLOSURE_DATE DATETIME
)
INSERT INTO #DT_EASY_WEEKS
SELECT
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
FROM DATE_TIME DT
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
GROUP BY 
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
--===========================
UPDATE #DT_EASY_WEEKS SET CAL_WEEK_END_DATE = DATEADD(DD,6,CAL_WEEK_START_DATE)

UPDATE #DT_EASY_WEEKS SET
 PAY_CYCLE_CLOSURE_DATE = CASE WHEN DATEPART(DD,@DTM_MAX) >= 1 AND DATEPART(DD,@DTM_MAX) < 16 THEN
									CAST(CONVERT(VARCHAR(10), CONVERT(VARCHAR(2),MONTH(@DTM_MAX)) + CONVERT(VARCHAR(4),'/15/') + CONVERT(VARCHAR(4),YEAR(@DTM_MAX)),101) AS DATETIME)
							   WHEN DATEPART(DD,@DTM_MAX) > 15 THEN 
									DATEADD(D,-1,DATEADD(M,DATEDIFF(M,0,@DTM_MAX)+1,0))
							   END 
							   
 --SELECT * FROM #DT_EASY_WEEKS ORDER BY CAL_DATE_STRING

--==================================
--	CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA
END
CREATE TABLE #WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](100) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.FF_LOGIN_ID  --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,'No'	--CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING		--[DATE]             
,DT.LABEL_HH24 + ':00'	--HOD_INTERVAL

,AIA.STAFFED_SECS		--AU_DK_LOGGED_IN_DURATION
,AIA.AVAILABLE_SECS		--AU_DK_AVAILABLE_DURATION

,AIA.ACD_SECS			--AU_DK_TALK_DURATION
,0						--AU_DK_IB_TALK_DURATION
,0						--AU_DK_OB_TALK_DURATION

,AIA.ACW_SECS			--AU_DK_CONVENTIONAL_ACW
,CASE WHEN AIA.LINE_OF_BUSINESS IN ('Resource','SME') THEN
		AIA.RING_SECS + AIA.AUX_1_BREAK_SECS + AIA.AUX_2_COACHING_SECS + AIA.AUX_5_EGE_TRAINING_SECS + 
		AIA.AUX_8_QUEUE_WORK_SECS + AIA.AUX_9_SYSTEM_DOWN_SECS + AUX_11_PERSONAL_SECS
	  ELSE
		AIA.RING_SECS + AIA.AUX_1_BREAK_SECS + AIA.AUX_2_COACHING_SECS + AIA.AUX_5_EGE_TRAINING_SECS +
		AIA.AUX_8_QUEUE_WORK_SECS + AIA.AUX_9_SYSTEM_DOWN_SECS + AUX_11_PERSONAL_SECS +
		AIA.AUX_3_MEETING_SECS + AIA.AUX_4_PROJECT_SECS + AUX_37_SECS + AUX_40_SECS
	  END		        --AU_DK_NR_DURATION
,0												--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0												--AU_DK_ADJUSTED_NR_DURATION
,AIA.CPROD										--AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.CPROD										--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS  

,0		--AU_DK_XFER_COUNT
,0		--AU_DK_HOLD_COUNT
,0		--AU_DK_CONFERENCE_COUNT
,0		--AU_DK_CONSULT_COUNT
,0		--AU_DK_PUP_COUNT

,0		--AU_DK_OFFERED_COUNT
,0		--AU_DK_HANDLED_COUNT
,0		--AU_DK_IB_HANDLE_COUNT
,0		--AU_DK_OB_HANDLE_COUNT
													
,0		--AU_DK_RONA_COUNT
,0		--AU_DK_AWR_COUNT

,AIA.MINIMUM_GUARANTEE	--MINIMUM_GUARANTEE
,AIA.AUTHORIZED_MINUTES	--AUTHORIZED_TO_INVOICE

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_MINUTES
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID  --CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID 
,AIA.RESOURCE_NAME
,NULL			--AIA.AIRITKDUR
,NULL			--AIA.AIRIACDUR
,dbo.GETDATE()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL			--	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
--SELECT TOP 1000 *
FROM            WSOL_TB_IMPORTS_EGENCIA_INVOICING_2            AIA 
INNER JOIN      WSOL_TB_IMPORTS_EGENCIA_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      WSOL_TB_IMPORTS_EGENCIA_SD_INVOICE_GROUPS      CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME									   DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS								   DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')
  AND (ISNULL(AIA.RESOURCE_NAME,'') <> '')
  --AND AIA.AUT2 <> 0.00											--<<<<<---- FILTER OUT RECORDS WHERE AUTHORIZED TIME = 0.00


--==========================================================================
--UPDATE WSOL_TB_...UV_ANT_AIA TABLE:
--==========================================================================
UPDATE WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA SET
 [PLATFORM]							= W1.[PLATFORM]
,[STATUS]							= W1.[STATUS]
--,INVOICE_MAP_KEY					= W1.INVOICE_MAP_KEY
,FIELD_NAME							= W1.FIELD_NAME
,SCHEDULER_PROJECT_ID				= W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME					= W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION					= W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID			= W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME			= W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID				= W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME			= W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID			= W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID	= W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID		= W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY			= W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID					= W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID					= W1.HOLIDAY_INVOICE_ID
,HOLIDAY							= W1.HOLIDAY
,FILE_FORMAT_OF_PUSH				= W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID		= W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL							= W1.NEW_ACL
,CURRENT_CATS						= W1.CURRENT_CATS
,CATS_ID							= W1.CATS_ID
,PATS_ID							= W1.PATS_ID
,SMART_ELIGIBLE						= W1.SMART_ELIGIBLE
,SMART_TIER_1						= W1.SMART_TIER_1
,SMART_TIER_2						= W1.SMART_TIER_2
,SMART_TIER_3						= W1.SMART_TIER_3
,INTERVAL							= W1.INTERVAL
,[DATE]								= W1.[DATE]
,HOD_INTERVAL						= W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION			= W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION			= W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION				= W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION				= W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION				= W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW				= W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION					= W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT					= W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT					= W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT				= W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT				= W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT					= W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT				= W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT				= W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT				= W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT				= W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT					= W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT					= W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE					= W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE				= W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE					= W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE				= W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
,FTP_FILE_NAME						= W1.FTP_FILE_NAME
,EMAIL								= W1.EMAIL

--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W1.CAL_DATE
,TENANT_KEY							= W1.TENANT_KEY
,AIR_DAY_TYPE						= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE					= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE					= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W1.INCLUDE_IN_CAS
,READY_FOR_XML						= W1.READY_FOR_XML
,SHOW_ID_EXTS						= W1.SHOW_ID_EXTS
,INVOICE_ID							= W1.INVOICE_ID
,RESOURCE_NAME						= W1.RESOURCE_NAME

,AIRITKDUR							= W1.AIRITKDUR
,AIRIACDUR							= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

FROM            #WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA   W1

INNER JOIN      WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
														 AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
														 AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )


--=====================================================
--INSERT TMP TABLE FIELDS INTO WSOL_TB_... TABLE:
--=====================================================
INSERT INTO [WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA   AIA
LEFT JOIN       WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
														 AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
														 AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )


--===============================================
--	CREATE TMP TABLE FOR WEEKEND RECORDS:																<<<<<<<<<<<< WEEKEND RECORDS <<<<<<<<<<<<<<<<<<<<<<<<<<
--===============================================
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA_WEEKEND') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA_WEEKEND
END
CREATE TABLE #WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA_WEEKEND
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](100) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA_WEEKEND
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.FF_LOGIN_ID  --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,'EWE'											--AIASD.ACD_ID_EXTENSION	<<<<< WEEKEND ONLY
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,'Egencia W'									--AIASD.INVOICE_SYSTEM_ID	<<<<< WEEKEND ONLY
,AIASD.HOLIDAY_INVOICE_ID
,'No'	--CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING		--[DATE]             
,DT.LABEL_HH24 + ':00'	--HOD_INTERVAL

,AIA.STAFFED_SECS		--AU_DK_LOGGED_IN_DURATION
,AIA.AVAILABLE_SECS		--AU_DK_AVAILABLE_DURATION

,AIA.ACD_SECS			--AU_DK_TALK_DURATION
,0						--AU_DK_IB_TALK_DURATION
,0						--AU_DK_OB_TALK_DURATION

,AIA.ACW_SECS			--AU_DK_CONVENTIONAL_ACW
,CASE WHEN AIA.LINE_OF_BUSINESS IN ('Resource','SME') THEN
		AIA.RING_SECS + AIA.AUX_1_BREAK_SECS + AIA.AUX_2_COACHING_SECS + AIA.AUX_5_EGE_TRAINING_SECS + 
		AIA.AUX_8_QUEUE_WORK_SECS + AIA.AUX_9_SYSTEM_DOWN_SECS + AUX_11_PERSONAL_SECS
	  ELSE
		AIA.RING_SECS + AIA.AUX_1_BREAK_SECS + AIA.AUX_2_COACHING_SECS + AIA.AUX_5_EGE_TRAINING_SECS +
		AIA.AUX_8_QUEUE_WORK_SECS + AIA.AUX_9_SYSTEM_DOWN_SECS + AUX_11_PERSONAL_SECS +
		AIA.AUX_3_MEETING_SECS + AIA.AUX_4_PROJECT_SECS + AUX_37_SECS + AUX_40_SECS
	  END		        --AU_DK_NR_DURATION
,0												--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0												--AU_DK_ADJUSTED_NR_DURATION
,AIA.CPROD										--AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.CPROD										--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS  

,0		--AU_DK_XFER_COUNT
,0		--AU_DK_HOLD_COUNT
,0		--AU_DK_CONFERENCE_COUNT
,0		--AU_DK_CONSULT_COUNT
,0		--AU_DK_PUP_COUNT

,0		--AU_DK_OFFERED_COUNT
,0		--AU_DK_HANDLED_COUNT
,0		--AU_DK_IB_HANDLE_COUNT
,0		--AU_DK_OB_HANDLE_COUNT
													
,0		--AU_DK_RONA_COUNT
,0		--AU_DK_AWR_COUNT

,AIA.MINIMUM_GUARANTEE	--MINIMUM_GUARANTEE
,AIA.AUTHORIZED_MINUTES	--AUTHORIZED_TO_INVOICE

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_MINUTES
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,'Egencia W'	--AIA.INVOICE_ID  --CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID	<<<<< WEEKEND ONLY
,AIA.RESOURCE_NAME
,NULL			--AIA.AIRITKDUR
,NULL			--AIA.AIRIACDUR
,dbo.GETDATE()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL			--	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
--SELECT TOP 1000 *
FROM            WSOL_TB_IMPORTS_EGENCIA_INVOICING_2            AIA 
INNER JOIN      WSOL_TB_IMPORTS_EGENCIA_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      WSOL_TB_IMPORTS_EGENCIA_SD_INVOICE_GROUPS      CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME									   DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS								   DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')
  AND (ISNULL(AIA.RESOURCE_NAME,'') <> '')
  AND AIA.WEEKEND = 'Y'												--<<<<<---- WEEKEND ONLY RECORDS
  --AND AIA.AUT2 <> 0.00											--<<<<<---- FILTER OUT RECORDS WHERE AUTHORIZED TIME = 0.00


--==========================================================================
--UPDATE WSOL_TB_...UV_ANT_AIA TABLE:
--==========================================================================
UPDATE WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA SET
 [PLATFORM]							= W1.[PLATFORM]
,[STATUS]							= W1.[STATUS]
--,INVOICE_MAP_KEY					= W1.INVOICE_MAP_KEY
,FIELD_NAME							= W1.FIELD_NAME
,SCHEDULER_PROJECT_ID				= W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME					= W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION					= W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID			= W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME			= W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID				= W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME			= W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID			= W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID	= W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID		= W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY			= W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID					= W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID					= W1.HOLIDAY_INVOICE_ID
,HOLIDAY							= W1.HOLIDAY
,FILE_FORMAT_OF_PUSH				= W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID		= W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL							= W1.NEW_ACL
,CURRENT_CATS						= W1.CURRENT_CATS
,CATS_ID							= W1.CATS_ID
,PATS_ID							= W1.PATS_ID
,SMART_ELIGIBLE						= W1.SMART_ELIGIBLE
,SMART_TIER_1						= W1.SMART_TIER_1
,SMART_TIER_2						= W1.SMART_TIER_2
,SMART_TIER_3						= W1.SMART_TIER_3
,INTERVAL							= W1.INTERVAL
,[DATE]								= W1.[DATE]
,HOD_INTERVAL						= W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION			= W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION			= W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION				= W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION				= W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION				= W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW				= W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION					= W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT					= W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT					= W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT				= W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT				= W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT					= W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT				= W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT				= W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT				= W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT				= W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT					= W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT					= W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE					= W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE				= W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE					= W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE				= W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
,FTP_FILE_NAME						= W1.FTP_FILE_NAME
,EMAIL								= W1.EMAIL

--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W1.CAL_DATE
,TENANT_KEY							= W1.TENANT_KEY
,AIR_DAY_TYPE						= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE					= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE					= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W1.INCLUDE_IN_CAS
,READY_FOR_XML						= W1.READY_FOR_XML
,SHOW_ID_EXTS						= W1.SHOW_ID_EXTS
,INVOICE_ID							= W1.INVOICE_ID
,RESOURCE_NAME						= W1.RESOURCE_NAME

,AIRITKDUR							= W1.AIRITKDUR
,AIRIACDUR							= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

FROM            #WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA_WEEKEND   W1

INNER JOIN      WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA			  UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
																 AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
																 AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )


--=====================================================
--INSERT TMP TABLE FIELDS INTO WSOL_TB_... TABLE:
--=====================================================
INSERT INTO [WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA_WEEKEND   AIA
LEFT JOIN       WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA			  UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
																 AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
																 AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )


--===============================================
--	CREATE TMP TABLE FOR HOLIDAY RECORDS:																<<<<<<<<<<<< HOLIDAY RECORDS <<<<<<<<<<<<<<<<<<<<<<<<<<
--===============================================
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA_HOLIDAY') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA_HOLIDAY
END
CREATE TABLE #WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA_HOLIDAY
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](100) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA_HOLIDAY
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.FF_LOGIN_ID  --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,'EGH'											--AIASD.ACD_ID_EXTENSION	<<<<< HOLIDAY ONLY
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,'Egencia H'									--AIASD.INVOICE_SYSTEM_ID	<<<<< HOLIDAY ONLY
,AIASD.HOLIDAY_INVOICE_ID
,'Yes'	--CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING		--[DATE]             
,DT.LABEL_HH24 + ':00'	--HOD_INTERVAL

,AIA.STAFFED_SECS		--AU_DK_LOGGED_IN_DURATION
,AIA.AVAILABLE_SECS		--AU_DK_AVAILABLE_DURATION

,AIA.ACD_SECS			--AU_DK_TALK_DURATION
,0						--AU_DK_IB_TALK_DURATION
,0						--AU_DK_OB_TALK_DURATION

,AIA.ACW_SECS			--AU_DK_CONVENTIONAL_ACW
,CASE WHEN AIA.LINE_OF_BUSINESS IN ('Resource','SME') THEN
		AIA.RING_SECS + AIA.AUX_1_BREAK_SECS + AIA.AUX_2_COACHING_SECS + AIA.AUX_5_EGE_TRAINING_SECS + 
		AIA.AUX_8_QUEUE_WORK_SECS + AIA.AUX_9_SYSTEM_DOWN_SECS + AUX_11_PERSONAL_SECS
	  ELSE
		AIA.RING_SECS + AIA.AUX_1_BREAK_SECS + AIA.AUX_2_COACHING_SECS + AIA.AUX_5_EGE_TRAINING_SECS +
		AIA.AUX_8_QUEUE_WORK_SECS + AIA.AUX_9_SYSTEM_DOWN_SECS + AUX_11_PERSONAL_SECS +
		AIA.AUX_3_MEETING_SECS + AIA.AUX_4_PROJECT_SECS + AUX_37_SECS + AUX_40_SECS
	  END		        --AU_DK_NR_DURATION
,0												--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0												--AU_DK_ADJUSTED_NR_DURATION
,AIA.CPROD										--AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.CPROD										--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS  

,0		--AU_DK_XFER_COUNT
,0		--AU_DK_HOLD_COUNT
,0		--AU_DK_CONFERENCE_COUNT
,0		--AU_DK_CONSULT_COUNT
,0		--AU_DK_PUP_COUNT

,0		--AU_DK_OFFERED_COUNT
,0		--AU_DK_HANDLED_COUNT
,0		--AU_DK_IB_HANDLE_COUNT
,0		--AU_DK_OB_HANDLE_COUNT
													
,0		--AU_DK_RONA_COUNT
,0		--AU_DK_AWR_COUNT

,AIA.MINIMUM_GUARANTEE	--MINIMUM_GUARANTEE
,AIA.AUTHORIZED_MINUTES	--AUTHORIZED_TO_INVOICE

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_MINUTES
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,'Egencia H'	--AIA.INVOICE_ID  --CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID	<<<<< HOLIDAY ONLY
,AIA.RESOURCE_NAME
,NULL			--AIA.AIRITKDUR
,NULL			--AIA.AIRIACDUR
,dbo.GETDATE()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL			--	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
--SELECT TOP 1000 *
FROM            WSOL_TB_IMPORTS_EGENCIA_INVOICING_2            AIA 
INNER JOIN      WSOL_TB_IMPORTS_EGENCIA_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      WSOL_TB_IMPORTS_EGENCIA_SD_INVOICE_GROUPS      CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME									   DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS								   DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')
  AND (ISNULL(AIA.RESOURCE_NAME,'') <> '')
  AND AIA.AIR_DAY_TYPE = 'H'										--<<<<<---- HOLIDAY ONLY RECORDS
  --AND AIA.AUT2 <> 0.00											--<<<<<---- FILTER OUT RECORDS WHERE AUTHORIZED TIME = 0.00


--==========================================================================
--UPDATE WSOL_TB_...UV_ANT_AIA TABLE:
--==========================================================================
UPDATE WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA SET
 [PLATFORM]							= W1.[PLATFORM]
,[STATUS]							= W1.[STATUS]
--,INVOICE_MAP_KEY					= W1.INVOICE_MAP_KEY
,FIELD_NAME							= W1.FIELD_NAME
,SCHEDULER_PROJECT_ID				= W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME					= W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION					= W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID			= W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME			= W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID				= W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME			= W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID			= W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID	= W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID		= W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY			= W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID					= W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID					= W1.HOLIDAY_INVOICE_ID
,HOLIDAY							= W1.HOLIDAY
,FILE_FORMAT_OF_PUSH				= W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID		= W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL							= W1.NEW_ACL
,CURRENT_CATS						= W1.CURRENT_CATS
,CATS_ID							= W1.CATS_ID
,PATS_ID							= W1.PATS_ID
,SMART_ELIGIBLE						= W1.SMART_ELIGIBLE
,SMART_TIER_1						= W1.SMART_TIER_1
,SMART_TIER_2						= W1.SMART_TIER_2
,SMART_TIER_3						= W1.SMART_TIER_3
,INTERVAL							= W1.INTERVAL
,[DATE]								= W1.[DATE]
,HOD_INTERVAL						= W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION			= W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION			= W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION				= W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION				= W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION				= W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW				= W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION					= W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT					= W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT					= W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT				= W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT				= W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT					= W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT				= W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT				= W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT				= W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT				= W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT					= W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT					= W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE					= W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE				= W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE					= W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE				= W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
,FTP_FILE_NAME						= W1.FTP_FILE_NAME
,EMAIL								= W1.EMAIL

--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W1.CAL_DATE
,TENANT_KEY							= W1.TENANT_KEY
,AIR_DAY_TYPE						= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE					= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE					= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W1.INCLUDE_IN_CAS
,READY_FOR_XML						= W1.READY_FOR_XML
,SHOW_ID_EXTS						= W1.SHOW_ID_EXTS
,INVOICE_ID							= W1.INVOICE_ID
,RESOURCE_NAME						= W1.RESOURCE_NAME

,AIRITKDUR							= W1.AIRITKDUR
,AIRIACDUR							= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

FROM            #WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA_HOLIDAY   W1

INNER JOIN      WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA			  UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
																 AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
																 AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )


--=====================================================
--INSERT TMP TABLE FIELDS INTO WSOL_TB_... TABLE:
--=====================================================
INSERT INTO [WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA_HOLIDAY   AIA
LEFT JOIN       WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA			  UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
																 AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
																 AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )

--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_EGENCIA_INVOICING_IMPORT_UPDATE]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_EGENCIA_INVOICING_IMPORT_UPDATE]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PROCESS_TYPE       VARCHAR(4)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_EGENCIA_INVOICING_IMPORT_UPDATE] '10/01/2017','10/09/2017','AUTO'

--========================================
-- SET DATE VARIABLES
--========================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @PROCESS_TYPE = 'AUTO'
	BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE 
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),DATEADD(DD,-1,DBO.GETDATE()),101) AS DATETIME)	-- SET TO YESTERDAY --CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE 
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--	SELECT @DTM_BEG, @DTM_END
--	SELECT * FROM WSOL_TB_IMPORTS_EGENCIA_INVOICING ORDER BY SEQNO
--=========================================================================
--CREATE TMP TABLE:
--=========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_EGENCIA_INVOICING_AGGREGATE_CPROD') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_EGENCIA_INVOICING_AGGREGATE_CPROD
END
CREATE TABLE #IMPORTS_EGENCIA_INVOICING_AGGREGATE_CPROD
(LOGIN_ID				VARCHAR(200)
,ID_EXT					VARCHAR(3)
,CPROD_MINUTES			DECIMAL(10,2)
,INVOICE_ID				VARCHAR(50)
)

--========================================================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================================================
    INSERT INTO #IMPORTS_EGENCIA_INVOICING_AGGREGATE_CPROD
	SELECT 
	 UA.LOGIN_ID					AS LOGIN_ID
	,UA.ID_EXT						AS ID_EXT
	,ISNULL(UA.CPROD_MINUTES,0.00)	AS CPROD_MINUTES
	,UA.INVOICE_ID					AS INVOICE_ID
	FROM
	(	SELECT
		 C.FF_LOGIN_ID						AS LOGIN_ID
		,C.ID_EXT							AS ID_EXT
		,SUM(ISNULL(C.CPROD,0.00)) / 60.0	AS CPROD_MINUTES
		,NULL								AS INVOICE_ID
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_EGENCIA_INVOICING		C

		INNER JOIN      DATE_TIME								DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 C.FF_LOGIN_ID
		,C.ID_EXT
	) UA

UPDATE #IMPORTS_EGENCIA_INVOICING_AGGREGATE_CPROD SET
 INVOICE_ID = CASE WHEN CPROD_MINUTES < 3240.00 THEN
					CASE WHEN ID_EXT = 'ERA' THEN 'Egencia RE1'	--Resource
						 WHEN ID_EXT = 'ESM' THEN 'Egencia SME'	--SME
						 WHEN ID_EXT = 'ECS' THEN 'Egencia C1'	--C-Select
						 WHEN ID_EXT = 'EKA' THEN 'Egencia KT1'	--KEY
						 WHEN ID_EXT = 'ESA' THEN 'Egencia S1'	--SAT
						 ELSE '' END
				   WHEN ( CPROD_MINUTES >= 3240.00 AND CPROD_MINUTES <= 4500.00 ) THEN
					CASE WHEN ID_EXT = 'ERA' THEN 'Egencia RE1'
						 WHEN ID_EXT = 'ESM' THEN 'Egencia SME'
						 WHEN ID_EXT = 'ECS' THEN 'Egencia C2'
						 WHEN ID_EXT = 'EKA' THEN 'Egencia KT2'
						 WHEN ID_EXT = 'ESA' THEN 'Egencia S2'
						 ELSE '' END
				   WHEN CPROD_MINUTES > 4500.00 THEN
					CASE WHEN ID_EXT = 'ERA' THEN 'Egencia RE1'
						 WHEN ID_EXT = 'ESM' THEN 'Egencia SME'
						 WHEN ID_EXT = 'ECS' THEN 'Egencia C3'
						 WHEN ID_EXT = 'EKA' THEN 'Egencia KT3'
						 WHEN ID_EXT = 'ESA' THEN 'Egencia S3'
						 ELSE '' END
				   ELSE '' END

--SELECT * FROM #IMPORTS_EGENCIA_INVOICING_AGGREGATE_CPROD
--SELECT * FROM  WSOL_TB_IMPORTS_EGENCIA_INVOICING
--=============================================
--UPDATE PERMANENT INVOICE TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_EGENCIA_INVOICING SET
 INVOICE_ID				= TMP1.INVOICE_ID
,WS_ROW_UPDATED_TIME	= DBO.GETDATE()
--  SELECT *
FROM            #IMPORTS_EGENCIA_INVOICING_AGGREGATE_CPROD	TMP1
INNER JOIN      WSOL_TB_IMPORTS_EGENCIA_INVOICING			G   ON G.FF_LOGIN_ID	= TMP1.LOGIN_ID
															   AND G.ID_EXT			= TMP1.ID_EXT

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.FF_LOGIN_ID	= TMP1.LOGIN_ID
  AND G.ID_EXT		= TMP1.ID_EXT
  AND ( G.[DATETIME] >= @DTM_BEG AND G.[DATETIME] <  @DTM_END )

--=============================================
--UPDATE PERMANENT UV INVOICE TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA SET
 INVOICE_ID				= TMP1.INVOICE_ID
,INVOICE_SYSTEM_ID		= TMP1.INVOICE_ID
,WS_ROW_UPDATED_TIME	= DBO.GETDATE()
--  SELECT *
FROM            #IMPORTS_EGENCIA_INVOICING_AGGREGATE_CPROD	TMP1
INNER JOIN      WSOL_TB_IMPORTS_EGENCIA_UV_ANT_AIA			U   ON U.INVOICE_MAP_KEY	= TMP1.LOGIN_ID
															   AND U.ACD_ID_EXTENSION	= TMP1.ID_EXT

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE U.INVOICE_MAP_KEY		= TMP1.LOGIN_ID
  AND U.ACD_ID_EXTENSION	= TMP1.ID_EXT
  AND ( U.CAL_DATE >= @DTM_BEG AND U.CAL_DATE <  @DTM_END )
  AND U.HOLIDAY <> 'Yes'
  --AND ISNULL(U.INVOICE_SYSTEM_ID,'') = ''


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_EGENCIA_QA_IMPORT_STATUS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_EGENCIA_QA_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_EGENCIA_QA_IMPORT_STATUS] '06/01/2014','06/06/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_EGENCIA_QA_IMPORT_STATUS] '06/20/2014','06/30/2014','','W'

--===========================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--===========================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_EGENCIA_QA_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_EGENCIA_QA_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_EGENCIA_QA_IMPORT_STATUS
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_EGENCIA_QA_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0)															AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_EGENCIA_QA  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

---- AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA
--END  --IF @PSW...

--=================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=================================================================
--DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = @TENANT_KEY
----  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900704
--=================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

--CREATE CURSOR, POPULATE CURSOR FOR DATE RANGE, SPIN THROUGH EACH OF THE DAILY RECORDS, CONCATENATING TO STRING FOR EACH DATE MISSING.

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	
	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_EGENCIA_QA_IMPORT_STATUS   I   ON I.FILEDATETIME                   = DT.FILEDATETIME

WHERE ISNULL(I.RCD_CNT,0) = 0

  --AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)
  --AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
		SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

			SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 8:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
		END
	END
	ELSE BEGIN
		SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
		END
	END
	
END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--EGENCIA_QA:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM YZ_TB_ERRORS_FOUND
							   WHERE TENANT_KEY = 106 AND SUB_GROUP_NAME = 'EGENCIA_QA' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_EGENCIA_QA_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_EGENCIA_QA_Summary]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_EGENCIA_QA_Summary]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_EGENCIA_QA_Summary] '06/01/2014','06/07/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_EGENCIA_QA_Summary] '06/07/2014','06/07/2014','','W'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

			IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly 
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--TO TEST:
		--DECLARE
		-- @DTM_BEG DATETIME
		--,@DTM_END DATETIME
		----SET @DTM_BEG = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_END = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_BEG = CAST('08/02/2012' AS DATETIME)
		----SET @DTM_END = CAST('08/02/2012' AS DATETIME)
		--SET @DTM_BEG = CAST('08/03/2012' AS DATETIME)
		--SET @DTM_END = CAST('08/03/2012' AS DATETIME)

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		--SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		--SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--07/06/2012 IS AN INVOICE FRIDAY.  SAME AS 05/23/2014.
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_EGENCIA_QA_Summary') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_EGENCIA_QA_Summary
END
CREATE TABLE #IMPORTS_EGENCIA_QA_Summary
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_EGENCIA_QA_Summary
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')       --AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') --AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')             --AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_EGENCIA_QA  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA

--END  --IF @PSW...


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT      
,'White' AS BG_COLOR

FROM #IMPORTS_EGENCIA_QA_Summary 

ORDER BY
-- CALL_DATETIME           
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT      


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_GA_AGENT_INVOICING_REPORTS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_GA_AGENT_INVOICING_REPORTS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300) --Hid. Def=' '
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@SHOW_DETAILS		 BIT		  --	 DEF='TRUE'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'  MANual,SUBscription
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='INV'
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='INV'  
AS
SET NOCOUNT ON    

--  EXECUTE [dbo].[uspIMPORTS_GA_AGENT_INVOICING_DETAIL] '01/01/2017','01/15/2017','0','0','0','0','HR','Y','SS','NM','Y','4','MAN','INV','INV'

--	@TIME_INTERVAL:  Can show invoicing report at hourly level or higher !!!

--	Durations in FTP FILE are in seconds.  Therefore, reporting may be in seconds, minutes, or hours.

--  SELECT * FROM WSOL_TB_IMPORTS_GA_SD_INVOICE_GROUPS
--  SELECT * FROM WSOL_TB_IMPORTS_GA_UV_ANT_AIA


--========================================================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) 
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) -- + 1
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
END
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

DECLARE
 @MTD_BEG AS DATETIME
,@MTD_END AS DATETIME  --,@YTD_BEG AS DATETIME--,@YTD_END AS DATETIME
SET @MTD_BEG = CAST(CAST(DATEPART(mm,@DTM_BEG) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)
SET @MTD_END = @DTM_END  

IF @TIME_INTERVAL IN ('MR','MD') BEGIN  --MONTH DETERMINED BY @DTM_BEG.
	SET @DTM_BEG = @MTD_BEG
	SET @DTM_END = @MTD_END
END

IF @EXECUTIONER = 'DLY' BEGIN
	IF DATEPART(DW,dbo.getdate()) = 2 BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 3,101) AS DATETIME)
	END
	ELSE BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
	END
	SET @DTM_END = @DTM_BEG + 1
END

IF @EXECUTIONER = 'WKY' BEGIN
	SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 7,101) AS DATETIME)
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate()	 ,101) AS DATETIME)
END

IF @EXECUTIONER = 'MTH' BEGIN
	IF MONTH(dbo.getdate()) = 1
		BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
		END
	ELSE
		BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) AS DATETIME)
END



--==================================
--SET AMOUNT TO DIVIDE BY:
--==================================
DECLARE @DS DECIMAL(10,2)  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.00     --DIVIDE SECONDS BY 1  TO GET SAME, SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
    SET @DS = 60.00    --DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
    SET @DS = 3600.00  --DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_GA_AGENT_INVOICING_REPORTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_GA_AGENT_INVOICING_REPORTS
END
CREATE TABLE #IMPORTS_GA_AGENT_INVOICING_REPORTS
(TENANT_NAME            VARCHAR(50)
,ID_EXT                 VARCHAR(3)
,SCHEDULER_ACL_NAME     VARCHAR(100)  
,EMPLOYEE_ID            VARCHAR(50)
,STD_TENANT_START_DATE_TIME_KEY INT
,RESOURCE_NAME          VARCHAR(100)

,AIR_DAY_TYPE           varchar(1)
,AIR_ACW_FONT_COLOR     varchar(50)
,MIN_GUARANTEE_MINUTES  decimal(6,3)
,MIN_GUARANTEE_TYPE     varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE varchar(50)
,HAS_HOLIDAYS           varchar(1)
,INCLUDE_IN_CAS         varchar(1)
,READY_FOR_XML          varchar(1)
,SHOW_ID_EXTS           varchar(1)
,
[LOGGED_IN_SECS] [decimal](10, 2) NULL,
[READY_SECS] [decimal](10, 2) NULL,
[READY_FOR_OUTBOUND_SECS] [decimal](10, 2) NULL,
[AWAY_SECS] [decimal](10, 2) NULL,
[AWAY_BREAK_SECS] [decimal](10, 2) NULL,
[AWAY_COMFORT_BREAK_SECS] [decimal](10, 2) NULL,
[BUSY_OUTBOUND_SECS] [decimal](10, 2) NULL,
[BUSY_INTERNAL_SECS] [decimal](10, 2) NULL,
[CALL_TRANSFERRED_SECS] [decimal](10, 2) NULL,
[WRAP_UP_AUTO_SECS] [decimal](10, 2) NULL,
[WRAP_UP_MANUAL_SECS] [decimal](10, 2) NULL,
[LOGGED_OUT_SECS] [decimal](10, 2) NULL,
[EXTENDED_AWAY_SECS] [decimal](10, 2) NULL,
[EXTENDED_AWAY_PAPERWORK_SECS] [decimal](10, 2) NULL,
[EXTENDED_AWAY_LUNCH_SECS] [decimal](10, 2) NULL,
[EXTENDED_AWAY_TRAINING_SECS] [decimal](10, 2) NULL,
[EXTENDED_AWAY_MEETING_SECS] [decimal](10, 2) NULL,
[EXTENDED_AWAY_TEAM_MEETING_SECS] [decimal](10, 2) NULL,
[TOTAL_READY_SECS] [decimal](10, 2) NULL,
[TOTAL_BUSY_SECS] [decimal](10, 2) NULL,
[TOTAL_AWAY_SECS] [decimal](10, 2) NULL,
[TOTAL_WRAP_SECS] [decimal](10, 2) NULL,
[TOTAL_EXTENDED_AWAY_SECS] [decimal](10, 2) NULL,
[OUTBOUND_CALLS] [int] NULL,
[CALLS_TRANSFERRED] [int] NULL,
[CPROD] [decimal](10, 2) NULL,
[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
[AUTHORIZED_SECS] [decimal](10, 2) NULL,
)

INSERT INTO #IMPORTS_GA_AGENT_INVOICING_REPORTS
SELECT
 'GENERAL ASSEMBLY'	--T.TENANT_NAME
,''					--UAA.ACD_ID_EXTENSION
,UAA.SCHEDULER_ACL_NAME
,UAA.EMPLOYEE_ID
,UAA.STD_TENANT_START_DATE_TIME_KEY
,UAA.RESOURCE_NAME

,(ISNULL(UAA.AIR_DAY_TYPE,''))					--AS AIR_DAY_TYPE
,(ISNULL(UAA.AIR_ACW_FONT_COLOR,''))			--AS AIR_ACW_FONT_COLOR
,(ISNULL(UAA.MIN_GUARANTEE_MINUTES,0.000))		--AS MIN_GUARANTEE_MINUTES
,(ISNULL(UAA.MIN_GUARANTEE_TYPE,''))			--AS MIN_GUARANTEE_TYPE
,(ISNULL(UAA.AUTHORIZED_TO_INVOICE_TYPE,''))	--AS AUTHORIZED_TO_INVOICE_TYPE
,(ISNULL(UAA.HAS_HOLIDAYS,''))					--AS HAS_HOLIDAYS
,(ISNULL(UAA.INCLUDE_IN_CAS,''))				--AS INCLUDE_IN_CAS
,(ISNULL(UAA.READY_FOR_XML,''))					--AS READY_FOR_XML
,(ISNULL(UAA.SHOW_ID_EXTS,''))					--AS SHOW_ID_EXTS

,(ISNULL(UAA.LOGGED_IN_SECS					,0.00))
,(ISNULL(UAA.READY_SECS						,0.00))
,(ISNULL(UAA.READY_FOR_OUTBOUND_SECS		,0.00))
,(ISNULL(UAA.AWAY_SECS						,0.00))
,(ISNULL(UAA.AWAY_BREAK_SECS				,0.00))
,(ISNULL(UAA.AWAY_COMFORT_BREAK_SECS		,0.00))
,(ISNULL(UAA.BUSY_OUTBOUND_SECS				,0.00))
,(ISNULL(UAA.BUSY_INTERNAL_SECS				,0.00))
,(ISNULL(UAA.CALL_TRANSFERRED_SECS			,0.00))
,(ISNULL(UAA.WRAP_UP_AUTO_SECS				,0.00))
,(ISNULL(UAA.WRAP_UP_MANUAL_SECS			,0.00))
,(ISNULL(UAA.LOGGED_OUT_SECS				,0.00))
,(ISNULL(UAA.EXTENDED_AWAY_SECS				,0.00))
,(ISNULL(UAA.EXTENDED_AWAY_PAPERWORK_SECS	,0.00))
,(ISNULL(UAA.EXTENDED_AWAY_LUNCH_SECS		,0.00))
,(ISNULL(UAA.EXTENDED_AWAY_TRAINING_SECS	,0.00))
,(ISNULL(UAA.EXTENDED_AWAY_MEETING_SECS		,0.00))
,(ISNULL(UAA.EXTENDED_AWAY_TEAM_MEETING_SECS,0.00))
,(ISNULL(UAA.TOTAL_READY_SECS				,0.00))
,(ISNULL(UAA.TOTAL_BUSY_SECS				,0.00))
,(ISNULL(UAA.TOTAL_AWAY_SECS				,0.00))
,(ISNULL(UAA.TOTAL_WRAP_SECS				,0.00))
,(ISNULL(UAA.TOTAL_EXTENDED_AWAY_SECS		,0.00))

,(ISNULL(UAA.OUTBOUND_CALLS					,0	 ))
,(ISNULL(UAA.CALLS_TRANSFERRED				,0	 ))

,(ISNULL(UAA.CPROD							,0.00))
,(ISNULL(UAA.MINIMUM_GUARANTEE				,0.00))
,(ISNULL(UAA.AUTHORIZED_SECS				,0.00))

--DATASOURCES FOR DURATION FIELDS, IN SECONDS, IN DAY INTERVALS:
--SELECT * FROM WSOL_TB_IMPORTS_GA_INVOICING

FROM
(	SELECT	
	-- UA.TENANT_KEY
	 ''									AS ACD_ID_EXTENSION
	,UA.INVOICE_ID					    AS SCHEDULER_ACL_NAME
	,UA.FF_AGENT_ID						AS EMPLOYEE_ID 
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,MAX(UA.RESOURCE_NAME)              AS RESOURCE_NAME
	,MAX(UA.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,'BLACK'                            AS AIR_ACW_FONT_COLOR
	,0									AS MIN_GUARANTEE_MINUTES
	,''									AS MIN_GUARANTEE_TYPE
	,''									AS AUTHORIZED_TO_INVOICE_TYPE
	,'Y'								AS HAS_HOLIDAYS
	,''									AS INCLUDE_IN_CAS
	,''									AS READY_FOR_XML
	,''									AS SHOW_ID_EXTS

	,SUM(ISNULL(UA.LOGGED_IN_SECS					,0.00))	AS LOGGED_IN_SECS
	,SUM(ISNULL(UA.READY_SECS						,0.00))	AS READY_SECS
	,SUM(ISNULL(UA.READY_FOR_OUTBOUND_SECS			,0.00))	AS READY_FOR_OUTBOUND_SECS
	,SUM(ISNULL(UA.AWAY_SECS						,0.00))	AS AWAY_SECS
	,SUM(ISNULL(UA.AWAY_BREAK_SECS					,0.00))	AS AWAY_BREAK_SECS
	,SUM(ISNULL(UA.AWAY_COMFORT_BREAK_SECS			,0.00))	AS AWAY_COMFORT_BREAK_SECS
	,SUM(ISNULL(UA.BUSY_OUTBOUND_SECS				,0.00))	AS BUSY_OUTBOUND_SECS
	,SUM(ISNULL(UA.BUSY_INTERNAL_SECS				,0.00))	AS BUSY_INTERNAL_SECS
	,SUM(ISNULL(UA.CALL_TRANSFERRED_SECS			,0.00))	AS CALL_TRANSFERRED_SECS
	,SUM(ISNULL(UA.WRAP_UP_AUTO_SECS				,0.00))	AS WRAP_UP_AUTO_SECS
	,SUM(ISNULL(UA.WRAP_UP_MANUAL_SECS				,0.00))	AS WRAP_UP_MANUAL_SECS
	,SUM(ISNULL(UA.LOGGED_OUT_SECS					,0.00))	AS LOGGED_OUT_SECS
	,SUM(ISNULL(UA.EXTENDED_AWAY_SECS				,0.00))	AS EXTENDED_AWAY_SECS
	,SUM(ISNULL(UA.EXTENDED_AWAY_PAPERWORK_SECS		,0.00))	AS EXTENDED_AWAY_PAPERWORK_SECS
	,SUM(ISNULL(UA.EXTENDED_AWAY_LUNCH_SECS			,0.00))	AS EXTENDED_AWAY_LUNCH_SECS
	,SUM(ISNULL(UA.EXTENDED_AWAY_TRAINING_SECS		,0.00))	AS EXTENDED_AWAY_TRAINING_SECS
	,SUM(ISNULL(UA.EXTENDED_AWAY_MEETING_SECS		,0.00))	AS EXTENDED_AWAY_MEETING_SECS
	,SUM(ISNULL(UA.EXTENDED_AWAY_TEAM_MEETING_SECS	,0.00))	AS EXTENDED_AWAY_TEAM_MEETING_SECS
	,SUM(ISNULL(UA.TOTAL_READY_SECS					,0.00))	AS TOTAL_READY_SECS
	,SUM(ISNULL(UA.TOTAL_BUSY_SECS					,0.00))	AS TOTAL_BUSY_SECS
	,SUM(ISNULL(UA.TOTAL_AWAY_SECS					,0.00))	AS TOTAL_AWAY_SECS
	,SUM(ISNULL(UA.TOTAL_WRAP_SECS					,0.00))	AS TOTAL_WRAP_SECS
	,SUM(ISNULL(UA.TOTAL_EXTENDED_AWAY_SECS			,0.00))	AS TOTAL_EXTENDED_AWAY_SECS
	
	,SUM(ISNULL(UA.OUTBOUND_CALLS					,0   ))	AS OUTBOUND_CALLS
	,SUM(ISNULL(UA.CALLS_TRANSFERRED				,0   ))	AS CALLS_TRANSFERRED
	
	,SUM(ISNULL(UA.CPROD							,0.00))	AS CPROD
	,SUM(ISNULL(UA.MINIMUM_GUARANTEE				,0.00))	AS MINIMUM_GUARANTEE
	,SUM(ISNULL(UA.AUTHORIZED_SECS					,0.00))	AS AUTHORIZED_SECS
	
	--  SELECT *
	FROM            WSOL_TB_IMPORTS_GA_INVOICING	UA
	INNER JOIN      DATE_TIME						DT	ON DT.DATE_TIME_KEY = UA.STD_TENANT_START_DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
		
	GROUP BY 
	 UA.INVOICE_ID
	,UA.FF_AGENT_ID
	,UA.STD_TENANT_START_DATE_TIME_KEY
) UAA

--==============================================================
-- CREATE TEMPORARY TABLE TO RETURN RESULTS
--==============================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_GA_AGENT_INVOICING_REPORTS_RTN') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_GA_AGENT_INVOICING_REPORTS_RTN
END
CREATE TABLE #IMPORTS_GA_AGENT_INVOICING_REPORTS_RTN
(GRPNO                 INT
,TENANT_NAME           VARCHAR(50)
,ID_EXT                VARCHAR(3)
,SCHEDULER_ACL_NAME    VARCHAR(100)
,EMPLOYEE_ID           VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,CAL_YEAR_MONTH_NUM    VARCHAR(10)
,DATE_INTERVAL         VARCHAR(50)
,TIME_INTERVAL         VARCHAR(10)

,AIR_DAY_TYPE				varchar(1)
,AIR_ACW_FONT_COLOR			varchar(50)
,MIN_GUARANTEE_MINUTES		decimal(6,3)
,MIN_GUARANTEE_TYPE			varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE	varchar(50)
,HAS_HOLIDAYS				varchar(1)
,INCLUDE_IN_CAS				varchar(1)
,READY_FOR_XML				varchar(1)
,SHOW_ID_EXTS				varchar(1)

,AIR_HOLIDAY_IN				VARCHAR(1)
,ALL_AUTHORIZED_TIME		DECIMAL(10,2)

,
[LOGGED_IN_SECS] [decimal](10, 2) NULL,
[READY_SECS] [decimal](10, 2) NULL,
[READY_FOR_OUTBOUND_SECS] [decimal](10, 2) NULL,
[AWAY_SECS] [decimal](10, 2) NULL,
[AWAY_BREAK_SECS] [decimal](10, 2) NULL,
[AWAY_COMFORT_BREAK_SECS] [decimal](10, 2) NULL,
[BUSY_OUTBOUND_SECS] [decimal](10, 2) NULL,
[BUSY_INTERNAL_SECS] [decimal](10, 2) NULL,
[CALL_TRANSFERRED_SECS] [decimal](10, 2) NULL,
[WRAP_UP_AUTO_SECS] [decimal](10, 2) NULL,
[WRAP_UP_MANUAL_SECS] [decimal](10, 2) NULL,
[LOGGED_OUT_SECS] [decimal](10, 2) NULL,
[EXTENDED_AWAY_SECS] [decimal](10, 2) NULL,
[EXTENDED_AWAY_PAPERWORK_SECS] [decimal](10, 2) NULL,
[EXTENDED_AWAY_LUNCH_SECS] [decimal](10, 2) NULL,
[EXTENDED_AWAY_TRAINING_SECS] [decimal](10, 2) NULL,
[EXTENDED_AWAY_MEETING_SECS] [decimal](10, 2) NULL,
[EXTENDED_AWAY_TEAM_MEETING_SECS] [decimal](10, 2) NULL,
[TOTAL_READY_SECS] [decimal](10, 2) NULL,
[TOTAL_BUSY_SECS] [decimal](10, 2) NULL,
[TOTAL_AWAY_SECS] [decimal](10, 2) NULL,
[TOTAL_WRAP_SECS] [decimal](10, 2) NULL,
[TOTAL_EXTENDED_AWAY_SECS] [decimal](10, 2) NULL,
[OUTBOUND_CALLS] [int] NULL,
[CALLS_TRANSFERRED] [int] NULL,
[CPROD] [decimal](10, 2) NULL,
[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
[AUTHORIZED_SECS] [decimal](10, 2) NULL,
)

--==================================
-- POPULATE TEMPORARY TABLE
--==================================
INSERT INTO #IMPORTS_GA_AGENT_INVOICING_REPORTS_RTN
SELECT
 20								--AS GRPNO  
,ISNULL(GG.TENANT_NAME       ,'') AS TENANT_NAME
,ISNULL(GG.ID_EXT            ,'') AS ID_EXT
,ISNULL(GG.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
,ISNULL(GG.EMPLOYEE_ID       ,'') AS EMPLOYEE_ID
,ISNULL(GG.RESOURCE_NAME     ,'') AS RESOURCE_NAME
,ISNULL(GG.CAL_YEAR_MONTH_NUM,'') AS CAL_YEAR_MONTH_NUM
,ISNULL(GG.DI                ,'') AS DI
,ISNULL(GG.TI                ,'') AS TI

,(GG.AIR_DAY_TYPE)                AS AIR_DAY_TYPE
,(GG.AIR_ACW_FONT_COLOR)          AS AIR_ACW_FONT_COLOR
,(GG.MIN_GUARANTEE_MINUTES)       AS MIN_GUARANTEE_MINUTES
,(GG.MIN_GUARANTEE_TYPE)          AS MIN_GUARANTEE_TYPE
,(GG.AUTHORIZED_TO_INVOICE_TYPE)  AS AUTHORIZED_TO_INVOICE_TYPE
,(GG.HAS_HOLIDAYS)                AS HAS_HOLIDAYS
,(GG.INCLUDE_IN_CAS)              AS INCLUDE_IN_CAS
,(GG.READY_FOR_XML)               AS READY_FOR_XML
,(GG.SHOW_ID_EXTS)                AS SHOW_ID_EXTS

,'' --AS AIR_HOLIDAY_IN
,0  --AS ALL_AUTHORIZED_TIME

,CAST((ISNULL(GG.LOGGED_IN_SECS					,0.00)) / @DS AS DECIMAL(10,2))	AS LOGGED_IN_SECS
,CAST((ISNULL(GG.READY_SECS						,0.00)) / @DS AS DECIMAL(10,2))	AS READY_SECS
,CAST((ISNULL(GG.READY_FOR_OUTBOUND_SECS		,0.00)) / @DS AS DECIMAL(10,2))	AS READY_FOR_OUTBOUND_SECS
,CAST((ISNULL(GG.AWAY_SECS						,0.00)) / @DS AS DECIMAL(10,2))	AS AWAY_SECS
,CAST((ISNULL(GG.AWAY_BREAK_SECS				,0.00)) / @DS AS DECIMAL(10,2))	AS AWAY_BREAK_SECS
,CAST((ISNULL(GG.AWAY_COMFORT_BREAK_SECS		,0.00)) / @DS AS DECIMAL(10,2))	AS AWAY_COMFORT_BREAK_SECS
,CAST((ISNULL(GG.BUSY_OUTBOUND_SECS				,0.00)) / @DS AS DECIMAL(10,2))	AS BUSY_OUTBOUND_SECS
,CAST((ISNULL(GG.BUSY_INTERNAL_SECS				,0.00)) / @DS AS DECIMAL(10,2))	AS BUSY_INTERNAL_SECS
,CAST((ISNULL(GG.CALL_TRANSFERRED_SECS			,0.00)) / @DS AS DECIMAL(10,2)) AS CALL_TRANSFERRED_SECS
,CAST((ISNULL(GG.WRAP_UP_AUTO_SECS				,0.00)) / @DS AS DECIMAL(10,2)) AS WRAP_UP_AUTO_SECS
,CAST((ISNULL(GG.WRAP_UP_MANUAL_SECS			,0.00)) / @DS AS DECIMAL(10,2)) AS WRAP_UP_MANUAL_SECS
,CAST((ISNULL(GG.LOGGED_OUT_SECS				,0.00)) / @DS AS DECIMAL(10,2)) AS LOGGED_OUT_SECS
,CAST((ISNULL(GG.EXTENDED_AWAY_SECS				,0.00)) / @DS AS DECIMAL(10,2)) AS EXTENDED_AWAY_SECS
,CAST((ISNULL(GG.EXTENDED_AWAY_PAPERWORK_SECS	,0.00)) / @DS AS DECIMAL(10,2)) AS EXTENDED_AWAY_PAPERWORK_SECS
,CAST((ISNULL(GG.EXTENDED_AWAY_LUNCH_SECS		,0.00)) / @DS AS DECIMAL(10,2)) AS EXTENDED_AWAY_LUNCH_SECS
,CAST((ISNULL(GG.EXTENDED_AWAY_TRAINING_SECS	,0.00)) / @DS AS DECIMAL(10,2)) AS EXTENDED_AWAY_TRAINING_SECS
,CAST((ISNULL(GG.EXTENDED_AWAY_MEETING_SECS		,0.00)) / @DS AS DECIMAL(10,2)) AS EXTENDED_AWAY_MEETING_SECS
,CAST((ISNULL(GG.EXTENDED_AWAY_TEAM_MEETING_SECS,0.00)) / @DS AS DECIMAL(10,2)) AS EXTENDED_AWAY_TEAM_MEETING_SECS
,CAST((ISNULL(GG.TOTAL_READY_SECS				,0.00)) / @DS AS DECIMAL(10,2)) AS TOTAL_READY_SECS
,CAST((ISNULL(GG.TOTAL_BUSY_SECS				,0.00)) / @DS AS DECIMAL(10,2)) AS TOTAL_BUSY_SECS
,CAST((ISNULL(GG.TOTAL_AWAY_SECS				,0.00)) / @DS AS DECIMAL(10,2)) AS TOTAL_AWAY_SECS
,CAST((ISNULL(GG.TOTAL_WRAP_SECS				,0.00)) / @DS AS DECIMAL(10,2)) AS TOTAL_WRAP_SECS
,CAST((ISNULL(GG.TOTAL_EXTENDED_AWAY_SECS		,0.00)) / @DS AS DECIMAL(10,2)) AS TOTAL_EXTENDED_AWAY_SECS

,CAST((ISNULL(GG.OUTBOUND_CALLS					,0	 ))		  AS INT)			AS OUTBOUND_CALLS
,CAST((ISNULL(GG.CALLS_TRANSFERRED				,0	 ))		  AS INT)			AS CALLS_TRANSFERRED

,CAST((ISNULL(GG.CPROD							,0.00)) / @DS AS DECIMAL(10,2))	AS CPROD
,CAST((ISNULL(GG.MINIMUM_GUARANTEE				,0.00)) / @DS AS DECIMAL(10,2))	AS MINIMUM_GUARANTEE
,CAST((ISNULL(GG.AUTHORIZED_SECS				,0.00)) / @DS AS DECIMAL(10,2))	AS AUTHORIZED_SECS


FROM  -- GG STARTS HERE:
(	SELECT
	 ISNULL(SW.TENANT_NAME,'')        AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  AS EMPLOYEE_ID
	,MAX(RESOURCE_NAME)               AS RESOURCE_NAME

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) AS TI

	,MAX(SW.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,MAX(SW.AIR_ACW_FONT_COLOR)         AS AIR_ACW_FONT_COLOR
	,MAX(SW.MIN_GUARANTEE_MINUTES)      AS MIN_GUARANTEE_MINUTES
	,MAX(SW.MIN_GUARANTEE_TYPE)         AS MIN_GUARANTEE_TYPE
	,MAX(SW.AUTHORIZED_TO_INVOICE_TYPE) AS AUTHORIZED_TO_INVOICE_TYPE
	,MAX(SW.HAS_HOLIDAYS)               AS HAS_HOLIDAYS
	,MAX(SW.INCLUDE_IN_CAS)             AS INCLUDE_IN_CAS
	,MAX(SW.READY_FOR_XML)              AS READY_FOR_XML
	,MAX(SW.SHOW_ID_EXTS)               AS SHOW_ID_EXTS

	,SUM(ISNULL(SW.LOGGED_IN_SECS					,0.00))	AS LOGGED_IN_SECS
	,SUM(ISNULL(SW.READY_SECS						,0.00))	AS READY_SECS
	,SUM(ISNULL(SW.READY_FOR_OUTBOUND_SECS			,0.00))	AS READY_FOR_OUTBOUND_SECS
	,SUM(ISNULL(SW.AWAY_SECS						,0.00))	AS AWAY_SECS
	,SUM(ISNULL(SW.AWAY_BREAK_SECS					,0.00))	AS AWAY_BREAK_SECS
	,SUM(ISNULL(SW.AWAY_COMFORT_BREAK_SECS			,0.00))	AS AWAY_COMFORT_BREAK_SECS
	,SUM(ISNULL(SW.BUSY_OUTBOUND_SECS				,0.00))	AS BUSY_OUTBOUND_SECS
	,SUM(ISNULL(SW.BUSY_INTERNAL_SECS				,0.00))	AS BUSY_INTERNAL_SECS
	,SUM(ISNULL(SW.CALL_TRANSFERRED_SECS			,0.00))	AS CALL_TRANSFERRED_SECS
	,SUM(ISNULL(SW.WRAP_UP_AUTO_SECS				,0.00))	AS WRAP_UP_AUTO_SECS
	,SUM(ISNULL(SW.WRAP_UP_MANUAL_SECS				,0.00))	AS WRAP_UP_MANUAL_SECS
	,SUM(ISNULL(SW.LOGGED_OUT_SECS					,0.00))	AS LOGGED_OUT_SECS
	,SUM(ISNULL(SW.EXTENDED_AWAY_SECS				,0.00))	AS EXTENDED_AWAY_SECS
	,SUM(ISNULL(SW.EXTENDED_AWAY_PAPERWORK_SECS		,0.00))	AS EXTENDED_AWAY_PAPERWORK_SECS
	,SUM(ISNULL(SW.EXTENDED_AWAY_LUNCH_SECS			,0.00))	AS EXTENDED_AWAY_LUNCH_SECS
	,SUM(ISNULL(SW.EXTENDED_AWAY_TRAINING_SECS		,0.00))	AS EXTENDED_AWAY_TRAINING_SECS
	,SUM(ISNULL(SW.EXTENDED_AWAY_MEETING_SECS		,0.00))	AS EXTENDED_AWAY_MEETING_SECS
	,SUM(ISNULL(SW.EXTENDED_AWAY_TEAM_MEETING_SECS	,0.00))	AS EXTENDED_AWAY_TEAM_MEETING_SECS
	,SUM(ISNULL(SW.TOTAL_READY_SECS					,0.00))	AS TOTAL_READY_SECS
	,SUM(ISNULL(SW.TOTAL_BUSY_SECS					,0.00))	AS TOTAL_BUSY_SECS
	,SUM(ISNULL(SW.TOTAL_AWAY_SECS					,0.00))	AS TOTAL_AWAY_SECS
	,SUM(ISNULL(SW.TOTAL_WRAP_SECS					,0.00))	AS TOTAL_WRAP_SECS
	,SUM(ISNULL(SW.TOTAL_EXTENDED_AWAY_SECS			,0.00))	AS TOTAL_EXTENDED_AWAY_SECS
	
	,SUM(ISNULL(SW.OUTBOUND_CALLS					,0	 )) AS OUTBOUND_CALLS
	,SUM(ISNULL(SW.CALLS_TRANSFERRED				,0	 )) AS CALLS_TRANSFERRED
	
	,SUM(ISNULL(SW.CPROD							,0.00))	AS CPROD
	,SUM(ISNULL(SW.MINIMUM_GUARANTEE				,0.00))	AS MINIMUM_GUARANTEE
	,SUM(ISNULL(SW.AUTHORIZED_SECS					,0.00))	AS AUTHORIZED_SECS
	
	FROM            #IMPORTS_GA_AGENT_INVOICING_REPORTS	SW
	INNER JOIN      DATE_TIME							DT   ON DT.DATE_TIME_KEY              = SW.STD_TENANT_START_DATE_TIME_KEY
													 
	--WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END		  --AND (@TENANT_KEY   IN ('0','') OR SW.TENANT_KEY   = CAST(@TENANT_KEY AS INT) )

	GROUP BY 
	 ISNULL(SW.TENANT_NAME,'')        --AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             --AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') --AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  --AS EMPLOYEE_ID

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) --AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) --AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) --AS TI

	--,(ISNULL(SW.FF_AGENT_NAME,''))         --AS FF_AGENT_NAME
	--,(ISNULL(SW.FF_USER_NAME,''))          --AS FF_USER_NAME

) GG

--==================================
--IS A HOLIDAY DATE IN THE MIX:
--==================================
DECLARE @HOLIDAY_IN VARCHAR(1)
SET @HOLIDAY_IN = 'N'
DECLARE @I INT
SET @I = (SELECT COUNT(*) FROM #IMPORTS_GA_AGENT_INVOICING_REPORTS_RTN WHERE AIR_DAY_TYPE = 'H')  --  AND INCLUDE_IN_CAS = 'Y')
IF @I > 0 BEGIN
	SET @HOLIDAY_IN = 'Y'
END
--==================================
UPDATE #IMPORTS_GA_AGENT_INVOICING_REPORTS_RTN SET
 AIR_HOLIDAY_IN = @HOLIDAY_IN

--======================================================
--UPDATE TOTALS LINE ON REPORT FOR STANDARD AND HOLIDAY:
--======================================================
UPDATE #IMPORTS_GA_AGENT_INVOICING_REPORTS_RTN SET
 ALL_AUTHORIZED_TIME = ISNULL(LOJ.ALL_AUTHORIZED_TIME,0.0)
FROM #IMPORTS_GA_AGENT_INVOICING_REPORTS_RTN TA
LEFT OUTER JOIN
(	SELECT
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
	,SUM(AUTHORIZED_SECS) AS ALL_AUTHORIZED_TIME
	FROM #IMPORTS_GA_AGENT_INVOICING_REPORTS_RTN 
	GROUP BY 
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
) LOJ ON LOJ.SCHEDULER_ACL_NAME = TA.SCHEDULER_ACL_NAME
	 AND LOJ.EMPLOYEE_ID        = TA.EMPLOYEE_ID
	 --AND LOJ.RESOURCE_NAME		= TA.RESOURCE_NAME
	 AND LOJ.AIR_DAY_TYPE       = TA.AIR_DAY_TYPE

--==================================
--RETURN DATA
--==================================
--==================================
--POPULATE TABLE READ BY SSIS TO GET END DATE OF DATA REPORT/FILE HAS BEEN RUN FOR:
--==================================
INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
SELECT
 'uspIMPORTS_GA_AGENT_INVOICING_REPORTS'				--SQL_JOB_NAME
,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,111),'/','')  --FILENM   YYYYMMDD_...
,dbo.getdate()  --CST_ROW_CREATED_TIME

--=====================================
--RETURN DATASET:
--=====================================
SELECT 
 CASE WHEN @DUR_IN = 'SS' THEN '' ELSE 'F' END AS DUR_FORMAT
,CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
,V.*

FROM      #IMPORTS_GA_AGENT_INVOICING_REPORTS_RTN  V

ORDER BY 
 V.GRPNO
,V.SCHEDULER_ACL_NAME
,V.RESOURCE_NAME
,V.EMPLOYEE_ID
,V.CAL_YEAR_MONTH_NUM
,V.DATE_INTERVAL
,V.TIME_INTERVAL  --SINCE IN MILITARY TIME!




--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_GA_AIA_AGENT_MAPPING_IMPORT]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_GA_AIA_AGENT_MAPPING_IMPORT]
AS
SET NOCOUNT ON  -- EXECUTE [dbo].[uspIMPORTS_GA_AIA_AGENT_MAPPING_IMPORT]

--  DELETE FROM WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_1

--  SELECT * FROM WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_1

--  Data Loading FTP Pathway
--  FTP server   = sftp.workingsol.com
--  FTP Username = GeneralAssembly
--  FTP Password = Welcome2017!
--  FTP Pathway  = /General_Assembly/AIA_AGENT_MAPPING

--  USES WSOL_TB_IMPORT_ERRORS_FOUND.  NOT TOTALLY INDEPENDANT OF OTHER CLIENTS/TENANTS...

--=================================================================================================
DECLARE
 @TENANT_KEY      INT
,@SUB_GROUP_NAME  VARCHAR(50)
SET @TENANT_KEY		= 900903  --GENERAL ASSEMBLY
SET @SUB_GROUP_NAME = 'GENERAL_ASSEMBLY_AIA_AGENT_MAPPING'
--===========================================================================================================================================================================================
--WHEN RUNNING MANUALLY DURING TESTING:DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 900903  AND SUB_GROUP_NAME = 'GENERAL_ASSEMBLY_AIA_AGENT_MAPPING'
DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = @SUB_GROUP_NAME  --'GENERAL_ASSEMBLY_AIA_AGENT_MAPPING'    --  SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 900903
--===========================================================================================================================================================================================
--WHEN RUNNING MANUALLY DURING TESTING:DELETE FROM WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_ERRORS WHERE TENANT_KEY = 900903  AND IMPORT_SUB_GROUP_NAME = 'GENERAL_ASSEMBLY_AIA_AGENT_MAPPING'
DELETE FROM WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_ERRORS
WHERE IMPORT_SUB_GROUP_NAME = @SUB_GROUP_NAME  --'GENERAL_ASSEMBLY_AIA_AGENT_MAPPING' --SELECT * FROM WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_ERRORS WHERE TENANT_KEY = 900903
--===========================================================================================================================================================================================
UPDATE WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_1 SET
 INVOICE_MAP_KEY	= RTRIM(LTRIM(REPLACE(ISNULL(INVOICE_MAP_KEY,''),' ',' ')))
,FF_EMAIL_ADDRESS	= RTRIM(LTRIM(REPLACE(ISNULL(FF_EMAIL_ADDRESS,''),' ',' ')))
,FF_INVOICE_GROUP	= RTRIM(LTRIM(REPLACE(ISNULL(FF_INVOICE_GROUP,''),' ',' ')))
						  
--  SELECT * FROM WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_ERRORS
--======================================================================
--PROCESS DUPLICATES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_ERRORS
(
RESOURCE_NAME
,EMAIL
,INVOICE_MAP_KEY
,INVOICE_GROUP
,FTP_FILE_NAME
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG
)


SELECT
 W1.RESOURCE_NAME
,W1.FF_EMAIL_ADDRESS
,W1.INVOICE_MAP_KEY
,W1.FF_INVOICE_GROUP
,W1.FTP_FILE_NAME
,dbo.getdate()																			--WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'GENERAL_ASSEMBLY_AIA_AGENT_MAPPING'							--IMPORT_SUB_GROUP_NAME
,'DUP'																				--ERROR_TAG
,'The General Assembly Agent ID exists more than once in the agent mapping file.'	--ERROR_MSG
--  SELECT *  
FROM WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_1  W1
INNER JOIN
(	SELECT
	 INVOICE_MAP_KEY
	,ROW_NUMBER() over (partition by INVOICE_MAP_KEY
                            order by INVOICE_MAP_KEY) ROWNO
	FROM WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_1
) TNM  ON TNM.INVOICE_MAP_KEY = W1.INVOICE_MAP_KEY

LEFT OUTER JOIN WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_ERRORS AME   ON AME.INVOICE_MAP_KEY = W1.INVOICE_MAP_KEY

WHERE TNM.ROWNO > 1   

  AND ISNULL(AME.ERROR_TAG,'') = ''

--===============================================
--CHECK FOR BAD DATA FOUND IN IMPORT .CSV FILES:
--===============================================
--WHEN RUNNING MANUALLY DURING TESTING:INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND SELECT 900903,'GENERAL_ASSEMBLY_AIA_AGENT_MAPPING',''              
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--SQL won't insert special characters!!!  + CHAR(9)  --CHAR(10) + CHAR(13)
--Check #1:  ===================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_1)
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + '1) File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	--SSIS reads WSOL_TB_IMPORT_ERRORS_FOUND table where TENANT_KEY = 900903, and if record exists, outputs results/error_msg field in an email.
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	(
	TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY												--TENANT_KEY
	,@SUB_GROUP_NAME  --'GENERAL_ASSEMBLY_AIA_AGENT_MAPPING'	--SUB_GROUP_NAME
	,@MSG1														--ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	--=============================================
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	(
	TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY												--TENANT_KEY
	,@SUB_GROUP_NAME  --'GENERAL_ASSEMBLY_AIA_AGENT_MAPPING'	--SUB_GROUP_NAME
	,''															--ERROR_MSG			--NEVER SET THIS TO @MSG1 !!!  MUST BE ''.
END

--======================================================================
--PROCESS BAD INVOICE GROUP VALUES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_ERRORS
(RESOURCE_NAME
,EMAIL
,INVOICE_MAP_KEY
,INVOICE_GROUP
,FTP_FILE_NAME
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG
)
SELECT
 W1.RESOURCE_NAME
,W1.FF_EMAIL_ADDRESS
,W1.INVOICE_MAP_KEY
,W1.FF_INVOICE_GROUP
,W1.FTP_FILE_NAME
,dbo.getdate()																	--WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'GENERAL_ASSEMBLY_AIA_AGENT_MAPPING'					--IMPORT_SUB_GROUP_NAME
,'IIG'																		--ERROR_TAG --INVALID INVOICE GROUP
,'The RESOURCE identifier found in the AIA Agent Mapping file is invalid.'	--ERROR_MSG
--  SELECT *  
FROM            WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_1			W1

LEFT JOIN       WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_ERRORS		AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
WHERE ISNULL(W1.FF_INVOICE_GROUP,'') NOT IN ('','Resource')

  AND ISNULL(AME.ERROR_TAG,'') = ''

--======================================================================
--PROCESS MISSING INVOICE MAP KEY VALUES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_ERRORS
(RESOURCE_NAME
,EMAIL
,INVOICE_MAP_KEY
,INVOICE_GROUP
,FTP_FILE_NAME
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG
)
SELECT
 W1.RESOURCE_NAME
,W1.FF_EMAIL_ADDRESS
,W1.INVOICE_MAP_KEY
,W1.FF_INVOICE_GROUP
,W1.FTP_FILE_NAME
,dbo.getdate()													--WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'GENERAL_ASSEMBLY_AIA_AGENT_MAPPING'	--IMPORT_SUB_GROUP_NAME
,'MAP'														--ERROR_TAG
,'The AGENT ID is missing in the AIA Agent Mapping file.'	--ERROR_MSG
--  SELECT *  
FROM            WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_1			W1

LEFT JOIN       WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_ERRORS		AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
WHERE ISNULL(W1.INVOICE_MAP_KEY,'') = ''  -- CURRENTLY SET TO NEW VOICE MEDIA AGENT ID

  AND ISNULL(AME.ERROR_TAG,'') = ''

-- SELECT * FROM WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING
--!!! UPDATING """PERMANENT""" TABLE HERE: !!!
--=======================================================================================================
--UPDATE PERMANENT TABLE WITH WORK TABLE DATA WHERE TENANT_KEY AND INVOICE_MAP_KEY FIELDS/VALUES MATCH:
--=======================================================================================================
UPDATE WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING SET
 RESOURCE_NAME			= W1.RESOURCE_NAME
,[EMAIL]				= W1.FF_EMAIL_ADDRESS
,INVOICE_MAP_KEY		= W1.INVOICE_MAP_KEY
,INVOICE_GROUP			= W1.FF_INVOICE_GROUP
,FTP_FILE_NAME			= W1.FTP_FILE_NAME
--,WS_ROW_CREATED_TIME
,CST_ROW_UPDATED_TIME	= dbo.getdate()
--  SELECT *
FROM            WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_1			W1
--INNER JOIN MUST BE HERE.  NEVER CHANGE!
INNER JOIN      WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING			G     ON G.INVOICE_MAP_KEY        = W1.INVOICE_MAP_KEY
LEFT JOIN       WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_ERRORS		AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
--Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE ISNULL(AME.ERROR_TAG,'') = ''
  AND (   ( G.RESOURCE_NAME		<> W1.RESOURCE_NAME )
	   OR ( G.[EMAIL]			<> W1.FF_EMAIL_ADDRESS )
	   --OR ( G.INVOICE_MAP_KEY	<> W1.INVOICE_MAP_KEY )
	   OR ( G.INVOICE_GROUP		<> W1.FF_INVOICE_GROUP )
	  )

--  SELECT * FROM WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING
--!!! INSERTING INTO """PERMANENT""" TABLE HERE: !!!
--========================================================
--INSERT "NEW" DATA FROM WORK TABLE INTO PERMANENT TABLE: 
--========================================================
INSERT INTO WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING
(
RESOURCE_NAME
,EMAIL
,INVOICE_MAP_KEY
,INVOICE_GROUP
,FTP_FILE_NAME
,CST_ROW_CREATED_TIME
,CST_ROW_UPDATED_TIME)
SELECT
 W1.RESOURCE_NAME  
,W1.FF_EMAIL_ADDRESS
,W1.INVOICE_MAP_KEY
,W1.FF_INVOICE_GROUP
,W1.FTP_FILE_NAME
,dbo.getdate()        --WS_ROW_CREATED_TIME
,NULL             --WS_ROW_UPDATED_TIME

FROM            WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_1			W1
LEFT JOIN       WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING			G     ON G.INVOICE_MAP_KEY        = W1.INVOICE_MAP_KEY
LEFT JOIN       WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_ERRORS		AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:
WHERE ( G.INVOICE_MAP_KEY IS NULL AND ISNULL(W1.INVOICE_MAP_KEY,'') <> '' )

  AND ISNULL(AME.ERROR_TAG,'') = ''

--  SELECT * FROM WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING    ORDER BY INVOICE_MAP_KEY 

--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_GA_AIA_AGENT_MAPPING_IMPORT_STATUS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_GA_AIA_AGENT_MAPPING_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHAT PROBLEMS THE RECENTLY IMPORTED AIA AGENT MAPPING FILE HAD DURING THE IMPORT/CLEANUP PROCESS.
--THIS USP IS DATA SOURCE FOR SSRS GRID ON "AIA AGENT MAPPING" IMPORTS STATUS REPORT!!!

--  EXECUTE [dbo].[uspIMPORTS_GA_AIA_AGENT_MAPPING_IMPORT_STATUS] '01/01/2017','01/31/2017','','R'

--  SELECT * FROM WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_ERRORS
--  SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND

--==================================
DECLARE 
 @TENANT_KEY      INT
,@SUB_GROUP_NAME  VARCHAR(50)
SET @TENANT_KEY     = 900903	--GENERAL ASSEMBLY
SET @SUB_GROUP_NAME = 'GENERAL_ASSEMBLY_AIA_AGENT_MAPPING'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'B' BEGIN     -- Bi-Monthly - Run for 1-15 or 16-EOM
	IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
	END
	ELSE IF DAY(dbo.getdate()) = 1 BEGIN
		IF MONTH(dbo.getdate()) = 1 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
	END
	ELSE BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
	END
	
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

END
ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
	SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) --@DATE_BEG already starting at yesterday's date.
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.




IF OBJECT_ID('TEMPDB..#IMPORTS_GA_AIA_AGENT_MAPPING_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_GA_AIA_AGENT_MAPPING_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_GA_AIA_AGENT_MAPPING_IMPORT_STATUS
(	[RESOURCE_NAME] [varchar](100) NULL,
	[EMAIL] [varchar](100) NULL,
	[INVOICE_MAP_KEY] [varchar](50) NOT NULL,
	[OFFICIAL_ACL_NAME] [varchar](100) NOT NULL,
	[FTP_FILE_NAME] [varchar](100) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[IMPORT_SUB_GROUP_NAME] [varchar](100) NULL,
	[ERROR_TAG] [varchar](50) NULL,
	[ERROR_MSG] [varchar](2500) NULL
)
INSERT INTO #IMPORTS_GA_AIA_AGENT_MAPPING_IMPORT_STATUS
SELECT
 RESOURCE_NAME
,[EMAIL]
,INVOICE_MAP_KEY
,INVOICE_GROUP
--,FTP_FILE_NAME
,REPLACE(FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG

FROM WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING_ERRORS     I

--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_GA_AIA_AGENT_MAPPING_IMPORT_STATUS)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = 'GREEN'
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = 'RED'
END
--=============================================
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_GA_AIA_AGENT_MAPPING_IMPORT_STATUS
	SELECT
	 ''  --RESOURCE_NAME
	,''  --[EMAIL]
	,''  --INVOICE_MAP_KEY
	,''  --INVOICE_GROUP
	,''  --FTP_FILE_NAME
	,dbo.getdate()  --WS_ROW_CREATED_TIME
	,''  --IMPORT_SUB_GROUP_NAME
	,''  --ERROR_TAG
	,''  --ERROR_MSG
END 
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''

IF @RCD_CNT = 0
	BEGIN  --IF @RCD_CNT = 0 HERE,IT ACTUALLY EQUALS THE ONE INSERTED STATING 'No Prolems.' IN ERROR_MSG.
		SET @MSG1 = @MSG1 + 'There were NO General Assembly AIA Agent Mapping Import Errors found.'
	END
ELSE 
	BEGIN
		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1
			BEGIN
				SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
			END
				SET @MSG1 = @MSG1 + 'The list below contains errors found during the process of importing the General Assembly AIA Agent Mapping .csv file. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
				SET @MSG1 = @MSG1 + 'Project Management will need to add, remove, or update agent information in their General Assembly AIA Agent Mapping .csv/"living" documents '
				SET @MSG1 = @MSG1 + 'and upload them to the FTP directory in order for these agents to be invoiced through the automated invoice system. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	END
	
--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)

	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM WSOL_TB_IMPORT_ERRORS_FOUND 
							   WHERE TENANT_KEY = @TENANT_KEY AND SUB_GROUP_NAME = @SUB_GROUP_NAME )
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = 'RED'

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were identified during the General Assembly AIA Agent Mapping import process.  The errors are as follows:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'As well as any in list below.'
	END
END

--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_GA_AIA_AGENT_MAPPING_IMPORT_STATUS 

ORDER BY
 INVOICE_MAP_KEY

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_GA_AIA_AGENT_MAPPING_MISSING_AGENTS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_GA_AIA_AGENT_MAPPING_MISSING_AGENTS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHICH INVOICE_MAP_KEY VALUES EXIST IN THE ACTIVITY FILES, BUT NOT IN THE AIA_AGENT_MAPPING .CSV FILES.
--          NO MATCHES BETWEEN ACTIVITY AND AGENT MAPPING.  WHEN NO MATCHES, THEN NO 'SCHEDULER' INVOICING.
--THIS USP IS DATA SOURCE FOR SRS GRID ON "ACTIVITY IMPORTS" STATUS REPORT!!!

--EXECUTE [dbo].[uspIMPORTS_GA_AIA_AGENT_MAPPING_MISSING_AGENTS] '01/09/2017','01/12/2017','','B'

--========================================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--========================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME

IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.


--===================================================================================================
--CREATE AND POPULATE TMP TABLE
--===================================================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_GA_AIA_AGENT_MAPPING_MISSING_AGENTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_GA_AIA_AGENT_MAPPING_MISSING_AGENTS
END
CREATE TABLE #IMPORTS_GA_AIA_AGENT_MAPPING_MISSING_AGENTS
(FILEDATETIME          VARCHAR(50)
,FTP_FILE_NAME         VARCHAR(100)
,WS_ROW_CREATED_TIME   DATETIME
,INVOICE_MAP_KEY       VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,RCD_CNT               INT
)
INSERT INTO #IMPORTS_GA_AIA_AGENT_MAPPING_MISSING_AGENTS
SELECT
 DT.CAL_DATE_STRING					AS FILEDATETIME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME
,I.WS_ROW_CREATED_TIME
,I.FF_AGENT_ID						AS INVOICE_MAP_KEY
,I.FF_AGENT_NAME					AS RESOURCE_NAME
,COUNT(*)							AS RCD_CNT
--SELECT *
FROM            WSOL_TB_IMPORTS_GA_INVOICING			I   
LEFT JOIN       WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING	IAM  ON IAM.INVOICE_MAP_KEY     = I.FF_AGENT_ID
INNER JOIN      DATE_TIME								DT   ON DT.DATE_TIME_KEY        = I.STD_TENANT_START_DATE_TIME_KEY
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND ISNULL(IAM.INVOICE_MAP_KEY,'') = ''
  AND ISNULL(I.FF_AGENT_NAME,'') NOT IN ('Steven Joseph','Krystel Edwards') -- EXCLUDE NON-WSOL AGENTS
GROUP BY
 DT.CAL_DATE_STRING
,REPLACE(I.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME
,I.WS_ROW_CREATED_TIME
,I.FF_AGENT_ID						--AS INVOICE_MAP_KEY
,I.FF_AGENT_NAME					--AS RESOURCE_NAME

--==================================
UPDATE #IMPORTS_GA_AIA_AGENT_MAPPING_MISSING_AGENTS SET
 FILEDATETIME = REPLACE(CONVERT(VARCHAR(10),ISNULL(FILEDATETIME,'1/1/1900'),102),'/',' . ')

--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_GA_AIA_AGENT_MAPPING_MISSING_AGENTS)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = 'GREEN'
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = 'RED'
END
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_GA_AIA_AGENT_MAPPING_MISSING_AGENTS
	SELECT
	 ''			--DT.CAL_DATE_STRING
	,''			--I.FTP_FILE_NAME
	,dbo.getdate()  --I.WS_ROW_CREATED_TIME
	,''			--I.FF_AGENT_ID   AS INVOICE_MAP_KEY
	,''			--I.FF_AGENT_NAME AS RESOURCE_NAME
	,0			--COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
END
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RCD_CNT = 0 
	BEGIN  --@RCD_CNT WILL BE 0 STILL, EVEN THOUGH ONE BLANK RECORD WAS ADDED...
		SET @MSG1 = @MSG1 + 'There are NO Missing AIA Agent Mappings.'
	END
ELSE
	BEGIN
		IF @RPT_TYPE = 'B'
			BEGIN
				SET @MSG1 = ''
	
				IF @RCD_CNT = 0
					BEGIN
						SET @MSG1 = @MSG1 + 'There are NO missing AIA agent mappings!'
					END
				ELSE
					BEGIN
						IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1
							BEGIN
								SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
							END
		
								SET @MSG1 = @MSG1 + 'The list below contains Invoice Map Key values for agents that are associated with activity for the report date range, but ' + CHAR(10) + CHAR(13)
								SET @MSG1 = @MSG1 + 'who have not been added to or have incorrect values in the AIA Agent Mapping File. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

								SET @MSG1 = @MSG1 + 'Agents who are on this list will not be invoiced (for activity dates shown), unless a special request is made and received '
								SET @MSG1 = @MSG1 + 'with plenty of time before the automated invoice process begins.  The analyst will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

								SET @MSG1 = @MSG1 + 'Also, Project Management may need to add or update agent information in their AIA Agent Mapping CSV file and upload it '
								SET @MSG1 = @MSG1 + 'to the appropriate FTP directory before the Analyst can correctly update agent data. ' + CHAR(13) + CHAR(10)
					END

			END
	END

--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_GA_AIA_AGENT_MAPPING_MISSING_AGENTS 

ORDER BY
 INVOICE_MAP_KEY
,FTP_FILE_NAME

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_GA_AIA_XML]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_GA_AIA_XML]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300)
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='DY'  DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'-Manual - when users run report - what SRS reports are defaulted to.  MAN means use date range that user specified.  The exception is when a report is defined with PTD/YTD and MTD rows in it.
                                  --         'SUB'-Subscription - what SRS subscriptions are defaulted to.  SUB means set date range @vars based on @TIME_INTERVAL. (since date range in SRS Subscription can't be set correctly)
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='AIA'-Agent Invoice Automation - what Sergey uses for/in Scheduler...
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='XML'-AIA RPT (DETAIL) (XML FILE/EXPORT),
AS
SET NOCOUNT ON

SET @TENANT_KEY = 900903  --GENERAL ASSEMBLY

--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)  
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 0,101) AS DATETIME)  
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) + 1
END

--IF @EXECUTIONER = 'MAN', DON'T CHANGE DATES -- THE REPORT IS BEING RAN MANUALLY, AND THE DATE RANGE WANTED BY THE USER IS BEING SET MANUALLY.

IF @EXECUTIONER = 'NEW' BEGIN -- NEW BI-MONTHLY PAYMENT CYCLE 1ST AND 16TH OF EACH MONTH
	IF @TIME_INTERVAL = 'W14' BEGIN
		IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate() - 1)) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
			END
		END		
		ELSE IF DAY(dbo.getdate()) = 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) < 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
	END
END

--=========================================================================================
--FORMAT 'MULTIPLES' "IN THAT" VALUES:  (Referring to CHARINDEX(search for this, in that))
--=========================================================================================
SET @ID_EXT          = ',' + LTRIM(RTRIM(@ID_EXT)) + ','
SET @SCHEDULER_GROUP = ',' + LTRIM(RTRIM(@SCHEDULER_GROUP)) + ','
 

--==================================
--SET AMOUNT TO DIVIDE BY:
--==================================
DECLARE @DS DECIMAL(10,2)  --INT  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.0       --DIVIDE SECONDS BY 1 TO GET SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
	SET @DS = 60.0		--DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
	SET @DS = 3600.0	--DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
IF @RPT_TYPE_GRP = 'AIA' BEGIN

	--POPULATES XML REPORT.  SRS SUBSCRIPTION EXPORTS TO XML.  SSIS RENAMES AND MOVES XML FILE TO FTP.  SERGEY PICKS UP FILE
	
	IF @RPT_TYPE = 'XML' BEGIN  --AIA REPORT  --EXACTLY WHAT IS IN XML FILE AND/OR AIA TABLE.
		--==================================		--CREATE TMP TABLE:
		IF OBJECT_ID('TEMPDB..#IMPORTS_GA_AIA_XML') IS NOT NULL BEGIN
		   DROP TABLE #IMPORTS_GA_AIA_XML
		END
		CREATE TABLE #IMPORTS_GA_AIA_XML
		([PLATFORM]                   VARCHAR(50)
		,[STATUS]                     VARCHAR(50) 
		,INVOICE_MAP_KEY              VARCHAR(50) 
		,FIELD_NAME                   VARCHAR(50) 
		,SCHEDULER_PROJECT_ID         VARCHAR(50) 
		,SCHEDULER_ACL_NAME           VARCHAR(50) 
		,ACD_ID_EXTENSION             VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_ID      VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_NAME    VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_ID       VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_NAME     VARCHAR(50) 
		,PRIMARY_PROJECT_MANAGER_ID   VARCHAR(500) 
		,DIRECTOR_OF_PROJECT_MANAGEMENT_ID VARCHAR(500) 
		,AGENT_TECHNOLOGY_MANAGER_ID  VARCHAR(500) 
		,CONTRACTOR_SUPPORT_PATHWAY   VARCHAR(500) 
		,INVOICE_SYSTEM_ID            VARCHAR(50) 
		,HOLIDAY_INVOICE_ID           VARCHAR(50) 
		,HOLIDAY                      VARCHAR(50) 
		,FILE_FORMAT_OF_PUSH          VARCHAR(50) 
		,AGENT_PREPARATION_INVOICE_ID VARCHAR(50) 
		,NEW_ACL                      VARCHAR(50) 
		,CURRENT_CATS                 VARCHAR(50) 
		,CATS_ID                      VARCHAR(50) 
		,PATS_ID                      VARCHAR(50) 
		,SMART_ELIGIBLE               VARCHAR(50) 
		,SMART_TIER_1                 VARCHAR(50) 
		,SMART_TIER_2                 VARCHAR(50) 
		,SMART_TIER_3                 VARCHAR(50) 
		,INTERVAL                     VARCHAR(50) 
		,DATE                         VARCHAR(50) 
		,HOD_INTERVAL                 VARCHAR(50) 
		,AU_DK_LOGGED_IN_DURATION     DECIMAL(10,2)  --INT 
		,AU_DK_AVAILABLE_DURATION     DECIMAL(10,2)  --INT 
		,AU_DK_TALK_DURATION          DECIMAL(10,2)  --INT 
		,AU_DK_IB_TALK_DURATION       DECIMAL(10,2)  --INT 
		,AU_DK_OB_TALK_DURATION       DECIMAL(10,2)  --INT 
		,AU_DK_CONVENTIONAL_ACW       DECIMAL(10,2)  --INT 
		,AU_DK_NR_DURATION            DECIMAL(10,2)  --INT 
		,AU_DK_PSEUDO_PRODUCTIVE_DURATION   DECIMAL(10,2)  --INT 
		,AU_DK_ADJUSTED_NR_DURATION         DECIMAL(10,2)  --INT 
		,AU_DK_TOTAL_PRODUCTIVE_DURATION    DECIMAL(10,2)  --INT 
		,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS DECIMAL(10,2)  --INT 
		,AU_DK_XFER_COUNT             INT 
		,AU_DK_HOLD_COUNT             INT 
		,AU_DK_CONFERENCE_COUNT       INT 
		,AU_DK_CONSULT_COUNT          INT 
		,AU_DK_PUP_COUNT              INT 
		,AU_DK_OFFERED_COUNT          INT 
		,AU_DK_HANDLED_COUNT          INT 
		,AU_DK_IB_HANDLE_COUNT        INT 
		,AU_DK_OB_HANDLE_COUNT        INT 
		,AU_DK_RONA_COUNT             INT 
		,AU_DK_AWR_COUNT              INT 
		,MINIMUM_GUARANTEE            DECIMAL(10,2) 
		,AUTHORIZED_TO_INVOICE        DECIMAL(10,2) 
		,WEEK_ENDING_DATE             VARCHAR(50) 
		,PAY_CYCLE_CLOSURE_DATE       VARCHAR(50) 
		,CAL_DATE                     DATETIME
		,TENANT_KEY                   INT 
		,INVOICE_ID                   VARCHAR(50) 
		,CST_ROW_CREATED_TIME         DATETIME
		)
		--==================================		
		-- INSERT INTO TEMP TABLE
		--==================================
		INSERT INTO #IMPORTS_GA_AIA_XML
		SELECT --AIA.*
		 AIA.[PLATFORM]
		,AIA.[STATUS]                       
		,AIA.INVOICE_MAP_KEY              
		,AIA.FIELD_NAME                   
		,AIA.SCHEDULER_PROJECT_ID         
		,AIA.SCHEDULER_ACL_NAME           
		,AIA.ACD_ID_EXTENSION             
		,AIA.OFFICIAL_WSOL_CLIENT_ID      
		,AIA.OFFICIAL_WSOL_CLIENT_NAME    
		,AIA.OFFICIAL_ACD_CLIENT_ID       
		,AIA.OFFICIAL_ACD_CLIENT_NAME     
		,AIA.PRIMARY_PROJECT_MANAGER_ID   
		,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID 
		,AIA.AGENT_TECHNOLOGY_MANAGER_ID  
		,AIA.CONTRACTOR_SUPPORT_PATHWAY   
		,AIA.INVOICE_SYSTEM_ID            
		,AIA.HOLIDAY_INVOICE_ID           
		,AIA.HOLIDAY                      
		,AIA.FILE_FORMAT_OF_PUSH          
		,AIA.AGENT_PREPARATION_INVOICE_ID 
		,AIA.NEW_ACL                      
		,AIA.CURRENT_CATS                 
		,AIA.CATS_ID                      
		,AIA.PATS_ID                      
		,AIA.SMART_ELIGIBLE               
		,AIA.SMART_TIER_1                 
		,AIA.SMART_TIER_2                 
		,AIA.SMART_TIER_3                 
		,AIA.INTERVAL                     
		,AIA.DATE                         
		,AIA.HOD_INTERVAL                 
		,CAST( ( 1.0 * (AIA.AU_DK_LOGGED_IN_DURATION) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_LOGGED_IN_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_AVAILABLE_DURATION) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_AVAILABLE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_TALK_DURATION) )      / @DS AS DECIMAL(10,2)) --AS AU_DK_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_IB_TALK_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_IB_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_OB_TALK_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_OB_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_CONVENTIONAL_ACW) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_CONVENTIONAL_ACW
		,CAST( ( 1.0 * (AIA.AU_DK_NR_DURATION) )        / @DS AS DECIMAL(10,2)) --AS AU_DK_NR_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_PSEUDO_PRODUCTIVE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_ADJUSTED_NR_DURATION) )         / @DS AS DECIMAL(10,2)) --AS AU_DK_ADJUSTED_NR_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION) )    / @DS AS DECIMAL(10,2)) --AS AU_DK_TOTAL_PRODUCTIVE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
		,(AIA.AU_DK_XFER_COUNT)         --AS AU_DK_XFER_COUNT
		,(AIA.AU_DK_HOLD_COUNT)         --AS AU_DK_HOLD_COUNT
		,(AIA.AU_DK_CONFERENCE_COUNT)   --AS AU_DK_CONFERENCE_COUNT
		,(AIA.AU_DK_CONSULT_COUNT)      --AS AU_DK_CONSULT_COUNT
		,(AIA.AU_DK_PUP_COUNT)          --AS AU_DK_PUP_COUNT
		,(AIA.AU_DK_OFFERED_COUNT)      --AS AU_DK_OFFERED_COUNT
		,(AIA.AU_DK_HANDLED_COUNT)      --AS AU_DK_HANDLED_COUNT
		,(AIA.AU_DK_IB_HANDLE_COUNT)    --AS AU_DK_IB_HANDLE_COUNT
		,(AIA.AU_DK_OB_HANDLE_COUNT)    --AS AU_DK_OB_HANDLE_COUNT
		,(AIA.AU_DK_RONA_COUNT)         --AS AU_DK_RONA_COUNT
		,(AIA.AU_DK_AWR_COUNT)          --AS AU_DK_AWR_COUNT
		,CAST( ( 1.0 * (AIA.MINIMUM_GUARANTEE) )     / @DS AS DECIMAL(10,2)) --AS MINIMUM_GUARANTEE
		,CAST( ( 1.0 * (AIA.AUTHORIZED_TO_INVOICE) ) / @DS AS DECIMAL(10,2)) --AS AUTHORIZED_TO_INVOICE
		,AIA.WEEK_ENDING_DATE             
		,AIA.PAY_CYCLE_CLOSURE_DATE       
		,AIA.CAL_DATE                     
		,AIA.TENANT_KEY                   
		,AIA.INVOICE_ID                   
		,AIA.WS_ROW_CREATED_TIME         

		--  SELECT *
		FROM            WSOL_TB_IMPORTS_GA_UV_ANT_AIA	AIA
		INNER JOIN      DATE_TIME						DT		ON DT.DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
		
		WHERE ( DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END )
		  AND AIA.STATUS = 'Active'
		  AND ( (ISNULL(AIA.READY_FOR_XML,'') = 'Y')	--<----Maintain this field, and the AIA will populate the XML correctly every time!!!!!!!!!
				OR (@ID_EXT = 'Y') )					--<----In Test Mode (ignore what ready_for_xml is set to).
		  AND ( ISNULL(AIA.INVOICE_ID,'') <> '' )		--<----INSURANCE, IN CASE BLANK ID EXTENSION SLIPS THROUGH
--		  AND ( ISNULL(AIA.RESOURCE_NAME,'') <> '')		--<----INSURANCE, FILTER OUT THOSE NOT IN AIA AGENT MAPPING SINCE INVOICE_ID IS JUST FF_USER_NAME FROM IMPORT FILE

		ORDER BY 
		 AIA.OFFICIAL_ACD_CLIENT_NAME
		--,AIA.SCHEDULER_ACL_NAME
		,AIA.INVOICE_ID

		,AIA.ACD_ID_EXTENSION     
		,AIA.INVOICE_MAP_KEY
		,AIA.DATE
		,AIA.HOD_INTERVAL


		--==================================!!!--INSERT RECORD FOR REPORT SO SSIS KNOWS DATE OF DATA IN DATASET:
		--Have to include 'D??' or 'W??' because SRS Subscriptions are being ran at about same time in one sql job step.
		--  If one subscription takes longer than the other, the wrong date will get used/pulled from the YZ_TB_FILENAMES_FOR_SSIS in the ssis. and so on.
		IF CHARINDEX('D',@TIME_INTERVAL) > 0 BEGIN
			INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
			(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
			SELECT  --FOR THE .XML FILES FOR EACH DATE:
			 'iNetAIA_' + LTRIM(RTRIM(@TIME_INTERVAL))  --'iNetAIA_D09' for internal wsinet tenants 9 days from current date.  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.getdate()  --CST_ROW_CREATED_TIME
		END
		ELSE BEGIN  --'W' MEANING NEED TO PASS/POPULATE WITH DATE RANGE, LIKE 'MMDDYY_MMDDYY'. -- FOR GAR AND NW.
	

			INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
				(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
			SELECT  --FOR GETAROOM AND NINE_WEST:    --old:-- 'AGENT_INVOICE_AIA_XML'  --SQL_JOB_NAME 
			 'iNetAIA_' + LTRIM(RTRIM(@TIME_INTERVAL)) + '_' + REPLACE(LTRIM(RTRIM(CAST(@TENANT_KEY AS VARCHAR(10)))),',','')  --'iNetAIA_W14_900595' for GAR  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_BEG,1),'/','') + '_' + REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.getdate()  --CST_ROW_CREATED_TIME
		END
		--  SELECT * FROM WSOL_TB_FILENAMES_FOR_SSIS ORDER BY CST_ROW_CREATED_TIME DESC

		--==================================!!!--RETURN DATASET TO REPORT:
		SELECT *
		FROM #IMPORTS_GA_AIA_XML
		ORDER BY 
		 OFFICIAL_ACD_CLIENT_NAME
		--,SCHEDULER_ACL_NAME
		,INVOICE_ID

		,ACD_ID_EXTENSION     
		,INVOICE_MAP_KEY
		,DATE
		,HOD_INTERVAL
	END  --AIA_XML



END  --IF @RPT_TYPE_GRP = 'AIA'


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
--==================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_GA_IMPORT_STATUS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_GA_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_GA_IMPORT_STATUS] '01/01/2017','01/31/2017','','B'

--========================================
-- SET DATE VARIABLES
--========================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE 
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE 
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--=========================================================================
--CREATE TMP TABLE:
--=========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_GA_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_GA_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_GA_IMPORT_STATUS
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--========================================================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================================================
    INSERT INTO #IMPORTS_GA_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'') AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0) AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_GA_INVOICING   C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
--		AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )  -- USE IF YOU WANT TO IGNORE WEEKENDS

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME)
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')
		,C.WS_ROW_CREATED_TIME
	) UA

--================================================================================
--CREATE CURSOR TO CHECK FOR MISSING DATES
--================================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

--FOR 'WEEKEND' CODE/FILTER:!!!
--LEFT JOIN WSOL_TB_IMPORTS_WV_INVOICING  C ON   C.STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1)

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_GA_IMPORT_STATUS   I   ON I.FILEDATETIME = DT.FILEDATETIME

--LEFT JOIN       DATE_TIME                    DT2 ON CONVERT(VARCHAR(10),DT2.CAL_DATE,101) = CONVERT(VARCHAR(10),DT.FILEDATETIME,101)
--FOR 'WEEKEND' CODE/FILTER:!!!
--LEFT JOIN       WSOL_TB_IMPORTS_WV_INVOICING  C   ON C.STD_TENANT_START_DATE_TIME_KEY = DT2.DATE_TIME_KEY

--WHERE ISNULL(I.FTP_FILE_NAME,'') = ''  -- ISNULL(I.FILEDATETIME,'1.1.1900') = ''

WHERE ISNULL(I.RCD_CNT,0) = 0
  AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)  -- GENERAL ASSEMBLY AGENTS DO NOT WORK ON WEEKENDS
--  AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = 'GREEN'
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = 'RED'
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B'
	BEGIN

		SET @MSG1 = ''

		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1
			BEGIN
				SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
				IF @RCD_CNT > 0
					BEGIN
						SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
						SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

						SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
						SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 9:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
					END
				ELSE
					BEGIN
						SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
					END
			END
		ELSE 
			BEGIN
				SET @MSG1 = 'Imported file(s) from ' 
					+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
				
				IF @RCD_CNT > 0
					BEGIN
						SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
					END
				ELSE
					BEGIN
						SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
					END
			END
	
	END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--WESTERN DENTAL:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM WSOL_TB_IMPORT_ERRORS_FOUND
							   WHERE TENANT_KEY = 900903 AND SUB_GROUP_NAME = 'GENERAL_ASSEMBLY_INVOICING' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = 'RED'

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_WV_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_GA_IMPORT_STATUS_MISSING_DATA]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_GA_IMPORT_STATUS_MISSING_DATA]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_GA_IMPORT_STATUS_MISSING_DATA] '01/09/2017','01/12/2017','','B'

--==============================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==============================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME

IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE 
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--========================================================================
--CREATE TMP TABLE:
--========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_GA_IMPORT_STATUS_MISSING_DATA') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_GA_IMPORT_STATUS_MISSING_DATA
END
CREATE TABLE #IMPORTS_GA_IMPORT_STATUS_MISSING_DATA
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--========================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================
    INSERT INTO #IMPORTS_GA_IMPORT_STATUS_MISSING_DATA
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													--AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												--AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')															--AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_GA_INVOICING   C

		INNER JOIN      DATE_TIME                      DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT      
,'White' AS BG_COLOR

FROM #IMPORTS_GA_IMPORT_STATUS_MISSING_DATA

ORDER BY
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT      


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_GA_INVOICING_IMPORT]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_GA_INVOICING_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_GA_INVOICING_IMPORT]

--  SELECT * FROM WSOL_TB_IMPORTS_GA_INVOICING_1

--	Durations in the data file are in seconds for the previous day (no interval based reporting available).
--  Durations will be processed through a function to generate interval based reporting.

--===================================================================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY = 900903  --GENERAL ASSEMBLY
--===================================================================================
DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND
WHERE TENANT_KEY		= @TENANT_KEY
  AND SUB_GROUP_NAME	= 'GENERAL_ASSEMBLY_INVOICING'
  --  SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 900903
--===================================================================================

--=========================================================================================================
--  USING @WS_ROW_CREATED_TIME FOR ALL INSERTS WILL ALLOW ME TO DELETE SPECIFIC INSERT PROCESSES/FILES.
--  IN CASE OF EMERGENCY, BREAK GLASS.
--=========================================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.getdate()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===================================================================================

--=============================================================================
--SET EVENT START TIME AND DURATION TO PREPARE FOR PARSING INTO INTERVALS
--=============================================================================
UPDATE WSOL_TB_IMPORTS_GA_INVOICING_1 SET
 EVENT_START_TIME		= CAST(FF2 + ' ' + FF6 AS DATETIME)
,EVENT_DURATION_SECS	= CAST(FF8 AS DECIMAL(10,2))

--=============================================
--DELETE EVENTS WHERE DURATION = 0.00
--=============================================
DELETE FROM WSOL_TB_IMPORTS_GA_INVOICING_1 
WHERE EVENT_DURATION_SECS = 0.00

--=====================================================================================================================
-- PARSE DATA RECORDS INTO INTERVALS
--=====================================================================================================================
DELETE FROM WSOL_TB_IMPORTS_GA_INVOICING_2

DECLARE
 @FF1  VARCHAR(100)
,@FF2  VARCHAR(50)
,@FF3  VARCHAR(50)
,@FF4  VARCHAR(100)
,@FF5  VARCHAR(200) 
,@FF6  VARCHAR(50)
,@FF7  VARCHAR(100) 
,@FF8  VARCHAR(50) 
,@FF9  DATETIME 
,@FF10 DECIMAL(10,2) 
,@FF11 DATETIME
,@FF12 INT
,@FF13 VARCHAR(100)
,@FF14 INT

DECLARE crsT3 CURSOR FOR   
SELECT
 ISNULL(FF1,'')
,ISNULL(FF2,'')
,ISNULL(FF3,'')
,ISNULL(FF4,'')
,ISNULL(FF5,'')
,ISNULL(FF6,'')
,ISNULL(FF7,'')
,ISNULL(FF8,'')
,ISNULL(EVENT_START_TIME,'')
,ISNULL(EVENT_DURATION_SECS,0.00)
,ISNULL(SEQNO_ADDED_TIME,'')
,ISNULL(SEQNO,'0')
,ISNULL(FTP_FILE_NAME,'')
,3600											--<<----- DETERMINES THE INTERVAL, 900 = 15 MIN, 1800 = 30 MIN, 3600 = 60 MIN
FROM WSOL_TB_IMPORTS_GA_INVOICING_1

OPEN crsT3
FETCH NEXT FROM crsT3   INTO @FF1,@FF2,@FF3,@FF4,@FF5,@FF6,@FF7,@FF8,@FF9,@FF10,@FF11,@FF12,@FF13,@FF14

WHILE @@FETCH_STATUS = 0 BEGIN
	 -- SELECT * FROM WSOL_TB_IMPORTS_GA_INVOICING_2 ORDER BY SEQNO
		INSERT INTO WSOL_TB_IMPORTS_GA_INVOICING_2
		SELECT RESULT.*,NULL,NULL
		FROM TVF_GA_STATES_TO_INTERVALS(@FF1,@FF2,@FF3,@FF4,@FF5,@FF6,@FF7,@FF8,@FF9,@FF10,@FF11,@FF12,@FF13,@FF14) RESULT

    FETCH NEXT FROM crsT3   INTO @FF1,@FF2,@FF3,@FF4,@FF5,@FF6,@FF7,@FF8,@FF9,@FF10,@FF11,@FF12,@FF13,@FF14
END
CLOSE crsT3
DEALLOCATE crsT3

-- SELECT * FROM WSOL_TB_IMPORTS_GA_INVOICING_2 ORDER BY SEQNO
--=============================================================================
-- UPDATE CALL COUNTS AND TRANSFER COUNTS
--=============================================================================
UPDATE WSOL_TB_IMPORTS_GA_INVOICING_2 SET
 OUTBOUND_CALLS		=	CASE WHEN FF_AGENT_STATE = 'Busy Outbound' THEN
							CASE WHEN CAST(FF_DATE + ' ' + FF_EVENT_START_TIME AS DATETIME) = EVENT_START_TIME THEN 1
							ELSE 0 END
						ELSE 0 END
,CALLS_TRANSFERRED	=	CASE WHEN FF_AGENT_STATE = 'Call Transferred' THEN
							CASE WHEN CAST(FF_DATE + ' ' + FF_EVENT_START_TIME AS DATETIME) = EVENT_START_TIME THEN 1
							ELSE 0 END
						ELSE 0 END

--=============================================================================
-- GROUP DATA BY INTERVAL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_GA_INVOICING_3

INSERT INTO WSOL_TB_IMPORTS_GA_INVOICING_3
(FF_RECORD_ID
,FF_DATE
,FF_AGENT_ID
,FF_AGENT_NAME
,FF_EVENT_KEY
,FF_EVENT_START_TIME
,FF_AGENT_STATE
,FF_EVENT_DURATION
,EVENT_DURATION_SECS
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_DATE_TIME_KEY
,LOGGED_IN_SECS
,READY_SECS
,READY_FOR_OUTBOUND_SECS
,AWAY_SECS
,AWAY_BREAK_SECS
,AWAY_COMFORT_BREAK_SECS
,BUSY_OUTBOUND_SECS
,BUSY_INTERNAL_SECS
,CALL_TRANSFERRED_SECS
,WRAP_UP_AUTO_SECS
,WRAP_UP_MANUAL_SECS
,LOGGED_OUT_SECS
,EXTENDED_AWAY_SECS
,EXTENDED_AWAY_PAPERWORK_SECS
,EXTENDED_AWAY_LUNCH_SECS
,EXTENDED_AWAY_TRAINING_SECS
,EXTENDED_AWAY_MEETING_SECS
,EXTENDED_AWAY_TEAM_MEETING_SECS
,TOTAL_READY_SECS
,TOTAL_BUSY_SECS
,TOTAL_AWAY_SECS
,TOTAL_WRAP_SECS
,TOTAL_EXTENDED_AWAY_SECS
,OUTBOUND_CALLS
,CALLS_TRANSFERRED
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_SECS
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W2.FF_RECORD_ID
,W2.FF_DATE
,W2.FF_AGENT_ID
,W2.FF_AGENT_NAME
,W2.FF_EVENT_KEY
,W2.FF_EVENT_START_TIME
,W2.FF_AGENT_STATE
,W2.FF_EVENT_DURATION
,SUM(ISNULL(W2.EVENT_DURATION_SECS				,0.00))
,SUM(ISNULL(W2.EVENT_DURATION_IN_INTERVAL_SECS	,0.00))
,MAX(W2.SEQNO_ADDED_TIME)
,MIN(W2.SEQNO)
,W2.FTP_FILE_NAME

,NULL									--AS RESOURCE_NAME
,W2.INTERVAL_START_TIME					--AS DATETIME
,NULL									--AS HOUR_INTERVAL
,NULL									--AS EMPLOYEE_ID
,NULL									--AS STD_TENANT_START_TIME
,NULL									--AS LOGGED_IN_SECS
,NULL									--AS READY_SECS
,NULL									--AS READY_FOR_OUTBOUND_SECS
,NULL									--AS AWAY_SECS
,NULL									--AS AWAY_BREAK_SECS
,NULL									--AS AWAY_COMFORT_BREAK_SECS
,NULL									--AS BUSY_OUTBOUND_SECS
,NULL									--AS BUSY_INTERNAL_SECS
,NULL									--AS CALL_TRANSFERRED_SECS
,NULL									--AS WRAP_UP_AUTO_SECS
,NULL									--AS WRAP_UP_MANUAL_SECS
,NULL									--AS LOGGED_OUT_SECS
,NULL									--AS EXTENDED_AWAY_SECS
,NULL									--AS EXTENDED_AWAY_PAPERWORK_SECS
,NULL									--AS EXTENDED_AWAY_LUNCH_SECS
,NULL									--AS EXTENDED_AWAY_TRAINING_SECS
,NULL									--AS EXTENDED_AWAY_MEETING_SECS
,NULL									--AS EXTENDED_AWAY_TEAM_MEETING_SECS
,NULL									--AS TOTAL_READY_SECS
,NULL									--AS TOTAL_BUSY_SECS
,NULL									--AS TOTAL_AWAY_SECS
,NULL									--AS TOTAL_WRAP_SECS
,NULL									--AS TOTAL_EXTENDED_AWAY_SECS
,SUM(ISNULL(W2.OUTBOUND_CALLS	,0))	--AS OUTBOUND_CALLS
,SUM(ISNULL(W2.CALLS_TRANSFERRED,0))	--AS CALLS_TRANSFERRED
,NULL									--AS CPROD
,NULL									--AS MINIMUM_GUARANTEE
,NULL									--AS AUTHORIZED_SECS
,NULL									--AS EMAIL
,NULL									--AS ID_EXT
,NULL									--AS SCHEDULER_ACL_NAME
,NULL									--AS CAL_DATE
,900903									--AS TENANT_KEY
,NULL									--AS AIR_DAY_TYPE
,NULL									--AS AIR_ACW_FONT_COLOR
,NULL									--AS MIN_GUARANTEE_MINUTES
,NULL									--AS MIN_GUARANTEE_TYPE
,NULL									--AS AUTHORIZED_TO_INVOICE_TYPE
,NULL									--AS HAS_HOLIDAYS
,NULL									--AS INCLUDE_IN_CAS
,NULL									--AS READY_FOR_XML
,NULL									--AS SHOW_ID_EXTS
,NULL									--AS INVOICE_ID

,@WS_ROW_CREATED_TIME					--[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL									 --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_GA_INVOICING_2  W2

GROUP BY
 W2.FF_RECORD_ID
,W2.FF_DATE
,W2.FF_AGENT_ID
,W2.FF_AGENT_NAME
,W2.FF_EVENT_KEY
,W2.FF_EVENT_START_TIME
,W2.FF_AGENT_STATE
,W2.FF_EVENT_DURATION
,W2.FTP_FILE_NAME
,W2.INTERVAL_START_TIME

ORDER BY
 MIN(W2.SEQNO)

--=================================================================================================
-- CONVERT DATETIME FROM EASTERN TIME TO CENTRAL TIME
--=================================================================================================
UPDATE WSOL_TB_IMPORTS_GA_INVOICING_3 SET
 [DATETIME] = DATEADD(hh,-1, [DATETIME])

-- SELECT * FROM WSOL_TB_IMPORTS_GA_INVOICING_3 ORDER BY SEQNO
--===================================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_3) TABLE THAT WEREN'T IN IMPORTED FILE:
--===================================================================================
UPDATE WSOL_TB_IMPORTS_GA_INVOICING_3 SET
 RESOURCE_NAME	=	ISNULL(FF_AGENT_NAME,'')
,EMPLOYEE_ID	=	ISNULL(FF_AGENT_ID,'')
,HOUR_INTERVAL	=	DATEPART(HH, [DATETIME])

,READY_SECS							=	CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Ready'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
										ELSE 0.00 END
,READY_FOR_OUTBOUND_SECS			=	CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Ready for Outbound'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
										ELSE 0.00 END
,AWAY_SECS							=	CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Away'					THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
										ELSE 0.00 END
,AWAY_BREAK_SECS					=	CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Break'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
										ELSE 0.00 END
,AWAY_COMFORT_BREAK_SECS			=	CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Away (ComfortBreak)'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
										ELSE 0.00 END
,BUSY_OUTBOUND_SECS					=	CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Busy Outbound'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
										ELSE 0.00 END
,BUSY_INTERNAL_SECS					=	CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Busy Internal'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
										ELSE 0.00 END										
,CALL_TRANSFERRED_SECS				=	CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Call Transferred'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
										ELSE 0.00 END
,WRAP_UP_AUTO_SECS					=	CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Wrap Up (Auto)'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
										ELSE 0.00 END
,WRAP_UP_MANUAL_SECS				=	CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Wrap Up (Manual)'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
										ELSE 0.00 END
,LOGGED_OUT_SECS					=	CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Logged Out'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
										ELSE 0.00 END
,EXTENDED_AWAY_SECS					=	CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Extended Away'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
										ELSE 0.00 END
,EXTENDED_AWAY_PAPERWORK_SECS		=	CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Extended Away (Paperwork)'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
										ELSE 0.00 END
,EXTENDED_AWAY_LUNCH_SECS			=	CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Extended Away (Lunch)'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
										ELSE 0.00 END
,EXTENDED_AWAY_TRAINING_SECS		=	CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Extended Away (Training)'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
										ELSE 0.00 END
,EXTENDED_AWAY_MEETING_SECS			=	CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Extended Away (Meeting)'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
										ELSE 0.00 END
,EXTENDED_AWAY_TEAM_MEETING_SECS	=	CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Extended Away (TeamMeeting)'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
										ELSE 0.00 END

--===================================================================================================
-- UPDATE DATETIME KEY
--===================================================================================================
UPDATE WSOL_TB_IMPORTS_GA_INVOICING_3 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM		WSOL_TB_IMPORTS_GA_INVOICING_3	I
INNER JOIN	DATE_TIME						DT	ON DT.CAL_DATE = I.[DATETIME]

--===============================================
-- GENERATE ANY ENGINEERED VALUES
--===============================================
UPDATE WSOL_TB_IMPORTS_GA_INVOICING_3 SET
 TOTAL_READY_SECS			=	READY_SECS + READY_FOR_OUTBOUND_SECS
,TOTAL_BUSY_SECS			=	BUSY_OUTBOUND_SECS + BUSY_INTERNAL_SECS
,TOTAL_AWAY_SECS			=	AWAY_SECS + AWAY_BREAK_SECS + AWAY_COMFORT_BREAK_SECS
,TOTAL_WRAP_SECS			=	WRAP_UP_AUTO_SECS + WRAP_UP_MANUAL_SECS
,TOTAL_EXTENDED_AWAY_SECS	=	EXTENDED_AWAY_SECS + EXTENDED_AWAY_PAPERWORK_SECS + EXTENDED_AWAY_LUNCH_SECS +
								EXTENDED_AWAY_TRAINING_SECS + EXTENDED_AWAY_MEETING_SECS + EXTENDED_AWAY_TEAM_MEETING_SECS
,CALLS_TRANSFERRED			=	CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,''))) = 'Call Transferred' THEN 1 ELSE 0 END

--===============================================
--REMOVE LOGGED OUT RECORDS:
--===============================================
INSERT INTO WSOL_TB_IMPORTS_GA_INVOICING_BAD
(
BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,FF_RECORD_ID
,FF_DATE
,FF_AGENT_ID
,FF_AGENT_NAME
,FF_EVENT_KEY
,FF_EVENT_START_TIME
,FF_AGENT_STATE
,FF_EVENT_DURATION
,EVENT_DURATION_SECS
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_DATE_TIME_KEY
,LOGGED_IN_SECS
,READY_SECS
,READY_FOR_OUTBOUND_SECS
,AWAY_SECS
,AWAY_BREAK_SECS
,AWAY_COMFORT_BREAK_SECS
,BUSY_OUTBOUND_SECS
,BUSY_INTERNAL_SECS
,CALL_TRANSFERRED_SECS
,WRAP_UP_AUTO_SECS
,WRAP_UP_MANUAL_SECS
,LOGGED_OUT_SECS
,EXTENDED_AWAY_SECS
,EXTENDED_AWAY_PAPERWORK_SECS
,EXTENDED_AWAY_LUNCH_SECS
,EXTENDED_AWAY_TRAINING_SECS
,EXTENDED_AWAY_MEETING_SECS
,EXTENDED_AWAY_TEAM_MEETING_SECS
,TOTAL_READY_SECS
,TOTAL_BUSY_SECS
,TOTAL_AWAY_SECS
,TOTAL_WRAP_SECS
,TOTAL_EXTENDED_AWAY_SECS
,OUTBOUND_CALLS
,CALLS_TRANSFERRED
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_SECS
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 'LOS'					--BAD_IMPORTS_CODE		--'Logged Out State'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
--,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W3.FF_RECORD_ID
,W3.FF_DATE
,W3.FF_AGENT_ID
,W3.FF_AGENT_NAME
,W3.FF_EVENT_KEY
,W3.FF_EVENT_START_TIME
,W3.FF_AGENT_STATE
,W3.FF_EVENT_DURATION
,W3.EVENT_DURATION_SECS
,W3.EVENT_DURATION_IN_INTERVAL_SECS
,W3.SEQNO_ADDED_TIME
,W3.SEQNO
,W3.FTP_FILE_NAME
,W3.RESOURCE_NAME
,W3.[DATETIME]
,W3.HOUR_INTERVAL
,W3.EMPLOYEE_ID
,W3.STD_TENANT_START_DATE_TIME_KEY
,W3.LOGGED_IN_SECS
,W3.READY_SECS
,W3.READY_FOR_OUTBOUND_SECS
,W3.AWAY_SECS
,W3.AWAY_BREAK_SECS
,W3.AWAY_COMFORT_BREAK_SECS
,W3.BUSY_OUTBOUND_SECS
,W3.BUSY_INTERNAL_SECS
,W3.CALL_TRANSFERRED_SECS
,W3.WRAP_UP_AUTO_SECS
,W3.WRAP_UP_MANUAL_SECS
,W3.LOGGED_OUT_SECS
,W3.EXTENDED_AWAY_SECS
,W3.EXTENDED_AWAY_PAPERWORK_SECS
,W3.EXTENDED_AWAY_LUNCH_SECS
,W3.EXTENDED_AWAY_TRAINING_SECS
,W3.EXTENDED_AWAY_MEETING_SECS
,W3.EXTENDED_AWAY_TEAM_MEETING_SECS
,W3.TOTAL_READY_SECS
,W3.TOTAL_BUSY_SECS
,W3.TOTAL_AWAY_SECS
,W3.TOTAL_WRAP_SECS
,W3.TOTAL_EXTENDED_AWAY_SECS
,W3.OUTBOUND_CALLS
,W3.CALLS_TRANSFERRED
,W3.CPROD
,W3.MINIMUM_GUARANTEE
,W3.AUTHORIZED_SECS
,W3.EMAIL
,W3.ID_EXT
,W3.SCHEDULER_ACL_NAME
,W3.CAL_DATE
,W3.TENANT_KEY
,W3.AIR_DAY_TYPE
,W3.AIR_ACW_FONT_COLOR
,W3.MIN_GUARANTEE_MINUTES
,W3.MIN_GUARANTEE_TYPE
,W3.AUTHORIZED_TO_INVOICE_TYPE
,W3.HAS_HOLIDAYS
,W3.INCLUDE_IN_CAS
,W3.READY_FOR_XML
,W3.SHOW_ID_EXTS
,W3.INVOICE_ID
,W3.WS_ROW_CREATED_TIME
,W3.WS_ROW_UPDATED_TIME

FROM           WSOL_TB_IMPORTS_GA_INVOICING_3    W3
WHERE LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,''))) = 'Logged Out'

--======================================================================
--DELETE LOGGED OUT RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_GA_INVOICING_3
WHERE LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,''))) = 'Logged Out'
--======================================================================

--===============================================
--HANDLE INVALID DATE/TIME RECORDS:
--===============================================
INSERT INTO WSOL_TB_IMPORTS_GA_INVOICING_BAD
(
BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,FF_RECORD_ID
,FF_DATE
,FF_AGENT_ID
,FF_AGENT_NAME
,FF_EVENT_KEY
,FF_EVENT_START_TIME
,FF_AGENT_STATE
,FF_EVENT_DURATION
,EVENT_DURATION_SECS
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_DATE_TIME_KEY
,LOGGED_IN_SECS
,READY_SECS
,READY_FOR_OUTBOUND_SECS
,AWAY_SECS
,AWAY_BREAK_SECS
,AWAY_COMFORT_BREAK_SECS
,BUSY_OUTBOUND_SECS
,BUSY_INTERNAL_SECS
,CALL_TRANSFERRED_SECS
,WRAP_UP_AUTO_SECS
,WRAP_UP_MANUAL_SECS
,LOGGED_OUT_SECS
,EXTENDED_AWAY_SECS
,EXTENDED_AWAY_PAPERWORK_SECS
,EXTENDED_AWAY_LUNCH_SECS
,EXTENDED_AWAY_TRAINING_SECS
,EXTENDED_AWAY_MEETING_SECS
,EXTENDED_AWAY_TEAM_MEETING_SECS
,TOTAL_READY_SECS
,TOTAL_BUSY_SECS
,TOTAL_AWAY_SECS
,TOTAL_WRAP_SECS
,TOTAL_EXTENDED_AWAY_SECS
,OUTBOUND_CALLS
,CALLS_TRANSFERRED
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_SECS
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 'DTM'					--BAD_IMPORTS_CODE		--'Invalid DateTime'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
--,@WS_ROW_CREATED_TIME --WS_ROW_CREATED_TIME
,W3.FF_RECORD_ID
,W3.FF_DATE
,W3.FF_AGENT_ID
,W3.FF_AGENT_NAME
,W3.FF_EVENT_KEY
,W3.FF_EVENT_START_TIME
,W3.FF_AGENT_STATE
,W3.FF_EVENT_DURATION
,W3.EVENT_DURATION_SECS
,W3.EVENT_DURATION_IN_INTERVAL_SECS
,W3.SEQNO_ADDED_TIME
,W3.SEQNO
,W3.FTP_FILE_NAME
,W3.RESOURCE_NAME
,W3.[DATETIME]
,W3.HOUR_INTERVAL
,W3.EMPLOYEE_ID
,W3.STD_TENANT_START_DATE_TIME_KEY
,W3.LOGGED_IN_SECS
,W3.READY_SECS
,W3.READY_FOR_OUTBOUND_SECS
,W3.AWAY_SECS
,W3.AWAY_BREAK_SECS
,W3.AWAY_COMFORT_BREAK_SECS
,W3.BUSY_OUTBOUND_SECS
,W3.BUSY_INTERNAL_SECS
,W3.CALL_TRANSFERRED_SECS
,W3.WRAP_UP_AUTO_SECS
,W3.WRAP_UP_MANUAL_SECS
,W3.LOGGED_OUT_SECS
,W3.EXTENDED_AWAY_SECS
,W3.EXTENDED_AWAY_PAPERWORK_SECS
,W3.EXTENDED_AWAY_LUNCH_SECS
,W3.EXTENDED_AWAY_TRAINING_SECS
,W3.EXTENDED_AWAY_MEETING_SECS
,W3.EXTENDED_AWAY_TEAM_MEETING_SECS
,W3.TOTAL_READY_SECS
,W3.TOTAL_BUSY_SECS
,W3.TOTAL_AWAY_SECS
,W3.TOTAL_WRAP_SECS
,W3.TOTAL_EXTENDED_AWAY_SECS
,W3.OUTBOUND_CALLS
,W3.CALLS_TRANSFERRED
,W3.CPROD
,W3.MINIMUM_GUARANTEE
,W3.AUTHORIZED_SECS
,W3.EMAIL
,W3.ID_EXT
,W3.SCHEDULER_ACL_NAME
,W3.CAL_DATE
,W3.TENANT_KEY
,W3.AIR_DAY_TYPE
,W3.AIR_ACW_FONT_COLOR
,W3.MIN_GUARANTEE_MINUTES
,W3.MIN_GUARANTEE_TYPE
,W3.AUTHORIZED_TO_INVOICE_TYPE
,W3.HAS_HOLIDAYS
,W3.INCLUDE_IN_CAS
,W3.READY_FOR_XML
,W3.SHOW_ID_EXTS
,W3.INVOICE_ID
,W3.WS_ROW_CREATED_TIME
,W3.WS_ROW_UPDATED_TIME

FROM           WSOL_TB_IMPORTS_GA_INVOICING_3    W3
WHERE ISNULL(W3.STD_TENANT_START_DATE_TIME_KEY,0) = 0

--======================================================================
--DELETE INVALID DATE/TIME RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_GA_INVOICING_3
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================

--======================================================================
--REMOVE RECORDS OUTSIDE OF WORK HOURS ON 01/09/2017 (08:00 - 14:00)
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_GA_INVOICING_BAD
(
BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,FF_RECORD_ID
,FF_DATE
,FF_AGENT_ID
,FF_AGENT_NAME
,FF_EVENT_KEY
,FF_EVENT_START_TIME
,FF_AGENT_STATE
,FF_EVENT_DURATION
,EVENT_DURATION_SECS
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_DATE_TIME_KEY
,LOGGED_IN_SECS
,READY_SECS
,READY_FOR_OUTBOUND_SECS
,AWAY_SECS
,AWAY_BREAK_SECS
,AWAY_COMFORT_BREAK_SECS
,BUSY_OUTBOUND_SECS
,BUSY_INTERNAL_SECS
,CALL_TRANSFERRED_SECS
,WRAP_UP_AUTO_SECS
,WRAP_UP_MANUAL_SECS
,LOGGED_OUT_SECS
,EXTENDED_AWAY_SECS
,EXTENDED_AWAY_PAPERWORK_SECS
,EXTENDED_AWAY_LUNCH_SECS
,EXTENDED_AWAY_TRAINING_SECS
,EXTENDED_AWAY_MEETING_SECS
,EXTENDED_AWAY_TEAM_MEETING_SECS
,TOTAL_READY_SECS
,TOTAL_BUSY_SECS
,TOTAL_AWAY_SECS
,TOTAL_WRAP_SECS
,TOTAL_EXTENDED_AWAY_SECS
,OUTBOUND_CALLS
,CALLS_TRANSFERRED
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_SECS
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 'OWH'					--BAD_IMPORTS_CODE		--'Outside Work Hours'
,'ACT'					--BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
--,@WS_ROW_CREATED_TIME	--WS_ROW_CREATED_TIME
,W3.FF_RECORD_ID
,W3.FF_DATE
,W3.FF_AGENT_ID
,W3.FF_AGENT_NAME
,W3.FF_EVENT_KEY
,W3.FF_EVENT_START_TIME
,W3.FF_AGENT_STATE
,W3.FF_EVENT_DURATION
,W3.EVENT_DURATION_SECS
,W3.EVENT_DURATION_IN_INTERVAL_SECS
,W3.SEQNO_ADDED_TIME
,W3.SEQNO
,W3.FTP_FILE_NAME
,W3.RESOURCE_NAME
,W3.[DATETIME]
,W3.HOUR_INTERVAL
,W3.EMPLOYEE_ID
,W3.STD_TENANT_START_DATE_TIME_KEY
,W3.LOGGED_IN_SECS
,W3.READY_SECS
,W3.READY_FOR_OUTBOUND_SECS
,W3.AWAY_SECS
,W3.AWAY_BREAK_SECS
,W3.AWAY_COMFORT_BREAK_SECS
,W3.BUSY_OUTBOUND_SECS
,W3.BUSY_INTERNAL_SECS
,W3.CALL_TRANSFERRED_SECS
,W3.WRAP_UP_AUTO_SECS
,W3.WRAP_UP_MANUAL_SECS
,W3.LOGGED_OUT_SECS
,W3.EXTENDED_AWAY_SECS
,W3.EXTENDED_AWAY_PAPERWORK_SECS
,W3.EXTENDED_AWAY_LUNCH_SECS
,W3.EXTENDED_AWAY_TRAINING_SECS
,W3.EXTENDED_AWAY_MEETING_SECS
,W3.EXTENDED_AWAY_TEAM_MEETING_SECS
,W3.TOTAL_READY_SECS
,W3.TOTAL_BUSY_SECS
,W3.TOTAL_AWAY_SECS
,W3.TOTAL_WRAP_SECS
,W3.TOTAL_EXTENDED_AWAY_SECS
,W3.OUTBOUND_CALLS
,W3.CALLS_TRANSFERRED
,W3.CPROD
,W3.MINIMUM_GUARANTEE
,W3.AUTHORIZED_SECS
,W3.EMAIL
,W3.ID_EXT
,W3.SCHEDULER_ACL_NAME
,W3.CAL_DATE
,W3.TENANT_KEY
,W3.AIR_DAY_TYPE
,W3.AIR_ACW_FONT_COLOR
,W3.MIN_GUARANTEE_MINUTES
,W3.MIN_GUARANTEE_TYPE
,W3.AUTHORIZED_TO_INVOICE_TYPE
,W3.HAS_HOLIDAYS
,W3.INCLUDE_IN_CAS
,W3.READY_FOR_XML
,W3.SHOW_ID_EXTS
,W3.INVOICE_ID
,W3.WS_ROW_CREATED_TIME
,W3.WS_ROW_UPDATED_TIME

FROM		   WSOL_TB_IMPORTS_GA_INVOICING_3	 W3
WHERE W3.FF_DATE = '1/9/2017'
  AND
	( W3.HOUR_INTERVAL < 8
	  OR
	  W3.HOUR_INTERVAL > 14
	)
--======================================================================
--DELETE RECORDS OUTSIDE OF WORK HOURS ON 01/09/2017 (08:00 - 14:00)
--======================================================================
DELETE
FROM WSOL_TB_IMPORTS_GA_INVOICING_3
WHERE FF_DATE = '1/9/2017'
  AND
	( HOUR_INTERVAL < 8
	  OR
	  HOUR_INTERVAL > 14
	)
--======================================================================

--======================================================================
--REMOVE RECORDS OUTSIDE OF WORK HOURS (08:00 - 21:00)
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_GA_INVOICING_BAD
(
BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,FF_RECORD_ID
,FF_DATE
,FF_AGENT_ID
,FF_AGENT_NAME
,FF_EVENT_KEY
,FF_EVENT_START_TIME
,FF_AGENT_STATE
,FF_EVENT_DURATION
,EVENT_DURATION_SECS
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_DATE_TIME_KEY
,LOGGED_IN_SECS
,READY_SECS
,READY_FOR_OUTBOUND_SECS
,AWAY_SECS
,AWAY_BREAK_SECS
,AWAY_COMFORT_BREAK_SECS
,BUSY_OUTBOUND_SECS
,BUSY_INTERNAL_SECS
,CALL_TRANSFERRED_SECS
,WRAP_UP_AUTO_SECS
,WRAP_UP_MANUAL_SECS
,LOGGED_OUT_SECS
,EXTENDED_AWAY_SECS
,EXTENDED_AWAY_PAPERWORK_SECS
,EXTENDED_AWAY_LUNCH_SECS
,EXTENDED_AWAY_TRAINING_SECS
,EXTENDED_AWAY_MEETING_SECS
,EXTENDED_AWAY_TEAM_MEETING_SECS
,TOTAL_READY_SECS
,TOTAL_BUSY_SECS
,TOTAL_AWAY_SECS
,TOTAL_WRAP_SECS
,TOTAL_EXTENDED_AWAY_SECS
,OUTBOUND_CALLS
,CALLS_TRANSFERRED
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_SECS
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 'OWH'					--BAD_IMPORTS_CODE		--'Outside Work Hours'
,'ACT'					--BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
--,@WS_ROW_CREATED_TIME	--WS_ROW_CREATED_TIME
,W3.FF_RECORD_ID
,W3.FF_DATE
,W3.FF_AGENT_ID
,W3.FF_AGENT_NAME
,W3.FF_EVENT_KEY
,W3.FF_EVENT_START_TIME
,W3.FF_AGENT_STATE
,W3.FF_EVENT_DURATION
,W3.EVENT_DURATION_SECS
,W3.EVENT_DURATION_IN_INTERVAL_SECS
,W3.SEQNO_ADDED_TIME
,W3.SEQNO
,W3.FTP_FILE_NAME
,W3.RESOURCE_NAME
,W3.[DATETIME]
,W3.HOUR_INTERVAL
,W3.EMPLOYEE_ID
,W3.STD_TENANT_START_DATE_TIME_KEY
,W3.LOGGED_IN_SECS
,W3.READY_SECS
,W3.READY_FOR_OUTBOUND_SECS
,W3.AWAY_SECS
,W3.AWAY_BREAK_SECS
,W3.AWAY_COMFORT_BREAK_SECS
,W3.BUSY_OUTBOUND_SECS
,W3.BUSY_INTERNAL_SECS
,W3.CALL_TRANSFERRED_SECS
,W3.WRAP_UP_AUTO_SECS
,W3.WRAP_UP_MANUAL_SECS
,W3.LOGGED_OUT_SECS
,W3.EXTENDED_AWAY_SECS
,W3.EXTENDED_AWAY_PAPERWORK_SECS
,W3.EXTENDED_AWAY_LUNCH_SECS
,W3.EXTENDED_AWAY_TRAINING_SECS
,W3.EXTENDED_AWAY_MEETING_SECS
,W3.EXTENDED_AWAY_TEAM_MEETING_SECS
,W3.TOTAL_READY_SECS
,W3.TOTAL_BUSY_SECS
,W3.TOTAL_AWAY_SECS
,W3.TOTAL_WRAP_SECS
,W3.TOTAL_EXTENDED_AWAY_SECS
,W3.OUTBOUND_CALLS
,W3.CALLS_TRANSFERRED
,W3.CPROD
,W3.MINIMUM_GUARANTEE
,W3.AUTHORIZED_SECS
,W3.EMAIL
,W3.ID_EXT
,W3.SCHEDULER_ACL_NAME
,W3.CAL_DATE
,W3.TENANT_KEY
,W3.AIR_DAY_TYPE
,W3.AIR_ACW_FONT_COLOR
,W3.MIN_GUARANTEE_MINUTES
,W3.MIN_GUARANTEE_TYPE
,W3.AUTHORIZED_TO_INVOICE_TYPE
,W3.HAS_HOLIDAYS
,W3.INCLUDE_IN_CAS
,W3.READY_FOR_XML
,W3.SHOW_ID_EXTS
,W3.INVOICE_ID
,W3.WS_ROW_CREATED_TIME
,W3.WS_ROW_UPDATED_TIME

FROM		   WSOL_TB_IMPORTS_GA_INVOICING_3	 W3
WHERE W3.FF_DATE <> '1/9/2017'
  AND
	( W3.HOUR_INTERVAL < 8
	  OR
	  W3.HOUR_INTERVAL > 21
	)
--======================================================================
--DELETE RECORDS OUTSIDE OF WORK HOURS (08:00 - 21:00)
--======================================================================
DELETE
FROM WSOL_TB_IMPORTS_GA_INVOICING_3
WHERE FF_DATE <> '1/9/2017'
  AND
	( HOUR_INTERVAL < 8
	  OR
	  HOUR_INTERVAL > 21
	)
--======================================================================

--===========================================================================================================
--HANDLE DUPLICATES:
--===========================================================================================================
INSERT INTO WSOL_TB_IMPORTS_GA_INVOICING_BAD
(
BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,FF_RECORD_ID
,FF_DATE
,FF_AGENT_ID
,FF_AGENT_NAME
,FF_EVENT_KEY
,FF_EVENT_START_TIME
,FF_AGENT_STATE
,FF_EVENT_DURATION
,EVENT_DURATION_SECS
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_DATE_TIME_KEY
,LOGGED_IN_SECS
,READY_SECS
,READY_FOR_OUTBOUND_SECS
,AWAY_SECS
,AWAY_BREAK_SECS
,AWAY_COMFORT_BREAK_SECS
,BUSY_OUTBOUND_SECS
,BUSY_INTERNAL_SECS
,CALL_TRANSFERRED_SECS
,WRAP_UP_AUTO_SECS
,WRAP_UP_MANUAL_SECS
,LOGGED_OUT_SECS
,EXTENDED_AWAY_SECS
,EXTENDED_AWAY_PAPERWORK_SECS
,EXTENDED_AWAY_LUNCH_SECS
,EXTENDED_AWAY_TRAINING_SECS
,EXTENDED_AWAY_MEETING_SECS
,EXTENDED_AWAY_TEAM_MEETING_SECS
,TOTAL_READY_SECS
,TOTAL_BUSY_SECS
,TOTAL_AWAY_SECS
,TOTAL_WRAP_SECS
,TOTAL_EXTENDED_AWAY_SECS
,OUTBOUND_CALLS
,CALLS_TRANSFERRED
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_SECS
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 'DUP'					--BAD_IMPORTS_CODE		--'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE --'ACT'IVITY FILE
--,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W3.FF_RECORD_ID
,W3.FF_DATE
,W3.FF_AGENT_ID
,W3.FF_AGENT_NAME
,W3.FF_EVENT_KEY
,W3.FF_EVENT_START_TIME
,W3.FF_AGENT_STATE
,W3.FF_EVENT_DURATION
,W3.EVENT_DURATION_SECS
,W3.EVENT_DURATION_IN_INTERVAL_SECS
,W3.SEQNO_ADDED_TIME
,W3.SEQNO
,W3.FTP_FILE_NAME
,W3.RESOURCE_NAME
,W3.[DATETIME]
,W3.HOUR_INTERVAL
,W3.EMPLOYEE_ID
,W3.STD_TENANT_START_DATE_TIME_KEY
,W3.LOGGED_IN_SECS
,W3.READY_SECS
,W3.READY_FOR_OUTBOUND_SECS
,W3.AWAY_SECS
,W3.AWAY_BREAK_SECS
,W3.AWAY_COMFORT_BREAK_SECS
,W3.BUSY_OUTBOUND_SECS
,W3.BUSY_INTERNAL_SECS
,W3.CALL_TRANSFERRED_SECS
,W3.WRAP_UP_AUTO_SECS
,W3.WRAP_UP_MANUAL_SECS
,W3.LOGGED_OUT_SECS
,W3.EXTENDED_AWAY_SECS
,W3.EXTENDED_AWAY_PAPERWORK_SECS
,W3.EXTENDED_AWAY_LUNCH_SECS
,W3.EXTENDED_AWAY_TRAINING_SECS
,W3.EXTENDED_AWAY_MEETING_SECS
,W3.EXTENDED_AWAY_TEAM_MEETING_SECS
,W3.TOTAL_READY_SECS
,W3.TOTAL_BUSY_SECS
,W3.TOTAL_AWAY_SECS
,W3.TOTAL_WRAP_SECS
,W3.TOTAL_EXTENDED_AWAY_SECS
,W3.OUTBOUND_CALLS
,W3.CALLS_TRANSFERRED
,W3.CPROD
,W3.MINIMUM_GUARANTEE
,W3.AUTHORIZED_SECS
,W3.EMAIL
,W3.ID_EXT
,W3.SCHEDULER_ACL_NAME
,W3.CAL_DATE
,W3.TENANT_KEY
,W3.AIR_DAY_TYPE
,W3.AIR_ACW_FONT_COLOR
,W3.MIN_GUARANTEE_MINUTES
,W3.MIN_GUARANTEE_TYPE
,W3.AUTHORIZED_TO_INVOICE_TYPE
,W3.HAS_HOLIDAYS
,W3.INCLUDE_IN_CAS
,W3.READY_FOR_XML
,W3.SHOW_ID_EXTS
,W3.INVOICE_ID
,W3.WS_ROW_CREATED_TIME
,W3.WS_ROW_UPDATED_TIME

FROM
(	SELECT
	 [DATETIME]
	,FF_AGENT_ID
	,FF_AGENT_STATE
	,FF_EVENT_START_TIME
	,ROW_NUMBER() over (partition by [DATETIME], FF_AGENT_ID, FF_AGENT_STATE, FF_EVENT_START_TIME
                            order by [DATETIME], FF_AGENT_ID, FF_AGENT_STATE, FF_EVENT_START_TIME, READY_SECS DESC) ROWNO
	FROM WSOL_TB_IMPORTS_GA_INVOICING_3
) TNM
LEFT JOIN      WSOL_TB_IMPORTS_GA_INVOICING_3	W3   ON W3.[DATETIME]			= TNM.[DATETIME]
													AND W3.FF_AGENT_ID			= TNM.FF_AGENT_ID
													AND W3.FF_AGENT_STATE		= TNM.FF_AGENT_STATE
													AND W3.FF_EVENT_START_TIME	= TNM.FF_EVENT_START_TIME
WHERE TNM.ROWNO > 1

--===========================================================================================================
--DELETE DUPLICATES:
--===========================================================================================================
DELETE FROM TNM
FROM
(	SELECT
	 [DATETIME]
	,FF_AGENT_ID
	,FF_AGENT_STATE
	,FF_EVENT_START_TIME
	,ROW_NUMBER() over (partition by [DATETIME], FF_AGENT_ID, FF_AGENT_STATE, FF_EVENT_START_TIME
                            order by [DATETIME], FF_AGENT_ID, FF_AGENT_STATE, FF_EVENT_START_TIME, READY_SECS DESC) ROWNO
	FROM WSOL_TB_IMPORTS_GA_INVOICING_3
) TNM
WHERE TNM.ROWNO > 1
--===========================================================================================================

-- SELECT * FROM WSOL_TB_IMPORTS_GA_INVOICING_3 ORDER BY SEQNO
--===========================================================================================================
--UPDATE FIELDS FROM MAPPING DATA AND ADDITIONAL INVOICE FIELDS
--===========================================================================================================
UPDATE WSOL_TB_IMPORTS_GA_INVOICING_3 SET
  EMAIL			= ISNULL(IAM.EMAIL,'')
 ,ID_EXT		= CASE WHEN IAM.INVOICE_GROUP = 'Resource' THEN 'GAR'
					   WHEN IAM.INVOICE_GROUP = ''		   THEN 'GAS'
					   ELSE '' END
 FROM            WSOL_TB_IMPORTS_GA_INVOICING_3			I
 LEFT JOIN       WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING	IAM  ON IAM.INVOICE_MAP_KEY = I.FF_AGENT_ID

--SELECT * FROM WSOL_TB_IMPORTS_GA_AIA_AGENT_MAPPING

UPDATE WSOL_TB_IMPORTS_GA_INVOICING_3 SET	-- SELECT
  AIR_DAY_TYPE = CASE WHEN IG.HAS_HOLIDAYS = 'Y' AND
						 (    ISNULL(IH.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) OR
						   ( ISNULL(IHA.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) AND ISNULL(IHA.ID_EXT,'') <> '' )
						 )
					  THEN 'H' ELSE 'S' END  --AS AIR_DAY_TYPE  --H=Holiday  --S=Standard
 FROM            WSOL_TB_IMPORTS_GA_INVOICING_3					I
 INNER JOIN      DATE_TIME										DT	ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY
 LEFT JOIN       WSOL_TB_IMPORTS_GA_SD_INVOICE_GROUPS			IG	ON IG.ID_EXT              = I.ID_EXT
 LEFT JOIN       WSOL_TB_IMPORTS_GA_SD_INVOICE_HOLIDAYS			IH	ON IH.HOLIDAY_DATE        = CAST(DT.CAL_DATE_STRING AS DATETIME)
 LEFT JOIN       WSOL_TB_IMPORTS_GA_SD_INVOICE_HOLIDAYS_ADDL	IHA ON IHA.HOLIDAY_DATE       = CAST(DT.CAL_DATE_STRING AS DATETIME)
																   AND IHA.ID_EXT             = I.ID_EXT


UPDATE WSOL_TB_IMPORTS_GA_INVOICING_3 SET
  AIR_ACW_FONT_COLOR             = 'Black'
 ,MIN_GUARANTEE_MINUTES          = ISNULL(IG.MIN_GUARANTEE_MINUTES,0)        --varies between scheduler acl names.
 ,MIN_GUARANTEE_TYPE             = ISNULL(IG.MIN_GUARANTEE_TYPE,'')          --varies between scheduler acl names.
 ,AUTHORIZED_TO_INVOICE_TYPE     = ISNULL(IG.AUTHORIZED_TO_INVOICE_TYPE,'')  --varies between scheduler acl names.

 ,HAS_HOLIDAYS    = IG.HAS_HOLIDAYS
 ,INCLUDE_IN_CAS  = IG.INCLUDE_IN_CAS
 ,READY_FOR_XML   = IG.READY_FOR_XML
 ,SHOW_ID_EXTS    = IG.SHOW_ID_EXTS
 FROM            WSOL_TB_IMPORTS_GA_INVOICING_3			I
 LEFT JOIN       WSOL_TB_IMPORTS_GA_SD_INVOICE_GROUPS	IG  ON IG.ID_EXT    = I.ID_EXT
												

UPDATE WSOL_TB_IMPORTS_GA_INVOICING_3 SET
   INVOICE_ID         = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
  ,SCHEDULER_ACL_NAME = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
 FROM            WSOL_TB_IMPORTS_GA_INVOICING_3				AIA 
 LEFT JOIN       WSOL_TB_IMPORTS_GA_SD_AIA_STATIC_DEFAULTS	AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT


--======================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .CSV FILES:
--======================================================================
--SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 900903
--======================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--Check #1:  ===================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_GA_INVOICING_1)
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + 'ERROR!  File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	(
	TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY					--TENANT_KEY
	,'GENERAL_ASSEMBLY_INVOICING'	--SUB_GROUP_NAME
	,@MSG1							--ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	--MUST RETURN AT LEAST ONE RECORD TO SSIS
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY					--TENANT_KEY
	,'GENERAL_ASSEMBLY_INVOICING'	--SUB_GROUP_NAME
	,''								--ERROR_MSG
END

--==================================================================================
-- GROUP DATA BY AGENT, INTERVAL, & INVOICE ID
--==================================================================================

DELETE FROM WSOL_TB_IMPORTS_GA_INVOICING_4

INSERT INTO WSOL_TB_IMPORTS_GA_INVOICING_4
(FF_RECORD_ID
,FF_DATE
,FF_AGENT_ID
,FF_AGENT_NAME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_DATE_TIME_KEY
,LOGGED_IN_SECS
,READY_SECS
,READY_FOR_OUTBOUND_SECS
,AWAY_SECS
,AWAY_BREAK_SECS
,AWAY_COMFORT_BREAK_SECS
,BUSY_OUTBOUND_SECS
,BUSY_INTERNAL_SECS
,CALL_TRANSFERRED_SECS
,WRAP_UP_AUTO_SECS
,WRAP_UP_MANUAL_SECS
,LOGGED_OUT_SECS
,EXTENDED_AWAY_SECS
,EXTENDED_AWAY_PAPERWORK_SECS
,EXTENDED_AWAY_LUNCH_SECS
,EXTENDED_AWAY_TRAINING_SECS
,EXTENDED_AWAY_MEETING_SECS
,EXTENDED_AWAY_TEAM_MEETING_SECS
,TOTAL_READY_SECS
,TOTAL_BUSY_SECS
,TOTAL_AWAY_SECS
,TOTAL_WRAP_SECS
,TOTAL_EXTENDED_AWAY_SECS
,OUTBOUND_CALLS
,CALLS_TRANSFERRED
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_SECS
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 MIN(W3.FF_RECORD_ID)					AS FF_RECORD_ID
,MIN(W3.FF_DATE)						AS FF_DATE
,W3.FF_AGENT_ID							AS FF_AGENT_ID
,W3.FF_AGENT_NAME						AS FF_AGENT_NAME

,MAX(W3.SEQNO_ADDED_TIME)				AS SEQNO_ADDED_TIME
,MIN(W3.SEQNO)							AS SEQNO
,MAX(W3.FTP_FILE_NAME)					AS FTP_FILE_NAME

,MAX(ISNULL(W3.RESOURCE_NAME,''))		AS RESOURCE_NAME
,MAX(W3.[DATETIME])						AS [DATETIME]
,MAX(W3.HOUR_INTERVAL)					AS HOUR_INTERVAL
,MAX(W3.EMPLOYEE_ID)					AS EMPLOYEE_ID
,W3.STD_TENANT_START_DATE_TIME_KEY		AS STD_TENANT_START_DATE_TIME_KEY

,SUM(ISNULL(W3.LOGGED_IN_SECS					,0.00))	AS LOGGED_IN_SECS
,SUM(ISNULL(W3.READY_SECS						,0.00))	AS READY_SECS
,SUM(ISNULL(W3.READY_FOR_OUTBOUND_SECS			,0.00))	AS READY_FOR_OUTBOUND_SECS
,SUM(ISNULL(W3.AWAY_SECS						,0.00))	AS AWAY_SECS
,SUM(ISNULL(W3.AWAY_BREAK_SECS					,0.00))	AS AWAY_BREAK_SECS
,SUM(ISNULL(W3.AWAY_COMFORT_BREAK_SECS			,0.00))	AS AWAY_COMFORT_BREAK_SECS
,SUM(ISNULL(W3.BUSY_OUTBOUND_SECS				,0.00))	AS BUSY_OUTBOUND_SECS
,SUM(ISNULL(W3.BUSY_INTERNAL_SECS				,0.00)) AS BUSY_INTERNAL_SECS
,SUM(ISNULL(W3.CALL_TRANSFERRED_SECS			,0.00))	AS CALL_TRANSFERRED_SECS
,SUM(ISNULL(W3.WRAP_UP_AUTO_SECS				,0.00))	AS WRAP_UP_AUTO_SECS
,SUM(ISNULL(W3.WRAP_UP_MANUAL_SECS				,0.00))	AS WRAP_UP_MANUAL_SECS
,SUM(ISNULL(W3.LOGGED_OUT_SECS					,0.00))	AS LOGGED_OUT_SECS 
,SUM(ISNULL(W3.EXTENDED_AWAY_SECS				,0.00))	AS EXTENDED_AWAY_SECS
,SUM(ISNULL(W3.EXTENDED_AWAY_PAPERWORK_SECS		,0.00))	AS EXTENDED_AWAY_PAPERWORK_SECS
,SUM(ISNULL(W3.EXTENDED_AWAY_LUNCH_SECS			,0.00))	AS EXTENDED_AWAY_LUNCH_SECS
,SUM(ISNULL(W3.EXTENDED_AWAY_TRAINING_SECS		,0.00))	AS EXTENDED_AWAY_TRAINING_SECS 
,SUM(ISNULL(W3.EXTENDED_AWAY_MEETING_SECS		,0.00))	AS EXTENDED_AWAY_MEETING_SECS
,SUM(ISNULL(W3.EXTENDED_AWAY_TEAM_MEETING_SECS	,0.00))	AS EXTENDED_AWAY_TEAM_MEETING_SECS 
,SUM(ISNULL(W3.TOTAL_READY_SECS					,0.00))	AS TOTAL_READY_SECS
,SUM(ISNULL(W3.TOTAL_BUSY_SECS					,0.00)) AS TOTAL_BUSY_SECS
,SUM(ISNULL(W3.TOTAL_AWAY_SECS					,0.00))	AS TOTAL_AWAY_SECS 
,SUM(ISNULL(W3.TOTAL_WRAP_SECS					,0.00))	AS TOTAL_WRAP_SECS
,SUM(ISNULL(W3.TOTAL_EXTENDED_AWAY_SECS			,0.00))	AS TOTAL_EXTENDED_AWAY_SECS

,SUM(ISNULL(W3.OUTBOUND_CALLS					,0	 )) AS OUTBOUND_CALLS
,SUM(ISNULL(W3.CALLS_TRANSFERRED				,0	 ))	AS CALLS_TRANSFERRED

,SUM(ISNULL(W3.CPROD							,0.00))	AS CPROD
,SUM(ISNULL(W3.MINIMUM_GUARANTEE				,0.00))	AS MINIMUM_GUARANTEE
,SUM(ISNULL(W3.AUTHORIZED_SECS					,0.00))	AS AUTHORIZED_SECS

,MAX(ISNULL(W3.EMAIL							,''  ))	AS EMAIL
,	 ISNULL(W3.ID_EXT							,''	 )	AS ID_EXT
,MAX(ISNULL(W3.SCHEDULER_ACL_NAME				,''	 ))	AS SCHEDULER_ACL_NAME
,MAX(W3.CAL_DATE									 )	AS CAL_DATE
,MAX(ISNULL(W3.TENANT_KEY						,''	 ))	AS TENANT_KEY
,MAX(ISNULL(W3.AIR_DAY_TYPE						,''	 ))	AS AIR_DAY_TYPE
,MAX(ISNULL(W3.AIR_ACW_FONT_COLOR				,''  ))	AS AIR_ACW_FONT_COLOR
,MAX(ISNULL(W3.MIN_GUARANTEE_MINUTES			,0.00))	AS MIN_GUARANTEE_MINUTES
,MAX(ISNULL(W3.MIN_GUARANTEE_TYPE				,''	 ))	AS MIN_GUARANTEE_TYPE
,MAX(ISNULL(W3.AUTHORIZED_TO_INVOICE_TYPE		,''	 ))	AS AUTHORIZED_TO_INVOICE_TYPE
,MAX(ISNULL(W3.HAS_HOLIDAYS						,''	 )) AS HAS_HOLIDAYS
,MAX(ISNULL(W3.INCLUDE_IN_CAS					,''	 )) AS INCLUDE_IN_CAS
,MAX(ISNULL(W3.READY_FOR_XML					,''	 )) AS READY_FOR_XML
,MAX(ISNULL(W3.SHOW_ID_EXTS						,''	 ))	AS SHOW_ID_EXTS
,	 ISNULL(W3.INVOICE_ID						,''	 )  AS INVOICE_ID

,@WS_ROW_CREATED_TIME									AS WS_ROW_CREATED_TIME
,NULL													AS WS_ROW_UPDATED_TIME

FROM            WSOL_TB_IMPORTS_GA_INVOICING_3  W3

GROUP BY
 W3.FF_AGENT_ID
,W3.FF_AGENT_NAME
,W3.STD_TENANT_START_DATE_TIME_KEY
,W3.ID_EXT
,W3.INVOICE_ID

ORDER BY
 MIN(W3.SEQNO)

--===============================================
-- CALCULATE PAYMENT VALUES
--===============================================
UPDATE WSOL_TB_IMPORTS_GA_INVOICING_4 SET
 CPROD = TOTAL_READY_SECS + BUSY_OUTBOUND_SECS + CALL_TRANSFERRED_SECS + TOTAL_WRAP_SECS

UPDATE WSOL_TB_IMPORTS_GA_INVOICING_4 SET
 MINIMUM_GUARANTEE	= CASE WHEN CPROD > 3600.00 THEN 3600.00 ELSE CPROD END
,AUTHORIZED_SECS	= CASE WHEN CPROD > 3600.00 THEN 3600.00 ELSE CPROD END	

UPDATE WSOL_TB_IMPORTS_GA_INVOICING_4 SET
 MINIMUM_GUARANTEE	= CASE WHEN TOTAL_READY_SECS = 3600.00 AND MINIMUM_GUARANTEE = 3600.00 THEN 0.00 ELSE MINIMUM_GUARANTEE END
,AUTHORIZED_SECS	= CASE WHEN TOTAL_READY_SECS = 3600.00 AND AUTHORIZED_SECS   = 3600.00 THEN 0.00 ELSE MINIMUM_GUARANTEE END

UPDATE WSOL_TB_IMPORTS_GA_INVOICING_4 SET
 MINIMUM_GUARANTEE	= CASE WHEN TOTAL_READY_SECS = AUTHORIZED_SECS AND OUTBOUND_CALLS = 0 THEN 0.00 ELSE MINIMUM_GUARANTEE END
,AUTHORIZED_SECS	= CASE WHEN TOTAL_READY_SECS = AUTHORIZED_SECS AND OUTBOUND_CALLS = 0 THEN 0.00 ELSE MINIMUM_GUARANTEE END

--===============================================
SET DATEFIRST 1  -- = Monday  
--===============================================
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME
,@DTM_MAX  DATETIME

SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN([DATETIME]) FROM WSOL_TB_IMPORTS_GA_INVOICING_4))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_GA_INVOICING_4))
SET @DTM_MAX = DATEADD(hh, 0,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_GA_INVOICING_4))

--SELECT * FROM WSOL_TB_IMPORTS_GA_INVOICING
--=============================================
--UPDATE PERMANENT INVOICE TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_GA_INVOICING SET
 FF_RECORD_ID						= W4.FF_RECORD_ID
,FF_DATE							= W4.FF_DATE
--,FF_AGENT_ID						= W4.FF_AGENT_ID
--,FF_AGENT_NAME					= W4.AGENT_NAME

,SEQNO_ADDED_TIME					= W4.SEQNO_ADDED_TIME
,SEQNO								= W4.SEQNO
,FTP_FILE_NAME						= W4.FTP_FILE_NAME

,RESOURCE_NAME						= W4.RESOURCE_NAME
,[DATETIME]							= W4.[DATETIME]
,HOUR_INTERVAL						= W4.HOUR_INTERVAL
,EMPLOYEE_ID						= W4.EMPLOYEE_ID
--,STD_TENANT_START_DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY

,LOGGED_IN_SECS						= W4.LOGGED_IN_SECS
,READY_SECS							= W4.READY_SECS
,READY_FOR_OUTBOUND_SECS			= W4.READY_FOR_OUTBOUND_SECS
,AWAY_SECS							= W4.AWAY_SECS
,AWAY_BREAK_SECS					= W4.AWAY_BREAK_SECS
,AWAY_COMFORT_BREAK_SECS			= W4.AWAY_COMFORT_BREAK_SECS
,BUSY_OUTBOUND_SECS					= W4.BUSY_OUTBOUND_SECS
,BUSY_INTERNAL_SECS					= W4.BUSY_INTERNAL_SECS
,CALL_TRANSFERRED_SECS				= W4.CALL_TRANSFERRED_SECS
,WRAP_UP_AUTO_SECS					= W4.WRAP_UP_AUTO_SECS
,WRAP_UP_MANUAL_SECS				= W4.WRAP_UP_MANUAL_SECS
,LOGGED_OUT_SECS					= W4.LOGGED_OUT_SECS
,EXTENDED_AWAY_SECS					= W4.EXTENDED_AWAY_SECS
,EXTENDED_AWAY_PAPERWORK_SECS		= W4.EXTENDED_AWAY_PAPERWORK_SECS
,EXTENDED_AWAY_LUNCH_SECS			= W4.EXTENDED_AWAY_LUNCH_SECS
,EXTENDED_AWAY_TRAINING_SECS		= W4.EXTENDED_AWAY_TRAINING_SECS
,EXTENDED_AWAY_MEETING_SECS			= W4.EXTENDED_AWAY_MEETING_SECS
,EXTENDED_AWAY_TEAM_MEETING_SECS	= W4.EXTENDED_AWAY_TEAM_MEETING_SECS
,TOTAL_READY_SECS					= W4.TOTAL_READY_SECS
,TOTAL_BUSY_SECS					= W4.TOTAL_BUSY_SECS
,TOTAL_AWAY_SECS					= W4.TOTAL_AWAY_SECS
,TOTAL_WRAP_SECS					= W4.TOTAL_WRAP_SECS
,TOTAL_EXTENDED_AWAY_SECS			= W4.TOTAL_EXTENDED_AWAY_SECS
,OUTBOUND_CALLS						= W4.OUTBOUND_CALLS
,CALLS_TRANSFERRED					= W4.CALLS_TRANSFERRED

,CPROD								= W4.CPROD
,MINIMUM_GUARANTEE					= W4.MINIMUM_GUARANTEE
,AUTHORIZED_SECS					= W4.AUTHORIZED_SECS

,[EMAIL]							= W4.EMAIL
--,ID_EXT							= W4.ID_EXT
,SCHEDULER_ACL_NAME					= W4.SCHEDULER_ACL_NAME
,CAL_DATE							= W4.CAL_DATE
,TENANT_KEY							= W4.TENANT_KEY
,AIR_DAY_TYPE						= W4.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W4.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES				= W4.MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE					= W4.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W4.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W4.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W4.INCLUDE_IN_CAS
,READY_FOR_XML						= W4.READY_FOR_XML
,SHOW_ID_EXTS						= W4.SHOW_ID_EXTS
--,INVOICE_ID						= W4.INVOICE_ID

--,WS_ROW_CREATED_TIME				= NULL
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_GA_INVOICING_4  W4
INNER JOIN      WSOL_TB_IMPORTS_GA_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY = W4.STD_TENANT_START_DATE_TIME_KEY
												   AND G.ID_EXT                         = W4.ID_EXT
									               AND G.FF_AGENT_ID					= W4.FF_AGENT_ID
									               AND G.FF_AGENT_NAME					= W4.FF_AGENT_NAME
									               AND G.INVOICE_ID						= W4.INVOICE_ID

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
  AND G.ID_EXT							= W4.ID_EXT
  AND G.FF_AGENT_ID						= W4.FF_AGENT_ID
  AND G.FF_AGENT_NAME					= W4.FF_AGENT_NAME
  AND G.INVOICE_ID						= W4.INVOICE_ID

--=============================================
--INSERT INTO PERMANENT IMPORT TABLE:
--=============================================
INSERT INTO WSOL_TB_IMPORTS_GA_INVOICING
(FF_RECORD_ID
,FF_DATE
,FF_AGENT_ID
,FF_AGENT_NAME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_DATE_TIME_KEY
,LOGGED_IN_SECS
,READY_SECS
,READY_FOR_OUTBOUND_SECS
,AWAY_SECS
,AWAY_BREAK_SECS
,AWAY_COMFORT_BREAK_SECS
,BUSY_OUTBOUND_SECS
,BUSY_INTERNAL_SECS
,CALL_TRANSFERRED_SECS
,WRAP_UP_AUTO_SECS
,WRAP_UP_MANUAL_SECS
,LOGGED_OUT_SECS
,EXTENDED_AWAY_SECS
,EXTENDED_AWAY_PAPERWORK_SECS
,EXTENDED_AWAY_LUNCH_SECS
,EXTENDED_AWAY_TRAINING_SECS
,EXTENDED_AWAY_MEETING_SECS
,EXTENDED_AWAY_TEAM_MEETING_SECS
,TOTAL_READY_SECS
,TOTAL_BUSY_SECS
,TOTAL_AWAY_SECS
,TOTAL_WRAP_SECS
,TOTAL_EXTENDED_AWAY_SECS
,OUTBOUND_CALLS
,CALLS_TRANSFERRED
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_SECS
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W4.FF_RECORD_ID
,W4.FF_DATE
,W4.FF_AGENT_ID
,W4.FF_AGENT_NAME

,W4.SEQNO_ADDED_TIME
,W4.SEQNO
,W4.FTP_FILE_NAME

,W4.RESOURCE_NAME
,W4.[DATETIME]
,W4.HOUR_INTERVAL
,W4.EMPLOYEE_ID
,W4.STD_TENANT_START_DATE_TIME_KEY

,W4.LOGGED_IN_SECS
,W4.READY_SECS
,W4.READY_FOR_OUTBOUND_SECS
,W4.AWAY_SECS
,W4.AWAY_BREAK_SECS
,W4.AWAY_COMFORT_BREAK_SECS
,W4.BUSY_OUTBOUND_SECS
,W4.BUSY_INTERNAL_SECS
,W4.CALL_TRANSFERRED_SECS
,W4.WRAP_UP_AUTO_SECS
,W4.WRAP_UP_MANUAL_SECS
,W4.LOGGED_OUT_SECS
,W4.EXTENDED_AWAY_SECS
,W4.EXTENDED_AWAY_PAPERWORK_SECS
,W4.EXTENDED_AWAY_LUNCH_SECS
,W4.EXTENDED_AWAY_TRAINING_SECS
,W4.EXTENDED_AWAY_MEETING_SECS
,W4.EXTENDED_AWAY_TEAM_MEETING_SECS
,W4.TOTAL_READY_SECS
,W4.TOTAL_BUSY_SECS
,W4.TOTAL_AWAY_SECS
,W4.TOTAL_WRAP_SECS
,W4.TOTAL_EXTENDED_AWAY_SECS
,W4.OUTBOUND_CALLS
,W4.CALLS_TRANSFERRED

,W4.CPROD
,W4.MINIMUM_GUARANTEE
,W4.AUTHORIZED_SECS

,W4.EMAIL
,W4.ID_EXT
,W4.SCHEDULER_ACL_NAME
,W4.CAL_DATE
,W4.TENANT_KEY
,W4.AIR_DAY_TYPE
,W4.AIR_ACW_FONT_COLOR
,W4.MIN_GUARANTEE_MINUTES
,W4.MIN_GUARANTEE_TYPE
,W4.AUTHORIZED_TO_INVOICE_TYPE
,W4.HAS_HOLIDAYS
,W4.INCLUDE_IN_CAS
,W4.READY_FOR_XML
,W4.SHOW_ID_EXTS
,W4.INVOICE_ID
,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_GA_INVOICING_4  W4

LEFT JOIN       WSOL_TB_IMPORTS_GA_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY = W4.STD_TENANT_START_DATE_TIME_KEY
												   AND G.ID_EXT                         = W4.ID_EXT
									               AND G.FF_AGENT_ID					= W4.FF_AGENT_ID
												   AND G.FF_AGENT_NAME					= W4.FF_AGENT_NAME
												   AND G.INVOICE_ID						= W4.INVOICE_ID

WHERE (G.FF_AGENT_ID					IS NULL AND ISNULL(W4.FF_AGENT_ID					,'') <> '' )
--  AND (G.ID_EXT							IS NULL AND ISNULL(W4.ID_EXT						,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W4.STD_TENANT_START_DATE_TIME_KEY, 0) <>  0 )
  AND (G.FF_AGENT_NAME					IS NULL AND ISNULL(W4.FF_AGENT_NAME					,'') <> '' )
--  AND (G.INVOICE_ID						IS NULL AND ISNULL(W4.INVOICE_ID					,'') <> '' )			


--===============================================================
SET DATEFIRST 1  -- = Monday
--===============================================================

IF OBJECT_ID('TEMPDB..#DT_EASY_WEEKS') IS NOT NULL BEGIN
   DROP TABLE #DT_EASY_WEEKS
END
CREATE TABLE #DT_EASY_WEEKS
(CAL_DATE_STRING      VARCHAR(10)
,CAL_WEEK_START_DATE  DATETIME
,CAL_WEEK_END_DATE    DATETIME
,PAY_CYCLE_CLOSURE_DATE DATETIME
)
INSERT INTO #DT_EASY_WEEKS
SELECT
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
FROM DATE_TIME DT
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
GROUP BY 
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
--===========================
UPDATE #DT_EASY_WEEKS SET CAL_WEEK_END_DATE = DATEADD(DD,6,CAL_WEEK_START_DATE)

UPDATE #DT_EASY_WEEKS SET
 PAY_CYCLE_CLOSURE_DATE = CASE WHEN DATEPART(DD,@DTM_MAX) >= 1 AND DATEPART(DD,@DTM_MAX) < 16 THEN
									CAST(CONVERT(VARCHAR(10), CONVERT(VARCHAR(2),MONTH(@DTM_MAX)) + CONVERT(VARCHAR(4),'/15/') + CONVERT(VARCHAR(4),YEAR(@DTM_MAX)),101) AS DATETIME)
							   WHEN DATEPART(DD,@DTM_MAX) > 15 THEN 
									DATEADD(D,-1,DATEADD(M,DATEDIFF(M,0,@DTM_MAX)+1,0))
							   END 
							   
 --SELECT * FROM #DT_EASY_WEEKS ORDER BY CAL_DATE_STRING

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_GA_UV_ANT_AIA') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_GA_UV_ANT_AIA
END
CREATE TABLE #WSOL_TB_IMPORTS_GA_UV_ANT_AIA
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](50) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #WSOL_TB_IMPORTS_GA_UV_ANT_AIA
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.FF_AGENT_ID  --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING				--[DATE]             
,DT.LABEL_HH24 + ':00'			--HOD_INTERVAL

,AIA.LOGGED_IN_SECS				--AU_DK_LOGGED_IN_DURATION
,AIA.TOTAL_READY_SECS			--AU_DK_AVAILABLE_DURATION	-- READY_SECS + READY_FOR_OUTBOUND_SECS

,AIA.BUSY_OUTBOUND_SECS			--AU_DK_TALK_DURATION
,0								--AU_DK_IB_TALK_DURATION
,0								--AU_DK_OB_TALK_DURATION

,AIA.TOTAL_WRAP_SECS			--AU_DK_CONVENTIONAL_ACW	-- WRAP_UP_AUTO_SECS + WRAP_UP_MANUAL_SECS
,AIA.TOTAL_AWAY_SECS	        --AU_DK_NR_DURATION			-- AWAY_SECS + AWAY_BREAK_SECS + AWAY_COMFORT_BREAK_SECS
,0								--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0								--AU_DK_ADJUSTED_NR_DURATION
,AIA.CPROD						--AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.CPROD						--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS  

,0								--AU_DK_XFER_COUNT
,0								--AU_DK_HOLD_COUNT
,0								--AU_DK_CONFERENCE_COUNT
,0								--AU_DK_CONSULT_COUNT
,0								--AU_DK_PUP_COUNT

,0					            --AU_DK_OFFERED_COUNT
,0					            --AU_DK_HANDLED_COUNT
,0								--AU_DK_IB_HANDLE_COUNT
,0					            --AU_DK_OB_HANDLE_COUNT
													
,0								--AU_DK_RONA_COUNT
,0								--AU_DK_AWR_COUNT

,AIA.MINIMUM_GUARANTEE			--MINIMUM_GUARANTEE
,AIA.AUTHORIZED_SECS			--AUTHORIZED_TO_INVOICE

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_MINUTES
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID  --CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID 
,AIA.RESOURCE_NAME
,NULL							--AIA.AIRITKDUR
,NULL							--AIA.AIRIACDUR
,dbo.getdate()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL       --	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
--SELECT TOP 1000 *
FROM            WSOL_TB_IMPORTS_GA_INVOICING_4            AIA 
INNER JOIN      WSOL_TB_IMPORTS_GA_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      WSOL_TB_IMPORTS_GA_SD_INVOICE_GROUPS      CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME                                DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS                           DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')
  AND (ISNULL(AIA.RESOURCE_NAME,'') <> '')
  AND AIA.AUTHORIZED_SECS <> 0.00							--<<<<<---- FILTER OUT RECORDS WHERE AUTHORIZED TIME = 0.00

--==========================================================================
--UPDATE WSOL_TB_...UV_ANT_AIA TABLE:
--==========================================================================
UPDATE WSOL_TB_IMPORTS_GA_UV_ANT_AIA SET
 [PLATFORM]                   = W1.[PLATFORM]
,[STATUS]                     = W1.[STATUS]
--,INVOICE_MAP_KEY              = W1.INVOICE_MAP_KEY
,FIELD_NAME                   = W1.FIELD_NAME
,SCHEDULER_PROJECT_ID         = W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME           = W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION             = W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID      = W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME    = W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID       = W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME     = W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID        = W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID = W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID       = W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY        = W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID            = W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID           = W1.HOLIDAY_INVOICE_ID
,HOLIDAY                      = W1.HOLIDAY
,FILE_FORMAT_OF_PUSH          = W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID = W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL                      = W1.NEW_ACL
,CURRENT_CATS                 = W1.CURRENT_CATS
,CATS_ID                      = W1.CATS_ID
,PATS_ID                      = W1.PATS_ID
,SMART_ELIGIBLE               = W1.SMART_ELIGIBLE
,SMART_TIER_1                 = W1.SMART_TIER_1
,SMART_TIER_2                 = W1.SMART_TIER_2
,SMART_TIER_3                 = W1.SMART_TIER_3
,INTERVAL                     = W1.INTERVAL
,[DATE]                       = W1.[DATE]
,HOD_INTERVAL                 = W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION     = W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION     = W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION          = W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION       = W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION       = W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW       = W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION            = W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT             = W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT             = W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT       = W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT          = W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT              = W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT          = W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT          = W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT        = W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT        = W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT             = W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT              = W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE            = W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE        = W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE             = W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE       = W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
,FTP_FILE_NAME = W1.FTP_FILE_NAME
,EMAIL         = W1.EMAIL

--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE                     = W1.CAL_DATE
,TENANT_KEY                   = W1.TENANT_KEY
,AIR_DAY_TYPE                 = W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR           = W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE		      = W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE           = W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE   = W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS                 = W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS               = W1.INCLUDE_IN_CAS
,READY_FOR_XML                = W1.READY_FOR_XML
,SHOW_ID_EXTS                 = W1.SHOW_ID_EXTS
,INVOICE_ID                   = W1.INVOICE_ID
,RESOURCE_NAME                = W1.RESOURCE_NAME

,AIRITKDUR                    = W1.AIRITKDUR
,AIRIACDUR                    = W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME          = @WS_ROW_CREATED_TIME

FROM            #WSOL_TB_IMPORTS_GA_UV_ANT_AIA   W1

INNER JOIN      WSOL_TB_IMPORTS_GA_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
												    AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
												    AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )


--=====================================================
--INSERT TMP TABLE FIELDS INTO WSOL_TB_... TABLE:
--=====================================================
INSERT INTO [WSOL_TB_IMPORTS_GA_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #WSOL_TB_IMPORTS_GA_UV_ANT_AIA   AIA
LEFT JOIN       WSOL_TB_IMPORTS_GA_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
												    AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
												    AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )


--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_GAR_AGENT_INVOICING]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_GAR_AGENT_INVOICING]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300) --Hid. Def=' '
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'  MANual,SUBscription
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='INV'
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='INV'  
AS
SET NOCOUNT ON    

--  EXECUTE [dbo].[uspIMPORTS_GAR_AGENT_INVOICING] '05/23/2014','06/05/2014','0','0','0','0','HR','Y','SS','NM','Y','4','MAN','INV','INV'

--@TIME_INTERVAL:  Can only show invoicing report at hour level or higher !!!

--Durations in FTP FILE are in seconds. This report can pull by secs, mins, and hrs now.

--  SELECT * FROM WSOL_TB_IMPORTS_GAR_SD_INVOICE_GROUPS
--  SELECT * FROM WSOL_TB_IMPORTS_GAR_UV_ANT_AIA
    
--TMP:  FOR RUNNING SQL JOBS FOR PREVIOUS DAYS:  
--SET @DATE_BEG = '05/23/2014'
--SET @DATE_END = '06/05/2014'

--==================================--SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) 
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) -- + 1
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
END
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

DECLARE
 @MTD_BEG AS DATETIME
,@MTD_END AS DATETIME  --,@YTD_BEG AS DATETIME--,@YTD_END AS DATETIME
SET @MTD_BEG = CAST(CAST(DATEPART(mm,@DTM_BEG) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)
SET @MTD_END = @DTM_END  --SET @YTD_BEG = CAST('01/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)  --THINK _BEG MAKES MORE SENSE THAN _END.--SET @YTD_END = @DTM_END
--==================================
	--                                                         MD=Month with daily totals.   MR=Month, NO Daily totals.
	--                                                         DR=Date Range, NO daily totals.  
	--                                                           The 'M' in MD,MR needed, to know that month is wanted, so @MTD_BEG and @MTD_END can be set correctly...
	--     @DLY_ AND @MTD_ ARE USED TO DETERMINE WHAT DAYS TO SHOW IN THE DIFFERENT ROWS OF DATA.

--@EXECUTIONER FROM SUBSCRIPTION WILL PASS IN 'MR' OR 'MD'.  OTHERWISE WILL BE 'DY' OR 'DR' WHEN MANUAL.

IF @TIME_INTERVAL IN ('MR','MD') BEGIN  --MONTH DETERMINED BY @DTM_BEG.
	SET @DTM_BEG = @MTD_BEG
	SET @DTM_END = @MTD_END
END

--========================================================
--SET ID EXTENSIONS
--========================================================
SET @ID_EXT = ',' + LTRIM(RTRIM(@ID_EXT))          + ','


--==================================
--SET AMOUNT TO DIVIDE BY:
--==================================
DECLARE @DS DECIMAL(10,2)  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.00		--DIVIDE SECONDS BY 1 TO GET SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
    SET @DS = 60.00		--DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
    SET @DS = 3600.00	--DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_GAR_AGENT_INVOICING') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_GAR_AGENT_INVOICING
END
CREATE TABLE #IMPORTS_GAR_AGENT_INVOICING
(TENANT_NAME            VARCHAR(50)
,ID_EXT                 VARCHAR(3)
,SCHEDULER_ACL_NAME     VARCHAR(100)  
,EMPLOYEE_ID            VARCHAR(50)   
,STD_TENANT_START_DATE_TIME_KEY INT
,RESOURCE_NAME          VARCHAR(100)
,CATS_ID				VARCHAR(50)

,AIR_DAY_TYPE           varchar(1)
,AIR_ACW_FONT_COLOR     varchar(50)
,MIN_GUARANTEE_RATE     decimal(6,3)
,MIN_GUARANTEE_TYPE     varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE varchar(50)
,HAS_HOLIDAYS           varchar(1)
,INCLUDE_IN_CAS         varchar(1)
,READY_FOR_XML          varchar(1)
,SHOW_ID_EXTS           varchar(1)
,
[LOGIN_TIME] [decimal](10, 2) NULL,
[AVAILABLE_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_SYSTEM_PENDING_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_HELD_PARTY_ABANDONED_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_DEDICATED_RESOURCE_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_TIME_MINUS_ACW] [decimal](10, 2) NULL,
[TALK_TIME] [decimal](10, 2) NULL,
[HOLD_TIME] [decimal](10, 2) NULL,
[ACW_TIME] [decimal](10, 2) NULL,
[TRUE_OUTBOUND_TALK_TIME] [decimal](10, 2) NULL,
[TOTAL_TALK] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MING] [decimal](10, 2) NULL,
[AUT2] [decimal](10, 2) NULL,
)

INSERT INTO #IMPORTS_GAR_AGENT_INVOICING
SELECT
 'GAR'  --T.TENANT_NAME
,UAA.ID_EXT
,UAA.SCHEDULER_ACL_NAME
,UAA.EMPLOYEE_ID 
,UAA.STD_TENANT_START_DATE_TIME_KEY
,UAA.RESOURCE_NAME
,UAA.CATS_ID

,(ISNULL(UAA.AIR_DAY_TYPE,''))					--AS AIR_DAY_TYPE
,(ISNULL(UAA.AIR_ACW_FONT_COLOR,''))			--AS AIR_ACW_FONT_COLOR
,(ISNULL(UAA.MIN_GUARANTEE_RATE,0.000))			--AS MIN_GUARANTEE_RATE
,(ISNULL(UAA.MIN_GUARANTEE_TYPE,''))			--AS MIN_GUARANTEE_TYPE
,(ISNULL(UAA.AUTHORIZED_TO_INVOICE_TYPE,''))	--AS AUTHORIZED_TO_INVOICE_TYPE
,(ISNULL(UAA.HAS_HOLIDAYS,''))					--AS HAS_HOLIDAYS
,(ISNULL(UAA.INCLUDE_IN_CAS,''))				--AS INCLUDE_IN_CAS
,(ISNULL(UAA.READY_FOR_XML,''))					--AS READY_FOR_XML
,(ISNULL(UAA.SHOW_ID_EXTS,''))					--AS SHOW_ID_EXTS

,(ISNULL(UAA.LOGIN_TIME,0))
,(ISNULL(UAA.AVAILABLE_TIME,0))
,(ISNULL(UAA.UNAVAILABLE_SYSTEM_PENDING_TIME,0))
,(ISNULL(UAA.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME,0))
,(ISNULL(UAA.UNAVAILABLE_DEDICATED_RESOURCE_TIME,0))
,(ISNULL(UAA.UNAVAILABLE_TIME_MINUS_ACW,0))
,(ISNULL(UAA.TALK_TIME,0))
,(ISNULL(UAA.HOLD_TIME,0))
,(ISNULL(UAA.ACW_TIME,0))
,(ISNULL(UAA.TRUE_OUTBOUND_TALK_TIME,0))
,(ISNULL(UAA.TOTAL_TALK,0))
,(ISNULL(UAA.CPROD,0))
,(ISNULL(UAA.MING,0))
,(ISNULL(UAA.AUT2,0))

FROM
(	SELECT	
	-- UA.TENANT_KEY
	 UA.ID_EXT							AS ID_EXT
	,UA.INVOICE_ID					    AS SCHEDULER_ACL_NAME
	,UA.FF_AGENT_NAME		            AS EMPLOYEE_ID 
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,MAX(UA.RESOURCE_NAME)              AS RESOURCE_NAME
	,ISNULL(CI.AGENT_ID,'')				AS CATS_ID
	,MAX(UA.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,'BLACK'                            AS AIR_ACW_FONT_COLOR
	,0									AS MIN_GUARANTEE_RATE
	,''									AS MIN_GUARANTEE_TYPE
	,''									AS AUTHORIZED_TO_INVOICE_TYPE
	,'Y'								AS HAS_HOLIDAYS
	,''									AS INCLUDE_IN_CAS
	,''									AS READY_FOR_XML
	,''									AS SHOW_ID_EXTS

	,SUM(ISNULL(UA.LOGIN_TIME							,0)) AS LOGIN_TIME
	,SUM(ISNULL(UA.AVAILABLE_TIME						,0)) AS AVAILABLE_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_SYSTEM_PENDING_TIME		,0)) AS UNAVAILABLE_SYSTEM_PENDING_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME,0)) AS UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_DEDICATED_RESOURCE_TIME	,0)) AS UNAVAILABLE_DEDICATED_RESOURCE_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_TIME_MINUS_ACW			,0)) AS UNAVAILABLE_TIME_MINUS_ACW
	,SUM(ISNULL(UA.TALK_TIME							,0)) AS TALK_TIME
	,SUM(ISNULL(UA.HOLD_TIME							,0)) AS HOLD_TIME
	,SUM(ISNULL(UA.ACW_TIME								,0)) AS ACW_TIME
	,SUM(ISNULL(UA.TRUE_OUTBOUND_TALK_TIME				,0)) AS TRUE_OUTBOUND_TALK_TIME
	,SUM(ISNULL(UA.TOTAL_TALK							,0)) AS TOTAL_TALK
	,SUM(ISNULL(UA.CPROD								,0)) AS CPROD
	,0														 AS MING						-- SUM(ISNULL(UA.MING,0))					AS MING
	,0														 AS AUT2						-- SUM(ISNULL(UA.AUT2,0))					AS AUT2
	
	--  SELECT *
	FROM            WSOL_TB_IMPORTS_GAR_INVOICING   UA
	INNER JOIN      DATE_TIME                       DT	ON DT.DATE_TIME_KEY		= UA.STD_TENANT_START_DATE_TIME_KEY
	LEFT JOIN		WSOL_VW_CATS_IDS				CI	ON CI.SCHEDULER_ACL		= UA.SCHEDULER_ACL_NAME
													   AND CI.FIELD_MAP_ID		= UA.FF_AGENT_NAME 


	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
	  AND ( @ID_EXT     IN (',0,',',,') OR CHARINDEX(',' + RTRIM(UA.ID_EXT) + ',',@ID_EXT) > 0 )
		
	GROUP BY
	 UA.ID_EXT 
	,UA.INVOICE_ID
	,UA.FF_AGENT_NAME
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,CI.AGENT_ID
) UAA

--===============================================
-- UPDATE MINIMUM GUARANTEE
--===============================================

UPDATE #IMPORTS_GAR_AGENT_INVOICING SET
 MING = CASE WHEN ISNULL(ID_EXT,'') <> '' THEN 
				(40.00 / 60.00) * CPROD			 
			 ELSE 0.00 END

--===============================================
-- UPDATE AUTHORIZED TO INVOICE
--===============================================
UPDATE #IMPORTS_GAR_AGENT_INVOICING SET
 AUT2 = CASE WHEN ISNULL(ID_EXT,'') <> '' THEN 
				 CASE WHEN MING > (TOTAL_TALK) THEN MING 
					  ELSE        (TOTAL_TALK) END      --TOTAL_TALK = INBOUND_TIME + INBOUND_HOLD_TIME + OUTBOUND_TIME
			 ELSE 0.00 END

--==============================================================
--==============================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_GAR_AGENT_INVOICING_RTN') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_GAR_AGENT_INVOICING_RTN
END
CREATE TABLE #IMPORTS_GAR_AGENT_INVOICING_RTN
(GRPNO                 INT
,TENANT_NAME           VARCHAR(50)
,ID_EXT                VARCHAR(3)
,SCHEDULER_ACL_NAME    VARCHAR(100)
,EMPLOYEE_ID           VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,CATS_ID			   VARCHAR(50)
,CAL_YEAR_MONTH_NUM    VARCHAR(10)
,DATE_INTERVAL         VARCHAR(50)
,TIME_INTERVAL         VARCHAR(10)

,AIR_DAY_TYPE          varchar(1)
,AIR_ACW_FONT_COLOR    varchar(50)
,MIN_GUARANTEE_RATE    decimal(6,3)
,MIN_GUARANTEE_TYPE    varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE varchar(50)
,HAS_HOLIDAYS          varchar(1)
,INCLUDE_IN_CAS        varchar(1)
,READY_FOR_XML         varchar(1)
,SHOW_ID_EXTS          varchar(1)

,AIR_HOLIDAY_IN        VARCHAR(1)
,ALL_AUTHORIZED_TIME   DECIMAL(10,2)

,
[LOGIN_TIME] [decimal](10, 2) NULL,
[AVAILABLE_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_SYSTEM_PENDING_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_HELD_PARTY_ABANDONED_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_DEDICATED_RESOURCE_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_TIME_MINUS_ACW] [decimal](10, 2) NULL,
[TALK_TIME] [decimal](10, 2) NULL,
[HOLD_TIME] [decimal](10, 2) NULL,
[ACW_TIME] [decimal](10, 2) NULL,
[TRUE_OUTBOUND_TALK_TIME] [decimal](10, 2) NULL,
[TOTAL_TALK] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MING] [decimal](10, 2) NULL,
[AUT2] [decimal](10, 2) NULL,
)
--==================================


--==================================
INSERT INTO #IMPORTS_GAR_AGENT_INVOICING_RTN
SELECT
 20								--AS GRPNO  
,ISNULL(GG.TENANT_NAME       ,'') AS TENANT_NAME
,ISNULL(GG.ID_EXT            ,'') AS ID_EXT
,ISNULL(GG.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
,ISNULL(GG.EMPLOYEE_ID       ,'') AS EMPLOYEE_ID
,ISNULL(GG.RESOURCE_NAME     ,'') AS RESOURCE_NAME
,ISNULL(GG.CATS_ID			 ,'') AS CATS_ID
,ISNULL(GG.CAL_YEAR_MONTH_NUM,'') AS CAL_YEAR_MONTH_NUM
,ISNULL(GG.DI                ,'') AS DI
,ISNULL(GG.TI                ,'') AS TI

,(GG.AIR_DAY_TYPE)                AS AIR_DAY_TYPE
,(GG.AIR_ACW_FONT_COLOR)          AS AIR_ACW_FONT_COLOR
,(GG.MIN_GUARANTEE_RATE)          AS MIN_GUARANTEE_RATE
,(GG.MIN_GUARANTEE_TYPE)          AS MIN_GUARANTEE_TYPE
,(GG.AUTHORIZED_TO_INVOICE_TYPE)  AS AUTHORIZED_TO_INVOICE_TYPE
,(GG.HAS_HOLIDAYS)                AS HAS_HOLIDAYS
,(GG.INCLUDE_IN_CAS)              AS INCLUDE_IN_CAS
,(GG.READY_FOR_XML)               AS READY_FOR_XML
,(GG.SHOW_ID_EXTS)                AS SHOW_ID_EXTS

,'' --AS AIR_HOLIDAY_IN
,0  --AS ALL_AUTHORIZED_TIME

,CAST((ISNULL(GG.LOGIN_TIME								,0)) / @DS AS DECIMAL(10,2))	AS LOGIN_TIME
,CAST((ISNULL(GG.AVAILABLE_TIME							,0)) / @DS AS DECIMAL(10,2))	AS AVAILABLE_TIME
,CAST((ISNULL(GG.UNAVAILABLE_SYSTEM_PENDING_TIME		,0)) / @DS AS DECIMAL(10,2))	AS UNAVAILABLE_SYSTEM_PENDING_TIME
,CAST((ISNULL(GG.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME	,0)) / @DS AS DECIMAL(10,2))	AS UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,CAST((ISNULL(GG.UNAVAILABLE_DEDICATED_RESOURCE_TIME	,0)) / @DS AS DECIMAL(10,2))	AS UNAVAILABLE_DEDICATED_RESOURCE_TIME
,CAST((ISNULL(GG.UNAVAILABLE_TIME_MINUS_ACW				,0)) / @DS AS DECIMAL(10,2))	AS UNAVAILABLE_TIME_MINUS_ACW
,CAST((ISNULL(GG.TALK_TIME								,0)) / @DS AS DECIMAL(10,2))	AS TALK_TIME
,CAST((ISNULL(GG.HOLD_TIME								,0)) / @DS AS DECIMAL(10,2))	AS HOLD_TIME
,CAST((ISNULL(GG.ACW_TIME								,0)) / @DS AS DECIMAL(10,2))	AS ACW_TIME
,CAST((ISNULL(GG.TRUE_OUTBOUND_TALK_TIME				,0)) / @DS AS DECIMAL(10,2))	AS TRUE_OUTBOUND_TALK_TIME
,CAST((ISNULL(GG.TOTAL_TALK								,0)) / @DS AS DECIMAL(10,2))	AS TOTAL_TALK
,CAST((ISNULL(GG.CPROD									,0)) / @DS AS DECIMAL(10,2))	AS CPROD
,CAST((ISNULL(GG.MING									,0)) / @DS AS DECIMAL(10,2))	AS MING
,CAST((ISNULL(GG.AUT2									,0)) / @DS AS DECIMAL(10,2))	AS AUT2

FROM  -- GG STARTS HERE:
(	SELECT
	 ISNULL(SW.TENANT_NAME,'')        AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  AS EMPLOYEE_ID
	,MAX(RESOURCE_NAME)               AS RESOURCE_NAME
	,ISNULL(SW.CATS_ID,'')			  AS CATS_ID

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) AS TI

	,MAX(SW.AIR_DAY_TYPE)										AS AIR_DAY_TYPE
	,MAX(SW.AIR_ACW_FONT_COLOR)									AS AIR_ACW_FONT_COLOR
	,MAX(SW.MIN_GUARANTEE_RATE)									AS MIN_GUARANTEE_RATE
	,MAX(SW.MIN_GUARANTEE_TYPE)									AS MIN_GUARANTEE_TYPE
	,MAX(SW.AUTHORIZED_TO_INVOICE_TYPE)							AS AUTHORIZED_TO_INVOICE_TYPE
	,MAX(SW.HAS_HOLIDAYS)										AS HAS_HOLIDAYS
	,MAX(SW.INCLUDE_IN_CAS)										AS INCLUDE_IN_CAS
	,MAX(SW.READY_FOR_XML)										AS READY_FOR_XML
	,MAX(SW.SHOW_ID_EXTS)										AS SHOW_ID_EXTS
	,SUM(ISNULL(SW.LOGIN_TIME							,0))	AS LOGIN_TIME
	,SUM(ISNULL(SW.AVAILABLE_TIME						,0))	AS AVAILABLE_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_SYSTEM_PENDING_TIME		,0))	AS UNAVAILABLE_SYSTEM_PENDING_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME,0))	AS UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_DEDICATED_RESOURCE_TIME	,0))	AS UNAVAILABLE_DEDICATED_RESOURCE_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_TIME_MINUS_ACW			,0))	AS UNAVAILABLE_TIME_MINUS_ACW
	,SUM(ISNULL(SW.TALK_TIME							,0))	AS TALK_TIME
	,SUM(ISNULL(SW.HOLD_TIME							,0))	AS HOLD_TIME
	,SUM(ISNULL(SW.ACW_TIME								,0))	AS ACW_TIME
	,SUM(ISNULL(SW.TRUE_OUTBOUND_TALK_TIME				,0))	AS TRUE_OUTBOUND_TALK_TIME
	,SUM(ISNULL(SW.TOTAL_TALK							,0))	AS TOTAL_TALK
	,SUM(ISNULL(SW.CPROD								,0))	AS CPROD
	,SUM(ISNULL(SW.MING									,0))	AS MING
	,SUM(ISNULL(SW.AUT2									,0))	AS AUT2
	
	FROM            #IMPORTS_GAR_AGENT_INVOICING          SW
	INNER JOIN      DATE_TIME				              DT   ON DT.DATE_TIME_KEY              = SW.STD_TENANT_START_DATE_TIME_KEY
													 
	--WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END		  --AND (@TENANT_KEY   IN ('0','') OR SW.TENANT_KEY   = CAST(@TENANT_KEY AS INT) )

	GROUP BY 
	 ISNULL(SW.TENANT_NAME,'')        --AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             --AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') --AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  --AS EMPLOYEE_ID
	,ISNULL(SW.CATS_ID,'')			  --AS CATS_ID

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) --AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) --AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) --AS TI

	--,(ISNULL(SW.FF_FULL_NAME,''))         --AS FF_FULL_NAME
	--,(ISNULL(SW.FF_LOGIN_ID,''))          --AS FF_LOGIN_ID

) GG



--==================================
--IS A HOLIDAY DATE IN THE MIX:
--==================================
DECLARE @HOLIDAY_IN VARCHAR(1)
SET @HOLIDAY_IN = 'N'
DECLARE @I INT
SET @I = (SELECT COUNT(*) FROM #IMPORTS_GAR_AGENT_INVOICING_RTN WHERE AIR_DAY_TYPE = 'H')  --  AND INCLUDE_IN_CAS = 'Y')
IF @I > 0 BEGIN
	SET @HOLIDAY_IN = 'Y'
END
--==================================
UPDATE #IMPORTS_GAR_AGENT_INVOICING_RTN SET
 AIR_HOLIDAY_IN = @HOLIDAY_IN

--======================================================
--UPDATE TOTALS LINE ON REPORT FOR STANDARD AND HOLIDAY:
--======================================================
UPDATE #IMPORTS_GAR_AGENT_INVOICING_RTN SET
 ALL_AUTHORIZED_TIME = ISNULL(LOJ.ALL_AUTHORIZED_TIME,0.0)
FROM #IMPORTS_GAR_AGENT_INVOICING_RTN TA
LEFT OUTER JOIN
(	SELECT
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
	,SUM(AUT2) AS ALL_AUTHORIZED_TIME
	FROM #IMPORTS_GAR_AGENT_INVOICING_RTN 
	GROUP BY 
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
) LOJ ON LOJ.SCHEDULER_ACL_NAME = TA.SCHEDULER_ACL_NAME
	 AND LOJ.EMPLOYEE_ID        = TA.EMPLOYEE_ID
	 AND LOJ.AIR_DAY_TYPE       = TA.AIR_DAY_TYPE

--==================================
--RETURN DATA
--==================================
--==================================
--POPULATE TABLE READ BY SSIS TO GET END DATE OF DATA REPORT/FILE HAS BEEN RUN FOR:
--==================================
INSERT INTO YZ_TB_FILENAMES_FOR_SSIS
(
SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
SELECT
 'uspIMPORTS_GAR_AGENT_INVOICING'  --SQL_JOB_NAME
,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,111),'/','')   --FILENM   YYYYMMDD_...
,dbo.getdate()  --CST_ROW_CREATED_TIME

--=====================================
--RETURN DATASET:
--=====================================
SELECT 
 CASE WHEN @DUR_IN = 'SS' THEN '' ELSE 'F' END AS DUR_FORMAT
,CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
,V.*

FROM      #IMPORTS_GAR_AGENT_INVOICING_RTN  V

ORDER BY 
 V.GRPNO
,V.SCHEDULER_ACL_NAME
,V.EMPLOYEE_ID
,V.CAL_YEAR_MONTH_NUM
,V.DATE_INTERVAL
,V.TIME_INTERVAL  --SINCE IN MILITARY TIME!




--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_GAR_AIA_AGENT_MAPPING_MISSING_AGENTS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_GAR_AIA_AGENT_MAPPING_MISSING_AGENTS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHICH AGENT NAME VALUES EXIST IN THE ACTIVITY FILES WITHOUT A VALID ID EXTENSION.
--            WHEN NO VALID ID EXTENSION, THEN NO 'SCHEDULER' INVOICING.
--THIS USP IS DATA SOURCE FOR SRS GRID ON "ACTIVITY IMPORTS" STATUS REPORT!!!

--  EXECUTE [dbo].[uspIMPORTS_GAR_AIA_AGENT_MAPPING_MISSING_AGENTS] '08/16/2015','08/31/2015','900705','GAR_AIA_AGENT_MAPPING','','B'

--===========================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--===========================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

IF OBJECT_ID('TEMPDB..#IMPORTS_GAR_AIA_AGENT_MAPPING_MISSING_AGENTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_GAR_AIA_AGENT_MAPPING_MISSING_AGENTS
END
CREATE TABLE #IMPORTS_GAR_AIA_AGENT_MAPPING_MISSING_AGENTS
(FILEDATETIME          VARCHAR(50)
,FTP_FILE_NAME         VARCHAR(100)
,WS_ROW_CREATED_TIME   DATETIME
,INVOICE_MAP_KEY       VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,RCD_CNT               INT
)
INSERT INTO #IMPORTS_GAR_AIA_AGENT_MAPPING_MISSING_AGENTS
SELECT
 DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
,I.WS_ROW_CREATED_TIME
,I.FF_AGENT_NAME  AS INVOICE_MAP_KEY
,I.RESOURCE_NAME AS RESOURCE_NAME
,COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
FROM            WSOL_TB_IMPORTS_GAR_INVOICING               I   
INNER JOIN      DATE_TIME                                 DT   ON DT.DATE_TIME_KEY        = I.STD_TENANT_START_DATE_TIME_KEY
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (
		(ISNULL(I.ID_EXT,'') = '')
	 OR (ISNULL(I.ID_EXT,'') NOT IN ('GBS','GRS','GBA','GBR','GBB','SVR','SRA'))
	  )
GROUP BY
 DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
--,I.FTP_FILE_NAME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
,I.WS_ROW_CREATED_TIME
,I.FF_AGENT_NAME
,I.RESOURCE_NAME

--==================================
UPDATE #IMPORTS_GAR_AIA_AGENT_MAPPING_MISSING_AGENTS SET
 FILEDATETIME = REPLACE(CONVERT(VARCHAR(10),ISNULL(FILEDATETIME,'1/1/1900'),102),'/',' . ')

--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_GAR_AIA_AGENT_MAPPING_MISSING_AGENTS)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_GAR_AIA_AGENT_MAPPING_MISSING_AGENTS
	SELECT
	 ''  --DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
	,''  --I.FTP_FILE_NAME
	,dbo.getdate()  --I.WS_ROW_CREATED_TIME
	,''  --I.FF_AGENT_NAME  AS INVOICE_MAP_KEY
	,''  --I.RESOURCE_NAME
	,0   --COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
END
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RCD_CNT = 0 BEGIN  --@RCD_CNT WILL BE 0 STILL, EVEN THOUGH ONE BLANK RECORD WAS ADDED...
	SET @MSG1 = @MSG1 + 'There are No Missing AIA Agent Mappings.'
END
ELSE BEGIN
IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''
	
	IF @RCD_CNT = 0 BEGIN
		SET @MSG1 = @MSG1 + 'There are NO missing AIA agent mappings!'
	END
	ELSE BEGIN
		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
			SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		END
		SET @MSG1 = @MSG1 + 'The list below contains Agent Name values for agents that are associated with activity for the report date range, but ' + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + 'who have a missing or invalid ID extension. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

		SET @MSG1 = @MSG1 + 'Agents who are on this list will not be invoiced (for activity dates shown), unless a special request is made and received '
		SET @MSG1 = @MSG1 + 'with plenty of time before the automated invoice process begins.  The analyst will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

		SET @MSG1 = @MSG1 + 'Also, Project Management may need to add or update agent information in their system '
		SET @MSG1 = @MSG1 + 'before the Analyst can correctly update agent data. ' + CHAR(13) + CHAR(10)
	END

END
END

--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_GAR_AIA_AGENT_MAPPING_MISSING_AGENTS 

ORDER BY
 INVOICE_MAP_KEY
,FTP_FILE_NAME

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_GAR_AIA_XML]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_GAR_AIA_XML]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300)
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'-Manual - when users run report - what SRS reports are defaulted to.  MAN means use date range that user specified.  The exception is when a report is defined with PTD/YTD and MTD rows in it.
                                  --         'SUB'-Subscription - what SRS subscriptions are defaulted to.  SUB means set date range @vars based on @TIME_INTERVAL. (since date range in SRS Subscription can't be set correctly)
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='AIA'-Agent Invoice Automation - what Sergey uses for/in Scheduler...
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='XML'-AIA RPT (DETAIL) (XML FILE/EXPORT),
AS
SET NOCOUNT ON

SET @TENANT_KEY = 900705  --GAR --used below for file name !!! in ssis !!

--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)  
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 0,101) AS DATETIME)  
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) + 1
END

--IF @EXECUTIONER = 'MAN', DON'T CHANGE DATES -- THE REPORT IS BEING RAN MANUALLY, AND THE DATE RANGE WANTED BY THE USER IS BEING SET MANUALLY.

IF @EXECUTIONER = 'NEW' BEGIN -- NEW BI-MONTHLY PAYMENT CYCLE 1ST AND 16TH OF EACH MONTH
	IF @TIME_INTERVAL = 'W14' BEGIN
		IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate() - 1)) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
			END
		END		
		ELSE IF DAY(dbo.getdate()) = 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) < 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
	END
END

--=========================================================================================
--FORMAT 'MULTIPLES' "IN THAT" VALUES:  (Referring to CHARINDEX(search for this, in that))
--=========================================================================================
SET @ID_EXT          = ',' + LTRIM(RTRIM(@ID_EXT)) + ','
SET @SCHEDULER_GROUP = ',' + LTRIM(RTRIM(@SCHEDULER_GROUP)) + ','
 

--==================================
--SET AMOUNT TO DIVIDE BY:
--==================================
DECLARE @DS DECIMAL(10,2)  --INT  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.0			--DIVIDE SECONDS BY 1 TO GET SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
	SET @DS = 60.0			--DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
	SET @DS = 3600.0		--DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
IF @RPT_TYPE_GRP = 'AIA' BEGIN

	--POPULATES XML REPORT.  SRS SUBSCRIPTION EXPORTS TO XML.  SSIS RENAMES AND MOVES XML FILE TO FTP.  SERGEY PICKS UP FILE?
	--  SERGEY IS SUPPOSEDLY DIRECTLY CONNECTED WITH YZ_TB_AGENT_INVOICE_AUTOMATION TABLE IN INFOMART ALSO.
	--    SO WHY THE XML FILE NEEDS TO BE CREATED ALSO, IS WONDER?

	IF @RPT_TYPE = 'XML' BEGIN  --AIA REPORT  --EXACTLY WHAT IS IN XML FILE AND/OR AIA TABLE.
		--==================================		--CREATE TMP TABLE:
		IF OBJECT_ID('TEMPDB..#IMPORTS_GAR_AIA_XML') IS NOT NULL BEGIN
		   DROP TABLE #IMPORTS_GAR_AIA_XML
		END
		CREATE TABLE #IMPORTS_GAR_AIA_XML
		([PLATFORM]                   VARCHAR(50)
		,[STATUS]                     VARCHAR(50) 
		,INVOICE_MAP_KEY              VARCHAR(50) 
		,FIELD_NAME                   VARCHAR(50) 
		,SCHEDULER_PROJECT_ID         VARCHAR(50) 
		,SCHEDULER_ACL_NAME           VARCHAR(50) 
		,ACD_ID_EXTENSION             VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_ID      VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_NAME    VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_ID       VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_NAME     VARCHAR(50) 
		,PRIMARY_PROJECT_MANAGER_ID   VARCHAR(500) 
		,DIRECTOR_OF_PROJECT_MANAGEMENT_ID VARCHAR(500) 
		,AGENT_TECHNOLOGY_MANAGER_ID  VARCHAR(500) 
		,CONTRACTOR_SUPPORT_PATHWAY   VARCHAR(500) 
		,INVOICE_SYSTEM_ID            VARCHAR(50) 
		,HOLIDAY_INVOICE_ID           VARCHAR(50) 
		,HOLIDAY                      VARCHAR(50) 
		,FILE_FORMAT_OF_PUSH          VARCHAR(50) 
		,AGENT_PREPARATION_INVOICE_ID VARCHAR(50) 
		,NEW_ACL                      VARCHAR(50) 
		,CURRENT_CATS                 VARCHAR(50) 
		,CATS_ID                      VARCHAR(50) 
		,PATS_ID                      VARCHAR(50) 
		,SMART_ELIGIBLE               VARCHAR(50) 
		,SMART_TIER_1                 VARCHAR(50) 
		,SMART_TIER_2                 VARCHAR(50) 
		,SMART_TIER_3                 VARCHAR(50) 
		,INTERVAL                     VARCHAR(50) 
		,DATE                         VARCHAR(50) 
		,HOD_INTERVAL                 VARCHAR(50) 
		,AU_DK_LOGGED_IN_DURATION     DECIMAL(10,2)  --INT 
		,AU_DK_AVAILABLE_DURATION     DECIMAL(10,2)  --INT 
		,AU_DK_TALK_DURATION          DECIMAL(10,2)  --INT 
		,AU_DK_IB_TALK_DURATION       DECIMAL(10,2)  --INT 
		,AU_DK_OB_TALK_DURATION       DECIMAL(10,2)  --INT 
		,AU_DK_CONVENTIONAL_ACW       DECIMAL(10,2)  --INT 
		,AU_DK_NR_DURATION            DECIMAL(10,2)  --INT 
		,AU_DK_PSEUDO_PRODUCTIVE_DURATION   DECIMAL(10,2)  --INT 
		,AU_DK_ADJUSTED_NR_DURATION         DECIMAL(10,2)  --INT 
		,AU_DK_TOTAL_PRODUCTIVE_DURATION    DECIMAL(10,2)  --INT 
		,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS DECIMAL(10,2)  --INT 
		,AU_DK_XFER_COUNT             INT 
		,AU_DK_HOLD_COUNT             INT 
		,AU_DK_CONFERENCE_COUNT       INT 
		,AU_DK_CONSULT_COUNT          INT 
		,AU_DK_PUP_COUNT              INT 
		,AU_DK_OFFERED_COUNT          INT 
		,AU_DK_HANDLED_COUNT          INT 
		,AU_DK_IB_HANDLE_COUNT        INT 
		,AU_DK_OB_HANDLE_COUNT        INT 
		,AU_DK_RONA_COUNT             INT 
		,AU_DK_AWR_COUNT              INT 
		,MINIMUM_GUARANTEE            DECIMAL(10,2) 
		,AUTHORIZED_TO_INVOICE        DECIMAL(10,2) 
		,WEEK_ENDING_DATE             VARCHAR(50) 
		,PAY_CYCLE_CLOSURE_DATE       VARCHAR(50) 
		,CAL_DATE                     DATETIME
		,TENANT_KEY                   INT 
		,INVOICE_ID                   VARCHAR(50) 
		,CST_ROW_CREATED_TIME         DATETIME
		)
		--==================================		
		-- INSERT INTO TEMP TABLE
		--==================================
		INSERT INTO #IMPORTS_GAR_AIA_XML
		SELECT --AIA.*
		 MAX(AIA.[PLATFORM])
		,MAX(AIA.[STATUS])
		,AIA.INVOICE_MAP_KEY              
		,MAX(AIA.FIELD_NAME)
		,MAX(AIA.SCHEDULER_PROJECT_ID)
		,MAX(AIA.SCHEDULER_ACL_NAME)
		,AIA.ACD_ID_EXTENSION             
		,MAX(AIA.OFFICIAL_WSOL_CLIENT_ID)
		,MAX(AIA.OFFICIAL_WSOL_CLIENT_NAME)    
		,MAX(AIA.OFFICIAL_ACD_CLIENT_ID)
		,AIA.OFFICIAL_ACD_CLIENT_NAME
		,MAX(AIA.PRIMARY_PROJECT_MANAGER_ID)
		,MAX(AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID)
		,MAX(AIA.AGENT_TECHNOLOGY_MANAGER_ID)
		,MAX(AIA.CONTRACTOR_SUPPORT_PATHWAY)
		,MAX(AIA.INVOICE_SYSTEM_ID)
		,MAX(AIA.HOLIDAY_INVOICE_ID)
		,MAX(AIA.HOLIDAY)
		,MAX(AIA.FILE_FORMAT_OF_PUSH)
		,MAX(AIA.AGENT_PREPARATION_INVOICE_ID)
		,MAX(AIA.NEW_ACL)
		,MAX(AIA.CURRENT_CATS)
		,MAX(AIA.CATS_ID)
		,MAX(AIA.PATS_ID)
		,MAX(AIA.SMART_ELIGIBLE)
		,MAX(AIA.SMART_TIER_1)
		,MAX(AIA.SMART_TIER_2)
		,MAX(AIA.SMART_TIER_3)
		,MAX(AIA.INTERVAL)
		,AIA.DATE                         
		,AIA.HOD_INTERVAL                 
		,SUM(CAST( ( 1.0 * (AIA.AU_DK_LOGGED_IN_DURATION) ) / @DS AS DECIMAL(10,2))) --AS AU_DK_LOGGED_IN_DURATION
		,SUM(CAST( ( 1.0 * (AIA.AU_DK_AVAILABLE_DURATION) ) / @DS AS DECIMAL(10,2))) --AS AU_DK_AVAILABLE_DURATION
		,SUM(CAST( ( 1.0 * (AIA.AU_DK_TALK_DURATION) )      / @DS AS DECIMAL(10,2))) --AS AU_DK_TALK_DURATION
		,SUM(CAST( ( 1.0 * (AIA.AU_DK_IB_TALK_DURATION) )   / @DS AS DECIMAL(10,2))) --AS AU_DK_IB_TALK_DURATION
		,SUM(CAST( ( 1.0 * (AIA.AU_DK_OB_TALK_DURATION) )   / @DS AS DECIMAL(10,2))) --AS AU_DK_OB_TALK_DURATION
		,SUM(CAST( ( 1.0 * (AIA.AU_DK_CONVENTIONAL_ACW) )   / @DS AS DECIMAL(10,2))) --AS AU_DK_CONVENTIONAL_ACW
		,SUM(CAST( ( 1.0 * (AIA.AU_DK_NR_DURATION) )        / @DS AS DECIMAL(10,2))) --AS AU_DK_NR_DURATION
		,SUM(CAST( ( 1.0 * (AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION) )   / @DS AS DECIMAL(10,2))) --AS AU_DK_PSEUDO_PRODUCTIVE_DURATION
		,SUM(CAST( ( 1.0 * (AIA.AU_DK_ADJUSTED_NR_DURATION) )         / @DS AS DECIMAL(10,2))) --AS AU_DK_ADJUSTED_NR_DURATION
		,SUM(CAST( ( 1.0 * (AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION) )    / @DS AS DECIMAL(10,2))) --AS AU_DK_TOTAL_PRODUCTIVE_DURATION
		,SUM(CAST( ( 1.0 * (AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS) ) / @DS AS DECIMAL(10,2))) --AS AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
		,SUM((AIA.AU_DK_XFER_COUNT))         --AS AU_DK_XFER_COUNT
		,SUM((AIA.AU_DK_HOLD_COUNT))         --AS AU_DK_HOLD_COUNT
		,SUM((AIA.AU_DK_CONFERENCE_COUNT))   --AS AU_DK_CONFERENCE_COUNT
		,SUM((AIA.AU_DK_CONSULT_COUNT))      --AS AU_DK_CONSULT_COUNT
		,SUM((AIA.AU_DK_PUP_COUNT))          --AS AU_DK_PUP_COUNT
		,SUM((AIA.AU_DK_OFFERED_COUNT))      --AS AU_DK_OFFERED_COUNT
		,SUM((AIA.AU_DK_HANDLED_COUNT))      --AS AU_DK_HANDLED_COUNT
		,SUM((AIA.AU_DK_IB_HANDLE_COUNT))    --AS AU_DK_IB_HANDLE_COUNT
		,SUM((AIA.AU_DK_OB_HANDLE_COUNT))    --AS AU_DK_OB_HANDLE_COUNT
		,SUM((AIA.AU_DK_RONA_COUNT))         --AS AU_DK_RONA_COUNT
		,SUM((AIA.AU_DK_AWR_COUNT))          --AS AU_DK_AWR_COUNT
		,SUM(CAST( ( 1.0 * (AIA.MINIMUM_GUARANTEE) )     / @DS AS DECIMAL(10,2))) --AS MINIMUM_GUARANTEE
		,SUM(CAST( ( 1.0 * (AIA.AUTHORIZED_TO_INVOICE) ) / @DS AS DECIMAL(10,2))) --AS AUTHORIZED_TO_INVOICE
		,MAX(AIA.WEEK_ENDING_DATE)
		,MAX(AIA.PAY_CYCLE_CLOSURE_DATE)
		,MAX(AIA.CAL_DATE)
		,MAX(AIA.TENANT_KEY)
		,AIA.INVOICE_ID                   
		,MAX(AIA.WS_ROW_CREATED_TIME)

		--  SELECT *
		FROM            WSOL_TB_IMPORTS_GAR_UV_ANT_AIA         AIA
		INNER JOIN      DATE_TIME                            DT    ON DT.DATE_TIME_KEY      = AIA.STD_TENANT_START_DATE_TIME_KEY
		
		WHERE ( DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END )
		  AND AIA.STATUS = 'Active'
		  AND ( (ISNULL(AIA.READY_FOR_XML,'') = 'Y')  --<----Maintain this field, and the AIA will populate the XML correctly every time!!!!!!!!!
				OR (@ID_EXT = 'Y') )  --<----In Test Mode (ignore what ready_for_xml is set to).
		  AND ( ISNULL(AIA.INVOICE_ID,'') <> '' )  --INSURANCE, IN CASE BLANK ID EXTENSION SLIPS THROUGH

		GROUP BY
		 AIA.OFFICIAL_ACD_CLIENT_NAME
		,AIA.INVOICE_MAP_KEY
		,AIA.ACD_ID_EXTENSION
		,AIA.DATE
		,AIA.HOD_INTERVAL
		,AIA.INVOICE_ID

		ORDER BY 
		 AIA.OFFICIAL_ACD_CLIENT_NAME
		--,AIA.SCHEDULER_ACL_NAME
		,AIA.INVOICE_ID
		,AIA.ACD_ID_EXTENSION     
		,AIA.INVOICE_MAP_KEY
		,AIA.DATE
		,AIA.HOD_INTERVAL


--===============================================
-- UPDATE MINIMUM GUARANTEE
--===============================================

UPDATE #IMPORTS_GAR_AIA_XML SET
 MINIMUM_GUARANTEE = CASE WHEN ISNULL(ACD_ID_EXTENSION,'') <> '' THEN 
							(40.00 / 60.00) * AU_DK_TOTAL_PRODUCTIVE_DURATION
						  ELSE 0.00 END

--===============================================
-- UPDATE AUTHORIZED TO INVOICE
--===============================================
UPDATE #IMPORTS_GAR_AIA_XML SET
 AUTHORIZED_TO_INVOICE = CASE WHEN ISNULL(ACD_ID_EXTENSION,'') <> '' THEN 
							CASE WHEN MINIMUM_GUARANTEE > (AU_DK_TALK_DURATION) THEN MINIMUM_GUARANTEE
								 ELSE (AU_DK_TALK_DURATION) END      --TOTAL_TALK = INBOUND_TIME + OUTBOUND_TIME
							  ELSE 0.00 END



		--==================================!!!--INSERT RECORD FOR REPORT SO SSIS KNOWS DATE OF DATA IN DATASET:
		--Have to include 'D??' or 'W??' because SRS Subscriptions are being ran at about same time in one sql job step.
		--  If one subscription takes longer than the other, the wrong date will get used/pulled from the YZ_TB_FILENAMES_FOR_SSIS in the ssis. and so on.
		IF CHARINDEX('D',@TIME_INTERVAL) > 0 BEGIN
			INSERT INTO YZ_TB_FILENAMES_FOR_SSIS
			(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
			SELECT  --FOR THE .XML FILES FOR EACH DATE:
			 'iNetAIA_' + LTRIM(RTRIM(@TIME_INTERVAL))  --'iNetAIA_D09' for internal wsinet tenants 9 days from current date.  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.getdate()  --CST_ROW_CREATED_TIME
		END
		ELSE BEGIN  --'W' MEANING NEED TO PASS/POPULATE WITH DATE RANGE, LIKE 'MMDDYY_MMDDYY'. -- FOR GAR AND NW.
			INSERT INTO YZ_TB_FILENAMES_FOR_SSIS
				(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)

			SELECT  --FOR GETAROOM AND NINE_WEST:    --old:-- 'AGENT_INVOICE_AIA_XML'  --SQL_JOB_NAME 
			 'iNetAIA_' + LTRIM(RTRIM(@TIME_INTERVAL)) + '_' + REPLACE(LTRIM(RTRIM(CAST(@TENANT_KEY AS VARCHAR(10)))),',','')  --'iNetAIA_W14_900595' for GAR  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_BEG,1),'/','') + '_' + REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.getdate()  --CST_ROW_CREATED_TIME
		END
		--  SELECT * FROM YZ_TB_FILENAMES_FOR_SSIS ORDER BY CST_ROW_CREATED_TIME DESC

		--==================================!!!--RETURN DATASET TO REPORT:
		SELECT *
		FROM #IMPORTS_GAR_AIA_XML
		ORDER BY 
		 OFFICIAL_ACD_CLIENT_NAME
		--,SCHEDULER_ACL_NAME
		,INVOICE_ID

		,ACD_ID_EXTENSION     
		,INVOICE_MAP_KEY
		,DATE
		,HOD_INTERVAL
	END  --AIA_XML



END  --IF @RPT_TYPE_GRP = 'AIA'


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
--==================================

--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
--THIS (adding first, then getting minutes...) GIVES MORE AUT2, BUT NOT HOW Paul H. wanted.  Assuming 'Method' has precedence over highest AUT2.
--SELECT  ((852 + 811 + 555 + 669) / 60) * .63                                                   -- = 30.24
--CONVERT SECONDS TO MINUTES FOR EACH 15 MINUTE INTERVAL, THEN TOTAL FOR MINUTES IN AN HOUR, THEN TIMES RATE:
--SELECT  ((852 / 60) + (811 / 60) + (555 / 60) + (669 / 60)) * .63                              -- = 29.61
--!!! THIS IS HOW INVOICING MUST BE DONE PER PAUL H., 6/8/11, 10:45AM !!!--:
--CONVERT SECONDS TO MINUTES, DATA STILL IN 15 MINUTE INTERVALS, THEN TIMES RATE, THEN TOTAL/GROUP BASED ON HOW THEY WANT DATA DISPLAYED:
--SELECT (((852 / 60) * .63) + ((811 / 60)  * .63) + ((555 / 60)  * .63) + ((669 / 60)  * .63))  -- = 29.61
--THIS ENSURES THAT DATA/RESULTS WILL MATCH WITH EVERY INVOICE REPORT, NO MATTER WHAT INTERVAL(S) DATA IS DISPLAYED IN.
--!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
GO
PRINT N'Creating [dbo].[uspIMPORTS_GAR_DEFAULT_INVOICE_GROUPS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_GAR_DEFAULT_INVOICE_GROUPS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150)
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_GAR_DEFAULT_INVOICE_GROUPS] '05/12/2014','05/12/2014','0'
--  EXECUTE [dbo].[uspIMPORTS_GAR_DEFAULT_INVOICE_GROUPS] '05/12/2014','05/12/2014','152,153'    --select @tenant_key  --152,153
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) + 1
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SET @TENANT_KEY = 900705 -- GAR
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SELECT
 UA.ID_EXT
FROM 
(	SELECT
	 YT.ID_EXT
	-- SELECT *
	FROM WSOL_TB_IMPORTS_GAR_SD_INVOICE_GROUPS YT

	WHERE ( YT.WS_END_TIME >= @DTM_BEG AND YT.WS_START_TIME <  @DTM_END )

	GROUP BY
	 YT.ID_EXT
) UA
ORDER BY UA.ID_EXT

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GO
PRINT N'Creating [dbo].[uspIMPORTS_GAR_IMPORT_STATUS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_GAR_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_GAR_IMPORT_STATUS] '08/16/2015','08/31/2015','','R'
--  EXECUTE [dbo].[uspIMPORTS_GAR_IMPORT_STATUS] '08/16/2015','08/31/2015','','W'

--===========================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--===========================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_GAR_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_GAR_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_GAR_IMPORT_STATUS
(FILEDATETIME	VARCHAR(20)
,RCD_CNT		INT
,INT_CNT		INT
)

--SELECT * FROM WSOL_TB_IMPORTS_GAR_INVOICING
--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_GAR_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.RCD_CNT,0) AS RCD_CNT
	,ISNULL(UA.INT_CNT,0) AS INT_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,COUNT(*) AS RCD_CNT
		,COUNT(DISTINCT C.HOUR_INTERVAL) AS INT_CNT

		FROM            WSOL_TB_IMPORTS_GAR_INVOICING  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
	) UA

--FOR TESTING:
----SELECT * FROM #IMPORTS_GAR_IMPORT_STATUS
--GOTO EARLY_EXIT

--=================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=================================================================
--DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = @TENANT_KEY
----  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900705
--=======================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	
	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_GAR_IMPORT_STATUS   I   ON I.FILEDATETIME                   = DT.FILEDATETIME

WHERE	 ISNULL(I.RCD_CNT,0) = 0

  --AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)

ORDER BY 
 DT.FILEDATETIME

--  EXECUTE [dbo].[uspIMPORTS_GAR_IMPORT_STATUS] '08/16/2015','08/31/2015','','B'

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''

IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
		SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

			SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 10:00AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 9:00AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
		END
	END
	ELSE BEGIN
		SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
		END
	END
	
END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--GAR:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM YZ_TB_ERRORS_FOUND
							   WHERE TENANT_KEY = 900705 AND SUB_GROUP_NAME = 'GAR_INVOICING' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_GAR_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_GAR_IMPORT_STATUS_OUTBOUND]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_GAR_IMPORT_STATUS_OUTBOUND]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_GAR_IMPORT_STATUS_OUTBOUND] '01/01/2016','01/15/2016','','R'
--  EXECUTE [dbo].[uspIMPORTS_GAR_IMPORT_STATUS_OUTBOUND] '01/01/2016','01/15/2016','','W'
--  EXECUTE [dbo].[uspIMPORTS_GAR_IMPORT_STATUS_OUTBOUND] '01/01/2016','01/15/2016','','B'

--===========================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--===========================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_GAR_IMPORT_STATUS_OUTBOUND') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_GAR_IMPORT_STATUS_OUTBOUND
END
CREATE TABLE #IMPORTS_GAR_IMPORT_STATUS_OUTBOUND
(FILEDATETIME          VARCHAR(20)
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_GAR_IMPORT_STATUS_OUTBOUND
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.RCD_CNT,0) AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,COUNT(*) AS RCD_CNT

		FROM            WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
	) UA

--FOR TESTING:
----SELECT * FROM #IMPORTS_GAR_IMPORT_STATUS_OUTBOUND
--GOTO EARLY_EXIT

--=================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=================================================================
--DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = @TENANT_KEY
----  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900705
--=======================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	
	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_GAR_IMPORT_STATUS_OUTBOUND   I   ON I.FILEDATETIME                   = DT.FILEDATETIME

WHERE	 ISNULL(I.RCD_CNT,0) = 0

  --AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)

ORDER BY 
 DT.FILEDATETIME

--  EXECUTE [dbo].[uspIMPORTS_GAR_IMPORT_STATUS_OUTBOUND] '08/16/2015','08/31/2015','','B'

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''

IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
		SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

			SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 10:00AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 9:00AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
		END
	END
	ELSE BEGIN
		SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
		END
	END
	
END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--GAR:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM YZ_TB_ERRORS_FOUND
							   WHERE TENANT_KEY = 900705 AND SUB_GROUP_NAME = 'GAR_INVOICING_OUTBOUND' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_GAR_IMPORT_STATUS_OUTBOUND 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_GAR_INVOICING_IMPORT]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_GAR_INVOICING_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_GAR_INVOICING_IMPORT]

--  SELECT * FROM WSOL_TB_IMPORTS_GAR_INVOICING_1

--  Durations in file are in SECONDS. No conversion needed.

--=============================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY =       900705  --GAR
--=============================================
DELETE FROM YZ_TB_ERRORS_FOUND 
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = 'GAR_INVOICING'    --  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900705
--=============================================

--==========================================================================================================================================
--USING @WS_ROW_CREATED_TIME FOR ALL INSERTS WILL ALLOW ME TO DELETE SPECIFIC INSERT PROCESSES/FILES.  MOST IMPORTANT!!!  FOR ALL TABLES.
--  IN CASE OF EMERGENCY, CRACK GLASS.
--==========================================================================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.getdate()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===================================================================================

--======================================================================
--HANDLE COLUMN HEADER AND JUNK RECORDS:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_GAR_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_UNAVAILABLE_CODE
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_LOGIN_TIME
,FF_AVAILABLE_TIME
,FF_UNAVAILABLE_TIME_MINUS_ACW
,FF_TALK_TIME
,FF_HOLD_TIME
,FF_ACW_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,LOGIN_TIME
,AVAILABLE_TIME
,UNAVAILABLE_SYSTEM_PENDING_TIME
,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,UNAVAILABLE_DEDICATED_RESOURCE_TIME
,UNAVAILABLE_TIME_MINUS_ACW
,TALK_TIME
,HOLD_TIME
,ACW_TIME
,TRUE_OUTBOUND_TALK_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,PAY_GROUP)

SELECT
 24                     --BAD_IMPORTS_NO  --'Junk Record'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_UNAVAILABLE_CODE
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_LOGIN_TIME
,W1.FF_AVAILABLE_TIME
,W1.FF_UNAVAILABLE_TIME_MINUS_ACW
,W1.FF_TALK_TIME
,W1.FF_HOLD_TIME
,W1.FF_ACW_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.LOGIN_TIME
,W1.AVAILABLE_TIME
,W1.UNAVAILABLE_SYSTEM_PENDING_TIME
,W1.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,W1.UNAVAILABLE_DEDICATED_RESOURCE_TIME
,W1.UNAVAILABLE_TIME_MINUS_ACW
,W1.TALK_TIME
,W1.HOLD_TIME
,W1.ACW_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR
,W1.PAY_GROUP

FROM           WSOL_TB_IMPORTS_GAR_INVOICING_1    W1
WHERE ISNULL(W1.FF_DATE,'') IN ('Textbox1','Date','col1_Value','')

--======================================================================
--DELETE COLUMN HEADER AND JUNK RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_GAR_INVOICING_1
WHERE ISNULL(FF_DATE,'') IN ('Textbox1','Date','col1_Value','')
--====================================================================


--======================================================================
--HANDLE WS ADMIN RECORDS:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_GAR_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_UNAVAILABLE_CODE
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_LOGIN_TIME
,FF_AVAILABLE_TIME
,FF_UNAVAILABLE_TIME_MINUS_ACW
,FF_TALK_TIME
,FF_HOLD_TIME
,FF_ACW_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,LOGIN_TIME
,AVAILABLE_TIME
,UNAVAILABLE_SYSTEM_PENDING_TIME
,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,UNAVAILABLE_DEDICATED_RESOURCE_TIME
,UNAVAILABLE_TIME_MINUS_ACW
,TALK_TIME
,HOLD_TIME
,ACW_TIME
,TRUE_OUTBOUND_TALK_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,PAY_GROUP)

SELECT
 25                     --BAD_IMPORTS_NO  --'WS Admin Record'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_UNAVAILABLE_CODE
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_LOGIN_TIME
,W1.FF_AVAILABLE_TIME
,W1.FF_UNAVAILABLE_TIME_MINUS_ACW
,W1.FF_TALK_TIME
,W1.FF_HOLD_TIME
,W1.FF_ACW_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.LOGIN_TIME
,W1.AVAILABLE_TIME
,W1.UNAVAILABLE_SYSTEM_PENDING_TIME
,W1.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,W1.UNAVAILABLE_DEDICATED_RESOURCE_TIME
,W1.UNAVAILABLE_TIME_MINUS_ACW
,W1.TALK_TIME
,W1.HOLD_TIME
,W1.ACW_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR
,W1.PAY_GROUP
FROM           WSOL_TB_IMPORTS_GAR_INVOICING_1    W1
WHERE ISNULL(W1.FF_TEAM_NAME,'') = 'WS Admin'

--======================================================================
--DELETE WS ADMIN RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_GAR_INVOICING_1
WHERE ISNULL(FF_TEAM_NAME,'') = 'WS Admin'
--======================================================================

--======================================================================
--HANDLE SPECIAL CHARACTER CASE
--======================================================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_1 SET
 FF_AGENT_NAME = 'WS1-Rivera, Natasha'
WHERE FF_AGENT_NAME = 'WS1-Rivera, NatashaÂ Rivera'


--===============================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_1) TABLE THAT WEREN'T IN IMPORTED FILE:
--===============================================================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_1 SET
 [DATETIME]					= CAST(CONVERT(VARCHAR(10), FF_DATE) + ' ' + CONVERT(VARCHAR(2), LEFT(FF_INTERVAL_30_MINUTES,2)) + ':00:00' AS DATETIME)
,HOUR_INTERVAL				= CONVERT(VARCHAR(2), LEFT(FF_INTERVAL_30_MINUTES,2))
,AGENT_NAME					= SUBSTRING(FF_AGENT_NAME, 5, LEN(FF_AGENT_NAME))
,SKILL_NAME					= ISNULL(FF_SKILL_NAME,'')
,TEAM_NAME					= ISNULL(FF_TEAM_NAME ,'')
,LOGIN_TIME					= CAST(ISNULL(NULLIF(FF_LOGIN_TIME					,''),'0.00') AS DECIMAL(10,2))
,AVAILABLE_TIME				= CAST(ISNULL(NULLIF(FF_AVAILABLE_TIME				,''),'0.00') AS DECIMAL(10,2))
,UNAVAILABLE_TIME_MINUS_ACW	= CAST(ISNULL(NULLIF(FF_UNAVAILABLE_TIME_MINUS_ACW	,''),'0.00') AS DECIMAL(10,2))
,HOLD_TIME					= CAST(ISNULL(NULLIF(FF_HOLD_TIME					,''),'0.00') AS DECIMAL(10,2))
,ACW_TIME					= CAST(ISNULL(NULLIF(FF_ACW_TIME					,''),'0.00') AS DECIMAL(10,2))
,TALK_TIME					= CASE WHEN FF_SKILL_NAME = 'Outbound' 
									THEN 0.00 
								   ELSE CAST(ISNULL(NULLIF(FF_TALK_TIME			,''),'0.00') AS DECIMAL(10,2))
							  END
,TENANT_KEY			= @TENANT_KEY  --NOT REALLY NECESSARY.

UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_1 SET
 UNAVAILABLE_SYSTEM_PENDING_TIME		= CASE WHEN ISNULL(FF_UNAVAILABLE_CODE,'') IN (  'CallbackPending'
																						,'InboundPending'
																						,'OutboundPending'
																						,'PromisePending'
																						,'ConsultPending'
																						,'TransferPending'
																						)						THEN UNAVAILABLE_TIME_MINUS_ACW ELSE 0.00 END
,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME	= CASE WHEN ISNULL(FF_UNAVAILABLE_CODE,'') =	 'HeldPartyAbandoned'	THEN UNAVAILABLE_TIME_MINUS_ACW ELSE 0.00 END
,UNAVAILABLE_DEDICATED_RESOURCE_TIME	= CASE WHEN ISNULL(FF_UNAVAILABLE_CODE,'') =	 'Dedicated Resource'	THEN UNAVAILABLE_TIME_MINUS_ACW ELSE 0.00 END

-- <<<<<< WILL NEED TO ENABLE THE CODE BELOW ONCE A DECISION IS MADE ON HOW TO HANDLE UNAVAILABLE CODES ***********
/*
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_1 SET
 UNAVAILABLE_TIME_MINUS_ACW	= UNAVAILABLE_TIME_MINUS_ACW - UNAVAILABLE_HELD_PARTY_ABANDONED_TIME - UNAVAILABLE_SYSTEM_PENDING_TIME - UNAVAILABLE_DEDICATED_RESOURCE_TIME
*/

--=============================================================================================
--Need when populating tmp DEW table for insert into _AIA table.
--=============================================================================================
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME

SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN([DATETIME]) FROM WSOL_TB_IMPORTS_GAR_INVOICING_1))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_GAR_INVOICING_1))  
--=============================================================================================

--=======================================================================================
-- UPDATE DATE_TIME_KEY
--=======================================================================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_1 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM            WSOL_TB_IMPORTS_GAR_INVOICING_1	I
INNER JOIN      DATE_TIME							DT   ON DT.CAL_DATE = I.[DATETIME]

--======================================================================
--HANDLE INVALID DATE/TIME RECORDS:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_GAR_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_UNAVAILABLE_CODE
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_LOGIN_TIME
,FF_AVAILABLE_TIME
,FF_UNAVAILABLE_TIME_MINUS_ACW
,FF_TALK_TIME
,FF_HOLD_TIME
,FF_ACW_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,LOGIN_TIME
,AVAILABLE_TIME
,UNAVAILABLE_SYSTEM_PENDING_TIME
,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,UNAVAILABLE_DEDICATED_RESOURCE_TIME
,UNAVAILABLE_TIME_MINUS_ACW
,TALK_TIME
,HOLD_TIME
,ACW_TIME
,TRUE_OUTBOUND_TALK_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,PAY_GROUP)

SELECT
 26                     --BAD_IMPORTS_NO  --'Invalid Date/Time'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_UNAVAILABLE_CODE
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_LOGIN_TIME
,W1.FF_AVAILABLE_TIME
,W1.FF_UNAVAILABLE_TIME_MINUS_ACW
,W1.FF_TALK_TIME
,W1.FF_HOLD_TIME
,W1.FF_ACW_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.LOGIN_TIME
,W1.AVAILABLE_TIME
,W1.UNAVAILABLE_SYSTEM_PENDING_TIME
,W1.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,W1.UNAVAILABLE_DEDICATED_RESOURCE_TIME
,W1.UNAVAILABLE_TIME_MINUS_ACW
,W1.TALK_TIME
,W1.HOLD_TIME
,W1.ACW_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR
,W1.PAY_GROUP
FROM           WSOL_TB_IMPORTS_GAR_INVOICING_1    W1
WHERE ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================
--DELETE INVALID DATE/TIME RECORDS:
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_GAR_INVOICING_1
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================


--======================================================================
--HANDLE DUPLICATES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_GAR_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_UNAVAILABLE_CODE
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_LOGIN_TIME
,FF_AVAILABLE_TIME
,FF_UNAVAILABLE_TIME_MINUS_ACW
,FF_TALK_TIME
,FF_HOLD_TIME
,FF_ACW_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,LOGIN_TIME
,AVAILABLE_TIME
,UNAVAILABLE_SYSTEM_PENDING_TIME
,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,UNAVAILABLE_DEDICATED_RESOURCE_TIME
,UNAVAILABLE_TIME_MINUS_ACW
,TALK_TIME
,HOLD_TIME
,ACW_TIME
,TRUE_OUTBOUND_TALK_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,PAY_GROUP)

SELECT
 21                     --BAD_IMPORTS_NO  --'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_UNAVAILABLE_CODE
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_LOGIN_TIME
,W1.FF_AVAILABLE_TIME
,W1.FF_UNAVAILABLE_TIME_MINUS_ACW
,W1.FF_TALK_TIME
,W1.FF_HOLD_TIME
,W1.FF_ACW_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.LOGIN_TIME
,W1.AVAILABLE_TIME
,W1.UNAVAILABLE_SYSTEM_PENDING_TIME
,W1.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,W1.UNAVAILABLE_DEDICATED_RESOURCE_TIME
,W1.UNAVAILABLE_TIME_MINUS_ACW
,W1.TALK_TIME
,W1.HOLD_TIME
,W1.ACW_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR
,W1.PAY_GROUP
FROM
(	SELECT
	 FF_DATE
	,FF_INTERVAL_30_MINUTES
	,FF_AGENT_NAME
	,FF_UNAVAILABLE_CODE
	,FF_SKILL_NAME
	,FF_TEAM_NAME
	,ROW_NUMBER() over (partition by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_UNAVAILABLE_CODE, FF_SKILL_NAME, FF_TEAM_NAME
                            order by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_UNAVAILABLE_CODE, FF_SKILL_NAME, FF_TEAM_NAME, LOGIN_TIME DESC) ROWNO
	FROM WSOL_TB_IMPORTS_GAR_INVOICING_1
) TNM
LEFT JOIN      WSOL_TB_IMPORTS_GAR_INVOICING_1    W1   ON W1.FF_DATE				= TNM.FF_DATE
													  AND W1.FF_INTERVAL_30_MINUTES	= TNM.FF_INTERVAL_30_MINUTES
													  AND W1.FF_AGENT_NAME			= TNM.FF_AGENT_NAME
													  AND W1.FF_UNAVAILABLE_CODE	= TNM.FF_UNAVAILABLE_CODE
													  AND W1.FF_SKILL_NAME			= TNM.FF_SKILL_NAME
													  AND W1.FF_TEAM_NAME			= TNM.FF_TEAM_NAME
WHERE TNM.ROWNO > 1
--======================================================================
--DELETE DUPLICATES:
--======================================================================
DELETE FROM TNM  
FROM
(	SELECT
	 FF_DATE
	,FF_INTERVAL_30_MINUTES
	,FF_AGENT_NAME
	,FF_UNAVAILABLE_CODE
	,FF_SKILL_NAME
	,FF_TEAM_NAME
	,ROW_NUMBER() over (partition by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_UNAVAILABLE_CODE, FF_SKILL_NAME, FF_TEAM_NAME
                            order by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_UNAVAILABLE_CODE, FF_SKILL_NAME, LOGIN_TIME DESC) ROWNO
	FROM WSOL_TB_IMPORTS_GAR_INVOICING_1
) TNM
WHERE TNM.ROWNO > 1
--======================================================================

--===============================================
--POPULATE ID EXTENSION AND PAY GROUP
--===============================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_1 SET
 ID_EXT		= CASE WHEN CHARINDEX('-', FF_AGENT_NAME) = 0 THEN
				CASE WHEN FF_TEAM_NAME = 'WS Blended'			THEN 'GBA'
					 WHEN FF_TEAM_NAME = 'WS Blended Spanish'	THEN 'GBB'
					 WHEN FF_TEAM_NAME = 'WS Sales'				THEN 'GBS'
					 WHEN FF_TEAM_NAME = 'WS Service'			THEN 'GRS'
					 WHEN FF_TEAM_NAME = 'WS Resource Blended'	THEN 'GBR'
					 WHEN FF_TEAM_NAME = 'WS Resource Service'	THEN 'SVR'
					 WHEN FF_TEAM_NAME = 'WS Resource Sales'	THEN 'SRA'
					 WHEN FF_TEAM_NAME = 'WS Sales Training'	THEN 'GBS'	--<<<<<< SAME AS WS SALES ABOVE (NESTING AGENTS PLACED IN THIS GROUP AS OF 01/16/2017)
				ELSE '' END
				   WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS1' THEN 'SRA'
				   WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS2' THEN 'SVR'
				   WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS3' THEN 'GBS'
				   WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS4' THEN 'GRS'
				   WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS5' THEN 'GBA'
				   WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS6' THEN 'GBR'		
				   WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS7' THEN 'GBB'
				   WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) NOT IN ('WS1','WS2','WS3','WS4','WS5','WS6','WS7') THEN
					 CASE WHEN FF_TEAM_NAME = 'WS Blended'			THEN 'GBA'
						  WHEN FF_TEAM_NAME = 'WS Blended Spanish'	THEN 'GBB'
						  WHEN FF_TEAM_NAME = 'WS Sales'			THEN 'GBS'
						  WHEN FF_TEAM_NAME = 'WS Service'			THEN 'GRS'
						  WHEN FF_TEAM_NAME = 'WS Resource Blended'	THEN 'GBR'
						  WHEN FF_TEAM_NAME = 'WS Resource Service'	THEN 'SVR'
						  WHEN FF_TEAM_NAME = 'WS Resource Sales'	THEN 'SRA'
						  WHEN FF_TEAM_NAME = 'WS Sales Training'	THEN 'GBS'	--<<<<<< SAME AS WS SALES ABOVE (NESTING AGENTS PLACED IN THIS GROUP AS OF 01/16/2017)
					 ELSE '' END   
			  ELSE '' END
,PAY_GROUP	= ''

--===============================================
--UPDATE TEAM NAME BASED ON AGENT NAME PREFIX
--===============================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_1 SET
 TEAM_NAME = CASE WHEN CHARINDEX('-', FF_AGENT_NAME) = 0 THEN FF_TEAM_NAME
				  ELSE
					CASE 
						WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS1' THEN 'WS Resource Sales'
						WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS2' THEN 'WS Resource Service'
						WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS3' THEN 'WS Sales'
						WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS4' THEN 'WS Service'
						WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS5' THEN 'WS Blended'
						WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS6' THEN 'WS Resource Blended'		
						WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS7' THEN 'WS Blended Spanish'
						ELSE FF_TEAM_NAME
					END
			 END

--===============================================
--POPULATE INVOICE GROUPS DATA
--===============================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_1 SET
 AIR_DAY_TYPE = CASE WHEN IG.HAS_HOLIDAYS = 'Y' AND
						 (    ISNULL(IH.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) OR
						   ( ISNULL(IHA.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) AND ISNULL(IHA.ID_EXT,'') <> '' )
						 )
					  THEN 'H' ELSE 'S' END  --AS AIR_DAY_TYPE  --H=Holiday  --S=Standard
FROM            WSOL_TB_IMPORTS_GAR_INVOICING_1					I
INNER JOIN      DATE_TIME										DT   ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY
LEFT JOIN       WSOL_TB_IMPORTS_GAR_SD_INVOICE_GROUPS			IG   ON IG.ID_EXT              = I.ID_EXT
LEFT JOIN       WSOL_TB_IMPORTS_GAR_SD_INVOICE_HOLIDAYS			IH   ON IH.HOLIDAY_DATE        = CAST(DT.CAL_DATE_STRING AS DATETIME)
LEFT JOIN       WSOL_TB_IMPORTS_GAR_SD_INVOICE_HOLIDAYS_ADDL	IHA  ON IHA.HOLIDAY_DATE       = CAST(DT.CAL_DATE_STRING AS DATETIME)
															    AND		IHA.ID_EXT             = I.ID_EXT	

--===============================================
--POPULATE ADDITIONAL INVOICE GROUPS DATA
--===============================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_1 SET
 AIR_ACW_FONT_COLOR             = 'Black'

,MIN_GUARANTEE_RATE             = ISNULL(IG.MIN_GUARANTEE_RATE,0)           
,MIN_GUARANTEE_TYPE             = ISNULL(IG.MIN_GUARANTEE_TYPE,'')          
,AUTHORIZED_TO_INVOICE_TYPE     = ISNULL(IG.AUTHORIZED_TO_INVOICE_TYPE,'')  

,HAS_HOLIDAYS		= IG.HAS_HOLIDAYS
,INCLUDE_IN_CAS		= IG.INCLUDE_IN_CAS
,READY_FOR_XML		= IG.READY_FOR_XML
,SHOW_ID_EXTS		= IG.SHOW_ID_EXTS
,RESOURCE_NAME		= CASE WHEN CHARINDEX('-', I.FF_AGENT_NAME) = 0 THEN I.FF_AGENT_NAME
					  ELSE SUBSTRING(I.FF_AGENT_NAME, CHARINDEX('-', I.FF_AGENT_NAME) + 1, LEN(I.FF_AGENT_NAME) - CHARINDEX('-', I.FF_AGENT_NAME)) END
,SCHEDULER_ACL_NAME	= IG.SCHEDULER_ACL_NAME 
FROM            WSOL_TB_IMPORTS_GAR_INVOICING_1        I
LEFT JOIN       WSOL_TB_IMPORTS_GAR_SD_INVOICE_GROUPS  IG  ON IG.ID_EXT    = I.ID_EXT
												
--  SELECT * FROM WSOL_TB_IMPORTS_GAR_SD_INVOICE_GROUPS
	
--===============================================
--SET INVOICE ID
--===============================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_1 SET
 INVOICE_ID         = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
FROM            WSOL_TB_IMPORTS_GAR_INVOICING_1            AIA 
LEFT JOIN       WSOL_TB_IMPORTS_GAR_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT

--====================================================	
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--====================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--Check #1:  ===================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_GAR_INVOICING_1 )
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + '1) File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #2:  ===================================================================================================
--	SET @RCD_CNT  = (	SELECT COUNT(*) FROM WSOL_TB_IMPORTS_GAR_INVOICING_1  
--						WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--					)  
--	IF @RCD_CNT > 0 BEGIN
--		SET @MSG1 = @MSG1 + '2) Invalid DATETIME Intervals in GAR INVOICING IMPORT File.  Import was Cancelled.  Nothing was Imported.   |   ' 
--		SET @ERR_CNT = @ERR_CNT + 1
--	END
--Check #3:  ===================================================================================================
--	SET @RCD_CNT  = (	SELECT COUNT(*) FROM WSOL_TB_IMPORTS_GAR_INVOICING_1  
--						WHERE ISNULL(FF_AGENT_NAME,'') = ''
--					)  
--	IF @RCD_CNT > 0 BEGIN
--		SET @MSG1 = @MSG1 + '3) Blank AGENT NAME(s) in GAR INVOICE IMPORT File exists.  Import was Cancelled.  Nothing was Imported.   |   ' 
--		SET @ERR_CNT = @ERR_CNT + 1
--	END
--Check #n:  ===================================================================================================
--	SET @MSG1 = @MSG1 + '2) Something not right with something.  Import was cancelled.  Nothing was Imported.     '
--	--SET @RCD_CNT = (	SELECT COUNT(*)
--	--					FROM WSOL_TB_IMPORTS_GAR_INVOICING_1
--	--					WHERE 'something' <> 'somethingelse'
--	--				  )  --If nothing imported in work table, don't need to return error.  That check is done in SSIS currently.

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	--SSIS reads YZ_TB_ERRORS_FOUND table where TENANT_KEY = 900705, and if record exists, outputs results/error_msg field in an email.
	INSERT INTO YZ_TB_ERRORS_FOUND
	(
	TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'GAR_INVOICING'	--SUB_GROUP_NAME
	,@MSG1				--ERROR_MSG
	--====================================
	GOTO EARLY_EXIT
	--====================================
END
ELSE BEGIN
	INSERT INTO YZ_TB_ERRORS_FOUND
	(
	TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'GAR_INVOICING'	--SUB_GROUP_NAME
	,''					--ERROR_MSG			--Never make this @MSG1 !!!  Must stay as ''.
	--Do NOT want to go to early exit here because data was good, according to 'checks'!  We want to import data into permanent table.
END

--===========================================================
--GROUP DATA BY HOURLY INTERVALS
--===========================================================
DELETE FROM WSOL_TB_IMPORTS_GAR_INVOICING_2

INSERT INTO WSOL_TB_IMPORTS_GAR_INVOICING_2
(FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_UNAVAILABLE_CODE
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_LOGIN_TIME
,FF_AVAILABLE_TIME
,FF_UNAVAILABLE_TIME_MINUS_ACW
,FF_TALK_TIME
,FF_HOLD_TIME
,FF_ACW_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,LOGIN_TIME
,AVAILABLE_TIME
,UNAVAILABLE_SYSTEM_PENDING_TIME
,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,UNAVAILABLE_DEDICATED_RESOURCE_TIME
,UNAVAILABLE_TIME_MINUS_ACW
,TALK_TIME
,HOLD_TIME
,ACW_TIME
,TRUE_OUTBOUND_TALK_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,PAY_GROUP
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W1.FF_DATE
,NULL	--FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,NULL	--FF_UNAVAILABLE_CODE
,NULL	--FF_SKILL_NAME
,MAX(W1.TEAM_NAME)
,SUM(CAST(ISNULL(NULLIF(W1.FF_LOGIN_TIME				,''),0)	AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_AVAILABLE_TIME			,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_UNAVAILABLE_TIME_MINUS_ACW,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_TALK_TIME					,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_HOLD_TIME	,'')			,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_ACW_TIME					,''),0) AS DECIMAL(10,2)))

,W1.SEQNO_ADDED_TIME
,MAX(W1.SEQNO)
,W1.FTP_FILE_NAME

,W1.[DATETIME]
,W1.HOUR_INTERVAL
,MAX(W1.AGENT_NAME)
,NULL						--SKILL_NAME
,MAX(W1.TEAM_NAME)
,SUM(ISNULL(W1.LOGIN_TIME							,0.00))
,SUM(ISNULL(W1.AVAILABLE_TIME						,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_SYSTEM_PENDING_TIME		,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_DEDICATED_RESOURCE_TIME	,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_TIME_MINUS_ACW			,0.00))
,SUM(ISNULL(W1.TALK_TIME							,0.00))
,SUM(ISNULL(W1.HOLD_TIME							,0.00))
,SUM(ISNULL(W1.ACW_TIME								,0.00))
,SUM(ISNULL(W1.TRUE_OUTBOUND_TALK_TIME				,0.00))
,SUM(ISNULL(W1.TOTAL_TALK							,0.00)) --WILL BE CALCULATED WHEN TRUE OUTBOUND TALK DATA IS IMPORTED
,SUM(ISNULL(W1.CPROD								,0.00)) --WILL BE CALCULATED WHEN TRUE OUTBOUND TALK DATA IS IMPORTED
,SUM(ISNULL(W1.MING									,0.00))	--WILL BE CALCULATED WHEN TRUE OUTBOUND TALK DATA IS IMPORTED
,SUM(ISNULL(W1.AUT2									,0.00))	--WILL BE CALCULATED WHEN TRUE OUTBOUND TALK DATA IS IMPORTED
,MAX(W1.EMAIL)
,W1.ID_EXT
,MAX(W1.SCHEDULER_ACL_NAME)
,W1.STD_TENANT_START_DATE_TIME_KEY
,MAX(W1.CAL_DATE)
,351
,MAX(W1.AIR_DAY_TYPE)
,MAX(W1.AIR_ACW_FONT_COLOR)
,MAX(W1.MIN_GUARANTEE_RATE)
,MAX(W1.MIN_GUARANTEE_TYPE)
,MAX(W1.AUTHORIZED_TO_INVOICE_TYPE)
,MAX(W1.HAS_HOLIDAYS)
,MAX(W1.INCLUDE_IN_CAS)
,MAX(W1.READY_FOR_XML)
,MAX(W1.SHOW_ID_EXTS)
,W1.INVOICE_ID
,MAX(W1.RESOURCE_NAME)
,SUM(ISNULL(W1.AIRITKDUR,0))
,SUM(ISNULL(W1.AIRIACDUR,0))
,W1.PAY_GROUP

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_GAR_INVOICING_1  W1

LEFT JOIN       WSOL_TB_IMPORTS_GAR_INVOICING_2   G		ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													   AND G.FF_AGENT_NAME                  = W1.FF_AGENT_NAME
													   AND G.ID_EXT							= W1.ID_EXT

WHERE (G.FF_AGENT_NAME                     IS NULL AND ISNULL(W1.FF_AGENT_NAME,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	   IS NULL AND ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND (G.ID_EXT							   IS NULL AND ISNULL(W1.ID_EXT,'') <> '' )

GROUP BY
 W1.FF_DATE
,W1.FF_AGENT_NAME
,W1.SEQNO_ADDED_TIME
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.ID_EXT
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.INVOICE_ID
,W1.PAY_GROUP

ORDER BY
 W1.FF_AGENT_NAME
,W1.[DATETIME]

--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_GAR_INVOICING_OUTBOUND_IMPORT]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_GAR_INVOICING_OUTBOUND_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_GAR_INVOICING_OUTBOUND_IMPORT]

--  SELECT * FROM WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1

--  Durations in file are in SECONDS. No conversion needed.

--=============================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY =       900705  --GAR
--=============================================
DELETE FROM YZ_TB_ERRORS_FOUND 
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = 'GAR_INVOICING_OUTBOUND'    --  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900705
--=============================================

--==========================================================================================================================================
--USING @WS_ROW_CREATED_TIME FOR ALL INSERTS WILL ALLOW ME TO DELETE SPECIFIC INSERT PROCESSES/FILES.  MOST IMPORTANT!!!  FOR ALL TABLES.
--  IN CASE OF EMERGENCY, CRACK GLASS.
--==========================================================================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.getdate()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===================================================================================

--======================================================================
--HANDLE COLUMN HEADER AND JUNK RECORDS:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_CONTACT_ID
,FF_MASTER_CONTACT_ID
,FF_TALK_TIME
,FF_ACW_TIME
,FF_HOLD_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,TALK_TIME
,ACW_TIME
,HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME
,STD_TENANT_START_DATE_TIME_KEY)

SELECT
 24                     --BAD_IMPORTS_NO  --'Junk Record'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_CONTACT_ID
,W1.FF_MASTER_CONTACT_ID
,W1.FF_TALK_TIME
,W1.FF_ACW_TIME
,W1.FF_HOLD_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.TALK_TIME
,W1.ACW_TIME
,W1.HOLD_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.STD_TENANT_START_DATE_TIME_KEY

FROM           WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1    W1
WHERE ISNULL(W1.FF_DATE,'') IN ('Textbox1','Date','col1_Value','')

--======================================================================
--DELETE COLUMN HEADER AND JUNK RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1
WHERE ISNULL(FF_DATE,'') IN ('Textbox1','Date','col1_Value','')
--====================================================================


--======================================================================
--HANDLE WS ADMIN RECORDS:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_CONTACT_ID
,FF_MASTER_CONTACT_ID
,FF_TALK_TIME
,FF_ACW_TIME
,FF_HOLD_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,TALK_TIME
,ACW_TIME
,HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME
,STD_TENANT_START_DATE_TIME_KEY)
SELECT
 25                     --BAD_IMPORTS_NO  --'WS Admin Record'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_CONTACT_ID
,W1.FF_MASTER_CONTACT_ID
,W1.FF_TALK_TIME
,W1.FF_ACW_TIME
,W1.FF_HOLD_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.TALK_TIME
,W1.ACW_TIME
,W1.HOLD_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.STD_TENANT_START_DATE_TIME_KEY
FROM           WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1    W1
WHERE ISNULL(W1.FF_TEAM_NAME,'') = 'WS Admin'

--======================================================================
--DELETE WS ADMIN RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1
WHERE ISNULL(FF_TEAM_NAME,'') = 'WS Admin'
--====================================================================

--======================================================================
--HANDLE SPECIAL CHARACTER CASE
--======================================================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1 SET
 FF_AGENT_NAME = 'WS1-Rivera, Natasha'
WHERE FF_AGENT_NAME = 'WS1-Rivera, NatashaÂ Rivera'


--===============================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_1) TABLE THAT WEREN'T IN IMPORTED FILE:
--===============================================================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1 SET
 [DATETIME]					= CAST(CONVERT(VARCHAR(10), FF_DATE) + ' ' + CONVERT(VARCHAR(2), LEFT(FF_INTERVAL_30_MINUTES,2)) + ':00:00' AS DATETIME)
,HOUR_INTERVAL				= CONVERT(VARCHAR(2), LEFT(FF_INTERVAL_30_MINUTES,2))
,AGENT_NAME					= SUBSTRING(FF_AGENT_NAME, 5, LEN(FF_AGENT_NAME))
,SKILL_NAME					= ISNULL(FF_SKILL_NAME,'')
,TEAM_NAME					= ISNULL(FF_TEAM_NAME ,'')
,TALK_TIME					= CAST(ISNULL(NULLIF(FF_TALK_TIME	,''),'0.00') AS DECIMAL(10,2))
,ACW_TIME					= CAST(ISNULL(NULLIF(FF_ACW_TIME	,''),'0.00') AS DECIMAL(10,2))
,HOLD_TIME					= CAST(ISNULL(NULLIF(FF_HOLD_TIME	,''),'0.00') AS DECIMAL(10,2))

--=======================================================================================
-- UPDATE DATE_TIME_KEY
--=======================================================================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM            WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1	I
INNER JOIN      DATE_TIME							DT   ON DT.CAL_DATE = I.[DATETIME]

--======================================================================
--POPULATE TRUE OUTBOUND TALK TIME VALUE
--======================================================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1 SET
 TRUE_OUTBOUND_TALK_TIME = CASE WHEN FF_CONTACT_ID = FF_MASTER_CONTACT_ID
									THEN TALK_TIME 
								ELSE 0.00
						   END

--======================================================================
--HANDLE INVALID DATE/TIME RECORDS:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_CONTACT_ID
,FF_MASTER_CONTACT_ID
,FF_TALK_TIME
,FF_ACW_TIME
,FF_HOLD_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,TALK_TIME
,ACW_TIME
,HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME
,STD_TENANT_START_DATE_TIME_KEY)
SELECT
 26                     --BAD_IMPORTS_NO  --'Invalid Date/Time'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_CONTACT_ID
,W1.FF_MASTER_CONTACT_ID
,W1.FF_TALK_TIME
,W1.FF_ACW_TIME
,W1.FF_HOLD_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.TALK_TIME
,W1.ACW_TIME
,W1.HOLD_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.STD_TENANT_START_DATE_TIME_KEY
FROM           WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1    W1
WHERE ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================
--DELETE INVALID DATE/TIME RECORDS:
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================


--======================================================================
--HANDLE DUPLICATES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_CONTACT_ID
,FF_MASTER_CONTACT_ID
,FF_TALK_TIME
,FF_ACW_TIME
,FF_HOLD_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,TALK_TIME
,ACW_TIME
,HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME
,STD_TENANT_START_DATE_TIME_KEY)
SELECT
 21                     --BAD_IMPORTS_NO  --'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_CONTACT_ID
,W1.FF_MASTER_CONTACT_ID
,W1.FF_TALK_TIME
,W1.FF_ACW_TIME
,W1.FF_HOLD_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.TALK_TIME
,W1.ACW_TIME
,W1.HOLD_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.STD_TENANT_START_DATE_TIME_KEY
FROM
(	SELECT
	 FF_DATE
	,FF_INTERVAL_30_MINUTES
	,FF_AGENT_NAME
	,FF_SKILL_NAME
	,FF_TEAM_NAME
	,FF_CONTACT_ID
	,FF_MASTER_CONTACT_ID
	,FF_TALK_TIME
	,ROW_NUMBER() over (partition by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_SKILL_NAME, FF_TEAM_NAME, FF_CONTACT_ID, FF_MASTER_CONTACT_ID, FF_TALK_TIME
                            order by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_SKILL_NAME, FF_TEAM_NAME, FF_CONTACT_ID, FF_MASTER_CONTACT_ID, TALK_TIME DESC) ROWNO
	FROM WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1
) TNM
LEFT JOIN      WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1	W1	 ON W1.FF_DATE					= TNM.FF_DATE
															AND W1.FF_INTERVAL_30_MINUTES	= TNM.FF_INTERVAL_30_MINUTES
															AND W1.FF_AGENT_NAME			= TNM.FF_AGENT_NAME
															AND W1.FF_SKILL_NAME			= TNM.FF_SKILL_NAME
															AND W1.FF_TEAM_NAME				= TNM.FF_TEAM_NAME
															AND W1.FF_CONTACT_ID			= TNM.FF_CONTACT_ID
															AND W1.FF_MASTER_CONTACT_ID		= TNM.FF_MASTER_CONTACT_ID
															AND W1.FF_TALK_TIME				= TNM.FF_TALK_TIME
WHERE TNM.ROWNO > 1
--======================================================================
--DELETE DUPLICATES:
--======================================================================
DELETE FROM TNM  
FROM
(	SELECT
	 FF_DATE
	,FF_INTERVAL_30_MINUTES
	,FF_AGENT_NAME
	,FF_SKILL_NAME
	,FF_TEAM_NAME
	,FF_CONTACT_ID
	,FF_MASTER_CONTACT_ID
	,FF_TALK_TIME
	,ROW_NUMBER() over (partition by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_SKILL_NAME, FF_TEAM_NAME, FF_CONTACT_ID, FF_MASTER_CONTACT_ID, FF_TALK_TIME
                            order by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_SKILL_NAME, FF_TEAM_NAME, FF_CONTACT_ID, FF_MASTER_CONTACT_ID, TALK_TIME DESC) ROWNO
	FROM WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1
) TNM
WHERE TNM.ROWNO > 1
--======================================================================

--====================================================	
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--====================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--Check #1:  ===================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1 )
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + '1) File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #2:  ===================================================================================================
--	SET @RCD_CNT  = (	SELECT COUNT(*) FROM WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1  
--						WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--					)  
--	IF @RCD_CNT > 0 BEGIN
--		SET @MSG1 = @MSG1 + '2) Invalid DATETIME Intervals in GAR INVOICING IMPORT File.  Import was Cancelled.  Nothing was Imported.   |   ' 
--		SET @ERR_CNT = @ERR_CNT + 1
--	END
--Check #3:  ===================================================================================================
--	SET @RCD_CNT  = (	SELECT COUNT(*) FROM WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1  
--						WHERE ISNULL(FF_AGENT_NAME,'') = ''
--					)  
--	IF @RCD_CNT > 0 BEGIN
--		SET @MSG1 = @MSG1 + '3) Blank AGENT NAME(s) in GAR INVOICE IMPORT File exists.  Import was Cancelled.  Nothing was Imported.   |   ' 
--		SET @ERR_CNT = @ERR_CNT + 1
--	END
--Check #n:  ===================================================================================================
--	SET @MSG1 = @MSG1 + '2) Something not right with something.  Import was cancelled.  Nothing was Imported.     '
--	--SET @RCD_CNT = (	SELECT COUNT(*)
--	--					FROM WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1
--	--					WHERE 'something' <> 'somethingelse'
--	--				  )  --If nothing imported in work table, don't need to return error.  That check is done in SSIS currently.

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	--SSIS reads YZ_TB_ERRORS_FOUND table where TENANT_KEY = 900705, and if record exists, outputs results/error_msg field in an email.
	INSERT INTO YZ_TB_ERRORS_FOUND
	(
	TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'GAR_INVOICING_OUTBOUND'	--SUB_GROUP_NAME
	,@MSG1				--ERROR_MSG
	--====================================
	GOTO EARLY_EXIT
	--====================================
END
ELSE BEGIN
	INSERT INTO YZ_TB_ERRORS_FOUND
	(
	TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY				--TENANT_KEY
	,'GAR_INVOICING_OUTBOUND'	--SUB_GROUP_NAME
	,''							--ERROR_MSG			--Never make this @MSG1 !!!  Must stay as ''.
	--Do NOT want to go to early exit here because data was good, according to 'checks'!  We want to import data into permanent table.
END

--=================================================================================================
--CORRECT TEAM NAMES BASED ON AGENT NAME PREFIX (PER NICK ADLER EFFECTIVE 7/28/16)
--=================================================================================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1 SET
 TEAM_NAME = CASE WHEN CHARINDEX('-', FF_AGENT_NAME) = 0 THEN FF_TEAM_NAME
				  ELSE
					CASE 
						WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS1' THEN 'WS Resource Sales'
						WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS2' THEN 'WS Resource Service'
						WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS3' THEN 'WS Sales'
						WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS4' THEN 'WS Service'
						WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS5' THEN 'WS Blended'
						WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS6' THEN 'WS Resource Blended'		
						WHEN LEFT(FF_AGENT_NAME, CHARINDEX('-', FF_AGENT_NAME) - 1) = 'WS7' THEN 'WS Blended Spanish'
						ELSE FF_TEAM_NAME
					END
			 END
					 
--===========================================================
--GROUP DATA BY HOURLY INTERVALS
--===========================================================
DELETE FROM WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_2

INSERT INTO WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_2
(FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_CONTACT_ID
,FF_MASTER_CONTACT_ID
,FF_TALK_TIME
,FF_ACW_TIME
,FF_HOLD_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,TALK_TIME
,ACW_TIME
,HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME
,STD_TENANT_START_DATE_TIME_KEY
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W1.FF_DATE
,NULL	--FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,NULL	--FF_SKILL_NAME
,MAX(W1.FF_TEAM_NAME)
,NULL	--FF_CONTACT_ID
,NULL	--FF_MASTER_CONTACT_ID
,SUM(CAST(ISNULL(NULLIF(W1.FF_TALK_TIME	,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_ACW_TIME	,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_HOLD_TIME	,''),0) AS DECIMAL(10,2)))


,W1.SEQNO_ADDED_TIME
,MAX(W1.SEQNO)
,W1.FTP_FILE_NAME

,W1.[DATETIME]
,W1.HOUR_INTERVAL
,MAX(W1.AGENT_NAME)
,NULL						--SKILL_NAME
,W1.TEAM_NAME
,SUM(ISNULL(W1.TALK_TIME					,0.00))
,SUM(ISNULL(W1.ACW_TIME						,0.00))
,SUM(ISNULL(W1.HOLD_TIME					,0.00))
,SUM(ISNULL(W1.TRUE_OUTBOUND_TALK_TIME		,0.00))
,W1.STD_TENANT_START_DATE_TIME_KEY

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_1  W1

LEFT JOIN       WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_2   G	 ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
																AND G.FF_AGENT_NAME                  = W1.FF_AGENT_NAME
																AND G.TEAM_NAME						 = W1.TEAM_NAME

WHERE (G.FF_AGENT_NAME						IS NULL AND ISNULL(W1.FF_AGENT_NAME,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY		IS NULL AND ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND (G.TEAM_NAME							IS NULL AND ISNULL(W1.TEAM_NAME,'') <> '' )

GROUP BY
 W1.FF_DATE
,W1.FF_AGENT_NAME
,W1.TEAM_NAME
,W1.SEQNO_ADDED_TIME
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.STD_TENANT_START_DATE_TIME_KEY

ORDER BY
 W1.FF_AGENT_NAME
,W1.TEAM_NAME
,W1.[DATETIME]

--=============================================
--UPDATE PERMANENT OUTBOUND TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND SET
 FF_DATE						= W2.FF_DATE
,FF_INTERVAL_30_MINUTES			= W2.FF_INTERVAL_30_MINUTES
--,FF_AGENT_NAME				= W2.FF_AGENT_NAME
,FF_SKILL_NAME					= W2.FF_SKILL_NAME
,FF_TEAM_NAME					= W2.FF_TEAM_NAME
,FF_CONTACT_ID					= W2.FF_CONTACT_ID
,FF_MASTER_CONTACT_ID			= W2.FF_MASTER_CONTACT_ID
,FF_TALK_TIME					= W2.FF_TALK_TIME
,FF_ACW_TIME					= W2.FF_ACW_TIME
,FF_HOLD_TIME					= W2.FF_HOLD_TIME

,SEQNO_ADDED_TIME				= W2.SEQNO_ADDED_TIME
,SEQNO							= W2.SEQNO
--,FTP_FILE_NAME				= W2.FTP_FILE_NAME

,[DATETIME]						= W2.[DATETIME]
,HOUR_INTERVAL					= W2.HOUR_INTERVAL
,AGENT_NAME						= W2.AGENT_NAME
,SKILL_NAME						= W2.SKILL_NAME
--,TEAM_NAME						= W2.TEAM_NAME
,TALK_TIME						= W2.TALK_TIME
,ACW_TIME						= W2.ACW_TIME
,HOLD_TIME						= W2.HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME		= W2.TRUE_OUTBOUND_TALK_TIME
--,STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
--,WS_ROW_CREATED_TIME			= NULL
,WS_ROW_UPDATED_TIME			= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_2  W2
INNER JOIN      WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND    G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
															AND G.FF_AGENT_NAME						= W2.FF_AGENT_NAME
															AND G.TEAM_NAME							= W2.TEAM_NAME
															AND G.FTP_FILE_NAME						= W2.FTP_FILE_NAME

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
  AND G.TEAM_NAME					   = W2.TEAM_NAME
  AND G.FTP_FILE_NAME				   = W2.FTP_FILE_NAME

--=============================================
--INSERT INTO PERMANENT OUTBOUND IMPORT TABLE: 
--=============================================
INSERT INTO WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND
(FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_CONTACT_ID
,FF_MASTER_CONTACT_ID
,FF_TALK_TIME
,FF_ACW_TIME
,FF_HOLD_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,TALK_TIME
,ACW_TIME
,HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME
,STD_TENANT_START_DATE_TIME_KEY
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W2.FF_DATE
,W2.FF_INTERVAL_30_MINUTES
,W2.FF_AGENT_NAME
,W2.FF_SKILL_NAME
,W2.FF_TEAM_NAME
,W2.FF_CONTACT_ID
,W2.FF_MASTER_CONTACT_ID
,W2.FF_TALK_TIME
,W2.FF_ACW_TIME
,W2.FF_HOLD_TIME

,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME

,W2.DATETIME
,W2.HOUR_INTERVAL
,W2.AGENT_NAME
,W2.SKILL_NAME
,W2.TEAM_NAME
,W2.TALK_TIME
,W2.ACW_TIME
,W2.HOLD_TIME
,W2.TRUE_OUTBOUND_TALK_TIME
,W2.STD_TENANT_START_DATE_TIME_KEY

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_2  W2

LEFT JOIN       WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND    G  ON G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
															AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
															AND G.TEAM_NAME						 = W2.TEAM_NAME
															AND G.FTP_FILE_NAME					 = W2.FTP_FILE_NAME

WHERE (G.FF_AGENT_NAME					IS NULL AND ISNULL(W2.FF_AGENT_NAME,'') <> '' )
  AND (G.TEAM_NAME						IS NULL AND ISNULL(W2.TEAM_NAME, '') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W2.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND (G.FTP_FILE_NAME					IS NULL AND ISNULL(W2.FTP_FILE_NAME,'') <> '' )


--SELECT * FROM WSOL_TB_IMPORTS_GAR_INVOICING_2

--=============================================
--UPDATE INVOICE WORK TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_2 SET
 TRUE_OUTBOUND_TALK_TIME		= W2.TRUE_OUTBOUND_TALK_TIME
,WS_ROW_UPDATED_TIME			= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_2  W2
INNER JOIN      WSOL_TB_IMPORTS_GAR_INVOICING_2			  G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
															 AND G.FF_AGENT_NAME					= W2.FF_AGENT_NAME
															 AND G.TEAM_NAME						= W2.TEAM_NAME

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
  AND G.TEAM_NAME					   = W2.TEAM_NAME

--=============================================
--INSERT INTO INVOICE WORK TABLE:						--NOT REALLY NECESSARY SINCE THERE SHOULDN'T BE ANY OUTBOUND DATA WITHOUT LOGIN DATA
--=============================================
INSERT INTO WSOL_TB_IMPORTS_GAR_INVOICING_2
(FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_UNAVAILABLE_CODE
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_LOGIN_TIME
,FF_AVAILABLE_TIME
,FF_UNAVAILABLE_TIME_MINUS_ACW
,FF_TALK_TIME
,FF_HOLD_TIME
,FF_ACW_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,LOGIN_TIME
,AVAILABLE_TIME
,UNAVAILABLE_SYSTEM_PENDING_TIME
,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,UNAVAILABLE_DEDICATED_RESOURCE_TIME
,UNAVAILABLE_TIME_MINUS_ACW
,TALK_TIME
,HOLD_TIME
,ACW_TIME
,TRUE_OUTBOUND_TALK_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,PAY_GROUP
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W2.FF_DATE
,NULL									--W2.FF_INTERVAL_30_MINUTES
,W2.FF_AGENT_NAME
,NULL									--W2.FF_UNAVAILABLE_CODE
,NULL									--W2.FF_SKILL_NAME
,W2.FF_TEAM_NAME
,NULL									--W2.FF_LOGIN_TIME
,NULL									--W2.FF_AVAILABLE_TIME
,NULL									--W2.FF_UNAVAILABLE_TIME_MINUS_ACW
,NULL									--W2.FF_TALK_TIME
,NULL									--W2.FF_HOLD_TIME
,NULL									--W2.FF_ACW_TIME

,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME

,W2.DATETIME
,W2.HOUR_INTERVAL
,W2.AGENT_NAME
,W2.SKILL_NAME
,W2.TEAM_NAME
,NULL									--W2.LOGIN_TIME
,NULL									--W2.AVAILABLE_TIME
,NULL									--W2.UNAVAILABLE_SYSTEM_PENDING_TIME
,NULL									--W2.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,NULL									--W2.UNAVAILABLE_DEDICATED_RESOURCE_TIME
,NULL									--W2.UNAVAILABLE_TIME_MINUS_ACW
,NULL									--W2.TALK_TIME
,NULL									--W2.HOLD_TIME
,NULL									--W2.ACW_TIME
,W2.TRUE_OUTBOUND_TALK_TIME
,NULL									--W2.TOTAL_TALK
,NULL									--W2.CPROD
,NULL									--W2.MING
,NULL									--W2.AUT2
,NULL									--W2.EMAIL
,NULL									--W2.ID_EXT
,NULL									--W2.SCHEDULER_ACL_NAME
,W2.STD_TENANT_START_DATE_TIME_KEY
,NULL									--W2.CAL_DATE
,NULL									--W2.TENANT_KEY
,NULL									--W2.AIR_DAY_TYPE
,NULL									--W2.AIR_ACW_FONT_COLOR
,NULL									--W2.MIN_GUARANTEE_RATE
,NULL									--W2.MIN_GUARANTEE_TYPE
,NULL									--W2.AUTHORIZED_TO_INVOICE_TYPE
,NULL									--W2.HAS_HOLIDAYS
,NULL									--W2.INCLUDE_IN_CAS
,NULL									--W2.READY_FOR_XML
,NULL									--W2.SHOW_ID_EXTS
,NULL									--W2.INVOICE_ID
,NULL									--W2.RESOURCE_NAME
,NULL									--W2.AIRITKDUR
,NULL									--W2.AIRIACDUR
,NULL									--W2.PAY_GROUP

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND_2  W2

LEFT JOIN       WSOL_TB_IMPORTS_GAR_INVOICING_2  G   ON G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
													AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
													AND G.TEAM_NAME						 = W2.TEAM_NAME

WHERE (G.FF_AGENT_NAME					IS NULL AND ISNULL(W2.FF_AGENT_NAME,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W2.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND (G.TEAM_NAME						IS NULL AND ISNULL(W2.TEAM_NAME,'') <> '' )

--SELECT * FROM WSOL_TB_IMPORTS_GAR_INVOICING_BAD

--========================================================================
--CAPTURE RECORDS WITH ZERO LOGIN TIME:
--========================================================================
INSERT INTO WSOL_TB_IMPORTS_GAR_INVOICING_BAD_2
(BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_UNAVAILABLE_CODE
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_LOGIN_TIME
,FF_AVAILABLE_TIME
,FF_UNAVAILABLE_TIME_MINUS_ACW
,FF_TALK_TIME
,FF_HOLD_TIME
,FF_ACW_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,LOGIN_TIME
,AVAILABLE_TIME
,UNAVAILABLE_SYSTEM_PENDING_TIME
,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,UNAVAILABLE_DEDICATED_RESOURCE_TIME
,UNAVAILABLE_TIME_MINUS_ACW
,TALK_TIME
,HOLD_TIME
,ACW_TIME
,TRUE_OUTBOUND_TALK_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,PAY_GROUP
,ROW_CREATED_TIME
,ROW_UPDATED_TIME)
SELECT
 'NLT'                  --BAD_IMPORTS_CODE		--'No Login Time'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W2.FF_DATE
,W2.FF_INTERVAL_30_MINUTES
,W2.FF_AGENT_NAME
,W2.FF_UNAVAILABLE_CODE
,W2.FF_SKILL_NAME
,W2.FF_TEAM_NAME
,W2.FF_LOGIN_TIME
,W2.FF_AVAILABLE_TIME
,W2.FF_UNAVAILABLE_TIME_MINUS_ACW
,W2.FF_TALK_TIME
,W2.FF_HOLD_TIME
,W2.FF_ACW_TIME
,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME
,W2.[DATETIME]
,W2.HOUR_INTERVAL
,W2.AGENT_NAME
,W2.SKILL_NAME
,W2.TEAM_NAME
,W2.LOGIN_TIME
,W2.AVAILABLE_TIME
,W2.UNAVAILABLE_SYSTEM_PENDING_TIME
,W2.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,W2.UNAVAILABLE_DEDICATED_RESOURCE_TIME
,W2.UNAVAILABLE_TIME_MINUS_ACW
,W2.TALK_TIME
,W2.HOLD_TIME
,W2.ACW_TIME
,W2.TRUE_OUTBOUND_TALK_TIME
,W2.TOTAL_TALK
,W2.CPROD
,W2.MING
,W2.AUT2
,W2.EMAIL
,W2.ID_EXT
,W2.SCHEDULER_ACL_NAME
,W2.STD_TENANT_START_DATE_TIME_KEY
,W2.CAL_DATE
,W2.TENANT_KEY
,W2.AIR_DAY_TYPE
,W2.AIR_ACW_FONT_COLOR
,W2.MIN_GUARANTEE_RATE
,W2.MIN_GUARANTEE_TYPE
,W2.AUTHORIZED_TO_INVOICE_TYPE
,W2.HAS_HOLIDAYS
,W2.INCLUDE_IN_CAS
,W2.READY_FOR_XML
,W2.SHOW_ID_EXTS
,W2.INVOICE_ID
,W2.RESOURCE_NAME
,W2.AIRITKDUR
,W2.AIRIACDUR
,W2.PAY_GROUP
,W2.WS_ROW_CREATED_TIME
,W2.WS_ROW_UPDATED_TIME

--SELECT *
FROM           WSOL_TB_IMPORTS_GAR_INVOICING_2    W2
WHERE ISNULL(W2.LOGIN_TIME,0.00) = 0.00

--========================================================================
--DELETE RECORDS WITH ZERO LOGIN TIME:
--========================================================================
DELETE FROM WSOL_TB_IMPORTS_GAR_INVOICING_2
WHERE ISNULL(LOGIN_TIME,0.00) = 0.00
--========================================================================

--========================================================================
--UPDATE TOTAL TALK VALUE
--========================================================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_2 SET
 TOTAL_TALK = TALK_TIME + TRUE_OUTBOUND_TALK_TIME

--========================================================================
--UPDATE CPROD TIME (AVAILABLE + TOTAL TALK)
--========================================================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_2 SET
 CPROD = AVAILABLE_TIME + TOTAL_TALK


--===========================================================================================================
--CORRECT RECORDS WHERE CPROD EXCEEDS LOGIN TIME
--===========================================================================================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_2 SET
 TALK_TIME = LOGIN_TIME - AVAILABLE_TIME - UNAVAILABLE_TIME_MINUS_ACW - ACW_TIME - TRUE_OUTBOUND_TALK_TIME
 WHERE CPROD > LOGIN_TIME

 UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_2 SET
  TOTAL_TALK = TALK_TIME + TRUE_OUTBOUND_TALK_TIME

  UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_2 SET
 CPROD = AVAILABLE_TIME + TOTAL_TALK


--===============================================
-- CALCULATE MINIMUM GUARANTEE VALUE
--===============================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_2 SET
 MING = CASE WHEN ISNULL(ID_EXT,'') <> '' THEN 
				(40.00 / 60.00) * CPROD			 
			 ELSE 0.00 END

--===============================================
--CALCULATE AUTHORIZED TO INVOICE VALUE
--===============================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING_2 SET
 AUT2 = CASE WHEN ISNULL(ID_EXT,'') <> '' THEN 
				 CASE WHEN MING > (TOTAL_TALK) THEN MING 
					  ELSE        (TOTAL_TALK) END
			 ELSE 0.00 END

--=============================================
--UPDATE PERMANENT TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_GAR_INVOICING SET
 FF_DATE								= W2.FF_DATE
,FF_INTERVAL_30_MINUTES					= W2.FF_INTERVAL_30_MINUTES
--,FF_AGENT_NAME						= W2.FF_AGENT_NAME
,FF_UNAVAILABLE_CODE					= W2.FF_UNAVAILABLE_CODE
,FF_SKILL_NAME							= W2.FF_SKILL_NAME
,FF_TEAM_NAME							= W2.FF_TEAM_NAME
,FF_LOGIN_TIME							= W2.FF_LOGIN_TIME
,FF_AVAILABLE_TIME						= W2.FF_AVAILABLE_TIME
,FF_UNAVAILABLE_TIME_MINUS_ACW			= W2.FF_UNAVAILABLE_TIME_MINUS_ACW
,FF_TALK_TIME							= W2.FF_TALK_TIME
,FF_HOLD_TIME							= W2.FF_HOLD_TIME
,FF_ACW_TIME							= W2.FF_ACW_TIME

,SEQNO_ADDED_TIME						= W2.SEQNO_ADDED_TIME
,SEQNO									= W2.SEQNO
--,FTP_FILE_NAME						= W2.FTP_FILE_NAME

,[DATETIME]								= W2.[DATETIME]
,HOUR_INTERVAL							= W2.HOUR_INTERVAL
,AGENT_NAME								= W2.AGENT_NAME
,SKILL_NAME								= W2.SKILL_NAME
,TEAM_NAME								= W2.TEAM_NAME
,LOGIN_TIME								= W2.LOGIN_TIME
,AVAILABLE_TIME							= W2.AVAILABLE_TIME
,UNAVAILABLE_SYSTEM_PENDING_TIME		= W2.UNAVAILABLE_SYSTEM_PENDING_TIME
,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME	= W2.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,UNAVAILABLE_DEDICATED_RESOURCE_TIME	= W2.UNAVAILABLE_DEDICATED_RESOURCE_TIME
,UNAVAILABLE_TIME_MINUS_ACW				= W2.UNAVAILABLE_TIME_MINUS_ACW
,TALK_TIME								= W2.TALK_TIME
,HOLD_TIME								= W2.HOLD_TIME
,ACW_TIME								= W2.ACW_TIME
,TRUE_OUTBOUND_TALK_TIME				= W2.TRUE_OUTBOUND_TALK_TIME
,TOTAL_TALK								= W2.TOTAL_TALK
,CPROD									= W2.CPROD
,MING									= W2.MING
,AUT2									= W2.AUT2
,EMAIL									= W2.EMAIL
--,ID_EXT								= W2.ID_EXT
,SCHEDULER_ACL_NAME						= W2.SCHEDULER_ACL_NAME
--,STD_TENANT_START_DATE_TIME_KEY		= W2.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE								= W2.CAL_DATE
,TENANT_KEY								= W2.TENANT_KEY
,AIR_DAY_TYPE							= W2.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR						= W2.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE						= W2.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE						= W2.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE				= W2.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS							= W2.HAS_HOLIDAYS
,INCLUDE_IN_CAS							= W2.INCLUDE_IN_CAS
,READY_FOR_XML							= W2.READY_FOR_XML
,SHOW_ID_EXTS							= W2.SHOW_ID_EXTS
,INVOICE_ID								= W2.INVOICE_ID
,RESOURCE_NAME							= W2.RESOURCE_NAME
,AIRITKDUR								= W2.AIRITKDUR
,AIRIACDUR								= W2.AIRIACDUR
,PAY_GROUP								= W2.PAY_GROUP
--,WS_ROW_CREATED_TIME					= NULL
,WS_ROW_UPDATED_TIME					= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_GAR_INVOICING_2  W2
INNER JOIN      WSOL_TB_IMPORTS_GAR_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
													AND G.FF_AGENT_NAME						= W2.FF_AGENT_NAME
													AND G.FTP_FILE_NAME						= W2.FTP_FILE_NAME
													AND G.ID_EXT							= W2.ID_EXT

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
  AND G.FTP_FILE_NAME				   = W2.FTP_FILE_NAME
  AND G.ID_EXT						   = W2.ID_EXT

--=============================================
--INSERT INTO PERMANENT IMPORT TABLE: 
--=============================================
INSERT INTO WSOL_TB_IMPORTS_GAR_INVOICING(
FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_UNAVAILABLE_CODE
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_LOGIN_TIME
,FF_AVAILABLE_TIME
,FF_UNAVAILABLE_TIME_MINUS_ACW
,FF_TALK_TIME
,FF_HOLD_TIME
,FF_ACW_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,LOGIN_TIME
,AVAILABLE_TIME
,UNAVAILABLE_SYSTEM_PENDING_TIME
,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,UNAVAILABLE_DEDICATED_RESOURCE_TIME
,UNAVAILABLE_TIME_MINUS_ACW
,TALK_TIME
,HOLD_TIME
,ACW_TIME
,TRUE_OUTBOUND_TALK_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,PAY_GROUP
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W2.FF_DATE
,W2.FF_INTERVAL_30_MINUTES
,W2.FF_AGENT_NAME
,W2.FF_UNAVAILABLE_CODE
,W2.FF_SKILL_NAME
,W2.FF_TEAM_NAME
,W2.FF_LOGIN_TIME
,W2.FF_AVAILABLE_TIME
,W2.FF_UNAVAILABLE_TIME_MINUS_ACW
,W2.FF_TALK_TIME
,W2.FF_HOLD_TIME
,W2.FF_ACW_TIME

,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME

,W2.DATETIME
,W2.HOUR_INTERVAL
,W2.AGENT_NAME
,W2.SKILL_NAME
,W2.TEAM_NAME
,W2.LOGIN_TIME
,W2.AVAILABLE_TIME
,W2.UNAVAILABLE_SYSTEM_PENDING_TIME
,W2.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,W2.UNAVAILABLE_DEDICATED_RESOURCE_TIME
,W2.UNAVAILABLE_TIME_MINUS_ACW
,W2.TALK_TIME
,W2.HOLD_TIME
,W2.ACW_TIME
,W2.TRUE_OUTBOUND_TALK_TIME
,W2.TOTAL_TALK
,W2.CPROD
,W2.MING
,W2.AUT2
,W2.EMAIL
,W2.ID_EXT
,W2.SCHEDULER_ACL_NAME
,W2.STD_TENANT_START_DATE_TIME_KEY
,W2.CAL_DATE
,W2.TENANT_KEY
,W2.AIR_DAY_TYPE
,W2.AIR_ACW_FONT_COLOR
,W2.MIN_GUARANTEE_RATE
,W2.MIN_GUARANTEE_TYPE
,W2.AUTHORIZED_TO_INVOICE_TYPE
,W2.HAS_HOLIDAYS
,W2.INCLUDE_IN_CAS
,W2.READY_FOR_XML
,W2.SHOW_ID_EXTS
,W2.INVOICE_ID
,W2.RESOURCE_NAME
,W2.AIRITKDUR
,W2.AIRIACDUR
,W2.PAY_GROUP

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_GAR_INVOICING_2  W2

LEFT JOIN       WSOL_TB_IMPORTS_GAR_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
													AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
													AND G.FTP_FILE_NAME					 = W2.FTP_FILE_NAME
													AND G.ID_EXT						 = W2.ID_EXT

WHERE (G.FF_AGENT_NAME					IS NULL AND ISNULL(W2.FF_AGENT_NAME,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W2.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND (G.FTP_FILE_NAME					IS NULL AND ISNULL(W2.FTP_FILE_NAME,'') <> '' )
  AND (G.ID_EXT							IS NULL AND ISNULL(W2.ID_EXT,'') <> '' )


--==================================
SET DATEFIRST 1  -- = Monday
--==================================

--=============================================================================================
--Need when populating tmp DEW table for insert into _AIA table.
--=============================================================================================
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME

SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN([DATETIME]) FROM WSOL_TB_IMPORTS_GAR_INVOICING_2))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_GAR_INVOICING_2))  
--=============================================================================================

--===========================
IF OBJECT_ID('TEMPDB..#DT_EASY_WEEKS') IS NOT NULL BEGIN
   DROP TABLE #DT_EASY_WEEKS
END
CREATE TABLE #DT_EASY_WEEKS
(CAL_DATE_STRING      VARCHAR(10)
,CAL_WEEK_START_DATE  DATETIME
,CAL_WEEK_END_DATE    DATETIME
,PAY_CYCLE_CLOSURE_DATE DATETIME
)
INSERT INTO #DT_EASY_WEEKS
SELECT
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
FROM DATE_TIME DT
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
--WHERE DT.CAL_DATE >= CAST('06/01/2011' AS DATETIME) AND DT.CAL_DATE <  CAST('06/20/2011' AS DATETIME)
GROUP BY 
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
--===========================
UPDATE #DT_EASY_WEEKS SET CAL_WEEK_END_DATE = DATEADD(DD,6,CAL_WEEK_START_DATE)
--110713: WAS: 06/26/2011
UPDATE #DT_EASY_WEEKS SET
 PAY_CYCLE_CLOSURE_DATE = (CASE WHEN (DATEDIFF(DD,CAST('09/29/2013' AS DATETIME),CAL_WEEK_END_DATE) % 14) = 0 THEN
									CAL_WEEK_END_DATE
								ELSE
									DATEADD(DD,7,CAL_WEEK_END_DATE)
								END)
--SELECT * FROM #DT_EASY_WEEKS ORDER BY CAL_DATE_STRING

--==================================--Currently same structure as:  [YZ_TB_AGENT_INVOICE_AUTOMATION]
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_GAR_UV_ANT_AIA') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_GAR_UV_ANT_AIA
END
CREATE TABLE #WSOL_TB_IMPORTS_GAR_UV_ANT_AIA   --Currently same structure as:  [YZ_TB_AGENT_INVOICE_AUTOMATION]
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](50) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[PAY_GROUP] [int] NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #WSOL_TB_IMPORTS_GAR_UV_ANT_AIA
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.FF_AGENT_NAME --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING							--[DATE]             
,DT.LABEL_HH24 + ':00'						--HOD_INTERVAL

,AIA.LOGIN_TIME								--AU_DK_LOGGED_IN_DURATION
,AIA.AVAILABLE_TIME							--AU_DK_AVAILABLE_DURATION

,AIA.TOTAL_TALK								--AIA.TALK_TIME + AIA.TRUE_OUTBOUND_TALK_TIME    --AU_DK_TALK_DURATION
,AIA.TALK_TIME								--AU_DK_IB_TALK_DURATION
,AIA.TRUE_OUTBOUND_TALK_TIME				--AU_DK_OB_TALK_DURATION

,AIA.ACW_TIME								--AU_DK_CONVENTIONAL_ACW
,AIA.UNAVAILABLE_TIME_MINUS_ACW				--AU_DK_NR_DURATION
,0	--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0	--AU_DK_ADJUSTED_NR_DURATION
,AIA.CPROD									--AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.CPROD									--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS  

,0	--AU_DK_XFER_COUNT
,0  --AU_DK_HOLD_COUNT
,0  --AU_DK_CONFERENCE_COUNT
,0  --AU_DK_CONSULT_COUNT
,0  --AU_DK_PUP_COUNT

,0	--AU_DK_OFFERED_COUNT
,0	--AU_DK_HANDLED_COUNT
,0	--AU_DK_IB_HANDLE_COUNT
,0	--AU_DK_OB_HANDLE_COUNT
																
,0  --AU_DK_RONA_COUNT
,0  --AU_DK_AWR_COUNT

,AIA.MING  --MINIMUM_GUARANTEE
,AIA.AUT2  --AUTHORIZED_TO_INVOICE

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID  --CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID 
,AIA.RESOURCE_NAME
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.PAY_GROUP
,dbo.getdate()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL       --	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
FROM            WSOL_TB_IMPORTS_GAR_INVOICING_2            AIA 
--Only want to include valid id exts in _AIA table -- id exts that have ming and aut2 formulas and static defaults setup...:
INNER JOIN      WSOL_TB_IMPORTS_GAR_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      WSOL_TB_IMPORTS_GAR_SD_INVOICE_GROUPS      CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME								   DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS							   DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')

--=====================================
--UPDATE WSOL_TB_...UV_ANT_AIA TABLE:
--=====================================  --  SELECT TOP 100 * FROM WSOL_TB_IMPORTS_GAR_UV_ANT_AIA
UPDATE WSOL_TB_IMPORTS_GAR_UV_ANT_AIA SET
 [PLATFORM]							= W1.[PLATFORM]
,[STATUS]							= W1.[STATUS]
--,INVOICE_MAP_KEY					= W1.INVOICE_MAP_KEY
,FIELD_NAME							= W1.FIELD_NAME
,SCHEDULER_PROJECT_ID				= W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME					= W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION					= W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID			= W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME			= W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID				= W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME			= W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID			= W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID	= W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID		= W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY			= W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID					= W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID					= W1.HOLIDAY_INVOICE_ID
,HOLIDAY							= W1.HOLIDAY
,FILE_FORMAT_OF_PUSH				= W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID		= W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL							= W1.NEW_ACL
,CURRENT_CATS						= W1.CURRENT_CATS
,CATS_ID							= W1.CATS_ID
,PATS_ID							= W1.PATS_ID
,SMART_ELIGIBLE						= W1.SMART_ELIGIBLE
,SMART_TIER_1						= W1.SMART_TIER_1
,SMART_TIER_2						= W1.SMART_TIER_2
,SMART_TIER_3						= W1.SMART_TIER_3
,INTERVAL							= W1.INTERVAL
,[DATE]								= W1.[DATE]
,HOD_INTERVAL						= W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION			= W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION			= W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION				= W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION				= W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION				= W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW				= W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION					= W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT					= W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT					= W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT				= W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT				= W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT					= W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT				= W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT				= W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT				= W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT				= W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT					= W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT					= W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE					= W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE				= W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE					= W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE				= W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
--,FTP_FILE_NAME					= W1.FTP_FILE_NAME
,EMAIL								= W1.EMAIL

--,STD_TENANT_START_DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W1.CAL_DATE
,TENANT_KEY							= W1.TENANT_KEY
,AIR_DAY_TYPE						= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE					= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE					= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W1.INCLUDE_IN_CAS
,READY_FOR_XML						= W1.READY_FOR_XML
,SHOW_ID_EXTS						= W1.SHOW_ID_EXTS
,INVOICE_ID							= W1.INVOICE_ID
,RESOURCE_NAME						= W1.RESOURCE_NAME

,PAY_GROUP							= W1.PAY_GROUP
,AIRITKDUR							= W1.AIRITKDUR
,AIRIACDUR							= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

FROM            #WSOL_TB_IMPORTS_GAR_UV_ANT_AIA   W1

INNER JOIN      WSOL_TB_IMPORTS_GAR_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													 AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
													 AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY
													 AND UV.FTP_FILE_NAME				   = W1.FTP_FILE_NAME

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )
  AND ( UV.FTP_FILE_NAME				  = W1.FTP_FILE_NAME )

--================================================
--INSERT TMP TABLE FIELDS INTO WSOL_TB_... TABLE:
--================================================
INSERT INTO [WSOL_TB_IMPORTS_GAR_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.PAY_GROUP
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #WSOL_TB_IMPORTS_GAR_UV_ANT_AIA   AIA
LEFT JOIN       WSOL_TB_IMPORTS_GAR_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
													 AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
													 AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY
													 AND UV.FTP_FILE_NAME				   = AIA.FTP_FILE_NAME

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )
  AND ( UV.FTP_FILE_NAME				  IS NULL AND ISNULL(AIA.FTP_FILE_NAME,'') <> '' )


--==========================================================================================================================
--INSERT DATA INTO GLOBAL WORK TABLE FOR WA/SA
--==========================================================================================================================
--SELECT * FROM WSOL_TB_IMPORTS_GAR_INVOICING_2
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_GAR_WORK_HOURS_ALL') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_GAR_WORK_HOURS_ALL
END
CREATE TABLE #WSOL_TB_IMPORTS_GAR_WORK_HOURS_ALL
(	[TENANT_NAME] [varchar] (100) NOT NULL,
	[OFFICIAL_ACL_NAME] [varchar] (200) NOT NULL,
	[AGENT_NAME] [varchar] (200) NULL,
	[FIELD_MAP_ID] [varchar] (100) NOT NULL,
	[EMAIL] [varchar] (100) NULL,
	[LOGGED_IN_HOURS] [decimal] (10,2) NULL,
	[PRODUCTIVE_HOURS] [decimal] (10,2) NULL,
	[DATETIME] [datetime] NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[FTP_FILE_NAME] [varchar] (100) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL
)

INSERT INTO #WSOL_TB_IMPORTS_GAR_WORK_HOURS_ALL
SELECT
 'GAR'
,WT.OFFICIAL_ACL_NAME
,WT.AGENT_NAME
,WT.FIELD_MAP_ID
,WT.EMAIL
,WT.LOGGED_IN_HOURS
,WT.PRODUCTIVE_HOURS
,WT.DATETIME
,WT.STD_TENANT_START_DATE_TIME_KEY
,WT.FTP_FILE_NAME
,WT.WS_ROW_CREATED_TIME
FROM
(	SELECT
	 --TENANT_NAME
	 W1.SCHEDULER_ACL_NAME										AS OFFICIAL_ACL_NAME
	,W1.RESOURCE_NAME											AS AGENT_NAME
	,W1.FF_AGENT_NAME											AS FIELD_MAP_ID
	,ISNULL(W1.EMAIL,'')										AS [EMAIL]
	,(SUM(W1.LOGIN_TIME)/3600.00)								AS LOGGED_IN_HOURS
	,(SUM(W1.CPROD)/3600.00)									AS PRODUCTIVE_HOURS
	,CAST(CONVERT(VARCHAR(10), W1.[DATETIME], 111) AS DATETIME)	AS [DATETIME]
	,DT.DATE_TIME_DAY_KEY										AS STD_TENANT_START_DATE_TIME_KEY
	,W1.FTP_FILE_NAME											AS FTP_FILE_NAME
	,dbo.getdate()													AS WS_ROW_CREATED_TIME
	
	FROM WSOL_TB_IMPORTS_GAR_INVOICING_2	W1
	INNER JOIN DATE_TIME					DT		ON DT.DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY

	GROUP BY
	 W1.SCHEDULER_ACL_NAME
	,W1.RESOURCE_NAME
	,W1.FF_AGENT_NAME
	,W1.EMAIL
	,CAST(CONVERT(VARCHAR(10), W1.[DATETIME], 111) AS DATETIME)
	,DT.DATE_TIME_DAY_KEY
	,W1.FTP_FILE_NAME
) WT

UPDATE WSOL_TB_IMPORTS_WORK_HOURS_ALL SET
 TENANT_NAME					= WTT.TENANT_NAME
--,OFFICIAL_ACL_NAME			= WTT.OFFICIAL_ACL_NAME
,AGENT_NAME						= WTT.AGENT_NAME
--,FIELD_MAP_ID					= WTT.FIELD_MAP_ID
,[EMAIL]						= WTT.EMAIL
,LOGGED_IN_HOURS				= WTT.LOGGED_IN_HOURS
,PRODUCTIVE_HOURS				= WTT.PRODUCTIVE_HOURS
,[DATETIME]						= WTT.DATETIME
--,STD_TENANT_START_DATE_TIME_KEY	= WTT.STD_TENANT_START_DATE_TIME_KEY
,FTP_FILE_NAME					= WTT.FTP_FILE_NAME
--,WS_ROW_CREATED_TIME			= dbo.getdate()
,WS_ROW_UPDATED_TIME			= dbo.getdate()

FROM #WSOL_TB_IMPORTS_GAR_WORK_HOURS_ALL WTT

INNER JOIN WSOL_TB_IMPORTS_WORK_HOURS_ALL WHR ON WHR.STD_TENANT_START_DATE_TIME_KEY = WTT.STD_TENANT_START_DATE_TIME_KEY
											 AND WHR.FIELD_MAP_ID					= WTT.FIELD_MAP_ID
											 AND WHR.OFFICIAL_ACL_NAME				= WTT.OFFICIAL_ACL_NAME

WHERE WHR.STD_TENANT_START_DATE_TIME_KEY	= WTT.STD_TENANT_START_DATE_TIME_KEY
  AND WHR.FIELD_MAP_ID						= WTT.FIELD_MAP_ID
  AND WHR.OFFICIAL_ACL_NAME					= WTT.OFFICIAL_ACL_NAME

INSERT INTO WSOL_TB_IMPORTS_WORK_HOURS_ALL
SELECT
 WTI.TENANT_NAME
,WTI.OFFICIAL_ACL_NAME
,WTI.AGENT_NAME
,WTI.FIELD_MAP_ID
,WTI.EMAIL
,WTI.LOGGED_IN_HOURS
,WTI.PRODUCTIVE_HOURS
,WTI.DATETIME
,WTI.STD_TENANT_START_DATE_TIME_KEY
,WTI.FTP_FILE_NAME
,WTI.WS_ROW_CREATED_TIME
,NULL
FROM #WSOL_TB_IMPORTS_GAR_WORK_HOURS_ALL	WTI

LEFT JOIN WSOL_TB_IMPORTS_WORK_HOURS_ALL	WRK  ON WRK.STD_TENANT_START_DATE_TIME_KEY	= WTI.STD_TENANT_START_DATE_TIME_KEY
												AND WRK.FIELD_MAP_ID					= WTI.FIELD_MAP_ID
												AND WRK.OFFICIAL_ACL_NAME				= WTI.OFFICIAL_ACL_NAME

WHERE ( WRK.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(WTI.STD_TENANT_START_DATE_TIME_KEY,0 ) <> 0 )
  AND ( WRK.FIELD_MAP_ID					IS NULL AND ISNULL(WTI.FIELD_MAP_ID,'') <> '' )
  AND ( WRK.OFFICIAL_ACL_NAME				IS NULL AND ISNULL(WTI.OFFICIAL_ACL_NAME,'') <> '' )

--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_GAR_Summary]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_GAR_Summary]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_GAR_Summary] '08/16/2015','08/31/2015','','B'
--  EXECUTE [dbo].[uspIMPORTS_GAR_Summary] '08/16/2015','08/31/2015','','B'

--===========================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--===========================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

			IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly 
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_GAR_Summary') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_GAR_Summary
END
CREATE TABLE #IMPORTS_GAR_Summary
(FILEDATETIME			VARCHAR(20)
,FTP_FILE_NAME			VARCHAR(100)
,CST_ROW_CREATED_TIME	DATETIME
,RCD_CNT				INT
,INT_CNT				INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_GAR_Summary
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')       --AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') --AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')             --AS RCD_CNT
	,ISNULL(UA.INT_CNT,'')			   --AS INT_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		,COUNT(DISTINCT C.HOUR_INTERVAL) AS INT_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_GAR_INVOICING  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
		,C.WS_ROW_CREATED_TIME
	) UA

--END  --IF @PSW...


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT
,INT_CNT      
,'White' AS BG_COLOR

FROM #IMPORTS_GAR_Summary 

ORDER BY          
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT 
,INT_CNT     


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_GAR_Summary_OUTBOUND]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_GAR_Summary_OUTBOUND]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_GAR_Summary_OUTBOUND] '01/01/2016','01/15/2016','','B'
--  EXECUTE [dbo].[uspIMPORTS_GAR_Summary_OUTBOUND] '01/01/2016','01/15/2016','','B'

--===========================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--===========================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

			IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly 
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_GAR_Summary_OUTBOUND') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_GAR_Summary_OUTBOUND
END
CREATE TABLE #IMPORTS_GAR_Summary_OUTBOUND
(FILEDATETIME			VARCHAR(20)
,FTP_FILE_NAME			VARCHAR(100)
,CST_ROW_CREATED_TIME	DATETIME
,RCD_CNT				INT
,INT_CNT				INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_GAR_Summary_OUTBOUND
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')       --AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') --AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')             --AS RCD_CNT
	,ISNULL(UA.INT_CNT,'')			   --AS INT_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		,COUNT(DISTINCT C.HOUR_INTERVAL) AS INT_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_GAR_INVOICING_OUTBOUND  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
		,C.WS_ROW_CREATED_TIME
	) UA

--END  --IF @PSW...


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT     
,INT_CNT 
,'White' AS BG_COLOR

FROM #IMPORTS_GAR_Summary_OUTBOUND 

ORDER BY          
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT 
,INT_CNT     


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_GAR_UNRECOGNIZED_UNAVAILABLE_CODES]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_GAR_UNRECOGNIZED_UNAVAILABLE_CODES]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHICH UNAVAILABLE CODE VALUES EXIST IN THE iNContact REPORTS, BUT ARE NOT CURRENTLY RECOGNIZED DURING IMPORT.

--THIS USP IS DATA SOURCE FOR SRS GRID ON "ACTIVITY IMPORTS" STATUS REPORT!!!

--  EXECUTE [dbo].[uspIMPORTS_GAR_UNRECOGNIZED_UNAVAILABLE_CODES] '12/01/2017','12/15/2017','4','B'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

		--WHEN RAN ON FRI, 01/04/13, THE RESULTS RETURNS:  2012.12.21 - 2013.01.03    --FRI-THU   CORRECT!!!
		--SELECT CONVERT(VARCHAR(10),(DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 14),102) + ' - ' +
		--       CONVERT(VARCHAR(10),(DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 1),102)
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--SELECT * FROM WSOL_TB_IMPORTS_GAR_INVOICING_0_AUDIT


IF OBJECT_ID('TEMPDB..#IMPORTS_GAR_UNRECOGNIZED_UNAVAILABLE_CODES') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_GAR_UNRECOGNIZED_UNAVAILABLE_CODES
END
CREATE TABLE #IMPORTS_GAR_UNRECOGNIZED_UNAVAILABLE_CODES
(FILEDATETIME          VARCHAR(50)
,FTP_FILE_NAME         VARCHAR(100)
,WS_ROW_CREATED_TIME   DATETIME
,UNAVAILABLE_CODE      VARCHAR(500)
,RCD_CNT               INT
)
INSERT INTO #IMPORTS_GAR_UNRECOGNIZED_UNAVAILABLE_CODES
SELECT
 B.FF_DATE
,REPLACE(B.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME
,B.SEQNO_ADDED_TIME					AS WS_ROW_CREATED_TIME
,B.FF_UNAVAILABLE_CODE				AS UNAVAILABLE_CODE
,COUNT(*)						  --AS RCD_CNT
--SELECT *
FROM            WSOL_TB_IMPORTS_GAR_INVOICING_0_AUDIT	B
WHERE CAST(REPLACE(B.FF_DATE,'Date','1900/01/01') AS DATETIME) >= @DTM_BEG AND CAST(REPLACE(B.FF_DATE,'Date','1900/01/01') AS DATETIME) <  @DTM_END
  AND ISNULL(B.FF_UNAVAILABLE_CODE,'') NOT IN ( ''
											   ,'Unavailable Code'
											   ,'Wrap'
											   ,'Break'
											   ,'Lunch'
											   ,'Dedicated Resource'
											   ,'HeldPartyAbandoned'
											   ,'Refused'
											   ,'InboundPending'
											   ,'OutboundPending'
											   ,'ConsultPending'
											   ,'TransferPending'
											   ,'CallbackPending'
											   ,'PromisePending'
											  )
  --AND (ISNULL(B.FF_AGENT_NAME,'') NOT IN ('Joshua Miller','Lynne Rochel','Jessica Sharp','Karen Ritter','Emily Beauchamp'))	-- FILTER OUT WSOL EMPLOYEES
GROUP BY
 B.FF_DATE
,REPLACE(B.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME
,B.SEQNO_ADDED_TIME					--AS WS_ROW_CREATED_TIME
,B.FF_UNAVAILABLE_CODE				--AS UNAVAILABLE_CODE

--==================================
UPDATE #IMPORTS_GAR_UNRECOGNIZED_UNAVAILABLE_CODES SET
 FILEDATETIME = REPLACE(CONVERT(VARCHAR(10),ISNULL(FILEDATETIME,'1/1/1900'),102),'/',' . ')


--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_GAR_UNRECOGNIZED_UNAVAILABLE_CODES)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_GAR_UNRECOGNIZED_UNAVAILABLE_CODES
	SELECT
	 ''				--FILEDATETIME
	,''				--FTP_FILE_NAME
	,dbo.GETDATE()  --WS_ROW_CREATED_TIME
	,''				--UNAVAILABLE_CODE
	,0				--RCD_CNT
END
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''
	
	IF @RCD_CNT = 0 BEGIN
		SET @MSG1 = @MSG1 + 'There are NO UNRECOGNIZED UNAVAILABLE CODE records!'
	END
	ELSE BEGIN
		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
			SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.GETDATE(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		END
		SET @MSG1 = @MSG1 + 'The list below contains UNAVAILABE CODE values for agents that are associated with activity for the report date range, but ' + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + 'these UNAVAILABLE CODES have not been identified as productive or non-productive. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

		SET @MSG1 = @MSG1 + 'UNAVAILABLE CODES that are on this list will not be included as part of agent invoice statistics (for activity dates shown), unless a special request is made and received '
		SET @MSG1 = @MSG1 + 'with plenty of time before the automated invoice process begins.  The analyst will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10)
	END

END

--==================================
--RETURN DATA:
--==================================
SELECT 
*
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_GAR_UNRECOGNIZED_UNAVAILABLE_CODES

ORDER BY
 FILEDATETIME
,UNAVAILABLE_CODE



--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_HUMACH_AGENT_INVOICING_REPORTS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_HUMACH_AGENT_INVOICING_REPORTS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@CUSTOMER_ID		 VARCHAR(150) --
,@INVOICE_GROUP      VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300) --Hid. Def=' '
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'  MANual,SUBscription
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='INV'
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='INV'  
AS
SET NOCOUNT ON    

--  EXECUTE [dbo].[uspIMPORTS_HUMACH_AGENT_INVOICING_REPORTS] '03/16/2016','03/31/2016','0','0','0','0','0','HR','Y','SS','NM','Y','4','MAN','INV','INV'

--  @TIME_INTERVAL:  Can only show invoicing report at hour level or higher !!!

--  Durations in data feed are in seconds.

--  SELECT * FROM WSOL_TB_IMPORTS_HUMACH_SD_INVOICE_GROUPS
--  SELECT * FROM WSOL_TB_IMPORTS_HUMACH_UV_ANT_AIA
    
--TMP:  FOR RUNNING SQL JOBS FOR PREVIOUS DAYS:  
--SET @DATE_BEG = '05/23/2014'
--SET @DATE_END = '06/05/2014'

--==================================--SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) 
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) -- + 1
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
END
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

DECLARE
 @MTD_BEG AS DATETIME
,@MTD_END AS DATETIME  --,@YTD_BEG AS DATETIME--,@YTD_END AS DATETIME
SET @MTD_BEG = CAST(CAST(DATEPART(mm,@DTM_BEG) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)
SET @MTD_END = @DTM_END  --SET @YTD_BEG = CAST('01/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)  

IF @TIME_INTERVAL IN ('MR','MD') BEGIN  --MONTH DETERMINED BY @DTM_BEG.
	SET @DTM_BEG = @MTD_BEG
	SET @DTM_END = @MTD_END
END

--========================================================
--SET ID EXTENSIONS
--========================================================
SET @CUSTOMER_ID	= ',' + LTRIM(RTRIM(@CUSTOMER_ID)) + ','
SET @INVOICE_GROUP	= ',' + LTRIM(RTRIM(REPLACE(@INVOICE_GROUP,'NO INVOICE GROUP',''))) + ','


--==================================
--SET AMOUNT TO DIVIDE BY:
--==================================
DECLARE @DS DECIMAL(10,2)  -- SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.00			--DIVIDE SECONDS BY 1 TO GET SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
    SET @DS = 60.00			--DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
    SET @DS = 3600.00		--DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_HUMACH_AGENT_INVOICING_REPORTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_HUMACH_AGENT_INVOICING_REPORTS
END
CREATE TABLE #IMPORTS_HUMACH_AGENT_INVOICING_REPORTS
(TENANT_NAME            VARCHAR(50)
,ID_EXT                 VARCHAR(3)
,SCHEDULER_ACL_NAME     VARCHAR(100)  
,EMPLOYEE_ID            VARCHAR(50)   
,STD_TENANT_START_DATE_TIME_KEY INT
,RESOURCE_NAME          VARCHAR(100)

,AIR_DAY_TYPE           varchar(1)
,AIR_ACW_FONT_COLOR     varchar(50)
,MIN_GUARANTEE_MINUTES  decimal(6,3)
,MIN_GUARANTEE_TYPE     varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE varchar(50)
,HAS_HOLIDAYS           varchar(1)
,INCLUDE_IN_CAS         varchar(1)
,READY_FOR_XML          varchar(1)
,SHOW_ID_EXTS           varchar(1)
,
[LOGGED_IN_SECS] [decimal](10, 2) NULL,
[READY_SECS] [decimal](10, 2) NULL,
[ASSIGNED_SECS] [decimal](10, 2) NULL,
[BUSY_SECS] [decimal](10, 2) NULL,
[NOT_READY_SECS] [decimal](10, 2) NULL,
[AGENT_UNRESPONSIVE_SECS] [decimal](10, 2) NULL,
[POST_LOGIN_SECS] [decimal](10, 2) NULL,
[BREAK_SECS] [decimal](10, 2) NULL,
[WRAP_SECS] [decimal](10, 2) NULL,
[NR_05_SECS] [decimal](10, 2) NULL,
[NR_06_SECS] [decimal](10, 2) NULL,
[NR_07_SECS] [decimal](10, 2) NULL,
[DIAL_PENDING_SECS] [decimal](10, 2) NULL,
[STATE_UNKNOWN_SECS] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_ASSIGNED_SECS] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_ANS_SECS] [decimal](10, 2) NULL,
[Q_IN_CALLS_AGT_CALLS_TRANS_SECS] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS] [decimal](10, 2) NULL,
[Q_IN_CALLS_AGT_CALLS_HOLD_SECS] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS] [decimal](10, 2) NULL,
[NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS] [decimal](10, 2) NULL,
[NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS] [decimal](10, 2) NULL,
[NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_ASSIGNED_CT] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_ANS_CT] [decimal](10, 2) NULL,
[Q_IN_CALLS_AGT_CALLS_HOLD_CT] [decimal](10, 2) NULL,
[Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT] [decimal](10, 2) NULL,
[Q_IN_CALLS_AGT_CALLS_TRANS_CT] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_COMPLETED_CT] [decimal](10, 2) NULL,
[NON_Q_CALLS_OUT_AGT_CALL_ANS_CT] [decimal](10, 2) NULL,
[NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT] [decimal](10, 2) NULL,
[TOTAL_CALLS] [decimal] (10, 2) NULL,
[AUTHORIZED_WRAP] [decimal] (10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
[AUTHORIZED_MINUTES] [decimal](10, 2) NULL,
)

INSERT INTO #IMPORTS_HUMACH_AGENT_INVOICING_REPORTS
SELECT
 UAA.TENANT_NAME
,UAA.ID_EXT
,UAA.SCHEDULER_ACL_NAME
,UAA.EMPLOYEE_ID 
,UAA.STD_TENANT_START_DATE_TIME_KEY
,UAA.RESOURCE_NAME

,(ISNULL(UAA.AIR_DAY_TYPE,''))				--AS AIR_DAY_TYPE
,(ISNULL(UAA.AIR_ACW_FONT_COLOR,''))		--AS AIR_ACW_FONT_COLOR
,(ISNULL(UAA.MIN_GUARANTEE_MINUTES,0.000))	--AS MIN_GUARANTEE_MINUTES
,(ISNULL(UAA.MIN_GUARANTEE_TYPE,''))		--AS MIN_GUARANTEE_TYPE
,(ISNULL(UAA.AUTHORIZED_TO_INVOICE_TYPE,''))--AS AUTHORIZED_TO_INVOICE_TYPE
,(ISNULL(UAA.HAS_HOLIDAYS,''))				--AS HAS_HOLIDAYS
,(ISNULL(UAA.INCLUDE_IN_CAS,''))			--AS INCLUDE_IN_CAS
,(ISNULL(UAA.READY_FOR_XML,''))				--AS READY_FOR_XML
,(ISNULL(UAA.SHOW_ID_EXTS,''))				--AS SHOW_ID_EXTS

,(ISNULL(UAA.LOGGED_IN_SECS,0))
,(ISNULL(UAA.READY_SECS,0))
,(ISNULL(UAA.ASSIGNED_SECS,0))
,(ISNULL(UAA.BUSY_SECS,0))
,(ISNULL(UAA.NOT_READY_SECS,0))
,(ISNULL(UAA.AGENT_UNRESPONSIVE_SECS,0))
,(ISNULL(UAA.POST_LOGIN_SECS,0))
,(ISNULL(UAA.BREAK_SECS,0))
,(ISNULL(UAA.WRAP_SECS,0))
,(ISNULL(UAA.NR_05_SECS,0))
,(ISNULL(UAA.NR_06_SECS,0))
,(ISNULL(UAA.NR_07_SECS,0))
,(ISNULL(UAA.DIAL_PENDING_SECS,0))
,(ISNULL(UAA.STATE_UNKNOWN_SECS,0))
,(ISNULL(UAA.Q_IN_CALLS_IN_AGT_ASSIGNED_SECS,0))
,(ISNULL(UAA.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS,0))
,(ISNULL(UAA.Q_IN_CALLS_IN_AGT_ANS_SECS,0))
,(ISNULL(UAA.Q_IN_CALLS_AGT_CALLS_TRANS_SECS,0))
,(ISNULL(UAA.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS,0))
,(ISNULL(UAA.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS,0))
,(ISNULL(UAA.Q_IN_CALLS_AGT_CALLS_HOLD_SECS,0))
,(ISNULL(UAA.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS,0))
,(ISNULL(UAA.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS,0))
,(ISNULL(UAA.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS,0))
,(ISNULL(UAA.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS,0))
,(ISNULL(UAA.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS,0))
,(ISNULL(UAA.Q_IN_CALLS_IN_AGT_ASSIGNED_CT,0))
,(ISNULL(UAA.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT,0))
,(ISNULL(UAA.Q_IN_CALLS_IN_AGT_ANS_CT,0))
,(ISNULL(UAA.Q_IN_CALLS_AGT_CALLS_HOLD_CT,0))
,(ISNULL(UAA.Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT,0))
,(ISNULL(UAA.Q_IN_CALLS_AGT_CALLS_TRANS_CT,0))
,(ISNULL(UAA.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT,0))
,(ISNULL(UAA.Q_IN_CALLS_IN_AGT_COMPLETED_CT,0))
,(ISNULL(UAA.NON_Q_CALLS_OUT_AGT_CALL_ANS_CT,0))
,(ISNULL(UAA.NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT,0))
,(ISNULL(UAA.TOTAL_CALLS,0))
,(ISNULL(UAA.AUTHORIZED_WRAP,0))
,(ISNULL(UAA.CPROD,0))
,(ISNULL(UAA.MINIMUM_GUARANTEE,0))
,(ISNULL(UAA.AUTHORIZED_MINUTES,0))

--DATASOURCES FOR DURATION FIELDS, IN SECONDS, IN HOUR INTERVALS:
--    GROUPED JUST ENOUGH TO BE ABLE TO JOIN DATASOURCES TOGETHER, AND AT MOST BASIC INTERVAL!
FROM
(	SELECT	
	 UA.FF_CUSTOMER_NAME				AS TENANT_NAME
	,UA.ID_EXT							AS ID_EXT
	,UA.INVOICE_ID					    AS SCHEDULER_ACL_NAME
	,CASE WHEN CHARINDEX('_',UA.FF_AGENT_LAST_NAME) > 0 THEN
		LOWER(LEFT(UA.FF_AGENT_FIRST_NAME,1)) + LOWER(LEFT(UA.FF_AGENT_LAST_NAME,CHARINDEX('_',UA.FF_AGENT_LAST_NAME) - 1)) + RIGHT(UA.FF_AGENT_LAST_NAME,3)
	  ELSE
		LOWER(LEFT(UA.FF_AGENT_FIRST_NAME,1)) + LOWER(UA.FF_AGENT_LAST_NAME) END  AS EMPLOYEE_ID 
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,MAX(UA.RESOURCE_NAME)              AS RESOURCE_NAME
	,MAX(UA.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,'BLACK'                            AS AIR_ACW_FONT_COLOR
	,0									AS MIN_GUARANTEE_MINUTES
	,''									AS MIN_GUARANTEE_TYPE
	,''									AS AUTHORIZED_TO_INVOICE_TYPE
	,'Y'								AS HAS_HOLIDAYS
	,''									AS INCLUDE_IN_CAS
	,''									AS READY_FOR_XML
	,''									AS SHOW_ID_EXTS

	,SUM(ISNULL(UA.LOGGED_IN_SECS,0))									AS LOGGED_IN_SECS
	,SUM(ISNULL(UA.READY_SECS,0))										AS READY_SECS
	,SUM(ISNULL(UA.ASSIGNED_SECS,0))									AS ASSIGNED_SECS
	,SUM(ISNULL(UA.BUSY_SECS,0))										AS BUSY_SECS
	,SUM(ISNULL(UA.NOT_READY_SECS,0))									AS NOT_READY_SECS
	,SUM(ISNULL(UA.AGENT_UNRESPONSIVE_SECS,0))							AS AGENT_UNRESPONSIVE_SECS
	,SUM(ISNULL(UA.POST_LOGIN_SECS,0))									AS POST_LOGIN_SECS
	,SUM(ISNULL(UA.BREAK_SECS,0))										AS BREAK_SECS
	,SUM(ISNULL(UA.WRAP_SECS,0))										AS WRAP_SECS
	,SUM(ISNULL(UA.NR_05_SECS,0))										AS NR_05_SECS
	,SUM(ISNULL(UA.NR_06_SECS,0))										AS NR_06_SECS
	,SUM(ISNULL(UA.NR_07_SECS,0))										AS NR_07_SECS
	,SUM(ISNULL(UA.DIAL_PENDING_SECS,0))								AS DIAL_PENDING_SECS
	,SUM(ISNULL(UA.STATE_UNKNOWN_SECS,0))								AS STATE_UNKNOWN_SECS
	,SUM(ISNULL(UA.Q_IN_CALLS_IN_AGT_ASSIGNED_SECS,0))					AS Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
	,SUM(ISNULL(UA.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS,0))			AS Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
	,SUM(ISNULL(UA.Q_IN_CALLS_IN_AGT_ANS_SECS,0))						AS Q_IN_CALLS_IN_AGT_ANS_SECS
	,SUM(ISNULL(UA.Q_IN_CALLS_AGT_CALLS_TRANS_SECS,0))					AS Q_IN_CALLS_AGT_CALLS_TRANS_SECS
	,SUM(ISNULL(UA.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS,0))		AS Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
	,SUM(ISNULL(UA.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS,0))		AS Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
	,SUM(ISNULL(UA.Q_IN_CALLS_AGT_CALLS_HOLD_SECS,0))					AS Q_IN_CALLS_AGT_CALLS_HOLD_SECS
	,SUM(ISNULL(UA.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS,0))	AS Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
	,SUM(ISNULL(UA.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS,0))				AS Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
	,SUM(ISNULL(UA.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS,0))		AS NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
	,SUM(ISNULL(UA.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS,0))		AS NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
	,SUM(ISNULL(UA.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS,0))	AS NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
	,SUM(ISNULL(UA.Q_IN_CALLS_IN_AGT_ASSIGNED_CT,0))					AS Q_IN_CALLS_IN_AGT_ASSIGNED_CT
	,SUM(ISNULL(UA.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT,0))				AS Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
	,SUM(ISNULL(UA.Q_IN_CALLS_IN_AGT_ANS_CT,0))							AS Q_IN_CALLS_IN_AGT_ANS_CT
	,SUM(ISNULL(UA.Q_IN_CALLS_AGT_CALLS_HOLD_CT,0))						AS Q_IN_CALLS_AGT_CALLS_HOLD_CT
	,SUM(ISNULL(UA.Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT,0))					AS Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
	,SUM(ISNULL(UA.Q_IN_CALLS_AGT_CALLS_TRANS_CT,0))					AS Q_IN_CALLS_AGT_CALLS_TRANS_CT
	,SUM(ISNULL(UA.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT,0))				AS Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
	,SUM(ISNULL(UA.Q_IN_CALLS_IN_AGT_COMPLETED_CT,0))					AS Q_IN_CALLS_IN_AGT_COMPLETED_CT
	,SUM(ISNULL(UA.NON_Q_CALLS_OUT_AGT_CALL_ANS_CT,0))					AS NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
	,SUM(ISNULL(UA.NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT,0))				AS NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
	,SUM(ISNULL(UA.TOTAL_CALLS,0))										AS TOTAL_CALLS
	,SUM(ISNULL(UA.AUTHORIZED_WRAP,0))									AS AUTHORIZED_WRAP
	,SUM(ISNULL(UA.CPROD,0))											AS CPROD
	,SUM(ISNULL(UA.MINIMUM_GUARANTEE,0))								AS MINIMUM_GUARANTEE
	,SUM(ISNULL(UA.AUTHORIZED_MINUTES,0))								AS AUTHORIZED_MINUTES

	--  SELECT *
	FROM			WSOL_TB_IMPORTS_HUMACH_INVOICING	UA
	INNER JOIN		DATE_TIME							DT    ON DT.DATE_TIME_KEY = UA.STD_TENANT_START_DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
	  -- AND ISNULL(UA.ID_EXT,'') IN ('NWA','NPS','NWS','NWR')
	  --AND ( @ID_EXT IN (',0,',',,') OR CHARINDEX(',' + RTRIM(UA.ID_EXT) + ',',@ID_EXT) > 0 )
	  AND (@CUSTOMER_ID	  IN (',0,',',,') OR CHARINDEX(',' + RTRIM(UA.FF_CUSTOMER_ID) + ',',@CUSTOMER_ID) > 0)
	  AND (@INVOICE_GROUP IN (',0,') OR CHARINDEX(',' + RTRIM(UA.INVOICE_ID) + ',',@INVOICE_GROUP) > 0) 
		
	GROUP BY
	 UA.ID_EXT 
	,UA.FF_CUSTOMER_NAME
	,UA.INVOICE_ID
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,CASE WHEN CHARINDEX('_',UA.FF_AGENT_LAST_NAME) > 0 THEN
		LOWER(LEFT(UA.FF_AGENT_FIRST_NAME,1)) + LOWER(LEFT(UA.FF_AGENT_LAST_NAME,CHARINDEX('_',UA.FF_AGENT_LAST_NAME) - 1)) + RIGHT(UA.FF_AGENT_LAST_NAME,3)
	  ELSE
		LOWER(LEFT(UA.FF_AGENT_FIRST_NAME,1)) + LOWER(UA.FF_AGENT_LAST_NAME) END
) UAA

--==============================================================
--==============================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_HUMACH_AGENT_INVOICING_REPORTS_RTN') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_HUMACH_AGENT_INVOICING_REPORTS_RTN
END
CREATE TABLE #IMPORTS_HUMACH_AGENT_INVOICING_REPORTS_RTN
(GRPNO                 INT
,TENANT_NAME           VARCHAR(50)
,ID_EXT                VARCHAR(3)
,SCHEDULER_ACL_NAME    VARCHAR(100)
,EMPLOYEE_ID           VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,CAL_YEAR_MONTH_NUM    VARCHAR(10)
,DATE_INTERVAL         VARCHAR(50)
,TIME_INTERVAL         VARCHAR(10)

,AIR_DAY_TYPE          varchar(1)
,AIR_ACW_FONT_COLOR    varchar(50)
,MIN_GUARANTEE_MINUTES decimal(6,3)
,MIN_GUARANTEE_TYPE    varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE varchar(50)
,HAS_HOLIDAYS          varchar(1)
,INCLUDE_IN_CAS        varchar(1)
,READY_FOR_XML         varchar(1)
,SHOW_ID_EXTS          varchar(1)

,AIR_HOLIDAY_IN        VARCHAR(1)
,ALL_AUTHORIZED_TIME   DECIMAL(10,2)

,
[LOGGED_IN_SECS] [decimal](10, 2) NULL,
[READY_SECS] [decimal](10, 2) NULL,
[ASSIGNED_SECS] [decimal](10, 2) NULL,
[BUSY_SECS] [decimal](10, 2) NULL,
[NOT_READY_SECS] [decimal](10, 2) NULL,
[AGENT_UNRESPONSIVE_SECS] [decimal](10, 2) NULL,
[POST_LOGIN_SECS] [decimal](10, 2) NULL,
[BREAK_SECS] [decimal](10, 2) NULL,
[WRAP_SECS] [decimal](10, 2) NULL,
[NR_05_SECS] [decimal](10, 2) NULL,
[NR_06_SECS] [decimal](10, 2) NULL,
[NR_07_SECS] [decimal](10, 2) NULL,
[DIAL_PENDING_SECS] [decimal](10, 2) NULL,
[STATE_UNKNOWN_SECS] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_ASSIGNED_SECS] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_ANS_SECS] [decimal](10, 2) NULL,
[Q_IN_CALLS_AGT_CALLS_TRANS_SECS] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS] [decimal](10, 2) NULL,
[Q_IN_CALLS_AGT_CALLS_HOLD_SECS] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS] [decimal](10, 2) NULL,
[NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS] [decimal](10, 2) NULL,
[NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS] [decimal](10, 2) NULL,
[NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_ASSIGNED_CT] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_ANS_CT] [decimal](10, 2) NULL,
[Q_IN_CALLS_AGT_CALLS_HOLD_CT] [decimal](10, 2) NULL,
[Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT] [decimal](10, 2) NULL,
[Q_IN_CALLS_AGT_CALLS_TRANS_CT] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT] [decimal](10, 2) NULL,
[Q_IN_CALLS_IN_AGT_COMPLETED_CT] [decimal](10, 2) NULL,
[NON_Q_CALLS_OUT_AGT_CALL_ANS_CT] [decimal](10, 2) NULL,
[NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT] [decimal](10, 2) NULL,
[TOTAL_CALLS] [decimal](10, 2) NULL,
[AUTHORIZED_WRAP] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
[AUTHORIZED_MINUTES] [decimal](10, 2) NULL,
)
--==================================


--==================================
INSERT INTO #IMPORTS_HUMACH_AGENT_INVOICING_REPORTS_RTN
SELECT
 20								--AS GRPNO  
,ISNULL(GG.TENANT_NAME       ,'') AS TENANT_NAME
,ISNULL(GG.ID_EXT            ,'') AS ID_EXT
,ISNULL(GG.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
,ISNULL(GG.EMPLOYEE_ID       ,'') AS EMPLOYEE_ID
,ISNULL(GG.RESOURCE_NAME     ,'') AS RESOURCE_NAME
,ISNULL(GG.CAL_YEAR_MONTH_NUM,'') AS CAL_YEAR_MONTH_NUM
,ISNULL(GG.DI                ,'') AS DI
,ISNULL(GG.TI                ,'') AS TI

,(GG.AIR_DAY_TYPE)                AS AIR_DAY_TYPE
,(GG.AIR_ACW_FONT_COLOR)          AS AIR_ACW_FONT_COLOR
,(GG.MIN_GUARANTEE_MINUTES)       AS MIN_GUARANTEE_MINUTES
,(GG.MIN_GUARANTEE_TYPE)          AS MIN_GUARANTEE_TYPE
,(GG.AUTHORIZED_TO_INVOICE_TYPE)  AS AUTHORIZED_TO_INVOICE_TYPE
,(GG.HAS_HOLIDAYS)                AS HAS_HOLIDAYS
,(GG.INCLUDE_IN_CAS)              AS INCLUDE_IN_CAS
,(GG.READY_FOR_XML)               AS READY_FOR_XML
,(GG.SHOW_ID_EXTS)                AS SHOW_ID_EXTS

,'' --AS AIR_HOLIDAY_IN
,0  --AS ALL_AUTHORIZED_TIME

,CAST((ISNULL(GG.LOGGED_IN_SECS										,0)) / @DS AS DECIMAL(10,2)) AS LOGGED_IN_SECS
,CAST((ISNULL(GG.READY_SECS											,0)) / @DS AS DECIMAL(10,2)) AS READY_SECS
,CAST((ISNULL(GG.ASSIGNED_SECS										,0)) / @DS AS DECIMAL(10,2)) AS ASSIGNED_SECS
,CAST((ISNULL(GG.BUSY_SECS											,0)) / @DS AS DECIMAL(10,2)) AS BUSY_SECS
,CAST((ISNULL(GG.NOT_READY_SECS										,0)) / @DS AS DECIMAL(10,2)) AS NOT_READY_SECS
,CAST((ISNULL(GG.AGENT_UNRESPONSIVE_SECS							,0)) / @DS AS DECIMAL(10,2)) AS AGENT_UNRESPONSIVE_SECS
,CAST((ISNULL(GG.POST_LOGIN_SECS									,0)) / @DS AS DECIMAL(10,2)) AS POST_LOGIN_SECS
,CAST((ISNULL(GG.BREAK_SECS											,0)) / @DS AS DECIMAL(10,2)) AS BREAK_SECS
,CAST((ISNULL(GG.WRAP_SECS											,0)) / @DS AS DECIMAL(10,2)) AS WRAP_SECS
,CAST((ISNULL(GG.NR_05_SECS											,0)) / @DS AS DECIMAL(10,2)) AS NR_05_SECS
,CAST((ISNULL(GG.NR_06_SECS											,0)) / @DS AS DECIMAL(10,2)) AS NR_06_SECS
,CAST((ISNULL(GG.NR_07_SECS											,0)) / @DS AS DECIMAL(10,2)) AS NR_07_SECS
,CAST((ISNULL(GG.DIAL_PENDING_SECS									,0)) / @DS AS DECIMAL(10,2)) AS DIAL_PENDING_SECS
,CAST((ISNULL(GG.STATE_UNKNOWN_SECS									,0)) / @DS AS DECIMAL(10,2)) AS STATE_UNKNOWN_SECS
,CAST((ISNULL(GG.Q_IN_CALLS_IN_AGT_ASSIGNED_SECS					,0)) / @DS AS DECIMAL(10,2)) AS Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,CAST((ISNULL(GG.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS				,0)) / @DS AS DECIMAL(10,2)) AS Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,CAST((ISNULL(GG.Q_IN_CALLS_IN_AGT_ANS_SECS							,0)) / @DS AS DECIMAL(10,2)) AS Q_IN_CALLS_IN_AGT_ANS_SECS
,CAST((ISNULL(GG.Q_IN_CALLS_AGT_CALLS_TRANS_SECS					,0)) / @DS AS DECIMAL(10,2)) AS Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,CAST((ISNULL(GG.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS			,0)) / @DS AS DECIMAL(10,2)) AS Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,CAST((ISNULL(GG.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS			,0)) / @DS AS DECIMAL(10,2)) AS Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,CAST((ISNULL(GG.Q_IN_CALLS_AGT_CALLS_HOLD_SECS						,0)) / @DS AS DECIMAL(10,2)) AS Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,CAST((ISNULL(GG.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS	,0)) / @DS AS DECIMAL(10,2)) AS Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,CAST((ISNULL(GG.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS				,0)) / @DS AS DECIMAL(10,2)) AS Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,CAST((ISNULL(GG.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS		,0)) / @DS AS DECIMAL(10,2)) AS NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,CAST((ISNULL(GG.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS		,0)) / @DS AS DECIMAL(10,2)) AS NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,CAST((ISNULL(GG.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS	,0)) / @DS AS DECIMAL(10,2)) AS NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,CAST((ISNULL(GG.Q_IN_CALLS_IN_AGT_ASSIGNED_CT						,0))	   AS DECIMAL(10,2)) AS Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,CAST((ISNULL(GG.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT				,0))	   AS DECIMAL(10,2)) AS Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,CAST((ISNULL(GG.Q_IN_CALLS_IN_AGT_ANS_CT							,0))	   AS DECIMAL(10,2)) AS Q_IN_CALLS_IN_AGT_ANS_CT
,CAST((ISNULL(GG.Q_IN_CALLS_AGT_CALLS_HOLD_CT						,0))	   AS DECIMAL(10,2)) AS Q_IN_CALLS_AGT_CALLS_HOLD_CT
,CAST((ISNULL(GG.Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT					,0))	   AS DECIMAL(10,2)) AS Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,CAST((ISNULL(GG.Q_IN_CALLS_AGT_CALLS_TRANS_CT						,0))	   AS DECIMAL(10,2)) AS Q_IN_CALLS_AGT_CALLS_TRANS_CT
,CAST((ISNULL(GG.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT					,0))	   AS DECIMAL(10,2)) AS Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,CAST((ISNULL(GG.Q_IN_CALLS_IN_AGT_COMPLETED_CT						,0))	   AS DECIMAL(10,2)) AS Q_IN_CALLS_IN_AGT_COMPLETED_CT
,CAST((ISNULL(GG.NON_Q_CALLS_OUT_AGT_CALL_ANS_CT					,0))	   AS DECIMAL(10,2)) AS NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,CAST((ISNULL(GG.NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT				,0))	   AS DECIMAL(10,2)) AS NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,CAST((ISNULL(GG.TOTAL_CALLS										,0))	   AS DECIMAL(10,2)) AS TOTAL_CALLS
,CAST((ISNULL(GG.AUTHORIZED_WRAP									,0)) / @DS AS DECIMAL(10,2)) AS AUTHORIZED_WRAP
,CAST((ISNULL(GG.CPROD												,0)) / @DS AS DECIMAL(10,2)) AS CPROD
,CAST((ISNULL(GG.MINIMUM_GUARANTEE									,0)) / @DS AS DECIMAL(10,2)) AS MINIMUM_GUARANTEE
,CAST((ISNULL(GG.AUTHORIZED_MINUTES									,0)) / @DS AS DECIMAL(10,2)) AS AUTHORIZED_MINUTES

FROM  -- GG STARTS HERE:
(	SELECT
	 ISNULL(SW.TENANT_NAME,'')        AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  AS EMPLOYEE_ID
	,MAX(RESOURCE_NAME)               AS RESOURCE_NAME

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) AS TI

	,MAX(SW.AIR_DAY_TYPE)					AS AIR_DAY_TYPE
	,MAX(SW.AIR_ACW_FONT_COLOR)				AS AIR_ACW_FONT_COLOR
	,MAX(SW.MIN_GUARANTEE_MINUTES)			AS MIN_GUARANTEE_MINUTES
	,MAX(SW.MIN_GUARANTEE_TYPE)				AS MIN_GUARANTEE_TYPE
	,MAX(SW.AUTHORIZED_TO_INVOICE_TYPE)		AS AUTHORIZED_TO_INVOICE_TYPE
	,MAX(SW.HAS_HOLIDAYS)					AS HAS_HOLIDAYS
	,MAX(SW.INCLUDE_IN_CAS)					AS INCLUDE_IN_CAS
	,MAX(SW.READY_FOR_XML)					AS READY_FOR_XML
	,MAX(SW.SHOW_ID_EXTS)					AS SHOW_ID_EXTS
	
	,SUM(ISNULL(SW.LOGGED_IN_SECS									,0)) AS LOGGED_IN_SECS
	,SUM(ISNULL(SW.READY_SECS										,0)) AS READY_SECS
	,SUM(ISNULL(SW.ASSIGNED_SECS									,0)) AS ASSIGNED_SECS
	,SUM(ISNULL(SW.BUSY_SECS										,0)) AS BUSY_SECS
	,SUM(ISNULL(SW.NOT_READY_SECS									,0)) AS NOT_READY_SECS
	,SUM(ISNULL(SW.AGENT_UNRESPONSIVE_SECS							,0)) AS AGENT_UNRESPONSIVE_SECS
	,SUM(ISNULL(SW.POST_LOGIN_SECS									,0)) AS POST_LOGIN_SECS
	,SUM(ISNULL(SW.BREAK_SECS										,0)) AS BREAK_SECS
	,SUM(ISNULL(SW.WRAP_SECS										,0)) AS WRAP_SECS
	,SUM(ISNULL(SW.NR_05_SECS										,0)) AS NR_05_SECS
	,SUM(ISNULL(SW.NR_06_SECS										,0)) AS NR_06_SECS
	,SUM(ISNULL(SW.NR_07_SECS										,0)) AS NR_07_SECS
	,SUM(ISNULL(SW.DIAL_PENDING_SECS								,0)) AS DIAL_PENDING_SECS
	,SUM(ISNULL(SW.STATE_UNKNOWN_SECS								,0)) AS STATE_UNKNOWN_SECS
	,SUM(ISNULL(SW.Q_IN_CALLS_IN_AGT_ASSIGNED_SECS					,0)) AS Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
	,SUM(ISNULL(SW.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS			,0)) AS Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
	,SUM(ISNULL(SW.Q_IN_CALLS_IN_AGT_ANS_SECS						,0)) AS Q_IN_CALLS_IN_AGT_ANS_SECS
	,SUM(ISNULL(SW.Q_IN_CALLS_AGT_CALLS_TRANS_SECS					,0)) AS Q_IN_CALLS_AGT_CALLS_TRANS_SECS
	,SUM(ISNULL(SW.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS		,0)) AS Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
	,SUM(ISNULL(SW.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS		,0)) AS Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
	,SUM(ISNULL(SW.Q_IN_CALLS_AGT_CALLS_HOLD_SECS					,0)) AS Q_IN_CALLS_AGT_CALLS_HOLD_SECS
	,SUM(ISNULL(SW.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS	,0)) AS Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
	,SUM(ISNULL(SW.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS				,0)) AS Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
	,SUM(ISNULL(SW.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS		,0)) AS NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
	,SUM(ISNULL(SW.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS		,0)) AS NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
	,SUM(ISNULL(SW.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS	,0)) AS NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
	,SUM(ISNULL(SW.Q_IN_CALLS_IN_AGT_ASSIGNED_CT					,0)) AS Q_IN_CALLS_IN_AGT_ASSIGNED_CT
	,SUM(ISNULL(SW.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT				,0)) AS Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
	,SUM(ISNULL(SW.Q_IN_CALLS_IN_AGT_ANS_CT							,0)) AS Q_IN_CALLS_IN_AGT_ANS_CT
	,SUM(ISNULL(SW.Q_IN_CALLS_AGT_CALLS_HOLD_CT						,0)) AS Q_IN_CALLS_AGT_CALLS_HOLD_CT
	,SUM(ISNULL(SW.Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT					,0)) AS Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
	,SUM(ISNULL(SW.Q_IN_CALLS_AGT_CALLS_TRANS_CT					,0)) AS Q_IN_CALLS_AGT_CALLS_TRANS_CT
	,SUM(ISNULL(SW.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT				,0)) AS Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
	,SUM(ISNULL(SW.Q_IN_CALLS_IN_AGT_COMPLETED_CT					,0)) AS Q_IN_CALLS_IN_AGT_COMPLETED_CT
	,SUM(ISNULL(SW.NON_Q_CALLS_OUT_AGT_CALL_ANS_CT					,0)) AS NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
	,SUM(ISNULL(SW.NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT				,0)) AS NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
	,SUM(ISNULL(SW.TOTAL_CALLS										,0)) AS TOTAL_CALLS
	,SUM(ISNULL(SW.AUTHORIZED_WRAP									,0)) AS AUTHORIZED_WRAP
	,SUM(ISNULL(SW.CPROD											,0)) AS CPROD
	,SUM(ISNULL(SW.MINIMUM_GUARANTEE								,0)) AS MINIMUM_GUARANTEE
	,SUM(ISNULL(SW.AUTHORIZED_MINUTES								,0)) AS AUTHORIZED_MINUTES
	
	FROM			#IMPORTS_HUMACH_AGENT_INVOICING_REPORTS		SW
	INNER JOIN		DATE_TIME									DT	ON DT.DATE_TIME_KEY = SW.STD_TENANT_START_DATE_TIME_KEY
													 
	--WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END		  --AND (@TENANT_KEY   IN ('0','') OR SW.TENANT_KEY   = CAST(@TENANT_KEY AS INT) )

	GROUP BY 
	 ISNULL(SW.TENANT_NAME,'')        --AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             --AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') --AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  --AS EMPLOYEE_ID

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) --AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) --AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) --AS TI
) GG

--==================================
--IS A HOLIDAY DATE IN THE MIX:
--==================================
DECLARE @HOLIDAY_IN VARCHAR(1)
SET @HOLIDAY_IN = 'N'
DECLARE @I INT
SET @I = (SELECT COUNT(*) FROM #IMPORTS_HUMACH_AGENT_INVOICING_REPORTS_RTN WHERE AIR_DAY_TYPE = 'H')  --  AND INCLUDE_IN_CAS = 'Y')
IF @I > 0 BEGIN
	SET @HOLIDAY_IN = 'Y'
END
--==================================
UPDATE #IMPORTS_HUMACH_AGENT_INVOICING_REPORTS_RTN SET
 AIR_HOLIDAY_IN = @HOLIDAY_IN

--=========================================================
--UPDATE TOTALS LINE ON REPORT FOR STANDARD AND HOLIDAY:
--=========================================================
UPDATE #IMPORTS_HUMACH_AGENT_INVOICING_REPORTS_RTN SET
 ALL_AUTHORIZED_TIME = ISNULL(LOJ.ALL_AUTHORIZED_TIME,0.0)
FROM #IMPORTS_HUMACH_AGENT_INVOICING_REPORTS_RTN TA
LEFT OUTER JOIN
(	SELECT
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
	,SUM(AUTHORIZED_MINUTES) AS ALL_AUTHORIZED_TIME
	FROM #IMPORTS_HUMACH_AGENT_INVOICING_REPORTS_RTN 
	GROUP BY 
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
) LOJ ON LOJ.SCHEDULER_ACL_NAME = TA.SCHEDULER_ACL_NAME
	 AND LOJ.EMPLOYEE_ID        = TA.EMPLOYEE_ID
	 AND LOJ.AIR_DAY_TYPE       = TA.AIR_DAY_TYPE

--==================================
--RETURN DATA
--==================================
--=======================================================================================
--POPULATE TABLE READ BY SSIS TO GET END DATE OF DATA REPORT/FILE HAS BEEN RUN FOR:
--=======================================================================================
INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
SELECT
 'uspIMPORTS_HUMACH_AGENT_INVOICING_REPORTS'			--SQL_JOB_NAME
,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,111),'/','')	--FILENM   YYYYMMDD_...
,dbo.getdate()  --CST_ROW_CREATED_TIME

--=====================================
--RETURN DATASET:
--=====================================
SELECT 
 CASE WHEN @DUR_IN = 'SS' THEN '' ELSE 'F' END AS DUR_FORMAT
,CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
,V.*

FROM      #IMPORTS_HUMACH_AGENT_INVOICING_REPORTS_RTN  V

ORDER BY 
 V.GRPNO
,V.SCHEDULER_ACL_NAME
,V.EMPLOYEE_ID
,V.CAL_YEAR_MONTH_NUM
,V.DATE_INTERVAL
,V.TIME_INTERVAL  --SINCE IN MILITARY TIME!

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_HUMACH_AIA_AGENT_MAPPING_MISSING_AGENTS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_HUMACH_AIA_AGENT_MAPPING_MISSING_AGENTS]
 @DATE_BEG		DATETIME
,@DATE_END		DATETIME
,@PSW			VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE		VARCHAR(3)
,@CUSTOMER_ID	VARCHAR(10)
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHICH INVOICE_MAP_KEY VALUES EXIST IN THE ACTIVITY FILES, BUT NOT IN THE AIA_AGENT_MAPPING .CSV FILES.
--          NO MATCHES BETWEEN ACTIVITY AND AGENT MAPPING.  WHEN NO MATCHES, THEN NO 'SCHEDULER' INVOICING.
--THIS USP IS DATA SOURCE FOR SRS GRID ON "ACTIVITY IMPORTS" STATUS REPORT!!!

--EXECUTE [dbo].[uspIMPORTS_HUMACH_AIA_AGENT_MAPPING_MISSING_AGENTS] '03/16/2016','03/31/2016','900901','HUMACH_AIA_AGENT_MAPPING','','B','177'

--========================================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--========================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME

IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--========================================================================
--SET CUSTOMER ID PARAMETER VALUE
--========================================================================
SET @CUSTOMER_ID	= ',' + LTRIM(RTRIM(@CUSTOMER_ID)) + ','

--===================================================================================================
--CREATE AND POPULATE TMP TABLE
--===================================================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_HUMACH_AIA_AGENT_MAPPING_MISSING_AGENTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_HUMACH_AIA_AGENT_MAPPING_MISSING_AGENTS
END
CREATE TABLE #IMPORTS_HUMACH_AIA_AGENT_MAPPING_MISSING_AGENTS
(FILEDATETIME          VARCHAR(50)
,FTP_FILE_NAME         VARCHAR(100)
,WS_ROW_CREATED_TIME   DATETIME
,INVOICE_MAP_KEY       VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,RCD_CNT               INT
)
INSERT INTO #IMPORTS_HUMACH_AIA_AGENT_MAPPING_MISSING_AGENTS
SELECT
 DT.CAL_DATE_STRING					AS FILEDATETIME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME
,I.WS_ROW_CREATED_TIME
,I.FF_AGENT_LAST_NAME				AS INVOICE_MAP_KEY
,I.RESOURCE_NAME					AS RESOURCE_NAME
,COUNT(*)							AS RCD_CNT
--SELECT *
FROM            WSOL_TB_IMPORTS_HUMACH_INVOICING	I   
INNER JOIN      DATE_TIME							DT   ON DT.DATE_TIME_KEY        = I.STD_TENANT_START_DATE_TIME_KEY

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND ISNULL(I.ID_EXT,'') = ''
  AND ISNULL(I.FF_AGENT_LAST_NAME,'') NOT IN ('Maldonado_ASW')	-- FILTER OUT WSOL EMPLOYEES
  AND (@CUSTOMER_ID	  IN (',0,',',,') OR CHARINDEX(',' + RTRIM(I.FF_CUSTOMER_ID) + ',',@CUSTOMER_ID) > 0)
  AND ISNULL(I.RESOURCE_NAME,'') NOT IN ('Jorja West','Robin Bennett','Kathryn Milne','Oscar Galvan1','Tina Winders','Rebecca Hargis','Owen Waldrep','Amy Gard')

GROUP BY
 DT.CAL_DATE_STRING
,REPLACE(I.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME
,I.WS_ROW_CREATED_TIME
,I.FF_AGENT_LAST_NAME				--AS INVOICE_MAP_KEY
,I.RESOURCE_NAME					--AS RESOURCE_NAME

--==================================
UPDATE #IMPORTS_HUMACH_AIA_AGENT_MAPPING_MISSING_AGENTS SET
 FILEDATETIME = REPLACE(CONVERT(VARCHAR(10),ISNULL(FILEDATETIME,'1/1/1900'),102),'/',' . ')

--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_HUMACH_AIA_AGENT_MAPPING_MISSING_AGENTS)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_HUMACH_AIA_AGENT_MAPPING_MISSING_AGENTS
	SELECT
	 ''			--DT.CAL_DATE_STRING
	,''			--I.FTP_FILE_NAME
	,dbo.getdate()  --I.WS_ROW_CREATED_TIME
	,''			--I.FF_AGENT_LAST_NAME   AS INVOICE_MAP_KEY
	,''			--I.RESOURCE_NAME		 AS RESOURCE_NAME
	,0			--COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
END
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RCD_CNT = 0 
	BEGIN  --@RCD_CNT WILL BE 0 STILL, EVEN THOUGH ONE BLANK RECORD WAS ADDED...
		SET @MSG1 = @MSG1 + 'There are NO invalid ID Extensions.'
	END
ELSE
	BEGIN
		IF @RPT_TYPE = 'B'
			BEGIN
				SET @MSG1 = ''
	
				IF @RCD_CNT = 0
					BEGIN
						SET @MSG1 = @MSG1 + 'There are NO invlid ID Extensions!'
					END
				ELSE
					BEGIN
						IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1
							BEGIN
								SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
							END
		
								SET @MSG1 = @MSG1 + 'The list below contains Invoice Map Key values for agents that are associated with activity for the report date range, but ' + CHAR(10) + CHAR(13)
								SET @MSG1 = @MSG1 + 'who have an invalid ID Extension as part of their last name within the Humach system. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

								SET @MSG1 = @MSG1 + 'Agents who are on this list will not be invoiced (for activity dates shown), unless a special request is made and received '
								SET @MSG1 = @MSG1 + 'with plenty of time before the automated invoice process begins.  The analyst will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

								SET @MSG1 = @MSG1 + 'Also, Project Management may need to update the agent information within the Humach system '
								SET @MSG1 = @MSG1 + 'before the Analyst can correctly update agent data. ' + CHAR(13) + CHAR(10)
					END

			END
	END

--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_HUMACH_AIA_AGENT_MAPPING_MISSING_AGENTS 

ORDER BY
 INVOICE_MAP_KEY
,FTP_FILE_NAME

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_HUMACH_AIA_XML]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_HUMACH_AIA_XML]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300)
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='DY'  DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'-Manual - when users run report - what SRS reports are defaulted to.  MAN means use date range that user specified.  The exception is when a report is defined with PTD/YTD and MTD rows in it.
                                  --         'SUB'-Subscription - what SRS subscriptions are defaulted to.  SUB means set date range @vars based on @TIME_INTERVAL. (since date range in SRS Subscription can't be set correctly)
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='AIA'-Agent Invoice Automation - what Sergey uses for/in Scheduler...
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='XML'-AIA RPT (DETAIL) (XML FILE/EXPORT),
AS
SET NOCOUNT ON


--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)  
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 0,101) AS DATETIME)  
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) + 1
END

--IF @EXECUTIONER = 'MAN', DON'T CHANGE DATES -- THE REPORT IS BEING RAN MANUALLY, AND THE DATE RANGE WANTED BY THE USER IS BEING SET MANUALLY.

IF @EXECUTIONER = 'NEW' BEGIN -- NEW BI-MONTHLY PAYMENT CYCLE 1ST AND 16TH OF EACH MONTH
	IF @TIME_INTERVAL = 'W14' BEGIN
		IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate() - 1)) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
			END
		END		
		ELSE IF DAY(dbo.getdate()) = 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) < 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
	END
END

--=========================================================================================
--FORMAT 'MULTIPLES' "IN THAT" VALUES:  (Referring to CHARINDEX(search for this, in that))
--=========================================================================================
SET @ID_EXT          = ',' + LTRIM(RTRIM(@ID_EXT)) + ','
SET @SCHEDULER_GROUP = ',' + LTRIM(RTRIM(@SCHEDULER_GROUP)) + ','
SET @TENANT_KEY		 = ',' + LTRIM(RTRIM(@TENANT_KEY)) + ','

--==================================
--SET AMOUNT TO DIVIDE BY:
--==================================
DECLARE @DS DECIMAL(10,2)  --INT  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.0       --DIVIDE SECONDS BY 1 TO GET SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
	SET @DS = 60.0		--DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
	SET @DS = 3600.0	--DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
IF @RPT_TYPE_GRP = 'AIA' BEGIN

	--POPULATES XML REPORT.  SRS SUBSCRIPTION EXPORTS TO XML.  SSIS RENAMES AND MOVES XML FILE TO FTP.  SERGEY PICKS UP FILE
	
	IF @RPT_TYPE = 'XML' BEGIN  --AIA REPORT  --EXACTLY WHAT IS IN XML FILE AND/OR AIA TABLE.
		--==================================		--CREATE TMP TABLE:
		IF OBJECT_ID('TEMPDB..#IMPORTS_HUMACH_AIA_XML') IS NOT NULL BEGIN
		   DROP TABLE #IMPORTS_HUMACH_AIA_XML
		END
		CREATE TABLE #IMPORTS_HUMACH_AIA_XML
		([PLATFORM]                   VARCHAR(50)
		,[STATUS]                     VARCHAR(50) 
		,INVOICE_MAP_KEY              VARCHAR(50) 
		,FIELD_NAME                   VARCHAR(50) 
		,SCHEDULER_PROJECT_ID         VARCHAR(50) 
		,SCHEDULER_ACL_NAME           VARCHAR(50) 
		,ACD_ID_EXTENSION             VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_ID      VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_NAME    VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_ID       VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_NAME     VARCHAR(50) 
		,PRIMARY_PROJECT_MANAGER_ID   VARCHAR(500) 
		,DIRECTOR_OF_PROJECT_MANAGEMENT_ID VARCHAR(500) 
		,AGENT_TECHNOLOGY_MANAGER_ID  VARCHAR(500) 
		,CONTRACTOR_SUPPORT_PATHWAY   VARCHAR(500) 
		,INVOICE_SYSTEM_ID            VARCHAR(50) 
		,HOLIDAY_INVOICE_ID           VARCHAR(50) 
		,HOLIDAY                      VARCHAR(50) 
		,FILE_FORMAT_OF_PUSH          VARCHAR(50) 
		,AGENT_PREPARATION_INVOICE_ID VARCHAR(50) 
		,NEW_ACL                      VARCHAR(50) 
		,CURRENT_CATS                 VARCHAR(50) 
		,CATS_ID                      VARCHAR(50) 
		,PATS_ID                      VARCHAR(50) 
		,SMART_ELIGIBLE               VARCHAR(50) 
		,SMART_TIER_1                 VARCHAR(50) 
		,SMART_TIER_2                 VARCHAR(50) 
		,SMART_TIER_3                 VARCHAR(50) 
		,INTERVAL                     VARCHAR(50) 
		,DATE                         VARCHAR(50) 
		,HOD_INTERVAL                 VARCHAR(50) 
		,AU_DK_LOGGED_IN_DURATION     DECIMAL(10,2)  --INT 
		,AU_DK_AVAILABLE_DURATION     DECIMAL(10,2)  --INT 
		,AU_DK_TALK_DURATION          DECIMAL(10,2)  --INT 
		,AU_DK_IB_TALK_DURATION       DECIMAL(10,2)  --INT 
		,AU_DK_OB_TALK_DURATION       DECIMAL(10,2)  --INT 
		,AU_DK_CONVENTIONAL_ACW       DECIMAL(10,2)  --INT 
		,AU_DK_NR_DURATION            DECIMAL(10,2)  --INT 
		,AU_DK_PSEUDO_PRODUCTIVE_DURATION   DECIMAL(10,2)  --INT 
		,AU_DK_ADJUSTED_NR_DURATION         DECIMAL(10,2)  --INT 
		,AU_DK_TOTAL_PRODUCTIVE_DURATION    DECIMAL(10,2)  --INT 
		,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS DECIMAL(10,2)  --INT 
		,AU_DK_XFER_COUNT             INT 
		,AU_DK_HOLD_COUNT             INT 
		,AU_DK_CONFERENCE_COUNT       INT 
		,AU_DK_CONSULT_COUNT          INT 
		,AU_DK_PUP_COUNT              INT 
		,AU_DK_OFFERED_COUNT          INT 
		,AU_DK_HANDLED_COUNT          INT 
		,AU_DK_IB_HANDLE_COUNT        INT 
		,AU_DK_OB_HANDLE_COUNT        INT 
		,AU_DK_RONA_COUNT             INT 
		,AU_DK_AWR_COUNT              INT 
		,MINIMUM_GUARANTEE            DECIMAL(10,2) 
		,AUTHORIZED_TO_INVOICE        DECIMAL(10,2) 
		,WEEK_ENDING_DATE             VARCHAR(50) 
		,PAY_CYCLE_CLOSURE_DATE       VARCHAR(50) 
		,CAL_DATE                     DATETIME
		,TENANT_KEY                   INT 
		,INVOICE_ID                   VARCHAR(50) 
		,CST_ROW_CREATED_TIME         DATETIME
		)
		--==================================		
		-- INSERT INTO TEMP TABLE
		--==================================
		INSERT INTO #IMPORTS_HUMACH_AIA_XML
		SELECT --AIA.*
		 AIA.[PLATFORM]
		,AIA.[STATUS]                       
		,AIA.INVOICE_MAP_KEY              
		,AIA.FIELD_NAME                   
		,AIA.SCHEDULER_PROJECT_ID         
		,AIA.SCHEDULER_ACL_NAME           
		,AIA.ACD_ID_EXTENSION             
		,AIA.OFFICIAL_WSOL_CLIENT_ID      
		,AIA.OFFICIAL_WSOL_CLIENT_NAME    
		,AIA.OFFICIAL_ACD_CLIENT_ID       
		,AIA.OFFICIAL_ACD_CLIENT_NAME     
		,AIA.PRIMARY_PROJECT_MANAGER_ID   
		,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID 
		,AIA.AGENT_TECHNOLOGY_MANAGER_ID  
		,AIA.CONTRACTOR_SUPPORT_PATHWAY   
		,AIA.INVOICE_SYSTEM_ID            
		,AIA.HOLIDAY_INVOICE_ID           
		,AIA.HOLIDAY                      
		,AIA.FILE_FORMAT_OF_PUSH          
		,AIA.AGENT_PREPARATION_INVOICE_ID 
		,AIA.NEW_ACL                      
		,AIA.CURRENT_CATS                 
		,AIA.CATS_ID                      
		,AIA.PATS_ID                      
		,AIA.SMART_ELIGIBLE               
		,AIA.SMART_TIER_1                 
		,AIA.SMART_TIER_2                 
		,AIA.SMART_TIER_3                 
		,AIA.INTERVAL                     
		,AIA.DATE                         
		,AIA.HOD_INTERVAL                 
		,CAST( ( 1.0 * (AIA.AU_DK_LOGGED_IN_DURATION) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_LOGGED_IN_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_AVAILABLE_DURATION) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_AVAILABLE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_TALK_DURATION) )      / @DS AS DECIMAL(10,2)) --AS AU_DK_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_IB_TALK_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_IB_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_OB_TALK_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_OB_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_CONVENTIONAL_ACW) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_CONVENTIONAL_ACW
		,CAST( ( 1.0 * (AIA.AU_DK_NR_DURATION) )        / @DS AS DECIMAL(10,2)) --AS AU_DK_NR_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_PSEUDO_PRODUCTIVE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_ADJUSTED_NR_DURATION) )         / @DS AS DECIMAL(10,2)) --AS AU_DK_ADJUSTED_NR_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION) )    / @DS AS DECIMAL(10,2)) --AS AU_DK_TOTAL_PRODUCTIVE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
		,(AIA.AU_DK_XFER_COUNT)         --AS AU_DK_XFER_COUNT
		,(AIA.AU_DK_HOLD_COUNT)         --AS AU_DK_HOLD_COUNT
		,(AIA.AU_DK_CONFERENCE_COUNT)   --AS AU_DK_CONFERENCE_COUNT
		,(AIA.AU_DK_CONSULT_COUNT)      --AS AU_DK_CONSULT_COUNT
		,(AIA.AU_DK_PUP_COUNT)          --AS AU_DK_PUP_COUNT
		,(AIA.AU_DK_OFFERED_COUNT)      --AS AU_DK_OFFERED_COUNT
		,(AIA.AU_DK_HANDLED_COUNT)      --AS AU_DK_HANDLED_COUNT
		,(AIA.AU_DK_IB_HANDLE_COUNT)    --AS AU_DK_IB_HANDLE_COUNT
		,(AIA.AU_DK_OB_HANDLE_COUNT)    --AS AU_DK_OB_HANDLE_COUNT
		,(AIA.AU_DK_RONA_COUNT)         --AS AU_DK_RONA_COUNT
		,(AIA.AU_DK_AWR_COUNT)          --AS AU_DK_AWR_COUNT
		,CAST( ( 1.0 * (AIA.MINIMUM_GUARANTEE) )     / @DS AS DECIMAL(10,2)) --AS MINIMUM_GUARANTEE
		,CAST( ( 1.0 * (AIA.AUTHORIZED_TO_INVOICE) ) / @DS AS DECIMAL(10,2)) --AS AUTHORIZED_TO_INVOICE
		,AIA.WEEK_ENDING_DATE             
		,AIA.PAY_CYCLE_CLOSURE_DATE       
		,AIA.CAL_DATE                     
		,AIA.TENANT_KEY                   
		,AIA.INVOICE_ID                   
		,AIA.WS_ROW_CREATED_TIME         

		--  SELECT *
		FROM            WSOL_TB_IMPORTS_HUMACH_UV_ANT_AIA	AIA
		INNER JOIN      DATE_TIME						DT		ON DT.DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
		
		WHERE ( DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END )
		  AND AIA.STATUS = 'Active'
		  AND ( (ISNULL(AIA.READY_FOR_XML,'') = 'Y')	--<----Maintain this field, and the AIA will populate the XML correctly every time!!!!!!!!!
				OR (@ID_EXT = 'Y') )					--<----In Test Mode (ignore what ready_for_xml is set to).
		  AND ( ISNULL(AIA.INVOICE_ID,'') <> '' )		--<----INSURANCE, IN CASE BLANK ID EXTENSION SLIPS THROUGH
--		  AND ( ISNULL(AIA.RESOURCE_NAME,'') <> '')		--<----INSURANCE, FILTER OUT THOSE NOT IN AIA AGENT MAPPING SINCE INVOICE_ID IS JUST FF_USER_NAME FROM IMPORT FILE
		  AND (@TENANT_KEY IN (',0,',',,') OR CHARINDEX(',' + RTRIM(AIA.TENANT_KEY) + ',',@TENANT_KEY) > 0)

		ORDER BY 
		 AIA.OFFICIAL_ACD_CLIENT_NAME
		--,AIA.SCHEDULER_ACL_NAME
		,AIA.INVOICE_ID

		,AIA.ACD_ID_EXTENSION     
		,AIA.INVOICE_MAP_KEY
		,AIA.DATE
		,AIA.HOD_INTERVAL


		--==================================!!!--INSERT RECORD FOR REPORT SO SSIS KNOWS DATE OF DATA IN DATASET:
		--Have to include 'D??' or 'W??' because SRS Subscriptions are being ran at about same time in one sql job step.
		--  If one subscription takes longer than the other, the wrong date will get used/pulled from the YZ_TB_FILENAMES_FOR_SSIS in the ssis. and so on.
		IF CHARINDEX('D',@TIME_INTERVAL) > 0 BEGIN
			INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
			(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
			SELECT  --FOR THE .XML FILES FOR EACH DATE:
			 'iNetAIA_' + LTRIM(RTRIM(@TIME_INTERVAL))  --'iNetAIA_D09' for internal wsinet tenants 9 days from current date.  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.getdate()  --CST_ROW_CREATED_TIME
		END
		ELSE BEGIN  --'W' MEANING NEED TO PASS/POPULATE WITH DATE RANGE, LIKE 'MMDDYY_MMDDYY'. -- FOR GAR AND NW.
			INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
				(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
			SELECT  --FOR GETAROOM AND NINE_WEST:    --old:-- 'AGENT_INVOICE_AIA_XML'  --SQL_JOB_NAME 
			 'AIA_XML_' + REPLACE(LTRIM(RTRIM(CAST(@TENANT_KEY AS VARCHAR(10)))),',','')  --'AIA_XML_900901' for HUMACH  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_BEG,1),'/','') + '_' + REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.getdate()  --CST_ROW_CREATED_TIME
		END
		--  SELECT * FROM WSOL_TB_FILENAMES_FOR_SSIS ORDER BY CST_ROW_CREATED_TIME DESC

		--==================================!!!--RETURN DATASET TO REPORT:
		SELECT *
		FROM #IMPORTS_HUMACH_AIA_XML
		ORDER BY 
		 OFFICIAL_ACD_CLIENT_NAME
		--,SCHEDULER_ACL_NAME
		,INVOICE_ID

		,ACD_ID_EXTENSION     
		,INVOICE_MAP_KEY
		,DATE
		,HOD_INTERVAL
	END  --AIA_XML



END  --IF @RPT_TYPE_GRP = 'AIA'


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
--==================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_HUMACH_DEFAULT_CUSTOMERS]...';


GO


CREATE PROCEDURE [dbo].[uspIMPORTS_HUMACH_DEFAULT_CUSTOMERS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_HUMACH_DEFAULT_CUSTOMERS] '04/01/2016','04/15/2016'

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) + 1
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SELECT
 UA.FF_CUSTOMER_ID
,UA.FF_CUSTOMER_NAME
FROM 
(	SELECT
	 YT.FF_CUSTOMER_ID
	,YT.FF_CUSTOMER_NAME
	--  SELECT *
	FROM WSOL_TB_IMPORTS_HUMACH_INVOICING YT

	--WHERE YT.[DATETIME] >= @DTM_BEG AND YT.[DATETIME] <  @DTM_END

	GROUP BY
	 YT.FF_CUSTOMER_ID
	,YT.FF_CUSTOMER_NAME
) UA
ORDER BY UA.FF_CUSTOMER_NAME

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GO
PRINT N'Creating [dbo].[uspIMPORTS_HUMACH_DEFAULT_INVOICE_GROUPS]...';


GO


CREATE PROCEDURE [dbo].[uspIMPORTS_HUMACH_DEFAULT_INVOICE_GROUPS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150)
,@CUSTOMER_ID		 VARCHAR(150)
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_HUMACH_DEFAULT_INVOICE_GROUPS] '04/16/2016','04/30/2016','0','0'

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) + 1
--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SET @TENANT_KEY = 900901 -- HUMACH
SET @CUSTOMER_ID = ',' + LTRIM(RTRIM(@CUSTOMER_ID)) + ','

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
SELECT
 UA.INVOICE_ID
,UA.INVOICE_ID_DISPLAY
FROM 
(	SELECT
	 CASE WHEN ISNULL(YT.INVOICE_ID,'') = '' THEN 'NO INVOICE GROUP' ELSE YT.INVOICE_ID END AS INVOICE_ID
	,CASE WHEN ISNULL(YT.INVOICE_ID,'') = '' THEN 'NO INVOICE GROUP' ELSE YT.INVOICE_ID END AS INVOICE_ID_DISPLAY
	-- SELECT *
	FROM WSOL_TB_IMPORTS_HUMACH_INVOICING YT

	WHERE ( YT.[DATETIME] >= @DTM_BEG AND YT.[DATETIME] <  @DTM_END )
	  AND ( @CUSTOMER_ID IN (',,',',0,') OR CHARINDEX(',' + CAST(YT.FF_CUSTOMER_ID AS VARCHAR(10)) + ',',@CUSTOMER_ID) > 0 )

	GROUP BY
	 CASE WHEN ISNULL(YT.INVOICE_ID,'') = '' THEN 'NO INVOICE GROUP' ELSE YT.INVOICE_ID END
) UA
ORDER BY UA.INVOICE_ID DESC

--~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
GO
PRINT N'Creating [dbo].[uspIMPORTS_HUMACH_IMPORT_STATUS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_HUMACH_IMPORT_STATUS]
 @DATE_BEG		DATETIME
,@DATE_END		DATETIME
,@PSW			VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE		VARCHAR(3)
,@CUSTOMER_ID	VARCHAR(10)
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_HUMACH_IMPORT_STATUS] '12/01/2016','12/07/2016','','B','190'

--========================================
-- SET DATE VARIABLES
--========================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE 
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE 
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--========================================================================
--SET CUSTOMER ID PARAMETER VALUE
--========================================================================
SET @CUSTOMER_ID	= ',' + LTRIM(RTRIM(@CUSTOMER_ID)) + ','

--========================================================================
--CREATE TMP TABLE:
--========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_HUMACH_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_HUMACH_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_HUMACH_IMPORT_STATUS
(FILEDATETIME			VARCHAR(20)
,FTP_FILE_NAME			VARCHAR(100)
,CST_ROW_CREATED_TIME	DATETIME
,RCD_CNT				INT
)

--========================================================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================================================
    INSERT INTO #IMPORTS_HUMACH_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'') AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0) AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_HUMACH_INVOICING   C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
		  AND (@CUSTOMER_ID	  IN (',0,',',,') OR CHARINDEX(',' + RTRIM(C.FF_CUSTOMER_ID) + ',',@CUSTOMER_ID) > 0)
--		AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )  -- USE IF YOU WANT TO IGNORE WEEKENDS

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME)
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')
		,C.WS_ROW_CREATED_TIME
	) UA

--================================================================================
--CREATE CURSOR TO CHECK FOR MISSING DATES
--================================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''


IF @CUSTOMER_ID = ',190,'  -- <<---- i9 SPORTS
	BEGIN
		
		DECLARE crsT CURSOR FOR
			SELECT DT.FILEDATETIME
			FROM
			(	SELECT
				 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
				,DT.CAL_DAY_NUM_IN_WEEK
				FROM DATE_TIME DT
				WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
				GROUP BY
				 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
				,DT.CAL_DAY_NUM_IN_WEEK
			) DT 
			LEFT OUTER JOIN #IMPORTS_HUMACH_IMPORT_STATUS   I   ON I.FILEDATETIME = DT.FILEDATETIME

			WHERE ISNULL(I.RCD_CNT,0) = 0				-- CATCH ALL POSSIBLE MISSING DATES SINCE ONE FILE CAN CONTAIN DATA FOR MULTIPLE DAYS
			  AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)	-- i9 SPORTS AGENTS DO NOT WORK WEEKENDS

			ORDER BY 
			DT.FILEDATETIME

		OPEN crsT
		FETCH NEXT FROM crsT INTO @FILEDATETIME
		WHILE @@FETCH_STATUS = 0 BEGIN
			SET @RCD_CNT = @RCD_CNT + 1 

			SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
			--===============================
			FETCH NEXT FROM crsT INTO @FILEDATETIME
		END
		CLOSE crsT
		DEALLOCATE crsT
	
	END

IF @CUSTOMER_ID <> ',190,'

	BEGIN
		
		DECLARE crsT CURSOR FOR
			SELECT DT.FILEDATETIME
			FROM
			(	SELECT
				 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
				,DT.CAL_DAY_NUM_IN_WEEK
				FROM DATE_TIME DT
				WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
				GROUP BY
				 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
				,DT.CAL_DAY_NUM_IN_WEEK
			) DT 
			LEFT OUTER JOIN #IMPORTS_HUMACH_IMPORT_STATUS   I   ON I.FILEDATETIME = DT.FILEDATETIME

			WHERE ISNULL(I.RCD_CNT,0) = 0				-- CATCH ALL POSSIBLE MISSING DATES SINCE ONE FILE CAN CONTAIN DATA FOR MULTIPLE DAYS
--			  AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)	-- WEEKEND FILTER DOES NOT APPLY HERE

			ORDER BY 
			DT.FILEDATETIME

		OPEN crsT
		FETCH NEXT FROM crsT INTO @FILEDATETIME
		WHILE @@FETCH_STATUS = 0 BEGIN
			SET @RCD_CNT = @RCD_CNT + 1 

			SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
			--===============================
			FETCH NEXT FROM crsT INTO @FILEDATETIME
		END
		CLOSE crsT
		DEALLOCATE crsT
	
	END

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B'
	BEGIN

		SET @MSG1 = ''

		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1
			BEGIN
				SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
				IF @RCD_CNT > 0
					BEGIN
						SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
						SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

						SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
						SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 9:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
					END
				ELSE
					BEGIN
						SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
					END
			END
		ELSE 
			BEGIN
				SET @MSG1 = 'Imported file(s) from ' 
					+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
				
				IF @RCD_CNT > 0
					BEGIN
						SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
					END
				ELSE
					BEGIN
						SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
					END
			END
	
	END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--HUMACH:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM WSOL_TB_IMPORT_ERRORS_FOUND
							   WHERE TENANT_KEY = 900901 AND SUB_GROUP_NAME = 'HUMACH_INVOICING' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = 'D6323A'	-- WSOL DANGER RED

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--========================================================================
--SET CUSTOMER NAME:
--========================================================================
DECLARE
 @CUSTOMER_NAME	VARCHAR(150)

SET @CUSTOMER_NAME = (SELECT C.FF_CUSTOMER_NAME 
						FROM WSOL_TB_IMPORTS_HUMACH_INVOICING	C
				  INNER JOIN DATE_TIME							DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
					   WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
					     AND (@CUSTOMER_ID	  IN (',0,',',,') OR CHARINDEX(',' + RTRIM(C.FF_CUSTOMER_ID) + ',',@CUSTOMER_ID) > 0)
					GROUP BY C.FF_CUSTOMER_NAME
					 )	
--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1			AS MSG1
,@BG_COLOR		AS BG_COLOR
,@CUSTOMER_NAME AS CUSTOMER_NAME
,@CUSTOMER_ID AS CUSTOMER_ID

--FROM #IMPORTS_WD_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_HUMACH_IMPORT_STATUS_MISSING_DATA]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_HUMACH_IMPORT_STATUS_MISSING_DATA]
 @DATE_BEG			DATETIME
,@DATE_END			DATETIME
,@PSW				VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE			VARCHAR(3)
,@CUSTOMER_ID		VARCHAR(10)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_HUMACH_IMPORT_STATUS_MISSING_DATA] '03/16/2016','03/31/2016','','B','177'

--==============================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==============================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME

IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE 
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--========================================================================
--SET CUSTOMER ID PARAMETER VALUE
--========================================================================
SET @CUSTOMER_ID	= ',' + LTRIM(RTRIM(@CUSTOMER_ID)) + ','

--========================================================================
--CREATE TMP TABLE:
--========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_HUMACH_IMPORT_STATUS_MISSING_DATA') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_HUMACH_IMPORT_STATUS_MISSING_DATA
END
CREATE TABLE #IMPORTS_HUMACH_IMPORT_STATUS_MISSING_DATA
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--========================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================
    INSERT INTO #IMPORTS_HUMACH_IMPORT_STATUS_MISSING_DATA
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													--AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												--AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')															--AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_HUMACH_INVOICING   C

		INNER JOIN      DATE_TIME                      DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
		  AND (@CUSTOMER_ID	  IN (',0,',',,') OR CHARINDEX(',' + RTRIM(C.FF_CUSTOMER_ID) + ',',@CUSTOMER_ID) > 0)
		  
		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT      
,'White' AS BG_COLOR

FROM #IMPORTS_HUMACH_IMPORT_STATUS_MISSING_DATA

ORDER BY
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT      


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_HUMACH_INVOICING_IMPORT]...';


GO


CREATE PROCEDURE [dbo].[uspIMPORTS_HUMACH_INVOICING_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_HUMACH_INVOICING_IMPORT]

--  SELECT * FROM WSOL_TB_IMPORTS_HUMACH_INVOICING_1 ORDER BY [DATETIME] DESC

--	Durations in file are in seconds.

--=============================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY =       900901  --HUMACH
--=============================================
DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND 
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = 'HUMACH_INVOICING'    --  SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 900901
--=============================================

--===============================================================================================================================================
--USING @WS_ROW_CREATED_TIME FOR ALL INSERTS WILL ALLOW ME TO DELETE SPECIFIC INSERT PROCESSES/FILES.  MOST IMPORTANT!!!  FOR ALL TABLES.
--  IN CASE OF EMERGENCY, CRACK GLASS.
--===============================================================================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.getdate()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===================================================================================

--======================================================================
--HANDLE COLUMN HEADER AND JUNK RECORDS:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_HUMACH_INVOICING_BAD
(
BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_AGENT_ID
,FF_CUSTOMER_NAME
,FF_CUSTOMER_ID
,FF_INTERVAL
,FF_AGENT_PERFORMANCE_INTERVAL_ID
,FF_INTERVAL_START_TS
,FF_AGENT_LOGIN_START_TS
,FF_STATE_LOGGED_IN_SECS
,FF_STATE_READY_SECS
,FF_STATE_ASSIGNED_SECS
,FF_STATE_BUSY_SECS
,FF_STATE_NR_SECS
,FF_STATE_NR_01_SECS
,FF_STATE_NR_02_SECS
,FF_STATE_NR_03_SECS
,FF_STATE_NR_04_SECS
,FF_STATE_NR_05_SECS
,FF_STATE_NR_06_SECS
,FF_STATE_NR_07_SECS
,FF_STATE_DIAL_PENDING_SECS
,FF_STATE_UNKNOWN_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,FF_Q_IN_CALLS_IN_AGT_ANS_SECS
,FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,FF_Q_IN_CALLS_IN_AGT_ANS_CT
,FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT
,FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT
,FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS
,FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS
,FF_Q_OUT_CALLS_IN_AGT_ANS_SECS
,FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS
,FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_NON_Q_CALLS_IN_AGT_ANS_SECS
,FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,RESOURCE_NAME
,LOGGED_IN_SECS
,READY_SECS
,ASSIGNED_SECS
,BUSY_SECS
,NOT_READY_SECS
,AGENT_UNRESPONSIVE_SECS
,POST_LOGIN_SECS
,BREAK_SECS
,WRAP_SECS
,NR_05_SECS
,NR_06_SECS
,NR_07_SECS
,DIAL_PENDING_SECS
,STATE_UNKNOWN_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,Q_IN_CALLS_IN_AGT_ANS_SECS
,Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,Q_IN_CALLS_IN_AGT_ANS_CT
,Q_IN_CALLS_AGT_CALLS_HOLD_CT
,Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,Q_IN_CALLS_AGT_CALLS_TRANS_CT
,Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,Q_IN_CALLS_IN_AGT_COMPLETED_CT
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,TOTAL_CALLS
,AUTHORIZED_WRAP
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID)
SELECT
 'JNK'                  --BAD_IMPORTS_CODE  --'Junk Record'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE.
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_AGENT_FIRST_NAME
,W1.FF_AGENT_LAST_NAME
,W1.FF_AGENT_ID
,W1.FF_CUSTOMER_NAME
,W1.FF_CUSTOMER_ID
,W1.FF_INTERVAL
,W1.FF_AGENT_PERFORMANCE_INTERVAL_ID
,W1.FF_INTERVAL_START_TS
,W1.FF_AGENT_LOGIN_START_TS
,W1.FF_STATE_LOGGED_IN_SECS
,W1.FF_STATE_READY_SECS
,W1.FF_STATE_ASSIGNED_SECS
,W1.FF_STATE_BUSY_SECS
,W1.FF_STATE_NR_SECS
,W1.FF_STATE_NR_01_SECS
,W1.FF_STATE_NR_02_SECS
,W1.FF_STATE_NR_03_SECS
,W1.FF_STATE_NR_04_SECS
,W1.FF_STATE_NR_05_SECS
,W1.FF_STATE_NR_06_SECS
,W1.FF_STATE_NR_07_SECS
,W1.FF_STATE_DIAL_PENDING_SECS
,W1.FF_STATE_UNKNOWN_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_ANS_SECS
,W1.FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W1.FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,W1.FF_Q_IN_CALLS_IN_AGT_ANS_CT
,W1.FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT
,W1.FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,W1.FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT
,W1.FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS
,W1.FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W1.FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS
,W1.FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,W1.FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_ANS_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,W1.FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS
,W1.FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_ANS_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.RESOURCE_NAME
,W1.LOGGED_IN_SECS
,W1.READY_SECS
,W1.ASSIGNED_SECS
,W1.BUSY_SECS
,W1.NOT_READY_SECS
,W1.AGENT_UNRESPONSIVE_SECS
,W1.POST_LOGIN_SECS
,W1.BREAK_SECS
,W1.WRAP_SECS
,W1.NR_05_SECS
,W1.NR_06_SECS
,W1.NR_07_SECS
,W1.DIAL_PENDING_SECS
,W1.STATE_UNKNOWN_SECS
,W1.Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,W1.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,W1.Q_IN_CALLS_IN_AGT_ANS_SECS
,W1.Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,W1.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W1.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W1.Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,W1.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W1.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W1.Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,W1.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,W1.Q_IN_CALLS_IN_AGT_ANS_CT
,W1.Q_IN_CALLS_AGT_CALLS_HOLD_CT
,W1.Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,W1.Q_IN_CALLS_AGT_CALLS_TRANS_CT
,W1.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,W1.Q_IN_CALLS_IN_AGT_COMPLETED_CT
,W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,W1.NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,W1.TOTAL_CALLS
,W1.AUTHORIZED_WRAP
,W1.CPROD
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_MINUTES
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID

FROM           WSOL_TB_IMPORTS_HUMACH_INVOICING_1    W1
WHERE ISNULL(W1.FF_AGENT_FIRST_NAME,'') IN ('agentFirstName')

--======================================================================
--DELETE COLUMN HEADER AND JUNK RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_HUMACH_INVOICING_1
WHERE ISNULL(FF_AGENT_FIRST_NAME,'') IN ('agentFirstName')
--======================================================================

--UPDATE WSOL_TB_IMPORTS_HUMACH_INVOICING_1 SET
-- FF_AGENT_LAST_NAME = 'Stewart_ASA'
--WHERE FF_AGENT_LAST_NAME = 'Stewart_AMA' AND FF_AGENT_ID = '6138'

--=============================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_1) TABLE THAT WEREN'T IN IMPORTED FILE:
--=============================================================================
UPDATE WSOL_TB_IMPORTS_HUMACH_INVOICING_1 SET
-- HOUR_INTERVAL				= CAST(SUBSTRING(FF_INTERVAL_START_TS, 12, 2) AS INT)
 RESOURCE_NAME				= ISNULL(FF_AGENT_FIRST_NAME,'') + ' ' + ISNULL(FF_AGENT_LAST_NAME,'')

,LOGGED_IN_SECS				= CAST(ISNULL(FF_STATE_LOGGED_IN_SECS	,'0.00') AS DECIMAL(10,2))
,READY_SECS					= CAST(ISNULL(FF_STATE_READY_SECS		,'0.00') AS DECIMAL(10,2))
,ASSIGNED_SECS				= CAST(ISNULL(FF_STATE_ASSIGNED_SECS	,'0.00') AS DECIMAL(10,2))
,BUSY_SECS					= CAST(ISNULL(FF_STATE_BUSY_SECS		,'0.00') AS DECIMAL(10,2))
,NOT_READY_SECS				= CAST(ISNULL(FF_STATE_NR_SECS			,'0.00') AS DECIMAL(10,2))
,AGENT_UNRESPONSIVE_SECS	= CAST(ISNULL(FF_STATE_NR_01_SECS		,'0.00') AS DECIMAL(10,2))
,POST_LOGIN_SECS			= CAST(ISNULL(FF_STATE_NR_02_SECS		,'0.00') AS DECIMAL(10,2))
,BREAK_SECS					= CAST(ISNULL(FF_STATE_NR_03_SECS		,'0.00') AS DECIMAL(10,2))
,WRAP_SECS					= CAST(ISNULL(FF_STATE_NR_04_SECS		,'0.00') AS DECIMAL(10,2))
,NR_05_SECS					= CAST(ISNULL(FF_STATE_NR_05_SECS		,'0.00') AS DECIMAL(10,2))
,NR_06_SECS					= CAST(ISNULL(FF_STATE_NR_06_SECS		,'0.00') AS DECIMAL(10,2))
,NR_07_SECS					= CAST(ISNULL(FF_STATE_NR_07_SECS		,'0.00') AS DECIMAL(10,2))
,DIAL_PENDING_SECS			= CAST(ISNULL(FF_STATE_DIAL_PENDING_SECS,'0.00') AS DECIMAL(10,2))
,STATE_UNKNOWN_SECS			= CAST(ISNULL(FF_STATE_UNKNOWN_SECS		,'0.00') AS DECIMAL(10,2))

,Q_IN_CALLS_IN_AGT_ASSIGNED_SECS					= CAST(ISNULL(FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS					,'0.00') AS DECIMAL(10,2))
,Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS				= CAST(ISNULL(FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS				,'0.00') AS DECIMAL(10,2))
,Q_IN_CALLS_IN_AGT_ANS_SECS							= CAST(ISNULL(FF_Q_IN_CALLS_IN_AGT_ANS_SECS							,'0.00') AS DECIMAL(10,2))
,Q_IN_CALLS_AGT_CALLS_TRANS_SECS					= CAST(ISNULL(FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS					,'0.00') AS DECIMAL(10,2))
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS			= CAST(ISNULL(FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS			,'0.00') AS DECIMAL(10,2))
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS			= CAST(ISNULL(FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS			,'0.00') AS DECIMAL(10,2))
,Q_IN_CALLS_AGT_CALLS_HOLD_SECS						= CAST(ISNULL(FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS						,'0.00') AS DECIMAL(10,2))
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS	= CAST(ISNULL(FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS	,'0.00') AS DECIMAL(10,2))
,Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS				= CAST(ISNULL(FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS				,'0.00') AS DECIMAL(10,2))
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS		= CAST(ISNULL(FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS		,'0.00') AS DECIMAL(10,2))
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS		= CAST(ISNULL(FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS		,'0.00') AS DECIMAL(10,2))
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS	= CAST(ISNULL(FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS	,'0.00') AS DECIMAL(10,2))

,Q_IN_CALLS_IN_AGT_ASSIGNED_CT			= CAST(ISNULL(FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT			,'0.00') AS DECIMAL(10,2))
,Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT	= CAST(ISNULL(FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT	,'0.00') AS DECIMAL(10,2))
,Q_IN_CALLS_IN_AGT_ANS_CT				= CAST(ISNULL(FF_Q_IN_CALLS_IN_AGT_ANS_CT				,'0.00') AS DECIMAL(10,2))
,Q_IN_CALLS_AGT_CALLS_HOLD_CT			= CAST(ISNULL(FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT			,'0.00') AS DECIMAL(10,2))
,Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT		= CAST(ISNULL(FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT		,'0.00') AS DECIMAL(10,2))
,Q_IN_CALLS_AGT_CALLS_TRANS_CT			= CAST(ISNULL(FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT			,'0.00') AS DECIMAL(10,2))
,Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT		= CAST(ISNULL(FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT		,'0.00') AS DECIMAL(10,2))
,Q_IN_CALLS_IN_AGT_COMPLETED_CT			= CAST(ISNULL(FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT			,'0.00') AS DECIMAL(10,2))
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CT		= CAST(ISNULL(FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT		,'0.00') AS DECIMAL(10,2))
,NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT	= CAST(ISNULL(FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT	,'0.00') AS DECIMAL(10,2))


UPDATE WSOL_TB_IMPORTS_HUMACH_INVOICING_1 SET
 [DATETIME] = CAST(REPLACE(REPLACE(FF_INTERVAL_START_TS	,'T',' '),'Z','') AS DATETIME)

DECLARE
 @DTO	AS DATETIMEOFFSET
,@CST	AS DATETIME

SET @DTO = CONVERT(DATETIMEOFFSET, GETDATE()) AT TIME ZONE 'Central Standard Time'
SET @CST = CONVERT(DATETIME, @DTO)

UPDATE WSOL_TB_IMPORTS_HUMACH_INVOICING_1 SET
 [DATETIME] = DATEADD(hh, -(DATEPART(HH, GETUTCDATE() - @CST)), [DATETIME])

UPDATE WSOL_TB_IMPORTS_HUMACH_INVOICING_1 SET
 HOUR_INTERVAL = CAST(DATEPART(HH,[DATETIME]) AS INT)
 
UPDATE WSOL_TB_IMPORTS_HUMACH_INVOICING_1 SET
 [DATETIME] = CAST(CONVERT(VARCHAR(10), [DATETIME], 111) + ' ' + CONVERT(VARCHAR(2), HOUR_INTERVAL) + ':00:00.000' AS DATETIME)

UPDATE WSOL_TB_IMPORTS_HUMACH_INVOICING_1 SET
 TOTAL_CALLS = Q_IN_CALLS_IN_AGT_COMPLETED_CT + NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
 
UPDATE WSOL_TB_IMPORTS_HUMACH_INVOICING_1 SET
 FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS = CASE WHEN CAST(ISNULL(FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS,'0.00') AS DECIMAL(10,2)) > 900.00 THEN '0.00'
											ELSE FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS END
 
-- [DATETIME]	= CAST(CONVERT(VARCHAR(10), LEFT(FF_INTERVAL_START_TS,10), 111) + ' ' + CONVERT(VARCHAR(2), HOUR_INTERVAL) + ':00' AS DATETIME)

UPDATE WSOL_TB_IMPORTS_HUMACH_INVOICING_1 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM		WSOL_TB_IMPORTS_HUMACH_INVOICING_1	I
INNER JOIN	DATE_TIME							DT   ON DT.CAL_DATE = I.[DATETIME]

--============================================================================
--REMOVE AFTER-HOURS RECORDS FOR i9 SPORTS
--HOURS OF OPERATION = M-F 8AM - 9PM CT
--============================================================================
INSERT INTO WSOL_TB_IMPORTS_HUMACH_INVOICING_BAD
(BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_AGENT_ID
,FF_CUSTOMER_NAME
,FF_CUSTOMER_ID
,FF_INTERVAL
,FF_AGENT_PERFORMANCE_INTERVAL_ID
,FF_INTERVAL_START_TS
,FF_AGENT_LOGIN_START_TS
,FF_STATE_LOGGED_IN_SECS
,FF_STATE_READY_SECS
,FF_STATE_ASSIGNED_SECS
,FF_STATE_BUSY_SECS
,FF_STATE_NR_SECS
,FF_STATE_NR_01_SECS
,FF_STATE_NR_02_SECS
,FF_STATE_NR_03_SECS
,FF_STATE_NR_04_SECS
,FF_STATE_NR_05_SECS
,FF_STATE_NR_06_SECS
,FF_STATE_NR_07_SECS
,FF_STATE_DIAL_PENDING_SECS
,FF_STATE_UNKNOWN_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,FF_Q_IN_CALLS_IN_AGT_ANS_SECS
,FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,FF_Q_IN_CALLS_IN_AGT_ANS_CT
,FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT
,FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT
,FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS
,FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS
,FF_Q_OUT_CALLS_IN_AGT_ANS_SECS
,FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS
,FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_NON_Q_CALLS_IN_AGT_ANS_SECS
,FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,RESOURCE_NAME
,LOGGED_IN_SECS
,READY_SECS
,ASSIGNED_SECS
,BUSY_SECS
,NOT_READY_SECS
,AGENT_UNRESPONSIVE_SECS
,POST_LOGIN_SECS
,BREAK_SECS
,WRAP_SECS
,NR_05_SECS
,NR_06_SECS
,NR_07_SECS
,DIAL_PENDING_SECS
,STATE_UNKNOWN_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,Q_IN_CALLS_IN_AGT_ANS_SECS
,Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,Q_IN_CALLS_IN_AGT_ANS_CT
,Q_IN_CALLS_AGT_CALLS_HOLD_CT
,Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,Q_IN_CALLS_AGT_CALLS_TRANS_CT
,Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,Q_IN_CALLS_IN_AGT_COMPLETED_CT
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,TOTAL_CALLS
,AUTHORIZED_WRAP
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
)
SELECT
 'OBH'					--BAD_IMPORTS_CODE		--'Outside Business Hours'
,'ACT'					--BAD_IMPORTS_FILE_TYPE --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME	--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_AGENT_FIRST_NAME
,W1.FF_AGENT_LAST_NAME
,W1.FF_AGENT_ID
,W1.FF_CUSTOMER_NAME
,W1.FF_CUSTOMER_ID
,W1.FF_INTERVAL
,W1.FF_AGENT_PERFORMANCE_INTERVAL_ID
,W1.FF_INTERVAL_START_TS
,W1.FF_AGENT_LOGIN_START_TS
,W1.FF_STATE_LOGGED_IN_SECS
,W1.FF_STATE_READY_SECS
,W1.FF_STATE_ASSIGNED_SECS
,W1.FF_STATE_BUSY_SECS
,W1.FF_STATE_NR_SECS
,W1.FF_STATE_NR_01_SECS
,W1.FF_STATE_NR_02_SECS
,W1.FF_STATE_NR_03_SECS
,W1.FF_STATE_NR_04_SECS
,W1.FF_STATE_NR_05_SECS
,W1.FF_STATE_NR_06_SECS
,W1.FF_STATE_NR_07_SECS
,W1.FF_STATE_DIAL_PENDING_SECS
,W1.FF_STATE_UNKNOWN_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_ANS_SECS
,W1.FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W1.FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,W1.FF_Q_IN_CALLS_IN_AGT_ANS_CT
,W1.FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT
,W1.FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,W1.FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT
,W1.FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS
,W1.FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W1.FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS
,W1.FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,W1.FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_ANS_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,W1.FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS
,W1.FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_ANS_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.RESOURCE_NAME
,W1.LOGGED_IN_SECS
,W1.READY_SECS
,W1.ASSIGNED_SECS
,W1.BUSY_SECS
,W1.NOT_READY_SECS
,W1.AGENT_UNRESPONSIVE_SECS
,W1.POST_LOGIN_SECS
,W1.BREAK_SECS
,W1.WRAP_SECS
,W1.NR_05_SECS
,W1.NR_06_SECS
,W1.NR_07_SECS
,W1.DIAL_PENDING_SECS
,W1.STATE_UNKNOWN_SECS
,W1.Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,W1.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,W1.Q_IN_CALLS_IN_AGT_ANS_SECS
,W1.Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,W1.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W1.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W1.Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,W1.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W1.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W1.Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,W1.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,W1.Q_IN_CALLS_IN_AGT_ANS_CT
,W1.Q_IN_CALLS_AGT_CALLS_HOLD_CT
,W1.Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,W1.Q_IN_CALLS_AGT_CALLS_TRANS_CT
,W1.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,W1.Q_IN_CALLS_IN_AGT_COMPLETED_CT
,W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,W1.NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,W1.TOTAL_CALLS
,W1.AUTHORIZED_WRAP
,W1.CPROD
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_MINUTES
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
FROM		WSOL_TB_IMPORTS_HUMACH_INVOICING_1	W1
WHERE FF_CUSTOMER_ID = 190
  AND HOUR_INTERVAL IN (22,23,0,1,2,3,4,5,6,7)
--============================================================================
--DELETE AFTER-HOURS RECORDS FOR i9 SPORTS
--============================================================================
DELETE FROM WSOL_TB_IMPORTS_HUMACH_INVOICING_1
WHERE FF_CUSTOMER_ID = 190
  AND HOUR_INTERVAL IN (22,23,0,1,2,3,4,5,6,7)
--============================================================================


--============================================================================
--REMOVE WEEKEND RECORDS FOR i9 SPORTS
--HOURS OF OPERATION = M-F 8AM - 9PM CT
--============================================================================
SET DATEFIRST 1

INSERT INTO WSOL_TB_IMPORTS_HUMACH_INVOICING_BAD
(BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_AGENT_ID
,FF_CUSTOMER_NAME
,FF_CUSTOMER_ID
,FF_INTERVAL
,FF_AGENT_PERFORMANCE_INTERVAL_ID
,FF_INTERVAL_START_TS
,FF_AGENT_LOGIN_START_TS
,FF_STATE_LOGGED_IN_SECS
,FF_STATE_READY_SECS
,FF_STATE_ASSIGNED_SECS
,FF_STATE_BUSY_SECS
,FF_STATE_NR_SECS
,FF_STATE_NR_01_SECS
,FF_STATE_NR_02_SECS
,FF_STATE_NR_03_SECS
,FF_STATE_NR_04_SECS
,FF_STATE_NR_05_SECS
,FF_STATE_NR_06_SECS
,FF_STATE_NR_07_SECS
,FF_STATE_DIAL_PENDING_SECS
,FF_STATE_UNKNOWN_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,FF_Q_IN_CALLS_IN_AGT_ANS_SECS
,FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,FF_Q_IN_CALLS_IN_AGT_ANS_CT
,FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT
,FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT
,FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS
,FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS
,FF_Q_OUT_CALLS_IN_AGT_ANS_SECS
,FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS
,FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_NON_Q_CALLS_IN_AGT_ANS_SECS
,FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,RESOURCE_NAME
,LOGGED_IN_SECS
,READY_SECS
,ASSIGNED_SECS
,BUSY_SECS
,NOT_READY_SECS
,AGENT_UNRESPONSIVE_SECS
,POST_LOGIN_SECS
,BREAK_SECS
,WRAP_SECS
,NR_05_SECS
,NR_06_SECS
,NR_07_SECS
,DIAL_PENDING_SECS
,STATE_UNKNOWN_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,Q_IN_CALLS_IN_AGT_ANS_SECS
,Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,Q_IN_CALLS_IN_AGT_ANS_CT
,Q_IN_CALLS_AGT_CALLS_HOLD_CT
,Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,Q_IN_CALLS_AGT_CALLS_TRANS_CT
,Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,Q_IN_CALLS_IN_AGT_COMPLETED_CT
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,TOTAL_CALLS
,AUTHORIZED_WRAP
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
)
SELECT
 'OBH'					--BAD_IMPORTS_CODE		--'Outside Business Hours'
,'ACT'					--BAD_IMPORTS_FILE_TYPE --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME	--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_AGENT_FIRST_NAME
,W1.FF_AGENT_LAST_NAME
,W1.FF_AGENT_ID
,W1.FF_CUSTOMER_NAME
,W1.FF_CUSTOMER_ID
,W1.FF_INTERVAL
,W1.FF_AGENT_PERFORMANCE_INTERVAL_ID
,W1.FF_INTERVAL_START_TS
,W1.FF_AGENT_LOGIN_START_TS
,W1.FF_STATE_LOGGED_IN_SECS
,W1.FF_STATE_READY_SECS
,W1.FF_STATE_ASSIGNED_SECS
,W1.FF_STATE_BUSY_SECS
,W1.FF_STATE_NR_SECS
,W1.FF_STATE_NR_01_SECS
,W1.FF_STATE_NR_02_SECS
,W1.FF_STATE_NR_03_SECS
,W1.FF_STATE_NR_04_SECS
,W1.FF_STATE_NR_05_SECS
,W1.FF_STATE_NR_06_SECS
,W1.FF_STATE_NR_07_SECS
,W1.FF_STATE_DIAL_PENDING_SECS
,W1.FF_STATE_UNKNOWN_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_ANS_SECS
,W1.FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W1.FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,W1.FF_Q_IN_CALLS_IN_AGT_ANS_CT
,W1.FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT
,W1.FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,W1.FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT
,W1.FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS
,W1.FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W1.FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS
,W1.FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,W1.FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_ANS_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,W1.FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS
,W1.FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_ANS_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.RESOURCE_NAME
,W1.LOGGED_IN_SECS
,W1.READY_SECS
,W1.ASSIGNED_SECS
,W1.BUSY_SECS
,W1.NOT_READY_SECS
,W1.AGENT_UNRESPONSIVE_SECS
,W1.POST_LOGIN_SECS
,W1.BREAK_SECS
,W1.WRAP_SECS
,W1.NR_05_SECS
,W1.NR_06_SECS
,W1.NR_07_SECS
,W1.DIAL_PENDING_SECS
,W1.STATE_UNKNOWN_SECS
,W1.Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,W1.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,W1.Q_IN_CALLS_IN_AGT_ANS_SECS
,W1.Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,W1.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W1.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W1.Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,W1.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W1.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W1.Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,W1.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,W1.Q_IN_CALLS_IN_AGT_ANS_CT
,W1.Q_IN_CALLS_AGT_CALLS_HOLD_CT
,W1.Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,W1.Q_IN_CALLS_AGT_CALLS_TRANS_CT
,W1.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,W1.Q_IN_CALLS_IN_AGT_COMPLETED_CT
,W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,W1.NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,W1.TOTAL_CALLS
,W1.AUTHORIZED_WRAP
,W1.CPROD
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_MINUTES
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
FROM		WSOL_TB_IMPORTS_HUMACH_INVOICING_1	W1
WHERE FF_CUSTOMER_ID = 190
  AND DATEPART(WEEKDAY,[DATETIME]) IN (6,7) -- SATURDAY AND SUNDAY
--============================================================================
--DELETE WEEKEND RECORDS FOR i9 SPORTS
--============================================================================
DELETE FROM WSOL_TB_IMPORTS_HUMACH_INVOICING_1
WHERE FF_CUSTOMER_ID = 190
  AND DATEPART(WEEKDAY,[DATETIME]) IN (6,7) -- SATURDAY AND SUNDAY
--============================================================================


--============================================================================
--HANDLE INVALID DATE/TIME RECORDS:
--============================================================================
INSERT INTO WSOL_TB_IMPORTS_HUMACH_INVOICING_BAD
(BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_AGENT_ID
,FF_CUSTOMER_NAME
,FF_CUSTOMER_ID
,FF_INTERVAL
,FF_AGENT_PERFORMANCE_INTERVAL_ID
,FF_INTERVAL_START_TS
,FF_AGENT_LOGIN_START_TS
,FF_STATE_LOGGED_IN_SECS
,FF_STATE_READY_SECS
,FF_STATE_ASSIGNED_SECS
,FF_STATE_BUSY_SECS
,FF_STATE_NR_SECS
,FF_STATE_NR_01_SECS
,FF_STATE_NR_02_SECS
,FF_STATE_NR_03_SECS
,FF_STATE_NR_04_SECS
,FF_STATE_NR_05_SECS
,FF_STATE_NR_06_SECS
,FF_STATE_NR_07_SECS
,FF_STATE_DIAL_PENDING_SECS
,FF_STATE_UNKNOWN_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,FF_Q_IN_CALLS_IN_AGT_ANS_SECS
,FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,FF_Q_IN_CALLS_IN_AGT_ANS_CT
,FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT
,FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT
,FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS
,FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS
,FF_Q_OUT_CALLS_IN_AGT_ANS_SECS
,FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS
,FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_NON_Q_CALLS_IN_AGT_ANS_SECS
,FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,RESOURCE_NAME
,LOGGED_IN_SECS
,READY_SECS
,ASSIGNED_SECS
,BUSY_SECS
,NOT_READY_SECS
,AGENT_UNRESPONSIVE_SECS
,POST_LOGIN_SECS
,BREAK_SECS
,WRAP_SECS
,NR_05_SECS
,NR_06_SECS
,NR_07_SECS
,DIAL_PENDING_SECS
,STATE_UNKNOWN_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,Q_IN_CALLS_IN_AGT_ANS_SECS
,Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,Q_IN_CALLS_IN_AGT_ANS_CT
,Q_IN_CALLS_AGT_CALLS_HOLD_CT
,Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,Q_IN_CALLS_AGT_CALLS_TRANS_CT
,Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,Q_IN_CALLS_IN_AGT_COMPLETED_CT
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,TOTAL_CALLS
,AUTHORIZED_WRAP
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
)
SELECT
 'DTM'					--BAD_IMPORTS_CODE		--'Invalid Date/Time'
,'ACT'					--BAD_IMPORTS_FILE_TYPE --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME	--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_AGENT_FIRST_NAME
,W1.FF_AGENT_LAST_NAME
,W1.FF_AGENT_ID
,W1.FF_CUSTOMER_NAME
,W1.FF_CUSTOMER_ID
,W1.FF_INTERVAL
,W1.FF_AGENT_PERFORMANCE_INTERVAL_ID
,W1.FF_INTERVAL_START_TS
,W1.FF_AGENT_LOGIN_START_TS
,W1.FF_STATE_LOGGED_IN_SECS
,W1.FF_STATE_READY_SECS
,W1.FF_STATE_ASSIGNED_SECS
,W1.FF_STATE_BUSY_SECS
,W1.FF_STATE_NR_SECS
,W1.FF_STATE_NR_01_SECS
,W1.FF_STATE_NR_02_SECS
,W1.FF_STATE_NR_03_SECS
,W1.FF_STATE_NR_04_SECS
,W1.FF_STATE_NR_05_SECS
,W1.FF_STATE_NR_06_SECS
,W1.FF_STATE_NR_07_SECS
,W1.FF_STATE_DIAL_PENDING_SECS
,W1.FF_STATE_UNKNOWN_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_ANS_SECS
,W1.FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W1.FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,W1.FF_Q_IN_CALLS_IN_AGT_ANS_CT
,W1.FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT
,W1.FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,W1.FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT
,W1.FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS
,W1.FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W1.FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS
,W1.FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,W1.FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_ANS_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,W1.FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS
,W1.FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_ANS_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.RESOURCE_NAME
,W1.LOGGED_IN_SECS
,W1.READY_SECS
,W1.ASSIGNED_SECS
,W1.BUSY_SECS
,W1.NOT_READY_SECS
,W1.AGENT_UNRESPONSIVE_SECS
,W1.POST_LOGIN_SECS
,W1.BREAK_SECS
,W1.WRAP_SECS
,W1.NR_05_SECS
,W1.NR_06_SECS
,W1.NR_07_SECS
,W1.DIAL_PENDING_SECS
,W1.STATE_UNKNOWN_SECS
,W1.Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,W1.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,W1.Q_IN_CALLS_IN_AGT_ANS_SECS
,W1.Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,W1.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W1.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W1.Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,W1.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W1.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W1.Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,W1.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,W1.Q_IN_CALLS_IN_AGT_ANS_CT
,W1.Q_IN_CALLS_AGT_CALLS_HOLD_CT
,W1.Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,W1.Q_IN_CALLS_AGT_CALLS_TRANS_CT
,W1.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,W1.Q_IN_CALLS_IN_AGT_COMPLETED_CT
,W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,W1.NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,W1.TOTAL_CALLS
,W1.AUTHORIZED_WRAP
,W1.CPROD
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_MINUTES
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
FROM		WSOL_TB_IMPORTS_HUMACH_INVOICING_1	W1
WHERE ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) = 0
--============================================================================
--DELETE INVALID DATE/TIME RECORDS;
--============================================================================
DELETE FROM WSOL_TB_IMPORTS_HUMACH_INVOICING_1
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--============================================================================


--===========================================================================================================================================
--HANDLE DUPLICATES:
--===========================================================================================================================================
INSERT INTO WSOL_TB_IMPORTS_HUMACH_INVOICING_BAD
(BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_AGENT_ID
,FF_CUSTOMER_NAME
,FF_CUSTOMER_ID
,FF_INTERVAL
,FF_AGENT_PERFORMANCE_INTERVAL_ID
,FF_INTERVAL_START_TS
,FF_AGENT_LOGIN_START_TS
,FF_STATE_LOGGED_IN_SECS
,FF_STATE_READY_SECS
,FF_STATE_ASSIGNED_SECS
,FF_STATE_BUSY_SECS
,FF_STATE_NR_SECS
,FF_STATE_NR_01_SECS
,FF_STATE_NR_02_SECS
,FF_STATE_NR_03_SECS
,FF_STATE_NR_04_SECS
,FF_STATE_NR_05_SECS
,FF_STATE_NR_06_SECS
,FF_STATE_NR_07_SECS
,FF_STATE_DIAL_PENDING_SECS
,FF_STATE_UNKNOWN_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,FF_Q_IN_CALLS_IN_AGT_ANS_SECS
,FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,FF_Q_IN_CALLS_IN_AGT_ANS_CT
,FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT
,FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT
,FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS
,FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS
,FF_Q_OUT_CALLS_IN_AGT_ANS_SECS
,FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS
,FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_NON_Q_CALLS_IN_AGT_ANS_SECS
,FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,RESOURCE_NAME
,LOGGED_IN_SECS
,READY_SECS
,ASSIGNED_SECS
,BUSY_SECS
,NOT_READY_SECS
,AGENT_UNRESPONSIVE_SECS
,POST_LOGIN_SECS
,BREAK_SECS
,WRAP_SECS
,NR_05_SECS
,NR_06_SECS
,NR_07_SECS
,DIAL_PENDING_SECS
,STATE_UNKNOWN_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,Q_IN_CALLS_IN_AGT_ANS_SECS
,Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,Q_IN_CALLS_IN_AGT_ANS_CT
,Q_IN_CALLS_AGT_CALLS_HOLD_CT
,Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,Q_IN_CALLS_AGT_CALLS_TRANS_CT
,Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,Q_IN_CALLS_IN_AGT_COMPLETED_CT
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,TOTAL_CALLS
,AUTHORIZED_WRAP
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
)
SELECT
 'DUP'					--BAD_IMPORTS_CODE		--'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME	--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_AGENT_FIRST_NAME
,W1.FF_AGENT_LAST_NAME
,W1.FF_AGENT_ID
,W1.FF_CUSTOMER_NAME
,W1.FF_CUSTOMER_ID
,W1.FF_INTERVAL
,W1.FF_AGENT_PERFORMANCE_INTERVAL_ID
,W1.FF_INTERVAL_START_TS
,W1.FF_AGENT_LOGIN_START_TS
,W1.FF_STATE_LOGGED_IN_SECS
,W1.FF_STATE_READY_SECS
,W1.FF_STATE_ASSIGNED_SECS
,W1.FF_STATE_BUSY_SECS
,W1.FF_STATE_NR_SECS
,W1.FF_STATE_NR_01_SECS
,W1.FF_STATE_NR_02_SECS
,W1.FF_STATE_NR_03_SECS
,W1.FF_STATE_NR_04_SECS
,W1.FF_STATE_NR_05_SECS
,W1.FF_STATE_NR_06_SECS
,W1.FF_STATE_NR_07_SECS
,W1.FF_STATE_DIAL_PENDING_SECS
,W1.FF_STATE_UNKNOWN_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_ANS_SECS
,W1.FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W1.FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,W1.FF_Q_IN_CALLS_IN_AGT_ANS_CT
,W1.FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT
,W1.FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,W1.FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT
,W1.FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS
,W1.FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS
,W1.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W1.FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS
,W1.FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS
,W1.FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,W1.FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_ANS_SECS
,W1.FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,W1.FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS
,W1.FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS
,W1.FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_ANS_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS
,W1.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.RESOURCE_NAME
,W1.LOGGED_IN_SECS
,W1.READY_SECS
,W1.ASSIGNED_SECS
,W1.BUSY_SECS
,W1.NOT_READY_SECS
,W1.AGENT_UNRESPONSIVE_SECS
,W1.POST_LOGIN_SECS
,W1.BREAK_SECS
,W1.WRAP_SECS
,W1.NR_05_SECS
,W1.NR_06_SECS
,W1.NR_07_SECS
,W1.DIAL_PENDING_SECS
,W1.STATE_UNKNOWN_SECS
,W1.Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,W1.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,W1.Q_IN_CALLS_IN_AGT_ANS_SECS
,W1.Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,W1.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W1.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W1.Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,W1.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W1.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W1.Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,W1.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,W1.Q_IN_CALLS_IN_AGT_ANS_CT
,W1.Q_IN_CALLS_AGT_CALLS_HOLD_CT
,W1.Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,W1.Q_IN_CALLS_AGT_CALLS_TRANS_CT
,W1.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,W1.Q_IN_CALLS_IN_AGT_COMPLETED_CT
,W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,W1.NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,W1.TOTAL_CALLS
,W1.AUTHORIZED_WRAP
,W1.CPROD
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_MINUTES
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
FROM
(	SELECT
	 FF_INTERVAL_START_TS
	,FF_AGENT_ID
	,RESOURCE_NAME
	,FF_CUSTOMER_ID
	,ROW_NUMBER() over (partition by FF_INTERVAL_START_TS, FF_AGENT_ID, RESOURCE_NAME, FF_CUSTOMER_ID
                            order by FF_INTERVAL_START_TS, FF_AGENT_ID, RESOURCE_NAME, FF_CUSTOMER_ID, LOGGED_IN_SECS DESC) ROWNO
	FROM WSOL_TB_IMPORTS_HUMACH_INVOICING_1
) TNM
LEFT JOIN      WSOL_TB_IMPORTS_HUMACH_INVOICING_1	W1	ON W1.FF_INTERVAL_START_TS	= TNM.FF_INTERVAL_START_TS
													   AND W1.FF_AGENT_ID			= TNM.FF_AGENT_ID
													   AND W1.RESOURCE_NAME			= TNM.RESOURCE_NAME
													   AND W1.FF_CUSTOMER_ID		= TNM.FF_CUSTOMER_ID
WHERE TNM.ROWNO > 1

--===========================================================================================================================================
--DELETE DUPLICATES:
--===========================================================================================================================================
DELETE FROM TNM  
FROM
(	SELECT
	 FF_INTERVAL_START_TS
	,FF_AGENT_ID
	,RESOURCE_NAME
	,FF_CUSTOMER_ID
	,ROW_NUMBER() over (partition by FF_INTERVAL_START_TS, FF_AGENT_ID, RESOURCE_NAME, FF_CUSTOMER_ID
                            order by FF_INTERVAL_START_TS, FF_AGENT_ID, RESOURCE_NAME, FF_CUSTOMER_ID, LOGGED_IN_SECS DESC) ROWNO
	FROM WSOL_TB_IMPORTS_HUMACH_INVOICING_1
) TNM
WHERE TNM.ROWNO > 1
--===========================================================================================================================================

--  SELECT * FROM WSOL_TB_IMPORTS_HUMACH_INVOICING_1 ORDER BY [DATETIME] DESC

--============================================================================================
--DETERMINE ID EXTENSION
--============================================================================================
UPDATE WSOL_TB_IMPORTS_HUMACH_INVOICING_1 SET
 ID_EXT = CASE WHEN CHARINDEX('_', FF_AGENT_LAST_NAME) = 0 THEN ''
			   WHEN RIGHT(FF_AGENT_LAST_NAME, 3) NOT IN ('ACA','AMA','ARA','ASA','AOA','INS','INR','INB') THEN ''
			   ELSE RIGHT(FF_AGENT_LAST_NAME, 3) END

--===========================================================================================================================================
--SET ANY HOLIDAY FLAGS
--===========================================================================================================================================
UPDATE WSOL_TB_IMPORTS_HUMACH_INVOICING_1 SET
 AIR_DAY_TYPE = CASE WHEN IG.HAS_HOLIDAYS = 'Y' AND
						 (    ISNULL(IH.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) OR
						   ( ISNULL(IHA.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) AND ISNULL(IHA.ID_EXT,'') <> '' )
						 )
					  THEN 'H' ELSE 'S' END  --AS AIR_DAY_TYPE  --H=Holiday  --S=Standard
FROM            WSOL_TB_IMPORTS_HUMACH_INVOICING_1               I
INNER JOIN      DATE_TIME										 DT   ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY
LEFT JOIN       WSOL_TB_IMPORTS_HUMACH_SD_INVOICE_GROUPS         IG   ON IG.ID_EXT              = I.ID_EXT
LEFT JOIN       WSOL_TB_IMPORTS_HUMACH_SD_INVOICE_HOLIDAYS       IH   ON IH.HOLIDAY_DATE        = CAST(DT.CAL_DATE_STRING AS DATETIME)
LEFT JOIN       WSOL_TB_IMPORTS_HUMACH_SD_INVOICE_HOLIDAYS_ADDL  IHA  ON IHA.HOLIDAY_DATE       = CAST(DT.CAL_DATE_STRING AS DATETIME)
																	 AND IHA.ID_EXT             = I.ID_EXT
																	 
--===========================================================================================================================================
--SET INVOICING FIELDS
--===========================================================================================================================================
UPDATE WSOL_TB_IMPORTS_HUMACH_INVOICING_1 SET
 TENANT_KEY						= ISNULL(IG.TENANT_KEY,'')
,SCHEDULER_ACL_NAME				= ISNULL(IG.SCHEDULER_ACL_NAME,'')
,AIR_ACW_FONT_COLOR             = 'Black'

,MIN_GUARANTEE_MINUTES          = ISNULL(IG.MIN_GUARANTEE_MINUTES,0)        --varies between scheduler acl names.
,MIN_GUARANTEE_TYPE             = ISNULL(IG.MIN_GUARANTEE_TYPE,'')          --varies between scheduler acl names.
,AUTHORIZED_TO_INVOICE_TYPE     = ISNULL(IG.AUTHORIZED_TO_INVOICE_TYPE,'')  --varies between scheduler acl names.

,HAS_HOLIDAYS    = IG.HAS_HOLIDAYS
,INCLUDE_IN_CAS  = IG.INCLUDE_IN_CAS
,READY_FOR_XML   = IG.READY_FOR_XML
,SHOW_ID_EXTS    = IG.SHOW_ID_EXTS

FROM            WSOL_TB_IMPORTS_HUMACH_INVOICING_1        I
LEFT JOIN       WSOL_TB_IMPORTS_HUMACH_SD_INVOICE_GROUPS  IG  ON IG.ID_EXT    = I.ID_EXT

--=====================================================================================================================
UPDATE WSOL_TB_IMPORTS_HUMACH_INVOICING_1 SET
 INVOICE_ID  = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
--,TENANT_NAME = AIASD.OFFICIAL_ACD_CLIENT_NAME 
FROM          WSOL_TB_IMPORTS_HUMACH_INVOICING_1				AIA 
LEFT JOIN     WSOL_TB_IMPORTS_HUMACH_SD_AIA_STATIC_DEFAULTS		AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT


--========================================================================
-- CHECK FOR BAD DATA FOUND IN IMPORT FILES:
--========================================================================
-- SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 900901
--========================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''

--Check #1:  =======================================================================================================================================================
	SET @RCD_CNT = (	SELECT COUNT(*) FROM WSOL_TB_IMPORTS_HUMACH_INVOICING_1 )
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + 'IMPORT ERROR! - File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #2:  =======================================================================================================================================================
--	SET @RCD_CNT  = (	SELECT COUNT(*) FROM WSOL_TB_IMPORTS_HUMACH_INVOICING_1  
--						WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--					)  
--	IF @RCD_CNT > 0 BEGIN
--		SET @MSG1 = @MSG1 + 'IMPORT ERROR! - Invalid DATETIME Intervals in HUMACH INVOICING IMPORT File.  Import was Cancelled.  Nothing was Imported.   |   ' 
--		SET @ERR_CNT = @ERR_CNT + 1
--	END
--Check #n:  =======================================================================================================================================================
--	SET @MSG1 = @MSG1 + '2) Something not right with something.  Import was cancelled.  Nothing was Imported.     '
--	--SET @RCD_CNT = (	SELECT COUNT(*)
--	--					FROM WSOL_TB_IMPORTS_HUMACH_INVOICING_1
--	--					WHERE 'something' <> 'somethingelse'
--	--				  )  --If nothing imported in work table, don't need to return error.  That check is done in SSIS currently.


--=============================== INSERT INTO PERMANENT TABLE (No Errors) OR SKIP AND GO TO END (Errors): ==========================================================
IF @ERR_CNT > 0 BEGIN
	--SSIS reads WSOL_TB_IMPORT_ERRORS_FOUND table where TENANT_KEY = 900901, and if record exists, outputs results/error_msg field in an email.
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND(
	TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'HUMACH_INVOICING'	--SUB_GROUP_NAME
	,@MSG1				--ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'HUMACH_INVOICING'	--SUB_GROUP_NAME
	,''					--ERROR_MSG  --NEVER SET THIS TO @MSG1 !!!  MUST BE ''.
END


--=======================================================================================
-- GROUP DATA BY HOUR INTERVALS
--=======================================================================================
DELETE FROM WSOL_TB_IMPORTS_HUMACH_INVOICING_2

INSERT INTO WSOL_TB_IMPORTS_HUMACH_INVOICING_2
(FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_AGENT_ID
,FF_CUSTOMER_NAME
,FF_CUSTOMER_ID
,FF_INTERVAL
,FF_AGENT_PERFORMANCE_INTERVAL_ID
,FF_INTERVAL_START_TS
,FF_AGENT_LOGIN_START_TS
,FF_STATE_LOGGED_IN_SECS
,FF_STATE_READY_SECS
,FF_STATE_ASSIGNED_SECS
,FF_STATE_BUSY_SECS
,FF_STATE_NR_SECS
,FF_STATE_NR_01_SECS
,FF_STATE_NR_02_SECS
,FF_STATE_NR_03_SECS
,FF_STATE_NR_04_SECS
,FF_STATE_NR_05_SECS
,FF_STATE_NR_06_SECS
,FF_STATE_NR_07_SECS
,FF_STATE_DIAL_PENDING_SECS
,FF_STATE_UNKNOWN_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,FF_Q_IN_CALLS_IN_AGT_ANS_SECS
,FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,FF_Q_IN_CALLS_IN_AGT_ANS_CT
,FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT
,FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT
,FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS
,FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS
,FF_Q_OUT_CALLS_IN_AGT_ANS_SECS
,FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS
,FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_NON_Q_CALLS_IN_AGT_ANS_SECS
,FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,RESOURCE_NAME
,LOGGED_IN_SECS
,READY_SECS
,ASSIGNED_SECS
,BUSY_SECS
,NOT_READY_SECS
,AGENT_UNRESPONSIVE_SECS
,POST_LOGIN_SECS
,BREAK_SECS
,WRAP_SECS
,NR_05_SECS
,NR_06_SECS
,NR_07_SECS
,DIAL_PENDING_SECS
,STATE_UNKNOWN_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,Q_IN_CALLS_IN_AGT_ANS_SECS
,Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,Q_IN_CALLS_IN_AGT_ANS_CT
,Q_IN_CALLS_AGT_CALLS_HOLD_CT
,Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,Q_IN_CALLS_AGT_CALLS_TRANS_CT
,Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,Q_IN_CALLS_IN_AGT_COMPLETED_CT
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,TOTAL_CALLS
,AUTHORIZED_WRAP
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 MAX(W1.FF_AGENT_FIRST_NAME)
,MAX(W1.FF_AGENT_LAST_NAME)
,W1.FF_AGENT_ID
,MAX(W1.FF_CUSTOMER_NAME)
,W1.FF_CUSTOMER_ID

,''						-- W1.FF_INTERVAL
,''						-- W1.FF_AGENT_PERFORMANCE_INTERVAL_ID

,MIN(CAST(REPLACE(REPLACE(W1.FF_INTERVAL_START_TS	,'T',' '),'Z','') AS DATETIME))
,MIN(CAST(REPLACE(REPLACE(W1.FF_AGENT_LOGIN_START_TS,'T',' '),'Z','') AS DATETIME))

,SUM(CAST(ISNULL(W1.FF_STATE_LOGGED_IN_SECS								,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_STATE_READY_SECS									,0)	AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_STATE_ASSIGNED_SECS								,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_STATE_BUSY_SECS									,0)	AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_STATE_NR_SECS									,0)	AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_STATE_NR_01_SECS									,0)	AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_STATE_NR_02_SECS									,0)	AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_STATE_NR_03_SECS									,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_STATE_NR_04_SECS									,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_STATE_NR_05_SECS									,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_STATE_NR_06_SECS									,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_STATE_NR_07_SECS									,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_STATE_DIAL_PENDING_SECS							,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_STATE_UNKNOWN_SECS								,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS					,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS			,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_IN_AGT_ANS_SECS						,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS					,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS		,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS		,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS					,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS	,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS				,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS		,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS		,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS	,0) AS DECIMAL(10,2)))

,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT					,0) AS INT))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT				,0) AS INT))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_IN_AGT_ANS_CT							,0) AS INT))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT						,0) AS INT))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT					,0) AS INT))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT					,0) AS INT))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT				,0) AS INT))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT					,0) AS INT))
,SUM(CAST(ISNULL(W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT					,0) AS INT))
,SUM(CAST(ISNULL(W1.FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT				,0) AS INT))

,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS				,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS		,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS		,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS					,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS				,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS				,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS					,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS	,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS					,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS					,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS	,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS				,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS				,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS		,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS		,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS				,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS			,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS				,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS		,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS		,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS					,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS	,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS				,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_OUT_CALLS_IN_AGT_ANS_SECS						,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS			,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS					,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS					,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS				,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS				,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS				,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS		,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_NON_Q_CALLS_IN_AGT_ANS_SECS						,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS					,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS		,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS			,0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(W1.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS	,0) AS DECIMAL(10,2)))

,MAX(W1.SEQNO_ADDED_TIME)
,MAX(W1.SEQNO)
,MAX(W1.FTP_FILE_NAME)

,MAX(W1.[DATETIME])
,MAX(W1.HOUR_INTERVAL)
,MAX(W1.RESOURCE_NAME)

,SUM(W1.LOGGED_IN_SECS)
,SUM(W1.READY_SECS)
,SUM(W1.ASSIGNED_SECS)
,SUM(W1.BUSY_SECS)
,SUM(W1.NOT_READY_SECS)
,SUM(W1.AGENT_UNRESPONSIVE_SECS)
,SUM(W1.POST_LOGIN_SECS)
,SUM(W1.BREAK_SECS)
,SUM(W1.WRAP_SECS)
,SUM(W1.NR_05_SECS)
,SUM(W1.NR_06_SECS)
,SUM(W1.NR_07_SECS)
,SUM(W1.DIAL_PENDING_SECS)
,SUM(W1.STATE_UNKNOWN_SECS)
,SUM(W1.Q_IN_CALLS_IN_AGT_ASSIGNED_SECS)
,SUM(W1.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS)
,SUM(W1.Q_IN_CALLS_IN_AGT_ANS_SECS)
,SUM(W1.Q_IN_CALLS_AGT_CALLS_TRANS_SECS)
,SUM(W1.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS)
,SUM(W1.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS)
,SUM(W1.Q_IN_CALLS_AGT_CALLS_HOLD_SECS)
,SUM(W1.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS)
,SUM(W1.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS)
,SUM(W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS)
,SUM(W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS)
,SUM(W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS)

,SUM(W1.Q_IN_CALLS_IN_AGT_ASSIGNED_CT)
,SUM(W1.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT)
,SUM(W1.Q_IN_CALLS_IN_AGT_ANS_CT)
,SUM(W1.Q_IN_CALLS_AGT_CALLS_HOLD_CT)
,SUM(W1.Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT)
,SUM(W1.Q_IN_CALLS_AGT_CALLS_TRANS_CT)
,SUM(W1.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT)
,SUM(W1.Q_IN_CALLS_IN_AGT_COMPLETED_CT)
,SUM(W1.NON_Q_CALLS_OUT_AGT_CALL_ANS_CT)
,SUM(W1.NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT)

,SUM(W1.TOTAL_CALLS)

,NULL	--AUTHORIZED_WRAP
,NULL	--CPROD
,NULL	--MINIMUM_GUARANTEE
,NULL	--AUTHORIZED_MINUTES
,NULL	--EMAIL

,ISNULL(W1.ID_EXT,'')
,MAX(ISNULL(W1.SCHEDULER_ACL_NAME,''))
,W1.STD_TENANT_START_DATE_TIME_KEY
,MAX(W1.CAL_DATE)
,MAX(W1.TENANT_KEY)
,MAX(ISNULL(W1.AIR_DAY_TYPE,''))
,MAX(ISNULL(W1.AIR_ACW_FONT_COLOR,''))
,MAX(ISNULL(W1.MIN_GUARANTEE_MINUTES,0.00))
,MAX(ISNULL(W1.MIN_GUARANTEE_TYPE,''))
,MAX(ISNULL(W1.AUTHORIZED_TO_INVOICE_TYPE,''))
,MAX(ISNULL(W1.HAS_HOLIDAYS,''))
,MAX(ISNULL(W1.INCLUDE_IN_CAS,''))
,MAX(ISNULL(W1.READY_FOR_XML,''))
,MAX(ISNULL(W1.SHOW_ID_EXTS,''))
,ISNULL(W1.INVOICE_ID,'')

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM		WSOL_TB_IMPORTS_HUMACH_INVOICING_1  W1

LEFT JOIN	WSOL_TB_IMPORTS_HUMACH_INVOICING_2  G	ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
												   AND G.FF_AGENT_ID					= W1.FF_AGENT_ID
												   AND G.FF_CUSTOMER_ID					= W1.FF_CUSTOMER_ID
												   AND G.ID_EXT							= W1.ID_EXT
												   AND G.INVOICE_ID						= W1.INVOICE_ID

WHERE (G.FF_AGENT_ID					IS NULL AND ISNULL(W1.FF_AGENT_ID,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND (G.FF_CUSTOMER_ID					IS NULL AND ISNULL(W1.FF_CUSTOMER_ID,'') <> '' )
--  AND (G.ID_EXT							IS NULL AND ISNULL(W1.ID_EXT,'') <> '' )
--  AND (G.INVOICE_ID						IS NULL AND ISNULL(W1.INVOICE_ID,'') <> '' )

GROUP BY
 W1.FF_AGENT_ID
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.FF_CUSTOMER_ID
,W1.ID_EXT
,W1.INVOICE_ID

ORDER BY
 W1.FF_CUSTOMER_ID
,W1.FF_AGENT_ID
,W1.STD_TENANT_START_DATE_TIME_KEY


--====================================================================================================
-- POPULATE ADDITIONAL INVOICE FIELDS
--====================================================================================================
---->> AUTHORIZED WRAP (i9 SPORTS)
UPDATE WSOL_TB_IMPORTS_HUMACH_INVOICING_2 SET
 AUTHORIZED_WRAP = CASE WHEN FF_CUSTOMER_ID = 190 THEN	-- 190 = i9 SPORTS
							 CASE WHEN (TOTAL_CALLS * 120.00) > WRAP_SECS THEN
									WRAP_SECS
								  ELSE
									TOTAL_CALLS * 120.00 END	-- TWO MINUTES OF WRAP ALLOWED PER CALL
						ELSE WRAP_SECS END	-- ALL OTHER PROGRAMS
 
---->> CPROD
UPDATE WSOL_TB_IMPORTS_HUMACH_INVOICING_2 SET
 CPROD = CASE WHEN MIN_GUARANTEE_TYPE = 'RB'  THEN
				   READY_SECS + ASSIGNED_SECS + BUSY_SECS
			  WHEN MIN_GUARANTEE_TYPE = 'RBW' THEN
				   READY_SECS + ASSIGNED_SECS + BUSY_SECS + AUTHORIZED_WRAP		-- CHANGED FROM WRAP_SECS TO AUTHORIZED_WRAP ON 12/16/2016
			  ELSE 0.00 END
			  
---->> MINIMUM GUARANTEE  
UPDATE WSOL_TB_IMPORTS_HUMACH_INVOICING_2 SET
 MINIMUM_GUARANTEE = CPROD * (MIN_GUARANTEE_MINUTES / 60.00)

---->> AUTHORIZED MINUTES
UPDATE WSOL_TB_IMPORTS_HUMACH_INVOICING_2 SET
 AUTHORIZED_MINUTES = CASE WHEN AUTHORIZED_TO_INVOICE_TYPE = 'B' THEN
							CASE WHEN MINIMUM_GUARANTEE > (ASSIGNED_SECS + BUSY_SECS) THEN
									MINIMUM_GUARANTEE
								 ELSE (ASSIGNED_SECS + BUSY_SECS) END
						   ELSE 0.00 END


--====================================================================================================
-- SET INVOICE FIELDS TO ZERO FOR WSOL ASAs
--====================================================================================================
UPDATE WSOL_TB_IMPORTS_HUMACH_INVOICING_2 SET
 AUTHORIZED_MINUTES = 0.00
WHERE RESOURCE_NAME = 'Joann Lopez_AOA'


-- SELECT * FROM WSOL_TB_IMPORTS_HUMACH_INVOICING_2
--=========================================================================================================================================
-- INSERT DATA INTO PERMANENT TABLE (UPDATE)
--=========================================================================================================================================
UPDATE WSOL_TB_IMPORTS_HUMACH_INVOICING SET
 FF_AGENT_FIRST_NAME									= W2.FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME										= W2.FF_AGENT_LAST_NAME
--,FF_AGENT_ID											= W2.FF_AGENT_ID
,FF_CUSTOMER_NAME										= W2.FF_CUSTOMER_NAME
--,FF_CUSTOMER_ID										= W2.FF_CUSTOMER_ID
,FF_INTERVAL											= W2.FF_INTERVAL
,FF_AGENT_PERFORMANCE_INTERVAL_ID						= W2.FF_AGENT_PERFORMANCE_INTERVAL_ID
,FF_INTERVAL_START_TS									= W2.FF_INTERVAL_START_TS
,FF_AGENT_LOGIN_START_TS								= W2.FF_AGENT_LOGIN_START_TS
,FF_STATE_LOGGED_IN_SECS								= W2.FF_STATE_LOGGED_IN_SECS
,FF_STATE_READY_SECS									= W2.FF_STATE_READY_SECS
,FF_STATE_ASSIGNED_SECS									= W2.FF_STATE_ASSIGNED_SECS
,FF_STATE_BUSY_SECS										= W2.FF_STATE_BUSY_SECS
,FF_STATE_NR_SECS										= W2.FF_STATE_NR_SECS
,FF_STATE_NR_01_SECS									= W2.FF_STATE_NR_01_SECS
,FF_STATE_NR_02_SECS									= W2.FF_STATE_NR_02_SECS
,FF_STATE_NR_03_SECS									= W2.FF_STATE_NR_03_SECS
,FF_STATE_NR_04_SECS									= W2.FF_STATE_NR_04_SECS
,FF_STATE_NR_05_SECS									= W2.FF_STATE_NR_05_SECS
,FF_STATE_NR_06_SECS									= W2.FF_STATE_NR_06_SECS
,FF_STATE_NR_07_SECS									= W2.FF_STATE_NR_07_SECS
,FF_STATE_DIAL_PENDING_SECS								= W2.FF_STATE_DIAL_PENDING_SECS
,FF_STATE_UNKNOWN_SECS									= W2.FF_STATE_UNKNOWN_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS						= W2.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS				= W2.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,FF_Q_IN_CALLS_IN_AGT_ANS_SECS							= W2.FF_Q_IN_CALLS_IN_AGT_ANS_SECS
,FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS						= W2.FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS			= W2.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS			= W2.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS						= W2.FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS		= W2.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS					= W2.FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS			= W2.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS			= W2.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS	= W2.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT						= W2.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT				= W2.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,FF_Q_IN_CALLS_IN_AGT_ANS_CT							= W2.FF_Q_IN_CALLS_IN_AGT_ANS_CT
,FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT						= W2.FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT
,FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT						= W2.FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT						= W2.FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT
,FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT					= W2.FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT						= W2.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT						= W2.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT					= W2.FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS					= W2.FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS			= W2.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS			= W2.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS					= W2.FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS				= W2.FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS					= W2.FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS					= W2.FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS		= W2.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS						= W2.FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS
,FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS					= W2.FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS	= W2.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS					= W2.FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS					= W2.FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS			= W2.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS			= W2.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS					= W2.FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS				= W2.FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS					= W2.FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS			= W2.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS			= W2.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS					= W2.FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS	= W2.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS				= W2.FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS
,FF_Q_OUT_CALLS_IN_AGT_ANS_SECS							= W2.FF_Q_OUT_CALLS_IN_AGT_ANS_SECS
,FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS				= W2.FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS						= W2.FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS
,FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS					= W2.FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS					= W2.FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS					= W2.FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS					= W2.FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS			= W2.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_NON_Q_CALLS_IN_AGT_ANS_SECS							= W2.FF_NON_Q_CALLS_IN_AGT_ANS_SECS
,FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS						= W2.FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS			= W2.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS				= W2.FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS	= W2.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,SEQNO_ADDED_TIME										= W2.SEQNO_ADDED_TIME
,SEQNO													= W2.SEQNO
,FTP_FILE_NAME											= W2.FTP_FILE_NAME
,[DATETIME]												= W2.[DATETIME]
,HOUR_INTERVAL											= W2.HOUR_INTERVAL
,RESOURCE_NAME											= W2.RESOURCE_NAME
,LOGGED_IN_SECS											= W2.LOGGED_IN_SECS
,READY_SECS												= W2.READY_SECS
,ASSIGNED_SECS											= W2.ASSIGNED_SECS
,BUSY_SECS												= W2.BUSY_SECS
,NOT_READY_SECS											= W2.NOT_READY_SECS
,AGENT_UNRESPONSIVE_SECS								= W2.AGENT_UNRESPONSIVE_SECS
,POST_LOGIN_SECS										= W2.POST_LOGIN_SECS
,BREAK_SECS												= W2.BREAK_SECS
,WRAP_SECS												= W2.WRAP_SECS
,NR_05_SECS												= W2.NR_05_SECS
,NR_06_SECS												= W2.NR_06_SECS
,NR_07_SECS												= W2.NR_07_SECS
,DIAL_PENDING_SECS										= W2.DIAL_PENDING_SECS
,STATE_UNKNOWN_SECS										= W2.STATE_UNKNOWN_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_SECS						= W2.Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS					= W2.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,Q_IN_CALLS_IN_AGT_ANS_SECS								= W2.Q_IN_CALLS_IN_AGT_ANS_SECS
,Q_IN_CALLS_AGT_CALLS_TRANS_SECS						= W2.Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS				= W2.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS				= W2.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,Q_IN_CALLS_AGT_CALLS_HOLD_SECS							= W2.Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS		= W2.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS					= W2.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS			= W2.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS			= W2.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS		= W2.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_CT							= W2.Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT					= W2.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,Q_IN_CALLS_IN_AGT_ANS_CT								= W2.Q_IN_CALLS_IN_AGT_ANS_CT
,Q_IN_CALLS_AGT_CALLS_HOLD_CT							= W2.Q_IN_CALLS_AGT_CALLS_HOLD_CT
,Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT						= W2.Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,Q_IN_CALLS_AGT_CALLS_TRANS_CT							= W2.Q_IN_CALLS_AGT_CALLS_TRANS_CT
,Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT						= W2.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,Q_IN_CALLS_IN_AGT_COMPLETED_CT							= W2.Q_IN_CALLS_IN_AGT_COMPLETED_CT
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CT						= W2.NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT					= W2.NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,TOTAL_CALLS											= W2.TOTAL_CALLS
,AUTHORIZED_WRAP										= W2.AUTHORIZED_WRAP
,CPROD													= W2.CPROD
,MINIMUM_GUARANTEE										= W2.MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES										= W2.AUTHORIZED_MINUTES
,[EMAIL]												= W2.[EMAIL]
,ID_EXT													= W2.ID_EXT
,SCHEDULER_ACL_NAME										= W2.SCHEDULER_ACL_NAME
--,STD_TENANT_START_DATE_TIME_KEY						= W2.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE												= W2.CAL_DATE
,TENANT_KEY												= W2.TENANT_KEY
,AIR_DAY_TYPE											= W2.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR										= W2.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES									= W2.MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE										= W2.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE								= W2.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS											= W2.HAS_HOLIDAYS
,INCLUDE_IN_CAS											= W2.INCLUDE_IN_CAS
,READY_FOR_XML											= W2.READY_FOR_XML
,SHOW_ID_EXTS											= W2.SHOW_ID_EXTS
--,INVOICE_ID											= W2.INVOICE_ID
--,WS_ROW_CREATED_TIME									= W2.WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME									= W2.WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_HUMACH_INVOICING_2  W2
----INNER JOIN SHOULD TAKE CARE OF MOST OF THE WORRY IN THE WHERE CLAUSE...
INNER JOIN      WSOL_TB_IMPORTS_HUMACH_INVOICING	G	ON G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
													   AND G.FF_AGENT_ID					= W2.FF_AGENT_ID
													   AND G.FF_CUSTOMER_ID					= W2.FF_CUSTOMER_ID
													   AND G.INVOICE_ID						= W2.INVOICE_ID
----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_AGENT_ID						= W2.FF_AGENT_ID
  AND G.FF_CUSTOMER_ID					= W2.FF_CUSTOMER_ID
  AND G.INVOICE_ID						= W2.INVOICE_ID


--=========================================================================================================================================
-- INSERT DATA INTO PERMANENT TABLE (NEW) 
--=========================================================================================================================================
INSERT INTO WSOL_TB_IMPORTS_HUMACH_INVOICING
(FF_AGENT_FIRST_NAME
,FF_AGENT_LAST_NAME
,FF_AGENT_ID
,FF_CUSTOMER_NAME
,FF_CUSTOMER_ID
,FF_INTERVAL
,FF_AGENT_PERFORMANCE_INTERVAL_ID
,FF_INTERVAL_START_TS
,FF_AGENT_LOGIN_START_TS
,FF_STATE_LOGGED_IN_SECS
,FF_STATE_READY_SECS
,FF_STATE_ASSIGNED_SECS
,FF_STATE_BUSY_SECS
,FF_STATE_NR_SECS
,FF_STATE_NR_01_SECS
,FF_STATE_NR_02_SECS
,FF_STATE_NR_03_SECS
,FF_STATE_NR_04_SECS
,FF_STATE_NR_05_SECS
,FF_STATE_NR_06_SECS
,FF_STATE_NR_07_SECS
,FF_STATE_DIAL_PENDING_SECS
,FF_STATE_UNKNOWN_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,FF_Q_IN_CALLS_IN_AGT_ANS_SECS
,FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,FF_Q_IN_CALLS_IN_AGT_ANS_CT
,FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT
,FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT
,FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT
,FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS
,FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS
,FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS
,FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS
,FF_Q_OUT_CALLS_IN_AGT_ANS_SECS
,FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS
,FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS
,FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,FF_NON_Q_CALLS_IN_AGT_ANS_SECS
,FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS
,FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,RESOURCE_NAME
,LOGGED_IN_SECS
,READY_SECS
,ASSIGNED_SECS
,BUSY_SECS
,NOT_READY_SECS
,AGENT_UNRESPONSIVE_SECS
,POST_LOGIN_SECS
,BREAK_SECS
,WRAP_SECS
,NR_05_SECS
,NR_06_SECS
,NR_07_SECS
,DIAL_PENDING_SECS
,STATE_UNKNOWN_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,Q_IN_CALLS_IN_AGT_ANS_SECS
,Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,Q_IN_CALLS_IN_AGT_ANS_CT
,Q_IN_CALLS_AGT_CALLS_HOLD_CT
,Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,Q_IN_CALLS_AGT_CALLS_TRANS_CT
,Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,Q_IN_CALLS_IN_AGT_COMPLETED_CT
,NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,TOTAL_CALLS
,AUTHORIZED_WRAP
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_MINUTES
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME)
SELECT
 W2.FF_AGENT_FIRST_NAME
,W2.FF_AGENT_LAST_NAME
,W2.FF_AGENT_ID
,W2.FF_CUSTOMER_NAME
,W2.FF_CUSTOMER_ID
,W2.FF_INTERVAL
,W2.FF_AGENT_PERFORMANCE_INTERVAL_ID
,W2.FF_INTERVAL_START_TS
,W2.FF_AGENT_LOGIN_START_TS
,W2.FF_STATE_LOGGED_IN_SECS
,W2.FF_STATE_READY_SECS
,W2.FF_STATE_ASSIGNED_SECS
,W2.FF_STATE_BUSY_SECS
,W2.FF_STATE_NR_SECS
,W2.FF_STATE_NR_01_SECS
,W2.FF_STATE_NR_02_SECS
,W2.FF_STATE_NR_03_SECS
,W2.FF_STATE_NR_04_SECS
,W2.FF_STATE_NR_05_SECS
,W2.FF_STATE_NR_06_SECS
,W2.FF_STATE_NR_07_SECS
,W2.FF_STATE_DIAL_PENDING_SECS
,W2.FF_STATE_UNKNOWN_SECS
,W2.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,W2.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,W2.FF_Q_IN_CALLS_IN_AGT_ANS_SECS
,W2.FF_Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,W2.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W2.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W2.FF_Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,W2.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W2.FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,W2.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W2.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W2.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W2.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,W2.FF_Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,W2.FF_Q_IN_CALLS_IN_AGT_ANS_CT
,W2.FF_Q_IN_CALLS_AGT_CALLS_HOLD_CT
,W2.FF_Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,W2.FF_Q_IN_CALLS_AGT_CALLS_TRANS_CT
,W2.FF_Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,W2.FF_Q_IN_CALLS_IN_AGT_COMPLETED_CT
,W2.FF_NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,W2.FF_NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,W2.FF_Q_IN_CALLS_OUT_AGT_CALL_OTHER_SECS
,W2.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W2.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W2.FF_Q_IN_CALLS_OUT_AGT_CALL_RNA_SECS
,W2.FF_Q_IN_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,W2.FF_Q_IN_CALLS_OUT_AGT_CALL_BUSY_SECS
,W2.FF_Q_IN_CALLS_OUT_DIALED_DELAY_SECS
,W2.FF_Q_IN_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W2.FF_Q_OUT_CALLS_AGT_CALLS_HOLD_SECS
,W2.FF_Q_OUT_CALLS_AGT_CALLS_TRANS_SECS
,W2.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W2.FF_Q_OUT_CALLS_OUT_AGT_CALL_BUSY_SECS
,W2.FF_Q_OUT_CALLS_OUT_AGT_CALL_RNA_SECS
,W2.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W2.FF_Q_OUT_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W2.FF_Q_OUT_CALLS_OUT_AGT_CALL_OTHER_SECS
,W2.FF_Q_OUT_CALLS_OUT_AGT_CALLS_HANDLE_SECS
,W2.FF_Q_OUT_CALLS_OUT_DIALED_DELAY_SECS
,W2.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W2.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W2.FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_SECS
,W2.FF_Q_OUT_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W2.FF_Q_OUT_CALLS_IN_AGT_CALLS_HANDLE_SECS
,W2.FF_Q_OUT_CALLS_IN_AGT_ANS_SECS
,W2.FF_Q_OUT_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,W2.FF_NON_Q_CALLS_AGT_CALLS_HOLD_SECS
,W2.FF_NON_Q_CALLS_AGT_CALLS_TRANS_SECS
,W2.FF_NON_Q_CALLS_OUT_AGT_CALL_BUSY_SECS
,W2.FF_NON_Q_CALLS_OUT_AGT_CALL_OTHER_SECS
,W2.FF_NON_Q_CALLS_OUT_AGT_CALL_RNA_SECS
,W2.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W2.FF_NON_Q_CALLS_IN_AGT_ANS_SECS
,W2.FF_NON_Q_CALLS_IN_AGT_ATTEMPT_SECS
,W2.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W2.FF_NON_Q_CALLS_IN_AGT_ATTEMPT_FAILED_SECS
,W2.FF_NON_Q_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME
,W2.[DATETIME]
,W2.HOUR_INTERVAL
,W2.RESOURCE_NAME
,W2.LOGGED_IN_SECS
,W2.READY_SECS
,W2.ASSIGNED_SECS
,W2.BUSY_SECS
,W2.NOT_READY_SECS
,W2.AGENT_UNRESPONSIVE_SECS
,W2.POST_LOGIN_SECS
,W2.BREAK_SECS
,W2.WRAP_SECS
,W2.NR_05_SECS
,W2.NR_06_SECS
,W2.NR_07_SECS
,W2.DIAL_PENDING_SECS
,W2.STATE_UNKNOWN_SECS
,W2.Q_IN_CALLS_IN_AGT_ASSIGNED_SECS
,W2.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_SECS
,W2.Q_IN_CALLS_IN_AGT_ANS_SECS
,W2.Q_IN_CALLS_AGT_CALLS_TRANS_SECS
,W2.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TALK_SECS
,W2.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_TIME_SECS
,W2.Q_IN_CALLS_AGT_CALLS_HOLD_SECS
,W2.Q_IN_CALLS_IN_AGT_COMPLETED_CALL_CONNECTED_SECS
,W2.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_SECS
,W2.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TALK_SECS
,W2.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_TIME_SECS
,W2.NON_Q_CALLS_OUT_AGT_CALL_ANS_CALL_CONNECTED_SECS
,W2.Q_IN_CALLS_IN_AGT_ASSIGNED_CT
,W2.Q_IN_CALLS_IN_AGT_ASSIGNED_FAILED_CT
,W2.Q_IN_CALLS_IN_AGT_ANS_CT
,W2.Q_IN_CALLS_AGT_CALLS_HOLD_CT
,W2.Q_IN_CALLS_AGT_CALLS_ON_HOLD_CT
,W2.Q_IN_CALLS_AGT_CALLS_TRANS_CT
,W2.Q_IN_CALLS_IN_AGT_CALLS_HANDLE_CT
,W2.Q_IN_CALLS_IN_AGT_COMPLETED_CT
,W2.NON_Q_CALLS_OUT_AGT_CALL_ANS_CT
,W2.NON_Q_CALLS_OUT_AGT_CALL_ATTEMPT_CT
,W2.TOTAL_CALLS
,W2.AUTHORIZED_WRAP
,W2.CPROD
,W2.MINIMUM_GUARANTEE
,W2.AUTHORIZED_MINUTES
,W2.[EMAIL]
,W2.ID_EXT
,W2.SCHEDULER_ACL_NAME
,W2.STD_TENANT_START_DATE_TIME_KEY
,W2.CAL_DATE
,W2.TENANT_KEY
,W2.AIR_DAY_TYPE
,W2.AIR_ACW_FONT_COLOR
,W2.MIN_GUARANTEE_MINUTES
,W2.MIN_GUARANTEE_TYPE
,W2.AUTHORIZED_TO_INVOICE_TYPE
,W2.HAS_HOLIDAYS
,W2.INCLUDE_IN_CAS
,W2.READY_FOR_XML
,W2.SHOW_ID_EXTS
,W2.INVOICE_ID
,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_HUMACH_INVOICING_2	W2

LEFT JOIN       WSOL_TB_IMPORTS_HUMACH_INVOICING	G   ON G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
													   AND G.FF_AGENT_ID					= W2.FF_AGENT_ID
													   AND G.FF_CUSTOMER_ID					= W2.FF_CUSTOMER_ID
													   AND G.INVOICE_ID						= W2.INVOICE_ID

WHERE (G.FF_AGENT_ID						IS NULL AND ISNULL(W2.FF_AGENT_ID,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY		IS NULL AND ISNULL(W2.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND (G.FF_CUSTOMER_ID						IS NULL AND ISNULL(W2.FF_CUSTOMER_ID,'') <> '' )
--  AND (G.INVOICE_ID							IS NULL AND ISNULL(W2.INVOICE_ID,'') <> '' )


--======================================================================================================================================
SET DATEFIRST 1  -- = Monday  --SELECT DATEPART(DW,dbo.getdate())  --SELECT @@DATEFIRST AS '1st Day', DATEPART(dw, dbo.getdate()) AS 'Today'
--======================================================================================================================================

--======================================================================
--Need when populating tmp DEW table for insert into _AIA table.
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME

SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN([DATETIME]) FROM WSOL_TB_IMPORTS_HUMACH_INVOICING_2))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_HUMACH_INVOICING_2))  
--======================================================================

--============================================================
IF OBJECT_ID('TEMPDB..#DT_EASY_WEEKS') IS NOT NULL BEGIN
   DROP TABLE #DT_EASY_WEEKS
END
CREATE TABLE #DT_EASY_WEEKS
(CAL_DATE_STRING      VARCHAR(10)
,CAL_WEEK_START_DATE  DATETIME
,CAL_WEEK_END_DATE    DATETIME
,PAY_CYCLE_CLOSURE_DATE DATETIME
)
INSERT INTO #DT_EASY_WEEKS
SELECT
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
FROM DATE_TIME DT
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
--WHERE DT.CAL_DATE >= CAST('06/01/2011' AS DATETIME) AND DT.CAL_DATE <  CAST('06/20/2011' AS DATETIME)
GROUP BY 
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
--===========================
UPDATE #DT_EASY_WEEKS SET CAL_WEEK_END_DATE = DATEADD(DD,6,CAL_WEEK_START_DATE)
--110713: WAS: 06/26/2011
UPDATE #DT_EASY_WEEKS SET
 PAY_CYCLE_CLOSURE_DATE = (CASE WHEN (DATEDIFF(DD,CAST('09/29/2013' AS DATETIME),CAL_WEEK_END_DATE) % 14) = 0 THEN
									CAL_WEEK_END_DATE
								ELSE
									DATEADD(DD,7,CAL_WEEK_END_DATE)
								END)
--SELECT * FROM #DT_EASY_WEEKS ORDER BY CAL_DATE_STRING


--=================================================================================
--CREATE TMP TABLE: Currently same structure as:  [YZ_TB_AGENT_INVOICE_AUTOMATION]
--=================================================================================
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_HUMACH_UV_ANT_AIA') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_HUMACH_UV_ANT_AIA
END
CREATE TABLE #WSOL_TB_IMPORTS_HUMACH_UV_ANT_AIA
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](50) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[PAY_GROUP] [int] NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #WSOL_TB_IMPORTS_HUMACH_UV_ANT_AIA
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,CASE WHEN CHARINDEX('_',AIA.FF_AGENT_LAST_NAME) > 0 THEN
		LOWER(LEFT(AIA.FF_AGENT_FIRST_NAME,1)) + LOWER(LEFT(AIA.FF_AGENT_LAST_NAME,CHARINDEX('_',AIA.FF_AGENT_LAST_NAME) - 1)) + RIGHT(AIA.FF_AGENT_LAST_NAME,3)
	  ELSE
		LOWER(LEFT(AIA.FF_AGENT_FIRST_NAME,1)) + LOWER(AIA.FF_AGENT_LAST_NAME) END  --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING     --[DATE]             
,DT.LABEL_HH24 + ':00'  --HOD_INTERVAL

,ISNULL(AIA.LOGGED_IN_SECS, 0)	--AU_DK_LOGGED_IN_DURATION				--DATA IS IN SECONDS
,ISNULL(AIA.READY_SECS, 0)		--AU_DK_AVAILABLE_DURATION				--DATA IS IN SECONDS

,ISNULL(AIA.BUSY_SECS, 0)		--AU_DK_TALK_DURATION					--DATA IS IN SECONDS
,0								--AU_DK_IB_TALK_DURATION
,0								--AU_DK_OB_TALK_DURATION

,ISNULL(AIA.AUTHORIZED_WRAP, 0) --AU_DK_CONVENTIONAL_ACW				--DATA IS IN SECONDS
,ISNULL(AIA.NOT_READY_SECS, 0)	--AU_DK_NR_DURATION						--DATA IS IN SECONDS
,0								--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0								--AU_DK_ADJUSTED_NR_DURATION
,ISNULL(AIA.CPROD, 0)		    --AU_DK_TOTAL_PRODUCTIVE_DURATION		--DATA IS IN SECONDS
,ISNULL(AIA.CPROD, 0)		    --AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS	--DATA IS IN SECONDS

,0  --AU_DK_XFER_COUNT
,0  --AU_DK_HOLD_COUNT
,0  --AU_DK_CONFERENCE_COUNT
,0  --AU_DK_CONSULT_COUNT
,0  --AU_DK_PUP_COUNT

,0  --AU_DK_OFFERED_COUNT
,0  --AU_DK_HANDLED_COUNT
,0  --AU_DK_IB_HANDLE_COUNT
,0  --AU_DK_OB_HANDLE_COUNT
						
,0   --AU_DK_RONA_COUNT
,0   --AU_DK_AWR_COUNT

,ISNULL(AIA.MINIMUM_GUARANTEE, 0)	--MINIMUM_GUARANTEE			--DATA IS IN SECONDS
,ISNULL(AIA.AUTHORIZED_MINUTES, 0)	--AUTHORIZED_TO_INVOICE		--DATA IS IN SECONDS

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_MINUTES
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID		--CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID 
,AIA.RESOURCE_NAME
,0					--AIRITKDUR
,0					--AIRIACDUR
,0					--PAY_GROUP
,dbo.getdate()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL       --	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
--SELECT * FROM WSOL_TB_IMPORTS_HUMACH_SD_AIA_STATIC_DEFAULTS ORDER BY OFFICIAL_WSOL_CLIENT_ID
--SELECT TOP 1000 *
FROM            WSOL_TB_IMPORTS_HUMACH_INVOICING_2            AIA
 
--ONLY WANT TO INCLUDE VALID ID_EXT IN _AIA TABLE -- ID EXTS THAT HAVE MINIMUM GUARANTEE AND AUTHORIZED MINUTE FORMULAS AND STATIC DEFAULTS SET UP
INNER JOIN      WSOL_TB_IMPORTS_HUMACH_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      WSOL_TB_IMPORTS_HUMACH_SD_INVOICE_GROUPS      CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME									  DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS								  DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')
--AND (ISNULL(AIA.PAY_GROUP,'') = 0)  -- THIS CAN BE SET TO ONLY INCLUDE CERTAIN PAY GROUPS IN THE XML PUSH

--  INNER JOIN TO AIASD TABLE INSURES ONLY RECORDS WITH VALID ID EXTENSIONS ARE PUT IN _AIA TABLE/XML REPORT/FILE...
--  SAME FOR INVOICE_GROUPS...

--  SELECT * FROM WSOL_TB_IMPORTS_HUMACH_INVOICING WHERE ISNULL(ID_EXT,'') = ''


--===================================================================
--UPDATE YZ_TB_...UV_ANT_AIA TABLE:
--===================================================================
--SELECT TOP 100 * FROM WSOL_TB_IMPORTS_HUMACH_UV_ANT_AIA
UPDATE WSOL_TB_IMPORTS_HUMACH_UV_ANT_AIA SET
 [PLATFORM]							= W1.[PLATFORM]
,[STATUS]							= W1.[STATUS]
--,INVOICE_MAP_KEY					= W1.INVOICE_MAP_KEY
,FIELD_NAME							= W1.FIELD_NAME
,SCHEDULER_PROJECT_ID				= W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME					= W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION					= W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID			= W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME			= W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID				= W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME			= W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID			= W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID	= W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID		= W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY			= W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID					= W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID					= W1.HOLIDAY_INVOICE_ID
,HOLIDAY							= W1.HOLIDAY
,FILE_FORMAT_OF_PUSH				= W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID		= W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL							= W1.NEW_ACL
,CURRENT_CATS						= W1.CURRENT_CATS
,CATS_ID							= W1.CATS_ID
,PATS_ID							= W1.PATS_ID
,SMART_ELIGIBLE						= W1.SMART_ELIGIBLE
,SMART_TIER_1						= W1.SMART_TIER_1
,SMART_TIER_2						= W1.SMART_TIER_2
,SMART_TIER_3						= W1.SMART_TIER_3
,INTERVAL							= W1.INTERVAL
,[DATE]								= W1.[DATE]
,HOD_INTERVAL						= W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION			= W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION			= W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION				= W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION				= W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION				= W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW				= W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION					= W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT					= W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT					= W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT				= W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT				= W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT					= W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT				= W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT				= W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT				= W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT				= W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT					= W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT					= W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE					= W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE				= W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE					= W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE				= W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:

,FTP_FILE_NAME						= W1.FTP_FILE_NAME
,EMAIL								= W1.EMAIL
--,STD_TENANT_START_DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W1.CAL_DATE
,TENANT_KEY							= W1.TENANT_KEY
,AIR_DAY_TYPE						= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE					= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE					= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W1.INCLUDE_IN_CAS
,READY_FOR_XML						= W1.READY_FOR_XML
,SHOW_ID_EXTS						= W1.SHOW_ID_EXTS
,INVOICE_ID							= W1.INVOICE_ID
,RESOURCE_NAME						= W1.RESOURCE_NAME

,PAY_GROUP							= W1.PAY_GROUP
,AIRITKDUR							= W1.AIRITKDUR
,AIRIACDUR							= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

FROM            #WSOL_TB_IMPORTS_HUMACH_UV_ANT_AIA   W1

INNER JOIN      WSOL_TB_IMPORTS_HUMACH_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
														AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
														AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )


--================================================
--INSERT TMP TABLE FIELDS INTO YZ_TB_... TABLE:
--================================================
INSERT INTO [WSOL_TB_IMPORTS_HUMACH_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.PAY_GROUP
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #WSOL_TB_IMPORTS_HUMACH_UV_ANT_AIA   AIA
LEFT JOIN       WSOL_TB_IMPORTS_HUMACH_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
														AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
														AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )

--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_MONAT_AGENT_INVOICING_REPORTS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_MONAT_AGENT_INVOICING_REPORTS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300) --Hid. Def=' '
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@SHOW_DETAILS		 BIT		  --	 DEF='TRUE'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'  MANual,SUBscription
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='INV'
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='INV'  
AS
SET NOCOUNT ON    

--  EXECUTE [dbo].[uspIMPORTS_MONAT_AGENT_INVOICING_DETAIL] '08/01/2017','08/15/2017','0','0','0','0','HR','Y','SS','NM','Y','4','MAN','INV','INV'

--	@TIME_INTERVAL:  Can show invoicing report at hourly level or higher !!!

--	Durations in FTP FILE are in HH:MM:SS but converted to seconds.  Therefore, reporting may be in seconds, minutes, or hours.

--  SELECT * FROM WSOL_TB_IMPORTS_MONAT_SD_INVOICE_GROUPS
--  SELECT * FROM WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA


--========================================================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) 
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) -- + 1
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
END
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

DECLARE
 @MTD_BEG AS DATETIME
,@MTD_END AS DATETIME  --,@YTD_BEG AS DATETIME--,@YTD_END AS DATETIME
SET @MTD_BEG = CAST(CAST(DATEPART(mm,@DTM_BEG) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)
SET @MTD_END = @DTM_END  

IF @TIME_INTERVAL IN ('MR','MD') BEGIN  --MONTH DETERMINED BY @DTM_BEG.
	SET @DTM_BEG = @MTD_BEG
	SET @DTM_END = @MTD_END
END

IF @EXECUTIONER = 'DLY' BEGIN
	IF DATEPART(DW,dbo.getdate()) = 2 BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 3,101) AS DATETIME)
	END
	ELSE BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
	END
	SET @DTM_END = @DTM_BEG + 1
END

IF @EXECUTIONER = 'WKY' BEGIN
	SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 7,101) AS DATETIME)
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate()	 ,101) AS DATETIME)
END

IF @EXECUTIONER = 'MTH' BEGIN
	IF MONTH(dbo.getdate()) = 1
		BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
		END
	ELSE
		BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) AS DATETIME)
END



--========================================================================
--	SET AMOUNT TO DIVIDE BY:
--========================================================================
DECLARE @DS DECIMAL(10,2)  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.00     --DIVIDE SECONDS BY 1  TO GET SAME, SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
    SET @DS = 60.00    --DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
    SET @DS = 3600.00  --DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
--	CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_MONAT_AGENT_INVOICING_REPORTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_MONAT_AGENT_INVOICING_REPORTS
END
CREATE TABLE #IMPORTS_MONAT_AGENT_INVOICING_REPORTS
(TENANT_NAME					VARCHAR(50)
,ID_EXT							VARCHAR(3)
,SCHEDULER_ACL_NAME				VARCHAR(100)  
,EMPLOYEE_ID					VARCHAR(50)
,STD_TENANT_START_DATE_TIME_KEY INT
,RESOURCE_NAME					VARCHAR(100)

,AIR_DAY_TYPE					VARCHAR(1)
,AIR_ACW_FONT_COLOR				VARCHAR(50)
,MIN_GUARANTEE_MINUTES			DECIMAL(6,3)
,MIN_GUARANTEE_TYPE				VARCHAR(50)
,AUTHORIZED_TO_INVOICE_TYPE		VARCHAR(50)
,HAS_HOLIDAYS					VARCHAR(1)
,INCLUDE_IN_CAS					VARCHAR(1)
,READY_FOR_XML					VARCHAR(1)
,SHOW_ID_EXTS					VARCHAR(1)
,
[ANSWERED_SESSIONS] [int] NULL,
[RONA_CNT] [int] NULL,
[DID_CNT] [int] NULL,
[DOD_CNT] [int] NULL,
[STARTED_IMS] [int] NULL,
[STARTED_CALLS] [int] NULL,
[ESCALATIONS] [int] NULL,
[CONSULTS] [int] NULL,
[TRANSFERS] [int] NULL,
[SUPERVISOR_JOINS] [int] NULL,
[AVAILABLE_TIME] [decimal](10, 2) NULL,
[RING_TIME] [decimal](10, 2) NULL,
[CONNECT_IM_SESSION_TIME] [decimal](10, 2) NULL,
[CONNECT_PHONE_CALL_TIME] [decimal](10, 2) NULL,
[CONNECT_DID_CALL_TIME] [decimal](10, 2) NULL,
[CONNECT_DOD_CALL_TIME] [decimal](10, 2) NULL,
[NON_CONNECT_CALL_TIME] [decimal](10, 2) NULL,
[ACW_TIME] [decimal](10, 2) NULL,
[RONA_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_TIME] [decimal](10, 2) NULL,
[OFF_WORK_TIME] [decimal](10, 2) NULL,
[LOGGED_OUT_TIME] [decimal](10, 2) NULL,
[ON_PHONE_TIME] [decimal](10, 2) NULL,
[Q_ON_PHONE_TIME] [decimal](10, 2) NULL,
[TALK_TIME] [decimal](10, 2) NULL,
[Q_TALK_TIME] [decimal](10, 2) NULL,
[HANDLE_TIME] [decimal](10, 2) NULL,
[Q_HANDLE_TIME] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MING] [decimal](10, 2) NULL,
[AUT2] [decimal](10, 2) NULL,
)

INSERT INTO #IMPORTS_MONAT_AGENT_INVOICING_REPORTS
SELECT
 'MONAT GLOBAL'	--T.TENANT_NAME
,''					--UAA.ACD_ID_EXTENSION
,UAA.SCHEDULER_ACL_NAME
,UAA.EMPLOYEE_ID
,UAA.STD_TENANT_START_DATE_TIME_KEY
,UAA.RESOURCE_NAME

,(ISNULL(UAA.AIR_DAY_TYPE,''))					--AS AIR_DAY_TYPE
,(ISNULL(UAA.AIR_ACW_FONT_COLOR,''))			--AS AIR_ACW_FONT_COLOR
,(ISNULL(UAA.MIN_GUARANTEE_MINUTES,0.000))		--AS MIN_GUARANTEE_MINUTES
,(ISNULL(UAA.MIN_GUARANTEE_TYPE,''))			--AS MIN_GUARANTEE_TYPE
,(ISNULL(UAA.AUTHORIZED_TO_INVOICE_TYPE,''))	--AS AUTHORIZED_TO_INVOICE_TYPE
,(ISNULL(UAA.HAS_HOLIDAYS,''))					--AS HAS_HOLIDAYS
,(ISNULL(UAA.INCLUDE_IN_CAS,''))				--AS INCLUDE_IN_CAS
,(ISNULL(UAA.READY_FOR_XML,''))					--AS READY_FOR_XML
,(ISNULL(UAA.SHOW_ID_EXTS,''))					--AS SHOW_ID_EXTS

,(ISNULL(UAA.ANSWERED_SESSIONS			,0))
,(ISNULL(UAA.RONA_CNT					,0))
,(ISNULL(UAA.DID_CNT					,0))
,(ISNULL(UAA.DOD_CNT					,0))
,(ISNULL(UAA.STARTED_IMS				,0))
,(ISNULL(UAA.STARTED_CALLS				,0))
,(ISNULL(UAA.ESCALATIONS				,0))
,(ISNULL(UAA.CONSULTS					,0))
,(ISNULL(UAA.TRANSFERS					,0))
,(ISNULL(UAA.SUPERVISOR_JOINS			,0))

,(ISNULL(UAA.AVAILABLE_TIME				,0.00))
,(ISNULL(UAA.RING_TIME					,0.00))
,(ISNULL(UAA.CONNECT_IM_SESSION_TIME	,0.00))
,(ISNULL(UAA.CONNECT_PHONE_CALL_TIME	,0.00))
,(ISNULL(UAA.CONNECT_DID_CALL_TIME		,0.00))
,(ISNULL(UAA.CONNECT_DOD_CALL_TIME		,0.00))
,(ISNULL(UAA.NON_CONNECT_CALL_TIME		,0.00))
,(ISNULL(UAA.ACW_TIME					,0.00))
,(ISNULL(UAA.RONA_TIME					,0.00))
,(ISNULL(UAA.UNAVAILABLE_TIME			,0.00))
,(ISNULL(UAA.OFF_WORK_TIME				,0.00))
,(ISNULL(UAA.LOGGED_OUT_TIME			,0.00))
,(ISNULL(UAA.ON_PHONE_TIME				,0.00))
,(ISNULL(UAA.Q_ON_PHONE_TIME			,0.00))
,(ISNULL(UAA.TALK_TIME					,0.00))
,(ISNULL(UAA.Q_TALK_TIME				,0.00))
,(ISNULL(UAA.HANDLE_TIME				,0.00))
,(ISNULL(UAA.Q_HANDLE_TIME				,0.00))

,(ISNULL(UAA.CPROD						,0.00))
,(ISNULL(UAA.MING						,0.00))
,(ISNULL(UAA.AUT2						,0.00))

--SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING

FROM
(	SELECT	
	-- UA.TENANT_KEY
	 ''									AS ACD_ID_EXTENSION
	,UA.INVOICE_ID					    AS SCHEDULER_ACL_NAME
	,UA.FF_AGENT_NAME					AS EMPLOYEE_ID 
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,MAX(UA.RESOURCE_NAME)              AS RESOURCE_NAME
	,MAX(UA.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,'BLACK'                            AS AIR_ACW_FONT_COLOR
	,0									AS MIN_GUARANTEE_MINUTES
	,''									AS MIN_GUARANTEE_TYPE
	,''									AS AUTHORIZED_TO_INVOICE_TYPE
	,'Y'								AS HAS_HOLIDAYS
	,''									AS INCLUDE_IN_CAS
	,''									AS READY_FOR_XML
	,''									AS SHOW_ID_EXTS

	,SUM(ISNULL(UA.ANSWERED_SESSIONS		,0))	AS ANSWERED_SESSIONS
	,SUM(ISNULL(UA.RONA_CNT					,0))	AS RONA_CNT
	,SUM(ISNULL(UA.DID_CNT					,0))	AS DID_CNT
	,SUM(ISNULL(UA.DOD_CNT					,0))	AS DOD_CNT
	,SUM(ISNULL(UA.STARTED_IMS				,0))	AS STARTED_IMS
	,SUM(ISNULL(UA.STARTED_CALLS			,0))	AS STARTED_CALLS
	,SUM(ISNULL(UA.ESCALATIONS				,0))	AS ESCALATIONS
	,SUM(ISNULL(UA.CONSULTS					,0))	AS CONSULTS
	,SUM(ISNULL(UA.TRANSFERS				,0))	AS TRANSFERS
	,SUM(ISNULL(UA.SUPERVISOR_JOINS			,0))	AS SUPERVISOR_JOINS

	,SUM(ISNULL(UA.AVAILABLE_TIME			,0.00))	AS AVAILABLE_TIME
	,SUM(ISNULL(UA.RING_TIME				,0.00))	AS RING_TIME
	,SUM(ISNULL(UA.CONNECT_IM_SESSION_TIME	,0.00))	AS CONNECT_IM_SESSION_TIME
	,SUM(ISNULL(UA.CONNECT_PHONE_CALL_TIME	,0.00))	AS CONNECT_PHONE_CALL_TIME
	,SUM(ISNULL(UA.CONNECT_DID_CALL_TIME	,0.00))	AS CONNECT_DID_CALL_TIME
	,SUM(ISNULL(UA.CONNECT_DOD_CALL_TIME	,0.00))	AS CONNECT_DOD_CALL_TIME
	,SUM(ISNULL(UA.NON_CONNECT_CALL_TIME	,0.00))	AS NON_CONNECT_CALL_TIME
	,SUM(ISNULL(UA.ACW_TIME					,0.00))	AS ACW_TIME
	,SUM(ISNULL(UA.RONA_TIME				,0.00))	AS RONA_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_TIME			,0.00))	AS UNAVAILABLE_TIME
	,SUM(ISNULL(UA.OFF_WORK_TIME			,0.00))	AS OFF_WORK_TIME
	,SUM(ISNULL(UA.LOGGED_OUT_TIME			,0.00))	AS LOGGED_OUT_TIME
	,SUM(ISNULL(UA.ON_PHONE_TIME			,0.00))	AS ON_PHONE_TIME
	,SUM(ISNULL(UA.Q_ON_PHONE_TIME			,0.00)) AS Q_ON_PHONE_TIME
	,SUM(ISNULL(UA.TALK_TIME				,0.00)) AS TALK_TIME
	,SUM(ISNULL(UA.Q_TALK_TIME				,0.00)) AS Q_TALK_TIME
	,SUM(ISNULL(UA.HANDLE_TIME				,0.00)) AS HANDLE_TIME
	,SUM(ISNULL(UA.Q_HANDLE_TIME			,0.00)) AS Q_HANDLE_TIME
	
	,SUM(ISNULL(UA.CPROD					,0.00))	AS CPROD
	,SUM(ISNULL(UA.MING						,0.00))	AS MING
	,SUM(ISNULL(UA.AUT2						,0.00))	AS AUT2
	
	--  SELECT *
	FROM            WSOL_TB_IMPORTS_MONAT_INVOICING	UA
	INNER JOIN      DATE_TIME						DT	ON DT.DATE_TIME_KEY = UA.STD_TENANT_START_DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
		
	GROUP BY 
	 UA.INVOICE_ID
	,UA.FF_AGENT_NAME
	,UA.STD_TENANT_START_DATE_TIME_KEY
) UAA

--==============================================================
-- CREATE TEMPORARY TABLE TO RETURN RESULTS
--==============================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_MONAT_AGENT_INVOICING_REPORTS_RTN') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_RTN
END
CREATE TABLE #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_RTN
(GRPNO                 INT
,TENANT_NAME           VARCHAR(50)
,ID_EXT                VARCHAR(3)
,SCHEDULER_ACL_NAME    VARCHAR(100)
,EMPLOYEE_ID           VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,CAL_YEAR_MONTH_NUM    VARCHAR(10)
,DATE_INTERVAL         VARCHAR(50)
,TIME_INTERVAL         VARCHAR(10)

,AIR_DAY_TYPE				varchar(1)
,AIR_ACW_FONT_COLOR			varchar(50)
,MIN_GUARANTEE_MINUTES		decimal(6,3)
,MIN_GUARANTEE_TYPE			varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE	varchar(50)
,HAS_HOLIDAYS				varchar(1)
,INCLUDE_IN_CAS				varchar(1)
,READY_FOR_XML				varchar(1)
,SHOW_ID_EXTS				varchar(1)

,AIR_HOLIDAY_IN				VARCHAR(1)
,ALL_AUTHORIZED_TIME		DECIMAL(10,2)

,
[ANSWERED_SESSIONS] [int] NULL,
[RONA_CNT] [int] NULL,
[DID_CNT] [int] NULL,
[DOD_CNT] [int] NULL,
[STARTED_IMS] [int] NULL,
[STARTED_CALLS] [int] NULL,
[ESCALATIONS] [int] NULL,
[CONSULTS] [int] NULL,
[TRANSFERS] [int] NULL,
[SUPERVISOR_JOINS] [int] NULL,
[AVAILABLE_TIME] [decimal](10, 2) NULL,
[RING_TIME] [decimal](10, 2) NULL,
[CONNECT_IM_SESSION_TIME] [decimal](10, 2) NULL,
[CONNECT_PHONE_CALL_TIME] [decimal](10, 2) NULL,
[CONNECT_DID_CALL_TIME] [decimal](10, 2) NULL,
[CONNECT_DOD_CALL_TIME] [decimal](10, 2) NULL,
[NON_CONNECT_CALL_TIME] [decimal](10, 2) NULL,
[ACW_TIME] [decimal](10, 2) NULL,
[RONA_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_TIME] [decimal](10, 2) NULL,
[OFF_WORK_TIME] [decimal](10, 2) NULL,
[LOGGED_OUT_TIME] [decimal](10, 2) NULL,
[ON_PHONE_TIME] [decimal](10, 2) NULL,
[Q_ON_PHONE_TIME] [decimal](10, 2) NULL,
[TALK_TIME] [decimal](10, 2) NULL,
[Q_TALK_TIME] [decimal](10, 2) NULL,
[HANDLE_TIME] [decimal](10, 2) NULL,
[Q_HANDLE_TIME] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MING] [decimal](10, 2) NULL,
[AUT2] [decimal](10, 2) NULL,
)

--==================================
-- POPULATE TEMPORARY TABLE
--==================================
INSERT INTO #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_RTN
SELECT
 20								--AS GRPNO  
,ISNULL(GG.TENANT_NAME       ,'') AS TENANT_NAME
,ISNULL(GG.ID_EXT            ,'') AS ID_EXT
,ISNULL(GG.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
,ISNULL(GG.EMPLOYEE_ID       ,'') AS EMPLOYEE_ID
,ISNULL(GG.RESOURCE_NAME     ,'') AS RESOURCE_NAME
,ISNULL(GG.CAL_YEAR_MONTH_NUM,'') AS CAL_YEAR_MONTH_NUM
,ISNULL(GG.DI                ,'') AS DI
,ISNULL(GG.TI                ,'') AS TI

,(GG.AIR_DAY_TYPE)                AS AIR_DAY_TYPE
,(GG.AIR_ACW_FONT_COLOR)          AS AIR_ACW_FONT_COLOR
,(GG.MIN_GUARANTEE_MINUTES)       AS MIN_GUARANTEE_MINUTES
,(GG.MIN_GUARANTEE_TYPE)          AS MIN_GUARANTEE_TYPE
,(GG.AUTHORIZED_TO_INVOICE_TYPE)  AS AUTHORIZED_TO_INVOICE_TYPE
,(GG.HAS_HOLIDAYS)                AS HAS_HOLIDAYS
,(GG.INCLUDE_IN_CAS)              AS INCLUDE_IN_CAS
,(GG.READY_FOR_XML)               AS READY_FOR_XML
,(GG.SHOW_ID_EXTS)                AS SHOW_ID_EXTS

,'' --AS AIR_HOLIDAY_IN
,0  --AS ALL_AUTHORIZED_TIME

,CAST((ISNULL(GG.ANSWERED_SESSIONS			,0	 ))		  AS INT)			AS ANSWERED_SESSIONS
,CAST((ISNULL(GG.RONA_CNT			,0	 ))		  AS INT)			AS RONA_CNT
,CAST((ISNULL(GG.DID_CNT			,0	 ))		  AS INT)			AS DID_CNT
,CAST((ISNULL(GG.DOD_CNT			,0	 ))		  AS INT)			AS DOD_CNT
,CAST((ISNULL(GG.STARTED_IMS		,0	 ))		  AS INT)			AS STARTED_IMS
,CAST((ISNULL(GG.STARTED_CALLS		,0	 ))		  AS INT)			AS STARTED_CALLS
,CAST((ISNULL(GG.ESCALATIONS		,0	 ))		  AS INT)			AS ESCALATIONS
,CAST((ISNULL(GG.CONSULTS			,0	 ))		  AS INT)			AS CONSULTS
,CAST((ISNULL(GG.TRANSFERS			,0	 ))		  AS INT)			AS TRANSFERS
,CAST((ISNULL(GG.SUPERVISOR_JOINS	,0	 ))		  AS INT)			AS SUPERVISOR_JOINS

,CAST((ISNULL(GG.AVAILABLE_TIME				,0.00)) / @DS AS DECIMAL(10,2))	AS AVAILABLE_TIME
,CAST((ISNULL(GG.RING_TIME					,0.00)) / @DS AS DECIMAL(10,2))	AS RING_TIME
,CAST((ISNULL(GG.CONNECT_IM_SESSION_TIME	,0.00)) / @DS AS DECIMAL(10,2))	AS CONNECT_IM_SESSION_TIME
,CAST((ISNULL(GG.CONNECT_PHONE_CALL_TIME	,0.00)) / @DS AS DECIMAL(10,2))	AS CONNECT_PHONE_CALL_TIME
,CAST((ISNULL(GG.CONNECT_DID_CALL_TIME		,0.00)) / @DS AS DECIMAL(10,2))	AS CONNECT_DID_CALL_TIME
,CAST((ISNULL(GG.CONNECT_DOD_CALL_TIME		,0.00)) / @DS AS DECIMAL(10,2))	AS CONNECT_DOD_CALL_TIME
,CAST((ISNULL(GG.NON_CONNECT_CALL_TIME		,0.00)) / @DS AS DECIMAL(10,2))	AS NON_CONNECT_CALL_TIME
,CAST((ISNULL(GG.ACW_TIME					,0.00)) / @DS AS DECIMAL(10,2))	AS ACW_TIME
,CAST((ISNULL(GG.RONA_TIME					,0.00)) / @DS AS DECIMAL(10,2)) AS RONA_TIME
,CAST((ISNULL(GG.UNAVAILABLE_TIME			,0.00)) / @DS AS DECIMAL(10,2)) AS UNAVAILABLE_TIME
,CAST((ISNULL(GG.OFF_WORK_TIME				,0.00)) / @DS AS DECIMAL(10,2)) AS OFF_WORK_TIME
,CAST((ISNULL(GG.LOGGED_OUT_TIME			,0.00)) / @DS AS DECIMAL(10,2)) AS LOGGED_OUT_TIME
,CAST((ISNULL(GG.ON_PHONE_TIME				,0.00)) / @DS AS DECIMAL(10,2)) AS ON_PHONE_TIME
,CAST((ISNULL(GG.Q_ON_PHONE_TIME			,0.00)) / @DS AS DECIMAL(10,2)) AS Q_ON_PHONE_TIME
,CAST((ISNULL(GG.TALK_TIME					,0.00)) / @DS AS DECIMAL(10,2)) AS TALK_TIME
,CAST((ISNULL(GG.Q_TALK_TIME				,0.00)) / @DS AS DECIMAL(10,2)) AS Q_TALK_TIME
,CAST((ISNULL(GG.HANDLE_TIME				,0.00)) / @DS AS DECIMAL(10,2)) AS HANDLE_TIME
,CAST((ISNULL(GG.Q_HANDLE_TIME				,0.00)) / @DS AS DECIMAL(10,2)) AS Q_HANDLE_TIME

,CAST((ISNULL(GG.CPROD						,0.00)) / @DS AS DECIMAL(10,2))	AS CPROD
,CAST((ISNULL(GG.MING						,0.00)) / @DS AS DECIMAL(10,2))	AS MING
,CAST((ISNULL(GG.AUT2						,0.00)) / @DS AS DECIMAL(10,2))	AS AUT2


FROM  -- GG STARTS HERE:
(	SELECT
	 ISNULL(SW.TENANT_NAME,'')        AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  AS EMPLOYEE_ID
	,MAX(RESOURCE_NAME)               AS RESOURCE_NAME

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) AS TI

	,MAX(SW.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,MAX(SW.AIR_ACW_FONT_COLOR)         AS AIR_ACW_FONT_COLOR
	,MAX(SW.MIN_GUARANTEE_MINUTES)      AS MIN_GUARANTEE_MINUTES
	,MAX(SW.MIN_GUARANTEE_TYPE)         AS MIN_GUARANTEE_TYPE
	,MAX(SW.AUTHORIZED_TO_INVOICE_TYPE) AS AUTHORIZED_TO_INVOICE_TYPE
	,MAX(SW.HAS_HOLIDAYS)               AS HAS_HOLIDAYS
	,MAX(SW.INCLUDE_IN_CAS)             AS INCLUDE_IN_CAS
	,MAX(SW.READY_FOR_XML)              AS READY_FOR_XML
	,MAX(SW.SHOW_ID_EXTS)               AS SHOW_ID_EXTS

	,SUM(ISNULL(SW.ANSWERED_SESSIONS	,0	 )) AS ANSWERED_SESSIONS
	,SUM(ISNULL(SW.RONA_CNT				,0	 )) AS RONA_CNT
	,SUM(ISNULL(SW.DID_CNT				,0	 )) AS DID_CNT
	,SUM(ISNULL(SW.DOD_CNT				,0	 )) AS DOD_CNT
	,SUM(ISNULL(SW.STARTED_IMS			,0	 )) AS STARTED_IMS
	,SUM(ISNULL(SW.STARTED_CALLS		,0	 )) AS STARTED_CALLS
	,SUM(ISNULL(SW.ESCALATIONS			,0	 )) AS ESCALATIONS
	,SUM(ISNULL(SW.CONSULTS				,0	 )) AS CONSULTS
	,SUM(ISNULL(SW.TRANSFERS			,0	 )) AS TRANSFERS
	,SUM(ISNULL(SW.SUPERVISOR_JOINS		,0	 )) AS SUPERVISOR_JOINS

	,SUM(ISNULL(SW.AVAILABLE_TIME			,0.00))	AS AVAILABLE_TIME
	,SUM(ISNULL(SW.RING_TIME				,0.00))	AS RING_TIME
	,SUM(ISNULL(SW.CONNECT_IM_SESSION_TIME	,0.00))	AS CONNECT_IM_SESSION_TIME
	,SUM(ISNULL(SW.CONNECT_PHONE_CALL_TIME	,0.00))	AS CONNECT_PHONE_CALL_TIME
	,SUM(ISNULL(SW.CONNECT_DID_CALL_TIME	,0.00))	AS CONNECT_DID_CALL_TIME
	,SUM(ISNULL(SW.CONNECT_DOD_CALL_TIME	,0.00))	AS CONNECT_DOD_CALL_TIME
	,SUM(ISNULL(SW.NON_CONNECT_CALL_TIME	,0.00))	AS NON_CONNECT_CALL_TIME
	,SUM(ISNULL(SW.ACW_TIME					,0.00))	AS ACW_TIME
	,SUM(ISNULL(SW.RONA_TIME				,0.00))	AS RONA_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_TIME			,0.00))	AS UNAVAILABLE_TIME
	,SUM(ISNULL(SW.OFF_WORK_TIME			,0.00))	AS OFF_WORK_TIME
	,SUM(ISNULL(SW.LOGGED_OUT_TIME			,0.00))	AS LOGGED_OUT_TIME
	,SUM(ISNULL(SW.ON_PHONE_TIME			,0.00))	AS ON_PHONE_TIME
	,SUM(ISNULL(SW.Q_ON_PHONE_TIME			,0.00))	AS Q_ON_PHONE_TIME
	,SUM(ISNULL(SW.TALK_TIME				,0.00))	AS TALK_TIME
	,SUM(ISNULL(SW.Q_TALK_TIME				,0.00))	AS Q_TALK_TIME
	,SUM(ISNULL(SW.HANDLE_TIME				,0.00))	AS HANDLE_TIME
	,SUM(ISNULL(SW.Q_HANDLE_TIME			,0.00))	AS Q_HANDLE_TIME
	
	,SUM(ISNULL(SW.CPROD					,0.00))	AS CPROD
	,SUM(ISNULL(SW.MING						,0.00))	AS MING
	,SUM(ISNULL(SW.AUT2						,0.00))	AS AUT2
	
	FROM            #IMPORTS_MONAT_AGENT_INVOICING_REPORTS	SW
	INNER JOIN      DATE_TIME								DT   ON DT.DATE_TIME_KEY	=	SW.STD_TENANT_START_DATE_TIME_KEY

	GROUP BY 
	 ISNULL(SW.TENANT_NAME,'')        --AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             --AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') --AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  --AS EMPLOYEE_ID

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) --AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) --AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) --AS TI

) GG

--==================================
--IS A HOLIDAY DATE IN THE MIX:
--==================================
DECLARE @HOLIDAY_IN VARCHAR(1)
SET @HOLIDAY_IN = 'N'
DECLARE @I INT
SET @I = (SELECT COUNT(*) FROM #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_RTN WHERE AIR_DAY_TYPE = 'H')  --  AND INCLUDE_IN_CAS = 'Y')
IF @I > 0 BEGIN
	SET @HOLIDAY_IN = 'Y'
END
--==================================
UPDATE #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_RTN SET
 AIR_HOLIDAY_IN = @HOLIDAY_IN

--======================================================
--UPDATE TOTALS LINE ON REPORT FOR STANDARD AND HOLIDAY:
--======================================================
UPDATE #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_RTN SET
 ALL_AUTHORIZED_TIME = ISNULL(LOJ.ALL_AUTHORIZED_TIME,0.0)
FROM #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_RTN TA
LEFT OUTER JOIN
(	SELECT
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
	,SUM(AUT2) AS ALL_AUTHORIZED_TIME
	FROM #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_RTN 
	GROUP BY 
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
) LOJ ON LOJ.SCHEDULER_ACL_NAME = TA.SCHEDULER_ACL_NAME
	 AND LOJ.EMPLOYEE_ID        = TA.EMPLOYEE_ID
	 AND LOJ.AIR_DAY_TYPE       = TA.AIR_DAY_TYPE

--==================================
--RETURN DATA
--==================================
--==================================
--POPULATE TABLE READ BY SSIS TO GET END DATE OF DATA REPORT/FILE HAS BEEN RUN FOR:
--==================================
INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
SELECT
 'uspIMPORTS_MONAT_AGENT_INVOICING_REPORTS'				--SQL_JOB_NAME
,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,111),'/','')  --FILENM   YYYYMMDD_...
,dbo.GETDATE()											--CST_ROW_CREATED_TIME

--=====================================
--RETURN DATASET:
--=====================================
SELECT 
 CASE WHEN @DUR_IN = 'SS' THEN '' ELSE 'F' END AS DUR_FORMAT
,CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
,V.*

FROM      #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_RTN  V

ORDER BY 
 V.GRPNO
,V.SCHEDULER_ACL_NAME
,V.RESOURCE_NAME
,V.EMPLOYEE_ID
,V.CAL_YEAR_MONTH_NUM
,V.DATE_INTERVAL
,V.TIME_INTERVAL  --SINCE IN MILITARY TIME!




--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_MONAT_AGENT_INVOICING_REPORTS_01]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_MONAT_AGENT_INVOICING_REPORTS_01]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300) --Hid. Def=' '
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@SHOW_DETAILS		 BIT		  --	 DEF='TRUE'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'  MANual,SUBscription
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='INV'
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='INV'  
AS
SET NOCOUNT ON    

--  EXECUTE [dbo].[uspIMPORTS_MONAT_AGENT_INVOICING_REPORTS_01] '08/01/2017','08/15/2017','0','0','0','0','HR','Y','SS','NM','Y','4','MAN','INV','INV'

--	@TIME_INTERVAL:  Can show invoicing report at hourly level or higher !!!

--	Durations in FTP FILE are in HH:MM:SS but converted to seconds.  Therefore, reporting may be in seconds, minutes, or hours.

--  SELECT * FROM WSOL_TB_IMPORTS_MONAT_SD_INVOICE_GROUPS
--  SELECT * FROM WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA


--========================================================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) 
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) -- + 1
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
END
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

DECLARE
 @MTD_BEG AS DATETIME
,@MTD_END AS DATETIME  --,@YTD_BEG AS DATETIME--,@YTD_END AS DATETIME
SET @MTD_BEG = CAST(CAST(DATEPART(mm,@DTM_BEG) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)
SET @MTD_END = @DTM_END  

IF @TIME_INTERVAL IN ('MR','MD') BEGIN  --MONTH DETERMINED BY @DTM_BEG.
	SET @DTM_BEG = @MTD_BEG
	SET @DTM_END = @MTD_END
END

IF @EXECUTIONER = 'DLY' BEGIN
	IF DATEPART(DW,dbo.getdate()) = 2 BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 3,101) AS DATETIME)
	END
	ELSE BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
	END
	SET @DTM_END = @DTM_BEG + 1
END

IF @EXECUTIONER = 'WKY' BEGIN
	SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 7,101) AS DATETIME)
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate()	 ,101) AS DATETIME)
END

IF @EXECUTIONER = 'MTH' BEGIN
	IF MONTH(dbo.getdate()) = 1
		BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
		END
	ELSE
		BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) AS DATETIME)
END



--========================================================================
--	SET AMOUNT TO DIVIDE BY:
--========================================================================
DECLARE @DS DECIMAL(10,2)  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.00     --DIVIDE SECONDS BY 1  TO GET SAME, SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
    SET @DS = 60.00    --DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
    SET @DS = 3600.00  --DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
--	CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_MONAT_AGENT_INVOICING_REPORTS_01') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_01
END
CREATE TABLE #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_01
(TENANT_NAME					VARCHAR(50)
,ID_EXT							VARCHAR(3)
,SCHEDULER_ACL_NAME				VARCHAR(100)  
,EMPLOYEE_ID					VARCHAR(50)
,STD_TENANT_START_DATE_TIME_KEY INT
,RESOURCE_NAME					VARCHAR(100)

,AIR_DAY_TYPE					VARCHAR(1)
,AIR_ACW_FONT_COLOR				VARCHAR(50)
,MIN_GUARANTEE_MINUTES			DECIMAL(6,3)
,MIN_GUARANTEE_TYPE				VARCHAR(50)
,AUTHORIZED_TO_INVOICE_TYPE		VARCHAR(50)
,HAS_HOLIDAYS					VARCHAR(1)
,INCLUDE_IN_CAS					VARCHAR(1)
,READY_FOR_XML					VARCHAR(1)
,SHOW_ID_EXTS					VARCHAR(1)
,
[INBOUND_CALLS] [int] NULL,
[OUTBOUND_CALLS] [int] NULL,
[TOTAL_CALLS] [int] NULL,
[LOGGED_IN_DUR] [decimal](10, 2) NULL,
[AVAILABLE_DUR] [decimal](10, 2) NULL,
[BUSY_DUR] [decimal](10, 2) NULL,
[DIRECT_CALL_DUR] [decimal](10, 2) NULL,
[DIRECT_OB_DIAL_DUR] [decimal](10, 2) NULL,
[OFF_WORK_DUR] [decimal](10, 2) NULL,
[UNKNOWN_DUR] [decimal](10, 2) NULL,
[RONA_DUR] [decimal](10, 2) NULL,
[RONA_SPECIAL_PROJECT_DUR] [decimal](10, 2) NULL,
[RONA_SYSTEM_ISSUES_IT_DUR] [decimal](10, 2) NULL,
[RONA_IDLE_DUR] [decimal](10, 2) NULL,
[RONA_CALL_BACK_DUR] [decimal](10, 2) NULL,
[INCALL_DUR] [decimal](10, 2) NULL,
[INCALL_IDLE_DUR] [decimal](10, 2) NULL,
[INCALL_CALL_BACK_DUR] [decimal](10, 2) NULL,
[INCALL_SPECIAL_PROJECT_DUR] [decimal](10, 2) NULL,
[INCALL_ON_BREAK_DUR] [decimal](10, 2) NULL,
[ACW_DUR] [decimal](10, 2) NULL,
[AUTHORIZED_ACW_DUR] [decimal](10, 2) NULL,
[ACW_ON_BREAK_DUR] [decimal](10, 2) NULL,
[ACW_CALL_BACK_DUR] [decimal](10, 2) NULL,
[ACW_IDLE_DUR] [decimal](10, 2) NULL,
[ACW_SPECIAL_PROJECT_DUR] [decimal](10, 2) NULL,
[ACW_FLOOR_SUPPORT_DUR] [decimal](10, 2) NULL,
[ACW_SYSTEM_ISSUES_IT_DUR] [decimal](10, 2) NULL,
[RING_DUR] [decimal](10, 2) NULL,
[RING_BREAK_DUR] [decimal](10, 2) NULL,
[RING_SPECIAL_PROJECT_DUR] [decimal](10, 2) NULL,
[RING_IDLE_DUR] [decimal](10, 2) NULL,
[RING_SYSTEM_ISSUES_IT_DUR] [decimal](10, 2) NULL,
[RING_CALL_BACK_DUR] [decimal](10, 2) NULL,
[UNAVAILABLE_DUR] [decimal](10, 2) NULL,
[UNAVAILABLE_ON_BREAK_DUR] [decimal](10, 2) NULL,
[UNAVAILABLE_CALL_BACK_DUR] [decimal](10, 2) NULL,
[UNAVAILABLE_IDLE_DUR] [decimal](10, 2) NULL,
[UNAVAILABLE_PERSONAL_TIME_DUR] [decimal](10, 2) NULL,
[UNAVAILABLE_RR_DUR] [decimal](10, 2) NULL,
[UNAVAILABLE_SPECIAL_PROJECT_DUR] [decimal](10, 2) NULL,
[UNAVAILABLE_FLOOR_SUPPORT_DUR] [decimal](10, 2) NULL,
[UNAVAILABLE_SYSTEM_ISSUES_IT_DUR] [decimal](10, 2) NULL,
[UNAVAILABLE_EMAIL_DUR] [decimal](10, 2) NULL,
[TOTAL_AVAILABLE] [decimal](10, 2) NULL,
[TOTAL_RING] [decimal](10, 2) NULL,
[TOTAL_TALK] [decimal](10, 2) NULL,
[TOTAL_ACW] [decimal](10, 2) NULL,
[TOTAL_UNAVAILABLE] [decimal](10, 2) NULL,
[TOTAL_RONA] [decimal](10, 2) NULL,
[HANDLE_TIME] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[AUTHORIZED] [decimal](10, 2) NULL,
)

INSERT INTO #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_01
SELECT
 'MONAT GLOBAL'	--T.TENANT_NAME
,''					--UAA.ACD_ID_EXTENSION
,UAA.SCHEDULER_ACL_NAME
,UAA.EMPLOYEE_ID
,UAA.STD_TENANT_START_DATE_TIME_KEY
,UAA.RESOURCE_NAME

,(ISNULL(UAA.AIR_DAY_TYPE,''))					--AS AIR_DAY_TYPE
,(ISNULL(UAA.AIR_ACW_FONT_COLOR,''))			--AS AIR_ACW_FONT_COLOR
,(ISNULL(UAA.MIN_GUARANTEE_MINUTES,0.000))		--AS MIN_GUARANTEE_MINUTES
,(ISNULL(UAA.MIN_GUARANTEE_TYPE,''))			--AS MIN_GUARANTEE_TYPE
,(ISNULL(UAA.AUTHORIZED_TO_INVOICE_TYPE,''))	--AS AUTHORIZED_TO_INVOICE_TYPE
,(ISNULL(UAA.HAS_HOLIDAYS,''))					--AS HAS_HOLIDAYS
,(ISNULL(UAA.INCLUDE_IN_CAS,''))				--AS INCLUDE_IN_CAS
,(ISNULL(UAA.READY_FOR_XML,''))					--AS READY_FOR_XML
,(ISNULL(UAA.SHOW_ID_EXTS,''))					--AS SHOW_ID_EXTS

,(ISNULL(UAA.INBOUND_CALLS						,0))
,(ISNULL(UAA.OUTBOUND_CALLS						,0))
,(ISNULL(UAA.TOTAL_CALLS						,0))

,(ISNULL(UAA.LOGGED_IN_DUR						,0.00))
,(ISNULL(UAA.AVAILABLE_DUR						,0.00))
,(ISNULL(UAA.BUSY_DUR							,0.00))
,(ISNULL(UAA.DIRECT_CALL_DUR					,0.00))
,(ISNULL(UAA.DIRECT_OB_DIAL_DUR					,0.00))
,(ISNULL(UAA.OFF_WORK_DUR						,0.00))
,(ISNULL(UAA.UNKNOWN_DUR						,0.00))
,(ISNULL(UAA.RONA_DUR							,0.00))
,(ISNULL(UAA.RONA_SPECIAL_PROJECT_DUR			,0.00))
,(ISNULL(UAA.RONA_SYSTEM_ISSUES_IT_DUR			,0.00))
,(ISNULL(UAA.RONA_IDLE_DUR						,0.00))
,(ISNULL(UAA.RONA_CALL_BACK_DUR					,0.00))
,(ISNULL(UAA.INCALL_DUR							,0.00))
,(ISNULL(UAA.INCALL_IDLE_DUR					,0.00))
,(ISNULL(UAA.INCALL_CALL_BACK_DUR				,0.00))
,(ISNULL(UAA.INCALL_SPECIAL_PROJECT_DUR			,0.00))
,(ISNULL(UAA.INCALL_ON_BREAK_DUR				,0.00))
,(ISNULL(UAA.ACW_DUR							,0.00))
,(ISNULL(UAA.AUTHORIZED_ACW_DUR					,0.00))
,(ISNULL(UAA.ACW_ON_BREAK_DUR					,0.00))
,(ISNULL(UAA.ACW_CALL_BACK_DUR					,0.00))
,(ISNULL(UAA.ACW_IDLE_DUR						,0.00))
,(ISNULL(UAA.ACW_SPECIAL_PROJECT_DUR			,0.00))
,(ISNULL(UAA.ACW_FLOOR_SUPPORT_DUR				,0.00))
,(ISNULL(UAA.ACW_SYSTEM_ISSUES_IT_DUR			,0.00))
,(ISNULL(UAA.RING_DUR							,0.00))
,(ISNULL(UAA.RING_BREAK_DUR						,0.00))
,(ISNULL(UAA.RING_SPECIAL_PROJECT_DUR			,0.00))
,(ISNULL(UAA.RING_IDLE_DUR						,0.00))
,(ISNULL(UAA.RING_SYSTEM_ISSUES_IT_DUR			,0.00))
,(ISNULL(UAA.RING_CALL_BACK_DUR					,0.00))
,(ISNULL(UAA.UNAVAILABLE_DUR					,0.00))
,(ISNULL(UAA.UNAVAILABLE_ON_BREAK_DUR			,0.00))
,(ISNULL(UAA.UNAVAILABLE_CALL_BACK_DUR			,0.00))
,(ISNULL(UAA.UNAVAILABLE_IDLE_DUR				,0.00))
,(ISNULL(UAA.UNAVAILABLE_PERSONAL_TIME_DUR		,0.00))
,(ISNULL(UAA.UNAVAILABLE_RR_DUR					,0.00))
,(ISNULL(UAA.UNAVAILABLE_SPECIAL_PROJECT_DUR	,0.00))
,(ISNULL(UAA.UNAVAILABLE_FLOOR_SUPPORT_DUR		,0.00))
,(ISNULL(UAA.UNAVAILABLE_SYSTEM_ISSUES_IT_DUR	,0.00))
,(ISNULL(UAA.UNAVAILABLE_EMAIL_DUR				,0.00))
,(ISNULL(UAA.TOTAL_AVAILABLE					,0.00))
,(ISNULL(UAA.TOTAL_RING							,0.00))
,(ISNULL(UAA.TOTAL_TALK							,0.00))
,(ISNULL(UAA.TOTAL_ACW							,0.00))
,(ISNULL(UAA.TOTAL_UNAVAILABLE					,0.00))
,(ISNULL(UAA.TOTAL_RONA							,0.00))
,(ISNULL(UAA.HANDLE_TIME						,0.00))
,(ISNULL(UAA.CPROD								,0.00))
,(ISNULL(UAA.AUTHORIZED							,0.00))

--SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_NEW

FROM
(	SELECT	
	-- UA.TENANT_KEY
	 ''									AS ACD_ID_EXTENSION
	,UA.INVOICE_ID					    AS SCHEDULER_ACL_NAME
	,UA.FF_AGENT						AS EMPLOYEE_ID 
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,MAX(UA.RESOURCE_NAME)              AS RESOURCE_NAME
	,MAX(UA.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,'BLACK'                            AS AIR_ACW_FONT_COLOR
	,0									AS MIN_GUARANTEE_MINUTES
	,''									AS MIN_GUARANTEE_TYPE
	,''									AS AUTHORIZED_TO_INVOICE_TYPE
	,'Y'								AS HAS_HOLIDAYS
	,''									AS INCLUDE_IN_CAS
	,''									AS READY_FOR_XML
	,''									AS SHOW_ID_EXTS

	,SUM(ISNULL(UA.INBOUND_CALLS					,0))	AS INBOUND_CALLS
	,SUM(ISNULL(UA.OUTBOUND_CALLS					,0))	AS OUTBOUND_CALLS
	,SUM(ISNULL(UA.TOTAL_CALLS						,0))	AS TOTAL_CALLS

	,SUM(ISNULL(UA.LOGGED_IN_DUR					,0.00))	AS LOGGED_IN_DUR
	,SUM(ISNULL(UA.AVAILABLE_DUR					,0.00))	AS AVAILABLE_DUR
	,SUM(ISNULL(UA.BUSY_DUR							,0.00))	AS BUSY_DUR
	,SUM(ISNULL(UA.DIRECT_CALL_DUR					,0.00))	AS DIRECT_CALL_DUR
	,SUM(ISNULL(UA.DIRECT_OB_DIAL_DUR				,0.00))	AS DIRECT_OB_DIAL_DUR
	,SUM(ISNULL(UA.OFF_WORK_DUR						,0.00))	AS OFF_WORK_DUR
	,SUM(ISNULL(UA.UNKNOWN_DUR						,0.00))	AS UNKNOWN_DUR
	,SUM(ISNULL(UA.RONA_DUR							,0.00))	AS RONA_DUR
	,SUM(ISNULL(UA.RONA_SPECIAL_PROJECT_DUR			,0.00))	AS RONA_SPECIAL_PROJECT_DUR
	,SUM(ISNULL(UA.RONA_SYSTEM_ISSUES_IT_DUR		,0.00))	AS RONA_SYSTEM_ISSUES_IT_DUR
	,SUM(ISNULL(UA.RONA_IDLE_DUR					,0.00))	AS RONA_IDLE_DUR
	,SUM(ISNULL(UA.RONA_CALL_BACK_DUR				,0.00))	AS RONA_CALL_BACK_DUR
	,SUM(ISNULL(UA.INCALL_DUR						,0.00))	AS INCALL_DUR
	,SUM(ISNULL(UA.INCALL_IDLE_DUR					,0.00))	AS INCALL_IDLE_DUR
	,SUM(ISNULL(UA.INCALL_CALL_BACK_DUR				,0.00)) AS INCALL_CALL_BACK_DUR
	,SUM(ISNULL(UA.INCALL_SPECIAL_PROJECT_DUR		,0.00)) AS INCALL_SPECIAL_PROJECT_DUR
	,SUM(ISNULL(UA.INCALL_ON_BREAK_DUR				,0.00)) AS INCALL_ON_BREAK_DUR
	,SUM(ISNULL(UA.ACW_DUR							,0.00)) AS ACW_DUR
	,SUM(ISNULL(UA.AUTHORIZED_ACW_DUR				,0.00)) AS AUTHORIZED_ACW_DUR
	,SUM(ISNULL(UA.ACW_ON_BREAK_DUR					,0.00)) AS ACW_ON_BREAK_DUR
	,SUM(ISNULL(UA.ACW_CALL_BACK_DUR				,0.00)) AS ACW_CALL_BACK_DUR
	,SUM(ISNULL(UA.ACW_IDLE_DUR						,0.00)) AS ACW_IDLE_DUR
	,SUM(ISNULL(UA.ACW_SPECIAL_PROJECT_DUR			,0.00)) AS ACW_SPECIAL_PROJECT_DUR
	,SUM(ISNULL(UA.ACW_FLOOR_SUPPORT_DUR			,0.00)) AS ACW_FLOOR_SUPPORT_DUR
	,SUM(ISNULL(UA.ACW_SYSTEM_ISSUES_IT_DUR			,0.00)) AS ACW_SYSTEM_ISSUES_IT_DUR
	,SUM(ISNULL(UA.RING_DUR							,0.00)) AS RING_DUR
	,SUM(ISNULL(UA.RING_BREAK_DUR					,0.00)) AS RING_BREAK_DUR
	,SUM(ISNULL(UA.RING_SPECIAL_PROJECT_DUR			,0.00)) AS RING_SPECIAL_PROJECT_DUR
	,SUM(ISNULL(UA.RING_IDLE_DUR					,0.00)) AS RING_IDLE_DUR
	,SUM(ISNULL(UA.RING_SYSTEM_ISSUES_IT_DUR		,0.00)) AS RING_SYSTEM_ISSUES_IT_DUR
	,SUM(ISNULL(UA.RING_CALL_BACK_DUR				,0.00)) AS RING_CALL_BACK_DUR
	,SUM(ISNULL(UA.UNAVAILABLE_DUR					,0.00)) AS UNAVAILABLE_DUR
	,SUM(ISNULL(UA.UNAVAILABLE_ON_BREAK_DUR			,0.00)) AS UNAVAILABLE_ON_BREAK_DUR
	,SUM(ISNULL(UA.UNAVAILABLE_CALL_BACK_DUR		,0.00)) AS UNAVAILABLE_CALL_BACK_DUR
	,SUM(ISNULL(UA.UNAVAILABLE_IDLE_DUR				,0.00)) AS UNAVAILABLE_IDLE_DUR
	,SUM(ISNULL(UA.UNAVAILABLE_PERSONAL_TIME_DUR	,0.00)) AS UNAVAILABLE_PERSONAL_TIME_DUR
	,SUM(ISNULL(UA.UNAVAILABLE_RR_DUR				,0.00)) AS UNAVAILABLE_RR_DUR
	,SUM(ISNULL(UA.UNAVAILABLE_SPECIAL_PROJECT_DUR	,0.00)) AS UNAVAILABLE_SPECIAL_PROJECT_DUR
	,SUM(ISNULL(UA.UNAVAILABLE_FLOOR_SUPPORT_DUR	,0.00)) AS UNAVAILABLE_FLOOR_SUPPORT_DUR
	,SUM(ISNULL(UA.UNAVAILABLE_SYSTEM_ISSUES_IT_DUR	,0.00)) AS UNAVAILABLE_SYSTEM_ISSUES_IT_DUR
	,SUM(ISNULL(UA.UNAVAILABLE_EMAIL_DUR			,0.00)) AS UNAVAILABLE_EMAIL_DUR
	,SUM(ISNULL(UA.TOTAL_AVAILABLE					,0.00)) AS TOTAL_AVAILABLE
	,SUM(ISNULL(UA.TOTAL_RING						,0.00)) AS TOTAL_RING
	,SUM(ISNULL(UA.TOTAL_TALK						,0.00)) AS TOTAL_TALK
	,SUM(ISNULL(UA.TOTAL_ACW						,0.00)) AS TOTAL_ACW
	,SUM(ISNULL(UA.TOTAL_UNAVAILABLE				,0.00)) AS TOTAL_UNAVAILABLE
	,SUM(ISNULL(UA.TOTAL_RONA						,0.00)) AS TOTAL_RONA
	,SUM(ISNULL(UA.HANDLE_TIME						,0.00)) AS HANDLE_TIME
	,SUM(ISNULL(UA.CPROD							,0.00))	AS CPROD
	,SUM(ISNULL(UA.AUTHORIZED						,0.00))	AS AUTHORIZED
	
	--  SELECT *
	FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_NEW	UA
	INNER JOIN      DATE_TIME							DT	ON DT.DATE_TIME_KEY = UA.STD_TENANT_START_DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
		
	GROUP BY 
	 UA.INVOICE_ID
	,UA.FF_AGENT
	,UA.STD_TENANT_START_DATE_TIME_KEY
) UAA

--==============================================================
-- CREATE TEMPORARY TABLE TO RETURN RESULTS
--==============================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_MONAT_AGENT_INVOICING_REPORTS_RTN_01') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_RTN_01
END
CREATE TABLE #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_RTN_01
(GRPNO                 INT
,TENANT_NAME           VARCHAR(50)
,ID_EXT                VARCHAR(3)
,SCHEDULER_ACL_NAME    VARCHAR(100)
,EMPLOYEE_ID           VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,CAL_YEAR_MONTH_NUM    VARCHAR(10)
,DATE_INTERVAL         VARCHAR(50)
,TIME_INTERVAL         VARCHAR(10)

,AIR_DAY_TYPE				varchar(1)
,AIR_ACW_FONT_COLOR			varchar(50)
,MIN_GUARANTEE_MINUTES		decimal(6,3)
,MIN_GUARANTEE_TYPE			varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE	varchar(50)
,HAS_HOLIDAYS				varchar(1)
,INCLUDE_IN_CAS				varchar(1)
,READY_FOR_XML				varchar(1)
,SHOW_ID_EXTS				varchar(1)

,AIR_HOLIDAY_IN				VARCHAR(1)
,ALL_AUTHORIZED_TIME		DECIMAL(10,2)

,
[INBOUND_CALLS] [int] NULL,
[OUTBOUND_CALLS] [int] NULL,
[TOTAL_CALLS] [int] NULL,
[LOGGED_IN_DUR] [decimal](10, 2) NULL,
[AVAILABLE_DUR] [decimal](10, 2) NULL,
[BUSY_DUR] [decimal](10, 2) NULL,
[DIRECT_CALL_DUR] [decimal](10, 2) NULL,
[DIRECT_OB_DIAL_DUR] [decimal](10, 2) NULL,
[OFF_WORK_DUR] [decimal](10, 2) NULL,
[UNKNOWN_DUR] [decimal](10, 2) NULL,
[RONA_DUR] [decimal](10, 2) NULL,
[RONA_SPECIAL_PROJECT_DUR] [decimal](10, 2) NULL,
[RONA_SYSTEM_ISSUES_IT_DUR] [decimal](10, 2) NULL,
[RONA_IDLE_DUR] [decimal](10, 2) NULL,
[RONA_CALL_BACK_DUR] [decimal](10, 2) NULL,
[INCALL_DUR] [decimal](10, 2) NULL,
[INCALL_IDLE_DUR] [decimal](10, 2) NULL,
[INCALL_CALL_BACK_DUR] [decimal](10, 2) NULL,
[INCALL_SPECIAL_PROJECT_DUR] [decimal](10, 2) NULL,
[INCALL_ON_BREAK_DUR] [decimal](10, 2) NULL,
[ACW_DUR] [decimal](10, 2) NULL,
[AUTHORIZED_ACW_DUR] [decimal](10, 2) NULL,
[ACW_ON_BREAK_DUR] [decimal](10, 2) NULL,
[ACW_CALL_BACK_DUR] [decimal](10, 2) NULL,
[ACW_IDLE_DUR] [decimal](10, 2) NULL,
[ACW_SPECIAL_PROJECT_DUR] [decimal](10, 2) NULL,
[ACW_FLOOR_SUPPORT_DUR] [decimal](10, 2) NULL,
[ACW_SYSTEM_ISSUES_IT_DUR] [decimal](10, 2) NULL,
[RING_DUR] [decimal](10, 2) NULL,
[RING_BREAK_DUR] [decimal](10, 2) NULL,
[RING_SPECIAL_PROJECT_DUR] [decimal](10, 2) NULL,
[RING_IDLE_DUR] [decimal](10, 2) NULL,
[RING_SYSTEM_ISSUES_IT_DUR] [decimal](10, 2) NULL,
[RING_CALL_BACK_DUR] [decimal](10, 2) NULL,
[UNAVAILABLE_DUR] [decimal](10, 2) NULL,
[UNAVAILABLE_ON_BREAK_DUR] [decimal](10, 2) NULL,
[UNAVAILABLE_CALL_BACK_DUR] [decimal](10, 2) NULL,
[UNAVAILABLE_IDLE_DUR] [decimal](10, 2) NULL,
[UNAVAILABLE_PERSONAL_TIME_DUR] [decimal](10, 2) NULL,
[UNAVAILABLE_RR_DUR] [decimal](10, 2) NULL,
[UNAVAILABLE_SPECIAL_PROJECT_DUR] [decimal](10, 2) NULL,
[UNAVAILABLE_FLOOR_SUPPORT_DUR] [decimal](10, 2) NULL,
[UNAVAILABLE_SYSTEM_ISSUES_IT_DUR] [decimal](10, 2) NULL,
[UNAVAILABLE_EMAIL_DUR] [decimal](10, 2) NULL,
[TOTAL_AVAILABLE] [decimal](10, 2) NULL,
[TOTAL_RING] [decimal](10, 2) NULL,
[TOTAL_TALK] [decimal](10, 2) NULL,
[TOTAL_ACW] [decimal](10, 2) NULL,
[TOTAL_UNAVAILABLE] [decimal](10, 2) NULL,
[TOTAL_RONA] [decimal](10, 2) NULL,
[HANDLE_TIME] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[AUTHORIZED] [decimal](10, 2) NULL,
)

--==================================
-- POPULATE TEMPORARY TABLE
--==================================
INSERT INTO #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_RTN_01
SELECT
 20								--AS GRPNO  
,ISNULL(GG.TENANT_NAME       ,'') AS TENANT_NAME
,ISNULL(GG.ID_EXT            ,'') AS ID_EXT
,ISNULL(GG.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
,ISNULL(GG.EMPLOYEE_ID       ,'') AS EMPLOYEE_ID
,ISNULL(GG.RESOURCE_NAME     ,'') AS RESOURCE_NAME
,ISNULL(GG.CAL_YEAR_MONTH_NUM,'') AS CAL_YEAR_MONTH_NUM
,ISNULL(GG.DI                ,'') AS DI
,ISNULL(GG.TI                ,'') AS TI

,(GG.AIR_DAY_TYPE)                AS AIR_DAY_TYPE
,(GG.AIR_ACW_FONT_COLOR)          AS AIR_ACW_FONT_COLOR
,(GG.MIN_GUARANTEE_MINUTES)       AS MIN_GUARANTEE_MINUTES
,(GG.MIN_GUARANTEE_TYPE)          AS MIN_GUARANTEE_TYPE
,(GG.AUTHORIZED_TO_INVOICE_TYPE)  AS AUTHORIZED_TO_INVOICE_TYPE
,(GG.HAS_HOLIDAYS)                AS HAS_HOLIDAYS
,(GG.INCLUDE_IN_CAS)              AS INCLUDE_IN_CAS
,(GG.READY_FOR_XML)               AS READY_FOR_XML
,(GG.SHOW_ID_EXTS)                AS SHOW_ID_EXTS

,'' --AS AIR_HOLIDAY_IN
,0  --AS ALL_AUTHORIZED_TIME

,ISNULL(GG.INBOUND_CALLS							,0)								AS INBOUND_CALLS
,ISNULL(GG.OUTBOUND_CALLS							,0)								AS OUTBOUND_CALLS
,ISNULL(GG.TOTAL_CALLS								,0)								AS TOTAL_CALLS

,CAST((ISNULL(GG.LOGGED_IN_DUR						,0.00)) / @DS AS DECIMAL(10,2))	AS LOGGED_IN_DUR
,CAST((ISNULL(GG.AVAILABLE_DUR						,0.00)) / @DS AS DECIMAL(10,2))	AS AVAILABLE_DUR
,CAST((ISNULL(GG.BUSY_DUR							,0.00)) / @DS AS DECIMAL(10,2))	AS BUSY_DUR
,CAST((ISNULL(GG.DIRECT_CALL_DUR					,0.00)) / @DS AS DECIMAL(10,2))	AS DIRECT_CALL_DUR
,CAST((ISNULL(GG.DIRECT_OB_DIAL_DUR					,0.00)) / @DS AS DECIMAL(10,2)) AS DIRECT_OB_DIAL_DUR
,CAST((ISNULL(GG.OFF_WORK_DUR						,0.00)) / @DS AS DECIMAL(10,2))	AS OFF_WORK_DUR
,CAST((ISNULL(GG.UNKNOWN_DUR						,0.00)) / @DS AS DECIMAL(10,2))	AS UNKNOWN_DUR
,CAST((ISNULL(GG.RONA_DUR							,0.00)) / @DS AS DECIMAL(10,2))	AS RONA_DUR
,CAST((ISNULL(GG.RONA_SPECIAL_PROJECT_DUR			,0.00)) / @DS AS DECIMAL(10,2))	AS RONA_SPECIAL_PROJECT_DUR
,CAST((ISNULL(GG.RONA_SYSTEM_ISSUES_IT_DUR			,0.00)) / @DS AS DECIMAL(10,2)) AS RONA_SYSTEM_ISSUES_IT_DUR
,CAST((ISNULL(GG.RONA_IDLE_DUR						,0.00)) / @DS AS DECIMAL(10,2)) AS RONA_IDLE_DUR
,CAST((ISNULL(GG.RONA_CALL_BACK_DUR					,0.00)) / @DS AS DECIMAL(10,2)) AS RONA_CALL_BACK_DUR
,CAST((ISNULL(GG.INCALL_DUR							,0.00)) / @DS AS DECIMAL(10,2)) AS INCALL_DUR
,CAST((ISNULL(GG.INCALL_IDLE_DUR					,0.00)) / @DS AS DECIMAL(10,2)) AS INCALL_IDLE_DUR
,CAST((ISNULL(GG.INCALL_CALL_BACK_DUR				,0.00)) / @DS AS DECIMAL(10,2)) AS INCALL_CALL_BACK_DUR
,CAST((ISNULL(GG.INCALL_SPECIAL_PROJECT_DUR			,0.00)) / @DS AS DECIMAL(10,2)) AS INCALL_SPECIAL_PROJECT_DUR
,CAST((ISNULL(GG.INCALL_ON_BREAK_DUR				,0.00)) / @DS AS DECIMAL(10,2)) AS INCALL_ON_BREAK_DUR
,CAST((ISNULL(GG.ACW_DUR							,0.00)) / @DS AS DECIMAL(10,2)) AS ACW_DUR
,CAST((ISNULL(GG.AUTHORIZED_ACW_DUR					,0.00)) / @DS AS DECIMAL(10,2)) AS AUTHORIZED_ACW_DUR
,CAST((ISNULL(GG.ACW_ON_BREAK_DUR					,0.00)) / @DS AS DECIMAL(10,2)) AS ACW_ON_BREAK_DUR
,CAST((ISNULL(GG.ACW_CALL_BACK_DUR					,0.00)) / @DS AS DECIMAL(10,2)) AS ACW_CALL_BACK_DUR
,CAST((ISNULL(GG.ACW_IDLE_DUR						,0.00)) / @DS AS DECIMAL(10,2)) AS ACW_IDLE_DUR
,CAST((ISNULL(GG.ACW_SPECIAL_PROJECT_DUR			,0.00)) / @DS AS DECIMAL(10,2)) AS ACW_SPECIAL_PROJECT_DUR
,CAST((ISNULL(GG.ACW_FLOOR_SUPPORT_DUR				,0.00)) / @DS AS DECIMAL(10,2)) AS ACW_FLOOR_SUPPORT_DUR
,CAST((ISNULL(GG.ACW_SYSTEM_ISSUES_IT_DUR			,0.00)) / @DS AS DECIMAL(10,2)) AS ACW_SYSTEM_ISSUES_IT_DUR
,CAST((ISNULL(GG.RING_DUR							,0.00)) / @DS AS DECIMAL(10,2)) AS RING_DUR
,CAST((ISNULL(GG.RING_BREAK_DUR						,0.00)) / @DS AS DECIMAL(10,2)) AS RING_BREAK_DUR
,CAST((ISNULL(GG.RING_SPECIAL_PROJECT_DUR			,0.00)) / @DS AS DECIMAL(10,2)) AS RING_SPECIAL_PROJECT_DUR
,CAST((ISNULL(GG.RING_IDLE_DUR						,0.00)) / @DS AS DECIMAL(10,2)) AS RING_IDLE_DUR
,CAST((ISNULL(GG.RING_SYSTEM_ISSUES_IT_DUR			,0.00)) / @DS AS DECIMAL(10,2)) AS RING_SYSTEM_ISSUES_IT_DUR
,CAST((ISNULL(GG.RING_CALL_BACK_DUR					,0.00)) / @DS AS DECIMAL(10,2)) AS RING_CALL_BACK_DUR
,CAST((ISNULL(GG.UNAVAILABLE_DUR					,0.00)) / @DS AS DECIMAL(10,2)) AS UNAVAILABLE_DUR
,CAST((ISNULL(GG.UNAVAILABLE_ON_BREAK_DUR			,0.00)) / @DS AS DECIMAL(10,2)) AS UNAVAILABLE_ON_BREAK_DUR
,CAST((ISNULL(GG.UNAVAILABLE_CALL_BACK_DUR			,0.00)) / @DS AS DECIMAL(10,2)) AS UNAVAILABLE_CALL_BACK_DUR
,CAST((ISNULL(GG.UNAVAILABLE_IDLE_DUR				,0.00)) / @DS AS DECIMAL(10,2)) AS UNAVAILABLE_IDLE_DUR
,CAST((ISNULL(GG.UNAVAILABLE_PERSONAL_TIME_DUR		,0.00)) / @DS AS DECIMAL(10,2)) AS UNAVAILABLE_PERSONAL_TIME_DUR
,CAST((ISNULL(GG.UNAVAILABLE_RR_DUR					,0.00)) / @DS AS DECIMAL(10,2)) AS UNAVAILABLE_RR_DUR
,CAST((ISNULL(GG.UNAVAILABLE_SPECIAL_PROJECT_DUR	,0.00)) / @DS AS DECIMAL(10,2)) AS UNAVAILABLE_SPECIAL_PROJECT_DUR
,CAST((ISNULL(GG.UNAVAILABLE_FLOOR_SUPPORT_DUR		,0.00)) / @DS AS DECIMAL(10,2)) AS UNAVAILABLE_FLOOR_SUPPORT_DUR
,CAST((ISNULL(GG.UNAVAILABLE_SYSTEM_ISSUES_IT_DUR	,0.00)) / @DS AS DECIMAL(10,2)) AS UNAVAILABLE_SYSTEM_ISSUES_IT_DUR
,CAST((ISNULL(GG.UNAVAILABLE_EMAIL_DUR				,0.00)) / @DS AS DECIMAL(10,2)) AS UNAVAILABLE_EMAIL_DUR
,CAST((ISNULL(GG.TOTAL_AVAILABLE					,0.00)) / @DS AS DECIMAL(10,2)) AS TOTAL_AVAILABLE
,CAST((ISNULL(GG.TOTAL_RING							,0.00)) / @DS AS DECIMAL(10,2)) AS TOTAL_RING
,CAST((ISNULL(GG.TOTAL_TALK							,0.00)) / @DS AS DECIMAL(10,2)) AS TOTAL_TALK
,CAST((ISNULL(GG.TOTAL_ACW							,0.00)) / @DS AS DECIMAL(10,2)) AS TOTAL_ACW
,CAST((ISNULL(GG.TOTAL_UNAVAILABLE					,0.00)) / @DS AS DECIMAL(10,2)) AS TOTAL_UNAVAILABLE
,CAST((ISNULL(GG.TOTAL_RONA							,0.00)) / @DS AS DECIMAL(10,2)) AS TOTAL_RONA
,CAST((ISNULL(GG.HANDLE_TIME						,0.00)) / @DS AS DECIMAL(10,2)) AS HANDLE_TIME
,CAST((ISNULL(GG.CPROD								,0.00)) / @DS AS DECIMAL(10,2))	AS CPROD
,CAST((ISNULL(GG.AUTHORIZED							,0.00)) / @DS AS DECIMAL(10,2))	AS AUTHORIZED


FROM  -- GG STARTS HERE:
(	SELECT
	 ISNULL(SW.TENANT_NAME,'')        AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  AS EMPLOYEE_ID
	,MAX(RESOURCE_NAME)               AS RESOURCE_NAME

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) AS TI

	,MAX(SW.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,MAX(SW.AIR_ACW_FONT_COLOR)         AS AIR_ACW_FONT_COLOR
	,MAX(SW.MIN_GUARANTEE_MINUTES)      AS MIN_GUARANTEE_MINUTES
	,MAX(SW.MIN_GUARANTEE_TYPE)         AS MIN_GUARANTEE_TYPE
	,MAX(SW.AUTHORIZED_TO_INVOICE_TYPE) AS AUTHORIZED_TO_INVOICE_TYPE
	,MAX(SW.HAS_HOLIDAYS)               AS HAS_HOLIDAYS
	,MAX(SW.INCLUDE_IN_CAS)             AS INCLUDE_IN_CAS
	,MAX(SW.READY_FOR_XML)              AS READY_FOR_XML
	,MAX(SW.SHOW_ID_EXTS)               AS SHOW_ID_EXTS

	,SUM(ISNULL(SW.INBOUND_CALLS					,0))	AS INBOUND_CALLS
	,SUM(ISNULL(SW.OUTBOUND_CALLS					,0))	AS OUTBOUND_CALLS
	,SUM(ISNULL(SW.TOTAL_CALLS						,0))	AS TOTAL_CALLS

	,SUM(ISNULL(SW.LOGGED_IN_DUR					,0.00))	AS LOGGED_IN_DUR
	,SUM(ISNULL(SW.AVAILABLE_DUR					,0.00))	AS AVAILABLE_DUR
	,SUM(ISNULL(SW.BUSY_DUR							,0.00))	AS BUSY_DUR
	,SUM(ISNULL(SW.DIRECT_CALL_DUR					,0.00))	AS DIRECT_CALL_DUR
	,SUM(ISNULL(SW.DIRECT_OB_DIAL_DUR				,0.00)) AS DIRECT_OB_DIAL_DUR
	,SUM(ISNULL(SW.OFF_WORK_DUR						,0.00))	AS OFF_WORK_DUR
	,SUM(ISNULL(SW.UNKNOWN_DUR						,0.00))	AS UNKNOWN_DUR
	,SUM(ISNULL(SW.RONA_DUR							,0.00))	AS RONA_DUR
	,SUM(ISNULL(SW.RONA_SPECIAL_PROJECT_DUR			,0.00))	AS RONA_SPECIAL_PROJECT_DUR
	,SUM(ISNULL(SW.RONA_SYSTEM_ISSUES_IT_DUR		,0.00))	AS RONA_SYSTEM_ISSUES_IT_DUR
	,SUM(ISNULL(SW.RONA_IDLE_DUR					,0.00))	AS RONA_IDLE_DUR
	,SUM(ISNULL(SW.RONA_CALL_BACK_DUR				,0.00))	AS RONA_CALL_BACK_DUR
	,SUM(ISNULL(SW.INCALL_DUR						,0.00))	AS INCALL_DUR
	,SUM(ISNULL(SW.INCALL_IDLE_DUR					,0.00))	AS INCALL_IDLE_DUR
	,SUM(ISNULL(SW.INCALL_CALL_BACK_DUR				,0.00))	AS INCALL_CALL_BACK_DUR
	,SUM(ISNULL(SW.INCALL_SPECIAL_PROJECT_DUR		,0.00))	AS INCALL_SPECIAL_PROJECT_DUR
	,SUM(ISNULL(SW.INCALL_ON_BREAK_DUR				,0.00))	AS INCALL_ON_BREAK_DUR
	,SUM(ISNULL(SW.ACW_DUR							,0.00))	AS ACW_DUR
	,SUM(ISNULL(SW.AUTHORIZED_ACW_DUR				,0.00)) AS AUTHORIZED_ACW_DUR
	,SUM(ISNULL(SW.ACW_ON_BREAK_DUR					,0.00))	AS ACW_ON_BREAK_DUR
	,SUM(ISNULL(SW.ACW_CALL_BACK_DUR				,0.00))	AS ACW_CALL_BACK_DUR
	,SUM(ISNULL(SW.ACW_IDLE_DUR						,0.00))	AS ACW_IDLE_DUR
	,SUM(ISNULL(SW.ACW_SPECIAL_PROJECT_DUR			,0.00))	AS ACW_SPECIAL_PROJECT_DUR
	,SUM(ISNULL(SW.ACW_FLOOR_SUPPORT_DUR			,0.00))	AS ACW_FLOOR_SUPPORT_DUR
	,SUM(ISNULL(SW.ACW_SYSTEM_ISSUES_IT_DUR			,0.00))	AS ACW_SYSTEM_ISSUES_IT_DUR
	,SUM(ISNULL(SW.RING_DUR							,0.00))	AS RING_DUR
	,SUM(ISNULL(SW.RING_BREAK_DUR					,0.00))	AS RING_BREAK_DUR
	,SUM(ISNULL(SW.RING_SPECIAL_PROJECT_DUR			,0.00))	AS RING_SPECIAL_PROJECT_DUR
	,SUM(ISNULL(SW.RING_IDLE_DUR					,0.00))	AS RING_IDLE_DUR
	,SUM(ISNULL(SW.RING_SYSTEM_ISSUES_IT_DUR		,0.00))	AS RING_SYSTEM_ISSUES_IT_DUR
	,SUM(ISNULL(SW.RING_CALL_BACK_DUR				,0.00))	AS RING_CALL_BACK_DUR
	,SUM(ISNULL(SW.UNAVAILABLE_DUR					,0.00))	AS UNAVAILABLE_DUR
	,SUM(ISNULL(SW.UNAVAILABLE_ON_BREAK_DUR			,0.00))	AS UNAVAILABLE_ON_BREAK_DUR
	,SUM(ISNULL(SW.UNAVAILABLE_CALL_BACK_DUR		,0.00))	AS UNAVAILABLE_CALL_BACK_DUR
	,SUM(ISNULL(SW.UNAVAILABLE_IDLE_DUR				,0.00))	AS UNAVAILABLE_IDLE_DUR
	,SUM(ISNULL(SW.UNAVAILABLE_PERSONAL_TIME_DUR	,0.00))	AS UNAVAILABLE_PERSONAL_TIME_DUR
	,SUM(ISNULL(SW.UNAVAILABLE_RR_DUR				,0.00))	AS UNAVAILABLE_RR_DUR
	,SUM(ISNULL(SW.UNAVAILABLE_SPECIAL_PROJECT_DUR	,0.00))	AS UNAVAILABLE_SPECIAL_PROJECT_DUR
	,SUM(ISNULL(SW.UNAVAILABLE_FLOOR_SUPPORT_DUR	,0.00))	AS UNAVAILABLE_FLOOR_SUPPORT_DUR
	,SUM(ISNULL(SW.UNAVAILABLE_SYSTEM_ISSUES_IT_DUR	,0.00))	AS UNAVAILABLE_SYSTEM_ISSUES_IT_DUR
	,SUM(ISNULL(SW.UNAVAILABLE_EMAIL_DUR			,0.00))	AS UNAVAILABLE_EMAIL_DUR
	,SUM(ISNULL(SW.TOTAL_AVAILABLE					,0.00))	AS TOTAL_AVAILABLE
	,SUM(ISNULL(SW.TOTAL_RING						,0.00))	AS TOTAL_RING
	,SUM(ISNULL(SW.TOTAL_TALK						,0.00))	AS TOTAL_TALK
	,SUM(ISNULL(SW.TOTAL_ACW						,0.00))	AS TOTAL_ACW
	,SUM(ISNULL(SW.TOTAL_UNAVAILABLE				,0.00))	AS TOTAL_UNAVAILABLE
	,SUM(ISNULL(SW.TOTAL_RONA						,0.00))	AS TOTAL_RONA
	,SUM(ISNULL(SW.HANDLE_TIME						,0.00)) AS HANDLE_TIME
	,SUM(ISNULL(SW.CPROD							,0.00))	AS CPROD
	,SUM(ISNULL(SW.AUTHORIZED						,0.00))	AS AUTHORIZED
	
	FROM            #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_01	SW
	INNER JOIN      DATE_TIME									DT   ON DT.DATE_TIME_KEY	=	SW.STD_TENANT_START_DATE_TIME_KEY

	GROUP BY 
	 ISNULL(SW.TENANT_NAME,'')        --AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             --AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') --AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  --AS EMPLOYEE_ID

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) --AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) --AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) --AS TI

) GG

--==================================
--IS A HOLIDAY DATE IN THE MIX:
--==================================
DECLARE @HOLIDAY_IN VARCHAR(1)
SET @HOLIDAY_IN = 'N'
DECLARE @I INT
SET @I = (SELECT COUNT(*) FROM #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_RTN_01 WHERE AIR_DAY_TYPE = 'H')  --  AND INCLUDE_IN_CAS = 'Y')
IF @I > 0 BEGIN
	SET @HOLIDAY_IN = 'Y'
END
--==================================
UPDATE #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_RTN_01 SET
 AIR_HOLIDAY_IN = @HOLIDAY_IN

--======================================================
--UPDATE TOTALS LINE ON REPORT FOR STANDARD AND HOLIDAY:
--======================================================
UPDATE #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_RTN_01 SET
 ALL_AUTHORIZED_TIME = ISNULL(LOJ.ALL_AUTHORIZED_TIME,0.0)
FROM #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_RTN_01 TA
LEFT OUTER JOIN
(	SELECT
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
	,SUM(AUTHORIZED) AS ALL_AUTHORIZED_TIME
	FROM #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_RTN_01
	GROUP BY 
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
) LOJ ON LOJ.SCHEDULER_ACL_NAME = TA.SCHEDULER_ACL_NAME
	 AND LOJ.EMPLOYEE_ID        = TA.EMPLOYEE_ID
	 AND LOJ.AIR_DAY_TYPE       = TA.AIR_DAY_TYPE

--==================================
--RETURN DATA
--==================================
--==================================
--POPULATE TABLE READ BY SSIS TO GET END DATE OF DATA REPORT/FILE HAS BEEN RUN FOR:
--==================================
INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
SELECT
 'uspIMPORTS_MONAT_AGENT_INVOICING_REPORTS_01'			--SQL_JOB_NAME
,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,111),'/','')  --FILENM   YYYYMMDD_...
,dbo.GETDATE()											--CST_ROW_CREATED_TIME

--=====================================
--RETURN DATASET:
--=====================================
SELECT 
 CASE WHEN @DUR_IN = 'SS' THEN '' ELSE 'F' END AS DUR_FORMAT
,CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
,V.*

FROM      #IMPORTS_MONAT_AGENT_INVOICING_REPORTS_RTN_01  V

ORDER BY 
 V.GRPNO
,V.SCHEDULER_ACL_NAME
,V.RESOURCE_NAME
,V.EMPLOYEE_ID
,V.CAL_YEAR_MONTH_NUM
,V.DATE_INTERVAL
,V.TIME_INTERVAL  --SINCE IN MILITARY TIME!




--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_MONAT_AIA_AGENT_MAPPING_IMPORT]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_MONAT_AIA_AGENT_MAPPING_IMPORT]
AS
SET NOCOUNT ON  -- EXECUTE [dbo].[uspIMPORTS_MONAT_AIA_AGENT_MAPPING_IMPORT]

--  DELETE FROM WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_1

--  SELECT * FROM WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_1

--  Data Loading SFTP Pathway
--  FTP server   = 52.173.192.182:22
--  FTP Username = Monat
--  FTP Password = JvkWRwK31QsdkXzsfeK8
--  FTP Pathway  = /MONAT/AIA/AIA_AGENT_MAPPING

--  USES WSOL_TB_IMPORT_ERRORS_FOUND.  NOT TOTALLY INDEPENDANT OF OTHER CLIENTS/TENANTS...

--=================================================================================================
DECLARE
 @TENANT_KEY      INT
,@SUB_GROUP_NAME  VARCHAR(50)
SET @TENANT_KEY		= 160  -- Monat Global Corp. CLIENT_ID in WSOL Database
SET @SUB_GROUP_NAME = 'MONAT_AIA_AGENT_MAPPING'
--===========================================================================================================================================================================================
--WHEN RUNNING MANUALLY DURING TESTING:DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 160 AND SUB_GROUP_NAME = 'MONAT_AIA_AGENT_MAPPING'
DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = @SUB_GROUP_NAME  --'MONAT_AIA_AGENT_MAPPING'    --  SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 160
--===========================================================================================================================================================================================
--WHEN RUNNING MANUALLY DURING TESTING:DELETE FROM WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_ERRORS WHERE TENANT_KEY = 160 AND IMPORT_SUB_GROUP_NAME = 'MONAT_AIA_AGENT_MAPPING'
DELETE FROM WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_ERRORS
WHERE IMPORT_SUB_GROUP_NAME = @SUB_GROUP_NAME  --'MONAT_AIA_AGENT_MAPPING' --SELECT * FROM WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_ERRORS WHERE TENANT_KEY = 160
--===========================================================================================================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_1 SET
 INVOICE_MAP_KEY	= RTRIM(LTRIM(REPLACE(ISNULL(INVOICE_MAP_KEY,''),' ',' ')))
,FF_EMAIL_ADDRESS	= RTRIM(LTRIM(REPLACE(ISNULL(FF_EMAIL_ADDRESS,''),' ',' ')))
,FF_INVOICE_GROUP	= RTRIM(LTRIM(REPLACE(ISNULL(FF_INVOICE_GROUP,''),' ',' ')))
,FF_PAY_GROUP		= RTRIM(LTRIM(REPLACE(ISNULL(FF_PAY_GROUP,''),' ',' ')))
						  
--  SELECT * FROM WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_ERRORS
--======================================================================
--PROCESS DUPLICATES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_ERRORS
SELECT
 W1.RESOURCE_NAME
,W1.INVOICE_MAP_KEY
,W1.FF_EMAIL_ADDRESS
,W1.FF_INVOICE_GROUP
,W1.FF_PAY_GROUP
,W1.FTP_FILE_NAME
,dbo.GETDATE()																	--WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'MONAT_AIA_AGENT_MAPPING'									--IMPORT_SUB_GROUP_NAME
,'DUP'																			--ERROR_TAG
,'The Monat Invoice Map Key exists more than once in the agent mapping file.'	--ERROR_MSG
--  SELECT *  
FROM WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_1  W1
INNER JOIN
(	SELECT
	 INVOICE_MAP_KEY
	,ROW_NUMBER() over (partition by INVOICE_MAP_KEY
                            order by INVOICE_MAP_KEY) ROWNO
	FROM WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_1
) TNM  ON TNM.INVOICE_MAP_KEY = W1.INVOICE_MAP_KEY

LEFT OUTER JOIN WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_ERRORS AME   ON AME.INVOICE_MAP_KEY = W1.INVOICE_MAP_KEY

WHERE TNM.ROWNO > 1   

  AND ISNULL(AME.ERROR_TAG,'') = ''

--===============================================
--CHECK FOR BAD DATA FOUND IN IMPORT .CSV FILES:
--===============================================
--WHEN RUNNING MANUALLY DURING TESTING:INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND SELECT 106,'MONAT_AIA_AGENT_MAPPING',''              
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--SQL won't insert special characters!!!  + CHAR(9)  --CHAR(10) + CHAR(13)
--Check #1:  ===================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_1)
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + '1) File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	--SSIS reads WSOL_TB_IMPORT_ERRORS_FOUND table where TENANT_KEY = 160, and if record exists, outputs results/error_msg field in an email.
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	SELECT 
	 @TENANT_KEY									--TENANT_KEY
	,@SUB_GROUP_NAME  --'MONAT_AIA_AGENT_MAPPING'	--SUB_GROUP_NAME
	,@MSG1											--ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	--=============================================
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	SELECT 
	 @TENANT_KEY									--TENANT_KEY
	,@SUB_GROUP_NAME  --'MONAT_AIA_AGENT_MAPPING'	--SUB_GROUP_NAME
	,''												--ERROR_MSG			--NEVER SET THIS TO @MSG1 !!!  MUST BE ''.
END

--======================================================================
--PROCESS BAD INVOICE GROUP VALUES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_ERRORS
SELECT
 W1.RESOURCE_NAME
,W1.INVOICE_MAP_KEY
,W1.FF_EMAIL_ADDRESS
,W1.FF_INVOICE_GROUP
,W1.FF_PAY_GROUP
,W1.FTP_FILE_NAME
,dbo.GETDATE()																	--WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'MONAT_AIA_AGENT_MAPPING'									--IMPORT_SUB_GROUP_NAME
,'IIG'																			--ERROR_TAG --INVALID INVOICE GROUP
,'The INVOICE GROUP identifier found in the AIA Agent Mapping file is invalid.'	--ERROR_MSG
--  SELECT *  
FROM            WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_1			W1

LEFT JOIN       WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_ERRORS		AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
WHERE ISNULL(W1.FF_INVOICE_GROUP,'') NOT IN ('','RES','FC')

  AND ISNULL(AME.ERROR_TAG,'') = ''

--======================================================================
--PROCESS MISSING INVOICE MAP KEY VALUES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_ERRORS
SELECT
 W1.RESOURCE_NAME
,W1.INVOICE_MAP_KEY
,W1.FF_EMAIL_ADDRESS
,W1.FF_INVOICE_GROUP
,W1.FF_PAY_GROUP
,W1.FTP_FILE_NAME
,dbo.GETDATE()														--WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'MONAT_AIA_AGENT_MAPPING'						--IMPORT_SUB_GROUP_NAME
,'MAP'																--ERROR_TAG
,'The INVOICE MAP KEY is missing in the AIA Agent Mapping file.'	--ERROR_MSG
--  SELECT *  
FROM            WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_1			W1

LEFT JOIN       WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_ERRORS		AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
WHERE ISNULL(W1.INVOICE_MAP_KEY,'') = ''  -- CURRENTLY SET TO AGENT NAME

  AND ISNULL(AME.ERROR_TAG,'') = ''

--======================================================================
--PROCESS MISSING PAY GROUP VALUES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_ERRORS
SELECT
 W1.RESOURCE_NAME
,W1.INVOICE_MAP_KEY
,W1.FF_EMAIL_ADDRESS
,W1.FF_INVOICE_GROUP
,W1.FF_PAY_GROUP
,W1.FTP_FILE_NAME
,dbo.GETDATE()														--WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'MONAT_AIA_AGENT_MAPPING'						--IMPORT_SUB_GROUP_NAME
,'PAY'																--ERROR_TAG
,'The PAY GROUP value is missing in the AIA Agent Mapping file.'	--ERROR_MSG
--  SELECT *  
FROM            WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_1			W1

LEFT JOIN       WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_ERRORS		AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
WHERE ISNULL(W1.FF_PAY_GROUP,'') = ''  

  AND ISNULL(AME.ERROR_TAG,'') = ''

-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING ORDER BY RESOURCE_NAME
--!!! UPDATING """PERMANENT""" TABLE HERE: !!!
--=======================================================================================================
--UPDATE PERMANENT TABLE WITH WORK TABLE DATA WHERE TENANT_KEY AND INVOICE_MAP_KEY FIELDS/VALUES MATCH:
--=======================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING SET
 RESOURCE_NAME			= W1.RESOURCE_NAME
,INVOICE_MAP_KEY		= W1.INVOICE_MAP_KEY
,[EMAIL]				= W1.FF_EMAIL_ADDRESS
,INVOICE_GROUP			= W1.FF_INVOICE_GROUP
,PAY_GROUP				= W1.FF_PAY_GROUP
,FTP_FILE_NAME			= W1.FTP_FILE_NAME
--,WS_ROW_CREATED_TIME
,CST_ROW_UPDATED_TIME	= dbo.GETDATE()
--  SELECT *
FROM            WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_1			W1
--INNER JOIN MUST BE HERE.  NEVER CHANGE!
INNER JOIN      WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING			G     ON G.INVOICE_MAP_KEY        = W1.INVOICE_MAP_KEY
LEFT JOIN       WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_ERRORS	AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
--Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE ISNULL(AME.ERROR_TAG,'') = ''
  AND (   ( G.RESOURCE_NAME		<> W1.RESOURCE_NAME )
	   OR ( G.[EMAIL]			<> W1.FF_EMAIL_ADDRESS )
	   --OR ( G.INVOICE_MAP_KEY	<> W1.INVOICE_MAP_KEY )
	   OR ( G.INVOICE_GROUP		<> W1.FF_INVOICE_GROUP )
	   OR ( G.PAY_GROUP			<> W1.FF_PAY_GROUP )
	  )

--  SELECT * FROM WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING
--!!! INSERTING INTO """PERMANENT""" TABLE HERE: !!!
--========================================================
--INSERT "NEW" DATA FROM WORK TABLE INTO PERMANENT TABLE: 
--========================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING
SELECT
 W1.RESOURCE_NAME  
,W1.INVOICE_MAP_KEY
,W1.FF_EMAIL_ADDRESS
,W1.FF_INVOICE_GROUP
,W1.FF_PAY_GROUP
,W1.FTP_FILE_NAME
,dbo.GETDATE()    --WS_ROW_CREATED_TIME
,NULL             --WS_ROW_UPDATED_TIME

FROM            WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_1		W1
LEFT JOIN       WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING			G     ON G.INVOICE_MAP_KEY        = W1.INVOICE_MAP_KEY
LEFT JOIN       WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_ERRORS	AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:
WHERE ( G.INVOICE_MAP_KEY IS NULL AND ISNULL(W1.INVOICE_MAP_KEY,'') <> '' )

  AND ISNULL(AME.ERROR_TAG,'') = ''

--  SELECT * FROM WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING ORDER BY INVOICE_MAP_KEY 

--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_MONAT_AIA_AGENT_MAPPING_IMPORT_STATUS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_MONAT_AIA_AGENT_MAPPING_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--	PURPOSE:  SHOW WHAT PROBLEMS THE RECENTLY IMPORTED AIA AGENT MAPPING FILE HAD DURING THE IMPORT/CLEANUP PROCESS.
--	THIS USP IS DATA SOURCE FOR SSRS GRID ON "AIA AGENT MAPPING" IMPORTS STATUS REPORT!!!

--  EXECUTE [dbo].[uspIMPORTS_MONAT_AIA_AGENT_MAPPING_IMPORT_STATUS] '08/16/2017','08/30/2017','','B'

--  SELECT * FROM WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_ERRORS
--  SELECT * FROM YZ_TB_ERRORS_FOUND

--===================================================================================================================================================
DECLARE 
 @TENANT_KEY      INT
,@SUB_GROUP_NAME  VARCHAR(50)
SET @TENANT_KEY     = 160
SET @SUB_GROUP_NAME = 'MONAT_AIA_AGENT_MAPPING'

--===================================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--===================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME

IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
			--Dates passed in are for previous day:
	IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
	END
	ELSE IF DAY(dbo.getdate()) = 1 BEGIN
		IF MONTH(dbo.getdate()) = 1 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
	END
	ELSE BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
	END
	
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

END

ELSE BEGIN  --DAILY - Run report for YESTERDAY, 1 Day Only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- @DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
END

SET @DTM_END = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--===========================================================================================================
-- CREATE TEMP TABLE
--===========================================================================================================

IF OBJECT_ID('TEMPDB..#IMPORTS_MONAT_AIA_AGENT_MAPPING_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_MONAT_AIA_AGENT_MAPPING_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_MONAT_AIA_AGENT_MAPPING_IMPORT_STATUS
(	[RESOURCE_NAME] [varchar](100) NULL,
	[INVOICE_MAP_KEY] [varchar](50) NOT NULL,
	[EMAIL] [varchar](100) NULL,
	[INVOICE_GROUP] [varchar](50) NOT NULL,
	[PAY_GROUP] [varchar] (50) NULL,
	[FTP_FILE_NAME] [varchar](100) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[IMPORT_SUB_GROUP_NAME] [varchar](100) NULL,
	[ERROR_TAG] [varchar](50) NULL,
	[ERROR_MSG] [varchar](2500) NULL
)
INSERT INTO #IMPORTS_MONAT_AIA_AGENT_MAPPING_IMPORT_STATUS
SELECT
 RESOURCE_NAME
,INVOICE_MAP_KEY
,[EMAIL]
,INVOICE_GROUP
,PAY_GROUP
--,FTP_FILE_NAME
,REPLACE(FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG

-- SELECT *
FROM WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING_ERRORS		I   

--=================================================================================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_MONAT_AIA_AGENT_MAPPING_IMPORT_STATUS)
--=================================================================================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
--=================================================================================================
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_MONAT_AIA_AGENT_MAPPING_IMPORT_STATUS
	SELECT
	 ''				--RESOURCE_NAME
	,''				--INVOICE_MAP_KEY
	,''				--[EMAIL]
	,''				--INVOICE_GROUP
	,''				--PAY_GROUP
	,''				--FTP_FILE_NAME
	,DBO.GETDATE()	--WS_ROW_CREATED_TIME
	,''				--IMPORT_SUB_GROUP_NAME
	,''				--ERROR_TAG
	,''				--ERROR_MSG
END 

--====================================================================================================================================================================================================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''

IF @RCD_CNT = 0 BEGIN  --IF @RCD_CNT = 0 HERE,IT ACTUALLY EQUALS THE ONE INSERTED STATING 'No Prolems.' IN ERROR_MSG.
	SET @MSG1 = @MSG1 + 'There were NO Monat AIA Agent Mapping Import ERRORS found.'
END

ELSE BEGIN

IF @RPT_TYPE = 'B' BEGIN

	IF DAY(DBO.GETDATE()) = 16 OR DAY(DBO.GETDATE()) = 1 BEGIN
		SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
	END

	SET @MSG1 = @MSG1 + 'The list below contains errors found during the process of importing the Monat AIA Agent Mapping .csv file. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	SET @MSG1 = @MSG1 + 'Project Management will need to add, remove, or update agent information in their Monat AIA Agent Mapping .csv document '
	SET @MSG1 = @MSG1 + 'and upload the updated file to the SFTP directory in order for these agents to be invoiced through the Agent Invoice Automation system. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	END
END
--====================================================================================================================================================================================================================

DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),DBO.GETDATE(),101) + ' 10:30:00' AS DATETIME)
IF DBO.GETDATE() >  @TODAY_1030 AND DBO.GETDATE() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If DBO.GETDATE() after 10:30AM and before 11:00AM, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)

	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM YZ_TB_ERRORS_FOUND 
							   WHERE TENANT_KEY = @TENANT_KEY AND SUB_GROUP_NAME = @SUB_GROUP_NAME )
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some problems were encountered during the Monat AIA Agent Mapping import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'And any in list below.'
	END
END


--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_MONAT_AIA_AGENT_MAPPING_IMPORT_STATUS 

ORDER BY
 INVOICE_MAP_KEY

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_MONAT_AIA_AGENT_MAPPING_MISSING_AGENTS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_MONAT_AIA_AGENT_MAPPING_MISSING_AGENTS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHICH INVOICE_MAP_KEY VALUES EXIST IN THE ACTIVITY FILES, BUT NOT IN THE AIA_AGENT_MAPPING .CSV FILES.
--          NO MATCHES BETWEEN ACTIVITY AND AGENT MAPPING.  WHEN NO MATCHES, THEN NO 'SCHEDULER' INVOICING.
--THIS USP IS DATA SOURCE FOR SRS GRID ON "ACTIVITY IMPORTS" STATUS REPORT!!!

--EXECUTE [dbo].[uspIMPORTS_MONAT_AIA_AGENT_MAPPING_MISSING_AGENTS] '11/16/2017','11/26/2017','','B'

--========================================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--========================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME

IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.


--===================================================================================================
--CREATE AND POPULATE TMP TABLE
--===================================================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_MONAT_AIA_AGENT_MAPPING_MISSING_AGENTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_MONAT_AIA_AGENT_MAPPING_MISSING_AGENTS
END
CREATE TABLE #IMPORTS_MONAT_AIA_AGENT_MAPPING_MISSING_AGENTS
(FILEDATETIME          VARCHAR(50)
,FTP_FILE_NAME         VARCHAR(100)
,WS_ROW_CREATED_TIME   DATETIME
,INVOICE_MAP_KEY       VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,RCD_CNT               INT
)
INSERT INTO #IMPORTS_MONAT_AIA_AGENT_MAPPING_MISSING_AGENTS
SELECT
 DT.CAL_DATE_STRING					AS FILEDATETIME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME
,I.WS_ROW_CREATED_TIME
,I.FF_AGENT_NAME					AS INVOICE_MAP_KEY
,I.RESOURCE_NAME					AS RESOURCE_NAME
,COUNT(*)							AS RCD_CNT
--SELECT *
FROM            WSOL_TB_IMPORTS_MONAT_IC_INVOICING		I   
LEFT JOIN       WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING	IAM  ON IAM.INVOICE_MAP_KEY     = I.FF_AGENT_NAME
INNER JOIN      DATE_TIME								DT   ON DT.DATE_TIME_KEY        = I.STD_TENANT_START_DATE_TIME_KEY
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND ISNULL(IAM.INVOICE_MAP_KEY,'') = ''
  AND ISNULL(I.FF_AGENT_NAME,'') NOT IN ('Hargis, Rebecca','Slaughter, Rory') -- EXCLUDE EDUCATION LEADERS / WSOL EMPLOYEES
GROUP BY
 DT.CAL_DATE_STRING
,REPLACE(I.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME
,I.WS_ROW_CREATED_TIME
,I.FF_AGENT_NAME					--AS INVOICE_MAP_KEY
,I.RESOURCE_NAME					--AS RESOURCE_NAME

--==================================
UPDATE #IMPORTS_MONAT_AIA_AGENT_MAPPING_MISSING_AGENTS SET
 FILEDATETIME = REPLACE(CONVERT(VARCHAR(10),ISNULL(FILEDATETIME,'1/1/1900'),102),'/',' . ')

--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_MONAT_AIA_AGENT_MAPPING_MISSING_AGENTS)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_MONAT_AIA_AGENT_MAPPING_MISSING_AGENTS
	SELECT
	 ''				--DT.CAL_DATE_STRING
	,''				--I.FTP_FILE_NAME
	,dbo.GETDATE()  --I.WS_ROW_CREATED_TIME
	,''				--I.FF_AGENT_NAME		AS INVOICE_MAP_KEY
	,''				--I.FF_AGENT_NAME		AS RESOURCE_NAME
	,0				--COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
END
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RCD_CNT = 0 
	BEGIN  --@RCD_CNT WILL BE 0 STILL, EVEN THOUGH ONE BLANK RECORD WAS ADDED...
		SET @MSG1 = @MSG1 + 'There are NO Missing AIA Agent Mappings.'
	END
ELSE
	BEGIN
		IF @RPT_TYPE = 'B'
			BEGIN
				SET @MSG1 = ''
	
				IF @RCD_CNT = 0
					BEGIN
						SET @MSG1 = @MSG1 + 'There are NO missing AIA agent mappings!'
					END
				ELSE
					BEGIN
						IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1
							BEGIN
								SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
							END
		
								SET @MSG1 = @MSG1 + 'The list below contains Invoice Map Key values for agents that are associated with activity for the report date range, but ' + CHAR(10) + CHAR(13)
								SET @MSG1 = @MSG1 + 'who have not been added to or have incorrect values in the AIA Agent Mapping File. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

								SET @MSG1 = @MSG1 + 'Agents who are on this list will not be invoiced (for activity dates shown), unless a special request is made and received '
								SET @MSG1 = @MSG1 + 'with plenty of time before the automated invoice process begins.  The analyst will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

								SET @MSG1 = @MSG1 + 'Also, Project Management may need to add or update agent information in their AIA Agent Mapping CSV file and upload it '
								SET @MSG1 = @MSG1 + 'to the appropriate FTP directory before the Analyst can correctly update agent data. ' + CHAR(13) + CHAR(10)
					END

			END
	END

--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_MONAT_AIA_AGENT_MAPPING_MISSING_AGENTS 

ORDER BY
 INVOICE_MAP_KEY
,FTP_FILE_NAME

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_MONAT_AIA_XML]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_MONAT_AIA_XML]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300)
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='DY'  DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'-Manual - when users run report - what SRS reports are defaulted to.  MAN means use date range that user specified.  The exception is when a report is defined with PTD/YTD and MTD rows in it.
                                  --         'SUB'-Subscription - what SRS subscriptions are defaulted to.  SUB means set date range @vars based on @TIME_INTERVAL. (since date range in SRS Subscription can't be set correctly)
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='AIA'-Agent Invoice Automation - what Sergey uses for/in Scheduler...
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='XML'-AIA RPT (DETAIL) (XML FILE/EXPORT),
AS
SET NOCOUNT ON

SET @TENANT_KEY = 160  -- MONAT GLOBAL CLIENT ID IN WSOL DATABASE

--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)  
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 0,101) AS DATETIME)  
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) + 1
END

--IF @EXECUTIONER = 'MAN', DON'T CHANGE DATES -- THE REPORT IS BEING RAN MANUALLY, AND THE DATE RANGE WANTED BY THE USER IS BEING SET MANUALLY.

IF @EXECUTIONER = 'NEW' BEGIN -- NEW BI-MONTHLY PAYMENT CYCLE 1ST AND 16TH OF EACH MONTH
	IF @TIME_INTERVAL = 'W14' BEGIN
		IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate() - 1)) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
			END
		END		
		ELSE IF DAY(dbo.getdate()) = 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) < 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
	END
END

--=========================================================================================
--FORMAT 'MULTIPLES' "IN THAT" VALUES:  (Referring to CHARINDEX(search for this, in that))
--=========================================================================================
SET @ID_EXT          = ',' + LTRIM(RTRIM(@ID_EXT)) + ','
SET @SCHEDULER_GROUP = ',' + LTRIM(RTRIM(@SCHEDULER_GROUP)) + ','
 

--==============================================================
--SET AMOUNT TO DIVIDE BY:
--==============================================================
DECLARE @DS DECIMAL(10,2)  --INT  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.0       --DIVIDE SECONDS BY 1 TO GET SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
	SET @DS = 60.0		--DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
	SET @DS = 3600.0	--DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
IF @RPT_TYPE_GRP = 'AIA' BEGIN

	--POPULATES XML REPORT.  SRS SUBSCRIPTION EXPORTS TO XML.  SSIS RENAMES AND MOVES XML FILE TO FTP.  SERGEY PICKS UP FILE
	
	IF @RPT_TYPE = 'XML' BEGIN  --AIA REPORT  --EXACTLY WHAT IS IN XML FILE AND/OR AIA TABLE.
		--==================================		--CREATE TMP TABLE:
		IF OBJECT_ID('TEMPDB..#IMPORTS_MONAT_AIA_XML') IS NOT NULL BEGIN
		   DROP TABLE #IMPORTS_MONAT_AIA_XML
		END
		CREATE TABLE #IMPORTS_MONAT_AIA_XML
		([PLATFORM]                   VARCHAR(50)
		,[STATUS]                     VARCHAR(50) 
		,INVOICE_MAP_KEY              VARCHAR(50) 
		,FIELD_NAME                   VARCHAR(100) 
		,SCHEDULER_PROJECT_ID         VARCHAR(50) 
		,SCHEDULER_ACL_NAME           VARCHAR(100) 
		,ACD_ID_EXTENSION             VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_ID      VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_NAME    VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_ID       VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_NAME     VARCHAR(50) 
		,PRIMARY_PROJECT_MANAGER_ID   VARCHAR(500) 
		,DIRECTOR_OF_PROJECT_MANAGEMENT_ID VARCHAR(500) 
		,AGENT_TECHNOLOGY_MANAGER_ID  VARCHAR(500) 
		,CONTRACTOR_SUPPORT_PATHWAY   VARCHAR(500) 
		,INVOICE_SYSTEM_ID            VARCHAR(100) 
		,HOLIDAY_INVOICE_ID           VARCHAR(100) 
		,HOLIDAY                      VARCHAR(50) 
		,FILE_FORMAT_OF_PUSH          VARCHAR(50) 
		,AGENT_PREPARATION_INVOICE_ID VARCHAR(50) 
		,NEW_ACL                      VARCHAR(50) 
		,CURRENT_CATS                 VARCHAR(50) 
		,CATS_ID                      VARCHAR(50) 
		,PATS_ID                      VARCHAR(50) 
		,SMART_ELIGIBLE               VARCHAR(50) 
		,SMART_TIER_1                 VARCHAR(50) 
		,SMART_TIER_2                 VARCHAR(50) 
		,SMART_TIER_3                 VARCHAR(50) 
		,INTERVAL                     VARCHAR(50) 
		,DATE                         VARCHAR(50) 
		,HOD_INTERVAL                 VARCHAR(50) 
		,AU_DK_LOGGED_IN_DURATION     DECIMAL(10,2)  --INT 
		,AU_DK_AVAILABLE_DURATION     DECIMAL(10,2)  --INT 
		,AU_DK_TALK_DURATION          DECIMAL(10,2)  --INT 
		,AU_DK_IB_TALK_DURATION       DECIMAL(10,2)  --INT 
		,AU_DK_OB_TALK_DURATION       DECIMAL(10,2)  --INT 
		,AU_DK_CONVENTIONAL_ACW       DECIMAL(10,2)  --INT 
		,AU_DK_NR_DURATION            DECIMAL(10,2)  --INT 
		,AU_DK_PSEUDO_PRODUCTIVE_DURATION   DECIMAL(10,2)  --INT 
		,AU_DK_ADJUSTED_NR_DURATION         DECIMAL(10,2)  --INT 
		,AU_DK_TOTAL_PRODUCTIVE_DURATION    DECIMAL(10,2)  --INT 
		,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS DECIMAL(10,2)  --INT 
		,AU_DK_XFER_COUNT             INT 
		,AU_DK_HOLD_COUNT             INT 
		,AU_DK_CONFERENCE_COUNT       INT 
		,AU_DK_CONSULT_COUNT          INT 
		,AU_DK_PUP_COUNT              INT 
		,AU_DK_OFFERED_COUNT          INT 
		,AU_DK_HANDLED_COUNT          INT 
		,AU_DK_IB_HANDLE_COUNT        INT 
		,AU_DK_OB_HANDLE_COUNT        INT 
		,AU_DK_RONA_COUNT             INT 
		,AU_DK_AWR_COUNT              INT 
		,MINIMUM_GUARANTEE            DECIMAL(10,2) 
		,AUTHORIZED_TO_INVOICE        DECIMAL(10,2) 
		,WEEK_ENDING_DATE             VARCHAR(50) 
		,PAY_CYCLE_CLOSURE_DATE       VARCHAR(50) 
		,CAL_DATE                     DATETIME
		,TENANT_KEY                   INT 
		,INVOICE_ID                   VARCHAR(100) 
		,CST_ROW_CREATED_TIME         DATETIME
		)
		--==================================		
		-- INSERT INTO TEMP TABLE
		--==================================
		INSERT INTO #IMPORTS_MONAT_AIA_XML
		SELECT --AIA.*
		 AIA.[PLATFORM]
		,AIA.[STATUS]                       
		,AIA.INVOICE_MAP_KEY              
		,AIA.FIELD_NAME                   
		,AIA.SCHEDULER_PROJECT_ID         
		,AIA.SCHEDULER_ACL_NAME           
		,AIA.ACD_ID_EXTENSION             
		,AIA.OFFICIAL_WSOL_CLIENT_ID      
		,AIA.OFFICIAL_WSOL_CLIENT_NAME    
		,AIA.OFFICIAL_ACD_CLIENT_ID       
		,AIA.OFFICIAL_ACD_CLIENT_NAME     
		,AIA.PRIMARY_PROJECT_MANAGER_ID   
		,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID 
		,AIA.AGENT_TECHNOLOGY_MANAGER_ID  
		,AIA.CONTRACTOR_SUPPORT_PATHWAY   
		,AIA.INVOICE_SYSTEM_ID            
		,AIA.HOLIDAY_INVOICE_ID           
		,AIA.HOLIDAY                      
		,AIA.FILE_FORMAT_OF_PUSH          
		,AIA.AGENT_PREPARATION_INVOICE_ID 
		,AIA.NEW_ACL                      
		,AIA.CURRENT_CATS                 
		,AIA.CATS_ID                      
		,AIA.PATS_ID                      
		,AIA.SMART_ELIGIBLE               
		,AIA.SMART_TIER_1                 
		,AIA.SMART_TIER_2                 
		,AIA.SMART_TIER_3                 
		,AIA.INTERVAL                     
		,AIA.DATE                         
		,AIA.HOD_INTERVAL                 
		,CAST( ( 1.0 * (AIA.AU_DK_LOGGED_IN_DURATION) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_LOGGED_IN_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_AVAILABLE_DURATION) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_AVAILABLE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_TALK_DURATION) )      / @DS AS DECIMAL(10,2)) --AS AU_DK_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_IB_TALK_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_IB_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_OB_TALK_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_OB_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_CONVENTIONAL_ACW) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_CONVENTIONAL_ACW
		,CAST( ( 1.0 * (AIA.AU_DK_NR_DURATION) )        / @DS AS DECIMAL(10,2)) --AS AU_DK_NR_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_PSEUDO_PRODUCTIVE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_ADJUSTED_NR_DURATION) )         / @DS AS DECIMAL(10,2)) --AS AU_DK_ADJUSTED_NR_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION) )    / @DS AS DECIMAL(10,2)) --AS AU_DK_TOTAL_PRODUCTIVE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
		,(AIA.AU_DK_XFER_COUNT)         --AS AU_DK_XFER_COUNT
		,(AIA.AU_DK_HOLD_COUNT)         --AS AU_DK_HOLD_COUNT
		,(AIA.AU_DK_CONFERENCE_COUNT)   --AS AU_DK_CONFERENCE_COUNT
		,(AIA.AU_DK_CONSULT_COUNT)      --AS AU_DK_CONSULT_COUNT
		,(AIA.AU_DK_PUP_COUNT)          --AS AU_DK_PUP_COUNT
		,(AIA.AU_DK_OFFERED_COUNT)      --AS AU_DK_OFFERED_COUNT
		,(AIA.AU_DK_HANDLED_COUNT)      --AS AU_DK_HANDLED_COUNT
		,(AIA.AU_DK_IB_HANDLE_COUNT)    --AS AU_DK_IB_HANDLE_COUNT
		,(AIA.AU_DK_OB_HANDLE_COUNT)    --AS AU_DK_OB_HANDLE_COUNT
		,(AIA.AU_DK_RONA_COUNT)         --AS AU_DK_RONA_COUNT
		,(AIA.AU_DK_AWR_COUNT)          --AS AU_DK_AWR_COUNT
		,CAST( ( 1.0 * (AIA.MINIMUM_GUARANTEE) )     / @DS AS DECIMAL(10,2)) --AS MINIMUM_GUARANTEE
		,CAST( ( 1.0 * (AIA.AUTHORIZED_TO_INVOICE) ) / @DS AS DECIMAL(10,2)) --AS AUTHORIZED_TO_INVOICE
		,AIA.WEEK_ENDING_DATE             
		,AIA.PAY_CYCLE_CLOSURE_DATE       
		,AIA.CAL_DATE                     
		,AIA.TENANT_KEY                   
		,AIA.INVOICE_ID                   
		,AIA.WS_ROW_CREATED_TIME         

		--  SELECT *
		FROM            WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA	AIA
		INNER JOIN      DATE_TIME						DT		ON DT.DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
		
		WHERE ( DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END )
		  AND AIA.STATUS = 'Active'
		  AND ( (ISNULL(AIA.READY_FOR_XML,'') = 'Y')	--<----Maintain this field, and the AIA will populate the XML correctly every time!!!!!!!!!
				OR (@ID_EXT = 'Y') )					--<----In Test Mode (ignore what ready_for_xml is set to).
		  AND ( ISNULL(AIA.INVOICE_ID,'') <> '' )		--<----INSURANCE, IN CASE BLANK ID EXTENSION SLIPS THROUGH
--		  AND ( ISNULL(AIA.RESOURCE_NAME,'') <> '')		--<----INSURANCE, FILTER OUT THOSE NOT IN AIA AGENT MAPPING SINCE INVOICE_ID IS JUST FF_USER_NAME FROM IMPORT FILE

		ORDER BY 
		 AIA.OFFICIAL_ACD_CLIENT_NAME
		--,AIA.SCHEDULER_ACL_NAME
		,AIA.INVOICE_ID

		,AIA.ACD_ID_EXTENSION     
		,AIA.INVOICE_MAP_KEY
		,AIA.DATE
		,AIA.HOD_INTERVAL


		--==================================!!!--INSERT RECORD FOR REPORT SO SSIS KNOWS DATE OF DATA IN DATASET:
		--Have to include 'D??' or 'W??' because SRS Subscriptions are being ran at about same time in one sql job step.
		--  If one subscription takes longer than the other, the wrong date will get used/pulled from the YZ_TB_FILENAMES_FOR_SSIS in the ssis. and so on.
		IF CHARINDEX('D',@TIME_INTERVAL) > 0 BEGIN
			INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
			(SQL_JOB_NAME
			,FILENM
			,CST_ROW_CREATED_TIME)
			SELECT  --FOR THE .XML FILES FOR EACH DATE:
			 'iNetAIA_' + LTRIM(RTRIM(@TIME_INTERVAL))  --'iNetAIA_D09' for internal wsinet tenants 9 days from current date.  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.GETDATE()  --CST_ROW_CREATED_TIME
		END
		ELSE BEGIN  --'W' MEANING NEED TO PASS/POPULATE WITH DATE RANGE, LIKE 'MMDDYY_MMDDYY'. -- FOR GAR AND NW.
	

			INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
				(SQL_JOB_NAME
				,FILENM
				,CST_ROW_CREATED_TIME)
			SELECT  --FOR GETAROOM AND NINE_WEST:    --old:-- 'AGENT_INVOICE_AIA_XML'  --SQL_JOB_NAME 
			 'iNetAIA_' + LTRIM(RTRIM(@TIME_INTERVAL)) + '_' + REPLACE(LTRIM(RTRIM(CAST(@TENANT_KEY AS VARCHAR(10)))),',','')  --'iNetAIA_W14_900595' for GAR  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_BEG,1),'/','') + '_' + REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.GETDATE()  --CST_ROW_CREATED_TIME
		END
		--  SELECT * FROM WSOL_TB_FILENAMES_FOR_SSIS ORDER BY CST_ROW_CREATED_TIME DESC

		--==================================!!!--RETURN DATASET TO REPORT:
		SELECT *
		FROM #IMPORTS_MONAT_AIA_XML
		ORDER BY 
		 OFFICIAL_ACD_CLIENT_NAME
		--,SCHEDULER_ACL_NAME
		,INVOICE_ID
		,ACD_ID_EXTENSION     
		,INVOICE_MAP_KEY
		,DATE
		,HOD_INTERVAL
	END  --AIA_XML



END  --IF @RPT_TYPE_GRP = 'AIA'


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
--==================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_MONAT_IC_AGENT_INVOICING_REPORTS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_MONAT_IC_AGENT_INVOICING_REPORTS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300) --Hid. Def=' '
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'  MANual,SUBscription
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='INV'
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='INV'  
AS
SET NOCOUNT ON    

--  EXECUTE [dbo].[uspIMPORTS_MONAT_IC_AGENT_INVOICING_REPORTS] '11/16/2017','11/26/2017','0','0','0','0','HR','Y','SS','NM','Y','4','NEW','INV','INV'

--	@TIME_INTERVAL:  Can show invoicing report at hourly, daily level, or higher !!!

--	Durations in FTP FILE are in seconds.  Therefore, reporting may be in seconds, minutes, or hours.

--  SELECT * FROM WSOL_TB_IMPORTS_MONAT_SD_INVOICE_GROUPS
--  SELECT * FROM WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA


--========================================================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) 
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) -- + 1
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
END
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

DECLARE
 @MTD_BEG AS DATETIME
,@MTD_END AS DATETIME  --,@YTD_BEG AS DATETIME--,@YTD_END AS DATETIME
SET @MTD_BEG = CAST(CAST(DATEPART(mm,@DTM_BEG) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)
SET @MTD_END = @DTM_END  

IF @TIME_INTERVAL IN ('MR','MD') BEGIN  --MONTH DETERMINED BY @DTM_BEG.
	SET @DTM_BEG = @MTD_BEG
	SET @DTM_END = @MTD_END
END

--==================================
--SET AMOUNT TO DIVIDE BY:
--==================================
DECLARE @DS DECIMAL(10,2)  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.00     --DIVIDE SECONDS BY 1  TO GET SAME, SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
    SET @DS = 60.00    --DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
    SET @DS = 3600.00  --DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_MONAT_IC_AGENT_INVOICING_REPORTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_MONAT_IC_AGENT_INVOICING_REPORTS
END
CREATE TABLE #IMPORTS_MONAT_IC_AGENT_INVOICING_REPORTS
(TENANT_NAME						VARCHAR(50)
,ID_EXT								VARCHAR(3)
,SCHEDULER_ACL_NAME					VARCHAR(100)  
,EMPLOYEE_ID						VARCHAR(50)
,STD_TENANT_START_DATE_TIME_KEY		INT
,RESOURCE_NAME						VARCHAR(100)

,AIR_DAY_TYPE						VARCHAR(1)
,AIR_ACW_FONT_COLOR					VARCHAR(50)
,MIN_GUARANTEE_MINUTES				DECIMAL(6,3)
,MIN_GUARANTEE_TYPE					VARCHAR(50)
,AUTHORIZED_TO_INVOICE_TYPE			VARCHAR(50)
,HAS_HOLIDAYS						VARCHAR(1)
,INCLUDE_IN_CAS						VARCHAR(1)
,READY_FOR_XML						VARCHAR(1)
,SHOW_ID_EXTS						VARCHAR(1)
,
[INBOUND_HANDLED_COUNT] [decimal](10, 2) NULL,
[OUTBOUND_HANDLED_COUNT] [decimal](10, 2) NULL,
[TOTAL_CALL_COUNT] [decimal](10, 2) NULL,
[HELD_PARTY_ABANDON_COUNT] [decimal](10, 2) NULL,
[LOGIN_TIME] [decimal](10, 2) NULL,
[AVAILABLE_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_EMAIL_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_WSOL_EMAIL_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_FLOOR_SUPPORT_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_SPECIAL_PROJECT_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_HELD_PARTY_ABANDONED_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_IT_SYS_ISSUE_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_IDLE_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_REFUSED_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_SYSTEM_PENDING_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_OUTBOUND_CALL_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_TIME_MINUS_ACW] [decimal](10, 2) NULL,
[TALK_TIME] [decimal](10, 2) NULL,
[HOLD_TIME] [decimal](10, 2) NULL,
[ACW_TIME] [decimal](10, 2) NULL,
[AUTHORIZED_ACW_TIME] [decimal](10, 2) NULL,
[TRUE_OUTBOUND_TALK_TIME] [decimal](10, 2) NULL,
[TOTAL_TALK] [decimal](10, 2) NULL,
[HANDLE_TIME] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
)

INSERT INTO #IMPORTS_MONAT_IC_AGENT_INVOICING_REPORTS
SELECT
 'MONAT GLOBAL'	--T.TENANT_NAME
,''				--UAA.ACD_ID_EXTENSION
,UAA.SCHEDULER_ACL_NAME
,UAA.EMPLOYEE_ID
,UAA.STD_TENANT_START_DATE_TIME_KEY
,UAA.RESOURCE_NAME

,(ISNULL(UAA.AIR_DAY_TYPE,''))					--AS AIR_DAY_TYPE
,(ISNULL(UAA.AIR_ACW_FONT_COLOR,''))			--AS AIR_ACW_FONT_COLOR
,(ISNULL(UAA.MIN_GUARANTEE_MINUTES,0.000))		--AS MIN_GUARANTEE_MINUTES
,(ISNULL(UAA.MIN_GUARANTEE_TYPE,''))			--AS MIN_GUARANTEE_TYPE
,(ISNULL(UAA.AUTHORIZED_TO_INVOICE_TYPE,''))	--AS AUTHORIZED_TO_INVOICE_TYPE
,(ISNULL(UAA.HAS_HOLIDAYS,''))					--AS HAS_HOLIDAYS
,(ISNULL(UAA.INCLUDE_IN_CAS,''))				--AS INCLUDE_IN_CAS
,(ISNULL(UAA.READY_FOR_XML,''))					--AS READY_FOR_XML
,(ISNULL(UAA.SHOW_ID_EXTS,''))					--AS SHOW_ID_EXTS

,(ISNULL(UAA.INBOUND_HANDLED_COUNT					,0.00))
,(ISNULL(UAA.OUTBOUND_HANDLED_COUNT					,0.00))
,(ISNULL(UAA.TOTAL_CALL_COUNT						,0.00))
,(ISNULL(UAA.HELD_PARTY_ABANDON_COUNT				,0.00))
,(ISNULL(UAA.LOGIN_TIME								,0.00))
,(ISNULL(UAA.AVAILABLE_TIME							,0.00))
,(ISNULL(UAA.UNAVAILABLE_EMAIL_TIME					,0.00))
,(ISNULL(UAA.UNAVAILABLE_WSOL_EMAIL_TIME			,0.00))
,(ISNULL(UAA.UNAVAILABLE_FLOOR_SUPPORT_TIME			,0.00))
,(ISNULL(UAA.UNAVAILABLE_SPECIAL_PROJECT_TIME		,0.00))
,(ISNULL(UAA.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME	,0.00))
,(ISNULL(UAA.UNAVAILABLE_IT_SYS_ISSUE_TIME			,0.00))
,(ISNULL(UAA.UNAVAILABLE_IDLE_TIME					,0.00))
,(ISNULL(UAA.UNAVAILABLE_REFUSED_TIME				,0.00))
,(ISNULL(UAA.UNAVAILABLE_SYSTEM_PENDING_TIME		,0.00))
,(ISNULL(UAA.UNAVAILABLE_OUTBOUND_CALL_TIME			,0.00))
,(ISNULL(UAA.UNAVAILABLE_TIME_MINUS_ACW				,0.00))
,(ISNULL(UAA.TALK_TIME								,0.00))
,(ISNULL(UAA.HOLD_TIME								,0.00))
,(ISNULL(UAA.ACW_TIME								,0.00))
,(ISNULL(UAA.AUTHORIZED_ACW_TIME					,0.00))
,(ISNULL(UAA.TRUE_OUTBOUND_TALK_TIME				,0.00))
,(ISNULL(UAA.TOTAL_TALK								,0.00))
,(ISNULL(UAA.HANDLE_TIME							,0.00))
,(ISNULL(UAA.CPROD									,0.00))
,(ISNULL(UAA.MINIMUM_GUARANTEE						,0.00))
,(ISNULL(UAA.AUTHORIZED_TO_INVOICE					,0.00))

--DATASOURCES FOR DURATION FIELDS, IN SECONDS, IN HOUR INTERVALS:
--SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING

FROM
(	SELECT	
	-- UA.TENANT_KEY
	 ''									AS ACD_ID_EXTENSION
	,UA.INVOICE_ID					    AS SCHEDULER_ACL_NAME
	,UA.FF_AGENT_NAME					AS EMPLOYEE_ID 
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,MAX(UA.RESOURCE_NAME)              AS RESOURCE_NAME
	,MAX(UA.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,'BLACK'                            AS AIR_ACW_FONT_COLOR
	,0									AS MIN_GUARANTEE_MINUTES
	,''									AS MIN_GUARANTEE_TYPE
	,''									AS AUTHORIZED_TO_INVOICE_TYPE
	,'Y'								AS HAS_HOLIDAYS
	,''									AS INCLUDE_IN_CAS
	,''									AS READY_FOR_XML
	,''									AS SHOW_ID_EXTS

	,SUM(ISNULL(UA.INBOUND_HANDLED_COUNT				,0.00)) AS INBOUND_HANDLED_COUNT
	,SUM(ISNULL(UA.OUTBOUND_HANDLED_COUNT				,0.00)) AS OUTBOUND_HANDLED_COUNT
	,SUM(ISNULL(UA.TOTAL_CALL_COUNT						,0.00)) AS TOTAL_CALL_COUNT
	,SUM(ISNULL(UA.HELD_PARTY_ABANDON_COUNT				,0.00)) AS HELD_PARTY_ABANDON_COUNT
	,SUM(ISNULL(UA.LOGIN_TIME							,0.00))	AS LOGIN_TIME
	,SUM(ISNULL(UA.AVAILABLE_TIME						,0.00))	AS AVAILABLE_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_EMAIL_TIME				,0.00))	AS UNAVAILABLE_EMAIL_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_WSOL_EMAIL_TIME			,0.00))	AS UNAVAILABLE_WSOL_EMAIL_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_FLOOR_SUPPORT_TIME		,0.00)) AS UNAVAILABLE_FLOOR_SUPPORT_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_SPECIAL_PROJECT_TIME		,0.00)) AS UNAVAILABLE_SPECIAL_PROJECT_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME,0.00)) AS UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_IT_SYS_ISSUE_TIME		,0.00)) AS UNAVAILABLE_IT_SYS_ISSUE_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_IDLE_TIME				,0.00)) AS UNAVAILABLE_IDLE_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_REFUSED_TIME				,0.00)) AS UNAVAILABLE_REFUSED_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_SYSTEM_PENDING_TIME		,0.00)) AS UNAVAILABLE_SYSTEM_PENDING_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_OUTBOUND_CALL_TIME		,0.00)) AS UNAVAILABLE_OUTBOUND_CALL_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_TIME_MINUS_ACW			,0.00))	AS UNAVAILABLE_TIME_MINUS_ACW
	,SUM(ISNULL(UA.TALK_TIME							,0.00))	AS TALK_TIME
	,SUM(ISNULL(UA.HOLD_TIME							,0.00))	AS HOLD_TIME
	,SUM(ISNULL(UA.ACW_TIME								,0.00))	AS ACW_TIME
	,SUM(ISNULL(UA.AUTHORIZED_ACW_TIME					,0.00)) AS AUTHORIZED_ACW_TIME
	,SUM(ISNULL(UA.TRUE_OUTBOUND_TALK_TIME				,0.00))	AS TRUE_OUTBOUND_TALK_TIME
	,SUM(ISNULL(UA.TOTAL_TALK							,0.00))	AS TOTAL_TALK
	,SUM(ISNULL(UA.HANDLE_TIME							,0.00)) AS HANDLE_TIME
	,SUM(ISNULL(UA.CPROD								,0.00))	AS CPROD
	,SUM(ISNULL(UA.MINIMUM_GUARANTEE					,0.00))	AS MINIMUM_GUARANTEE
	,SUM(ISNULL(UA.AUTHORIZED_TO_INVOICE				,0.00))	AS AUTHORIZED_TO_INVOICE
	
	--  SELECT *
	FROM            WSOL_TB_IMPORTS_MONAT_IC_INVOICING	UA
	INNER JOIN      DATE_TIME							DT	ON DT.DATE_TIME_KEY = UA.STD_TENANT_START_DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
		
	GROUP BY 
	 UA.INVOICE_ID
	,UA.FF_AGENT_NAME
	,UA.STD_TENANT_START_DATE_TIME_KEY
) UAA

--==============================================================
-- CREATE TEMPORARY TABLE TO RETURN RESULTS
--==============================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_MONAT_IC_AGENT_INVOICING_REPORTS_RTN') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_MONAT_IC_AGENT_INVOICING_REPORTS_RTN
END
CREATE TABLE #IMPORTS_MONAT_IC_AGENT_INVOICING_REPORTS_RTN
(GRPNO						INT
,TENANT_NAME				VARCHAR(50)
,ID_EXT						VARCHAR(3)
,SCHEDULER_ACL_NAME			VARCHAR(100)
,EMPLOYEE_ID				VARCHAR(50)
,RESOURCE_NAME				VARCHAR(100)
,CAL_YEAR_MONTH_NUM			VARCHAR(10)
,DATE_INTERVAL				VARCHAR(50)
,TIME_INTERVAL				VARCHAR(10)

,AIR_DAY_TYPE				VARCHAR(1)
,AIR_ACW_FONT_COLOR			VARCHAR(50)
,MIN_GUARANTEE_MINUTES		DECIMAL(6,3)
,MIN_GUARANTEE_TYPE			VARCHAR(50)
,AUTHORIZED_TO_INVOICE_TYPE	VARCHAR(50)
,HAS_HOLIDAYS				VARCHAR(1)
,INCLUDE_IN_CAS				VARCHAR(1)
,READY_FOR_XML				VARCHAR(1)
,SHOW_ID_EXTS				VARCHAR(1)

,AIR_HOLIDAY_IN				VARCHAR(1)
,ALL_AUTHORIZED_TIME		DECIMAL(10,2)

,
[INBOUND_HANDLED_COUNT] [int] NULL,
[OUTBOUND_HANDLED_COUNT] [int] NULL,
[TOTAL_CALL_COUNT] [int] NULL,
[HELD_PARTY_ABANDON_COUNT] [int] NULL,
[LOGIN_TIME] [decimal](10, 2) NULL,
[AVAILABLE_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_EMAIL_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_WSOL_EMAIL_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_FLOOR_SUPPORT_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_SPECIAL_PROJECT_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_HELD_PARTY_ABANDONED_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_IT_SYS_ISSUE_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_IDLE_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_REFUSED_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_SYSTEM_PENDING_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_OUTBOUND_CALL_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_TIME_MINUS_ACW] [decimal](10, 2) NULL,
[TALK_TIME] [decimal](10, 2) NULL,
[HOLD_TIME] [decimal](10, 2) NULL,
[ACW_TIME] [decimal](10, 2) NULL,
[AUTHORIZED_ACW_TIME] [decimal](10, 2) NULL,
[TRUE_OUTBOUND_TALK_TIME] [decimal](10, 2) NULL,
[TOTAL_TALK] [decimal](10, 2) NULL,
[HANDLE_TIME] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
)

--==================================
-- POPULATE TEMPORARY TABLE
--==================================
INSERT INTO #IMPORTS_MONAT_IC_AGENT_INVOICING_REPORTS_RTN
SELECT
 20								--AS GRPNO  
,ISNULL(GG.TENANT_NAME       ,'') AS TENANT_NAME
,ISNULL(GG.ID_EXT            ,'') AS ID_EXT
,ISNULL(GG.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
,ISNULL(GG.EMPLOYEE_ID       ,'') AS EMPLOYEE_ID
,ISNULL(GG.RESOURCE_NAME     ,'') AS RESOURCE_NAME
,ISNULL(GG.CAL_YEAR_MONTH_NUM,'') AS CAL_YEAR_MONTH_NUM
,ISNULL(GG.DI                ,'') AS DI
,ISNULL(GG.TI                ,'') AS TI

,(GG.AIR_DAY_TYPE)                AS AIR_DAY_TYPE
,(GG.AIR_ACW_FONT_COLOR)          AS AIR_ACW_FONT_COLOR
,(GG.MIN_GUARANTEE_MINUTES)       AS MIN_GUARANTEE_MINUTES
,(GG.MIN_GUARANTEE_TYPE)          AS MIN_GUARANTEE_TYPE
,(GG.AUTHORIZED_TO_INVOICE_TYPE)  AS AUTHORIZED_TO_INVOICE_TYPE
,(GG.HAS_HOLIDAYS)                AS HAS_HOLIDAYS
,(GG.INCLUDE_IN_CAS)              AS INCLUDE_IN_CAS
,(GG.READY_FOR_XML)               AS READY_FOR_XML
,(GG.SHOW_ID_EXTS)                AS SHOW_ID_EXTS

,'' --AS AIR_HOLIDAY_IN
,0  --AS ALL_AUTHORIZED_TIME

,CAST((ISNULL(GG.INBOUND_HANDLED_COUNT					,0)) AS INT) AS INBOUND_HANDLED_COUNT
,CAST((ISNULL(GG.OUTBOUND_HANDLED_COUNT					,0)) AS INT) AS OUTBOUND_HANDLED_COUNT
,CAST((ISNULL(GG.TOTAL_CALL_COUNT						,0)) AS INT) AS TOTAL_CALL_COUNT
,CAST((ISNULL(GG.HELD_PARTY_ABANDON_COUNT				,0)) AS INT) AS HELD_PARTY_ABANDON_COUNT

,CAST((ISNULL(GG.LOGIN_TIME								,0.00)) / @DS AS DECIMAL(10,2))	AS LOGIN_TIME
,CAST((ISNULL(GG.AVAILABLE_TIME							,0.00)) / @DS AS DECIMAL(10,2))	AS AVAILABLE_TIME
,CAST((ISNULL(GG.UNAVAILABLE_EMAIL_TIME					,0.00)) / @DS AS DECIMAL(10,2))	AS UNAVAILABLE_EMAIL_TIME
,CAST((ISNULL(GG.UNAVAILABLE_WSOL_EMAIL_TIME			,0.00)) / @DS AS DECIMAL(10,2))	AS UNAVAILABLE_WSOL_EMAIL_TIME
,CAST((ISNULL(GG.UNAVAILABLE_FLOOR_SUPPORT_TIME			,0.00)) / @DS AS DECIMAL(10,2))	AS UNAVAILABLE_FLOOR_SUPPORT_TIME
,CAST((ISNULL(GG.UNAVAILABLE_SPECIAL_PROJECT_TIME		,0.00)) / @DS AS DECIMAL(10,2))	AS UNAVAILABLE_SPECIAL_PROJECT_TIME
,CAST((ISNULL(GG.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME	,0.00)) / @DS AS DECIMAL(10,2)) AS UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,CAST((ISNULL(GG.UNAVAILABLE_IT_SYS_ISSUE_TIME			,0.00)) / @DS AS DECIMAL(10,2)) AS UNAVAILABLE_IT_SYS_ISSUE_TIME
,CAST((ISNULL(GG.UNAVAILABLE_IDLE_TIME					,0.00)) / @DS AS DECIMAL(10,2)) AS UNAVAILABLE_IDLE_TIME
,CAST((ISNULL(GG.UNAVAILABLE_REFUSED_TIME				,0.00)) / @DS AS DECIMAL(10,2)) AS UNAVAILABLE_REFUSED_TIME
,CAST((ISNULL(GG.UNAVAILABLE_SYSTEM_PENDING_TIME		,0.00)) / @DS AS DECIMAL(10,2)) AS UNAVAILABLE_SYSTEM_PENDING_TIME
,CAST((ISNULL(GG.UNAVAILABLE_OUTBOUND_CALL_TIME			,0.00)) / @DS AS DECIMAL(10,2)) AS UNAVAILABLE_OUTBOUND_CALL_TIME
,CAST((ISNULL(GG.UNAVAILABLE_TIME_MINUS_ACW				,0.00)) / @DS AS DECIMAL(10,2))	AS UNAVAILABLE_TIME_MINUS_ACW
,CAST((ISNULL(GG.TALK_TIME								,0.00)) / @DS AS DECIMAL(10,2))	AS TALK_TIME
,CAST((ISNULL(GG.HOLD_TIME								,0.00)) / @DS AS DECIMAL(10,2))	AS HOLD_TIME
,CAST((ISNULL(GG.ACW_TIME								,0.00)) / @DS AS DECIMAL(10,2))	AS ACW_TIME
,CAST((ISNULL(GG.AUTHORIZED_ACW_TIME					,0.00)) / @DS AS DECIMAL(10,2)) AS AUTHORIZED_ACW_TIME
,CAST((ISNULL(GG.TRUE_OUTBOUND_TALK_TIME				,0.00)) / @DS AS DECIMAL(10,2))	AS TRUE_OUTBOUND_TALK_TIME
,CAST((ISNULL(GG.TOTAL_TALK								,0.00)) / @DS AS DECIMAL(10,2))	AS TOTAL_TALK
,CAST((ISNULL(GG.HANDLE_TIME							,0.00)) / @DS AS DECIMAL(10,2)) AS HANDLE_TIME
,CAST((ISNULL(GG.CPROD									,0.00)) / @DS AS DECIMAL(10,2))	AS CPROD
,CAST((ISNULL(GG.MINIMUM_GUARANTEE						,0.00)) / @DS AS DECIMAL(10,2))	AS MINIMUM_GUARANTEE
,CAST((ISNULL(GG.AUTHORIZED_TO_INVOICE					,0.00)) / @DS AS DECIMAL(10,2))	AS AUTHORIZED_TO_INVOICE


FROM  -- GG STARTS HERE:
(	SELECT
	 ISNULL(SW.TENANT_NAME,'')        AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  AS EMPLOYEE_ID
	,MAX(RESOURCE_NAME)               AS RESOURCE_NAME

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) AS TI

	,MAX(SW.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,MAX(SW.AIR_ACW_FONT_COLOR)         AS AIR_ACW_FONT_COLOR
	,MAX(SW.MIN_GUARANTEE_MINUTES)      AS MIN_GUARANTEE_MINUTES
	,MAX(SW.MIN_GUARANTEE_TYPE)         AS MIN_GUARANTEE_TYPE
	,MAX(SW.AUTHORIZED_TO_INVOICE_TYPE) AS AUTHORIZED_TO_INVOICE_TYPE
	,MAX(SW.HAS_HOLIDAYS)               AS HAS_HOLIDAYS
	,MAX(SW.INCLUDE_IN_CAS)             AS INCLUDE_IN_CAS
	,MAX(SW.READY_FOR_XML)              AS READY_FOR_XML
	,MAX(SW.SHOW_ID_EXTS)               AS SHOW_ID_EXTS

	,SUM(ISNULL(SW.INBOUND_HANDLED_COUNT				,0.00)) AS INBOUND_HANDLED_COUNT
	,SUM(ISNULL(SW.OUTBOUND_HANDLED_COUNT				,0.00)) AS OUTBOUND_HANDLED_COUNT
	,SUM(ISNULL(SW.TOTAL_CALL_COUNT						,0.00)) AS TOTAL_CALL_COUNT
	,SUM(ISNULL(SW.HELD_PARTY_ABANDON_COUNT				,0.00)) AS HELD_PARTY_ABANDON_COUNT

	,SUM(ISNULL(SW.LOGIN_TIME							,0.00))	AS LOGIN_TIME
	,SUM(ISNULL(SW.AVAILABLE_TIME						,0.00))	AS AVAILABLE_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_EMAIL_TIME				,0.00))	AS UNAVAILABLE_EMAIL_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_WSOL_EMAIL_TIME			,0.00))	AS UNAVAILABLE_WSOL_EMAIL_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_FLOOR_SUPPORT_TIME		,0.00))	AS UNAVAILABLE_FLOOR_SUPPORT_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_SPECIAL_PROJECT_TIME		,0.00))	AS UNAVAILABLE_SPECIAL_PROJECT_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME,0.00)) AS UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_IT_SYS_ISSUE_TIME		,0.00)) AS UNAVAILABLE_IT_SYS_ISSUE_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_IDLE_TIME				,0.00)) AS UNAVAILABLE_IDLE_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_REFUSED_TIME				,0.00)) AS UNAVAILABLE_REFUSED_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_SYSTEM_PENDING_TIME		,0.00)) AS UNAVAILABLE_SYSTEM_PENDING_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_OUTBOUND_CALL_TIME		,0.00)) AS UNAVAILABLE_OUTBOUND_CALL_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_TIME_MINUS_ACW			,0.00))	AS UNAVAILABLE_TIME_MINUS_ACW
	,SUM(ISNULL(SW.TALK_TIME							,0.00))	AS TALK_TIME
	,SUM(ISNULL(SW.HOLD_TIME							,0.00))	AS HOLD_TIME
	,SUM(ISNULL(SW.ACW_TIME								,0.00))	AS ACW_TIME
	,SUM(ISNULL(SW.AUTHORIZED_ACW_TIME					,0.00)) AS AUTHORIZED_ACW_TIME
	,SUM(ISNULL(SW.TRUE_OUTBOUND_TALK_TIME				,0.00))	AS TRUE_OUTBOUND_TALK_TIME
	,SUM(ISNULL(SW.TOTAL_TALK							,0.00))	AS TOTAL_TALK
	,SUM(ISNULL(SW.HANDLE_TIME							,0.00)) AS HANDLE_TIME
	,SUM(ISNULL(SW.CPROD								,0.00))	AS CPROD
	,SUM(ISNULL(SW.MINIMUM_GUARANTEE					,0.00))	AS MINIMUM_GUARANTEE
	,SUM(ISNULL(SW.AUTHORIZED_TO_INVOICE				,0.00))	AS AUTHORIZED_TO_INVOICE
	
	FROM            #IMPORTS_MONAT_IC_AGENT_INVOICING_REPORTS	SW
	INNER JOIN      DATE_TIME									DT   ON DT.DATE_TIME_KEY = SW.STD_TENANT_START_DATE_TIME_KEY
													 
	--WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END		  --AND (@TENANT_KEY   IN ('0','') OR SW.TENANT_KEY   = CAST(@TENANT_KEY AS INT) )

	GROUP BY 
	 ISNULL(SW.TENANT_NAME,'')        --AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             --AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') --AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  --AS EMPLOYEE_ID

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) --AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) --AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) --AS TI

	--,(ISNULL(SW.FF_AGENT_NAME,''))         --AS FF_AGENT_NAME
	--,(ISNULL(SW.FF_USER_NAME,''))          --AS FF_USER_NAME

) GG

--==================================
--IS A HOLIDAY DATE IN THE MIX:
--==================================
DECLARE @HOLIDAY_IN VARCHAR(1)
SET @HOLIDAY_IN = 'N'
DECLARE @I INT
SET @I = (SELECT COUNT(*) FROM #IMPORTS_MONAT_IC_AGENT_INVOICING_REPORTS_RTN WHERE AIR_DAY_TYPE = 'H')  --  AND INCLUDE_IN_CAS = 'Y')
IF @I > 0 BEGIN
	SET @HOLIDAY_IN = 'Y'
END
--==================================
UPDATE #IMPORTS_MONAT_IC_AGENT_INVOICING_REPORTS_RTN SET
 AIR_HOLIDAY_IN = @HOLIDAY_IN

--======================================================
--UPDATE TOTALS LINE ON REPORT FOR STANDARD AND HOLIDAY:
--======================================================
UPDATE #IMPORTS_MONAT_IC_AGENT_INVOICING_REPORTS_RTN SET
 ALL_AUTHORIZED_TIME = ISNULL(LOJ.ALL_AUTHORIZED_TIME,0.0)
FROM #IMPORTS_MONAT_IC_AGENT_INVOICING_REPORTS_RTN TA
LEFT OUTER JOIN
(	SELECT
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
	,SUM(AUTHORIZED_TO_INVOICE) AS ALL_AUTHORIZED_TIME
	FROM #IMPORTS_MONAT_IC_AGENT_INVOICING_REPORTS_RTN 
	GROUP BY 
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
) LOJ ON LOJ.SCHEDULER_ACL_NAME = TA.SCHEDULER_ACL_NAME
	 AND LOJ.EMPLOYEE_ID        = TA.EMPLOYEE_ID
	 --AND LOJ.RESOURCE_NAME		= TA.RESOURCE_NAME
	 AND LOJ.AIR_DAY_TYPE       = TA.AIR_DAY_TYPE

--==================================
--RETURN DATA
--==================================
--==================================
--POPULATE TABLE READ BY SSIS TO GET END DATE OF DATA REPORT/FILE HAS BEEN RUN FOR:
--==================================
INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
SELECT
 'uspIMPORTS_MONAT_IC_AGENT_INVOICING_REPORTS'			--SQL_JOB_NAME
,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,111),'/','')  --FILENM   YYYYMMDD_...
,dbo.GETDATE()  --CST_ROW_CREATED_TIME

--=====================================
--RETURN DATASET:
--=====================================
SELECT 
 CASE WHEN @DUR_IN = 'SS' THEN '' ELSE 'F' END AS DUR_FORMAT
,CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
,V.*

FROM      #IMPORTS_MONAT_IC_AGENT_INVOICING_REPORTS_RTN  V

ORDER BY 
 V.GRPNO
,V.SCHEDULER_ACL_NAME
,V.RESOURCE_NAME
,V.EMPLOYEE_ID
,V.CAL_YEAR_MONTH_NUM
,V.DATE_INTERVAL
,V.TIME_INTERVAL  --SINCE IN MILITARY TIME!


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_MONAT_IC_INVOICING_IMPORT]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_MONAT_IC_INVOICING_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_MONAT_IC_INVOICING_IMPORT]

--  SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1

--	Durations in the data file are in seconds in 30 minute intervals
--  Reporting available in seconds, minutes, and hours.

--===================================================================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY = 160  --MONAT GLOBAL
--===================================================================================
DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND
WHERE TENANT_KEY		= @TENANT_KEY
  AND SUB_GROUP_NAME	= 'MONAT_INVOICING'
  --  SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 160
--===================================================================================

--=========================================================================================================
--  USING @WS_ROW_CREATED_TIME FOR ALL INSERTS WILL ALLOW ME TO DELETE SPECIFIC INSERT PROCESSES/FILES.
--  IN CASE OF EMERGENCY, BREAK GLASS.
--=========================================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.GETDATE()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===================================================================================

--===================================================================================
--HANDLE COLUMN HEADER AND JUNK RECORDS:
--===================================================================================

		--<<<<< HEADER ROWS REMOVED AT IMPORT TIME >>>>>--

--======================================================================
--DELETE COLUMN HEADER AND JUNK RECORDS;
--======================================================================

--=============================================================================================================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_1) TABLE THAT WEREN'T IN IMPORTED FILE:
--=============================================================================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1 SET
 [DATETIME]					= CAST(CONVERT(VARCHAR(10), FF_DATE) + ' ' + CONVERT(VARCHAR(2), LEFT(FF_INTERVAL_30_MINUTES,2)) + ':00:00' AS DATETIME)
,HOUR_INTERVAL				= CONVERT(VARCHAR(2), LEFT(FF_INTERVAL_30_MINUTES,2))
,AGENT_NAME					= ISNULL(FF_AGENT_NAME		,'')
,UNAVAILABLE_CODE			= ISNULL(FF_UNAVAILABLE_CODE,'')
,SKILL_NAME					= ISNULL(FF_SKILL_NAME		,'')
,TEAM_NAME					= ISNULL(FF_TEAM_NAME		,'')
,INBOUND_HANDLED_COUNT		= CAST(ISNULL(NULLIF(FF_INBOUND_HANDLED				,''),'0'   ) AS DECIMAL(10,2))
,OUTBOUND_HANDLED_COUNT		= CAST(ISNULL(NULLIF(FF_OUTBOUND_HANDLED			,''),'0'   ) AS DECIMAL(10,2))
,HELD_PARTY_ABANDON_COUNT	= CAST(ISNULL(NULLIF(FF_HELD_PARTY_ABANDONS			,''),'0'   ) AS DECIMAL(10,2))
,LOGIN_TIME					= CAST(ISNULL(NULLIF(FF_LOGIN_TIME					,''),'0.00') AS DECIMAL(10,2))
,AVAILABLE_TIME				= CAST(ISNULL(NULLIF(FF_AVAILABLE_TIME				,''),'0.00') AS DECIMAL(10,2)) 
,UNAVAILABLE_TIME_MINUS_ACW	= CAST(ISNULL(NULLIF(FF_UNAVAILABLE_TIME_MINUS_ACW	,''),'0.00') AS DECIMAL(10,2))
,HOLD_TIME					= CAST(ISNULL(NULLIF(FF_HOLD_TIME					,''),'0.00') AS DECIMAL(10,2))
,ACW_TIME					= CAST(ISNULL(NULLIF(FF_ACW_TIME					,''),'0.00') AS DECIMAL(10,2))
,TALK_TIME					= CASE WHEN FF_SKILL_NAME IN ('EN_FLEXSHIP FOLLOW UP OB Queue','GENERIC AGENT OB Q')
									THEN 0.00 
								   ELSE CAST(ISNULL(NULLIF(FF_TALK_TIME			,''),'0.00') AS DECIMAL(10,2))
							  END
,TENANT_KEY					= @TENANT_KEY

UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1 SET
 TOTAL_CALL_COUNT						= INBOUND_HANDLED_COUNT + OUTBOUND_HANDLED_COUNT

,UNAVAILABLE_EMAIL_TIME					= CASE WHEN UNAVAILABLE_CODE	= 'EMAIL ONLY'					THEN UNAVAILABLE_TIME_MINUS_ACW ELSE 0.00 END
,UNAVAILABLE_WSOL_EMAIL_TIME			= CASE WHEN UNAVAILABLE_CODE	= 'WSOL - EMAIL ONLY'			THEN UNAVAILABLE_TIME_MINUS_ACW ELSE 0.00 END
,UNAVAILABLE_FLOOR_SUPPORT_TIME			= CASE WHEN UNAVAILABLE_CODE	= 'FLOOR SUPPORT'				THEN UNAVAILABLE_TIME_MINUS_ACW ELSE 0.00 END
,UNAVAILABLE_SPECIAL_PROJECT_TIME		= CASE WHEN UNAVAILABLE_CODE	= 'Special Project ( Appv.)'	THEN UNAVAILABLE_TIME_MINUS_ACW ELSE 0.00 END
,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME	= CASE WHEN UNAVAILABLE_CODE	= 'HeldPartyAbandoned'			THEN UNAVAILABLE_TIME_MINUS_ACW ELSE 0.00 END
,UNAVAILABLE_IT_SYS_ISSUE_TIME			= CASE WHEN UNAVAILABLE_CODE	= 'IT/Sys Issue'				THEN UNAVAILABLE_TIME_MINUS_ACW ELSE 0.00 END
,UNAVAILABLE_IDLE_TIME					= CASE WHEN UNAVAILABLE_CODE	= 'Idle'						THEN UNAVAILABLE_TIME_MINUS_ACW ELSE 0.00 END
,UNAVAILABLE_REFUSED_TIME				= CASE WHEN UNAVAILABLE_CODE	= 'Refused'						THEN UNAVAILABLE_TIME_MINUS_ACW ELSE 0.00 END
,UNAVAILABLE_OUTBOUND_CALL_TIME			= CASE WHEN UNAVAILABLE_CODE	= 'Outbound (Call)'				THEN UNAVAILABLE_TIME_MINUS_ACW ELSE 0.00 END

,UNAVAILABLE_SYSTEM_PENDING_TIME		= CASE WHEN UNAVAILABLE_CODE IN ( 'CallbackPending'
																		 ,'InboundPending'
																		 ,'OutboundPending'
																		 ,'PromisePending'
																		 ,'ConsultPending'
																		 ,'TransferPending'
																		 )								THEN UNAVAILABLE_TIME_MINUS_ACW ELSE 0.00 END

UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1 SET
 UNAVAILABLE_TIME_MINUS_ACW	= UNAVAILABLE_TIME_MINUS_ACW - UNAVAILABLE_EMAIL_TIME - UNAVAILABLE_WSOL_EMAIL_TIME - UNAVAILABLE_FLOOR_SUPPORT_TIME - UNAVAILABLE_SPECIAL_PROJECT_TIME
														 - UNAVAILABLE_HELD_PARTY_ABANDONED_TIME - UNAVAILABLE_IT_SYS_ISSUE_TIME - UNAVAILABLE_IDLE_TIME
														 - UNAVAILABLE_REFUSED_TIME - UNAVAILABLE_OUTBOUND_CALL_TIME - UNAVAILABLE_SYSTEM_PENDING_TIME

--===================================================================================================
-- UPDATE DATETIME KEY
--===================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM		WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1	I
INNER JOIN	DATE_TIME								DT	ON DT.CAL_DATE = I.[DATETIME]

--===============================================
--HANDLE INVALID DATE/TIME RECORDS:
--===============================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_IC_INVOICING_BAD
SELECT
 'DTM'					--BAD_IMPORTS_CODE		--'Invalid Date/Time'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_UNAVAILABLE_CODE
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_LOGIN_TIME
,W1.FF_AVAILABLE_TIME
,W1.FF_UNAVAILABLE_TIME_MINUS_ACW
,W1.FF_TALK_TIME
,W1.FF_HOLD_TIME
,W1.FF_ACW_TIME
,W1.FF_HELD_PARTY_ABANDONS
,W1.FF_INBOUND_HANDLED
,W1.FF_OUTBOUND_HANDLED
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.UNAVAILABLE_CODE
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.INBOUND_HANDLED_COUNT
,W1.OUTBOUND_HANDLED_COUNT
,W1.TOTAL_CALL_COUNT
,W1.HELD_PARTY_ABANDON_COUNT
,W1.LOGIN_TIME
,W1.AVAILABLE_TIME
,W1.UNAVAILABLE_EMAIL_TIME
,W1.UNAVAILABLE_WSOL_EMAIL_TIME
,W1.UNAVAILABLE_FLOOR_SUPPORT_TIME
,W1.UNAVAILABLE_SPECIAL_PROJECT_TIME
,W1.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,W1.UNAVAILABLE_IT_SYS_ISSUE_TIME
,W1.UNAVAILABLE_IDLE_TIME
,W1.UNAVAILABLE_REFUSED_TIME
,W1.UNAVAILABLE_SYSTEM_PENDING_TIME
,W1.UNAVAILABLE_OUTBOUND_CALL_TIME
,W1.UNAVAILABLE_TIME_MINUS_ACW
,W1.TALK_TIME
,W1.HOLD_TIME
,W1.ACW_TIME
,W1.AUTHORIZED_ACW_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.TOTAL_TALK
,W1.HANDLE_TIME
,W1.CPROD
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_TO_INVOICE
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR
,W1.PAY_GROUP
--SELECT *
FROM           WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1    W1
WHERE ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) = 0

--======================================================================
--DELETE INVALID DATE/TIME RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================

--===========================================================================================================
--HANDLE DUPLICATES:
--===========================================================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_IC_INVOICING_BAD
SELECT
 'DUP'					--BAD_IMPORTS_CODE		--'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_UNAVAILABLE_CODE
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_LOGIN_TIME
,W1.FF_AVAILABLE_TIME
,W1.FF_UNAVAILABLE_TIME_MINUS_ACW
,W1.FF_TALK_TIME
,W1.FF_HOLD_TIME
,W1.FF_ACW_TIME
,W1.FF_HELD_PARTY_ABANDONS
,W1.FF_INBOUND_HANDLED
,W1.FF_OUTBOUND_HANDLED
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.UNAVAILABLE_CODE
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.INBOUND_HANDLED_COUNT
,W1.OUTBOUND_HANDLED_COUNT
,W1.TOTAL_CALL_COUNT
,W1.HELD_PARTY_ABANDON_COUNT
,W1.LOGIN_TIME
,W1.AVAILABLE_TIME
,W1.UNAVAILABLE_EMAIL_TIME
,W1.UNAVAILABLE_WSOL_EMAIL_TIME
,W1.UNAVAILABLE_FLOOR_SUPPORT_TIME
,W1.UNAVAILABLE_SPECIAL_PROJECT_TIME
,W1.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,W1.UNAVAILABLE_IT_SYS_ISSUE_TIME
,W1.UNAVAILABLE_IDLE_TIME
,W1.UNAVAILABLE_REFUSED_TIME
,W1.UNAVAILABLE_SYSTEM_PENDING_TIME
,W1.UNAVAILABLE_OUTBOUND_CALL_TIME
,W1.UNAVAILABLE_TIME_MINUS_ACW
,W1.TALK_TIME
,W1.HOLD_TIME
,W1.ACW_TIME
,W1.AUTHORIZED_ACW_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.TOTAL_TALK
,W1.HANDLE_TIME
,W1.CPROD
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_TO_INVOICE
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR
,W1.PAY_GROUP

FROM
(	SELECT
	 FF_DATE
	,FF_INTERVAL_30_MINUTES
	,FF_AGENT_NAME
	,FF_UNAVAILABLE_CODE
	,FF_SKILL_NAME
	,FF_TEAM_NAME
	,ROW_NUMBER() over (partition by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_UNAVAILABLE_CODE, FF_SKILL_NAME, FF_TEAM_NAME
                            order by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_UNAVAILABLE_CODE, FF_SKILL_NAME, FF_TEAM_NAME, LOGIN_TIME DESC) ROWNO
	FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1
) TNM
LEFT JOIN      WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1	W1   ON W1.FF_DATE					= TNM.FF_DATE
														AND W1.FF_INTERVAL_30_MINUTES	= TNM.FF_INTERVAL_30_MINUTES
														AND W1.FF_AGENT_NAME			= TNM.FF_AGENT_NAME
														AND W1.FF_UNAVAILABLE_CODE		= TNM.FF_UNAVAILABLE_CODE
														AND W1.FF_SKILL_NAME			= TNM.FF_SKILL_NAME
														AND W1.FF_TEAM_NAME				= TNM.FF_TEAM_NAME
WHERE TNM.ROWNO > 1

--===========================================================================================================
--DELETE DUPLICATES:
--===========================================================================================================
DELETE FROM TNM
FROM
(	SELECT
	 FF_DATE
	,FF_INTERVAL_30_MINUTES
	,FF_AGENT_NAME
	,FF_UNAVAILABLE_CODE
	,FF_SKILL_NAME
	,FF_TEAM_NAME
	,ROW_NUMBER() over (partition by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_UNAVAILABLE_CODE, FF_SKILL_NAME, FF_TEAM_NAME
                            order by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_UNAVAILABLE_CODE, FF_SKILL_NAME, FF_TEAM_NAME, LOGIN_TIME DESC) ROWNO
	FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1
) TNM
WHERE TNM.ROWNO > 1
--===========================================================================================================

--===========================================================================================================
--REMOVE RECORDS THAT ARE OUTSIDE OF BUSINESS HOURS (07:00 - 00:00 CST):
--===========================================================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_IC_INVOICING_BAD
SELECT
 'OBH'					--BAD_IMPORTS_CODE		--'O'utside 'B'usiness 'H'ours
,'ACT'                  --BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_UNAVAILABLE_CODE
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_LOGIN_TIME
,W1.FF_AVAILABLE_TIME
,W1.FF_UNAVAILABLE_TIME_MINUS_ACW
,W1.FF_TALK_TIME
,W1.FF_HOLD_TIME
,W1.FF_ACW_TIME
,W1.FF_HELD_PARTY_ABANDONS
,W1.FF_INBOUND_HANDLED
,W1.FF_OUTBOUND_HANDLED
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.UNAVAILABLE_CODE
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.INBOUND_HANDLED_COUNT
,W1.OUTBOUND_HANDLED_COUNT
,W1.TOTAL_CALL_COUNT
,W1.HELD_PARTY_ABANDON_COUNT
,W1.LOGIN_TIME
,W1.AVAILABLE_TIME
,W1.UNAVAILABLE_EMAIL_TIME
,W1.UNAVAILABLE_WSOL_EMAIL_TIME
,W1.UNAVAILABLE_FLOOR_SUPPORT_TIME
,W1.UNAVAILABLE_SPECIAL_PROJECT_TIME
,W1.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,W1.UNAVAILABLE_IT_SYS_ISSUE_TIME
,W1.UNAVAILABLE_IDLE_TIME
,W1.UNAVAILABLE_REFUSED_TIME
,W1.UNAVAILABLE_SYSTEM_PENDING_TIME
,W1.UNAVAILABLE_OUTBOUND_CALL_TIME
,W1.UNAVAILABLE_TIME_MINUS_ACW
,W1.TALK_TIME
,W1.HOLD_TIME
,W1.ACW_TIME
,W1.AUTHORIZED_ACW_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.TOTAL_TALK
,W1.HANDLE_TIME
,W1.CPROD
,W1.MINIMUM_GUARANTEE
,W1.AUTHORIZED_TO_INVOICE
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR
,W1.PAY_GROUP
--SELECT *
FROM           WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1    W1
WHERE W1.HOUR_INTERVAL IN (0,1,2,3,4,5,6)

--======================================================================
--DELETE INVALID DATE/TIME RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1
WHERE HOUR_INTERVAL IN (0,1,2,3,4,5,6)
--======================================================================

--===========================================================================================================
--UPDATE FIELDS FROM MAPPING DATA
--===========================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1 SET
  EMAIL			= ISNULL(IAM.EMAIL,'')
 ,ID_EXT		= CASE WHEN IAM.INVOICE_GROUP = 'RES'	THEN 'MRA'
					   WHEN IAM.INVOICE_GROUP = 'FC'	THEN 'MFC'
					   WHEN IAM.INVOICE_GROUP = ''		THEN 'MSA'
					   ELSE '' END
 ,PAY_GROUP		= ISNULL(IAM.PAY_GROUP,'')
 ,RESOURCE_NAME = ISNULL(IAM.RESOURCE_NAME,'')
 --SELECT *
 FROM            WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1		I
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING	IAM  ON IAM.INVOICE_MAP_KEY = I.FF_AGENT_NAME

--SELECT * FROM WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING ORDER BY CST_ROW_UPDATED_TIME DESC
--SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1 WHERE ISNULL(ID_EXT,'') = '' ORDER BY FF_AGENT_NAME

/*
UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1 SET
 ID_EXT	= CASE WHEN FF_UNAVAILABLE_CODE = 'EMAIL ONLY' AND ID_EXT IN ('MSA') THEN 'MEA' ELSE ID_EXT END			--<<<<< POSSIBLY FOR FUTURE USE.  WOULD NEED TO CREATE "MEA" EXTENSION.
 */

--===========================================================================================================
--REMOVE UNAVAILABLE_FLOOR_SUPPORT_TIME FOR NON-RESOURCE AGENTS
--===========================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1 SET
 UNAVAILABLE_FLOOR_SUPPORT_TIME = 0.00
WHERE ISNULL(ID_EXT,'') NOT IN ('MRA','')

--SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1 WHERE UNAVAILABLE_FLOOR_SUPPORT_TIME > 0.00

UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1 SET
 SCHEDULER_ACL_NAME = CASE WHEN ID_EXT = 'MRA' THEN 'Monat Global Resource Agents'
						   WHEN ID_EXT = 'MFC' THEN 'Monat Global French Canadian Standard Agents'
						   WHEN ID_EXT = 'MSA' THEN 'Monat Global Standard Agents'
						   ELSE '' END

--=================================================================================================
--UPDATE FOR WEEKEND RATES
--=================================================================================================
SET DATEFIRST 1  -- = Monday  

UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1 SET
 ID_EXT = CASE WHEN (ID_EXT IN ('MFC','MSA') AND DATEPART(dw, [DATETIME]) IN (6, 7)) THEN
				CASE WHEN ID_EXT = 'MFC' THEN 'MFW'
				     WHEN ID_EXT = 'MSA' THEN 'MSW'
					 ELSE ID_EXT
				END
			   ELSE ID_EXT
		  END

--===========================================================================================================
--UPDATE ADDITIONAL INVOICE FIELDS
--===========================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1 SET	-- SELECT
  AIR_DAY_TYPE = CASE WHEN IG.HAS_HOLIDAYS = 'Y' AND
						 (    ISNULL(IH.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) OR
						   ( ISNULL(IHA.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) AND ISNULL(IHA.ID_EXT,'') <> '' )
						 )
					  THEN 'H' ELSE 'S' END  --AS AIR_DAY_TYPE  --H=Holiday  --S=Standard
 FROM            WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1				I
 INNER JOIN      DATE_TIME											DT		ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_INVOICE_GROUPS			IG		ON IG.ID_EXT              = I.ID_EXT
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_INVOICE_HOLIDAYS			IH		ON IH.HOLIDAY_DATE        = CAST(DT.CAL_DATE_STRING AS DATETIME)
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_INVOICE_HOLIDAYS_ADDL		IHA		ON IHA.HOLIDAY_DATE       = CAST(DT.CAL_DATE_STRING AS DATETIME)
																		   AND IHA.ID_EXT             = I.ID_EXT


UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1 SET
 AIR_ACW_FONT_COLOR             = 'Black'
,MIN_GUARANTEE_MINUTES          = ISNULL(IG.MIN_GUARANTEE_MINUTES,0)        --varies between scheduler acl names.
,MIN_GUARANTEE_TYPE             = ISNULL(IG.MIN_GUARANTEE_TYPE,'')          --varies between scheduler acl names.
,AUTHORIZED_TO_INVOICE_TYPE     = ISNULL(IG.AUTHORIZED_TO_INVOICE_TYPE,'')  --varies between scheduler acl names.

,HAS_HOLIDAYS    = IG.HAS_HOLIDAYS
,INCLUDE_IN_CAS  = IG.INCLUDE_IN_CAS
,READY_FOR_XML   = IG.READY_FOR_XML
,SHOW_ID_EXTS    = IG.SHOW_ID_EXTS
FROM            WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1		I
LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_INVOICE_GROUPS		IG  ON IG.ID_EXT    = I.ID_EXT
												

UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1 SET
 INVOICE_ID         = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
--,SCHEDULER_ACL_NAME = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
FROM            WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1			AIA 
LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_AIA_STATIC_DEFAULTS	AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT


--======================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .CSV FILES:
--======================================================================
--SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 160
--======================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--Check #1:  ===================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1)
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + 'ERROR!  File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'MONAT_INVOICING'	--SUB_GROUP_NAME
	,@MSG1				--ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	--MUST RETURN AT LEAST ONE RECORD TO SSIS
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'MONAT_INVOICING'	--SUB_GROUP_NAME
	,''					--ERROR_MSG
END

--===========================================================
--GROUP DATA BY HOURLY INTERVALS
--===========================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2

INSERT INTO WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2
SELECT
 W1.FF_DATE
,NULL	--FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,NULL	--FF_UNAVAILABLE_CODE
,NULL	--FF_SKILL_NAME
,MAX(W1.TEAM_NAME)
,SUM(CAST(ISNULL(NULLIF(W1.FF_LOGIN_TIME				,''),0)	AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_AVAILABLE_TIME			,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_UNAVAILABLE_TIME_MINUS_ACW,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_TALK_TIME					,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_HOLD_TIME					,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_ACW_TIME					,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_HELD_PARTY_ABANDONS		,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_INBOUND_HANDLED			,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_OUTBOUND_HANDLED			,''),0) AS DECIMAL(10,2)))

,W1.SEQNO_ADDED_TIME
,MIN(W1.SEQNO)
,W1.FTP_FILE_NAME

,W1.[DATETIME]
,W1.HOUR_INTERVAL
,MAX(W1.AGENT_NAME)
,NULL						--UNAVAILABLE_CODE
,NULL						--SKILL_NAME
,MAX(W1.TEAM_NAME)
,SUM(ISNULL(W1.INBOUND_HANDLED_COUNT				,0.00))
,SUM(ISNULL(W1.OUTBOUND_HANDLED_COUNT				,0.00))
,SUM(ISNULL(W1.TOTAL_CALL_COUNT						,0.00))
,SUM(ISNULL(W1.HELD_PARTY_ABANDON_COUNT				,0.00))
,SUM(ISNULL(W1.LOGIN_TIME							,0.00))
,SUM(ISNULL(W1.AVAILABLE_TIME						,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_EMAIL_TIME				,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_WSOL_EMAIL_TIME			,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_FLOOR_SUPPORT_TIME		,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_SPECIAL_PROJECT_TIME		,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_IT_SYS_ISSUE_TIME		,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_IDLE_TIME				,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_REFUSED_TIME				,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_SYSTEM_PENDING_TIME		,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_OUTBOUND_CALL_TIME		,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_TIME_MINUS_ACW			,0.00))
,SUM(ISNULL(W1.TALK_TIME							,0.00))
,SUM(ISNULL(W1.HOLD_TIME							,0.00))
,SUM(ISNULL(W1.ACW_TIME								,0.00))
,SUM(ISNULL(W1.AUTHORIZED_ACW_TIME					,0.00)) --WILL BE CALCULATED WHEN TRUE OUTBOUND TALK DATA IS IMPORTED
,SUM(ISNULL(W1.TRUE_OUTBOUND_TALK_TIME				,0.00))
,SUM(ISNULL(W1.TOTAL_TALK							,0.00)) --WILL BE CALCULATED WHEN TRUE OUTBOUND TALK DATA IS IMPORTED
,SUM(ISNULL(W1.HANDLE_TIME							,0.00)) --WILL BE CALCULATED WHEN TRUE OUTBOUND TALK DATA IS IMPORTED
,SUM(ISNULL(W1.CPROD								,0.00)) --WILL BE CALCULATED WHEN TRUE OUTBOUND TALK DATA IS IMPORTED
,SUM(ISNULL(W1.MINIMUM_GUARANTEE					,0.00))	--WILL BE CALCULATED WHEN TRUE OUTBOUND TALK DATA IS IMPORTED
,SUM(ISNULL(W1.AUTHORIZED_TO_INVOICE				,0.00))	--WILL BE CALCULATED WHEN TRUE OUTBOUND TALK DATA IS IMPORTED
,MAX(W1.EMAIL)
,W1.ID_EXT
,MAX(W1.SCHEDULER_ACL_NAME)
,W1.STD_TENANT_START_DATE_TIME_KEY
,MAX(W1.CAL_DATE)
,160
,MAX(W1.AIR_DAY_TYPE)
,MAX(W1.AIR_ACW_FONT_COLOR)
,MAX(W1.MIN_GUARANTEE_MINUTES)
,MAX(W1.MIN_GUARANTEE_TYPE)
,MAX(W1.AUTHORIZED_TO_INVOICE_TYPE)
,MAX(W1.HAS_HOLIDAYS)
,MAX(W1.INCLUDE_IN_CAS)
,MAX(W1.READY_FOR_XML)
,MAX(W1.SHOW_ID_EXTS)
,W1.INVOICE_ID
,MAX(W1.RESOURCE_NAME)
,SUM(ISNULL(W1.AIRITKDUR,0))
,SUM(ISNULL(W1.AIRIACDUR,0))
,W1.PAY_GROUP

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_MONAT_IC_INVOICING_1  W1

LEFT JOIN       WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2   G	ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
														   AND G.FF_AGENT_NAME                  = W1.FF_AGENT_NAME
--														   AND G.ID_EXT							= W1.ID_EXT

WHERE (G.FF_AGENT_NAME                     IS NULL AND ISNULL(W1.FF_AGENT_NAME,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	   IS NULL AND ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
--  AND (G.ID_EXT							   IS NULL AND ISNULL(W1.ID_EXT,'') <> '' )

GROUP BY
 W1.FF_DATE
,W1.FF_AGENT_NAME
,W1.SEQNO_ADDED_TIME
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.ID_EXT
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.INVOICE_ID
,W1.PAY_GROUP

ORDER BY
 W1.FF_AGENT_NAME
,W1.[DATETIME]

--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_MONAT_IC_OB_INVOICING_IMPORT]...';


GO


CREATE PROCEDURE [dbo].[uspIMPORTS_MONAT_IC_OB_INVOICING_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_MONAT_IC_OB_INVOICING_IMPORT]

--  SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1

--	Durations in the data file are in seconds in 30 minute intervals
--  Reporting available in seconds, minutes, and hours.

--===================================================================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY = 160  --MONAT GLOBAL
--===================================================================================
DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND
WHERE TENANT_KEY		= @TENANT_KEY
  AND SUB_GROUP_NAME	= 'MONAT_INVOICING_OUTBOUND'
  --  SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 160
--===================================================================================

--=========================================================================================================
--  USING @WS_ROW_CREATED_TIME FOR ALL INSERTS WILL ALLOW ME TO DELETE SPECIFIC INSERT PROCESSES/FILES.
--  IN CASE OF EMERGENCY, BREAK GLASS.
--=========================================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.GETDATE()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===================================================================================

--===================================================================================
--HANDLE COLUMN HEADER AND JUNK RECORDS:
--===================================================================================

		--<<<<< HEADER ROWS REMOVED AT IMPORT TIME >>>>>--

--======================================================================
--DELETE COLUMN HEADER AND JUNK RECORDS;
--======================================================================

--===================================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_1) TABLE THAT WEREN'T IN IMPORTED FILE:
--===================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1 SET
 [DATETIME]		= CAST(CONVERT(VARCHAR(10), FF_DATE) + ' ' + CONVERT(VARCHAR(2), LEFT(FF_INTERVAL_30_MINUTES,2)) + ':00:00' AS DATETIME)
,HOUR_INTERVAL	= CONVERT(VARCHAR(2), LEFT(FF_INTERVAL_30_MINUTES,2))
,AGENT_NAME		= ISNULL(FF_AGENT_NAME,'')
,SKILL_NAME		= ISNULL(FF_SKILL_NAME,'')
,TEAM_NAME		= ISNULL(FF_TEAM_NAME ,'')
,TALK_TIME		= CAST(ISNULL(NULLIF(FF_TALK_TIME	,''),'0.00') AS DECIMAL(10,2))
,ACW_TIME		= CAST(ISNULL(NULLIF(FF_ACW_TIME	,''),'0.00') AS DECIMAL(10,2))
,HOLD_TIME		= CAST(ISNULL(NULLIF(FF_HOLD_TIME	,''),'0.00') AS DECIMAL(10,2))

--======================================================================
--POPULATE TRUE OUTBOUND TALK TIME VALUE
--======================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1 SET
 TRUE_OUTBOUND_TALK_TIME = CASE WHEN FF_CONTACT_ID = FF_MASTER_CONTACT_ID
									THEN TALK_TIME 
								ELSE 0.00
						   END

--===================================================================================================
-- UPDATE DATETIME KEY
--===================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM		WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1	I
INNER JOIN	DATE_TIME									DT	ON DT.CAL_DATE = I.[DATETIME]

--===============================================
--HANDLE INVALID DATE/TIME RECORDS:
--===============================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_CONTACT_ID
,FF_MASTER_CONTACT_ID
,FF_TALK_TIME
,FF_ACW_TIME
,FF_HOLD_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,TALK_TIME
,ACW_TIME
,HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME
,STD_TENANT_START_DATE_TIME_KEY)
SELECT
 'DTM'					--BAD_IMPORTS_CODE		--'Invalid Date/Time'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_CONTACT_ID
,W1.FF_MASTER_CONTACT_ID
,W1.FF_TALK_TIME
,W1.FF_ACW_TIME
,W1.FF_HOLD_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.TALK_TIME
,W1.ACW_TIME
,W1.HOLD_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.STD_TENANT_START_DATE_TIME_KEY
FROM           WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1    W1
WHERE ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) = 0

--======================================================================
--DELETE INVALID DATE/TIME RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================

--SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1

--===========================================================================================================
--HANDLE DUPLICATES:
--===========================================================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_CONTACT_ID
,FF_MASTER_CONTACT_ID
,FF_TALK_TIME
,FF_ACW_TIME
,FF_HOLD_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,TALK_TIME
,ACW_TIME
,HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME
,STD_TENANT_START_DATE_TIME_KEY)
SELECT
 'DUP'					--BAD_IMPORTS_CODE		--'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_CONTACT_ID
,W1.FF_MASTER_CONTACT_ID
,W1.FF_TALK_TIME
,W1.FF_ACW_TIME
,W1.FF_HOLD_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.TALK_TIME
,W1.ACW_TIME
,W1.HOLD_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.STD_TENANT_START_DATE_TIME_KEY
FROM
(	SELECT
	 FF_DATE
	,FF_INTERVAL_30_MINUTES
	,FF_AGENT_NAME
	,FF_SKILL_NAME
	,FF_TEAM_NAME
	,FF_CONTACT_ID
	,FF_MASTER_CONTACT_ID
	,FF_TALK_TIME
	,ROW_NUMBER() over (partition by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_SKILL_NAME, FF_TEAM_NAME, FF_CONTACT_ID, FF_MASTER_CONTACT_ID, FF_TALK_TIME
                            order by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_SKILL_NAME, FF_TEAM_NAME, FF_CONTACT_ID, FF_MASTER_CONTACT_ID, TALK_TIME DESC) ROWNO
	FROM WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1
) TNM
LEFT JOIN      WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1	W1   ON W1.FF_DATE					= TNM.FF_DATE
															AND W1.FF_INTERVAL_30_MINUTES	= TNM.FF_INTERVAL_30_MINUTES
															AND W1.FF_AGENT_NAME			= TNM.FF_AGENT_NAME
															AND W1.FF_SKILL_NAME			= TNM.FF_SKILL_NAME
															AND W1.FF_TEAM_NAME				= TNM.FF_TEAM_NAME
															AND W1.FF_CONTACT_ID			= TNM.FF_CONTACT_ID
															AND W1.FF_MASTER_CONTACT_ID		= TNM.FF_MASTER_CONTACT_ID
															AND W1.FF_TALK_TIME				= TNM.FF_TALK_TIME
WHERE TNM.ROWNO > 1

--===========================================================================================================
--DELETE DUPLICATES:
--===========================================================================================================
DELETE FROM TNM
FROM
(	SELECT
	 FF_DATE
	,FF_INTERVAL_30_MINUTES
	,FF_AGENT_NAME
	,FF_SKILL_NAME
	,FF_TEAM_NAME
	,FF_CONTACT_ID
	,FF_MASTER_CONTACT_ID
	,FF_TALK_TIME
	,ROW_NUMBER() over (partition by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_SKILL_NAME, FF_TEAM_NAME, FF_CONTACT_ID, FF_MASTER_CONTACT_ID, FF_TALK_TIME
                            order by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_SKILL_NAME, FF_TEAM_NAME, FF_CONTACT_ID, FF_MASTER_CONTACT_ID, TALK_TIME DESC) ROWNO
	FROM WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1
) TNM
WHERE TNM.ROWNO > 1
--===========================================================================================================

--===========================================================================================================
--REMOVE RECORDS THAT FALL OUTSIDE OF BUSINESS HOURS (07:00 - 00:00 CST):
--===========================================================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_CONTACT_ID
,FF_MASTER_CONTACT_ID
,FF_TALK_TIME
,FF_ACW_TIME
,FF_HOLD_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,TALK_TIME
,ACW_TIME
,HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME
,STD_TENANT_START_DATE_TIME_KEY)
SELECT
 'OBH'					--BAD_IMPORTS_CODE		--'O'utside 'B'usiness 'H'ours
,'ACT'                  --BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_CONTACT_ID
,W1.FF_MASTER_CONTACT_ID
,W1.FF_TALK_TIME
,W1.FF_ACW_TIME
,W1.FF_HOLD_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.TALK_TIME
,W1.ACW_TIME
,W1.HOLD_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.STD_TENANT_START_DATE_TIME_KEY
--SELECT *
FROM           WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1    W1
WHERE W1.HOUR_INTERVAL IN (0,1,2,3,4,5,6)

--======================================================================
--DELETE RECORDS THAT OUR OUTSIDE OF BUSINESS HOURS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1
WHERE HOUR_INTERVAL IN (0,1,2,3,4,5,6)
--======================================================================

--======================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .CSV FILES:
--======================================================================
--SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 160
--======================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--Check #1:  ===================================================================================================
--	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1)
--	IF @RCD_CNT < 1 BEGIN
--		SET @MSG1 = @MSG1 + 'ERROR!  File Import Failed.  No Records Were/Could Be Imported.   |   ' 
--		SET @ERR_CNT = @ERR_CNT + 1
--	END

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	(
	 TENANT_KEY
	,SUB_GROUP_NAME
	,ERROR_MSG)
	SELECT 
	 @TENANT_KEY					--TENANT_KEY
	,'MONAT_INVOICING_OUTBOUND'	--SUB_GROUP_NAME
	,@MSG1						--ERROR_MSG
	--===========================
--	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	--MUST RETURN AT LEAST ONE RECORD TO SSIS
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	(
 	 TENANT_KEY
	,SUB_GROUP_NAME
	,ERROR_MSG)
	SELECT 
	 @TENANT_KEY				--TENANT_KEY
	,'MONAT_INVOICING_OUTBOUND'	--SUB_GROUP_NAME
	,''							--ERROR_MSG
END

--===========================================================
--GROUP DATA BY HOURLY INTERVALS
--===========================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_2

INSERT INTO WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_2
(
 FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_CONTACT_ID
,FF_MASTER_CONTACT_ID
,FF_TALK_TIME
,FF_ACW_TIME
,FF_HOLD_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,TALK_TIME
,ACW_TIME
,HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME
,STD_TENANT_START_DATE_TIME_KEY
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W1.FF_DATE
,NULL	--FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,NULL	--FF_SKILL_NAME
,MAX(W1.FF_TEAM_NAME)
,NULL	--FF_CONTACT_ID
,NULL	--FF_MASTER_CONTACT_ID
,SUM(CAST(ISNULL(NULLIF(W1.FF_TALK_TIME	,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_ACW_TIME	,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_HOLD_TIME	,''),0) AS DECIMAL(10,2)))

,W1.SEQNO_ADDED_TIME
,MIN(W1.SEQNO)
,W1.FTP_FILE_NAME

,W1.[DATETIME]
,W1.HOUR_INTERVAL
,MAX(W1.AGENT_NAME)
,NULL						--SKILL_NAME
,W1.TEAM_NAME
,SUM(ISNULL(W1.TALK_TIME					,0.00))
,SUM(ISNULL(W1.ACW_TIME						,0.00))
,SUM(ISNULL(W1.HOLD_TIME					,0.00))
,SUM(ISNULL(W1.TRUE_OUTBOUND_TALK_TIME		,0.00))
,W1.STD_TENANT_START_DATE_TIME_KEY

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1  W1

LEFT JOIN       WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_2   G	 ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
															AND G.FF_AGENT_NAME                  = W1.FF_AGENT_NAME
															AND G.TEAM_NAME						 = W1.TEAM_NAME

WHERE (G.FF_AGENT_NAME						IS NULL AND ISNULL(W1.FF_AGENT_NAME,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY		IS NULL AND ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND (G.TEAM_NAME							IS NULL AND ISNULL(W1.TEAM_NAME,'') <> '' )

GROUP BY
 W1.FF_DATE
,W1.FF_AGENT_NAME
,W1.TEAM_NAME
,W1.SEQNO_ADDED_TIME
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.STD_TENANT_START_DATE_TIME_KEY

ORDER BY
 W1.FF_AGENT_NAME
,W1.TEAM_NAME
,W1.[DATETIME]

--=============================================
--UPDATE PERMANENT OUTBOUND TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING SET
 FF_DATE							= W2.FF_DATE
,FF_INTERVAL_30_MINUTES				= W2.FF_INTERVAL_30_MINUTES
--,FF_AGENT_NAME					= W2.FF_AGENT_NAME
,FF_SKILL_NAME						= W2.FF_SKILL_NAME
,FF_TEAM_NAME						= W2.FF_TEAM_NAME
,FF_CONTACT_ID						= W2.FF_CONTACT_ID
,FF_MASTER_CONTACT_ID				= W2.FF_MASTER_CONTACT_ID
,FF_TALK_TIME						= W2.FF_TALK_TIME
,FF_ACW_TIME						= W2.FF_ACW_TIME
,FF_HOLD_TIME						= W2.FF_HOLD_TIME

,SEQNO_ADDED_TIME					= W2.SEQNO_ADDED_TIME
,SEQNO								= W2.SEQNO
--,FTP_FILE_NAME					= W2.FTP_FILE_NAME

,[DATETIME]							= W2.[DATETIME]
,HOUR_INTERVAL						= W2.HOUR_INTERVAL
,AGENT_NAME							= W2.AGENT_NAME
,SKILL_NAME							= W2.SKILL_NAME
--,TEAM_NAME						= W2.TEAM_NAME
,TALK_TIME							= W2.TALK_TIME
,ACW_TIME							= W2.ACW_TIME
,HOLD_TIME							= W2.HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME			= W2.TRUE_OUTBOUND_TALK_TIME
--,STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
--,WS_ROW_CREATED_TIME				= NULL
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_2  W2
INNER JOIN      WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
															AND G.FF_AGENT_NAME						= W2.FF_AGENT_NAME
															AND G.TEAM_NAME							= W2.TEAM_NAME
															AND G.FTP_FILE_NAME						= W2.FTP_FILE_NAME

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
  AND G.TEAM_NAME					   = W2.TEAM_NAME
  AND G.FTP_FILE_NAME				   = W2.FTP_FILE_NAME

--=============================================
--INSERT INTO PERMANENT OUTBOUND IMPORT TABLE: 
--=============================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING
(
 FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_CONTACT_ID
,FF_MASTER_CONTACT_ID
,FF_TALK_TIME
,FF_ACW_TIME
,FF_HOLD_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,TALK_TIME
,ACW_TIME
,HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME
,STD_TENANT_START_DATE_TIME_KEY
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W2.FF_DATE
,W2.FF_INTERVAL_30_MINUTES
,W2.FF_AGENT_NAME
,W2.FF_SKILL_NAME
,W2.FF_TEAM_NAME
,W2.FF_CONTACT_ID
,W2.FF_MASTER_CONTACT_ID
,W2.FF_TALK_TIME
,W2.FF_ACW_TIME
,W2.FF_HOLD_TIME

,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME

,W2.[DATETIME]
,W2.HOUR_INTERVAL
,W2.AGENT_NAME
,W2.SKILL_NAME
,W2.TEAM_NAME
,W2.TALK_TIME
,W2.ACW_TIME
,W2.HOLD_TIME
,W2.TRUE_OUTBOUND_TALK_TIME
,W2.STD_TENANT_START_DATE_TIME_KEY

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_2  W2

LEFT JOIN       WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING    G  ON G.STD_TENANT_START_DATE_TIME_KEY	 = W2.STD_TENANT_START_DATE_TIME_KEY
															AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
															AND G.TEAM_NAME						 = W2.TEAM_NAME
															AND G.FTP_FILE_NAME					 = W2.FTP_FILE_NAME

WHERE (G.FF_AGENT_NAME					IS NULL AND ISNULL(W2.FF_AGENT_NAME,'') <> '' )
  AND (G.TEAM_NAME						IS NULL AND ISNULL(W2.TEAM_NAME, '') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W2.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND (G.FTP_FILE_NAME					IS NULL AND ISNULL(W2.FTP_FILE_NAME,'') <> '' )


--SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_2
--SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2

--=============================================
--UPDATE INVOICE WORK TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2 SET
 TRUE_OUTBOUND_TALK_TIME		= W2.TRUE_OUTBOUND_TALK_TIME
,WS_ROW_UPDATED_TIME			= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_2  W2
INNER JOIN      WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2	 G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
															AND G.FF_AGENT_NAME						= W2.FF_AGENT_NAME
															--AND G.TEAM_NAME							= W2.TEAM_NAME

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
  --AND G.TEAM_NAME					   = W2.TEAM_NAME

--SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2
--=============================================
--INSERT INTO INVOICE WORK TABLE:					--NOT REALLY NECESSARY SINCE THERE SHOULDN'T BE ANY OUTBOUND DATA WITHOUT LOGIN DATA
--=============================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2
(
 FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_UNAVAILABLE_CODE
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_LOGIN_TIME
,FF_AVAILABLE_TIME
,FF_UNAVAILABLE_TIME_MINUS_ACW
,FF_TALK_TIME
,FF_HOLD_TIME
,FF_ACW_TIME
,FF_HELD_PARTY_ABANDONS
,FF_INBOUND_HANDLED
,FF_OUTBOUND_HANDLED
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,UNAVAILABLE_CODE
,SKILL_NAME
,TEAM_NAME
,INBOUND_HANDLED_COUNT
,OUTBOUND_HANDLED_COUNT
,TOTAL_CALL_COUNT
,HELD_PARTY_ABANDON_COUNT
,LOGIN_TIME
,AVAILABLE_TIME
,UNAVAILABLE_EMAIL_TIME
,UNAVAILABLE_WSOL_EMAIL_TIME
,UNAVAILABLE_FLOOR_SUPPORT_TIME
,UNAVAILABLE_SPECIAL_PROJECT_TIME
,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,UNAVAILABLE_IT_SYS_ISSUE_TIME
,UNAVAILABLE_IDLE_TIME
,UNAVAILABLE_REFUSED_TIME
,UNAVAILABLE_SYSTEM_PENDING_TIME
,UNAVAILABLE_OUTBOUND_CALL_TIME
,UNAVAILABLE_TIME_MINUS_ACW
,TALK_TIME
,HOLD_TIME
,ACW_TIME
,AUTHORIZED_ACW_TIME
,TRUE_OUTBOUND_TALK_TIME
,TOTAL_TALK
,HANDLE_TIME
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,PAY_GROUP
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W2.FF_DATE
,NULL									--W2.FF_INTERVAL_30_MINUTES
,W2.FF_AGENT_NAME
,NULL									--W2.FF_UNAVAILABLE_CODE
,NULL									--W2.FF_SKILL_NAME
,W2.FF_TEAM_NAME
,NULL									--W2.FF_LOGIN_TIME
,NULL									--W2.FF_AVAILABLE_TIME
,NULL									--W2.FF_UNAVAILABLE_TIME_MINUS_ACW
,NULL									--W2.FF_TALK_TIME
,NULL									--W2.FF_HOLD_TIME
,NULL									--W2.FF_ACW_TIME
,NULL									--W2.FF_HELD_PARTY_ABANDONS
,NULL									--W2.FF_INBOUND_HANDLED
,NULL									--W2.FF_OUTBOUND_HANDLED

,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME

,W2.[DATETIME]
,W2.HOUR_INTERVAL
,W2.AGENT_NAME
,NULL									--W2.UNAVAILABLE_CODE
,W2.SKILL_NAME
,W2.TEAM_NAME
,NULL									--W2.INBOUND_HANDLED_COUNT
,NULL									--W2.OUTBOUND_HANDLED_COUNT
,NULL									--W2.TOTAL_CALL_COUNT
,NULL									--W2.HELD_PARTY_ABANDON_COUNT
,NULL									--W2.LOGIN_TIME
,NULL									--W2.AVAILABLE_TIME
,NULL									--W2.UNAVAILABLE_EMAIL_TIME
,NULL									--W2.UNAVAILABLE_WSOL_EMAIL_TIME
,NULL									--W2.UNAVAILABLE_FLOOR_SUPPORT_TIME
,NULL									--W2.UNAVAILABLE_SPECIAL_PROJECT_TIME
,NULL									--W2.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,NULL									--W2.UNAVAILABLE_IT_SYS_ISSUE_TIME
,NULL									--W2.UNAVAILABLE_IDLE_TIME
,NULL									--W2.UNAVAILABLE_REFUSED_TIME
,NULL									--W2.UNAVAILABLE_SYSTEM_PENDING_TIME
,NULL									--W2.UNAVAILABLE_OUTBOUND_CALL_TIME
,NULL									--W2.UNAVAILABLE_TIME_MINUS_ACW
,NULL									--W2.TALK_TIME
,NULL									--W2.HOLD_TIME
,NULL									--W2.ACW_TIME
,NULL									--W2.AUTHORIZED_ACW_TIME
,W2.TRUE_OUTBOUND_TALK_TIME
,NULL									--W2.TOTAL_TALK
,NULL									--W2.HANDLE_TIME
,NULL									--W2.CPROD
,NULL									--W2.MINIMUM_GUARANTEE
,NULL									--W2.AUTHORIZED_TO_INVOICE
,NULL									--W2.EMAIL
,NULL									--W2.ID_EXT
,NULL									--W2.SCHEDULER_ACL_NAME
,W2.STD_TENANT_START_DATE_TIME_KEY
,NULL									--W2.CAL_DATE
,NULL									--W2.TENANT_KEY
,NULL									--W2.AIR_DAY_TYPE
,NULL									--W2.AIR_ACW_FONT_COLOR
,NULL									--W2.MIN_GUARANTEE_MINUTES
,NULL									--W2.MIN_GUARANTEE_TYPE
,NULL									--W2.AUTHORIZED_TO_INVOICE_TYPE
,NULL									--W2.HAS_HOLIDAYS
,NULL									--W2.INCLUDE_IN_CAS
,NULL									--W2.READY_FOR_XML
,NULL									--W2.SHOW_ID_EXTS
,NULL									--W2.INVOICE_ID
,NULL									--W2.RESOURCE_NAME
,NULL									--W2.AIRITKDUR
,NULL									--W2.AIRIACDUR
,NULL									--W2.PAY_GROUP

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_2  W2

LEFT JOIN       WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2  G   ON G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
														 AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
														 --AND G.TEAM_NAME					  = W2.TEAM_NAME

WHERE (G.FF_AGENT_NAME					IS NULL AND ISNULL(W2.FF_AGENT_NAME,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W2.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  --AND (G.TEAM_NAME						IS NULL AND ISNULL(W2.TEAM_NAME,'') <> '' )

--SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2


--======================================================================
--UPDATE TOTAL TALK VALUE
--======================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2 SET
 TOTAL_TALK = TALK_TIME + TRUE_OUTBOUND_TALK_TIME

 --======================================================================================
 --CALCULATE AUTHORIZED ACW TIME VALUE
 --======================================================================================
 UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2 SET
  AUTHORIZED_ACW_TIME = CASE WHEN (TOTAL_CALL_COUNT * 300.00) > ACW_TIME THEN ACW_TIME
							 ELSE (TOTAL_CALL_COUNT * 300.00)	-- 5 MINS PER CALL
						END

--=======================================================================================
--REMOVE RECORDS WHERE LOGIN_TIME = ACW_TIME
--=======================================================================================
--SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2 WHERE LOGIN_TIME = ACW_TIME
INSERT INTO WSOL_TB_IMPORTS_MONAT_IC_INVOICING_BAD
SELECT
 'ACW'					--BAD_IMPORTS_CODE		--LOGIN_TIME = 'ACW'_TIME
,'ACT'                  --BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W2.FF_DATE
,W2.FF_INTERVAL_30_MINUTES
,W2.FF_AGENT_NAME
,W2.FF_UNAVAILABLE_CODE
,W2.FF_SKILL_NAME
,W2.FF_TEAM_NAME
,W2.FF_LOGIN_TIME
,W2.FF_AVAILABLE_TIME
,W2.FF_UNAVAILABLE_TIME_MINUS_ACW
,W2.FF_TALK_TIME
,W2.FF_HOLD_TIME
,W2.FF_ACW_TIME
,W2.FF_HELD_PARTY_ABANDONS
,W2.FF_INBOUND_HANDLED
,W2.FF_OUTBOUND_HANDLED
,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME
,W2.[DATETIME]
,W2.HOUR_INTERVAL
,W2.AGENT_NAME
,W2.UNAVAILABLE_CODE
,W2.SKILL_NAME
,W2.TEAM_NAME
,W2.INBOUND_HANDLED_COUNT
,W2.OUTBOUND_HANDLED_COUNT
,W2.TOTAL_CALL_COUNT
,W2.HELD_PARTY_ABANDON_COUNT
,W2.LOGIN_TIME
,W2.AVAILABLE_TIME
,W2.UNAVAILABLE_EMAIL_TIME
,W2.UNAVAILABLE_WSOL_EMAIL_TIME
,W2.UNAVAILABLE_FLOOR_SUPPORT_TIME
,W2.UNAVAILABLE_SPECIAL_PROJECT_TIME
,W2.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,W2.UNAVAILABLE_IT_SYS_ISSUE_TIME
,W2.UNAVAILABLE_IDLE_TIME
,W2.UNAVAILABLE_REFUSED_TIME
,W2.UNAVAILABLE_SYSTEM_PENDING_TIME
,W2.UNAVAILABLE_OUTBOUND_CALL_TIME
,W2.UNAVAILABLE_TIME_MINUS_ACW
,W2.TALK_TIME
,W2.HOLD_TIME
,W2.ACW_TIME
,W2.AUTHORIZED_ACW_TIME
,W2.TRUE_OUTBOUND_TALK_TIME
,W2.TOTAL_TALK
,W2.HANDLE_TIME
,W2.CPROD
,W2.MINIMUM_GUARANTEE
,W2.AUTHORIZED_TO_INVOICE
,W2.EMAIL
,W2.ID_EXT
,W2.SCHEDULER_ACL_NAME
,W2.STD_TENANT_START_DATE_TIME_KEY
,W2.CAL_DATE
,W2.TENANT_KEY
,W2.AIR_DAY_TYPE
,W2.AIR_ACW_FONT_COLOR
,W2.MIN_GUARANTEE_MINUTES
,W2.MIN_GUARANTEE_TYPE
,W2.AUTHORIZED_TO_INVOICE_TYPE
,W2.HAS_HOLIDAYS
,W2.INCLUDE_IN_CAS
,W2.READY_FOR_XML
,W2.SHOW_ID_EXTS
,W2.INVOICE_ID
,W2.RESOURCE_NAME
,W2.AIRITKDUR
,W2.AIRIACDUR
,W2.PAY_GROUP
--SELECT *
FROM           WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2    W2
WHERE W2.LOGIN_TIME = W2.ACW_TIME

--======================================================================
--DELETE RECORDS WHERE LOGIN_TIME = ACW_TIME
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2
WHERE LOGIN_TIME = ACW_TIME
--======================================================================

--======================================================================
--CALCULATE HANDLE_TIME VALUE
--======================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2 SET
 HANDLE_TIME = TOTAL_TALK + ACW_TIME

--===================================================================================================================================================
--UPDATE CPROD TIME (AVAILABLE + TOTAL TALK + AUTHORIZED_ACW_TIME + BILLABLE_UNAVAILABLE_TIME)
--===================================================================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2 SET
 CPROD = CASE WHEN ID_EXT = 'MRA' THEN AVAILABLE_TIME + TOTAL_TALK + AUTHORIZED_ACW_TIME + UNAVAILABLE_EMAIL_TIME + UNAVAILABLE_WSOL_EMAIL_TIME + UNAVAILABLE_SPECIAL_PROJECT_TIME +
									   UNAVAILABLE_HELD_PARTY_ABANDONED_TIME + UNAVAILABLE_IT_SYS_ISSUE_TIME + UNAVAILABLE_SYSTEM_PENDING_TIME + UNAVAILABLE_OUTBOUND_CALL_TIME + UNAVAILABLE_FLOOR_SUPPORT_TIME

			  ELSE					   AVAILABLE_TIME + TOTAL_TALK + AUTHORIZED_ACW_TIME + UNAVAILABLE_EMAIL_TIME + UNAVAILABLE_WSOL_EMAIL_TIME + UNAVAILABLE_SPECIAL_PROJECT_TIME +
									   UNAVAILABLE_HELD_PARTY_ABANDONED_TIME + UNAVAILABLE_IT_SYS_ISSUE_TIME + UNAVAILABLE_SYSTEM_PENDING_TIME + UNAVAILABLE_OUTBOUND_CALL_TIME
		 END

--====================================================
-- CALCULATE MINIMUM GUARANTEE VALUE
--====================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2 SET
 MINIMUM_GUARANTEE = CPROD

--====================================================
--CALCULATE AUTHORIZED TO INVOICE VALUE
--====================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2 SET
 AUTHORIZED_TO_INVOICE = CPROD

--SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2 WHERE AUTHORIZED_TO_INVOICE > 3600.00
--SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING

--=============================================
--UPDATE PERMANENT TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING SET
 FF_DATE								= W2.FF_DATE
,FF_INTERVAL_30_MINUTES					= W2.FF_INTERVAL_30_MINUTES
--,FF_AGENT_NAME						= W2.FF_AGENT_NAME
,FF_UNAVAILABLE_CODE					= W2.UNAVAILABLE_CODE
,FF_SKILL_NAME							= W2.FF_SKILL_NAME
,FF_TEAM_NAME							= W2.FF_TEAM_NAME
,FF_LOGIN_TIME							= W2.FF_LOGIN_TIME
,FF_AVAILABLE_TIME						= W2.FF_AVAILABLE_TIME
,FF_UNAVAILABLE_TIME_MINUS_ACW			= W2.FF_UNAVAILABLE_TIME_MINUS_ACW
,FF_TALK_TIME							= W2.FF_TALK_TIME
,FF_HOLD_TIME							= W2.FF_HOLD_TIME
,FF_ACW_TIME							= W2.FF_ACW_TIME
,FF_HELD_PARTY_ABANDONS					= W2.FF_HELD_PARTY_ABANDONS
,FF_INBOUND_HANDLED						= W2.FF_INBOUND_HANDLED
,FF_OUTBOUND_HANDLED					= W2.FF_OUTBOUND_HANDLED

,SEQNO_ADDED_TIME						= W2.SEQNO_ADDED_TIME
,SEQNO									= W2.SEQNO
--,FTP_FILE_NAME						= W2.FTP_FILE_NAME

,[DATETIME]								= W2.[DATETIME]
,HOUR_INTERVAL							= W2.HOUR_INTERVAL
,AGENT_NAME								= W2.AGENT_NAME
,UNAVAILABLE_CODE						= W2.UNAVAILABLE_CODE
,SKILL_NAME								= W2.SKILL_NAME
,TEAM_NAME								= W2.TEAM_NAME
,INBOUND_HANDLED_COUNT					= W2.INBOUND_HANDLED_COUNT
,OUTBOUND_HANDLED_COUNT					= W2.OUTBOUND_HANDLED_COUNT
,TOTAL_CALL_COUNT						= W2.TOTAL_CALL_COUNT
,HELD_PARTY_ABANDON_COUNT				= W2.HELD_PARTY_ABANDON_COUNT
,LOGIN_TIME								= W2.LOGIN_TIME
,AVAILABLE_TIME							= W2.AVAILABLE_TIME
,UNAVAILABLE_EMAIL_TIME					= W2.UNAVAILABLE_EMAIL_TIME
,UNAVAILABLE_WSOL_EMAIL_TIME			= W2.UNAVAILABLE_WSOL_EMAIL_TIME
,UNAVAILABLE_FLOOR_SUPPORT_TIME			= W2.UNAVAILABLE_FLOOR_SUPPORT_TIME
,UNAVAILABLE_SPECIAL_PROJECT_TIME		= W2.UNAVAILABLE_SPECIAL_PROJECT_TIME
,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME	= W2.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,UNAVAILABLE_IT_SYS_ISSUE_TIME			= W2.UNAVAILABLE_IT_SYS_ISSUE_TIME
,UNAVAILABLE_IDLE_TIME					= W2.UNAVAILABLE_IDLE_TIME
,UNAVAILABLE_REFUSED_TIME				= W2.UNAVAILABLE_REFUSED_TIME
,UNAVAILABLE_SYSTEM_PENDING_TIME		= W2.UNAVAILABLE_SYSTEM_PENDING_TIME
,UNAVAILABLE_OUTBOUND_CALL_TIME			= W2.UNAVAILABLE_OUTBOUND_CALL_TIME
,UNAVAILABLE_TIME_MINUS_ACW				= W2.UNAVAILABLE_TIME_MINUS_ACW
,TALK_TIME								= W2.TALK_TIME
,HOLD_TIME								= W2.HOLD_TIME
,ACW_TIME								= W2.ACW_TIME
,AUTHORIZED_ACW_TIME					= W2.AUTHORIZED_ACW_TIME
,TRUE_OUTBOUND_TALK_TIME				= W2.TRUE_OUTBOUND_TALK_TIME
,TOTAL_TALK								= W2.TOTAL_TALK
,HANDLE_TIME							= W2.HANDLE_TIME
,CPROD									= W2.CPROD
,MINIMUM_GUARANTEE						= W2.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE					= W2.AUTHORIZED_TO_INVOICE
,EMAIL									= W2.EMAIL
--,ID_EXT								= W2.ID_EXT
,SCHEDULER_ACL_NAME						= W2.SCHEDULER_ACL_NAME
--,STD_TENANT_START_DATE_TIME_KEY		= W2.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE								= W2.CAL_DATE
,TENANT_KEY								= W2.TENANT_KEY
,AIR_DAY_TYPE							= W2.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR						= W2.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES					= W2.MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE						= W2.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE				= W2.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS							= W2.HAS_HOLIDAYS
,INCLUDE_IN_CAS							= W2.INCLUDE_IN_CAS
,READY_FOR_XML							= W2.READY_FOR_XML
,SHOW_ID_EXTS							= W2.SHOW_ID_EXTS
,INVOICE_ID								= W2.INVOICE_ID
,RESOURCE_NAME							= W2.RESOURCE_NAME
,AIRITKDUR								= W2.AIRITKDUR
,AIRIACDUR								= W2.AIRIACDUR
,PAY_GROUP								= W2.PAY_GROUP
--,WS_ROW_CREATED_TIME					= NULL
,WS_ROW_UPDATED_TIME					= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2  W2
INNER JOIN      WSOL_TB_IMPORTS_MONAT_IC_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
														 AND G.FF_AGENT_NAME					= W2.FF_AGENT_NAME
														 AND G.FTP_FILE_NAME					= W2.FTP_FILE_NAME
														 AND G.ID_EXT							= W2.ID_EXT

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
  AND G.FTP_FILE_NAME				   = W2.FTP_FILE_NAME
  AND G.ID_EXT						   = W2.ID_EXT

--=============================================
--INSERT INTO PERMANENT IMPORT TABLE: 
--=============================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_IC_INVOICING
(
 FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_UNAVAILABLE_CODE
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_LOGIN_TIME
,FF_AVAILABLE_TIME
,FF_UNAVAILABLE_TIME_MINUS_ACW
,FF_TALK_TIME
,FF_HOLD_TIME
,FF_ACW_TIME
,FF_HELD_PARTY_ABANDONS
,FF_INBOUND_HANDLED
,FF_OUTBOUND_HANDLED
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,UNAVAILABLE_CODE
,SKILL_NAME
,TEAM_NAME
,INBOUND_HANDLED_COUNT
,OUTBOUND_HANDLED_COUNT
,TOTAL_CALL_COUNT
,HELD_PARTY_ABANDON_COUNT
,LOGIN_TIME
,AVAILABLE_TIME
,UNAVAILABLE_EMAIL_TIME
,UNAVAILABLE_WSOL_EMAIL_TIME
,UNAVAILABLE_FLOOR_SUPPORT_TIME
,UNAVAILABLE_SPECIAL_PROJECT_TIME
,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,UNAVAILABLE_IT_SYS_ISSUE_TIME
,UNAVAILABLE_IDLE_TIME
,UNAVAILABLE_REFUSED_TIME
,UNAVAILABLE_SYSTEM_PENDING_TIME
,UNAVAILABLE_OUTBOUND_CALL_TIME
,UNAVAILABLE_TIME_MINUS_ACW
,TALK_TIME
,HOLD_TIME
,ACW_TIME
,AUTHORIZED_ACW_TIME
,TRUE_OUTBOUND_TALK_TIME
,TOTAL_TALK
,HANDLE_TIME
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,PAY_GROUP
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W2.FF_DATE
,W2.FF_INTERVAL_30_MINUTES
,W2.FF_AGENT_NAME
,W2.UNAVAILABLE_CODE
,W2.FF_SKILL_NAME
,W2.FF_TEAM_NAME
,W2.FF_LOGIN_TIME
,W2.FF_AVAILABLE_TIME
,W2.FF_UNAVAILABLE_TIME_MINUS_ACW
,W2.FF_TALK_TIME
,W2.FF_HOLD_TIME
,W2.FF_ACW_TIME
,W2.FF_HELD_PARTY_ABANDONS
,W2.FF_INBOUND_HANDLED
,W2.FF_OUTBOUND_HANDLED

,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME

,W2.[DATETIME]
,W2.HOUR_INTERVAL
,W2.AGENT_NAME
,W2.UNAVAILABLE_CODE
,W2.SKILL_NAME
,W2.TEAM_NAME
,W2.INBOUND_HANDLED_COUNT
,W2.OUTBOUND_HANDLED_COUNT
,W2.TOTAL_CALL_COUNT
,W2.HELD_PARTY_ABANDON_COUNT
,W2.LOGIN_TIME
,W2.AVAILABLE_TIME
,W2.UNAVAILABLE_EMAIL_TIME
,W2.UNAVAILABLE_WSOL_EMAIL_TIME
,W2.UNAVAILABLE_FLOOR_SUPPORT_TIME
,W2.UNAVAILABLE_SPECIAL_PROJECT_TIME
,W2.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,W2.UNAVAILABLE_IT_SYS_ISSUE_TIME
,W2.UNAVAILABLE_IDLE_TIME
,W2.UNAVAILABLE_REFUSED_TIME
,W2.UNAVAILABLE_SYSTEM_PENDING_TIME
,W2.UNAVAILABLE_OUTBOUND_CALL_TIME
,W2.UNAVAILABLE_TIME_MINUS_ACW
,W2.TALK_TIME
,W2.HOLD_TIME
,W2.ACW_TIME
,W2.AUTHORIZED_ACW_TIME
,W2.TRUE_OUTBOUND_TALK_TIME
,W2.TOTAL_TALK
,W2.HANDLE_TIME
,W2.CPROD
,W2.MINIMUM_GUARANTEE
,W2.AUTHORIZED_TO_INVOICE
,W2.EMAIL
,W2.ID_EXT
,W2.SCHEDULER_ACL_NAME
,W2.STD_TENANT_START_DATE_TIME_KEY
,W2.CAL_DATE
,W2.TENANT_KEY
,W2.AIR_DAY_TYPE
,W2.AIR_ACW_FONT_COLOR
,W2.MIN_GUARANTEE_MINUTES
,W2.MIN_GUARANTEE_TYPE
,W2.AUTHORIZED_TO_INVOICE_TYPE
,W2.HAS_HOLIDAYS
,W2.INCLUDE_IN_CAS
,W2.READY_FOR_XML
,W2.SHOW_ID_EXTS
,W2.INVOICE_ID
,W2.RESOURCE_NAME
,W2.AIRITKDUR
,W2.AIRIACDUR
,W2.PAY_GROUP

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2  W2

LEFT JOIN       WSOL_TB_IMPORTS_MONAT_IC_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
														 AND G.FF_AGENT_NAME					= W2.FF_AGENT_NAME
														 AND G.FTP_FILE_NAME					= W2.FTP_FILE_NAME
														 AND G.ID_EXT							= W2.ID_EXT

WHERE (G.FF_AGENT_NAME					IS NULL AND ISNULL(W2.FF_AGENT_NAME,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W2.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND (G.FTP_FILE_NAME					IS NULL AND ISNULL(W2.FTP_FILE_NAME,'') <> '' )
--  AND (G.ID_EXT							IS NULL AND ISNULL(W2.ID_EXT,'') <> '' )


--==================================
SET DATEFIRST 1  -- = Monday
--==================================

--=============================================================================================
--Need when populating tmp DEW table for insert into _AIA table.
--=============================================================================================
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME

SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN([DATETIME]) FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2))  
--=============================================================================================

--===========================
IF OBJECT_ID('TEMPDB..#DT_EASY_WEEKS') IS NOT NULL BEGIN
   DROP TABLE #DT_EASY_WEEKS
END
CREATE TABLE #DT_EASY_WEEKS
(CAL_DATE_STRING      VARCHAR(10)
,CAL_WEEK_START_DATE  DATETIME
,CAL_WEEK_END_DATE    DATETIME
,PAY_CYCLE_CLOSURE_DATE DATETIME
)
INSERT INTO #DT_EASY_WEEKS
SELECT
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
FROM DATE_TIME DT
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
--WHERE DT.CAL_DATE >= CAST('06/01/2011' AS DATETIME) AND DT.CAL_DATE <  CAST('06/20/2011' AS DATETIME)
GROUP BY 
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
--===========================
UPDATE #DT_EASY_WEEKS SET CAL_WEEK_END_DATE = DATEADD(DD,6,CAL_WEEK_START_DATE)
--110713: WAS: 06/26/2011
UPDATE #DT_EASY_WEEKS SET
 PAY_CYCLE_CLOSURE_DATE = (CASE WHEN (DATEDIFF(DD,CAST('09/29/2013' AS DATETIME),CAL_WEEK_END_DATE) % 14) = 0 THEN
									CAL_WEEK_END_DATE
								ELSE
									DATEADD(DD,7,CAL_WEEK_END_DATE)
								END)
--SELECT * FROM #DT_EASY_WEEKS ORDER BY CAL_DATE_STRING


--=======================================================================================
--CREATE TMP TABLE:	Same structure as:  [YZ_TB_AGENT_INVOICE_AUTOMATION]
--=======================================================================================
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_MONAT_IC_UV_ANT_AIA') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_MONAT_IC_UV_ANT_AIA
END
CREATE TABLE #WSOL_TB_IMPORTS_MONAT_IC_UV_ANT_AIA
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](100) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #WSOL_TB_IMPORTS_MONAT_IC_UV_ANT_AIA
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.FF_AGENT_NAME --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING				--[DATE]             
,DT.LABEL_HH24 + ':00'			--HOD_INTERVAL

,AIA.LOGIN_TIME					--AU_DK_LOGGED_IN_DURATION
,AIA.AVAILABLE_TIME				--AU_DK_AVAILABLE_DURATION

,AIA.TOTAL_TALK					--AIA.TALK_TIME + AIA.TRUE_OUTBOUND_TALK_TIME    --AU_DK_TALK_DURATION
,AIA.TALK_TIME					--AU_DK_IB_TALK_DURATION
,AIA.TRUE_OUTBOUND_TALK_TIME	--AU_DK_OB_TALK_DURATION

,AIA.AUTHORIZED_ACW_TIME		--AU_DK_CONVENTIONAL_ACW
,AIA.UNAVAILABLE_TIME_MINUS_ACW	   + AIA.UNAVAILABLE_EMAIL_TIME + AIA.UNAVAILABLE_WSOL_EMAIL_TIME + AIA.UNAVAILABLE_FLOOR_SUPPORT_TIME  + AIA.UNAVAILABLE_SPECIAL_PROJECT_TIME + AIA.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME +
 AIA.UNAVAILABLE_IT_SYS_ISSUE_TIME + AIA.UNAVAILABLE_IDLE_TIME  + AIA.UNAVAILABLE_REFUSED_TIME	  + AIA.UNAVAILABLE_SYSTEM_PENDING_TIME + AIA.UNAVAILABLE_OUTBOUND_CALL_TIME	--AU_DK_NR_DURATION
,0	--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0	--AU_DK_ADJUSTED_NR_DURATION
,AIA.CPROD						--AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.CPROD						--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS  

,0	--AU_DK_XFER_COUNT
,0  --AU_DK_HOLD_COUNT
,0  --AU_DK_CONFERENCE_COUNT
,0  --AU_DK_CONSULT_COUNT
,0  --AU_DK_PUP_COUNT

,0	--AU_DK_OFFERED_COUNT
,AIA.TOTAL_CALL_COUNT			--AU_DK_HANDLED_COUNT
,AIA.INBOUND_HANDLED_COUNT		--AU_DK_IB_HANDLE_COUNT
,AIA.OUTBOUND_HANDLED_COUNT		--AU_DK_OB_HANDLE_COUNT
																
,0  --AU_DK_RONA_COUNT
,0  --AU_DK_AWR_COUNT

,AIA.MINIMUM_GUARANTEE		--MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE  --AUTHORIZED_TO_INVOICE

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_MINUTES										--MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID  --CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID 
,AIA.RESOURCE_NAME
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,dbo.GETDATE()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL			--	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
FROM            WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2			AIA 
--ONLY WANT TO INCLUDE VALID ID_EXTs IN AIA TABLE -- ID_EXTs TAHT HAVE MING AND AUT2 VALUES
INNER JOIN      WSOL_TB_IMPORTS_MONAT_SD_AIA_STATIC_DEFAULTS	AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      WSOL_TB_IMPORTS_MONAT_SD_INVOICE_GROUPS			CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME									DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS								DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')
  AND AIA.AUTHORIZED_TO_INVOICE <> 0.00											--<<<<<---- FILTER OUT RECORDS WHERE AUTHORIZED TIME = 0.00


--=====================================
--UPDATE WSOL_TB_...UV_ANT_AIA TABLE:
--=====================================
--SELECT TOP 100 * FROM WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA
UPDATE WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA SET
 [PLATFORM]							= W1.[PLATFORM]
,[STATUS]							= W1.[STATUS]
--,INVOICE_MAP_KEY					= W1.INVOICE_MAP_KEY
,FIELD_NAME							= W1.FIELD_NAME
,SCHEDULER_PROJECT_ID				= W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME					= W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION					= W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID			= W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME			= W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID				= W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME			= W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID			= W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID	= W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID		= W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY			= W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID					= W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID					= W1.HOLIDAY_INVOICE_ID
,HOLIDAY							= W1.HOLIDAY
,FILE_FORMAT_OF_PUSH				= W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID		= W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL							= W1.NEW_ACL
,CURRENT_CATS						= W1.CURRENT_CATS
,CATS_ID							= W1.CATS_ID
,PATS_ID							= W1.PATS_ID
,SMART_ELIGIBLE						= W1.SMART_ELIGIBLE
,SMART_TIER_1						= W1.SMART_TIER_1
,SMART_TIER_2						= W1.SMART_TIER_2
,SMART_TIER_3						= W1.SMART_TIER_3
,INTERVAL							= W1.INTERVAL
,[DATE]								= W1.[DATE]
,HOD_INTERVAL						= W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION			= W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION			= W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION				= W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION				= W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION				= W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW				= W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION					= W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT					= W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT					= W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT				= W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT				= W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT					= W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT				= W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT				= W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT				= W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT				= W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT					= W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT					= W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE					= W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE				= W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE					= W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE				= W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
--,FTP_FILE_NAME					= W1.FTP_FILE_NAME
,EMAIL								= W1.EMAIL

--,STD_TENANT_START_DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W1.CAL_DATE
,TENANT_KEY							= W1.TENANT_KEY
,AIR_DAY_TYPE						= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE					= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE					= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W1.INCLUDE_IN_CAS
,READY_FOR_XML						= W1.READY_FOR_XML
,SHOW_ID_EXTS						= W1.SHOW_ID_EXTS
,INVOICE_ID							= W1.INVOICE_ID
,RESOURCE_NAME						= W1.RESOURCE_NAME

,AIRITKDUR							= W1.AIRITKDUR
,AIRIACDUR							= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

FROM            #WSOL_TB_IMPORTS_MONAT_IC_UV_ANT_AIA	W1

INNER JOIN      WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA	    UV   ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
															AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
															AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY
															AND UV.FTP_FILE_NAME				   = W1.FTP_FILE_NAME

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )
  AND ( UV.FTP_FILE_NAME				  = W1.FTP_FILE_NAME )

--================================================
--INSERT TMP TABLE FIELDS INTO WSOL_TB_... TABLE:
--================================================
INSERT INTO [WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #WSOL_TB_IMPORTS_MONAT_IC_UV_ANT_AIA   AIA
LEFT JOIN       WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA	   UV   ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
														   AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
														   AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY
														   AND UV.FTP_FILE_NAME				   = AIA.FTP_FILE_NAME

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )
  AND ( UV.FTP_FILE_NAME				  IS NULL AND ISNULL(AIA.FTP_FILE_NAME,'') <> '' )

--====================================================
EARLY_EXIT:
--====================================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_MONAT_IC_UNRECOGNIZED_UNAVAILABLE_CODES]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_MONAT_IC_UNRECOGNIZED_UNAVAILABLE_CODES]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHICH UNAVAILABLE CODE VALUES EXIST IN THE iNContact REPORTS, BUT ARE NOT CURRENTLY RECOGNIZED DURING IMPORT.

--THIS USP IS DATA SOURCE FOR SRS GRID ON "ACTIVITY IMPORTS" STATUS REPORT!!!

--  EXECUTE [dbo].[uspIMPORTS_MONAT_IC_UNRECOGNIZED_UNAVAILABLE_CODES] '11/16/2017','11/26/2017','4','B'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

		--WHEN RAN ON FRI, 01/04/13, THE RESULTS RETURNS:  2012.12.21 - 2013.01.03    --FRI-THU   CORRECT!!!
		--SELECT CONVERT(VARCHAR(10),(DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 14),102) + ' - ' +
		--       CONVERT(VARCHAR(10),(DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 1),102)
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_0_AUDIT


IF OBJECT_ID('TEMPDB..#IMPORTS_MONAT_IC_UNRECOGNIZED_UNAVAILABLE_CODES') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_MONAT_IC_UNRECOGNIZED_UNAVAILABLE_CODES
END
CREATE TABLE #IMPORTS_MONAT_IC_UNRECOGNIZED_UNAVAILABLE_CODES
(FILEDATETIME          VARCHAR(50)
,FTP_FILE_NAME         VARCHAR(100)
,WS_ROW_CREATED_TIME   DATETIME
,UNAVAILABLE_CODE      VARCHAR(500)
,RCD_CNT               INT
)
INSERT INTO #IMPORTS_MONAT_IC_UNRECOGNIZED_UNAVAILABLE_CODES
SELECT
 B.FF_DATE
,REPLACE(B.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME
,B.SEQNO_ADDED_TIME					AS WS_ROW_CREATED_TIME
,B.FF_UNAVAILABLE_CODE				AS UNAVAILABLE_CODE
,COUNT(*)						  --AS RCD_CNT
--SELECT *
FROM            WSOL_TB_IMPORTS_MONAT_IC_INVOICING_0_AUDIT	B
WHERE CAST(B.FF_DATE AS DATETIME) >= @DTM_BEG AND CAST(B.FF_DATE AS DATETIME) <  @DTM_END
  AND ISNULL(B.FF_UNAVAILABLE_CODE,'') NOT IN ( ''
											   ,'ACW - (Wrap Up)'
											   ,'EMAIL ONLY'
											   ,'WSOL - EMAIL ONLY'
											   ,'FLOOR SUPPORT'
											   ,'Special Project ( Appv.)'
											   ,'HeldPartyAbandoned'
											   ,'IT/Sys Issue'
											   ,'Idle'
											   ,'Refused'
											   ,'Outbound (Call)'
											   ,'CallbackPending'
											   ,'InboundPending'
											   ,'OutboundPending'
											   ,'PromisePending'
											   ,'ConsultPending'
											   ,'TransferPending'
											  )
  --AND (ISNULL(B.FF_AGENT_NAME,'') NOT IN ('Joshua Miller','Lynne Rochel','Jessica Sharp','Karen Ritter','Emily Beauchamp'))	-- FILTER OUT WSOL EMPLOYEES
GROUP BY
 B.FF_DATE
,REPLACE(B.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME
,B.SEQNO_ADDED_TIME					--AS WS_ROW_CREATED_TIME
,B.FF_UNAVAILABLE_CODE				--AS UNAVAILABLE_CODE

--==================================
UPDATE #IMPORTS_MONAT_IC_UNRECOGNIZED_UNAVAILABLE_CODES SET
 FILEDATETIME = REPLACE(CONVERT(VARCHAR(10),ISNULL(FILEDATETIME,'1/1/1900'),102),'/',' . ')


--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_MONAT_IC_UNRECOGNIZED_UNAVAILABLE_CODES)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_MONAT_IC_UNRECOGNIZED_UNAVAILABLE_CODES
	SELECT
	 ''				--FILEDATETIME
	,''				--FTP_FILE_NAME
	,dbo.GETDATE()  --WS_ROW_CREATED_TIME
	,''				--UNAVAILABLE_CODE
	,0				--RCD_CNT
END
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''
	
	IF @RCD_CNT = 0 BEGIN
		SET @MSG1 = @MSG1 + 'There are NO UNRECOGNIZED UNAVAILABLE CODE records!'
	END
	ELSE BEGIN
		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
			SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.GETDATE(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		END
		SET @MSG1 = @MSG1 + 'The list below contains UNAVAILABE CODE values for agents that are associated with activity for the report date range, but ' + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + 'these UNAVAILABLE CODES have not been identified as productive or non-productive. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

		SET @MSG1 = @MSG1 + 'UNAVAILABLE CODES that are on this list will not be included as part of agent invoice statistics (for activity dates shown), unless a special request is made and received '
		SET @MSG1 = @MSG1 + 'with plenty of time before the automated invoice process begins.  The analyst will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10)
	END

END

--==================================
--RETURN DATA:
--==================================
SELECT 
*
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_MONAT_IC_UNRECOGNIZED_UNAVAILABLE_CODES

ORDER BY
 FILEDATETIME
,UNAVAILABLE_CODE



--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_MONAT_IMPORT_STATUS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_MONAT_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_MONAT_IMPORT_STATUS] '11/16/2017','11/26/2017','','B'

--========================================
-- SET DATE VARIABLES
--========================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE 
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE 
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--=========================================================================
--CREATE TMP TABLE:
--=========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_MONAT_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_MONAT_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_MONAT_IMPORT_STATUS
(FILEDATETIME			VARCHAR(20)
,FTP_FILE_NAME			VARCHAR(100)
,CST_ROW_CREATED_TIME	DATETIME
,RCD_CNT				INT
,INT_CNT				INT
)

--========================================================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================================================
    INSERT INTO #IMPORTS_MONAT_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'') AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0) AS RCD_CNT
	,ISNULL(UA.INT_CNT,0) AS INT_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		,COUNT(DISTINCT C.HOUR_INTERVAL)						AS INT_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_MONAT_IC_INVOICING		C

		INNER JOIN      DATE_TIME								DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
--		AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )  -- USE IF YOU WANT TO IGNORE WEEKENDS

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME)
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')
		,C.WS_ROW_CREATED_TIME
	) UA

--================================================================================
--CREATE CURSOR TO CHECK FOR MISSING DATES
--================================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	--,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

--FOR 'WEEKEND' CODE/FILTER:!!!
--LEFT JOIN WSOL_TB_IMPORTS_MONAT_INVOICING  C ON   C.STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1)

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	--,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_MONAT_IMPORT_STATUS   I   ON I.FILEDATETIME = DT.FILEDATETIME

--LEFT JOIN       DATE_TIME                    DT2 ON CONVERT(VARCHAR(10),DT2.CAL_DATE,101) = CONVERT(VARCHAR(10),DT.FILEDATETIME,101)
--FOR 'WEEKEND' CODE/FILTER:!!!
--LEFT JOIN       WSOL_TB_IMPORTS_MONAT_INVOICING  C   ON C.STD_TENANT_START_DATE_TIME_KEY = DT2.DATE_TIME_KEY

--WHERE ISNULL(I.FTP_FILE_NAME,'') = ''  -- ISNULL(I.FILEDATETIME,'1.1.1900') = ''

WHERE ISNULL(I.RCD_CNT,0) = 0
--  AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)  -- WORLD VENTURES AGENTS WORKING EMAIL ON WEEKENDS
--  AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--====================================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
--====================================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B'
	BEGIN

		SET @MSG1 = ''

		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1
			BEGIN
				SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
				IF @RCD_CNT > 0
					BEGIN
						SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
						SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

						SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
						SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 9:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
					END
				ELSE
					BEGIN
						SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
					END
			END
		ELSE 
			BEGIN
				SET @MSG1 = 'Imported file(s) from ' 
					+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
				
				IF @RCD_CNT > 0
					BEGIN
						SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
					END
				ELSE
					BEGIN
						SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
					END
			END
	
	END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--WESTERN DENTAL:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM WSOL_TB_IMPORT_ERRORS_FOUND
							   WHERE TENANT_KEY = 160 AND SUB_GROUP_NAME = 'MONAT_INVOICING' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_MONAT_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_MONAT_IMPORT_STATUS_MISSING_DATA]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_MONAT_IMPORT_STATUS_MISSING_DATA]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_MONAT_IMPORT_STATUS_MISSING_DATA] '11/16/2017','11/26/2017','','B'

--==============================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==============================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME

IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE 
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--========================================================================
--CREATE TMP TABLE:
--========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_MONAT_IMPORT_STATUS_MISSING_DATA') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_MONAT_IMPORT_STATUS_MISSING_DATA
END
CREATE TABLE #IMPORTS_MONAT_IMPORT_STATUS_MISSING_DATA
(FILEDATETIME			VARCHAR(20)
,FTP_FILE_NAME			VARCHAR(100)
,CST_ROW_CREATED_TIME	DATETIME
,RCD_CNT				INT
,INT_CNT				INT
)

--========================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================
    INSERT INTO #IMPORTS_MONAT_IMPORT_STATUS_MISSING_DATA
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													--AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												--AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')															--AS RCD_CNT
	,ISNULL(UA.INT_CNT,'')															--AS INT_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		,COUNT(DISTINCT C.HOUR_INTERVAL)						AS INT_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_MONAT_IC_INVOICING		C

		INNER JOIN      DATE_TIME								DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT
,INT_CNT
,'White' AS BG_COLOR

FROM #IMPORTS_MONAT_IMPORT_STATUS_MISSING_DATA

ORDER BY
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT
,INT_CNT


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_MONAT_IMPORT_STATUS_WRAP_EQUALS_LOGIN]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_MONAT_IMPORT_STATUS_WRAP_EQUALS_LOGIN]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_MONAT_IMPORT_STATUS_WRAP_EQUALS_LOGIN] '12/01/2017','12/06/2017','','B'

--==============================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==============================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME

IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE 
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END --+ 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--========================================================================
--CREATE TMP TABLE:
--========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_MONAT_IMPORT_STATUS_WRAP_EQUALS_LOGIN') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_MONAT_IMPORT_STATUS_WRAP_EQUALS_LOGIN
END
CREATE TABLE #IMPORTS_MONAT_IMPORT_STATUS_WRAP_EQUALS_LOGIN
(FILEDATETIME			VARCHAR(20)
,FTP_FILE_NAME			VARCHAR(100)
,CST_ROW_CREATED_TIME	DATETIME
,HOUR_INTERVAL			VARCHAR(10)
,RESOURCE_NAME			VARCHAR(100)
,LOGGED_IN_TIME			DECIMAL(10,2)
,WRAP_TIME				DECIMAL(10,2)
)

--========================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================
    INSERT INTO #IMPORTS_MONAT_IMPORT_STATUS_WRAP_EQUALS_LOGIN
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													--AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												--AS CST_ROW_CREATED_TIME
	,ISNULL(UA.HOUR_INTERVAL,'')													--AS HOUR_INTERVAL
	,ISNULL(UA.RESOURCE_NAME,'')													--AS RESOURCE_NAME
	,ISNULL(UA.LOGGED_IN_TIME,0.00) / 60.00											--AS LOGGED_IN_TIME
	,ISNULL(UA.WRAP_TIME,0.00) / 60.00												--AS WRAP_TIME
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,C.HOUR_INTERVAL
		,C.RESOURCE_NAME
		,SUM(ISNULL(C.LOGIN_TIME,0.00))							AS LOGGED_IN_TIME
		,SUM(ISNULL(C.ACW_TIME,0.00))							AS WRAP_TIME
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_MONAT_IC_INVOICING_BAD	C

		INNER JOIN      DATE_TIME								DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_END
		  AND C.BAD_IMPORTS_NO = 'ACW'

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,C.HOUR_INTERVAL
		,C.RESOURCE_NAME
	) UA


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,HOUR_INTERVAL
,RESOURCE_NAME
,LOGGED_IN_TIME
,WRAP_TIME
,'White' AS BG_COLOR

FROM #IMPORTS_MONAT_IMPORT_STATUS_WRAP_EQUALS_LOGIN

ORDER BY
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RESOURCE_NAME
,HOUR_INTERVAL


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_MONAT_INVOICING_IMPORT]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_MONAT_INVOICING_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_MONAT_INVOICING_IMPORT]

--  SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1

--	Data is received in Eastern Time Zone.  Data will be converted to Central Time Zone.
--  Durations are in H:MM:S format and will be converted and stored in seconds.

--=================================================================================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY = 160  -- Monat Global Corp. CLIENT_ID in WSOL Database
--=================================================================================================
DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND
WHERE TENANT_KEY		= @TENANT_KEY
  AND SUB_GROUP_NAME	= 'MONAT_INVOICING'
  --  SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 160
--=================================================================================================

--===========================================================================================================
--  USING @WS_ROW_CREATED_TIME FOR ALL INSERTS WILL ALLOW TO DELETE SPECIFIC INSERT PROCESSES/FILES.
--  IN CASE OF EMERGENCY, BREAK GLASS.
--===========================================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = DBO.GETDATE()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===========================================================================================================

--	SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1
--=================================================================================================
--	CONVERT DATETIME FROM EASTERN TIME TO CENTRAL TIME
--=================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_1 SET
 [DATETIME] = DATEADD(hh,-1, CAST((FF_DATE + ' ' + FF_TIME) AS DATETIME))

--===================================================================================
--	POPULATE ADDITIONAL FIELDS IN WORK (_1) TABLE THAT WEREN'T IN IMPORTED FILE:
--===================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_1 SET
 HOUR_INTERVAL				=	DATEPART(HH, [DATETIME])
,AGENT_NAME					=	ISNULL(FF_AGENT_NAME,'')
,ANSWERED_SESSIONS			=	ISNULL(CAST(FF_ANSWERED_SESSIONS	AS INT),0)
,RONA_CNT					=	ISNULL(CAST(FF_RONAS				AS INT),0)
,DID_CNT					=	ISNULL(CAST(FF_DIDS					AS INT),0)
,DOD_CNT					=	ISNULL(CAST(FF_DODS					AS INT),0)
,STARTED_IMS				=	ISNULL(CAST(FF_STARTED_IMS			AS INT),0)
,STARTED_CALLS				=	ISNULL(CAST(FF_STARTED_CALLS		AS INT),0)
,ESCALATIONS				=	ISNULL(CAST(FF_ESCALATIONS			AS INT),0)
,CONSULTS					=	ISNULL(CAST(FF_CONSULTS				AS INT),0)
,TRANSFERS					=	ISNULL(CAST(FF_TRANSFERS			AS INT),0)
,SUPERVISOR_JOINS			=	ISNULL(CAST(FF_SUPERVISOR_JOINS		AS INT),0)
,AVAILABLE_TIME				=	(CAST(LEFT(FF_AVAILABLE_TIME			,2) AS DECIMAL(10,2)) * 3600) + (CAST(SUBSTRING(FF_AVAILABLE_TIME			,4,2) AS DECIMAL(10,2)) * 60) + CAST(RIGHT(FF_AVAILABLE_TIME			,2) AS DECIMAL(10,2))
,RING_TIME					=	(CAST(LEFT(FF_RINGING_TIME1				,2) AS DECIMAL(10,2)) * 3600) + (CAST(SUBSTRING(FF_RINGING_TIME1			,4,2) AS DECIMAL(10,2)) * 60) + CAST(RIGHT(FF_RINGING_TIME1				,2) AS DECIMAL(10,2))
,CONNECT_IM_SESSION_TIME	=	(CAST(LEFT(FF_CONNECT_IM_SESSION_TIME	,2) AS DECIMAL(10,2)) * 3600) + (CAST(SUBSTRING(FF_CONNECT_IM_SESSION_TIME	,4,2) AS DECIMAL(10,2)) * 60) + CAST(RIGHT(FF_CONNECT_IM_SESSION_TIME	,2) AS DECIMAL(10,2))
,CONNECT_PHONE_CALL_TIME	=	(CAST(LEFT(FF_CONNECT_PHONE_CALL_TIME	,2) AS DECIMAL(10,2)) * 3600) + (CAST(SUBSTRING(FF_CONNECT_PHONE_CALL_TIME	,4,2) AS DECIMAL(10,2)) * 60) + CAST(RIGHT(FF_CONNECT_PHONE_CALL_TIME	,2) AS DECIMAL(10,2))
,CONNECT_DID_CALL_TIME		=	(CAST(LEFT(FF_CONNECT_DID_CALL_TIME		,2) AS DECIMAL(10,2)) * 3600) + (CAST(SUBSTRING(FF_CONNECT_DID_CALL_TIME	,4,2) AS DECIMAL(10,2)) * 60) + CAST(RIGHT(FF_CONNECT_DID_CALL_TIME		,2) AS DECIMAL(10,2))
,CONNECT_DOD_CALL_TIME		=	(CAST(LEFT(FF_CONNECT_DOD_CALL_TIME		,2) AS DECIMAL(10,2)) * 3600) + (CAST(SUBSTRING(FF_CONNECT_DOD_CALL_TIME	,4,2) AS DECIMAL(10,2)) * 60) + CAST(RIGHT(FF_CONNECT_DOD_CALL_TIME		,2) AS DECIMAL(10,2))
,NON_CONNECT_CALL_TIME		=	(CAST(LEFT(FF_NON_CONNECT_CALL_TIME		,2) AS DECIMAL(10,2)) * 3600) + (CAST(SUBSTRING(FF_NON_CONNECT_CALL_TIME	,4,2) AS DECIMAL(10,2)) * 60) + CAST(RIGHT(FF_NON_CONNECT_CALL_TIME		,2) AS DECIMAL(10,2))
,ACW_TIME					=	(CAST(LEFT(FF_AFTERCALL_TIME			,2) AS DECIMAL(10,2)) * 3600) + (CAST(SUBSTRING(FF_AFTERCALL_TIME			,4,2) AS DECIMAL(10,2)) * 60) + CAST(RIGHT(FF_AFTERCALL_TIME			,2) AS DECIMAL(10,2))
,RONA_TIME					=	(CAST(LEFT(FF_RONA_TIME					,2) AS DECIMAL(10,2)) * 3600) + (CAST(SUBSTRING(FF_RONA_TIME				,4,2) AS DECIMAL(10,2)) * 60) + CAST(RIGHT(FF_RONA_TIME					,2) AS DECIMAL(10,2))
,UNAVAILABLE_TIME			=	(CAST(LEFT(FF_UNAVAILABLE_TIME			,2) AS DECIMAL(10,2)) * 3600) + (CAST(SUBSTRING(FF_UNAVAILABLE_TIME			,4,2) AS DECIMAL(10,2)) * 60) + CAST(RIGHT(FF_UNAVAILABLE_TIME			,2) AS DECIMAL(10,2))
,OFF_WORK_TIME				=	(CAST(LEFT(FF_OFF_WORK_TIME				,2) AS DECIMAL(10,2)) * 3600) + (CAST(SUBSTRING(FF_OFF_WORK_TIME			,4,2) AS DECIMAL(10,2)) * 60) + CAST(RIGHT(FF_OFF_WORK_TIME				,2) AS DECIMAL(10,2))
,LOGGED_OUT_TIME			=	(CAST(LEFT(FF_LOGGED_OUT_TIME			,2) AS DECIMAL(10,2)) * 3600) + (CAST(SUBSTRING(FF_LOGGED_OUT_TIME			,4,2) AS DECIMAL(10,2)) * 60) + CAST(RIGHT(FF_LOGGED_OUT_TIME			,2) AS DECIMAL(10,2))
,ON_PHONE_TIME				=	(CAST(LEFT(FF_ON_PHONE_TIME				,2) AS DECIMAL(10,2)) * 3600) + (CAST(SUBSTRING(FF_ON_PHONE_TIME			,4,2) AS DECIMAL(10,2)) * 60) + CAST(RIGHT(FF_ON_PHONE_TIME				,2) AS DECIMAL(10,2))
,Q_ON_PHONE_TIME			=	(CAST(LEFT(FF_Q_ON_PHONE_TIME			,2) AS DECIMAL(10,2)) * 3600) + (CAST(SUBSTRING(FF_Q_ON_PHONE_TIME			,4,2) AS DECIMAL(10,2)) * 60) + CAST(RIGHT(FF_Q_ON_PHONE_TIME			,2) AS DECIMAL(10,2))
,TALK_TIME					=	(CAST(LEFT(FF_TALK_TIME					,2) AS DECIMAL(10,2)) * 3600) + (CAST(SUBSTRING(FF_TALK_TIME				,4,2) AS DECIMAL(10,2)) * 60) + CAST(RIGHT(FF_TALK_TIME					,2) AS DECIMAL(10,2))
,Q_TALK_TIME				=	(CAST(LEFT(FF_Q_TALK_TIME				,2) AS DECIMAL(10,2)) * 3600) + (CAST(SUBSTRING(FF_Q_TALK_TIME				,4,2) AS DECIMAL(10,2)) * 60) + CAST(RIGHT(FF_Q_TALK_TIME				,2) AS DECIMAL(10,2))
,HANDLE_TIME				=	(CAST(LEFT(FF_HANDLE_TIME				,2) AS DECIMAL(10,2)) * 3600) + (CAST(SUBSTRING(FF_HANDLE_TIME				,4,2) AS DECIMAL(10,2)) * 60) + CAST(RIGHT(FF_HANDLE_TIME				,2) AS DECIMAL(10,2))
,Q_HANDLE_TIME				=	(CAST(LEFT(FF_Q_HANDLE_TIME				,2) AS DECIMAL(10,2)) * 3600) + (CAST(SUBSTRING(FF_Q_HANDLE_TIME			,4,2) AS DECIMAL(10,2)) * 60) + CAST(RIGHT(FF_Q_HANDLE_TIME				,2) AS DECIMAL(10,2))
,TENANT_KEY					=	@TENANT_KEY

--===================================================================================================
-- UPDATE DATETIME KEY
--===================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_1 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM		WSOL_TB_IMPORTS_MONAT_INVOICING_1	I
INNER JOIN	DATE_TIME						DT	ON DT.CAL_DATE = I.[DATETIME]

--	SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1
--===============================================
-- GENERATE ANY ENGINEERED VALUES																	<<<<----- MAY NEED TO UPDATE
--===============================================
--UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_1 SET

--	SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_BAD
--===============================================
--REMOVE LOGGED OUT RECORDS:
--===============================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT_NAME
,FF_DATE
,FF_TIME
,FF_BUSINESS_UNIT
,FF_TEAM
,FF_GROUPS
,FF_ANSWERED_SESSIONS
,FF_RONAS
,FF_DIDS
,FF_DODS
,FF_STARTED_IMS
,FF_STARTED_CALLS
,FF_ESCALATIONS
,FF_CONSULTS
,FF_TRANSFERS
,FF_SUPERVISOR_JOINS
,FF_AVAILABLE_TIME
,FF_RINGING_TIME1
,FF_CONNECT_IM_SESSION_TIME
,FF_CONNECT_PHONE_CALL_TIME
,FF_CONNECT_DID_CALL_TIME
,FF_CONNECT_DOD_CALL_TIME
,FF_NON_CONNECT_CALL_TIME
,FF_AFTERCALL_TIME
,FF_RONA_TIME
,FF_UNAVAILABLE_TIME
,FF_OFF_WORK_TIME
,FF_LOGGED_OUT_TIME
,FF_ON_PHONE_TIME
,FF_Q_ON_PHONE_TIME
,FF_TALK_TIME
,FF_Q_TALK_TIME
,FF_HANDLE_TIME
,FF_Q_HANDLE_TIME
,FF_OCC_PERCENT
,FF_Q_OCC_PERCENT
,FF_TALK_PERCENT
,FF_Q_TALK_PERCENT
,FF_ACW_PERCENT
,FF_IDLE_PERCENT
,FF_AVG_TALK_TIME_PERCENT
,FF_AVG_Q_TALK_TIME_PERCENT
,FF_AVG_ACW_TIME_PERCENT
,FF_AVG_Q_ACW_TIME_PERCENT
,FF_AVG_HANDLE_TIME_PERCENT
,FF_AVG_Q_HANDLE_TIME_PERCENT
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,ANSWERED_SESSIONS
,RONA_CNT
,DID_CNT
,DOD_CNT
,STARTED_IMS
,STARTED_CALLS
,ESCALATIONS
,CONSULTS
,TRANSFERS
,SUPERVISOR_JOINS
,AVAILABLE_TIME
,RING_TIME
,CONNECT_IM_SESSION_TIME
,CONNECT_PHONE_CALL_TIME
,CONNECT_DID_CALL_TIME
,CONNECT_DOD_CALL_TIME
,NON_CONNECT_CALL_TIME
,ACW_TIME
,RONA_TIME
,UNAVAILABLE_TIME
,OFF_WORK_TIME
,LOGGED_OUT_TIME
,ON_PHONE_TIME
,Q_ON_PHONE_TIME
,TALK_TIME
,Q_TALK_TIME
,HANDLE_TIME
,Q_HANDLE_TIME
,CPROD
,MING
,AUT2
,[EMAIL]
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,CATS_ID
,PAY_GROUP
)
SELECT
 'LOS'					--BAD_IMPORTS_CODE		--'Logged Out State'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME	--WS_ROW_CREATED_TIME
,W1.FF_AGENT_NAME
,W1.FF_DATE
,W1.FF_TIME
,W1.FF_BUSINESS_UNIT
,W1.FF_TEAM
,W1.FF_GROUPS
,W1.FF_ANSWERED_SESSIONS
,W1.FF_RONAS
,W1.FF_DIDS
,W1.FF_DODS
,W1.FF_STARTED_IMS
,W1.FF_STARTED_CALLS
,W1.FF_ESCALATIONS
,W1.FF_CONSULTS
,W1.FF_TRANSFERS
,W1.FF_SUPERVISOR_JOINS
,W1.FF_AVAILABLE_TIME
,W1.FF_RINGING_TIME1
,W1.FF_CONNECT_IM_SESSION_TIME
,W1.FF_CONNECT_PHONE_CALL_TIME
,W1.FF_CONNECT_DID_CALL_TIME
,W1.FF_CONNECT_DOD_CALL_TIME
,W1.FF_NON_CONNECT_CALL_TIME
,W1.FF_AFTERCALL_TIME
,W1.FF_RONA_TIME
,W1.FF_UNAVAILABLE_TIME
,W1.FF_OFF_WORK_TIME
,W1.FF_LOGGED_OUT_TIME
,W1.FF_ON_PHONE_TIME
,W1.FF_Q_ON_PHONE_TIME
,W1.FF_TALK_TIME
,W1.FF_Q_TALK_TIME
,W1.FF_HANDLE_TIME
,W1.FF_Q_HANDLE_TIME
,W1.FF_OCC_PERCENT
,W1.FF_Q_OCC_PERCENT
,W1.FF_TALK_PERCENT
,W1.FF_Q_TALK_PERCENT
,W1.FF_ACW_PERCENT
,W1.FF_IDLE_PERCENT
,W1.FF_AVG_TALK_TIME_PERCENT
,W1.FF_AVG_Q_TALK_TIME_PERCENT
,W1.FF_AVG_ACW_TIME_PERCENT
,W1.FF_AVG_Q_ACW_TIME_PERCENT
,W1.FF_AVG_HANDLE_TIME_PERCENT
,W1.FF_AVG_Q_HANDLE_TIME_PERCENT
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.ANSWERED_SESSIONS
,W1.RONA_CNT
,W1.DID_CNT
,W1.DOD_CNT
,W1.STARTED_IMS
,W1.STARTED_CALLS
,W1.ESCALATIONS
,W1.CONSULTS
,W1.TRANSFERS
,W1.SUPERVISOR_JOINS
,W1.AVAILABLE_TIME
,W1.RING_TIME
,W1.CONNECT_IM_SESSION_TIME
,W1.CONNECT_PHONE_CALL_TIME
,W1.CONNECT_DID_CALL_TIME
,W1.CONNECT_DOD_CALL_TIME
,W1.NON_CONNECT_CALL_TIME
,W1.ACW_TIME
,W1.RONA_TIME
,W1.UNAVAILABLE_TIME
,W1.OFF_WORK_TIME
,W1.LOGGED_OUT_TIME
,W1.ON_PHONE_TIME
,W1.Q_ON_PHONE_TIME
,W1.TALK_TIME
,W1.Q_TALK_TIME
,W1.HANDLE_TIME
,W1.Q_HANDLE_TIME
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.[EMAIL]
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.CATS_ID
,W1.PAY_GROUP
FROM           WSOL_TB_IMPORTS_MONAT_INVOICING_1    W1
WHERE (
	  LOGGED_OUT_TIME > 0.00
  AND AVAILABLE_TIME = 0.00
  AND RING_TIME = 0.00
  AND CONNECT_IM_SESSION_TIME = 0.00
  AND CONNECT_PHONE_CALL_TIME = 0.00
  AND CONNECT_DID_CALL_TIME = 0.00
  AND CONNECT_DOD_CALL_TIME = 0.00
  AND NON_CONNECT_CALL_TIME = 0.00
  AND ACW_TIME = 0.00
  AND RONA_TIME = 0.00
  AND UNAVAILABLE_TIME = 0.00
  AND OFF_WORK_TIME = 0.00
  AND ON_PHONE_TIME = 0.00
  AND Q_ON_PHONE_TIME = 0.00
  AND TALK_TIME = 0.00
  AND Q_TALK_TIME = 0.00
  AND HANDLE_TIME = 0.00
  AND Q_HANDLE_TIME = 0.00
  )

--======================================================================
--DELETE LOGGED OUT RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1
WHERE (
	  LOGGED_OUT_TIME > 0.00
  AND AVAILABLE_TIME = 0.00
  AND RING_TIME = 0.00
  AND CONNECT_IM_SESSION_TIME = 0.00
  AND CONNECT_PHONE_CALL_TIME = 0.00
  AND CONNECT_DID_CALL_TIME = 0.00
  AND CONNECT_DOD_CALL_TIME = 0.00
  AND NON_CONNECT_CALL_TIME = 0.00
  AND ACW_TIME = 0.00
  AND RONA_TIME = 0.00
  AND UNAVAILABLE_TIME = 0.00
  AND OFF_WORK_TIME = 0.00
  AND ON_PHONE_TIME = 0.00
  AND Q_ON_PHONE_TIME = 0.00
  AND TALK_TIME = 0.00
  AND Q_TALK_TIME = 0.00
  AND HANDLE_TIME = 0.00
  AND Q_HANDLE_TIME = 0.00
  )
--======================================================================

--===============================================
--REMOVE ALL ZERO DURATION RECORDS:
--===============================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT_NAME
,FF_DATE
,FF_TIME
,FF_BUSINESS_UNIT
,FF_TEAM
,FF_GROUPS
,FF_ANSWERED_SESSIONS
,FF_RONAS
,FF_DIDS
,FF_DODS
,FF_STARTED_IMS
,FF_STARTED_CALLS
,FF_ESCALATIONS
,FF_CONSULTS
,FF_TRANSFERS
,FF_SUPERVISOR_JOINS
,FF_AVAILABLE_TIME
,FF_RINGING_TIME1
,FF_CONNECT_IM_SESSION_TIME
,FF_CONNECT_PHONE_CALL_TIME
,FF_CONNECT_DID_CALL_TIME
,FF_CONNECT_DOD_CALL_TIME
,FF_NON_CONNECT_CALL_TIME
,FF_AFTERCALL_TIME
,FF_RONA_TIME
,FF_UNAVAILABLE_TIME
,FF_OFF_WORK_TIME
,FF_LOGGED_OUT_TIME
,FF_ON_PHONE_TIME
,FF_Q_ON_PHONE_TIME
,FF_TALK_TIME
,FF_Q_TALK_TIME
,FF_HANDLE_TIME
,FF_Q_HANDLE_TIME
,FF_OCC_PERCENT
,FF_Q_OCC_PERCENT
,FF_TALK_PERCENT
,FF_Q_TALK_PERCENT
,FF_ACW_PERCENT
,FF_IDLE_PERCENT
,FF_AVG_TALK_TIME_PERCENT
,FF_AVG_Q_TALK_TIME_PERCENT
,FF_AVG_ACW_TIME_PERCENT
,FF_AVG_Q_ACW_TIME_PERCENT
,FF_AVG_HANDLE_TIME_PERCENT
,FF_AVG_Q_HANDLE_TIME_PERCENT
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,ANSWERED_SESSIONS
,RONA_CNT
,DID_CNT
,DOD_CNT
,STARTED_IMS
,STARTED_CALLS
,ESCALATIONS
,CONSULTS
,TRANSFERS
,SUPERVISOR_JOINS
,AVAILABLE_TIME
,RING_TIME
,CONNECT_IM_SESSION_TIME
,CONNECT_PHONE_CALL_TIME
,CONNECT_DID_CALL_TIME
,CONNECT_DOD_CALL_TIME
,NON_CONNECT_CALL_TIME
,ACW_TIME
,RONA_TIME
,UNAVAILABLE_TIME
,OFF_WORK_TIME
,LOGGED_OUT_TIME
,ON_PHONE_TIME
,Q_ON_PHONE_TIME
,TALK_TIME
,Q_TALK_TIME
,HANDLE_TIME
,Q_HANDLE_TIME
,CPROD
,MING
,AUT2
,[EMAIL]
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,CATS_ID
,PAY_GROUP
)
SELECT
 'AZR'					--BAD_IMPORTS_CODE		--'All Zero Records'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME	--WS_ROW_CREATED_TIME
,W1.FF_AGENT_NAME
,W1.FF_DATE
,W1.FF_TIME
,W1.FF_BUSINESS_UNIT
,W1.FF_TEAM
,W1.FF_GROUPS
,W1.FF_ANSWERED_SESSIONS
,W1.FF_RONAS
,W1.FF_DIDS
,W1.FF_DODS
,W1.FF_STARTED_IMS
,W1.FF_STARTED_CALLS
,W1.FF_ESCALATIONS
,W1.FF_CONSULTS
,W1.FF_TRANSFERS
,W1.FF_SUPERVISOR_JOINS
,W1.FF_AVAILABLE_TIME
,W1.FF_RINGING_TIME1
,W1.FF_CONNECT_IM_SESSION_TIME
,W1.FF_CONNECT_PHONE_CALL_TIME
,W1.FF_CONNECT_DID_CALL_TIME
,W1.FF_CONNECT_DOD_CALL_TIME
,W1.FF_NON_CONNECT_CALL_TIME
,W1.FF_AFTERCALL_TIME
,W1.FF_RONA_TIME
,W1.FF_UNAVAILABLE_TIME
,W1.FF_OFF_WORK_TIME
,W1.FF_LOGGED_OUT_TIME
,W1.FF_ON_PHONE_TIME
,W1.FF_Q_ON_PHONE_TIME
,W1.FF_TALK_TIME
,W1.FF_Q_TALK_TIME
,W1.FF_HANDLE_TIME
,W1.FF_Q_HANDLE_TIME
,W1.FF_OCC_PERCENT
,W1.FF_Q_OCC_PERCENT
,W1.FF_TALK_PERCENT
,W1.FF_Q_TALK_PERCENT
,W1.FF_ACW_PERCENT
,W1.FF_IDLE_PERCENT
,W1.FF_AVG_TALK_TIME_PERCENT
,W1.FF_AVG_Q_TALK_TIME_PERCENT
,W1.FF_AVG_ACW_TIME_PERCENT
,W1.FF_AVG_Q_ACW_TIME_PERCENT
,W1.FF_AVG_HANDLE_TIME_PERCENT
,W1.FF_AVG_Q_HANDLE_TIME_PERCENT
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.ANSWERED_SESSIONS
,W1.RONA_CNT
,W1.DID_CNT
,W1.DOD_CNT
,W1.STARTED_IMS
,W1.STARTED_CALLS
,W1.ESCALATIONS
,W1.CONSULTS
,W1.TRANSFERS
,W1.SUPERVISOR_JOINS
,W1.AVAILABLE_TIME
,W1.RING_TIME
,W1.CONNECT_IM_SESSION_TIME
,W1.CONNECT_PHONE_CALL_TIME
,W1.CONNECT_DID_CALL_TIME
,W1.CONNECT_DOD_CALL_TIME
,W1.NON_CONNECT_CALL_TIME
,W1.ACW_TIME
,W1.RONA_TIME
,W1.UNAVAILABLE_TIME
,W1.OFF_WORK_TIME
,W1.LOGGED_OUT_TIME
,W1.ON_PHONE_TIME
,W1.Q_ON_PHONE_TIME
,W1.TALK_TIME
,W1.Q_TALK_TIME
,W1.HANDLE_TIME
,W1.Q_HANDLE_TIME
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.[EMAIL]
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.CATS_ID
,W1.PAY_GROUP
-- SELECT *
FROM           WSOL_TB_IMPORTS_MONAT_INVOICING_1    W1
WHERE (
	   AVAILABLE_TIME = 0.00
  AND  RING_TIME = 0.00
  AND  CONNECT_IM_SESSION_TIME = 0.00
  AND  CONNECT_PHONE_CALL_TIME = 0.00
  AND  CONNECT_DID_CALL_TIME = 0.00
  AND  CONNECT_DOD_CALL_TIME = 0.00
  AND  NON_CONNECT_CALL_TIME = 0.00
  AND  ACW_TIME = 0.00
  AND  RONA_TIME = 0.00
  AND  UNAVAILABLE_TIME = 0.00
  AND  OFF_WORK_TIME = 0.00
  AND  LOGGED_OUT_TIME = 0.00
  AND  ON_PHONE_TIME = 0.00
  AND  Q_ON_PHONE_TIME = 0.00
  AND  TALK_TIME = 0.00
  AND  Q_TALK_TIME = 0.00
  AND  HANDLE_TIME = 0.00
  AND  Q_HANDLE_TIME = 0.00
  )

--======================================================================
--DELETE ALL ZERO DURATION RECORDS:
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1
WHERE (
	   AVAILABLE_TIME = 0.00
  AND  RING_TIME = 0.00
  AND  CONNECT_IM_SESSION_TIME = 0.00
  AND  CONNECT_PHONE_CALL_TIME = 0.00
  AND  CONNECT_DID_CALL_TIME = 0.00
  AND  CONNECT_DOD_CALL_TIME = 0.00
  AND  NON_CONNECT_CALL_TIME = 0.00
  AND  ACW_TIME = 0.00
  AND  RONA_TIME = 0.00
  AND  UNAVAILABLE_TIME = 0.00
  AND  OFF_WORK_TIME = 0.00
  AND  LOGGED_OUT_TIME = 0.00
  AND  ON_PHONE_TIME = 0.00
  AND  Q_ON_PHONE_TIME = 0.00
  AND  TALK_TIME = 0.00
  AND  Q_TALK_TIME = 0.00
  AND  HANDLE_TIME = 0.00
  AND  Q_HANDLE_TIME = 0.00
  )
--======================================================================

--===============================================
--HANDLE INVALID DATE/TIME RECORDS:
--===============================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT_NAME
,FF_DATE
,FF_TIME
,FF_BUSINESS_UNIT
,FF_TEAM
,FF_GROUPS
,FF_ANSWERED_SESSIONS
,FF_RONAS
,FF_DIDS
,FF_DODS
,FF_STARTED_IMS
,FF_STARTED_CALLS
,FF_ESCALATIONS
,FF_CONSULTS
,FF_TRANSFERS
,FF_SUPERVISOR_JOINS
,FF_AVAILABLE_TIME
,FF_RINGING_TIME1
,FF_CONNECT_IM_SESSION_TIME
,FF_CONNECT_PHONE_CALL_TIME
,FF_CONNECT_DID_CALL_TIME
,FF_CONNECT_DOD_CALL_TIME
,FF_NON_CONNECT_CALL_TIME
,FF_AFTERCALL_TIME
,FF_RONA_TIME
,FF_UNAVAILABLE_TIME
,FF_OFF_WORK_TIME
,FF_LOGGED_OUT_TIME
,FF_ON_PHONE_TIME
,FF_Q_ON_PHONE_TIME
,FF_TALK_TIME
,FF_Q_TALK_TIME
,FF_HANDLE_TIME
,FF_Q_HANDLE_TIME
,FF_OCC_PERCENT
,FF_Q_OCC_PERCENT
,FF_TALK_PERCENT
,FF_Q_TALK_PERCENT
,FF_ACW_PERCENT
,FF_IDLE_PERCENT
,FF_AVG_TALK_TIME_PERCENT
,FF_AVG_Q_TALK_TIME_PERCENT
,FF_AVG_ACW_TIME_PERCENT
,FF_AVG_Q_ACW_TIME_PERCENT
,FF_AVG_HANDLE_TIME_PERCENT
,FF_AVG_Q_HANDLE_TIME_PERCENT
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,ANSWERED_SESSIONS
,RONA_CNT
,DID_CNT
,DOD_CNT
,STARTED_IMS
,STARTED_CALLS
,ESCALATIONS
,CONSULTS
,TRANSFERS
,SUPERVISOR_JOINS
,AVAILABLE_TIME
,RING_TIME
,CONNECT_IM_SESSION_TIME
,CONNECT_PHONE_CALL_TIME
,CONNECT_DID_CALL_TIME
,CONNECT_DOD_CALL_TIME
,NON_CONNECT_CALL_TIME
,ACW_TIME
,RONA_TIME
,UNAVAILABLE_TIME
,OFF_WORK_TIME
,LOGGED_OUT_TIME
,ON_PHONE_TIME
,Q_ON_PHONE_TIME
,TALK_TIME
,Q_TALK_TIME
,HANDLE_TIME
,Q_HANDLE_TIME
,CPROD
,MING
,AUT2
,[EMAIL]
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,CATS_ID
,PAY_GROUP
)
SELECT
 'DTM'					--BAD_IMPORTS_CODE		--'Invalid Datetime'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME	--WS_ROW_CREATED_TIME
,W1.FF_AGENT_NAME
,W1.FF_DATE
,W1.FF_TIME
,W1.FF_BUSINESS_UNIT
,W1.FF_TEAM
,W1.FF_GROUPS
,W1.FF_ANSWERED_SESSIONS
,W1.FF_RONAS
,W1.FF_DIDS
,W1.FF_DODS
,W1.FF_STARTED_IMS
,W1.FF_STARTED_CALLS
,W1.FF_ESCALATIONS
,W1.FF_CONSULTS
,W1.FF_TRANSFERS
,W1.FF_SUPERVISOR_JOINS
,W1.FF_AVAILABLE_TIME
,W1.FF_RINGING_TIME1
,W1.FF_CONNECT_IM_SESSION_TIME
,W1.FF_CONNECT_PHONE_CALL_TIME
,W1.FF_CONNECT_DID_CALL_TIME
,W1.FF_CONNECT_DOD_CALL_TIME
,W1.FF_NON_CONNECT_CALL_TIME
,W1.FF_AFTERCALL_TIME
,W1.FF_RONA_TIME
,W1.FF_UNAVAILABLE_TIME
,W1.FF_OFF_WORK_TIME
,W1.FF_LOGGED_OUT_TIME
,W1.FF_ON_PHONE_TIME
,W1.FF_Q_ON_PHONE_TIME
,W1.FF_TALK_TIME
,W1.FF_Q_TALK_TIME
,W1.FF_HANDLE_TIME
,W1.FF_Q_HANDLE_TIME
,W1.FF_OCC_PERCENT
,W1.FF_Q_OCC_PERCENT
,W1.FF_TALK_PERCENT
,W1.FF_Q_TALK_PERCENT
,W1.FF_ACW_PERCENT
,W1.FF_IDLE_PERCENT
,W1.FF_AVG_TALK_TIME_PERCENT
,W1.FF_AVG_Q_TALK_TIME_PERCENT
,W1.FF_AVG_ACW_TIME_PERCENT
,W1.FF_AVG_Q_ACW_TIME_PERCENT
,W1.FF_AVG_HANDLE_TIME_PERCENT
,W1.FF_AVG_Q_HANDLE_TIME_PERCENT
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.ANSWERED_SESSIONS
,W1.RONA_CNT
,W1.DID_CNT
,W1.DOD_CNT
,W1.STARTED_IMS
,W1.STARTED_CALLS
,W1.ESCALATIONS
,W1.CONSULTS
,W1.TRANSFERS
,W1.SUPERVISOR_JOINS
,W1.AVAILABLE_TIME
,W1.RING_TIME
,W1.CONNECT_IM_SESSION_TIME
,W1.CONNECT_PHONE_CALL_TIME
,W1.CONNECT_DID_CALL_TIME
,W1.CONNECT_DOD_CALL_TIME
,W1.NON_CONNECT_CALL_TIME
,W1.ACW_TIME
,W1.RONA_TIME
,W1.UNAVAILABLE_TIME
,W1.OFF_WORK_TIME
,W1.LOGGED_OUT_TIME
,W1.ON_PHONE_TIME
,W1.Q_ON_PHONE_TIME
,W1.TALK_TIME
,W1.Q_TALK_TIME
,W1.HANDLE_TIME
,W1.Q_HANDLE_TIME
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.[EMAIL]
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.CATS_ID
,W1.PAY_GROUP
FROM           WSOL_TB_IMPORTS_MONAT_INVOICING_1    W1
WHERE  ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) = 0

--======================================================================
--DELETE INVALID DATE/TIME RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================

--======================================================================
--REMOVE RECORDS OUTSIDE OF WORK HOURS																<<<<----- MAY NEED TO UPDATE
--======================================================================

--======================================================================
--DELETE RECORDS OUTSIDE OF WORK HOURS																<<<<----- MAY NEED TO UPDATE
--======================================================================

--===========================================================================================================
--HANDLE DUPLICATES:
--===========================================================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT_NAME
,FF_DATE
,FF_TIME
,FF_BUSINESS_UNIT
,FF_TEAM
,FF_GROUPS
,FF_ANSWERED_SESSIONS
,FF_RONAS
,FF_DIDS
,FF_DODS
,FF_STARTED_IMS
,FF_STARTED_CALLS
,FF_ESCALATIONS
,FF_CONSULTS
,FF_TRANSFERS
,FF_SUPERVISOR_JOINS
,FF_AVAILABLE_TIME
,FF_RINGING_TIME1
,FF_CONNECT_IM_SESSION_TIME
,FF_CONNECT_PHONE_CALL_TIME
,FF_CONNECT_DID_CALL_TIME
,FF_CONNECT_DOD_CALL_TIME
,FF_NON_CONNECT_CALL_TIME
,FF_AFTERCALL_TIME
,FF_RONA_TIME
,FF_UNAVAILABLE_TIME
,FF_OFF_WORK_TIME
,FF_LOGGED_OUT_TIME
,FF_ON_PHONE_TIME
,FF_Q_ON_PHONE_TIME
,FF_TALK_TIME
,FF_Q_TALK_TIME
,FF_HANDLE_TIME
,FF_Q_HANDLE_TIME
,FF_OCC_PERCENT
,FF_Q_OCC_PERCENT
,FF_TALK_PERCENT
,FF_Q_TALK_PERCENT
,FF_ACW_PERCENT
,FF_IDLE_PERCENT
,FF_AVG_TALK_TIME_PERCENT
,FF_AVG_Q_TALK_TIME_PERCENT
,FF_AVG_ACW_TIME_PERCENT
,FF_AVG_Q_ACW_TIME_PERCENT
,FF_AVG_HANDLE_TIME_PERCENT
,FF_AVG_Q_HANDLE_TIME_PERCENT
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,ANSWERED_SESSIONS
,RONA_CNT
,DID_CNT
,DOD_CNT
,STARTED_IMS
,STARTED_CALLS
,ESCALATIONS
,CONSULTS
,TRANSFERS
,SUPERVISOR_JOINS
,AVAILABLE_TIME
,RING_TIME
,CONNECT_IM_SESSION_TIME
,CONNECT_PHONE_CALL_TIME
,CONNECT_DID_CALL_TIME
,CONNECT_DOD_CALL_TIME
,NON_CONNECT_CALL_TIME
,ACW_TIME
,RONA_TIME
,UNAVAILABLE_TIME
,OFF_WORK_TIME
,LOGGED_OUT_TIME
,ON_PHONE_TIME
,Q_ON_PHONE_TIME
,TALK_TIME
,Q_TALK_TIME
,HANDLE_TIME
,Q_HANDLE_TIME
,CPROD
,MING
,AUT2
,[EMAIL]
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,CATS_ID
,PAY_GROUP
)
SELECT
 'DUP'					--BAD_IMPORTS_CODE		--'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME	--WS_ROW_CREATED_TIME
,W1.FF_AGENT_NAME
,W1.FF_DATE
,W1.FF_TIME
,W1.FF_BUSINESS_UNIT
,W1.FF_TEAM
,W1.FF_GROUPS
,W1.FF_ANSWERED_SESSIONS
,W1.FF_RONAS
,W1.FF_DIDS
,W1.FF_DODS
,W1.FF_STARTED_IMS
,W1.FF_STARTED_CALLS
,W1.FF_ESCALATIONS
,W1.FF_CONSULTS
,W1.FF_TRANSFERS
,W1.FF_SUPERVISOR_JOINS
,W1.FF_AVAILABLE_TIME
,W1.FF_RINGING_TIME1
,W1.FF_CONNECT_IM_SESSION_TIME
,W1.FF_CONNECT_PHONE_CALL_TIME
,W1.FF_CONNECT_DID_CALL_TIME
,W1.FF_CONNECT_DOD_CALL_TIME
,W1.FF_NON_CONNECT_CALL_TIME
,W1.FF_AFTERCALL_TIME
,W1.FF_RONA_TIME
,W1.FF_UNAVAILABLE_TIME
,W1.FF_OFF_WORK_TIME
,W1.FF_LOGGED_OUT_TIME
,W1.FF_ON_PHONE_TIME
,W1.FF_Q_ON_PHONE_TIME
,W1.FF_TALK_TIME
,W1.FF_Q_TALK_TIME
,W1.FF_HANDLE_TIME
,W1.FF_Q_HANDLE_TIME
,W1.FF_OCC_PERCENT
,W1.FF_Q_OCC_PERCENT
,W1.FF_TALK_PERCENT
,W1.FF_Q_TALK_PERCENT
,W1.FF_ACW_PERCENT
,W1.FF_IDLE_PERCENT
,W1.FF_AVG_TALK_TIME_PERCENT
,W1.FF_AVG_Q_TALK_TIME_PERCENT
,W1.FF_AVG_ACW_TIME_PERCENT
,W1.FF_AVG_Q_ACW_TIME_PERCENT
,W1.FF_AVG_HANDLE_TIME_PERCENT
,W1.FF_AVG_Q_HANDLE_TIME_PERCENT
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.ANSWERED_SESSIONS
,W1.RONA_CNT
,W1.DID_CNT
,W1.DOD_CNT
,W1.STARTED_IMS
,W1.STARTED_CALLS
,W1.ESCALATIONS
,W1.CONSULTS
,W1.TRANSFERS
,W1.SUPERVISOR_JOINS
,W1.AVAILABLE_TIME
,W1.RING_TIME
,W1.CONNECT_IM_SESSION_TIME
,W1.CONNECT_PHONE_CALL_TIME
,W1.CONNECT_DID_CALL_TIME
,W1.CONNECT_DOD_CALL_TIME
,W1.NON_CONNECT_CALL_TIME
,W1.ACW_TIME
,W1.RONA_TIME
,W1.UNAVAILABLE_TIME
,W1.OFF_WORK_TIME
,W1.LOGGED_OUT_TIME
,W1.ON_PHONE_TIME
,W1.Q_ON_PHONE_TIME
,W1.TALK_TIME
,W1.Q_TALK_TIME
,W1.HANDLE_TIME
,W1.Q_HANDLE_TIME
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.[EMAIL]
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.CATS_ID
,W1.PAY_GROUP

FROM
(	SELECT
	 [DATETIME]
	,FF_AGENT_NAME
	,FF_BUSINESS_UNIT
	,FF_TEAM
	,FF_GROUPS
	,ROW_NUMBER() over (partition by [DATETIME], FF_AGENT_NAME, FF_BUSINESS_UNIT, FF_TEAM, FF_GROUPS
                            order by [DATETIME], FF_AGENT_NAME, FF_BUSINESS_UNIT, FF_TEAM, FF_GROUPS, HANDLE_TIME DESC) ROWNO
	FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1
) TNM
LEFT JOIN      WSOL_TB_IMPORTS_MONAT_INVOICING_1	W1   ON W1.[DATETIME]		= TNM.[DATETIME]
														AND W1.FF_AGENT_NAME	= TNM.FF_AGENT_NAME
														AND W1.FF_BUSINESS_UNIT	= TNM.FF_BUSINESS_UNIT
														AND W1.FF_TEAM			= TNM.FF_TEAM
														AND W1.FF_GROUPS		= TNM.FF_GROUPS
WHERE TNM.ROWNO > 1

--===========================================================================================================
--DELETE DUPLICATES:
--===========================================================================================================
DELETE FROM TNM
FROM
(	SELECT
	 [DATETIME]
	,FF_AGENT_NAME
	,FF_BUSINESS_UNIT
	,FF_TEAM
	,FF_GROUPS
	,ROW_NUMBER() over (partition by [DATETIME], FF_AGENT_NAME, FF_BUSINESS_UNIT, FF_TEAM, FF_GROUPS
                            order by [DATETIME], FF_AGENT_NAME, FF_BUSINESS_UNIT, FF_TEAM, FF_GROUPS, HANDLE_TIME DESC) ROWNO
	FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1
) TNM
WHERE TNM.ROWNO > 1
--===========================================================================================================

-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1 ORDER BY SEQNO
--===========================================================================================================
--UPDATE FIELDS FROM MAPPING DATA AND ADDITIONAL INVOICE FIELDS
--===========================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_1 SET
  EMAIL			= ISNULL(IAM.EMAIL,'')
 ,ID_EXT		= CASE WHEN IAM.INVOICE_GROUP = 'RES' THEN 'MRA'
					   WHEN IAM.INVOICE_GROUP = 'FC'  THEN 'MFC'
					   WHEN IAM.INVOICE_GROUP = ''	  THEN 'MSA'
					   ELSE '' END
 ,PAY_GROUP		= ISNULL(IAM.PAY_GROUP,0)
 ,RESOURCE_NAME	= ISNULL(IAM.RESOURCE_NAME,'')
 FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_1			I
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING	IAM  ON IAM.INVOICE_MAP_KEY = I.FF_AGENT_NAME

--SELECT * FROM WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING

--=================================================================================================
--UPDATE FOR WEEKEND RATES
--=================================================================================================
SET DATEFIRST 1  -- = Monday  

UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_1 SET
 ID_EXT = CASE WHEN (ID_EXT IN ('MFC','MSA') AND DATEPART(dw, [DATETIME]) IN (6, 7)) THEN
				CASE WHEN ID_EXT = 'MFC' THEN 'MFW'
				     WHEN ID_EXT = 'MSA' THEN 'MSW'
					 ELSE ID_EXT
				END
			   ELSE ID_EXT
		  END

--SELECT DISTINCT(ID_EXT) FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1

--===================================================================================================================================================
--SET ADDITIONAL INVOICE FIELDS
--===================================================================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_1 SET	-- SELECT
  AIR_DAY_TYPE = CASE WHEN IG.HAS_HOLIDAYS = 'Y' AND
						 (    ISNULL(IH.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) OR
						   ( ISNULL(IHA.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) AND ISNULL(IHA.ID_EXT,'') <> '' )
						 )
					  THEN 'H' ELSE 'S' END  --AS AIR_DAY_TYPE  --H=Holiday  --S=Standard
 FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_1				I
 INNER JOIN      DATE_TIME										DT	ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_INVOICE_GROUPS		IG	ON IG.ID_EXT              = I.ID_EXT
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_INVOICE_HOLIDAYS		IH	ON IH.HOLIDAY_DATE        = CAST(DT.CAL_DATE_STRING AS DATETIME)
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_INVOICE_HOLIDAYS_ADDL	IHA ON IHA.HOLIDAY_DATE       = CAST(DT.CAL_DATE_STRING AS DATETIME)
																   AND IHA.ID_EXT             = I.ID_EXT

UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_1 SET
  AIR_ACW_FONT_COLOR             = 'Black'
 ,MIN_GUARANTEE_MINUTES          = ISNULL(IG.MIN_GUARANTEE_MINUTES,0)        --varies between scheduler acl names.
 ,MIN_GUARANTEE_TYPE             = ISNULL(IG.MIN_GUARANTEE_TYPE,'')          --varies between scheduler acl names.
 ,AUTHORIZED_TO_INVOICE_TYPE     = ISNULL(IG.AUTHORIZED_TO_INVOICE_TYPE,'')  --varies between scheduler acl names.

 ,HAS_HOLIDAYS    = IG.HAS_HOLIDAYS
 ,INCLUDE_IN_CAS  = IG.INCLUDE_IN_CAS
 ,READY_FOR_XML   = IG.READY_FOR_XML
 ,SHOW_ID_EXTS    = IG.SHOW_ID_EXTS
 FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_1			I
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_INVOICE_GROUPS	IG  ON IG.ID_EXT    = I.ID_EXT
												


UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_1 SET
   INVOICE_ID         = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
  ,SCHEDULER_ACL_NAME = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
 FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_1				AIA 
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_AIA_STATIC_DEFAULTS	AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT


--======================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .CSV FILES:
--======================================================================
--SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 160
--======================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--Check #1:  ===================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1)
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + 'ERROR!  File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
(
 TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'MONAT_INVOICING'	--SUB_GROUP_NAME
	,@MSG1				--ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	--MUST RETURN AT LEAST ONE RECORD TO SSIS
INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'MONAT_INVOICING'	--SUB_GROUP_NAME
	,''					--ERROR_MSG
END

--===============================================
-- CALCULATE PAYMENT VALUES
--===============================================
-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_1 SET
 CPROD = AVAILABLE_TIME + RING_TIME + CONNECT_PHONE_CALL_TIME + ACW_TIME

UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_1 SET
 MING	= CASE WHEN CPROD > 3600.00 THEN 3600.00 ELSE CPROD END
,AUT2	= CASE WHEN CPROD > 3600.00 THEN 3600.00 ELSE CPROD END	

--===============================================
SET DATEFIRST 1  -- = Monday  
--===============================================
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME
,@DTM_MAX  DATETIME

SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN([DATETIME]) FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1))
SET @DTM_MAX = DATEADD(hh, 0,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1))

--SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING
--=============================================
--UPDATE PERMANENT INVOICE TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING SET
-- FF_AGENT_NAME					= W1.FF_AGENT_NAME
 FF_DATE							= W1.FF_DATE
,FF_TIME							= W1.FF_TIME
,FF_BUSINESS_UNIT					= W1.FF_BUSINESS_UNIT
,FF_TEAM							= W1.FF_TEAM
,FF_GROUPS							= W1.FF_GROUPS
,FF_ANSWERED_SESSIONS				= W1.FF_ANSWERED_SESSIONS
,FF_RONAS							= W1.FF_RONAS
,FF_DIDS							= W1.FF_DIDS
,FF_DODS							= W1.FF_DODS
,FF_STARTED_IMS						= W1.FF_STARTED_IMS
,FF_STARTED_CALLS					= W1.FF_STARTED_CALLS
,FF_ESCALATIONS						= W1.FF_ESCALATIONS
,FF_CONSULTS						= W1.FF_CONSULTS
,FF_TRANSFERS						= W1.FF_TRANSFERS
,FF_SUPERVISOR_JOINS				= W1.FF_SUPERVISOR_JOINS
,FF_AVAILABLE_TIME					= W1.FF_AVAILABLE_TIME
,FF_RINGING_TIME1					= W1.FF_RINGING_TIME1
,FF_CONNECT_IM_SESSION_TIME			= W1.FF_CONNECT_IM_SESSION_TIME
,FF_CONNECT_PHONE_CALL_TIME			= W1.FF_CONNECT_PHONE_CALL_TIME
,FF_CONNECT_DID_CALL_TIME			= W1.FF_CONNECT_DID_CALL_TIME
,FF_CONNECT_DOD_CALL_TIME			= W1.FF_CONNECT_DOD_CALL_TIME
,FF_NON_CONNECT_CALL_TIME			= W1.FF_NON_CONNECT_CALL_TIME
,FF_AFTERCALL_TIME					= W1.FF_AFTERCALL_TIME
,FF_RONA_TIME						= W1.FF_RONA_TIME
,FF_UNAVAILABLE_TIME				= W1.FF_UNAVAILABLE_TIME
,FF_OFF_WORK_TIME					= W1.FF_OFF_WORK_TIME
,FF_LOGGED_OUT_TIME					= W1.FF_LOGGED_OUT_TIME
,FF_ON_PHONE_TIME					= W1.FF_ON_PHONE_TIME
,FF_Q_ON_PHONE_TIME					= W1.FF_Q_ON_PHONE_TIME
,FF_TALK_TIME						= W1.FF_TALK_TIME
,FF_Q_TALK_TIME						= W1.FF_Q_TALK_TIME
,FF_HANDLE_TIME						= W1.FF_HANDLE_TIME
,FF_Q_HANDLE_TIME					= W1.FF_Q_HANDLE_TIME
,FF_OCC_PERCENT						= W1.FF_OCC_PERCENT
,FF_Q_OCC_PERCENT					= W1.FF_Q_OCC_PERCENT
,FF_TALK_PERCENT					= W1.FF_TALK_PERCENT
,FF_Q_TALK_PERCENT					= W1.FF_Q_TALK_PERCENT
,FF_ACW_PERCENT						= W1.FF_ACW_PERCENT
,FF_IDLE_PERCENT					= W1.FF_IDLE_PERCENT
,FF_AVG_TALK_TIME_PERCENT			= W1.FF_AVG_TALK_TIME_PERCENT
,FF_AVG_Q_TALK_TIME_PERCENT			= W1.FF_AVG_Q_TALK_TIME_PERCENT
,FF_AVG_ACW_TIME_PERCENT			= W1.FF_AVG_ACW_TIME_PERCENT
,FF_AVG_Q_ACW_TIME_PERCENT			= W1.FF_AVG_Q_ACW_TIME_PERCENT
,FF_AVG_HANDLE_TIME_PERCENT			= W1.FF_AVG_HANDLE_TIME_PERCENT
,FF_AVG_Q_HANDLE_TIME_PERCENT		= W1.FF_AVG_Q_HANDLE_TIME_PERCENT

,SEQNO_ADDED_TIME					= W1.SEQNO_ADDED_TIME
,SEQNO								= W1.SEQNO
,FTP_FILE_NAME						= W1.FTP_FILE_NAME

,[DATETIME]							= W1.[DATETIME]
,HOUR_INTERVAL						= W1.HOUR_INTERVAL
,AGENT_NAME							= W1.AGENT_NAME
,ANSWERED_SESSIONS					= W1.ANSWERED_SESSIONS
,RONA_CNT							= W1.RONA_CNT
,DID_CNT							= W1.DID_CNT
,DOD_CNT							= W1.DOD_CNT
,STARTED_IMS						= W1.STARTED_IMS
,STARTED_CALLS						= W1.STARTED_CALLS
,ESCALATIONS						= W1.ESCALATIONS
,CONSULTS							= W1.CONSULTS
,TRANSFERS							= W1.TRANSFERS
,SUPERVISOR_JOINS					= W1.SUPERVISOR_JOINS
,AVAILABLE_TIME						= W1.AVAILABLE_TIME
,RING_TIME							= W1.RING_TIME
,CONNECT_IM_SESSION_TIME			= W1.CONNECT_IM_SESSION_TIME
,CONNECT_PHONE_CALL_TIME			= W1.CONNECT_PHONE_CALL_TIME
,CONNECT_DID_CALL_TIME				= W1.CONNECT_DID_CALL_TIME
,CONNECT_DOD_CALL_TIME				= W1.CONNECT_DOD_CALL_TIME
,NON_CONNECT_CALL_TIME				= W1.NON_CONNECT_CALL_TIME
,ACW_TIME							= W1.ACW_TIME
,RONA_TIME							= W1.RONA_TIME
,UNAVAILABLE_TIME					= W1.UNAVAILABLE_TIME
,OFF_WORK_TIME						= W1.OFF_WORK_TIME
,LOGGED_OUT_TIME					= W1.LOGGED_OUT_TIME
,ON_PHONE_TIME						= W1.ON_PHONE_TIME
,Q_ON_PHONE_TIME					= W1.Q_ON_PHONE_TIME
,TALK_TIME							= W1.TALK_TIME
,Q_TALK_TIME						= W1.Q_TALK_TIME
,HANDLE_TIME						= W1.HANDLE_TIME
,Q_HANDLE_TIME						= W1.Q_HANDLE_TIME

,CPROD								= W1.CPROD
,MING								= W1.MING
,AUT2								= W1.AUT2

,[EMAIL]							= W1.EMAIL
--,ID_EXT							= W1.ID_EXT
,SCHEDULER_ACL_NAME					= W1.SCHEDULER_ACL_NAME
--,STD_TENANT_START_DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W1.CAL_DATE
,TENANT_KEY							= W1.TENANT_KEY
,AIR_DAY_TYPE						= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES				= W1.MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE					= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W1.INCLUDE_IN_CAS
,READY_FOR_XML						= W1.READY_FOR_XML
,SHOW_ID_EXTS						= W1.SHOW_ID_EXTS
--,INVOICE_ID						= W1.INVOICE_ID
,RESOURCE_NAME						= W1.RESOURCE_NAME
,CATS_ID							= W1.CATS_ID
,PAY_GROUP							= W1.PAY_GROUP

--,WS_ROW_CREATED_TIME				= NULL
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_1  W1
INNER JOIN      WSOL_TB_IMPORTS_MONAT_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													  AND G.ID_EXT                         = W1.ID_EXT
													  AND G.FF_AGENT_NAME				   = W1.FF_AGENT_NAME
													  AND G.INVOICE_ID					   = W1.INVOICE_ID

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY
  AND G.ID_EXT							= W1.ID_EXT
  AND G.FF_AGENT_NAME					= W1.FF_AGENT_NAME
  AND G.INVOICE_ID						= W1.INVOICE_ID

--=============================================
--INSERT INTO PERMANENT IMPORT TABLE:
--=============================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING
(FF_AGENT_NAME
,FF_DATE
,FF_TIME
,FF_BUSINESS_UNIT
,FF_TEAM
,FF_GROUPS
,FF_ANSWERED_SESSIONS
,FF_RONAS
,FF_DIDS
,FF_DODS
,FF_STARTED_IMS
,FF_STARTED_CALLS
,FF_ESCALATIONS
,FF_CONSULTS
,FF_TRANSFERS
,FF_SUPERVISOR_JOINS
,FF_AVAILABLE_TIME
,FF_RINGING_TIME1
,FF_CONNECT_IM_SESSION_TIME
,FF_CONNECT_PHONE_CALL_TIME
,FF_CONNECT_DID_CALL_TIME
,FF_CONNECT_DOD_CALL_TIME
,FF_NON_CONNECT_CALL_TIME
,FF_AFTERCALL_TIME
,FF_RONA_TIME
,FF_UNAVAILABLE_TIME
,FF_OFF_WORK_TIME
,FF_LOGGED_OUT_TIME
,FF_ON_PHONE_TIME
,FF_Q_ON_PHONE_TIME
,FF_TALK_TIME
,FF_Q_TALK_TIME
,FF_HANDLE_TIME
,FF_Q_HANDLE_TIME
,FF_OCC_PERCENT
,FF_Q_OCC_PERCENT
,FF_TALK_PERCENT
,FF_Q_TALK_PERCENT
,FF_ACW_PERCENT
,FF_IDLE_PERCENT
,FF_AVG_TALK_TIME_PERCENT
,FF_AVG_Q_TALK_TIME_PERCENT
,FF_AVG_ACW_TIME_PERCENT
,FF_AVG_Q_ACW_TIME_PERCENT
,FF_AVG_HANDLE_TIME_PERCENT
,FF_AVG_Q_HANDLE_TIME_PERCENT
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,ANSWERED_SESSIONS
,RONA_CNT
,DID_CNT
,DOD_CNT
,STARTED_IMS
,STARTED_CALLS
,ESCALATIONS
,CONSULTS
,TRANSFERS
,SUPERVISOR_JOINS
,AVAILABLE_TIME
,RING_TIME
,CONNECT_IM_SESSION_TIME
,CONNECT_PHONE_CALL_TIME
,CONNECT_DID_CALL_TIME
,CONNECT_DOD_CALL_TIME
,NON_CONNECT_CALL_TIME
,ACW_TIME
,RONA_TIME
,UNAVAILABLE_TIME
,OFF_WORK_TIME
,LOGGED_OUT_TIME
,ON_PHONE_TIME
,Q_ON_PHONE_TIME
,TALK_TIME
,Q_TALK_TIME
,HANDLE_TIME
,Q_HANDLE_TIME
,CPROD
,MING
,AUT2
,[EMAIL]
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,CATS_ID
,PAY_GROUP
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W1.FF_AGENT_NAME
,W1.FF_DATE
,W1.FF_TIME
,W1.FF_BUSINESS_UNIT
,W1.FF_TEAM
,W1.FF_GROUPS
,W1.FF_ANSWERED_SESSIONS
,W1.FF_RONAS
,W1.FF_DIDS
,W1.FF_DODS
,W1.FF_STARTED_IMS
,W1.FF_STARTED_CALLS
,W1.FF_ESCALATIONS
,W1.FF_CONSULTS
,W1.FF_TRANSFERS
,W1.FF_SUPERVISOR_JOINS
,W1.FF_AVAILABLE_TIME
,W1.FF_RINGING_TIME1
,W1.FF_CONNECT_IM_SESSION_TIME
,W1.FF_CONNECT_PHONE_CALL_TIME
,W1.FF_CONNECT_DID_CALL_TIME
,W1.FF_CONNECT_DOD_CALL_TIME
,W1.FF_NON_CONNECT_CALL_TIME
,W1.FF_AFTERCALL_TIME
,W1.FF_RONA_TIME
,W1.FF_UNAVAILABLE_TIME
,W1.FF_OFF_WORK_TIME
,W1.FF_LOGGED_OUT_TIME
,W1.FF_ON_PHONE_TIME
,W1.FF_Q_ON_PHONE_TIME
,W1.FF_TALK_TIME
,W1.FF_Q_TALK_TIME
,W1.FF_HANDLE_TIME
,W1.FF_Q_HANDLE_TIME
,W1.FF_OCC_PERCENT
,W1.FF_Q_OCC_PERCENT
,W1.FF_TALK_PERCENT
,W1.FF_Q_TALK_PERCENT
,W1.FF_ACW_PERCENT
,W1.FF_IDLE_PERCENT
,W1.FF_AVG_TALK_TIME_PERCENT
,W1.FF_AVG_Q_TALK_TIME_PERCENT
,W1.FF_AVG_ACW_TIME_PERCENT
,W1.FF_AVG_Q_ACW_TIME_PERCENT
,W1.FF_AVG_HANDLE_TIME_PERCENT
,W1.FF_AVG_Q_HANDLE_TIME_PERCENT

,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME

,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.ANSWERED_SESSIONS
,W1.RONA_CNT
,W1.DID_CNT
,W1.DOD_CNT
,W1.STARTED_IMS
,W1.STARTED_CALLS
,W1.ESCALATIONS
,W1.CONSULTS
,W1.TRANSFERS
,W1.SUPERVISOR_JOINS
,W1.AVAILABLE_TIME
,W1.RING_TIME
,W1.CONNECT_IM_SESSION_TIME
,W1.CONNECT_PHONE_CALL_TIME
,W1.CONNECT_DID_CALL_TIME
,W1.CONNECT_DOD_CALL_TIME
,W1.NON_CONNECT_CALL_TIME
,W1.ACW_TIME
,W1.RONA_TIME
,W1.UNAVAILABLE_TIME
,W1.OFF_WORK_TIME
,W1.LOGGED_OUT_TIME
,W1.ON_PHONE_TIME
,W1.Q_ON_PHONE_TIME
,W1.TALK_TIME
,W1.Q_TALK_TIME
,W1.HANDLE_TIME
,W1.Q_HANDLE_TIME
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.[EMAIL]
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.CATS_ID
,W1.PAY_GROUP
,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_1  W1

LEFT JOIN       WSOL_TB_IMPORTS_MONAT_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													  AND G.ID_EXT                         = W1.ID_EXT
													  AND G.FF_AGENT_NAME				   = W1.FF_AGENT_NAME
													  AND G.INVOICE_ID					   = W1.INVOICE_ID

WHERE (G.FF_AGENT_NAME					IS NULL AND ISNULL(W1.FF_AGENT_NAME					,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY, 0) <>  0 )
--AND (G.INVOICE_ID						IS NULL AND ISNULL(W4.INVOICE_ID					,'') <> '' )			
--AND (G.ID_EXT							IS NULL AND ISNULL(W4.ID_EXT						,'') <> '' )

--===============================================================
SET DATEFIRST 1  -- = Monday
--===============================================================

IF OBJECT_ID('TEMPDB..#DT_EASY_WEEKS') IS NOT NULL BEGIN
   DROP TABLE #DT_EASY_WEEKS
END
CREATE TABLE #DT_EASY_WEEKS
(CAL_DATE_STRING      VARCHAR(10)
,CAL_WEEK_START_DATE  DATETIME
,CAL_WEEK_END_DATE    DATETIME
,PAY_CYCLE_CLOSURE_DATE DATETIME
)
INSERT INTO #DT_EASY_WEEKS
SELECT
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
FROM DATE_TIME DT
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
GROUP BY 
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
--===========================
UPDATE #DT_EASY_WEEKS SET CAL_WEEK_END_DATE = DATEADD(DD,6,CAL_WEEK_START_DATE)

UPDATE #DT_EASY_WEEKS SET
 PAY_CYCLE_CLOSURE_DATE = CASE WHEN DATEPART(DD,@DTM_MAX) >= 1 AND DATEPART(DD,@DTM_MAX) < 16 THEN
									CAST(CONVERT(VARCHAR(10), CONVERT(VARCHAR(2),MONTH(@DTM_MAX)) + CONVERT(VARCHAR(4),'/15/') + CONVERT(VARCHAR(4),YEAR(@DTM_MAX)),101) AS DATETIME)
							   WHEN DATEPART(DD,@DTM_MAX) > 15 THEN 
									DATEADD(D,-1,DATEADD(M,DATEDIFF(M,0,@DTM_MAX)+1,0))
							   END 
							   
 --SELECT * FROM #DT_EASY_WEEKS ORDER BY CAL_DATE_STRING
 /*
--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA
END
CREATE TABLE #WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](100) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.FF_AGENT_NAME  --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING				--[DATE]             
,DT.LABEL_HH24 + ':00'			--HOD_INTERVAL

,AIA.AVAILABLE_TIME + AIA.NON_CONNECT_CALL_TIME + AIA.RONA_TIME + AIA.UNAVAILABLE_TIME + AIA.HANDLE_TIME	--AU_DK_LOGGED_IN_DURATION
,AIA.AVAILABLE_TIME								--AU_DK_AVAILABLE_DURATION

,AIA.RING_TIME + AIA.CONNECT_PHONE_CALL_TIME	--AU_DK_TALK_DURATION
,0												--AU_DK_IB_TALK_DURATION
,0												--AU_DK_OB_TALK_DURATION

,AIA.ACW_TIME									--AU_DK_CONVENTIONAL_ACW
,AIA.UNAVAILABLE_TIME					        --AU_DK_NR_DURATION
,0												--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0												--AU_DK_ADJUSTED_NR_DURATION
,AIA.CPROD										--AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.CPROD										--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS  

,0		--AU_DK_XFER_COUNT
,0		--AU_DK_HOLD_COUNT
,0		--AU_DK_CONFERENCE_COUNT
,0		--AU_DK_CONSULT_COUNT
,0		--AU_DK_PUP_COUNT

,0		--AU_DK_OFFERED_COUNT
,0		--AU_DK_HANDLED_COUNT
,0		--AU_DK_IB_HANDLE_COUNT
,0		--AU_DK_OB_HANDLE_COUNT
													
,0		--AU_DK_RONA_COUNT
,0		--AU_DK_AWR_COUNT

,AIA.MING	--MINIMUM_GUARANTEE
,AIA.AUT2	--AUTHORIZED_TO_INVOICE

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_MINUTES
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID  --CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID 
,AIA.RESOURCE_NAME
,NULL			--AIA.AIRITKDUR
,NULL			--AIA.AIRIACDUR
,dbo.GETDATE()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL			--	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
--SELECT TOP 1000 *
FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_1            AIA 
INNER JOIN      WSOL_TB_IMPORTS_MONAT_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      WSOL_TB_IMPORTS_MONAT_SD_INVOICE_GROUPS      CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME									 DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS								DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')
  AND (ISNULL(AIA.RESOURCE_NAME,'') <> '')
  AND AIA.AUT2 <> 0.00											--<<<<<---- FILTER OUT RECORDS WHERE AUTHORIZED TIME = 0.00


--==========================================================================
--UPDATE WSOL_TB_...UV_ANT_AIA TABLE:
--==========================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA SET
 [PLATFORM]							= W1.[PLATFORM]
,[STATUS]							= W1.[STATUS]
--,INVOICE_MAP_KEY					= W1.INVOICE_MAP_KEY
,FIELD_NAME							= W1.FIELD_NAME
,SCHEDULER_PROJECT_ID				= W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME					= W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION					= W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID			= W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME			= W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID				= W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME			= W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID			= W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID	= W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID		= W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY			= W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID					= W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID					= W1.HOLIDAY_INVOICE_ID
,HOLIDAY							= W1.HOLIDAY
,FILE_FORMAT_OF_PUSH				= W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID		= W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL							= W1.NEW_ACL
,CURRENT_CATS						= W1.CURRENT_CATS
,CATS_ID							= W1.CATS_ID
,PATS_ID							= W1.PATS_ID
,SMART_ELIGIBLE						= W1.SMART_ELIGIBLE
,SMART_TIER_1						= W1.SMART_TIER_1
,SMART_TIER_2						= W1.SMART_TIER_2
,SMART_TIER_3						= W1.SMART_TIER_3
,INTERVAL							= W1.INTERVAL
,[DATE]								= W1.[DATE]
,HOD_INTERVAL						= W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION			= W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION			= W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION				= W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION				= W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION				= W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW				= W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION					= W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT					= W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT					= W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT				= W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT				= W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT					= W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT				= W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT				= W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT				= W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT				= W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT					= W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT					= W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE					= W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE				= W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE					= W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE				= W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
,FTP_FILE_NAME						= W1.FTP_FILE_NAME
,EMAIL								= W1.EMAIL

--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W1.CAL_DATE
,TENANT_KEY							= W1.TENANT_KEY
,AIR_DAY_TYPE						= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE					= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE					= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W1.INCLUDE_IN_CAS
,READY_FOR_XML						= W1.READY_FOR_XML
,SHOW_ID_EXTS						= W1.SHOW_ID_EXTS
,INVOICE_ID							= W1.INVOICE_ID
,RESOURCE_NAME						= W1.RESOURCE_NAME

,AIRITKDUR							= W1.AIRITKDUR
,AIRIACDUR							= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

FROM            #WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA   W1

INNER JOIN      WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													   AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
													   AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )


--=====================================================
--INSERT TMP TABLE FIELDS INTO WSOL_TB_... TABLE:
--=====================================================
INSERT INTO [WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA   AIA
LEFT JOIN       WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
													   AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
												       AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )

*/
--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_MONAT_INVOICING_IMPORT_1]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_MONAT_INVOICING_IMPORT_1]
AS
SET NOCOUNT ON  

--====================================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY = 160  -- Monat Global Corp. CLIENT_ID in WSOL Database
--====================================================
DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND
WHERE TENANT_KEY		= @TENANT_KEY
  AND SUB_GROUP_NAME	= 'MONAT_INVOICING'
  --  SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 160
--=============================================================================

--=============================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = DBO.GETDATE()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--=============================================================================

--SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1 ORDER BY F5
--SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_BAD_1

--=============================================================================
--CLEANUP WORK (_1) TABLE:
--HANDLE Blank Agent Name:
--=============================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_BAD_1
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT
,FF_STATE_START_TIME
,FF_AGENT_STATE
,FF_REASON_CODE
,FF_DURATION
,EVENT_START_TIME
,EVENT_DURATION_SECS
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,INBOUND_CALLS
,OUTBOUND_CALLS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 'AGT'					--BAD_IMPORTS_CODE			-- 'Blank Agent Name'
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME	--WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,NULL	-- INBOUND_CALLS
,NULL	-- OUTBOUND_CALLS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1  W1
WHERE LTRIM(RTRIM(ISNULL(W1.F1,''))) IN ('')
--========================================================================
--DELETE WHERE Blank Agent Name:
--========================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1
WHERE LTRIM(RTRIM(ISNULL(F1,''))) IN ('')

--========================================================================
--DELETE Unknown Durations:
--========================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_BAD_1
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT
,FF_STATE_START_TIME
,FF_AGENT_STATE
,FF_REASON_CODE
,FF_DURATION
,EVENT_START_TIME
,EVENT_DURATION_SECS
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,INBOUND_CALLS
,OUTBOUND_CALLS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 'UNK'					--BAD_IMPORTS_CODE			-- 'UNKnown' Duration
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,NULL	-- INBOUND_CALLS
,NULL	-- OUTBOUND_CALLS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1  W1
WHERE LTRIM(RTRIM(ISNULL(F5,''))) = 'Unknown'
  AND LTRIM(RTRIM(ISNULL(F3,''))) IN ('OffWork','LoggedOut','Unavailable','RingOnNoAnswer','Unknown')

DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1  
WHERE LTRIM(RTRIM(ISNULL(F5,''))) = 'Unknown'
  AND LTRIM(RTRIM(ISNULL(F3,''))) IN ('OffWork','LoggedOut','Unavailable','RingOnNoAnswer','Unknown')

--========================================================================
--DELETE LoggedOut / OffWork States:
--========================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_BAD_1
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT
,FF_STATE_START_TIME
,FF_AGENT_STATE
,FF_REASON_CODE
,FF_DURATION
,EVENT_START_TIME
,EVENT_DURATION_SECS
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,INBOUND_CALLS
,OUTBOUND_CALLS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 'LOS'					--BAD_IMPORTS_CODE			-- 'L'og'O'ut 'S'tate
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,NULL	-- INBOUND_CALLS
,NULL	-- OUTBOUND_CALLS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
--SELECT *
FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1  W1
WHERE LTRIM(RTRIM(ISNULL(F3,''))) IN ('LoggedOut','OffWork')

DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1  
WHERE LTRIM(RTRIM(ISNULL(F3,''))) IN ('LoggedOut','OffWork')

--===========================================================================================================
--HANDLE DUPLICATES:
--===========================================================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_BAD_1
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT
,FF_STATE_START_TIME
,FF_AGENT_STATE
,FF_REASON_CODE
,FF_DURATION
,EVENT_START_TIME
,EVENT_DURATION_SECS
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,INBOUND_CALLS
,OUTBOUND_CALLS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 'DUP'					--BAD_IMPORTS_CODE		--'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE --'ACT'IVITY FILE
,DBO.GETDATE() --@WS_ROW_CREATED_TIME	--WS_ROW_CREATED_TIME
,W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,NULL	-- INTERVAL_START_TIME
,NULL	-- INTERVAL_END_TIME
,NULL	-- EVENT_DURATION_IN_INTERVAL_SECS
,NULL	-- INBOUND_CALLS
,NULL	-- OUTBOUND_CALLS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
FROM
(	SELECT
	 F1	-- FF_AGENT
	,F2	-- FF_STATE_START_TIME
	,F3	-- FF_AGENT_STATE
	,F5	-- FF_DURATION
	,ROW_NUMBER() over (partition by F1, F2, F3, F5
                            order by F1, F2, F3, F5, F4 DESC) ROWNO
	FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1
) TNM
LEFT JOIN      WSOL_TB_IMPORTS_MONAT_INVOICING_1_1	W1   ON W1.F1	= TNM.F1	-- FF_AGENT
														AND W1.F2	= TNM.F2	-- FF_STATE_START_TIME
														AND W1.F3	= TNM.F3	-- FF_AGENT_STATE
														AND W1.F5	= TNM.F5	-- FF_DURATION
WHERE TNM.ROWNO > 1
GROUP BY
 W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME

--===========================================================================================================
--DELETE DUPLICATES:
--===========================================================================================================
DELETE FROM TNM
FROM
(	SELECT
	 F1	-- FF_AGENT
	,F2	-- FF_STATE_START_TIME
	,F3	-- FF_AGENT_STATE
	,F5	-- FF_DURATION
	,ROW_NUMBER() over (partition by F1, F2, F3, F5
                            order by F1, F2, F3, F5, F4 DESC) ROWNO
	FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1
) TNM
WHERE TNM.ROWNO > 1

--=============================================================================
--SET EVENT START TIME AND DURATION TO PREPARE FOR PARSING INTO INTERVALS
--=============================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_1_1 SET
 EVENT_START_TIME		= CAST(F2 AS DATETIME)
,EVENT_DURATION_SECS	= CASE WHEN LEN(F5) = 8 THEN
								(
								   (CAST(REPLACE(LEFT(F5, 2),' ','') AS INT) * 3600)
								 + (CAST(REPLACE(SUBSTRING(F5, 4, 2),' ','') AS INT) * 60)
								 + (CAST(REPLACE(RIGHT(RTRIM(F5), 2),' ','') AS INT))
								)
							   ELSE
							    (
								   (CAST(REPLACE(LEFT(F5, 1),' ','') AS INT) * 3600)
								 + (CAST(REPLACE(SUBSTRING(F5, 3, 2),' ','') AS INT) * 60)
								 + (CAST(REPLACE(RIGHT(RTRIM(F5), 2),' ','') AS INT))
								)
						  END

--SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1 ORDER BY SEQNO
--=============================================
--DELETE EVENTS WHERE DURATION = 0.00
--=============================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1 
WHERE EVENT_DURATION_SECS = 0.00

--===========================================================================================================
-- POPULATE ACW WORK TABLE
--===========================================================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_ACW

INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_1_ACW
(
 F1
,F2
,F3
,F4
,F5
,EVENT_START_TIME
,EVENT_DURATION_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 W1.F1
,W1.F2
,W1.F3
,W1.F4
,W1.F5
,W1.EVENT_START_TIME
,W1.EVENT_DURATION_SECS
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1  W1
WHERE F3 = 'AfterCall'

-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_ACW

--======================================================================================================
-- SET AUTHORIZED ACW VALUE
--======================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_1_ACW SET
 EVENT_DURATION_SECS = CASE WHEN EVENT_DURATION_SECS > 300.00 THEN 300.00 ELSE EVENT_DURATION_SECS END
  
--=====================================================================================================================
-- PARSE ACW DATA RECORDS INTO INTERVALS
--=====================================================================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_2_ACW

DECLARE
 @F1  VARCHAR(200)
,@F2  VARCHAR(50)
,@F3  VARCHAR(200)
,@F4  VARCHAR(500)
,@F5  VARCHAR(50) 
,@F6  DATETIME 
,@F7  DECIMAL(10,2) 
,@F8  DATETIME
,@F9  INT
,@F10 VARCHAR(100)
,@F11 INT

DECLARE crsT3 CURSOR FOR   
SELECT
 ISNULL(F1,'')
,ISNULL(F2,'')
,ISNULL(F3,'')
,ISNULL(F4,'')
,ISNULL(F5,'')
,ISNULL(EVENT_START_TIME,'')
,ISNULL(EVENT_DURATION_SECS,0.00)
,ISNULL(SEQNO_ADDED_TIME,'')
,ISNULL(SEQNO,'0')
,ISNULL(FTP_FILE_NAME,'')
,3600											--<<----- DETERMINES THE INTERVAL, 900 = 15 MIN, 1800 = 30 MIN, 3600 = 60 MIN
FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_ACW

OPEN crsT3
FETCH NEXT FROM crsT3   INTO @F1,@F2,@F3,@F4,@F5,@F6,@F7,@F8,@F9,@F10,@F11

WHILE @@FETCH_STATUS = 0 BEGIN
-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_2_ACW ORDER BY SEQNO
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_2_ACW
(FF_AGENT
,FF_STATE_START_TIME
,FF_AGENT_STATE
,FF_REASON_CODE
,FF_DURATION
,EVENT_START_TIME
,EVENT_DURATION_SECS
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 RESULT.FF_AGENT
,RESULT.FF_STATE_START_TIME
,RESULT.FF_AGENT_STATE
,RESULT.FF_REASON_CODE
,RESULT.FF_DURATION
,RESULT.EVENT_START_TIME
,RESULT.EVENT_DURATION_SECS
,RESULT.INTERVAL_START_TIME
,RESULT.INTERVAL_END_TIME
,RESULT.EVENT_DURATION_IN_INTERVAL_SECS
,RESULT.SEQNO_ADDED_TIME
,RESULT.SEQNO
,RESULT.FTP_FILE_NAME
FROM TVF_MONAT_STATES_TO_INTERVALS(@F1,@F2,@F3,@F4,@F5,@F6,@F7,@F8,@F9,@F10,@F11) RESULT

FETCH NEXT FROM crsT3   INTO @F1,@F2,@F3,@F4,@F5,@F6,@F7,@F8,@F9,@F10,@F11
END
CLOSE crsT3
DEALLOCATE crsT3

--===========================================================================================================
-- REMOVE ACW RECORDS THAT ARE OUTSIDE OF BUSINESS HOURS (00:00 - 05:00 CST)
--===========================================================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_2_ACW
WHERE (DATEPART(HH, INTERVAL_START_TIME) >= 1 AND DATEPART(HH, INTERVAL_START_TIME) < 7)

--=============================================================================
-- GROUP ACW DATA BY AGENT & INTERVAL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_3_ACW

INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_3_ACW
(
 FF_AGENT
,FF_AGENT_STATE
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,AUTHORIZED_ACW
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)														
SELECT
 A2.FF_AGENT											AS FF_AGENT
,A2.FF_AGENT_STATE										AS FF_AGENT_STATE
,SUM(ISNULL(A2.EVENT_DURATION_IN_INTERVAL_SECS, 0.00))	AS EVENT_DURATION_IN_INTERVAL_SECS
 
,MAX(A2.SEQNO_ADDED_TIME)								AS SEQNO_ADDED_TIME
,MIN(A2.SEQNO)											AS SEQNO
,MAX(A2.FTP_FILE_NAME)									AS FTP_FILE_NAME

,A2.INTERVAL_START_TIME									AS [DATETIME]
,SUM(ISNULL(A2.EVENT_DURATION_IN_INTERVAL_SECS, 0.00))	AS AUTHORIZED_ACW

,@WS_ROW_CREATED_TIME									AS WS_ROW_CREATED_TIME
,NULL													AS WS_ROW_UPDATED_TIME

FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_2_ACW  A2

GROUP BY
 A2.FF_AGENT
,A2.FF_AGENT_STATE
,A2.INTERVAL_START_TIME

--===========================================================================================================
-- CONVERT DATETIME FROM EASTERN TO CENTRAL TIME
--===========================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_3_ACW SET
 DATETIME = DATEADD(HH, -1, [DATETIME])

-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_3_ACW

--=====================================================================================================================
-- PARSE DATA RECORDS INTO INTERVALS
--=====================================================================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_2

DECLARE
 @FF1  VARCHAR(200)
,@FF2  VARCHAR(50)
,@FF3  VARCHAR(200)
,@FF4  VARCHAR(500)
,@FF5  VARCHAR(50) 
,@FF6  DATETIME 
,@FF7  DECIMAL(10,2) 
,@FF8  DATETIME
,@FF9  INT
,@FF10 VARCHAR(100)
,@FF11 INT

DECLARE crsT4 CURSOR FOR   
SELECT
 ISNULL(F1,'')
,ISNULL(F2,'')
,ISNULL(F3,'')
,ISNULL(F4,'')
,ISNULL(F5,'')
,ISNULL(EVENT_START_TIME,'')
,ISNULL(EVENT_DURATION_SECS,0.00)
,ISNULL(SEQNO_ADDED_TIME,'')
,ISNULL(SEQNO,'0')
,ISNULL(FTP_FILE_NAME,'')
,3600											--<<----- DETERMINES THE INTERVAL, 900 = 15 MIN, 1800 = 30 MIN, 3600 = 60 MIN
FROM WSOL_TB_IMPORTS_MONAT_INVOICING_1_1

OPEN crsT4
FETCH NEXT FROM crsT4   INTO @FF1,@FF2,@FF3,@FF4,@FF5,@FF6,@FF7,@FF8,@FF9,@FF10,@FF11

WHILE @@FETCH_STATUS = 0 BEGIN
-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_2 ORDER BY SEQNO
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_2
(FF_AGENT
,FF_STATE_START_TIME
,FF_AGENT_STATE
,FF_REASON_CODE
,FF_DURATION
,EVENT_START_TIME
,EVENT_DURATION_SECS
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,INBOUND_CALLS
,OUTBOUND_CALLS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 RESULT.FF_AGENT
,RESULT.FF_STATE_START_TIME
,RESULT.FF_AGENT_STATE
,RESULT.FF_REASON_CODE
,RESULT.FF_DURATION
,RESULT.EVENT_START_TIME
,RESULT.EVENT_DURATION_SECS
,RESULT.INTERVAL_START_TIME
,RESULT.INTERVAL_END_TIME
,RESULT.EVENT_DURATION_IN_INTERVAL_SECS
,NULL	-- INBOUND_CALLS
,NULL	-- OUTBOUND_CALLS
,RESULT.SEQNO_ADDED_TIME
,RESULT.SEQNO
,RESULT.FTP_FILE_NAME
FROM TVF_MONAT_STATES_TO_INTERVALS(@FF1,@FF2,@FF3,@FF4,@FF5,@FF6,@FF7,@FF8,@FF9,@FF10,@FF11) RESULT

FETCH NEXT FROM crsT4   INTO @FF1,@FF2,@FF3,@FF4,@FF5,@FF6,@FF7,@FF8,@FF9,@FF10,@FF11
END
CLOSE crsT4
DEALLOCATE crsT4

--============================================================================================
-- CAPTURE CALL COUNTS
--============================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_2 SET
 INBOUND_CALLS		=	CASE WHEN FF_AGENT_STATE IN ('InCall','DirectCall') THEN
							CASE WHEN CAST(FF_STATE_START_TIME AS DATETIME) = EVENT_START_TIME THEN 1
							ELSE 0 END
						ELSE 0 END
,OUTBOUND_CALLS		=	CASE WHEN FF_AGENT_STATE = 'DirectOutboundDial' THEN
							CASE WHEN CAST(FF_STATE_START_TIME AS DATETIME) = EVENT_START_TIME THEN 1
							ELSE 0 END
						ELSE 0 END

--=============================================================================
-- REMOVE RECORDS THAT ARE OUTSIDE OF BUSINESS HOURS (00:00 - 05:00 CST)
--=============================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_BAD_1
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT
,FF_STATE_START_TIME
,FF_AGENT_STATE
,FF_REASON_CODE
,FF_DURATION
,EVENT_START_TIME
,EVENT_DURATION_SECS
,INTERVAL_START_TIME
,INTERVAL_END_TIME
,EVENT_DURATION_IN_INTERVAL_SECS
,INBOUND_CALLS
,OUTBOUND_CALLS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
)
SELECT
 'OBH'					--BAD_IMPORTS_CODE			-- 'O'utside 'B'usiness 'H'ours
,'INV'                  --BAD_IMPORTS_RECORD_TYPE	-- 'Invoicing Report'
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		-- DBO.GETDATE()
,W2.FF_AGENT
,W2.FF_STATE_START_TIME
,W2.FF_AGENT_STATE
,W2.FF_REASON_CODE
,W2.FF_DURATION
,W2.EVENT_START_TIME
,W2.EVENT_DURATION_SECS
,W2.INTERVAL_START_TIME
,W2.INTERVAL_END_TIME
,W2.EVENT_DURATION_IN_INTERVAL_SECS
,W2.INBOUND_CALLS
,W2.OUTBOUND_CALLS
,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME
FROM WSOL_TB_IMPORTS_MONAT_INVOICING_2  W2
WHERE (DATEPART(HH, W2.INTERVAL_START_TIME) >= 1 AND DATEPART(HH, W2.INTERVAL_START_TIME) < 7)

DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_2
WHERE (DATEPART(HH, INTERVAL_START_TIME) >= 1 AND DATEPART(HH, INTERVAL_START_TIME) < 7)


-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_3 ORDER BY SEQNO
--=============================================================================
-- GROUP DATA BY INTERVAL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_3

INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_3
(
 FF_AGENT
,FF_AGENT_STATE
,FF_REASON_CODE
,EVENT_DURATION_SECS
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_TIME

,INBOUND_CALLS
,OUTBOUND_CALLS
,LOGGED_IN_DUR
,AVAILABLE_DUR
,BUSY_DUR
,DIRECT_CALL_DUR
,DIRECT_OB_DIAL_DUR
,OFF_WORK_DUR
,UNKNOWN_DUR
,RONA_DUR
,RONA_SPECIAL_PROJECT_DUR
,RONA_SYSTEM_ISSUES_IT_DUR
,RONA_IDLE_DUR
,RONA_CALL_BACK_DUR
,INCALL_DUR
,INCALL_IDLE_DUR
,INCALL_CALL_BACK_DUR
,INCALL_SPECIAL_PROJECT_DUR
,INCALL_ON_BREAK_DUR
,ACW_DUR
,ACW_ON_BREAK_DUR
,ACW_CALL_BACK_DUR
,ACW_IDLE_DUR
,ACW_SPECIAL_PROJECT_DUR
,ACW_FLOOR_SUPPORT_DUR
,ACW_SYSTEM_ISSUES_IT_DUR
,RING_DUR
,RING_BREAK_DUR
,RING_SPECIAL_PROJECT_DUR
,RING_IDLE_DUR
,RING_SYSTEM_ISSUES_IT_DUR
,RING_CALL_BACK_DUR
,UNAVAILABLE_DUR
,UNAVAILABLE_ON_BREAK_DUR
,UNAVAILABLE_CALL_BACK_DUR
,UNAVAILABLE_IDLE_DUR
,UNAVAILABLE_PERSONAL_TIME_DUR
,UNAVAILABLE_RR_DUR
,UNAVAILABLE_SPECIAL_PROJECT_DUR
,UNAVAILABLE_FLOOR_SUPPORT_DUR
,UNAVAILABLE_SYSTEM_ISSUES_IT_DUR
,UNAVAILABLE_EMAIL_DUR
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W2.FF_AGENT
,W2.FF_AGENT_STATE
,W2.FF_REASON_CODE
,SUM(ISNULL(W2.EVENT_DURATION_SECS				,0.00))
,SUM(ISNULL(W2.EVENT_DURATION_IN_INTERVAL_SECS	,0.00))
,MAX(W2.SEQNO_ADDED_TIME)
,MIN(W2.SEQNO)
,W2.FTP_FILE_NAME

,NULL								--AS RESOURCE_NAME
,W2.INTERVAL_START_TIME				--AS DATETIME
,NULL								--AS HOUR_INTERVAL
,NULL								--AS EMPLOYEE_ID
,NULL								--AS STD_TENANT_START_TIME

,SUM(ISNULL(W2.INBOUND_CALLS	,0))--AS INBOUND_CALLS
,SUM(ISNULL(W2.OUTBOUND_CALLS	,0))--AS OUTBOUND_CALLS
,NULL								--AS LOGGED_IN_DUR
,NULL								--AS AVAILABLE_DUR
,NULL								--AS BUSY_DUR
,NULL								--AS DIRECT_CALL_DUR
,NULL								--AS DIRECT_OB_DIAL_DUR
,NULL								--AS OFF_WORK_DUR
,NULL								--AS UNKNOWN_DUR
,NULL								--AS RONA_DUR
,NULL								--AS RONA_SPECIAL_PROJECT_DUR
,NULL								--AS RONA_SYSTEM_ISSUES_ID_DUR
,NULL								--AS RONA_IDLE_DUR
,NULL								--AS RONA_CALL_BACK_DUR
,NULL								--AS INCALL_DUR
,NULL								--AS INCALL_IDLE_DUR
,NULL								--AS INCALL_CALL_BACK_DUR
,NULL								--AS INCALL_SPECIAL_PROJECT_DUR
,NULL								--AS INCALL_ON_BREAK_DUR
,NULL								--AS ACW_DUR
,NULL								--AS ACW_ON_BREAK_DUR
,NULL								--AS ACW_CALL_BACK_DUR
,NULL								--AS ACW_IDLE_DUR
,NULL								--AS ACW_SPECIAL_PROJECT_DUR
,NULL								--AS ACW_FLOOR_SUPPORT_DUR
,NULL								--AS ACW_SYSTEM_ISSUES_IT_DUR
,NULL								--AS RING_DUR
,NULL								--AS RING_BREAK_DUR
,NULL								--AS RING_SPECIAL_PROJECT_DUR
,NULL								--AS RING_IDLE_DUR
,NULL								--AS RING_SYSTEM_ISSUES_IT_DUR
,NULL								--AS RING_CALL_BACK_DUR
,NULL								--AS UNAVAILABLE_DUR
,NULL								--AS UNAVAILABLE_ON_BREAK_DUR
,NULL								--AS UNAVAILABLE_CALL_BACK_DUR
,NULL								--AS UNAVAILABLE_IDLE_DUR
,NULL								--AS UNAVAILABLE_PERSONAL_TIME_DUR
,NULL								--AS UNAVAILABLE_RR_DUR
,NULL								--AS UNAVAILABLE_SPECIAL_PROJECT_DUR
,NULL								--AS UNAVAILABLE_FLOOR_SUPPORT_DUR
,NULL								--AS UNAVAILABLE_SYSTEM_ISSUES_IT_DUR
,NULL								--AS UNAVAILABLE_EMAIL_DUR

,DBO.GETDATE() --@WS_ROW_CREATED_TIME				--[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL								--[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_2  W2

GROUP BY
 W2.FF_AGENT
,W2.FF_AGENT_STATE
,W2.FF_REASON_CODE
,W2.FTP_FILE_NAME
,W2.INTERVAL_START_TIME

ORDER BY
 MIN(W2.SEQNO)

-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_3 ORDER BY SEQNO

--==================================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_3) TABLE THAT WEREN'T IN IMPORTED FILE:
--==================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_3 SET
 HOUR_INTERVAL = DATEPART(HH, [DATETIME])

--========================================================================================
-- AGENT STATES
--========================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_3 SET
 AVAILABLE_DUR		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Available'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,BUSY_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Busy'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,DIRECT_CALL_DUR	= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'DirectCall'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,DIRECT_OB_DIAL_DUR	= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'DirectOutboundDial'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,OFF_WORK_DUR		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'OffWork'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END	
,UNKNOWN_DUR		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Unknown'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,RONA_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'RingOnNoAnswer'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,INCALL_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'InCall'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,ACW_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'AfterCall'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,RING_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Ringing'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END
,UNAVAILABLE_DUR	= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))  = 'Unavailable'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
					  ELSE 0.00 END

-- AGENT STATES BY REASON CODE

,RONA_SPECIAL_PROJECT_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,''))) = 'RingOnNoAnswer'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'Special Project%'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2))
									  ELSE 0.00 END
,RONA_SYSTEM_ISSUES_IT_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,''))) = 'RingOnNoAnswer'
					  						AND LTRIM(RTRIM(FF_REASON_CODE))			= 'System Issues/IT'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,RONA_IDLE_DUR						= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'RingOnNoAnswer'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'IDLE%'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,RONA_CALL_BACK_DUR					= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'RingOnNoAnswer'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'Call Back%'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,INCALL_IDLE_DUR					= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'InCall'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'IDLE%'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,INCALL_CALL_BACK_DUR				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'InCall'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'Call Back%'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,INCALL_SPECIAL_PROJECT_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'InCall'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'Special Project%'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,INCALL_ON_BREAK_DUR				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'InCall'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE '%Break%'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,ACW_ON_BREAK_DUR					= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'AfterCall'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE '%Break%'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,ACW_CALL_BACK_DUR					= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'AfterCall'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'Call Back%'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,ACW_IDLE_DUR						= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'AfterCall'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'IDLE%'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,ACW_SPECIAL_PROJECT_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'AfterCall'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'Special Project%'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,ACW_FLOOR_SUPPORT_DUR				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'AfterCall'
											AND LTRIM(RTRIM(FF_REASON_CODE))			= 'Floor Support'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,ACW_SYSTEM_ISSUES_IT_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'AfterCall'
											AND LTRIM(RTRIM(FF_REASON_CODE))			= 'System Issues/IT'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,RING_BREAK_DUR						= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Ringing'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE '%Break%'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,RING_SPECIAL_PROJECT_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Ringing'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'Special Project%'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,RING_IDLE_DUR						= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Ringing'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'IDLE%'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,RING_SYSTEM_ISSUES_IT_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Ringing'
											AND LTRIM(RTRIM(FF_REASON_CODE))			= 'System Issues/IT'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,RING_CALL_BACK_DUR					= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Ringing'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'Call Back%'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,UNAVAILABLE_ON_BREAK_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Unavailable'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE '%Break%'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,UNAVAILABLE_CALL_BACK_DUR			= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Unavailable'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'Call Back%'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,UNAVAILABLE_IDLE_DUR				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Unavailable'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'IDLE%'				THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,UNAVAILABLE_PERSONAL_TIME_DUR		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Unavailable'
											AND LTRIM(RTRIM(FF_REASON_CODE))			= 'Personal Time'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,UNAVAILABLE_RR_DUR					= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Unavailable'
											AND LTRIM(RTRIM(FF_REASON_CODE))			= 'RR'					THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,UNAVAILABLE_SPECIAL_PROJECT_DUR	= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Unavailable'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'Special Project%'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,UNAVAILABLE_FLOOR_SUPPORT_DUR		= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Unavailable'
											AND LTRIM(RTRIM(FF_REASON_CODE))			= 'Floor Support'		THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,UNAVAILABLE_SYSTEM_ISSUES_IT_DUR	= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Unavailable'
											AND LTRIM(RTRIM(FF_REASON_CODE))		 LIKE 'System Issues/IT'	THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END
,UNAVAILABLE_EMAIL_DUR				= CASE WHEN LTRIM(RTRIM(ISNULL(FF_AGENT_STATE,'')))	= 'Unavailable'
											AND LTRIM(RTRIM(FF_REASON_CODE))			= 'Email only'			THEN CAST (ISNULL(EVENT_DURATION_IN_INTERVAL_SECS,0.00) AS DECIMAL(10,2)) 
									  ELSE 0.00 END


-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4 ORDER BY SEQNO

--=============================================================================
-- GROUP DATA BY AGENT & INTERVAL
--=============================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4

INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_4
(
 FF_AGENT
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_TIME
,INBOUND_CALLS
,OUTBOUND_CALLS
,TOTAL_CALLS
,LOGGED_IN_DUR
,AVAILABLE_DUR
,BUSY_DUR
,DIRECT_CALL_DUR
,DIRECT_OB_DIAL_DUR
,OFF_WORK_DUR
,UNKNOWN_DUR
,RONA_DUR
,RONA_SPECIAL_PROJECT_DUR
,RONA_SYSTEM_ISSUES_IT_DUR
,RONA_IDLE_DUR
,RONA_CALL_BACK_DUR
,INCALL_DUR
,INCALL_IDLE_DUR
,INCALL_CALL_BACK_DUR
,INCALL_SPECIAL_PROJECT_DUR
,INCALL_ON_BREAK_DUR
,ACW_DUR
,AUTHORIZED_ACW_DUR
,ACW_ON_BREAK_DUR
,ACW_CALL_BACK_DUR
,ACW_IDLE_DUR
,ACW_SPECIAL_PROJECT_DUR
,ACW_FLOOR_SUPPORT_DUR
,ACW_SYSTEM_ISSUES_IT_DUR
,RING_DUR
,RING_BREAK_DUR
,RING_SPECIAL_PROJECT_DUR
,RING_IDLE_DUR
,RING_SYSTEM_ISSUES_IT_DUR
,RING_CALL_BACK_DUR
,UNAVAILABLE_DUR
,UNAVAILABLE_ON_BREAK_DUR
,UNAVAILABLE_CALL_BACK_DUR
,UNAVAILABLE_IDLE_DUR
,UNAVAILABLE_PERSONAL_TIME_DUR
,UNAVAILABLE_RR_DUR
,UNAVAILABLE_SPECIAL_PROJECT_DUR
,UNAVAILABLE_FLOOR_SUPPORT_DUR
,UNAVAILABLE_SYSTEM_ISSUES_IT_DUR
,UNAVAILABLE_EMAIL_DUR
,TOTAL_AVAILABLE
,TOTAL_RING
,TOTAL_TALK
,TOTAL_ACW
,TOTAL_UNAVAILABLE
,TOTAL_RONA
,HANDLE_TIME
,CPROD
,AUTHORIZED
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)														
SELECT
 W3.FF_AGENT											AS FF_AGENT
,SUM(ISNULL(W3.EVENT_DURATION_IN_INTERVAL_SECS, 0.00))	AS EVENT_DURATION_IN_INTERVAL_SECS
 
,MAX(W3.SEQNO_ADDED_TIME)								AS SEQNO_ADDED_TIME
,MIN(W3.SEQNO)											AS SEQNO
,MAX(W3.FTP_FILE_NAME)									AS FTP_FILE_NAME

,NULL													AS RESOURCE_NAME
,W3.[DATETIME]											AS [DATETIME]
,W3.HOUR_INTERVAL										AS HOUR_INTERVAL
,NULL													AS EMPLOYEE_ID
,W3.[DATETIME]											AS STD_TENANT_START_TIME

,SUM(ISNULL(W3.INBOUND_CALLS					,0))	AS INBOUND_CALLS
,SUM(ISNULL(W3.OUTBOUND_CALLS					,0))	AS OUTBOUND_CALLS
,NULL													AS TOTAL_CALLS

,SUM(ISNULL(W3.LOGGED_IN_DUR					,0.00))	AS LOGGED_IN_DUR
,SUM(ISNULL(W3.AVAILABLE_DUR					,0.00))	AS AVAILABLE_DUR
,SUM(ISNULL(W3.BUSY_DUR							,0.00))	AS BUSY_DUR
,SUM(ISNULL(W3.DIRECT_CALL_DUR					,0.00))	AS DIRECT_CALL_DUR
,SUM(ISNULL(W3.DIRECT_OB_DIAL_DUR				,0.00)) AS DIRECT_OB_DIAL_DUR
,SUM(ISNULL(W3.OFF_WORK_DUR						,0.00))	AS OFF_WORK_DUR
,SUM(ISNULL(W3.UNKNOWN_DUR						,0.00))	AS UNKNOWN_DUR
,SUM(ISNULL(W3.RONA_DUR							,0.00))	AS RONA_DUR
,SUM(ISNULL(W3.RONA_SPECIAL_PROJECT_DUR			,0.00))	AS RONA_SPECIAL_PROJECT_DUR
,SUM(ISNULL(W3.RONA_SYSTEM_ISSUES_IT_DUR		,0.00))	AS RONA_SYSTEM_ISSUES_IT_DUR
,SUM(ISNULL(W3.RONA_IDLE_DUR					,0.00))	AS RONA_IDLE_DUR
,SUM(ISNULL(W3.RONA_CALL_BACK_DUR				,0.00))	AS RONA_CALL_BACK_DUR
,SUM(ISNULL(W3.INCALL_DUR						,0.00))	AS INCALL_DUR
,SUM(ISNULL(W3.INCALL_IDLE_DUR					,0.00))	AS INCALL_IDLE_DUR
,SUM(ISNULL(W3.INCALL_CALL_BACK_DUR				,0.00))	AS INCALL_CALL_BACK_DUR
,SUM(ISNULL(W3.INCALL_SPECIAL_PROJECT_DUR		,0.00))	AS INCALL_SPECIAL_PROJECT_DUR
,SUM(ISNULL(W3.INCALL_ON_BREAK_DUR				,0.00))	AS INCALL_ON_BREAK_DUR
,SUM(ISNULL(W3.ACW_DUR							,0.00))	AS ACW_DUR
,NULL													AS AUTHORIZED_ACW_DUR
,SUM(ISNULL(W3.ACW_ON_BREAK_DUR					,0.00))	AS ACW_ON_BREAK_DUR
,SUM(ISNULL(W3.ACW_CALL_BACK_DUR				,0.00))	AS ACW_CALL_BACK_DUR
,SUM(ISNULL(W3.ACW_IDLE_DUR						,0.00))	AS ACW_IDLE_DUR
,SUM(ISNULL(W3.ACW_SPECIAL_PROJECT_DUR			,0.00))	AS ACW_SPECIAL_PROJECT_DUR
,SUM(ISNULL(W3.ACW_FLOOR_SUPPORT_DUR			,0.00))	AS ACW_FLOOR_SUPPORT_DUR
,SUM(ISNULL(W3.ACW_SYSTEM_ISSUES_IT_DUR			,0.00))	AS ACW_SYSTEM_ISSUES_IT_DUR
,SUM(ISNULL(W3.RING_DUR							,0.00))	AS RING_DUR
,SUM(ISNULL(W3.RING_BREAK_DUR					,0.00))	AS RING_BREAK_DUR
,SUM(ISNULL(W3.RING_SPECIAL_PROJECT_DUR			,0.00))	AS RING_SPECIAL_PROJECT_DUR
,SUM(ISNULL(W3.RING_IDLE_DUR					,0.00))	AS RING_IDLE_DUR
,SUM(ISNULL(W3.RING_SYSTEM_ISSUES_IT_DUR		,0.00))	AS RING_SYSTEM_ISSUES_IT_DUR
,SUM(ISNULL(W3.RING_CALL_BACK_DUR				,0.00))	AS RING_CALL_BACK_DUR
,SUM(ISNULL(W3.UNAVAILABLE_DUR					,0.00))	AS UNAVAILABLE_DUR
,SUM(ISNULL(W3.UNAVAILABLE_ON_BREAK_DUR			,0.00))	AS UNAVAILABLE_ON_BREAK_DUR
,SUM(ISNULL(W3.UNAVAILABLE_CALL_BACK_DUR		,0.00))	AS UNAVAILABLE_CALL_BACK_DUR
,SUM(ISNULL(W3.UNAVAILABLE_IDLE_DUR				,0.00))	AS UNAVAILABLE_IDLE_DUR
,SUM(ISNULL(W3.UNAVAILABLE_PERSONAL_TIME_DUR	,0.00))	AS UNAVAILABLE_PERSONAL_TIME_DUR
,SUM(ISNULL(W3.UNAVAILABLE_RR_DUR				,0.00))	AS UNAVAILABLE_RR_DUR
,SUM(ISNULL(W3.UNAVAILABLE_SPECIAL_PROJECT_DUR	,0.00))	AS UNAVAILABLE_SPECIAL_PROJECT_DUR
,SUM(ISNULL(W3.UNAVAILABLE_FLOOR_SUPPORT_DUR	,0.00))	AS UNAVAILABLE_FLOOR_SUPPORT_DUR
,SUM(ISNULL(W3.UNAVAILABLE_SYSTEM_ISSUES_IT_DUR	,0.00))	AS UNAVAILABLE_SYSTEM_ISSUES_IT_DUR
,SUM(ISNULL(W3.UNAVAILABLE_EMAIL_DUR			,0.00))	AS UNAVAILABLE_EMAIL_DUR
,NULL													AS TOTAL_AVAILABLE
,NULL													AS TOTAL_RING
,NULL													AS TOTAL_TALK
,NULL													AS TOTAL_ACW
,NULL													AS TOTAL_UNAVAILABLE
,NULL													AS TOTAL_RONA
,NULL													AS HANDLE_TIME
,NULL													AS CPROD
,NULL													AS AUTHORIZED

,NULL													AS EMAIL
,NULL													AS ID_EXT
,NULL													AS SCHEDULER_ACL_NAME
,NULL													AS STD_TENANT_START_DATE_TIME_KEY
,NULL													AS CAL_DATE
,160													AS TENANT_KEY
,NULL													AS AIR_DAY_TYPE
,NULL													AS AIR_ACW_FONT_COLOR
,NULL													AS MIN_GUARANTEE_MINUTES
,NULL													AS MIN_GUARANTEE_TYPE
,NULL													AS AUTHORIZED_TO_INVOICE_TYPE
,NULL													AS HAS_HOLIDAYS
,NULL													AS INCLUDE_IN_CAS
,NULL													AS READY_FOR_XML
,NULL													AS SHOW_ID_EXTS
,NULL													AS INVOICE_ID

,@WS_ROW_CREATED_TIME									AS WS_ROW_CREATED_TIME
,NULL													AS WS_ROW_UPDATED_TIME

FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_3  W3

GROUP BY
 W3.FF_AGENT
,W3.[DATETIME]
,W3.HOUR_INTERVAL

ORDER BY
 MIN(W3.SEQNO)

--========================================================================
--UPDATE ADDITIONAL FIELDS IN WORK (_4) TABLE
--========================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 RESOURCE_NAME	= ISNULL(FF_AGENT,'')
,EMPLOYEE_ID	= ISNULL(FF_AGENT,'')
,TOTAL_CALLS	= INBOUND_CALLS + OUTBOUND_CALLS

--CONVERT DATETIME VALUES FROM EASTERN TO CENTRAL TIME
,[DATETIME]				= DATEADD(HH, -1, [DATETIME])
,STD_TENANT_START_TIME	= DATEADD(HH, -1, [DATETIME])

UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 HOUR_INTERVAL = DATEPART(HH, [DATETIME])

--=================================================================================================
--SET DATE_TIME KEY
--=================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_4      I
INNER JOIN      DATE_TIME                             DT   ON DT.CAL_DATE = I.[DATETIME]

-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4 ORDER BY SEQNO

--=================================================================================================
-- POPULATE AUTHORIZED_ACW_DUR FROM ACW WORK TABLE
--=================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 AUTHORIZED_ACW_DUR = ISNULL(A3.AUTHORIZED_ACW,0.00)
--SELECT *
FROM  WSOL_TB_IMPORTS_MONAT_INVOICING_3_ACW	A3
INNER JOIN WSOL_TB_IMPORTS_MONAT_INVOICING_4	W4 ON A3.FF_AGENT	 =  W4.FF_AGENT
												  AND A3.[DATETIME]	 =  W4.[DATETIME]

UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 AUTHORIZED_ACW_DUR = ISNULL(AUTHORIZED_ACW_DUR, 0.00)

--=================================================================================================
--UPDATE ADDITIONAL TOTALS FOR INVOICING
--=================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 TOTAL_AVAILABLE	= AVAILABLE_DUR
,TOTAL_RING			= RING_DUR
,TOTAL_TALK			= DIRECT_CALL_DUR + INCALL_DUR + DIRECT_OB_DIAL_DUR
,TOTAL_ACW			= CASE WHEN ACW_DUR < AUTHORIZED_ACW_DUR THEN ACW_DUR
						   ELSE AUTHORIZED_ACW_DUR END
,TOTAL_RONA			= RONA_DUR
,TOTAL_UNAVAILABLE	= UNAVAILABLE_SPECIAL_PROJECT_DUR + UNAVAILABLE_SYSTEM_ISSUES_IT_DUR + UNAVAILABLE_CALL_BACK_DUR  + UNAVAILABLE_EMAIL_DUR -- BILLABLE TIME
					  -- UNAVAILABLE_FLOOR_SUPPORT_DUR ADDED FOR RESOURCE AGENTS BELOW

UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 LOGGED_IN_DUR	= AVAILABLE_DUR + DIRECT_CALL_DUR + ISNULL(DIRECT_OB_DIAL_DUR,0.00) + RONA_DUR + INCALL_DUR + ACW_DUR + RING_DUR + UNAVAILABLE_DUR
,HANDLE_TIME	= DIRECT_CALL_DUR + ISNULL(DIRECT_OB_DIAL_DUR,0.00) + INCALL_DUR + ACW_DUR + RING_DUR

-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4 ORDER BY SEQNO

--=============================================================================
--SET SQL AGENT MAPPING FIELDS
--=============================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
  EMAIL			= ISNULL(IAM.EMAIL,'')
 ,ID_EXT		= CASE WHEN IAM.INVOICE_GROUP = 'RES' THEN 'MRA'
					   WHEN IAM.INVOICE_GROUP = 'FC'  THEN 'MFC'
					   WHEN IAM.INVOICE_GROUP = ''	  THEN 'MSA'
					   ELSE '' END
-- ,PAY_GROUP		= ISNULL(IAM.PAY_GROUP,0)
 ,RESOURCE_NAME	= ISNULL(IAM.RESOURCE_NAME,'')
 FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_4			I
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_AIA_AGENT_MAPPING	IAM  ON IAM.INVOICE_MAP_KEY = I.FF_AGENT

--==================================================================================
--ONLY RESOURCE AGENTS CAN BILL FOR UNAVAILABLE - FLOOR SUPPORT TIME
--==================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 TOTAL_UNAVAILABLE = TOTAL_UNAVAILABLE + UNAVAILABLE_FLOOR_SUPPORT_DUR
WHERE ID_EXT = 'MRA'

UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 SCHEDULER_ACL_NAME = CASE WHEN ID_EXT = 'MRA' THEN 'Monat Global Resource Agents'
						   WHEN ID_EXT = 'MFC' THEN 'Monat Global French Canadian Standard Agents'
						   WHEN ID_EXT = 'MSA' THEN 'Monat Global Standard Agents'
						   ELSE '' END

--=================================================================================================
--UPDATE FOR WEEKEND RATES
--=================================================================================================
SET DATEFIRST 1  -- = Monday  

UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 ID_EXT = CASE WHEN (ID_EXT IN ('MFC','MSA') AND DATEPART(dw, [DATETIME]) IN (6, 7)) THEN
				CASE WHEN ID_EXT = 'MFC' THEN 'MFW'
				     WHEN ID_EXT = 'MSA' THEN 'MSW'
					 ELSE ID_EXT
				END
			   ELSE ID_EXT
		  END

--==================================================================================
--CONTINUE INVOICE FIELD UPDATES
--==================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET --SELECT
  AIR_DAY_TYPE = CASE WHEN IG.HAS_HOLIDAYS = 'Y' AND
						 (    ISNULL(IH.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) OR
						   ( ISNULL(IHA.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) AND ISNULL(IHA.ID_EXT,'') <> '' )
						 )
					  THEN 'H' ELSE 'S' END  --AS AIR_DAY_TYPE  --H=Holiday  --S=Standard
 FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_4				I
 INNER JOIN      DATE_TIME										DT   ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_INVOICE_GROUPS		IG   ON IG.ID_EXT              = I.ID_EXT
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_INVOICE_HOLIDAYS		IH   ON IH.HOLIDAY_DATE        = CAST(DT.CAL_DATE_STRING AS DATETIME)
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_INVOICE_HOLIDAYS_ADDL	IHA  ON IHA.HOLIDAY_DATE       = CAST(DT.CAL_DATE_STRING AS DATETIME)
																	AND IHA.ID_EXT             = I.ID_EXT

--==================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
  AIR_ACW_FONT_COLOR             = 'Black'
 ,MIN_GUARANTEE_MINUTES          = ISNULL(IG.MIN_GUARANTEE_MINUTES,0)        --varies between scheduler acl names.
 ,MIN_GUARANTEE_TYPE             = ISNULL(IG.MIN_GUARANTEE_TYPE,'')          --varies between scheduler acl names.
 ,AUTHORIZED_TO_INVOICE_TYPE     = ISNULL(IG.AUTHORIZED_TO_INVOICE_TYPE,'')  --varies between scheduler acl names.

 ,HAS_HOLIDAYS    = IG.HAS_HOLIDAYS
 ,INCLUDE_IN_CAS  = IG.INCLUDE_IN_CAS
 ,READY_FOR_XML   = IG.READY_FOR_XML
 ,SHOW_ID_EXTS    = IG.SHOW_ID_EXTS
 FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_4			I
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_INVOICE_GROUPS	IG  ON IG.ID_EXT    = I.ID_EXT

--==================================================================================
 UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
   INVOICE_ID         = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
--  ,SCHEDULER_ACL_NAME = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
 FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_4	            AIA 
 LEFT JOIN       WSOL_TB_IMPORTS_MONAT_SD_AIA_STATIC_DEFAULTS	AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT

--================================
--DATA INTEGRITY CHECK(S):
--================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''

--Check #1:  ============================================================================================================================================================
	SET @RCD_CNT = ( SELECT COUNT(*) FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4 )
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #1 FAILED! - File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #2:  ============================================================================================================================================================
	SET @RCD_CNT = ( SELECT COUNT(*) FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4 WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0 )  
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #2 FAILED! - Invalid DATETIME intervals in MONAT INVOICING IMPORT File.  Import was Cancelled.  Nothing was Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #3:  ============================================================================================================================================================
	SET @RCD_CNT = ( SELECT COUNT(*) FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4 WHERE ISNULL(FF_AGENT,'') = '' )  
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + 'CHECK #3 FAILED! - Blank AGENT NAME(s) in MONAT INVOICING IMPORT File exist(s).  Import was Cancelled.  Nothing was Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END

--======================= ********** INSERT INTO PERMANENT TABLE (IF NO ERRORS FOUND), OR SKIP AND GO TO END (ERRORS FOUND) ********** ==================================
IF @ERR_CNT > 0 BEGIN
INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
(
 TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'MONAT_INVOICING'	--SUB_GROUP_NAME
	,@MSG1				--ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	--MUST RETURN AT LEAST ONE RECORD TO SSIS
INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'MONAT_INVOICING'	--SUB_GROUP_NAME
	,''					--ERROR_MSG
END
--=======================================================================================================================================================================

--==================================================================================
-- CALCULATE PAYMENT VALUES
--==================================================================================
-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4 ORDER BY SEQNO
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 CPROD = TOTAL_AVAILABLE + TOTAL_RING + TOTAL_TALK + TOTAL_ACW + TOTAL_UNAVAILABLE

UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_4 SET
 AUTHORIZED	= CASE WHEN CPROD > 3600.00 THEN 3600.00 ELSE CPROD END	

--===============================================
SET DATEFIRST 1  -- = Monday  
--===============================================
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME
,@DTM_MAX  DATETIME

SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN([DATETIME]) FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4))
SET @DTM_MAX = DATEADD(hh, 0,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_MONAT_INVOICING_4))


--=============================================================================
-- UPDATE PERMANENT TABLE - IF DATA FROM SAME DATA SOURCE (FTP FILE)
--=============================================================================

UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_NEW SET
-- FF_AGENT							= W4.FF_AGENT
 EVENT_DURATION_IN_INTERVAL_SECS	= W4.EVENT_DURATION_IN_INTERVAL_SECS

,SEQNO_ADDED_TIME					= W4.SEQNO_ADDED_TIME
,SEQNO								= W4.SEQNO
,FTP_FILE_NAME						= W4.FTP_FILE_NAME

,RESOURCE_NAME						= W4.RESOURCE_NAME					
,[DATETIME]							= W4.[DATETIME]
,HOUR_INTERVAL						= W4.HOUR_INTERVAL
,EMPLOYEE_ID						= W4.EMPLOYEE_ID
,STD_TENANT_START_TIME				= W4.STD_TENANT_START_TIME

,INBOUND_CALLS						= W4.INBOUND_CALLS
,OUTBOUND_CALLS						= W4.OUTBOUND_CALLS
,TOTAL_CALLS						= W4.TOTAL_CALLS

,LOGGED_IN_DUR						= W4.LOGGED_IN_DUR
,AVAILABLE_DUR						= W4.AVAILABLE_DUR
,BUSY_DUR							= W4.BUSY_DUR
,DIRECT_CALL_DUR					= W4.DIRECT_CALL_DUR
,DIRECT_OB_DIAL_DUR					= W4.DIRECT_OB_DIAL_DUR
,OFF_WORK_DUR						= W4.OFF_WORK_DUR
,UNKNOWN_DUR						= W4.UNKNOWN_DUR
,RONA_DUR							= W4.RONA_DUR
,RONA_SPECIAL_PROJECT_DUR			= W4.RONA_SPECIAL_PROJECT_DUR
,RONA_SYSTEM_ISSUES_IT_DUR			= W4.RONA_SYSTEM_ISSUES_IT_DUR
,RONA_IDLE_DUR						= W4.RONA_IDLE_DUR
,RONA_CALL_BACK_DUR					= W4.RONA_CALL_BACK_DUR
,INCALL_DUR							= W4.INCALL_DUR
,INCALL_IDLE_DUR					= W4.INCALL_IDLE_DUR
,INCALL_CALL_BACK_DUR				= W4.INCALL_CALL_BACK_DUR
,INCALL_SPECIAL_PROJECT_DUR			= W4.INCALL_SPECIAL_PROJECT_DUR
,INCALL_ON_BREAK_DUR				= W4.INCALL_ON_BREAK_DUR
,ACW_DUR							= W4.ACW_DUR
,AUTHORIZED_ACW_DUR					= W4.AUTHORIZED_ACW_DUR
,ACW_ON_BREAK_DUR					= W4.ACW_ON_BREAK_DUR
,ACW_CALL_BACK_DUR					= W4.ACW_CALL_BACK_DUR
,ACW_IDLE_DUR						= W4.ACW_IDLE_DUR
,ACW_SPECIAL_PROJECT_DUR			= W4.ACW_SPECIAL_PROJECT_DUR
,ACW_FLOOR_SUPPORT_DUR				= W4.ACW_FLOOR_SUPPORT_DUR
,ACW_SYSTEM_ISSUES_IT_DUR			= W4.ACW_SYSTEM_ISSUES_IT_DUR
,RING_DUR							= W4.RING_DUR
,RING_BREAK_DUR						= W4.RING_BREAK_DUR
,RING_SPECIAL_PROJECT_DUR			= W4.RING_SPECIAL_PROJECT_DUR
,RING_IDLE_DUR						= W4.RING_IDLE_DUR
,RING_SYSTEM_ISSUES_IT_DUR			= W4.RING_SYSTEM_ISSUES_IT_DUR
,RING_CALL_BACK_DUR					= W4.RING_CALL_BACK_DUR
,UNAVAILABLE_DUR					= W4.UNAVAILABLE_DUR
,UNAVAILABLE_ON_BREAK_DUR			= W4.UNAVAILABLE_ON_BREAK_DUR
,UNAVAILABLE_CALL_BACK_DUR			= W4.UNAVAILABLE_CALL_BACK_DUR
,UNAVAILABLE_IDLE_DUR				= W4.UNAVAILABLE_IDLE_DUR
,UNAVAILABLE_PERSONAL_TIME_DUR		= W4.UNAVAILABLE_PERSONAL_TIME_DUR
,UNAVAILABLE_RR_DUR					= W4.UNAVAILABLE_RR_DUR
,UNAVAILABLE_SPECIAL_PROJECT_DUR	= W4.UNAVAILABLE_SPECIAL_PROJECT_DUR
,UNAVAILABLE_FLOOR_SUPPORT_DUR		= W4.UNAVAILABLE_FLOOR_SUPPORT_DUR
,UNAVAILABLE_SYSTEM_ISSUES_IT_DUR	= W4.UNAVAILABLE_SYSTEM_ISSUES_IT_DUR
,UNAVAILABLE_EMAIL_DUR				= W4.UNAVAILABLE_EMAIL_DUR
,TOTAL_AVAILABLE					= W4.TOTAL_AVAILABLE
,TOTAL_RING							= W4.TOTAL_RING
,TOTAL_TALK							= W4.TOTAL_TALK
,TOTAL_ACW							= W4.TOTAL_ACW
,TOTAL_UNAVAILABLE					= W4.TOTAL_UNAVAILABLE
,TOTAL_RONA							= W4.TOTAL_RONA
,HANDLE_TIME						= W4.HANDLE_TIME
,CPROD								= W4.CPROD
,AUTHORIZED							= W4.AUTHORIZED
,EMAIL								= W4.EMAIL
--,ID_EXT							= W4.ID_EXT
,SCHEDULER_ACL_NAME					= W4.SCHEDULER_ACL_NAME
--,STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W4.CAL_DATE
,TENANT_KEY							= W4.TENANT_KEY
,AIR_DAY_TYPE						= W4.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W4.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES				= W4.MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE					= W4.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W4.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W4.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W4.INCLUDE_IN_CAS
,READY_FOR_XML						= W4.READY_FOR_XML
,SHOW_ID_EXTS						= W4.SHOW_ID_EXTS
--,INVOICE_ID						= W4.INVOICE_ID
,WS_ROW_CREATED_TIME				= NULL
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_4		W4
INNER JOIN      WSOL_TB_IMPORTS_MONAT_INVOICING_NEW		G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
														   AND G.FF_AGENT						= W4.FF_AGENT
														   AND G.ID_EXT							= W4.ID_EXT
														   AND G.INVOICE_ID						= W4.INVOICE_ID

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_AGENT						= W4.FF_AGENT
  AND G.ID_EXT							= W4.ID_EXT
  AND G.INVOICE_ID						= W4.INVOICE_ID
--  AND G.FTP_FILE_NAME					= W4.FTP_FILE_NAME	--<<<<< ONLY RECORDS FROM THE SAME FTP FILE

--=============================================================================
-- UPDATE PERMANENT TABLE - IF DATA FROM DIFFERENT DATA SOURCE (FTP FILE)
--=============================================================================
/*
UPDATE WSOL_TB_IMPORTS_MONAT_INVOICING_NEW SET
-- FF_AGENT							= W4.FF_AGENT
 EVENT_DURATION_IN_INTERVAL_SECS	= CAST(G.EVENT_DURATION_IN_INTERVAL_SECS AS INT) + CAST(W4.EVENT_DURATION_IN_INTERVAL_SECS AS INT)

,SEQNO_ADDED_TIME					= W4.SEQNO_ADDED_TIME
,SEQNO								= W4.SEQNO
,FTP_FILE_NAME						= W4.FTP_FILE_NAME

,RESOURCE_NAME						= W4.RESOURCE_NAME					
,[DATETIME]							= W4.[DATETIME]
,HOUR_INTERVAL						= W4.HOUR_INTERVAL
,EMPLOYEE_ID						= W4.EMPLOYEE_ID
,STD_TENANT_START_TIME				= W4.STD_TENANT_START_TIME

,INBOUND_CALLS						= G.INBOUND_CALLS						+ W4.INBOUND_CALLS			
,OUTBOUND_CALLS						= G.OUTBOUND_CALLS						+ W4.OUTBOUND_CALLS
,TOTAL_CALLS						= G.TOTAL_CALLS							+ W4.TOTAL_CALLS

,LOGGED_IN_DUR						= G.LOGGED_IN_DUR						+ W4.LOGGED_IN_DUR
,AVAILABLE_DUR						= G.AVAILABLE_DUR						+ W4.AVAILABLE_DUR
,BUSY_DUR							= G.BUSY_DUR							+ W4.BUSY_DUR
,DIRECT_CALL_DUR					= G.DIRECT_CALL_DUR						+ W4.DIRECT_CALL_DUR
,DIRECT_OB_DIAL_DUR					= G.DIRECT_OB_DIAL_DUR					+ W4.DIRECT_OB_DIAL_DUR
,OFF_WORK_DUR						= G.OFF_WORK_DUR						+ W4.OFF_WORK_DUR
,UNKNOWN_DUR						= G.UNKNOWN_DUR							+ W4.UNKNOWN_DUR
,RONA_DUR							= G.RONA_DUR							+ W4.RONA_DUR
,RONA_SPECIAL_PROJECT_DUR			= G.RONA_SPECIAL_PROJECT_DUR			+ W4.RONA_SPECIAL_PROJECT_DUR
,RONA_SYSTEM_ISSUES_IT_DUR			= G.RONA_SYSTEM_ISSUES_IT_DUR			+ W4.RONA_SYSTEM_ISSUES_IT_DUR
,RONA_IDLE_DUR						= G.RONA_IDLE_DUR						+ W4.RONA_IDLE_DUR
,RONA_CALL_BACK_DUR					= G.RONA_CALL_BACK_DUR					+ W4.RONA_CALL_BACK_DUR
,INCALL_DUR							= G.INCALL_DUR							+ W4.INCALL_DUR
,INCALL_IDLE_DUR					= G.INCALL_IDLE_DUR						+ W4.INCALL_IDLE_DUR
,INCALL_CALL_BACK_DUR				= G.INCALL_CALL_BACK_DUR				+ W4.INCALL_CALL_BACK_DUR
,INCALL_SPECIAL_PROJECT_DUR			= G.INCALL_SPECIAL_PROJECT_DUR			+ W4.INCALL_SPECIAL_PROJECT_DUR
,INCALL_ON_BREAK_DUR				= G.INCALL_ON_BREAK_DUR					+ W4.INCALL_ON_BREAK_DUR
,ACW_DUR							= G.ACW_DUR								+ W4.ACW_DUR
,AUTHORIZED_ACW_DUR					= G.AUTHORIZED_ACW_DUR					+ W4.AUTHORIZED_ACW_DUR
,ACW_ON_BREAK_DUR					= G.ACW_ON_BREAK_DUR					+ W4.ACW_ON_BREAK_DUR
,ACW_CALL_BACK_DUR					= G.ACW_CALL_BACK_DUR					+ W4.ACW_CALL_BACK_DUR
,ACW_IDLE_DUR						= G.ACW_IDLE_DUR						+ W4.ACW_IDLE_DUR
,ACW_SPECIAL_PROJECT_DUR			= G.ACW_SPECIAL_PROJECT_DUR				+ W4.ACW_SPECIAL_PROJECT_DUR
,ACW_FLOOR_SUPPORT_DUR				= G.ACW_FLOOR_SUPPORT_DUR				+ W4.ACW_FLOOR_SUPPORT_DUR
,ACW_SYSTEM_ISSUES_IT_DUR			= G.ACW_SYSTEM_ISSUES_IT_DUR			+ W4.ACW_SYSTEM_ISSUES_IT_DUR
,RING_DUR							= G.RING_DUR							+ W4.RING_DUR
,RING_BREAK_DUR						= G.RING_BREAK_DUR						+ W4.RING_BREAK_DUR
,RING_SPECIAL_PROJECT_DUR			= G.RING_SPECIAL_PROJECT_DUR			+ W4.RING_SPECIAL_PROJECT_DUR
,RING_IDLE_DUR						= G.RING_IDLE_DUR						+ W4.RING_IDLE_DUR
,RING_SYSTEM_ISSUES_IT_DUR			= G.RING_SYSTEM_ISSUES_IT_DUR			+ W4.RING_SYSTEM_ISSUES_IT_DUR
,RING_CALL_BACK_DUR					= G.RING_CALL_BACK_DUR					+ W4.RING_CALL_BACK_DUR
,UNAVAILABLE_DUR					= G.UNAVAILABLE_DUR						+ W4.UNAVAILABLE_DUR
,UNAVAILABLE_ON_BREAK_DUR			= G.UNAVAILABLE_ON_BREAK_DUR			+ W4.UNAVAILABLE_ON_BREAK_DUR
,UNAVAILABLE_CALL_BACK_DUR			= G.UNAVAILABLE_CALL_BACK_DUR			+ W4.UNAVAILABLE_CALL_BACK_DUR
,UNAVAILABLE_IDLE_DUR				= G.UNAVAILABLE_IDLE_DUR				+ W4.UNAVAILABLE_IDLE_DUR
,UNAVAILABLE_PERSONAL_TIME_DUR		= G.UNAVAILABLE_PERSONAL_TIME_DUR		+ W4.UNAVAILABLE_PERSONAL_TIME_DUR
,UNAVAILABLE_RR_DUR					= G.UNAVAILABLE_RR_DUR					+ W4.UNAVAILABLE_RR_DUR
,UNAVAILABLE_SPECIAL_PROJECT_DUR	= G.UNAVAILABLE_SPECIAL_PROJECT_DUR		+ W4.UNAVAILABLE_SPECIAL_PROJECT_DUR
,UNAVAILABLE_FLOOR_SUPPORT_DUR		= G.UNAVAILABLE_FLOOR_SUPPORT_DUR		+ W4.UNAVAILABLE_FLOOR_SUPPORT_DUR
,UNAVAILABLE_SYSTEM_ISSUES_IT_DUR	= G.UNAVAILABLE_SYSTEM_ISSUES_IT_DUR	+ W4.UNAVAILABLE_SYSTEM_ISSUES_IT_DUR
,UNAVAILABLE_EMAIL_DUR				= G.UNAVAILABLE_EMAIL_DUR				+ W4.UNAVAILABLE_EMAIL_DUR
,TOTAL_AVAILABLE					= G.TOTAL_AVAILABLE						+ W4.TOTAL_AVAILABLE
,TOTAL_RING							= G.TOTAL_RING							+ W4.TOTAL_RING
,TOTAL_TALK							= G.TOTAL_TALK							+ W4.TOTAL_TALK
,TOTAL_ACW							= G.TOTAL_ACW							+ W4.TOTAL_ACW
,TOTAL_UNAVAILABLE					= G.TOTAL_UNAVAILABLE					+ W4.TOTAL_UNAVAILABLE
,TOTAL_RONA							= G.TOTAL_RONA							+ W4.TOTAL_RONA
,CPROD								= G.CPROD								+ W4.CPROD
,AUTHORIZED							= G.AUTHORIZED							+ W4.AUTHORIZED
,EMAIL								= W4.EMAIL
--,ID_EXT							= W4.ID_EXT
,SCHEDULER_ACL_NAME					= W4.SCHEDULER_ACL_NAME
--,STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W4.CAL_DATE
,TENANT_KEY							= W4.TENANT_KEY
,AIR_DAY_TYPE						= W4.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W4.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES				= W4.MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE					= W4.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W4.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W4.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W4.INCLUDE_IN_CAS
,READY_FOR_XML						= W4.READY_FOR_XML
,SHOW_ID_EXTS						= W4.SHOW_ID_EXTS
--,INVOICE_ID						= W4.INVOICE_ID
,WS_ROW_CREATED_TIME				= G.WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_4		W4
INNER JOIN      WSOL_TB_IMPORTS_MONAT_INVOICING_NEW		G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
														   AND G.FF_AGENT						= W4.FF_AGENT
														   AND G.ID_EXT							= W4.ID_EXT
														   AND G.INVOICE_ID						= W4.INVOICE_ID

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY	 = W4.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_AGENT						 = W4.FF_AGENT
  AND G.ID_EXT							 = W4.ID_EXT
  AND G.INVOICE_ID						 = W4.INVOICE_ID
  AND G.FTP_FILE_NAME					<> W4.FTP_FILE_NAME  --<<<< ONLY RECORDS FROM A DIFFERENT FTP FILE
*/
--==========================================
--INSERT INTO PERMANENT IMPORT TABLE: 
--==========================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_INVOICING_NEW
(FF_AGENT
,EVENT_DURATION_IN_INTERVAL_SECS
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,RESOURCE_NAME
,[DATETIME]
,HOUR_INTERVAL
,EMPLOYEE_ID
,STD_TENANT_START_TIME
,INBOUND_CALLS
,OUTBOUND_CALLS
,TOTAL_CALLS
,LOGGED_IN_DUR
,AVAILABLE_DUR
,BUSY_DUR
,DIRECT_CALL_DUR
,DIRECT_OB_DIAL_DUR
,OFF_WORK_DUR
,UNKNOWN_DUR
,RONA_DUR
,RONA_SPECIAL_PROJECT_DUR
,RONA_SYSTEM_ISSUES_IT_DUR
,RONA_IDLE_DUR
,RONA_CALL_BACK_DUR
,INCALL_DUR
,INCALL_IDLE_DUR
,INCALL_CALL_BACK_DUR
,INCALL_SPECIAL_PROJECT_DUR
,INCALL_ON_BREAK_DUR
,ACW_DUR
,AUTHORIZED_ACW_DUR
,ACW_ON_BREAK_DUR
,ACW_CALL_BACK_DUR
,ACW_IDLE_DUR
,ACW_SPECIAL_PROJECT_DUR
,ACW_FLOOR_SUPPORT_DUR
,ACW_SYSTEM_ISSUES_IT_DUR
,RING_DUR
,RING_BREAK_DUR
,RING_SPECIAL_PROJECT_DUR
,RING_IDLE_DUR
,RING_SYSTEM_ISSUES_IT_DUR
,RING_CALL_BACK_DUR
,UNAVAILABLE_DUR
,UNAVAILABLE_ON_BREAK_DUR
,UNAVAILABLE_CALL_BACK_DUR
,UNAVAILABLE_IDLE_DUR
,UNAVAILABLE_PERSONAL_TIME_DUR
,UNAVAILABLE_RR_DUR
,UNAVAILABLE_SPECIAL_PROJECT_DUR
,UNAVAILABLE_FLOOR_SUPPORT_DUR
,UNAVAILABLE_SYSTEM_ISSUES_IT_DUR
,UNAVAILABLE_EMAIL_DUR
,TOTAL_AVAILABLE
,TOTAL_RING
,TOTAL_TALK
,TOTAL_ACW
,TOTAL_UNAVAILABLE
,TOTAL_RONA
,HANDLE_TIME
,CPROD
,AUTHORIZED
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W4.FF_AGENT
,W4.EVENT_DURATION_IN_INTERVAL_SECS
,W4.SEQNO_ADDED_TIME
,W4.SEQNO
,W4.FTP_FILE_NAME
,W4.RESOURCE_NAME
,W4.[DATETIME]
,W4.HOUR_INTERVAL
,W4.EMPLOYEE_ID
,W4.STD_TENANT_START_TIME
,W4.INBOUND_CALLS
,W4.OUTBOUND_CALLS
,W4.TOTAL_CALLS
,W4.LOGGED_IN_DUR
,W4.AVAILABLE_DUR
,W4.BUSY_DUR
,W4.DIRECT_CALL_DUR
,W4.DIRECT_OB_DIAL_DUR
,W4.OFF_WORK_DUR
,W4.UNKNOWN_DUR
,W4.RONA_DUR
,W4.RONA_SPECIAL_PROJECT_DUR
,W4.RONA_SYSTEM_ISSUES_IT_DUR
,W4.RONA_IDLE_DUR
,W4.RONA_CALL_BACK_DUR
,W4.INCALL_DUR
,W4.INCALL_IDLE_DUR
,W4.INCALL_CALL_BACK_DUR
,W4.INCALL_SPECIAL_PROJECT_DUR
,W4.INCALL_ON_BREAK_DUR
,W4.ACW_DUR
,W4.AUTHORIZED_ACW_DUR
,W4.ACW_ON_BREAK_DUR
,W4.ACW_CALL_BACK_DUR
,W4.ACW_IDLE_DUR
,W4.ACW_SPECIAL_PROJECT_DUR
,W4.ACW_FLOOR_SUPPORT_DUR
,W4.ACW_SYSTEM_ISSUES_IT_DUR
,W4.RING_DUR
,W4.RING_BREAK_DUR
,W4.RING_SPECIAL_PROJECT_DUR
,W4.RING_IDLE_DUR
,W4.RING_SYSTEM_ISSUES_IT_DUR
,W4.RING_CALL_BACK_DUR
,W4.UNAVAILABLE_DUR
,W4.UNAVAILABLE_ON_BREAK_DUR
,W4.UNAVAILABLE_CALL_BACK_DUR
,W4.UNAVAILABLE_IDLE_DUR
,W4.UNAVAILABLE_PERSONAL_TIME_DUR
,W4.UNAVAILABLE_RR_DUR
,W4.UNAVAILABLE_SPECIAL_PROJECT_DUR
,W4.UNAVAILABLE_FLOOR_SUPPORT_DUR
,W4.UNAVAILABLE_SYSTEM_ISSUES_IT_DUR
,W4.UNAVAILABLE_EMAIL_DUR
,W4.TOTAL_AVAILABLE
,W4.TOTAL_RING
,W4.TOTAL_TALK
,W4.TOTAL_ACW
,W4.TOTAL_UNAVAILABLE
,W4.TOTAL_RONA
,W4.HANDLE_TIME
,W4.CPROD
,W4.AUTHORIZED
,W4.EMAIL
,W4.ID_EXT
,W4.SCHEDULER_ACL_NAME
,W4.STD_TENANT_START_DATE_TIME_KEY
,W4.CAL_DATE
,W4.TENANT_KEY
,W4.AIR_DAY_TYPE
,W4.AIR_ACW_FONT_COLOR
,W4.MIN_GUARANTEE_MINUTES
,W4.MIN_GUARANTEE_TYPE
,W4.AUTHORIZED_TO_INVOICE_TYPE
,W4.HAS_HOLIDAYS
,W4.INCLUDE_IN_CAS
,W4.READY_FOR_XML
,W4.SHOW_ID_EXTS
,W4.INVOICE_ID

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_4		W4

LEFT JOIN       WSOL_TB_IMPORTS_MONAT_INVOICING_NEW		G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W4.STD_TENANT_START_DATE_TIME_KEY
														   AND G.FF_AGENT						= W4.FF_AGENT
														   AND G.ID_EXT							= W4.ID_EXT
														   AND G.INVOICE_ID						= W4.INVOICE_ID
														 
WHERE ( G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W4.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( G.FF_AGENT							IS NULL AND ISNULL(W4.FF_AGENT,'') <> '' )
  AND ( G.ID_EXT							IS NULL AND ISNULL(W4.ID_EXT,'') <> '' )
  AND ( G.INVOICE_ID						IS NULL AND ISNULL(W4.INVOICE_ID,'') <> '' )

-- SELECT * FROM WSOL_TB_IMPORTS_MONAT_INVOICING_NEW
--==========================================
SET DATEFIRST 1  -- = Monday  
--==========================================

--===============================================================================================================================
IF OBJECT_ID('TEMPDB..#DT_EASY_WEEKS') IS NOT NULL BEGIN
   DROP TABLE #DT_EASY_WEEKS
END
CREATE TABLE #DT_EASY_WEEKS
(CAL_DATE_STRING      VARCHAR(10)
,CAL_WEEK_START_DATE  DATETIME
,CAL_WEEK_END_DATE    DATETIME
,PAY_CYCLE_CLOSURE_DATE DATETIME
)
INSERT INTO #DT_EASY_WEEKS
SELECT
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
FROM DATE_TIME DT
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
GROUP BY 
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE 
--===========================
UPDATE #DT_EASY_WEEKS SET CAL_WEEK_END_DATE = DATEADD(DD,6,CAL_WEEK_START_DATE)
UPDATE #DT_EASY_WEEKS SET
 PAY_CYCLE_CLOSURE_DATE = (CASE WHEN (DATEDIFF(DD,CAST('04/27/2014' AS DATETIME),CAL_WEEK_END_DATE) % 14) = 0 THEN
									CAL_WEEK_END_DATE
								ELSE
									DATEADD(DD,7,CAL_WEEK_END_DATE)
								END)


--====================================================================================================================================
--CREATE TEMP TABLE TO HOLD NORMALIZED DATA STRUCTURE
--====================================================================================================================================
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA
END
CREATE TABLE #WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](100) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.FF_AGENT  --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING				--[DATE]             
,DT.LABEL_HH24 + ':00'			--HOD_INTERVAL

,AIA.LOGGED_IN_DUR										--AU_DK_LOGGED_IN_DURATION
,AIA.AVAILABLE_DUR										--AU_DK_AVAILABLE_DURATION

,AIA.RING_DUR + AIA.INCALL_DUR + AIA.DIRECT_OB_DIAL_DUR + DIRECT_CALL_DUR	--AU_DK_TALK_DURATION
,0														--AU_DK_IB_TALK_DURATION
,0														--AU_DK_OB_TALK_DURATION

,AIA.TOTAL_ACW											--AU_DK_CONVENTIONAL_ACW
,AIA.UNAVAILABLE_DUR							 		--AU_DK_NR_DURATION
,0														--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0														--AU_DK_ADJUSTED_NR_DURATION
,AIA.CPROD												--AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.CPROD												--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS  

,0		--AU_DK_XFER_COUNT
,0		--AU_DK_HOLD_COUNT
,0		--AU_DK_CONFERENCE_COUNT
,0		--AU_DK_CONSULT_COUNT
,0		--AU_DK_PUP_COUNT

,0		--AU_DK_OFFERED_COUNT
,0		--AU_DK_HANDLED_COUNT
,0		--AU_DK_IB_HANDLE_COUNT
,0		--AU_DK_OB_HANDLE_COUNT
													
,0		--AU_DK_RONA_COUNT
,0		--AU_DK_AWR_COUNT

,AIA.AUTHORIZED	--MINIMUM_GUARANTEE
,AIA.AUTHORIZED	--AUTHORIZED_TO_INVOICE

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_MINUTES
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID  --CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID 
,AIA.RESOURCE_NAME
,NULL			--AIA.AIRITKDUR
,NULL			--AIA.AIRIACDUR
,DBO.GETDATE()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL			--	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
--SELECT TOP 1000 *
FROM            WSOL_TB_IMPORTS_MONAT_INVOICING_4            AIA 
INNER JOIN      WSOL_TB_IMPORTS_MONAT_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      WSOL_TB_IMPORTS_MONAT_SD_INVOICE_GROUPS      CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME									 DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS								DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')
  AND (ISNULL(AIA.RESOURCE_NAME,'') <> '')
  AND AIA.AUTHORIZED <> 0.00											--<<<<<---- FILTER OUT RECORDS WHERE AUTHORIZED TIME = 0.00


--============================================================================================
--UPDATE WSOL_TB_...UV_ANT_AIA TABLE - IF DATA FROM THE SAME DATA SOURCE (FTP FILE)
--============================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA SET
 [PLATFORM]							= W1.[PLATFORM]
,[STATUS]							= W1.[STATUS]
--,INVOICE_MAP_KEY					= W1.INVOICE_MAP_KEY
,FIELD_NAME							= W1.FIELD_NAME
,SCHEDULER_PROJECT_ID				= W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME					= W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION					= W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID			= W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME			= W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID				= W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME			= W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID			= W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID	= W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID		= W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY			= W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID					= W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID					= W1.HOLIDAY_INVOICE_ID
,HOLIDAY							= W1.HOLIDAY
,FILE_FORMAT_OF_PUSH				= W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID		= W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL							= W1.NEW_ACL
,CURRENT_CATS						= W1.CURRENT_CATS
,CATS_ID							= W1.CATS_ID
,PATS_ID							= W1.PATS_ID
,SMART_ELIGIBLE						= W1.SMART_ELIGIBLE
,SMART_TIER_1						= W1.SMART_TIER_1
,SMART_TIER_2						= W1.SMART_TIER_2
,SMART_TIER_3						= W1.SMART_TIER_3
,INTERVAL							= W1.INTERVAL
,[DATE]								= W1.[DATE]
,HOD_INTERVAL						= W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION			= W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION			= W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION				= W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION				= W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION				= W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW				= W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION					= W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT					= W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT					= W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT				= W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT				= W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT					= W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT				= W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT				= W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT				= W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT				= W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT					= W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT					= W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE					= W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE				= W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE					= W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE				= W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
,FTP_FILE_NAME						= W1.FTP_FILE_NAME
,EMAIL								= W1.EMAIL

--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W1.CAL_DATE
,TENANT_KEY							= W1.TENANT_KEY
,AIR_DAY_TYPE						= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE					= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE					= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W1.INCLUDE_IN_CAS
,READY_FOR_XML						= W1.READY_FOR_XML
,SHOW_ID_EXTS						= W1.SHOW_ID_EXTS
,INVOICE_ID							= W1.INVOICE_ID
,RESOURCE_NAME						= W1.RESOURCE_NAME

,AIRITKDUR							= W1.AIRITKDUR
,AIRIACDUR							= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

FROM            #WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA   W1

INNER JOIN      WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													   AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
													   AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )
--  AND ( UV.FTP_FILE_NAME				  = W1.FTP_FILE_NAME )		--<<<<< ONLY RECORDS FROM THE SAME FTP FILE

/*
--============================================================================================
--UPDATE WSOL_TB_...UV_ANT_AIA TABLE - IF DATA FROM DIFFERENT DATA SOURCE (FTP FILE) :
--============================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA SET
 [PLATFORM]							= W1.[PLATFORM]
,[STATUS]							= W1.[STATUS]
--,INVOICE_MAP_KEY					= W1.INVOICE_MAP_KEY
,FIELD_NAME							= W1.FIELD_NAME
,SCHEDULER_PROJECT_ID				= W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME					= W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION					= W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID			= W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME			= W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID				= W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME			= W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID			= W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID	= W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID		= W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY			= W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID					= W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID					= W1.HOLIDAY_INVOICE_ID
,HOLIDAY							= W1.HOLIDAY
,FILE_FORMAT_OF_PUSH				= W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID		= W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL							= W1.NEW_ACL
,CURRENT_CATS						= W1.CURRENT_CATS
,CATS_ID							= W1.CATS_ID
,PATS_ID							= W1.PATS_ID
,SMART_ELIGIBLE						= W1.SMART_ELIGIBLE
,SMART_TIER_1						= W1.SMART_TIER_1
,SMART_TIER_2						= W1.SMART_TIER_2
,SMART_TIER_3						= W1.SMART_TIER_3
,INTERVAL							= W1.INTERVAL
,[DATE]								= W1.[DATE]
,HOD_INTERVAL						= W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION			= UV.AU_DK_LOGGED_IN_DURATION			+ W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION			= UV.AU_DK_AVAILABLE_DURATION			+ W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION				= UV.AU_DK_TALK_DURATION				+ W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION				= UV.AU_DK_IB_TALK_DURATION				+ W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION				= UV.AU_DK_OB_TALK_DURATION				+ W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW				= UV.AU_DK_CONVENTIONAL_ACW				+ W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION					= UV.AU_DK_NR_DURATION					+ W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = UV.AU_DK_PSEUDO_PRODUCTIVE_DURATION	+ W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = UV.AU_DK_ADJUSTED_NR_DURATION			+ W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = UV.AU_DK_TOTAL_PRODUCTIVE_DURATION	+ W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = UV.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS	+ W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT					= UV.AU_DK_XFER_COUNT					+ W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT					= UV.AU_DK_HOLD_COUNT					+ W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT				= UV.AU_DK_CONFERENCE_COUNT				+ W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT				= UV.AU_DK_CONSULT_COUNT				+ W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT					= UV.AU_DK_PUP_COUNT					+ W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT				= UV.AU_DK_OFFERED_COUNT				+ W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT				= UV.AU_DK_HANDLED_COUNT				+ W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT				= UV.AU_DK_IB_HANDLE_COUNT				+ W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT				= UV.AU_DK_OB_HANDLE_COUNT				+ W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT					= UV.AU_DK_RONA_COUNT					+ W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT					= UV.AU_DK_AWR_COUNT					+ W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE					= UV.MINIMUM_GUARANTEE					+ W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE				= UV.AUTHORIZED_TO_INVOICE				+ W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE					= W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE				= W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
,FTP_FILE_NAME						= W1.FTP_FILE_NAME
,EMAIL								= W1.EMAIL

--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W1.CAL_DATE
,TENANT_KEY							= W1.TENANT_KEY
,AIR_DAY_TYPE						= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE					= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE					= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W1.INCLUDE_IN_CAS
,READY_FOR_XML						= W1.READY_FOR_XML
,SHOW_ID_EXTS						= W1.SHOW_ID_EXTS
,INVOICE_ID							= W1.INVOICE_ID
,RESOURCE_NAME						= W1.RESOURCE_NAME

,AIRITKDUR							= W1.AIRITKDUR
,AIRIACDUR							= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

FROM            #WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA   W1

INNER JOIN      WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													   AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
													   AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )
  AND ( UV.FTP_FILE_NAME				 <> W1.FTP_FILE_NAME )		--<<<<< ONLY RECORDS FROM A DIFFERENT FTP FILE
*/
--=====================================================
--INSERT TMP TABLE FIELDS INTO WSOL_TB_... TABLE:
--=====================================================
INSERT INTO [WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA   AIA
LEFT JOIN       WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
													   AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
												       AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )


--===============================================
EARLY_EXIT:
--===============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_MONAT_OB_IMPORT_STATUS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_MONAT_OB_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_MONAT_OB_IMPORT_STATUS] '11/16/2017','11/26/2017','','B'

--========================================
-- SET DATE VARIABLES
--========================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE 
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE 
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--=========================================================================
--CREATE TMP TABLE:
--=========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_MONAT_OB_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_MONAT_OB_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_MONAT_OB_IMPORT_STATUS
(FILEDATETIME			VARCHAR(20)
,FTP_FILE_NAME			VARCHAR(100)
,CST_ROW_CREATED_TIME	DATETIME
,RCD_CNT				INT
,INT_CNT				INT
)

--========================================================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================================================
    INSERT INTO #IMPORTS_MONAT_OB_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0)															AS RCD_CNT
	,ISNULL(UA.INT_CNT,0)															AS INT_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		,COUNT(DISTINCT C.HOUR_INTERVAL)						AS INT_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING	C

		INNER JOIN      DATE_TIME						        DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
--		AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )  -- USE IF YOU WANT TO IGNORE WEEKENDS

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME)
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')
		,C.WS_ROW_CREATED_TIME
	) UA

--================================================================================
--CREATE CURSOR TO CHECK FOR MISSING DATES
--================================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	--,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

--FOR 'WEEKEND' CODE/FILTER:!!!
--LEFT JOIN WSOL_TB_IMPORTS_MONAT_IC_INVOICING  C ON   C.STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1)

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	--,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_MONAT_OB_IMPORT_STATUS   I   ON I.FILEDATETIME = DT.FILEDATETIME

--LEFT JOIN       DATE_TIME                    DT2 ON CONVERT(VARCHAR(10),DT2.CAL_DATE,101) = CONVERT(VARCHAR(10),DT.FILEDATETIME,101)
--FOR 'WEEKEND' CODE/FILTER:!!!
--LEFT JOIN       WSOL_TB_IMPORTS_MONAT_IC_INVOICING  C   ON C.STD_TENANT_START_DATE_TIME_KEY = DT2.DATE_TIME_KEY

--WHERE ISNULL(I.FTP_FILE_NAME,'') = ''  -- ISNULL(I.FILEDATETIME,'1.1.1900') = ''

WHERE ISNULL(I.RCD_CNT,0) = 0
--  AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)  -- WORLD VENTURES AGENTS ONLY WORKING EMAIL ON WEEKENDS - NOT OUTBOUND VOICE TIME
--  AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B'
	BEGIN

		SET @MSG1 = ''

		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1
			BEGIN
				SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
				IF @RCD_CNT > 0
					BEGIN
						SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
						SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

						SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
						SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 9:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
					END
				ELSE
					BEGIN
						SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
					END
			END
		ELSE 
			BEGIN
				SET @MSG1 = 'Imported file(s) from ' 
					+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
				
				IF @RCD_CNT > 0
					BEGIN
						SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
					END
				ELSE
					BEGIN
						SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
					END
			END
	
	END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--WESTERN DENTAL:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM WSOL_TB_IMPORT_ERRORS_FOUND
							   WHERE TENANT_KEY = 160 AND SUB_GROUP_NAME = 'MONAT_INVOICING_OUTBOUND' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_MONAT_OB_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_MONAT_OB_IMPORT_STATUS_MISSING_DATA]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_MONAT_OB_IMPORT_STATUS_MISSING_DATA]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_MONAT_OB_IMPORT_STATUS_MISSING_DATA] '11/16/2017','11/26/2017','','B'

--==============================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==============================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME

IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE 
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--========================================================================
--CREATE TMP TABLE:
--========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_MONAT_OB_IMPORT_STATUS_MISSING_DATA') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_MONAT_OB_IMPORT_STATUS_MISSING_DATA
END
CREATE TABLE #IMPORTS_MONAT_OB_IMPORT_STATUS_MISSING_DATA
(FILEDATETIME			VARCHAR(20)
,FTP_FILE_NAME			VARCHAR(100)
,CST_ROW_CREATED_TIME	DATETIME
,RCD_CNT				INT
,INT_CNT				INT
)

--========================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================
    INSERT INTO #IMPORTS_MONAT_OB_IMPORT_STATUS_MISSING_DATA
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													--AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												--AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')															--AS RCD_CNT
	,ISNULL(UA.INT_CNT,'')															--AS INT_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		,COUNT(DISTINCT C.HOUR_INTERVAL)						AS INT_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING	C

		INNER JOIN      DATE_TIME								DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT
,INT_CNT      
,'White' AS BG_COLOR

FROM #IMPORTS_MONAT_OB_IMPORT_STATUS_MISSING_DATA

ORDER BY
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT
,INT_CNT      


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_SABRE_AGENT_INVOICING]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_SABRE_AGENT_INVOICING]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300) --Hid. Def=' '
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'  MANual,SUBscription
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='INV'
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='INV'  
AS
SET NOCOUNT ON    

--  EXECUTE [dbo].[uspIMPORTS_SABRE_AGENT_INVOICING] '05/23/2014','06/05/2014','0','0','0','0','HR','Y','SS','NM','Y','4','MAN','INV','INV'

--@TIME_INTERVAL:  Can only show invoicing report at hour level or higher !!!

--Durations in FTP FILE are in minutes but converted to seconds during clean up.  So, this report can pull by secs, mins, and hrs now.

--  SELECT * FROM WSOL_TB_IMPORTS_SABRE_SD_INVOICE_GROUPS
--  SELECT * FROM WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA
    
--TMP:  FOR RUNNING SQL JOBS FOR PREVIOUS DAYS:  
--SET @DATE_BEG = '05/23/2014'
--SET @DATE_END = '06/05/2014'

--==================================--SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) 
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) -- + 1
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
END
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

DECLARE
 @MTD_BEG AS DATETIME
,@MTD_END AS DATETIME  --,@YTD_BEG AS DATETIME--,@YTD_END AS DATETIME
SET @MTD_BEG = CAST(CAST(DATEPART(mm,@DTM_BEG) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)
SET @MTD_END = @DTM_END  --SET @YTD_BEG = CAST('01/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)  --THINK _BEG MAKES MORE SENSE THAN _END.--SET @YTD_END = @DTM_END

IF @TIME_INTERVAL IN ('MR','MD') BEGIN  --MONTH DETERMINED BY @DTM_BEG.
	SET @DTM_BEG = @MTD_BEG
	SET @DTM_END = @MTD_END
END

--==================================
--SET AMOUNT TO DIVIDE BY:
--==================================
DECLARE @DS DECIMAL(10,2)  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.00     --DIVIDE SECONDS BY 1  TO GET SAME, SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
    SET @DS = 60.00    --DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
    SET @DS = 3600.00  --DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_SABRE_AGENT_INVOICING') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_SABRE_AGENT_INVOICING
END
CREATE TABLE #IMPORTS_SABRE_AGENT_INVOICING
(TENANT_NAME            VARCHAR(50)
,ID_EXT                 VARCHAR(3)
,SCHEDULER_ACL_NAME     VARCHAR(100)  
,EMPLOYEE_ID            VARCHAR(50)   
,STD_TENANT_START_DATE_TIME_KEY INT
,RESOURCE_NAME          VARCHAR(100)

,AIR_DAY_TYPE           varchar(1)
,AIR_ACW_FONT_COLOR     varchar(50)
,MIN_GUARANTEE_RATE     decimal(6,3)
,MIN_GUARANTEE_TYPE     varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE varchar(50)
,HAS_HOLIDAYS           varchar(1)
,INCLUDE_IN_CAS         varchar(1)
,READY_FOR_XML          varchar(1)
,SHOW_ID_EXTS           varchar(1)
,
[ACD_CALLS] [int] NULL,
[EXTN_IN_CALLS] [int] NULL,
[EXTN_OUT_CALLS] [int] NULL,
[STAFFED_TIME] [decimal](10, 2) NULL,
[AGENT_RING_TIME] [decimal](10, 2) NULL,
[IACD_TIME] [decimal](10, 2) NULL,
[IACW_TIME] [decimal](10, 2) NULL,
[IACW_OUT_TIME] [decimal](10, 2) NULL,
[EXTN_IN_TIME] [decimal](10, 2) NULL,
[EXTN_OUT_TIME] [decimal](10, 2) NULL,
[HOLD_TIME] [decimal](10, 2) NULL,
[IACD_AUX_OUT_TIME] [decimal](10, 2) NULL,
[TOTAL_AUX_TIME] [decimal](10, 2) NULL,
[IAUX_OUT_TIME] [decimal](10, 2) NULL,
[AVAIL_TIME] [decimal](10, 2) NULL,
[HANDLED_CALLS] [int] NULL,
[ADJUSTED_ACW_TIME] [decimal](10, 2) NULL,
[AUTHORIZED_ACW_TIME] [decimal](10, 2) NULL,
[ADJUSTED_HOLD_TIME] [decimal](10, 2) NULL,
[ADJUSTED_NOT_READY_TIME] [decimal](10, 2) NULL,
[TOTAL_TALK] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MING] [decimal](10, 2) NULL,
[AUT2] [decimal](10, 2) NULL,
)

INSERT INTO #IMPORTS_SABRE_AGENT_INVOICING
SELECT
 'SABRE'	--T.TENANT_NAME
,''			--UAA.ACD_ID_EXTENSION
,UAA.SCHEDULER_ACL_NAME
,UAA.EMPLOYEE_ID 
,UAA.STD_TENANT_START_DATE_TIME_KEY
,UAA.RESOURCE_NAME

,(ISNULL(UAA.AIR_DAY_TYPE,''))					--AS AIR_DAY_TYPE
,(ISNULL(UAA.AIR_ACW_FONT_COLOR,''))			--AS AIR_ACW_FONT_COLOR
,(ISNULL(UAA.MIN_GUARANTEE_RATE,0.000))			--AS MIN_GUARANTEE_RATE
,(ISNULL(UAA.MIN_GUARANTEE_TYPE,''))			--AS MIN_GUARANTEE_TYPE
,(ISNULL(UAA.AUTHORIZED_TO_INVOICE_TYPE,''))	--AS AUTHORIZED_TO_INVOICE_TYPE
,(ISNULL(UAA.HAS_HOLIDAYS,''))					--AS HAS_HOLIDAYS
,(ISNULL(UAA.INCLUDE_IN_CAS,''))				--AS INCLUDE_IN_CAS
,(ISNULL(UAA.READY_FOR_XML,''))					--AS READY_FOR_XML
,(ISNULL(UAA.SHOW_ID_EXTS,''))					--AS SHOW_ID_EXTS

,(ISNULL(UAA.ACD_CALLS,0))
,(ISNULL(UAA.EXTN_IN_CALLS,0))
,(ISNULL(UAA.EXTN_OUT_CALLS,0))
,(ISNULL(UAA.STAFFED_TIME,0))
,(ISNULL(UAA.AGENT_RING_TIME,0))
,(ISNULL(UAA.IACD_TIME,0))
,(ISNULL(UAA.IACW_TIME,0))
,(ISNULL(UAA.IACW_OUT_TIME,0))
,(ISNULL(UAA.EXTN_IN_TIME,0))
,(ISNULL(UAA.EXTN_OUT_TIME,0))
,(ISNULL(UAA.HOLD_TIME,0))
,(ISNULL(UAA.IACD_AUX_OUT_TIME,0))
,(ISNULL(UAA.TOTAL_AUX_TIME,0))
,(ISNULL(UAA.IAUX_OUT_TIME,0))
,(ISNULL(UAA.AVAIL_TIME,0))
,(ISNULL(UAA.HANDLED_CALLS,0))
,(ISNULL(UAA.ADJUSTED_ACW_TIME,0))
,(ISNULL(UAA.AUTHORIZED_ACW_TIME,0))
,(ISNULL(UAA.ADJUSTED_HOLD_TIME,0))
,(ISNULL(UAA.ADJUSTED_NOT_READY_TIME,0))
,(ISNULL(UAA.TOTAL_TALK,0))
,(ISNULL(UAA.CPROD,0))
,(ISNULL(UAA.MING,0))
,(ISNULL(UAA.AUT2,0))

--DATASOURCES FOR DURATION FIELDS, IN SECONDS, IN HOUR INTERVALS:
--    GROUPED JUST ENOUGH TO BE ABLE TO JOIN DATASOURCES TOGETHER, AND AT MOST BASIC INTERVAL!
FROM
(	SELECT	
	-- UA.TENANT_KEY
	 ''									AS ACD_ID_EXTENSION
	,UA.INVOICE_ID					    AS SCHEDULER_ACL_NAME
	,UA.FF_USERNAME						AS EMPLOYEE_ID 
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,MAX(UA.RESOURCE_NAME)              AS RESOURCE_NAME
	,MAX(UA.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,'BLACK'                            AS AIR_ACW_FONT_COLOR
	,0									AS MIN_GUARANTEE_RATE
	,''									AS MIN_GUARANTEE_TYPE
	,''									AS AUTHORIZED_TO_INVOICE_TYPE
	,'Y'								AS HAS_HOLIDAYS
	,''									AS INCLUDE_IN_CAS
	,''									AS READY_FOR_XML
	,''									AS SHOW_ID_EXTS

	,SUM(ISNULL(UA.ACD_CALLS,0))				AS ACD_CALLS
	,SUM(ISNULL(UA.EXTN_IN_CALLS,0))			AS EXTN_IN_CALLS
	,SUM(ISNULL(UA.EXTN_OUT_CALLS,0))			AS EXTN_OUT_CALLS
	,SUM(ISNULL(UA.STAFFED_TIME,0))				AS STAFFED_TIME
	,SUM(ISNULL(UA.AGENT_RING_TIME,0))			AS AGENT_RING_TIME
	,SUM(ISNULL(UA.IACD_TIME,0))				AS IACD_TIME
	,SUM(ISNULL(UA.IACW_TIME,0))				AS IACW_TIME
	,SUM(ISNULL(UA.IACW_OUT_TIME,0))			AS IACW_OUT_TIME
	,SUM(ISNULL(UA.EXTN_IN_TIME,0))				AS EXTN_IN_TIME
	,SUM(ISNULL(UA.EXTN_OUT_TIME,0))			AS EXTN_OUT_TIME
	,SUM(ISNULL(UA.HOLD_TIME,0))				AS HOLD_TIME
	,SUM(ISNULL(UA.IACD_AUX_OUT_TIME,0))		AS IACD_AUX_OUT_TIME
	,SUM(ISNULL(UA.TOTAL_AUX_TIME,0))			AS TOTAL_AUX_TIME
	,SUM(ISNULL(UA.IAUX_OUT_TIME,0))			AS IAUX_OUT_TIME
	,SUM(ISNULL(UA.AVAIL_TIME,0))				AS AVAIL_TIME  
	,SUM(ISNULL(UA.HANDLED_CALLS,0))			AS HANDLED_CALLS
	,SUM(ISNULL(UA.ADJUSTED_ACW_TIME,0))		AS ADJUSTED_ACW_TIME
  	,SUM(ISNULL(UA.AUTHORIZED_ACW_TIME,0))		AS AUTHORIZED_ACW_TIME
	,SUM(ISNULL(UA.ADJUSTED_HOLD_TIME,0))		AS ADJUSTED_HOLD_TIME
	,SUM(ISNULL(UA.ADJUSTED_NOT_READY_TIME,0))	AS ADJUSTED_NOT_READY_TIME
	,SUM(ISNULL(UA.TOTAL_TALK,0))				AS TOTAL_TALK
	,SUM(ISNULL(UA.CPROD,0))					AS CPROD
	,SUM(ISNULL(UA.MING,0))						AS MING
	,SUM(ISNULL(UA.AUT2,0))						AS AUT2
	
	--  SELECT *
	FROM            WSOL_TB_IMPORTS_SABRE_INVOICING      UA
	INNER JOIN      DATE_TIME                            DT    ON DT.DATE_TIME_KEY                   = UA.STD_TENANT_START_DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
	  AND ISNULL(UA.EMAIL,'') <> ''
		
	GROUP BY 
	 UA.INVOICE_ID
	,UA.FF_USERNAME
	,UA.STD_TENANT_START_DATE_TIME_KEY
) UAA

--==============================================================
-- CREATE TEMPORARY TABLE TO RETURN RESULTS
--==============================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_SABRE_AGENT_INVOICING_RTN') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_SABRE_AGENT_INVOICING_RTN
END
CREATE TABLE #IMPORTS_SABRE_AGENT_INVOICING_RTN
(GRPNO                 INT
,TENANT_NAME           VARCHAR(50)
,ID_EXT                VARCHAR(3)
,SCHEDULER_ACL_NAME    VARCHAR(100)
,EMPLOYEE_ID           VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,CAL_YEAR_MONTH_NUM    VARCHAR(10)
,DATE_INTERVAL         VARCHAR(50)
,TIME_INTERVAL         VARCHAR(10)

,AIR_DAY_TYPE          varchar(1)
,AIR_ACW_FONT_COLOR    varchar(50)
,MIN_GUARANTEE_RATE    decimal(6,3)
,MIN_GUARANTEE_TYPE    varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE varchar(50)
,HAS_HOLIDAYS          varchar(1)
,INCLUDE_IN_CAS        varchar(1)
,READY_FOR_XML         varchar(1)
,SHOW_ID_EXTS          varchar(1)

,AIR_HOLIDAY_IN        VARCHAR(1)
,ALL_AUTHORIZED_TIME   DECIMAL(10,2)

,
[ACD_CALLS] [int] NULL,
[EXTN_IN_CALLS] [int] NULL,
[EXTN_OUT_CALLS] [int] NULL,
[STAFFED_TIME] [decimal](10, 2) NULL,
[AGENT_RING_TIME] [decimal](10, 2) NULL,
[IACD_TIME] [decimal](10, 2) NULL,
[IACW_TIME] [decimal](10, 2) NULL,
[IACW_OUT_TIME] [decimal](10, 2) NULL,
[EXTN_IN_TIME] [decimal](10, 2) NULL,
[EXTN_OUT_TIME] [decimal](10, 2) NULL,
[HOLD_TIME] [decimal](10, 2) NULL,
[IACD_AUX_OUT_TIME] [decimal](10, 2) NULL,
[TOTAL_AUX_TIME] [decimal](10, 2) NULL,
[IAUX_OUT_TIME] [decimal](10, 2) NULL,
[AVAIL_TIME] [decimal](10, 2) NULL,
[HANDLED_CALLS] [int] NULL,
[ADJUSTED_ACW_TIME] [decimal](10, 2) NULL,
[AUTHORIZED_ACW_TIME] [decimal](10, 2) NULL,
[ADJUSTED_HOLD_TIME] [decimal](10, 2) NULL,
[ADJUSTED_NOT_READY_TIME] [decimal](10, 2) NULL,
[TOTAL_TALK] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MING] [decimal](10, 2) NULL,
[AUT2] [decimal](10, 2) NULL,
)

--==================================
-- POPULATE TEMPORARY TABLE
--==================================
INSERT INTO #IMPORTS_SABRE_AGENT_INVOICING_RTN
SELECT
 20								--AS GRPNO  
,ISNULL(GG.TENANT_NAME       ,'') AS TENANT_NAME
,ISNULL(GG.ID_EXT            ,'') AS ID_EXT
,ISNULL(GG.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
,ISNULL(GG.EMPLOYEE_ID       ,'') AS EMPLOYEE_ID
,ISNULL(GG.RESOURCE_NAME     ,'') AS RESOURCE_NAME
,ISNULL(GG.CAL_YEAR_MONTH_NUM,'') AS CAL_YEAR_MONTH_NUM
,ISNULL(GG.DI                ,'') AS DI
,ISNULL(GG.TI                ,'') AS TI

,(GG.AIR_DAY_TYPE)                AS AIR_DAY_TYPE
,(GG.AIR_ACW_FONT_COLOR)          AS AIR_ACW_FONT_COLOR
,(GG.MIN_GUARANTEE_RATE)          AS MIN_GUARANTEE_RATE
,(GG.MIN_GUARANTEE_TYPE)          AS MIN_GUARANTEE_TYPE
,(GG.AUTHORIZED_TO_INVOICE_TYPE)  AS AUTHORIZED_TO_INVOICE_TYPE
,(GG.HAS_HOLIDAYS)                AS HAS_HOLIDAYS
,(GG.INCLUDE_IN_CAS)              AS INCLUDE_IN_CAS
,(GG.READY_FOR_XML)               AS READY_FOR_XML
,(GG.SHOW_ID_EXTS)                AS SHOW_ID_EXTS

,'' --AS AIR_HOLIDAY_IN
,0  --AS ALL_AUTHORIZED_TIME

,(ISNULL(GG.ACD_CALLS,0))           AS ACD_CALLS
,(ISNULL(GG.EXTN_IN_CALLS,0))       AS EXTN_IN_CALLS
,(ISNULL(GG.EXTN_OUT_CALLS,0))      AS EXTN_OUT_CALLS

,CAST((ISNULL(GG.STAFFED_TIME			,0)) / @DS AS DECIMAL(10,2))	AS STAFFED_TIME
,CAST((ISNULL(GG.AGENT_RING_TIME		,0)) / @DS AS DECIMAL(10,2))	AS AGENT_RING_TIME
,CAST((ISNULL(GG.IACD_TIME				,0)) / @DS AS DECIMAL(10,2))	AS IACD_TIME
,CAST((ISNULL(GG.IACW_TIME				,0)) / @DS AS DECIMAL(10,2))	AS IACW_TIME
,CAST((ISNULL(GG.IACW_OUT_TIME			,0)) / @DS AS DECIMAL(10,2))	AS IACW_OUT_TIME
,CAST((ISNULL(GG.EXTN_IN_TIME			,0)) / @DS AS DECIMAL(10,2))	AS EXTN_IN_TIME
,CAST((ISNULL(GG.EXTN_OUT_TIME			,0)) / @DS AS DECIMAL(10,2))	AS EXTN_OUT_TIME
,CAST((ISNULL(GG.HOLD_TIME				,0)) / @DS AS DECIMAL(10,2))	AS HOLD_TIME
,CAST((ISNULL(GG.IACD_AUX_OUT_TIME		,0)) / @DS AS DECIMAL(10,2))	AS IACD_AUX_OUT_TIME
,CAST((ISNULL(GG.TOTAL_AUX_TIME			,0)) / @DS AS DECIMAL(10,2))	AS TOTAL_AUX_TIME
,CAST((ISNULL(GG.IAUX_OUT_TIME			,0)) / @DS AS DECIMAL(10,2))	AS IAUX_OUT_TIME
,CAST((ISNULL(GG.AVAIL_TIME				,0)) / @DS AS DECIMAL(10,2))	AS AVAIL_TIME

,(ISNULL(GG.HANDLED_CALLS				,0))							AS HANDLED_CALLS

,CAST((ISNULL(GG.ADJUSTED_ACW_TIME		,0)) / @DS AS DECIMAL(10,2))	AS ADJUSTED_ACW_TIME
,CAST((ISNULL(GG.AUTHORIZED_ACW_TIME	,0)) / @DS AS DECIMAL(10,2))	AS AUTHORIZED_ACW_TIME
,CAST((ISNULL(GG.ADJUSTED_HOLD_TIME		,0)) / @DS AS DECIMAL(10,2))	AS ADJUSTED_HOLD_TIME
,CAST((ISNULL(GG.ADJUSTED_NOT_READY_TIME,0)) / @DS AS DECIMAL(10,2))	AS ADJUSTED_NOT_READY_TIME
,CAST((ISNULL(GG.TOTAL_TALK				,0)) / @DS AS DECIMAL(10,2))	AS TOTAL_TALK
,CAST((ISNULL(GG.CPROD					,0)) / @DS AS DECIMAL(10,2))	AS CPROD
,CAST((ISNULL(GG.MING					,0)) / @DS AS DECIMAL(10,2))	AS MING
,CAST((ISNULL(GG.AUT2					,0)) / @DS AS DECIMAL(10,2))	AS AUT2

FROM  -- GG STARTS HERE:
(	SELECT
	 ISNULL(SW.TENANT_NAME,'')        AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  AS EMPLOYEE_ID
	,MAX(RESOURCE_NAME)               AS RESOURCE_NAME

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) AS TI

	,MAX(SW.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,MAX(SW.AIR_ACW_FONT_COLOR)         AS AIR_ACW_FONT_COLOR
	,MAX(SW.MIN_GUARANTEE_RATE)         AS MIN_GUARANTEE_RATE
	,MAX(SW.MIN_GUARANTEE_TYPE)         AS MIN_GUARANTEE_TYPE
	,MAX(SW.AUTHORIZED_TO_INVOICE_TYPE) AS AUTHORIZED_TO_INVOICE_TYPE
	,MAX(SW.HAS_HOLIDAYS)               AS HAS_HOLIDAYS
	,MAX(SW.INCLUDE_IN_CAS)             AS INCLUDE_IN_CAS
	,MAX(SW.READY_FOR_XML)              AS READY_FOR_XML
	,MAX(SW.SHOW_ID_EXTS)               AS SHOW_ID_EXTS

	,SUM(ISNULL(SW.ACD_CALLS				,0))	AS ACD_CALLS
	,SUM(ISNULL(SW.EXTN_IN_CALLS			,0))	AS EXTN_IN_CALLS
	,SUM(ISNULL(SW.EXTN_OUT_CALLS			,0))	AS EXTN_OUT_CALLS
	,SUM(ISNULL(SW.STAFFED_TIME				,0))	AS STAFFED_TIME
	,SUM(ISNULL(SW.AGENT_RING_TIME			,0))	AS AGENT_RING_TIME
	,SUM(ISNULL(SW.IACD_TIME				,0))	AS IACD_TIME
	,SUM(ISNULL(SW.IACW_TIME				,0))	AS IACW_TIME
	,SUM(ISNULL(SW.IACW_OUT_TIME			,0))	AS IACW_OUT_TIME
	,SUM(ISNULL(SW.EXTN_IN_TIME				,0))	AS EXTN_IN_TIME
	,SUM(ISNULL(SW.EXTN_OUT_TIME			,0))	AS EXTN_OUT_TIME
	,SUM(ISNULL(SW.HOLD_TIME				,0))	AS HOLD_TIME
	,SUM(ISNULL(SW.IACD_AUX_OUT_TIME		,0))	AS IACD_AUX_OUT_TIME
	,SUM(ISNULL(SW.TOTAL_AUX_TIME			,0))	AS TOTAL_AUX_TIME
	,SUM(ISNULL(SW.IAUX_OUT_TIME			,0))	AS IAUX_OUT_TIME
	,SUM(ISNULL(SW.AVAIL_TIME				,0))	AS AVAIL_TIME
	,SUM(ISNULL(SW.HANDLED_CALLS			,0))	AS HANDLED_CALLS
	,SUM(ISNULL(SW.ADJUSTED_ACW_TIME		,0))	AS ADJUSTED_ACW_TIME
	,SUM(ISNULL(SW.AUTHORIZED_ACW_TIME		,0))	AS AUTHORIZED_ACW_TIME
	,SUM(ISNULL(SW.ADJUSTED_HOLD_TIME		,0))	AS ADJUSTED_HOLD_TIME
	,SUM(ISNULL(SW.ADJUSTED_NOT_READY_TIME	,0))	AS ADJUSTED_NOT_READY_TIME
	,SUM(ISNULL(SW.TOTAL_TALK				,0))	AS TOTAL_TALK
	,SUM(ISNULL(SW.CPROD					,0))	AS CPROD
	,SUM(ISNULL(SW.MING						,0))	AS MING
	,SUM(ISNULL(SW.AUT2						,0))	AS AUT2
	
	FROM            #IMPORTS_SABRE_AGENT_INVOICING	SW
	INNER JOIN      DATE_TIME						DT   ON DT.DATE_TIME_KEY              = SW.STD_TENANT_START_DATE_TIME_KEY
													 
	--WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END		  --AND (@TENANT_KEY   IN ('0','') OR SW.TENANT_KEY   = CAST(@TENANT_KEY AS INT) )

	GROUP BY 
	 ISNULL(SW.TENANT_NAME,'')        --AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             --AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') --AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  --AS EMPLOYEE_ID

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) --AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) --AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) --AS TI

	--,(ISNULL(SW.FF_AGENT_NAME,''))         --AS FF_AGENT_NAME
	--,(ISNULL(SW.FF_USER_NAME,''))          --AS FF_USER_NAME

) GG

--==================================
--IS A HOLIDAY DATE IN THE MIX:
--==================================
DECLARE @HOLIDAY_IN VARCHAR(1)
SET @HOLIDAY_IN = 'N'
DECLARE @I INT
SET @I = (SELECT COUNT(*) FROM #IMPORTS_SABRE_AGENT_INVOICING_RTN WHERE AIR_DAY_TYPE = 'H')  --  AND INCLUDE_IN_CAS = 'Y')
IF @I > 0 BEGIN
	SET @HOLIDAY_IN = 'Y'
END
--==================================
UPDATE #IMPORTS_SABRE_AGENT_INVOICING_RTN SET
 AIR_HOLIDAY_IN = @HOLIDAY_IN

--======================================================
--UPDATE TOTALS LINE ON REPORT FOR STANDARD AND HOLIDAY:
--======================================================
UPDATE #IMPORTS_SABRE_AGENT_INVOICING_RTN SET
 ALL_AUTHORIZED_TIME = ISNULL(LOJ.ALL_AUTHORIZED_TIME,0.0)
FROM #IMPORTS_SABRE_AGENT_INVOICING_RTN TA
LEFT OUTER JOIN
(	SELECT
	 SCHEDULER_ACL_NAME
	,RESOURCE_NAME --EMPLOYEE_ID
	,AIR_DAY_TYPE
	,SUM(AUT2) AS ALL_AUTHORIZED_TIME
	FROM #IMPORTS_SABRE_AGENT_INVOICING_RTN 
	GROUP BY 
	 SCHEDULER_ACL_NAME
	,RESOURCE_NAME --EMPLOYEE_ID
	,AIR_DAY_TYPE
) LOJ ON LOJ.SCHEDULER_ACL_NAME = TA.SCHEDULER_ACL_NAME
	 --AND LOJ.EMPLOYEE_ID        = TA.EMPLOYEE_ID
	 AND LOJ.RESOURCE_NAME		= TA.RESOURCE_NAME
	 AND LOJ.AIR_DAY_TYPE       = TA.AIR_DAY_TYPE

--==================================
--RETURN DATA
--==================================
--==================================
--POPULATE TABLE READ BY SSIS TO GET END DATE OF DATA REPORT/FILE HAS BEEN RUN FOR:
--==================================
INSERT INTO YZ_TB_FILENAMES_FOR_SSIS
(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
SELECT
 'uspIMPORTS_SABRE_AGENT_INVOICING'  --SQL_JOB_NAME
,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,111),'/','')   --FILENM   YYYYMMDD_...
,dbo.getdate()  --CST_ROW_CREATED_TIME

--=====================================
--RETURN DATASET:
--=====================================
SELECT 
 CASE WHEN @DUR_IN = 'SS' THEN '' ELSE 'F' END AS DUR_FORMAT
,CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
,V.*

FROM      #IMPORTS_SABRE_AGENT_INVOICING_RTN  V

ORDER BY 
 V.GRPNO
,V.SCHEDULER_ACL_NAME
,V.RESOURCE_NAME
,V.EMPLOYEE_ID
,V.CAL_YEAR_MONTH_NUM
,V.DATE_INTERVAL
,V.TIME_INTERVAL  --SINCE IN MILITARY TIME!




--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_SABRE_AIA_AGENT_MAPPING_IMPORT]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_SABRE_AIA_AGENT_MAPPING_IMPORT]
AS
SET NOCOUNT ON  -- EXECUTE [dbo].[uspIMPORTS_SABRE_AIA_AGENT_MAPPING_IMPORT]

--  DELETE FROM WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_1

--  SELECT * FROM WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_1

--Data Loading FTP Pathway
--  FTP server   = ftp.workingsol.com
--  FTP Username = global_imports
--  FTP Password = Welcome2013
--  FTP Pathway  = /AIA/SABRE/AIA_AGENT_MAPPING

--USES YZ_TB_ERRORS_FOUND.  NOT TOTALLY INDEPENDANT OF OTHER CLIENTS/TENANTS...

--=============================================  --COPY AND REPLACE THESE VARIABLES WHEN CREATING NEW USP FROM THIS USP.
DECLARE
 @TENANT_KEY      INT
,@SUB_GROUP_NAME  VARCHAR(50)
SET @TENANT_KEY     =       900704  --SABRE    --will begin with 900+ for external tenants.  the '900' is NOT part of YZ_TB_TENANT_KEY in YZ_TB_TENANTS table.
SET @SUB_GROUP_NAME = 'SABRE_AIA_AGENT_MAPPING'
--=============================================
--WHEN RUNNING MANUALLY DURING TESTING:DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900704  AND SUB_GROUP_NAME = 'SABRE_AIA_AGENT_MAPPING'
DELETE FROM YZ_TB_ERRORS_FOUND 
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = @SUB_GROUP_NAME  --'SABRE_AIA_AGENT_MAPPING'    --  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900704
--=============================================
--WHEN RUNNING MANUALLY DURING TESTING:DELETE FROM WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_ERRORS WHERE TENANT_KEY = 900704  AND IMPORT_SUB_GROUP_NAME = 'SABRE_AIA_AGENT_MAPPING'
DELETE FROM WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_ERRORS
WHERE IMPORT_SUB_GROUP_NAME = @SUB_GROUP_NAME  --'SABRE_AIA_AGENT_MAPPING' --SELECT * FROM WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_ERRORS
--=============================================

--===========================================================
--  SELECT * FROM WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_1
--===========================================================

--=============================================
--CLEANUP WORK (_1) TABLE:
--=============================================
DELETE FROM WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_1 
WHERE ( ISNULL(INVOICE_MAP_KEY,'') = '' )
   OR ( ISNULL(RESOURCE_NAME,'') = '' )
   --OR ( ISNULL(PAY_GROUP,'') = '' )

--==================================================================================
--THE ELIMINATION OF THE 'SPECIAL CHARACTER' !!!
--  This ' ' is a special character!! and maybe just a space!!!
--  Hightlight it and do ctl+f, on suspected data, you'll see it isn't a space !
--==================================================================================
UPDATE WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_1 SET
 RESOURCE_NAME            = RTRIM(LTRIM(REPLACE(ISNULL(RESOURCE_NAME,''),' ',' ')))
,[EMAIL]                  = RTRIM(LTRIM(REPLACE(ISNULL([EMAIL],''),' ',' ')))
,INVOICE_MAP_KEY          = RTRIM(LTRIM(REPLACE(ISNULL(INVOICE_MAP_KEY,''),' ',' ')))    
,FF_RESOURCE              = RTRIM(LTRIM(REPLACE(ISNULL(FF_RESOURCE,''),' ',' ')))
,PAY_GROUP				  = RTRIM(LTRIM(REPLACE(ISNULL(PAY_GROUP,''),' ',' ')))

--======================================================================
--PROCESS DUPLICATES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_ERRORS
(RESOURCE_NAME
,EMAIL
,INVOICE_MAP_KEY
,FF_RESOURCE
,PAY_GROUP
,FTP_FILE_NAME
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG
)
SELECT
 W1.RESOURCE_NAME
,W1.[EMAIL]
,W1.INVOICE_MAP_KEY
,W1.FF_RESOURCE
,W1.PAY_GROUP
,W1.FTP_FILE_NAME
,dbo.getdate()        -- WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  -- 'SABRE_AIA_AGENT_MAPPING'  --IMPORT_SUB_GROUP_NAME
,'DUP'            -- ERROR_TAG
,'The Invoice Map Key (Avaya ID) exists more than once in the AIA AGENT MAPPING file.'  --ERROR_MSG
--  SELECT *  
FROM WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_1  W1
INNER JOIN
(	SELECT
	 INVOICE_MAP_KEY
	,ROW_NUMBER() over (partition by INVOICE_MAP_KEY
                            order by INVOICE_MAP_KEY) ROWNO
	FROM WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_1
) TNM  ON TNM.INVOICE_MAP_KEY = W1.INVOICE_MAP_KEY

LEFT OUTER JOIN WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_ERRORS AME   ON AME.INVOICE_MAP_KEY = W1.INVOICE_MAP_KEY

WHERE TNM.ROWNO > 1   

  AND ISNULL(AME.ERROR_TAG,'') = ''   --THE JOIN TO AME AND THIS LINE IS NOT REALLY NECESSARY SINCE THIS IS FIRST INSERTS INTO AME.!!!

----============================================================================================================================================================
--  DON'T NEED TO DO DELETES, BECAUSE THE RECORDS NEEDING TO BE DELETED EXIST IN THE MAPPING ERRORS TABLE.
--  THE MAPPING ERRORS TABLE CAN BE USED BELOW WHEN DOING THE INSERT INTO THE PERMANENT TABLE, SO THAT THE BAD RECORDS IN THE WORK TABLE DON'T GET INSERTED.
--==============================================================================================================================================================

--=============================================	--Hopefully generic enough for all Tenant SSIS to use!
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=============================================
--WHEN RUNNING MANUALLY DURING TESTING:INSERT INTO YZ_TB_ERRORS_FOUND SELECT 900704,'SABRE_AIA_AGENT_MAPPING',''              
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--SQL won't insert special characters!!!  + CHAR(9)  --CHAR(10) + CHAR(13)
--Check #1:  ===================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_1)
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + '1) File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #2:  ===================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_1 WHERE [EMAIL] = '')
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + '2) File Import Failed.  There are records with missing E-Mail addresses.   |    '
		SET @ERR_CNT = @ERR_CNT + 1
	END
--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	--SSIS reads YZ_TB_ERRORS_FOUND table where TENANT_KEY = 900704, and if record exists, outputs results/error_msg field in an email.
	INSERT INTO YZ_TB_ERRORS_FOUND
	(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY      -- TENANT_KEY
	,@SUB_GROUP_NAME  -- 'SABRE_AIA_AGENT_MAPPING'   --SUB_GROUP_NAME
	,@MSG1            -- ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	INSERT INTO YZ_TB_ERRORS_FOUND
	(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY      -- TENANT_KEY
	,@SUB_GROUP_NAME  -- 'SABRE_AIA_AGENT_MAPPING'   --SUB_GROUP_NAME
	,''               -- ERROR_MSG  --Never make this @MSG1 !!!  Must stay as ''.
	--Do NOT want to got to early exit here because data was good, according to 'checks'!  We want to import data into permanent table.
END
--IN SSIS, WOULD SELECT FROM TABLE WHERE TENANT_KEY = 900704 AND STORE IN SSIS VARIABLE.  IF VARIABLE NOT EMPTY, WILL SEND EMAIL AND END SSIS...
--=============================================

--======================================================================
--PROCESS BAD RESOURCE IDENTIFIER VALUES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_ERRORS
(RESOURCE_NAME
,EMAIL
,INVOICE_MAP_KEY
,FF_RESOURCE
,PAY_GROUP
,FTP_FILE_NAME
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG
)
SELECT
 W1.RESOURCE_NAME
,W1.[EMAIL]
,W1.INVOICE_MAP_KEY
,W1.FF_RESOURCE
,W1.PAY_GROUP
,W1.FTP_FILE_NAME
,dbo.getdate()        -- WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  -- 'SABRE_AIA_AGENT_MAPPING'  --IMPORT_SUB_GROUP_NAME
,'RES'            -- ERROR_TAG
,'The Resource Identifier is invalid in the AIA AGENT MAPPING file.'  --ERROR_MSG
--  SELECT *  
FROM            WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_1		W1
LEFT JOIN       WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_ERRORS	AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
WHERE ISNULL(W1.FF_RESOURCE,'') NOT IN ('','Resource','VGR Resource','VGR Standard','Vantage')  --Resource, VGR, Vantage, or Blank, where Blank becomes 'Standard Agent', Resource' becomes 'Resource Agent', 'Vantage' becomes 'Vantage Agnet', and 'VGR' becomes 'VGR Agent'.
  AND ISNULL(AME.ERROR_TAG,'') = ''

--======================================================================
--PROCESS MISSING PAY GROUP VALUES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_ERRORS
(RESOURCE_NAME
,EMAIL
,INVOICE_MAP_KEY
,FF_RESOURCE
,PAY_GROUP
,FTP_FILE_NAME
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG
)
SELECT
 W1.RESOURCE_NAME
,W1.[EMAIL]
,W1.INVOICE_MAP_KEY
,W1.FF_RESOURCE
,W1.PAY_GROUP
,W1.FTP_FILE_NAME
,dbo.getdate()        -- WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  -- 'SABRE_AIA_AGENT_MAPPING'  --IMPORT_SUB_GROUP_NAME
,'PAY'            -- ERROR_TAG
,'The PAY GROUP is missing in AIA Agent Mapping file.'  --ERROR_MSG
--  SELECT *  
FROM            WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_1           W1
LEFT JOIN       WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_ERRORS      AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
WHERE ISNULL(W1.PAY_GROUP,'') = ''  -- Currently 0 is original pay contract
  AND ISNULL(AME.ERROR_TAG,'') = ''

--==============================================================================================================================================================
--  DON'T NEED TO DO DELETES, BECAUSE THE RECORDS NEEDING TO BE DELETED EXIST IN THE MAPPING ERRORS TABLE.
--  THE MAPPING ERRORS TABLE CAN BE USED BELOW WHEN DOING THE INSERT INTO THE PERMANENT TABLE, SO THAT THE BAD RECORDS IN THE WORK TABLE DON'T GET INSERTED.
--==============================================================================================================================================================


--!!! UPDATING """PERMANENT""" TABLE HERE: !!!
--========================================================================================================
--UPDATE PERMANENT TABLE WITH WORK TABLE DATA WHERE TENANT_KEY AND INVOICE_MAP_KEY FIELDS/VALUES MATCH:
--========================================================================================================
UPDATE WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING SET
 RESOURCE_NAME    = W1.RESOURCE_NAME
,[EMAIL]          = W1.[EMAIL]
,INVOICE_MAP_KEY  = W1.INVOICE_MAP_KEY
,FF_RESOURCE      = W1.FF_RESOURCE
,PAY_GROUP        = W1.PAY_GROUP
,FTP_FILE_NAME    = W1.FTP_FILE_NAME
--,WS_ROW_CREATED_TIME
,CST_ROW_UPDATED_TIME = dbo.getdate()
--  SELECT *
FROM            WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_1          W1
--INNER JOIN MUST BE HERE.  NEVER CHANGE!
INNER JOIN      WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING            G     ON G.INVOICE_MAP_KEY        = W1.INVOICE_MAP_KEY
LEFT JOIN       WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_ERRORS     AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY

--Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE ISNULL(AME.ERROR_TAG,'') = ''
  AND (   ( G.RESOURCE_NAME   <> W1.RESOURCE_NAME )
	   OR ( G.[EMAIL]         <> W1.[EMAIL] )
	   OR ( G.INVOICE_MAP_KEY <> W1.INVOICE_MAP_KEY )
	   OR ( G.FF_RESOURCE     <> W1.FF_RESOURCE )
       OR ( G.PAY_GROUP       <> W1.PAY_GROUP )
	  )

--!!! INSERTING INTO """PERMANENT""" TABLE HERE: !!!
--=========================================================
--INSERT "NEW" DATA FROM WORK TABLE INTO PERMANENT TABLE: 
--=========================================================
INSERT INTO WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING
( RESOURCE_NAME
,EMAIL
,INVOICE_MAP_KEY
,FF_RESOURCE
,PAY_GROUP
,FTP_FILE_NAME
,CST_ROW_CREATED_TIME
,CST_ROW_UPDATED_TIME
)
SELECT
 W1.RESOURCE_NAME    
,W1.[EMAIL]          
,W1.INVOICE_MAP_KEY  
,W1.FF_RESOURCE   
,W1.PAY_GROUP
,W1.FTP_FILE_NAME    
,dbo.getdate()        --WS_ROW_CREATED_TIME
,NULL             --WS_ROW_UPDATED_TIME

FROM            WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_1      W1
LEFT JOIN       WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING        G     ON G.INVOICE_MAP_KEY        = W1.INVOICE_MAP_KEY
LEFT JOIN       WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_ERRORS AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:
WHERE ( G.INVOICE_MAP_KEY IS NULL AND ISNULL(W1.INVOICE_MAP_KEY,'') <> '' )
  AND ISNULL(AME.ERROR_TAG,'') = ''

--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_SABRE_AIA_AGENT_MAPPING_IMPORT_STATUS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_SABRE_AIA_AGENT_MAPPING_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHAT PROBLEMS THE RECENTLY IMPORTED AIA AGENT MAPPING FILE HAD DURING THE IMPORT/CLEANUP PROCESS.
--THIS USP IS DATA SOURCE FOR SRS GRID ON "AIA AGENT MAPPING" IMPORTS STATUS REPORT!!!

--  EXECUTE [dbo].[uspIMPORTS_SABRE_AIA_AGENT_MAPPING_IMPORT_STATUS] '06/01/2014','06/10/2014','','R'

--  SELECT * FROM WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_ERRORS
--  SELECT * FROM YZ_TB_ERRORS_FOUND  --STILL NOT TOTALLY DEPENDANT BETWEEN OF OTHER CLIENTS/TENANTS.

--==================================
DECLARE 
 @TENANT_KEY      INT
,@SUB_GROUP_NAME  VARCHAR(50)
SET @TENANT_KEY     = 900704
SET @SUB_GROUP_NAME = 'SABRE_AIA_AGENT_MAPPING'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 
		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('09/27/2013' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('09/27/2013' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

-- SELECT * FROM WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_ERRORS


IF OBJECT_ID('TEMPDB..#IMPORTS_SABRE_AIA_AGENT_MAPPING_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_SABRE_AIA_AGENT_MAPPING_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_SABRE_AIA_AGENT_MAPPING_IMPORT_STATUS
(	[RESOURCE_NAME] [varchar](100) NULL,
	[EMAIL] [varchar](100) NULL,
	[INVOICE_MAP_KEY] [varchar](50) NOT NULL,
	[FF_RESOURCE] [varchar](50) NOT NULL,
	[PAY_GROUP] [varchar] (50) NULL,
	[FTP_FILE_NAME] [varchar](100) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[IMPORT_SUB_GROUP_NAME] [varchar](100) NULL,
	[ERROR_TAG] [varchar](50) NULL,
	[ERROR_MSG] [varchar](2500) NULL
)
INSERT INTO #IMPORTS_SABRE_AIA_AGENT_MAPPING_IMPORT_STATUS
SELECT
 RESOURCE_NAME
,[EMAIL]
,INVOICE_MAP_KEY
,FF_RESOURCE
,PAY_GROUP
--,FTP_FILE_NAME
,REPLACE(FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG

FROM            WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING_ERRORS     I   

--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_SABRE_AIA_AGENT_MAPPING_IMPORT_STATUS)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
--=============================================
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_SABRE_AIA_AGENT_MAPPING_IMPORT_STATUS
	SELECT
	 ''  --RESOURCE_NAME
	,''  --[EMAIL]
	,''  --INVOICE_MAP_KEY
	,''  --FF_RESOURCE
	,''  --PAY_GROUP
	,''  --FTP_FILE_NAME
	,dbo.getdate()  --WS_ROW_CREATED_TIME
	,''  --IMPORT_SUB_GROUP_NAME
	,''  --ERROR_TAG
	,''  --ERROR_MSG
END 
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RCD_CNT = 0 BEGIN  --IF @RCD_CNT = 0 HERE,IT ACTUALLY EQUALS THE ONE INSERTED STATING 'No Prolems.' IN ERROR_MSG.
	SET @MSG1 = @MSG1 + 'There were NO Sabre AIA Agent Mapping Import Errors found.'
END
ELSE BEGIN
	IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
		--This is an Invoice Friday:
		IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN  --end date + 1 may not be today, so dbo.getdate() is checked...
			SET @MSG1 = 'Today, '
		END
		SET @MSG1 = @MSG1 + CONVERT(VARCHAR(10),@DTM_END,101) + ', is Invoice Friday. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	END
	SET @MSG1 = @MSG1 + 'The list below contains errors found during the process of importing the Sabre AIA Agent Mapping .csv file. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	SET @MSG1 = @MSG1 + 'Project Management will need to add, remove, or update agent information in their Sabre AIA Agent Mapping .csv/"living" documents '
	SET @MSG1 = @MSG1 + 'and copy them to the FTP directory in order for these agents to be invoiced through the Scheduler system. ' + CHAR(13) + CHAR(10)

	--This put directly in report at bottom, in new table, with different font size...:
	--SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Please forward any questions or problems with this notification to dthola@wslive.com.  Thanks.'
END

IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF @RCD_CNT = 0 BEGIN
		SET @MSG1 = @MSG1 + 'There were NO Sabre AIA Agent Mapping Import Errors Found.'
	END
	ELSE BEGIN
		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
			SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		END

		SET @MSG1 = @MSG1 + 'The list below contains errors found during the process of importing the Sabre AIA Agent Mapping .csv file. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
		SET @MSG1 = @MSG1 + 'Project Management will need to add, remove, or update agent information in their Sabre AIA Agent Mapping .csv/"living" documents '
		SET @MSG1 = @MSG1 + 'and copy them to the FTP directory in order for these agents to be invoiced through the Scheduler system. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	END
END
--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)

	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM YZ_TB_ERRORS_FOUND 
							   WHERE TENANT_KEY = @TENANT_KEY AND SUB_GROUP_NAME = @SUB_GROUP_NAME )
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some problems were found during the Sabre AIA Agent Mapping import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'And any in list below.'
	END
END



--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_SABRE_AIA_AGENT_MAPPING_IMPORT_STATUS 

ORDER BY
 INVOICE_MAP_KEY

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_SABRE_AIA_AGENT_MAPPING_MISSING_AGENTS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_SABRE_AIA_AGENT_MAPPING_MISSING_AGENTS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHICH INVOICE_MAP_KEY VALUES EXIST IN THE ACTIVITY FILES, BUT NOT IN THE AIA_AGENT_MAPPING .CSV FILES.
--            NO MATCHES BETWEEN ACTIVITY AND AGENT MAPPING.  WHEN NO MATCHES, THEN NO 'SCHEDULER' INVOICING.
--THIS USP IS DATA SOURCE FOR SRS GRID ON "ACTIVITY IMPORTS" STATUS REPORT!!!

--  EXECUTE [dbo].[uspIMPORTS_SABRE_AIA_AGENT_MAPPING_MISSING_AGENTS] '10/25/2013','11/17/2013','900704','SABRE_AIA_AGENT_MAPPING','','B'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 
		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.




IF OBJECT_ID('TEMPDB..#IMPORTS_SABRE_AIA_AGENT_MAPPING_MISSING_AGENTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_SABRE_AIA_AGENT_MAPPING_MISSING_AGENTS
END
CREATE TABLE #IMPORTS_SABRE_AIA_AGENT_MAPPING_MISSING_AGENTS
(FILEDATETIME          VARCHAR(50)
,FTP_FILE_NAME         VARCHAR(100)
,WS_ROW_CREATED_TIME   DATETIME
,INVOICE_MAP_KEY       VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,RCD_CNT               INT
)
INSERT INTO #IMPORTS_SABRE_AIA_AGENT_MAPPING_MISSING_AGENTS
SELECT
 DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
--,I.FTP_FILE_NAME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
,I.WS_ROW_CREATED_TIME
,I.FF_USERNAME  AS INVOICE_MAP_KEY
,I.FF_FULL_NAME AS RESOURCE_NAME
,COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
FROM            WSOL_TB_IMPORTS_SABRE_INVOICING               I   
LEFT JOIN       WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING   IAM  ON IAM.INVOICE_MAP_KEY     = I.FF_USERNAME
INNER JOIN      DATE_TIME                                 DT   ON DT.DATE_TIME_KEY        = I.STD_TENANT_START_DATE_TIME_KEY
WHERE (
	DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
	AND ISNULL(IAM.INVOICE_MAP_KEY,'') = ''
	AND ISNULL(I.FF_USERNAME,'') NOT IN
	(
	 'SABbabsher'
	,'SABchambeck'
	,'SABcperkins'
	,'SABjdumlao'
	,'SABtest1'
	,'SABjstansberry'
	,'SABEMan'
	,'SABssmith'
	,'SABemullins'
	) -- EXCLUDE EDUCATION LEADERS AND PERFORMANCE CONSULTANTS
	  )
    OR  ISNULL(I.SCHEDULER_ACL_NAME,'') = ''
GROUP BY
 DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
--,I.FTP_FILE_NAME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
,I.WS_ROW_CREATED_TIME
,I.FF_USERNAME
,I.FF_FULL_NAME

--==================================
UPDATE #IMPORTS_SABRE_AIA_AGENT_MAPPING_MISSING_AGENTS SET
 FILEDATETIME = REPLACE(CONVERT(VARCHAR(10),ISNULL(FILEDATETIME,'1/1/1900'),102),'/',' . ')

--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_SABRE_AIA_AGENT_MAPPING_MISSING_AGENTS)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_SABRE_AIA_AGENT_MAPPING_MISSING_AGENTS
	SELECT
	 ''  --DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
	,''  --I.FTP_FILE_NAME
	,dbo.getdate()  --I.WS_ROW_CREATED_TIME
	,''  --I.FF_USER_NAME   AS INVOICE_MAP_KEY
	,''  --I.FF_AGENT__NAME AS RESOURCE_NAME
	,0   --COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
END
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RCD_CNT = 0 BEGIN  --@RCD_CNT WILL BE 0 STILL, EVEN THOUGH ONE BLANK RECORD WAS ADDED...
	SET @MSG1 = @MSG1 + 'There are NO Missing AIA Agent Mappings.'
END
ELSE BEGIN
	--IF (DATEDIFF(DD,CAST('01/20/2012' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN 
	--IF (DATEDIFF(DD,CAST('09/27/2013' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
	IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
		--This is an Invoice Friday:
		IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN  --end date + 1 may not be today, so dbo.getdate() is checked...
			SET @MSG1 = 'Today, '
		END
		SET @MSG1 = @MSG1 + CONVERT(VARCHAR(10),@DTM_END,101) + ', is Invoice Friday. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	END
	SET @MSG1 = @MSG1 + 'The list below contains Invoice Map Key values for agents that are associated to activity for the report date range, but ' 
	SET @MSG1 = @MSG1 + 'do not exist in the AIA Agent Mapping file. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

	SET @MSG1 = @MSG1 + 'Agents in this list will not be invoiced (for activity dates showing), unless a special request is created and received '
	SET @MSG1 = @MSG1 + 'in plenty of time before invoicing begins.  The programmer will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	SET @MSG1 = @MSG1 + 'Also, Project Management may need to add or update agent information in their AIA Agent Mapping .csv/"living" documents '
	SET @MSG1 = @MSG1 + 'and copy it to the FTP directory before Programming can update agents correctly. ' + CHAR(13) + CHAR(10)

	--This put directly in report at bottom, in new table, with different font size...:
	--SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Please forward any questions or problems with this notification to dthola@wslive.com.  Thanks.'
END

IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''
	
	IF @RCD_CNT = 0 BEGIN
		SET @MSG1 = @MSG1 + 'There are NO missing AIA agent mappings!'
	END
	ELSE BEGIN
		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
			SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		END
		SET @MSG1 = @MSG1 + 'The list below contains Invoice Map Key values for agents that are associated with activity for the report date range, but ' + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + 'who have not been added to or have incorrect values in the AIA Agent Mapping File. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

		SET @MSG1 = @MSG1 + 'Agents who are on this list will not be invoiced (for activity dates shown), unless a special request is made and received '
		SET @MSG1 = @MSG1 + 'with plenty of time before the automated invoice process begins.  The analyst will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

		SET @MSG1 = @MSG1 + 'Also, Project Management may need to add or update agent information in their AIA Agent Mapping CSV file and upload it '
		SET @MSG1 = @MSG1 + 'to the appropriate FTP directory before the Analyst can correctly update agent data. ' + CHAR(13) + CHAR(10)
	END

END

--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_SABRE_AIA_AGENT_MAPPING_MISSING_AGENTS 

ORDER BY
 WS_ROW_CREATED_TIME DESC
,INVOICE_MAP_KEY
,FTP_FILE_NAME

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_SABRE_AIA_XML]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_SABRE_AIA_XML]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300)
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'-Manual - when users run report - what SRS reports are defaulted to.  MAN means use date range that user specified.  The exception is when a report is defined with PTD/YTD and MTD rows in it.
                                  --         'NEW'-Subscription - what SRS subscriptions are defaulted to.  NEW means set date range @vars based on @TIME_INTERVAL. (since date range in SRS Subscription can't be set correctly)
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='AIA'-Agent Invoice Automation - what Sergey uses for/in Scheduler...
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='XML'-AIA RPT (DETAIL) (XML FILE/EXPORT),
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_SABRE_AIA_XML] '05/26/2015','05/26/2015','0',' ','Y','0','W14','Y','MM','ID','Y','4','NEW','AIA','XML' --in test mode

--  SELECT * FROM WSOL_TB_IMPORTS_SABRE_SD_INVOICE_GROUPS

SET @TENANT_KEY = 900704  --Used below for file name !!! In SSIS !!

--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)  
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 0,101) AS DATETIME)  
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) + 1
END

--IF @EXECUTIONER = 'MAN', DON'T CHANGE DATES -- THE REPORT IS BEING RAN MANUALLY, AND THE DATE RANGE WANTED BY THE USER IS BEING SET MANUALLY.

IF @EXECUTIONER = 'NEW' BEGIN -- NEW BI-MONTHLY PAYMENT CYCLE 1ST AND 16TH OF EACH MONTH
	IF @TIME_INTERVAL = 'W14' BEGIN
		IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate() - 1)) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
			END
		END		
		ELSE IF DAY(dbo.getdate()) = 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) < 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
	END
END

--==========================================================================================
--FORMAT 'MULTIPLES' "IN THAT" VALUES:  (Referring to CHARINDEX(search for this, in that))
--==========================================================================================
--SET @TENANT_KEY      = ',' + LTRIM(RTRIM(@TENANT_KEY))      + ','
--SET @SCHEDULER_GROUP = ',' + LTRIM(RTRIM(@SCHEDULER_GROUP)) + ','
SET @ID_EXT          = ',' + LTRIM(RTRIM(@ID_EXT)) + ','


--==================================
--SET AMOUNT TO DIVIDE BY:
--================================== 60.0 OR 60.00 MAKES NO DIFFERENCE.
DECLARE @DS DECIMAL(10,2)  --INT  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.0       --DIVIDE SECONDS BY 1 TO GET SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
	SET @DS = 60.0    --DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
	SET @DS = 3600.0  --DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
IF @RPT_TYPE_GRP = 'AIA' BEGIN

	--POPULATES XML REPORT.  SRS SUBSCRIPTION EXPORTS TO XML.  SSIS RENAMES AND MOVES XML FILE TO FTP.  SERGEY PICKS UP FILE.
	
	IF @RPT_TYPE = 'XML' BEGIN  --AIA REPORT  --EXACTLY WHAT IS IN XML FILE AND/OR AIA TABLE.
		--==================================		--CREATE TMP TABLE:
		IF OBJECT_ID('TEMPDB..#IMPORTS_SABRE_AIA_XML') IS NOT NULL BEGIN
		   DROP TABLE #IMPORTS_SABRE_AIA_XML
		END
		CREATE TABLE #IMPORTS_SABRE_AIA_XML
		([PLATFORM]                   VARCHAR(50)
		,[STATUS]                     VARCHAR(50) 
		,INVOICE_MAP_KEY              VARCHAR(50) 
		,FIELD_NAME                   VARCHAR(50) 
		,SCHEDULER_PROJECT_ID         VARCHAR(50) 
		,SCHEDULER_ACL_NAME           VARCHAR(50) 
		,ACD_ID_EXTENSION             VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_ID      VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_NAME    VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_ID       VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_NAME     VARCHAR(50) 
		,PRIMARY_PROJECT_MANAGER_ID   VARCHAR(500) 
		,DIRECTOR_OF_PROJECT_MANAGEMENT_ID VARCHAR(500) 
		,AGENT_TECHNOLOGY_MANAGER_ID  VARCHAR(500) 
		,CONTRACTOR_SUPPORT_PATHWAY   VARCHAR(500) 
		,INVOICE_SYSTEM_ID            VARCHAR(50) 
		,HOLIDAY_INVOICE_ID           VARCHAR(50) 
		,HOLIDAY                      VARCHAR(50) 
		,FILE_FORMAT_OF_PUSH          VARCHAR(50) 
		,AGENT_PREPARATION_INVOICE_ID VARCHAR(50) 
		,NEW_ACL                      VARCHAR(50) 
		,CURRENT_CATS                 VARCHAR(50) 
		,CATS_ID                      VARCHAR(50) 
		,PATS_ID                      VARCHAR(50) 
		,SMART_ELIGIBLE               VARCHAR(50) 
		,SMART_TIER_1                 VARCHAR(50) 
		,SMART_TIER_2                 VARCHAR(50) 
		,SMART_TIER_3                 VARCHAR(50) 
		,INTERVAL                     VARCHAR(50) 
		,DATE                         VARCHAR(50) 
		,HOD_INTERVAL                 VARCHAR(50) 
		,AU_DK_LOGGED_IN_DURATION     DECIMAL(10,2)  --INT 
		,AU_DK_AVAILABLE_DURATION     DECIMAL(10,2)  --INT 
		,AU_DK_TALK_DURATION          DECIMAL(10,2)  --INT 
		,AU_DK_IB_TALK_DURATION       DECIMAL(10,2)  --INT 
		,AU_DK_OB_TALK_DURATION       DECIMAL(10,2)  --INT 
		,AU_DK_CONVENTIONAL_ACW       DECIMAL(10,2)  --INT 
		,AU_DK_NR_DURATION            DECIMAL(10,2)  --INT 
		,AU_DK_PSEUDO_PRODUCTIVE_DURATION   DECIMAL(10,2)  --INT 
		,AU_DK_ADJUSTED_NR_DURATION         DECIMAL(10,2)  --INT 
		,AU_DK_TOTAL_PRODUCTIVE_DURATION    DECIMAL(10,2)  --INT 
		,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS DECIMAL(10,2)  --INT 
		,AU_DK_XFER_COUNT             INT 
		,AU_DK_HOLD_COUNT             INT 
		,AU_DK_CONFERENCE_COUNT       INT 
		,AU_DK_CONSULT_COUNT          INT 
		,AU_DK_PUP_COUNT              INT 
		,AU_DK_OFFERED_COUNT          INT 
		,AU_DK_HANDLED_COUNT          INT 
		,AU_DK_IB_HANDLE_COUNT        INT 
		,AU_DK_OB_HANDLE_COUNT        INT 
		,AU_DK_RONA_COUNT             INT 
		,AU_DK_AWR_COUNT              INT 
		,MINIMUM_GUARANTEE            DECIMAL(10,2) 
		,AUTHORIZED_TO_INVOICE        DECIMAL(10,2) 
		,WEEK_ENDING_DATE             VARCHAR(50) 
		,PAY_CYCLE_CLOSURE_DATE       VARCHAR(50) 
		,CAL_DATE                     DATETIME
		,TENANT_KEY                   INT 
		,INVOICE_ID                   VARCHAR(50) 
		,CST_ROW_CREATED_TIME         DATETIME
		)
		--==================================
		INSERT INTO #IMPORTS_SABRE_AIA_XML
		SELECT --AIA.*
		 AIA.[PLATFORM]
		,AIA.[STATUS]                       
		,AIA.INVOICE_MAP_KEY              
		,AIA.FIELD_NAME                   
		,AIA.SCHEDULER_PROJECT_ID         
		,AIA.SCHEDULER_ACL_NAME           
		,AIA.ACD_ID_EXTENSION             
		,AIA.OFFICIAL_WSOL_CLIENT_ID      
		,AIA.OFFICIAL_WSOL_CLIENT_NAME    
		,AIA.OFFICIAL_ACD_CLIENT_ID       
		,AIA.OFFICIAL_ACD_CLIENT_NAME     
		,AIA.PRIMARY_PROJECT_MANAGER_ID   
		,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID 
		,AIA.AGENT_TECHNOLOGY_MANAGER_ID  
		,AIA.CONTRACTOR_SUPPORT_PATHWAY   
		,AIA.INVOICE_SYSTEM_ID            
		,AIA.HOLIDAY_INVOICE_ID           
		,AIA.HOLIDAY                      
		,AIA.FILE_FORMAT_OF_PUSH          
		,AIA.AGENT_PREPARATION_INVOICE_ID 
		,AIA.NEW_ACL                      
		,AIA.CURRENT_CATS                 
		,AIA.CATS_ID                      
		,AIA.PATS_ID                      
		,AIA.SMART_ELIGIBLE               
		,AIA.SMART_TIER_1                 
		,AIA.SMART_TIER_2                 
		,AIA.SMART_TIER_3                 
		,AIA.INTERVAL                     
		,AIA.DATE                         
		,AIA.HOD_INTERVAL                 
		,CAST( ( 1.0 * (AIA.AU_DK_LOGGED_IN_DURATION) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_LOGGED_IN_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_AVAILABLE_DURATION) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_AVAILABLE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_TALK_DURATION) )      / @DS AS DECIMAL(10,2)) --AS AU_DK_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_IB_TALK_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_IB_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_OB_TALK_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_OB_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_CONVENTIONAL_ACW) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_CONVENTIONAL_ACW
		,CAST( ( 1.0 * (AIA.AU_DK_NR_DURATION) )        / @DS AS DECIMAL(10,2)) --AS AU_DK_NR_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_PSEUDO_PRODUCTIVE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_ADJUSTED_NR_DURATION) )         / @DS AS DECIMAL(10,2)) --AS AU_DK_ADJUSTED_NR_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION) )    / @DS AS DECIMAL(10,2)) --AS AU_DK_TOTAL_PRODUCTIVE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
		,(AIA.AU_DK_XFER_COUNT)         --AS AU_DK_XFER_COUNT
		,(AIA.AU_DK_HOLD_COUNT)         --AS AU_DK_HOLD_COUNT
		,(AIA.AU_DK_CONFERENCE_COUNT)   --AS AU_DK_CONFERENCE_COUNT
		,(AIA.AU_DK_CONSULT_COUNT)      --AS AU_DK_CONSULT_COUNT
		,(AIA.AU_DK_PUP_COUNT)          --AS AU_DK_PUP_COUNT
		,(AIA.AU_DK_OFFERED_COUNT)      --AS AU_DK_OFFERED_COUNT
		,(AIA.AU_DK_HANDLED_COUNT)      --AS AU_DK_HANDLED_COUNT
		,(AIA.AU_DK_IB_HANDLE_COUNT)    --AS AU_DK_IB_HANDLE_COUNT
		,(AIA.AU_DK_OB_HANDLE_COUNT)    --AS AU_DK_OB_HANDLE_COUNT
		,(AIA.AU_DK_RONA_COUNT)         --AS AU_DK_RONA_COUNT
		,(AIA.AU_DK_AWR_COUNT)          --AS AU_DK_AWR_COUNT
		,CAST( ( 1.0 * (AIA.MINIMUM_GUARANTEE) )     / @DS AS DECIMAL(10,2)) --AS MINIMUM_GUARANTEE
		,CAST( ( 1.0 * (AIA.AUTHORIZED_TO_INVOICE) ) / @DS AS DECIMAL(10,2)) --AS AUTHORIZED_TO_INVOICE
		,AIA.WEEK_ENDING_DATE             
		,AIA.PAY_CYCLE_CLOSURE_DATE       
		,AIA.CAL_DATE                     
		,AIA.TENANT_KEY                   
		,AIA.INVOICE_ID                   
		,AIA.WS_ROW_CREATED_TIME         

		--  SELECT *
		FROM            WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA     AIA
		INNER JOIN      DATE_TIME                            DT    ON DT.DATE_TIME_KEY      = AIA.STD_TENANT_START_DATE_TIME_KEY

		WHERE ( DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END )
		--AND ( @TENANT_KEY      IN (',0,',',,') OR CHARINDEX(',' + CAST(AIA.TENANT_KEY       AS VARCHAR(10)) + ',',@TENANT_KEY)      > 0 )
		--AND ( @ID_EXT          IN (',0,',',,') OR CHARINDEX(',' + IG.ID_EXT + ',',@ID_EXT) > 0 )

		  AND AIA.STATUS = 'Active'
		  AND ISNULL(AIA.EMAIL,'') <> '' --<----Used to filter out those that were not in the AIA Agent Mapping table!
		  AND ( (ISNULL(AIA.READY_FOR_XML,'') = 'Y')  --<----Maintain this field, and the AIA will populate the XML correctly every time!!!!!!!!!
				OR (@ID_EXT = 'Y') )  --<----In Test Mode (ignore what ready_for_xml is set to).
		  AND ( ISNULL(AIA.INVOICE_ID,'') <> '' )  --INSURANCE, IN CASE BLANK ID EXTENSION SLIPS THROUGH...:

		ORDER BY 
		 AIA.OFFICIAL_ACD_CLIENT_NAME
		--,AIA.SCHEDULER_ACL_NAME
		,AIA.INVOICE_ID

		,AIA.ACD_ID_EXTENSION     
		,AIA.INVOICE_MAP_KEY
		,AIA.DATE
		,AIA.HOD_INTERVAL


		--==================================!!!--INSERT RECORD FOR REPORT SO SSIS KNOWS DATE OF DATA IN DATASET:
		--Have to include 'D??' or 'W??' because SRS Subscriptions are being ran at about same time in one sql job step.
		--  If one subscription takes longer than the other, the wrong date will get used/pulled from the YZ_TB_FILENAMES_FOR_SSIS in the ssis. and so on.
		IF CHARINDEX('D',@TIME_INTERVAL) > 0 BEGIN
			INSERT INTO YZ_TB_FILENAMES_FOR_SSIS
			(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
			SELECT  --FOR THE .XML FILES FOR EACH DATE:
			 'iNetAIA_' + LTRIM(RTRIM(@TIME_INTERVAL))  --'iNetAIA_D09' for internal wsinet tenants 9 days from current date.  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.getdate()  --CST_ROW_CREATED_TIME
		END
		ELSE BEGIN  --'W' MEANING NEED TO PASS/POPULATE WITH DATE RANGE, LIKE 'MMDDYY_MMDDYY'. -- FOR GAR AND NW.
			INSERT INTO YZ_TB_FILENAMES_FOR_SSIS
						(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
			SELECT  --FOR GETAROOM AND NINE_WEST:    --old:-- 'AGENT_INVOICE_AIA_XML'  --SQL_JOB_NAME 
			 'iNetAIA_' + LTRIM(RTRIM(@TIME_INTERVAL)) + '_' + REPLACE(LTRIM(RTRIM(CAST(@TENANT_KEY AS VARCHAR(10)))),',','')  --'iNetAIA_W14_900595' for GAR  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_BEG,1),'/','') + '_' + REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.getdate()  --CST_ROW_CREATED_TIME
		END
		--  SELECT * FROM YZ_TB_FILENAMES_FOR_SSIS ORDER BY CST_ROW_CREATED_TIME DESC

		--==================================!!!--RETURN DATASET TO REPORT:
		SELECT *
		FROM #IMPORTS_SABRE_AIA_XML
		ORDER BY 
		 OFFICIAL_ACD_CLIENT_NAME
		--,SCHEDULER_ACL_NAME
		,INVOICE_ID

		,ACD_ID_EXTENSION     
		,INVOICE_MAP_KEY
		,DATE
		,HOD_INTERVAL
	END  --AIA_XML



END  --IF @RPT_TYPE_GRP = 'AIA'


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
--==================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_SABRE_IMPORT_STATUS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_SABRE_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_SABRE_IMPORT_STATUS] '06/01/2014','06/06/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_SABRE_IMPORT_STATUS] '06/20/2014','06/30/2014','','W'

--===========================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--===========================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_SABRE_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_SABRE_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_SABRE_IMPORT_STATUS
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_SABRE_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0)															AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_SABRE_INVOICING  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

---- AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA
--END  --IF @PSW...

--=================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=================================================================
--DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = @TENANT_KEY
----  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900704
--=================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

--CREATE CURSOR, POPULATE CURSOR FOR DATE RANGE, SPIN THROUGH EACH OF THE DAILY RECORDS, CONCATENATING TO STRING FOR EACH DATE MISSING.

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	
	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_SABRE_IMPORT_STATUS   I   ON I.FILEDATETIME                   = DT.FILEDATETIME

WHERE ISNULL(I.RCD_CNT,0) = 0

  --AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)
  --AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
		SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

			SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 8:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
		END
	END
	ELSE BEGIN
		SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
		END
	END
	
END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--SABRE:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM YZ_TB_ERRORS_FOUND
							   WHERE TENANT_KEY = 900704 AND SUB_GROUP_NAME = 'SABRE_INVOICING' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_SABRE_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_SABRE_INVOICING_IMPORT]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_SABRE_INVOICING_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_SABRE_INVOICING_IMPORT]

--  SELECT * FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1

--  Data is originally processed in Eastern timezone but reports are run and pushed in Central timezone.  No modifications needed!

--  Durations in file are in minutes.  Must convert to seconds.  Store as seconds. !!!

--=============================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY =       900704  --SABRE
--=============================================
DELETE FROM YZ_TB_ERRORS_FOUND 
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = 'SABRE_INVOICING'    --  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900704
--=============================================

--==========================================================================================================================================
--USING @WS_ROW_CREATED_TIME FOR ALL INSERTS WILL ALLOW ME TO DELETE SPECIFIC INSERT PROCESSES/FILES.  MOST IMPORTANT!!!  FOR ALL TABLES.
--  IN CASE OF EMERGENCY, CRACK GLASS.
--==========================================================================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.getdate()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===================================================================================

--======================================================================
--HANDLE COLUMN HEADER AND JUNK RECORDS:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_SABRE_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATETIME
,FF_FULL_NAME
,FF_CLIENT_USER_ID
,FF_USERNAME
,FF_LOGIN_ID
,FF_ACD_CALLS
,FF_EXTN_IN_CALLS
,FF_EXTN_OUT_CALLS
,FF_STAFFED_TIME
,FF_AGENT_RING_TIME
,FF_IACD_TIME
,FF_IACW_TIME
,FF_IACW_OUT_TIME
,FF_EXTN_IN_TIME
,FF_EXTN_OUT_TIME
,FF_HOLD_TIME
,FF_IACD_AUX_OUT_TIME
,FF_TOTAL_AUX_TIME
,FF_IAUX_OUT_TIME
,FF_AVAIL_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,ACD_CALLS
,EXTN_IN_CALLS
,EXTN_OUT_CALLS
,STAFFED_TIME
,AGENT_RING_TIME
,IACD_TIME
,IACW_TIME
,IACW_OUT_TIME
,EXTN_IN_TIME
,EXTN_OUT_TIME
,HOLD_TIME
,IACD_AUX_OUT_TIME
,TOTAL_AUX_TIME
,IAUX_OUT_TIME
,AVAIL_TIME
,HANDLED_CALLS
,ADJUSTED_ACW_TIME
,AUTHORIZED_ACW_TIME
,ADJUSTED_HOLD_TIME
,ADJUSTED_NOT_READY_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,PAY_GROUP)
SELECT
 24                     --BAD_IMPORTS_NO  --'Junk Record'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATETIME
,W1.FF_FULL_NAME
,W1.FF_CLIENT_USER_ID
,W1.FF_USERNAME
,W1.FF_LOGIN_ID
,W1.FF_ACD_CALLS
,W1.FF_EXTN_IN_CALLS
,W1.FF_EXTN_OUT_CALLS
,W1.FF_STAFFED_TIME
,W1.FF_AGENT_RING_TIME
,W1.FF_IACD_TIME
,W1.FF_IACW_TIME
,W1.FF_IACW_OUT_TIME
,W1.FF_EXTN_IN_TIME
,W1.FF_EXTN_OUT_TIME
,W1.FF_HOLD_TIME
,W1.FF_IACD_AUX_OUT_TIME
,W1.FF_TOTAL_AUX_TIME
,W1.FF_IAUX_OUT_TIME
,W1.FF_AVAIL_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.ACD_CALLS
,W1.EXTN_IN_CALLS
,W1.EXTN_OUT_CALLS
,W1.STAFFED_TIME
,W1.AGENT_RING_TIME
,W1.IACD_TIME
,W1.IACW_TIME
,W1.IACW_OUT_TIME
,W1.EXTN_IN_TIME
,W1.EXTN_OUT_TIME
,W1.HOLD_TIME
,W1.IACD_AUX_OUT_TIME
,W1.TOTAL_AUX_TIME
,W1.IAUX_OUT_TIME
,W1.AVAIL_TIME
,W1.HANDLED_CALLS
,W1.ADJUSTED_ACW_TIME
,W1.AUTHORIZED_ACW_TIME
,W1.ADJUSTED_HOLD_TIME
,W1.ADJUSTED_NOT_READY_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR
,W1.PAY_GROUP

FROM           WSOL_TB_IMPORTS_SABRE_INVOICING_1    W1
WHERE ISNULL(W1.FF_DATETIME,'') IN ('DateTime','')  OR  ISNULL(W1.FF_USERNAME,'') = ''  OR  ISNULL(W1.FF_FULL_NAME,'') = ''

--======================================================================
--DELETE COLUMN HEADER AND JUNK RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1
WHERE ISNULL(FF_DATETIME,'') IN ('DateTime','')  OR  ISNULL(FF_USERNAME,'') = ''  OR  ISNULL(FF_FULL_NAME,'') = ''
--====================================================================

--===============================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_1) TABLE THAT WEREN'T IN IMPORTED FILE:
--===============================================================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 [DATETIME]        = CASE WHEN RIGHT(FF_DATETIME,2) = 'AM' THEN
							CASE WHEN SUBSTRING(FF_DATETIME, CHARINDEX(',',FF_DATETIME) + 2, 8) = '12:00 AM' THEN
									CAST(LEFT(FF_DATETIME, CHARINDEX(',',FF_DATETIME) - 1) + ' 00:00:00' AS DATETIME)
								 ELSE
									CAST(LEFT(FF_DATETIME, CHARINDEX(',',FF_DATETIME) - 1) + ' ' + SUBSTRING(FF_DATETIME, CHARINDEX(',',FF_DATETIME) + 2, 5) + ':00' AS DATETIME)
								 END
						  WHEN RIGHT(FF_DATETIME,2) = 'PM' THEN
							CASE WHEN SUBSTRING(FF_DATETIME, CHARINDEX(',',FF_DATETIME) + 2, 8) = '12:00 PM' THEN
									CAST(LEFT(FF_DATETIME, CHARINDEX(',',FF_DATETIME) - 1) + ' 12:00:00' AS DATETIME)
								 ELSE
									CAST(LEFT(FF_DATETIME, CHARINDEX(',',FF_DATETIME) - 1) + ' ' + CONVERT(VARCHAR(10),CAST((SUBSTRING(FF_DATETIME, CHARINDEX(',',FF_DATETIME) + 2, 2) + 12) AS INT)) + ':00:00' AS DATETIME)
								 END
						  ELSE '' END
,ACD_CALLS         = CAST(ISNULL(FF_ACD_CALLS        ,'0') AS INTEGER)
,EXTN_IN_CALLS     = CAST(ISNULL(FF_EXTN_IN_CALLS    ,'0') AS INTEGER)
,EXTN_OUT_CALLS    = CAST(ISNULL(FF_EXTN_OUT_CALLS   ,'0') AS INTEGER)
,STAFFED_TIME      = CAST(ISNULL(FF_STAFFED_TIME     ,'0.00') AS DECIMAL(10,2))
,AGENT_RING_TIME   = CAST(ISNULL(FF_AGENT_RING_TIME  ,'0.00') AS DECIMAL(10,2))
,IACD_TIME         = CAST(ISNULL(FF_IACD_TIME        ,'0.00') AS DECIMAL(10,2))
,IACW_TIME         = CAST(ISNULL(FF_IACW_TIME        ,'0.00') AS DECIMAL(10,2))
,IACW_OUT_TIME     = CAST(ISNULL(FF_IACW_OUT_TIME    ,'0.00') AS DECIMAL(10,2))
,EXTN_IN_TIME      = CAST(ISNULL(FF_EXTN_IN_TIME     ,'0.00') AS DECIMAL(10,2))
,EXTN_OUT_TIME     = CAST(ISNULL(FF_EXTN_OUT_TIME    ,'0.00') AS DECIMAL(10,2))
,HOLD_TIME         = CAST(ISNULL(FF_HOLD_TIME        ,'0.00') AS DECIMAL(10,2))
,IACD_AUX_OUT_TIME = CAST(ISNULL(FF_IACD_AUX_OUT_TIME,'0.00') AS DECIMAL(10,2))
,TOTAL_AUX_TIME    = CAST(ISNULL(FF_TOTAL_AUX_TIME   ,'0.00') AS DECIMAL(10,2))
,IAUX_OUT_TIME     = CAST(ISNULL(FF_IAUX_OUT_TIME    ,'0.00') AS DECIMAL(10,2))
,AVAIL_TIME        = CAST(ISNULL(FF_AVAIL_TIME       ,'0.00') AS DECIMAL(10,2))
,TENANT_KEY		   = @TENANT_KEY  --NOT REALLY NECESSARY.

--=============================================================================================
--Need when populating tmp DEW table for insert into _AIA table.
--=============================================================================================
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME

SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN([DATETIME]) FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1))  
--=============================================================================================

--=======================================================================================
-- UPDATE DATE_TIME_KEY
--=======================================================================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM            WSOL_TB_IMPORTS_SABRE_INVOICING_1	I
INNER JOIN      DATE_TIME							DT   ON DT.CAL_DATE = I.[DATETIME]

--=====================================================
--CONVERTING FROM MINUTES TO SECONDS
--=====================================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 STAFFED_TIME             = STAFFED_TIME       * 60
,AGENT_RING_TIME          = AGENT_RING_TIME    * 60
,IACD_TIME                = IACD_TIME          * 60
,IACW_TIME                = IACW_TIME          * 60
,IACW_OUT_TIME            = IACW_OUT_TIME      * 60
,EXTN_IN_TIME             = EXTN_IN_TIME       * 60
,EXTN_OUT_TIME            = EXTN_OUT_TIME      * 60
,HOLD_TIME                = HOLD_TIME          * 60
,IACD_AUX_OUT_TIME        = IACD_AUX_OUT_TIME  * 60
,TOTAL_AUX_TIME           = TOTAL_AUX_TIME     * 60
,IAUX_OUT_TIME            = IAUX_OUT_TIME      * 60
,AVAIL_TIME               = AVAIL_TIME         * 60
--=====================================================

--=========================================================================================================================
--POPULATE ENGINEERED DATA FIELDS
--=========================================================================================================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 HANDLED_CALLS           = ACD_CALLS + EXTN_IN_CALLS + EXTN_OUT_CALLS
,ADJUSTED_ACW_TIME       = CASE WHEN IACW_OUT_TIME     > IACW_TIME      THEN 0 ELSE IACW_TIME - IACW_OUT_TIME      END
,ADJUSTED_HOLD_TIME      = CASE WHEN IACD_AUX_OUT_TIME > HOLD_TIME      THEN 0 ELSE HOLD_TIME - IACD_AUX_OUT_TIME  END
,ADJUSTED_NOT_READY_TIME = CASE WHEN IAUX_OUT_TIME     > TOTAL_AUX_TIME THEN 0 ELSE TOTAL_AUX_TIME - IAUX_OUT_TIME END

--===============================================================================================
--CALCULATE AUTHORIZED ACW TIME (LIMITED TO 1 MINUTE PER CALL)
--===============================================================================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 AUTHORIZED_ACW_TIME = CASE WHEN (ACD_CALLS * 60.0) > ADJUSTED_ACW_TIME THEN ADJUSTED_ACW_TIME
							ELSE (ACD_CALLS * 60.0) END

--===========================================================================
--POPULATE TOTAL TALK TIME
--===========================================================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 TOTAL_TALK              = IACD_TIME + EXTN_OUT_TIME + ADJUSTED_HOLD_TIME

--======================================================================
--HANDLE INVALID DATE/TIME RECORDS:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_SABRE_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATETIME
,FF_FULL_NAME
,FF_CLIENT_USER_ID
,FF_USERNAME
,FF_LOGIN_ID
,FF_ACD_CALLS
,FF_EXTN_IN_CALLS
,FF_EXTN_OUT_CALLS
,FF_STAFFED_TIME
,FF_AGENT_RING_TIME
,FF_IACD_TIME
,FF_IACW_TIME
,FF_IACW_OUT_TIME
,FF_EXTN_IN_TIME
,FF_EXTN_OUT_TIME
,FF_HOLD_TIME
,FF_IACD_AUX_OUT_TIME
,FF_TOTAL_AUX_TIME
,FF_IAUX_OUT_TIME
,FF_AVAIL_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,ACD_CALLS
,EXTN_IN_CALLS
,EXTN_OUT_CALLS
,STAFFED_TIME
,AGENT_RING_TIME
,IACD_TIME
,IACW_TIME
,IACW_OUT_TIME
,EXTN_IN_TIME
,EXTN_OUT_TIME
,HOLD_TIME
,IACD_AUX_OUT_TIME
,TOTAL_AUX_TIME
,IAUX_OUT_TIME
,AVAIL_TIME
,HANDLED_CALLS
,ADJUSTED_ACW_TIME
,AUTHORIZED_ACW_TIME
,ADJUSTED_HOLD_TIME
,ADJUSTED_NOT_READY_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,PAY_GROUP)
SELECT
 26                     --BAD_IMPORTS_NO  --'Invalid Date/Time'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATETIME
,W1.FF_FULL_NAME
,W1.FF_CLIENT_USER_ID
,W1.FF_USERNAME
,W1.FF_LOGIN_ID
,W1.FF_ACD_CALLS
,W1.FF_EXTN_IN_CALLS
,W1.FF_EXTN_OUT_CALLS
,W1.FF_STAFFED_TIME
,W1.FF_AGENT_RING_TIME
,W1.FF_IACD_TIME
,W1.FF_IACW_TIME
,W1.FF_IACW_OUT_TIME
,W1.FF_EXTN_IN_TIME
,W1.FF_EXTN_OUT_TIME
,W1.FF_HOLD_TIME
,W1.FF_IACD_AUX_OUT_TIME
,W1.FF_TOTAL_AUX_TIME
,W1.FF_IAUX_OUT_TIME
,W1.FF_AVAIL_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.ACD_CALLS
,W1.EXTN_IN_CALLS
,W1.EXTN_OUT_CALLS
,W1.STAFFED_TIME
,W1.AGENT_RING_TIME
,W1.IACD_TIME
,W1.IACW_TIME
,W1.IACW_OUT_TIME
,W1.EXTN_IN_TIME
,W1.EXTN_OUT_TIME
,W1.HOLD_TIME
,W1.IACD_AUX_OUT_TIME
,W1.TOTAL_AUX_TIME
,W1.IAUX_OUT_TIME
,W1.AVAIL_TIME
,W1.HANDLED_CALLS
,W1.ADJUSTED_ACW_TIME
,W1.AUTHORIZED_ACW_TIME
,W1.ADJUSTED_HOLD_TIME
,W1.ADJUSTED_NOT_READY_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR
,W1.PAY_GROUP
FROM           WSOL_TB_IMPORTS_SABRE_INVOICING_1    W1
WHERE ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================
--DELETE INVALID DATE/TIME RECORDS:
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================


--======================================================================
--HANDLE DUPLICATES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_SABRE_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATETIME
,FF_FULL_NAME
,FF_CLIENT_USER_ID
,FF_USERNAME
,FF_LOGIN_ID
,FF_ACD_CALLS
,FF_EXTN_IN_CALLS
,FF_EXTN_OUT_CALLS
,FF_STAFFED_TIME
,FF_AGENT_RING_TIME
,FF_IACD_TIME
,FF_IACW_TIME
,FF_IACW_OUT_TIME
,FF_EXTN_IN_TIME
,FF_EXTN_OUT_TIME
,FF_HOLD_TIME
,FF_IACD_AUX_OUT_TIME
,FF_TOTAL_AUX_TIME
,FF_IAUX_OUT_TIME
,FF_AVAIL_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,ACD_CALLS
,EXTN_IN_CALLS
,EXTN_OUT_CALLS
,STAFFED_TIME
,AGENT_RING_TIME
,IACD_TIME
,IACW_TIME
,IACW_OUT_TIME
,EXTN_IN_TIME
,EXTN_OUT_TIME
,HOLD_TIME
,IACD_AUX_OUT_TIME
,TOTAL_AUX_TIME
,IAUX_OUT_TIME
,AVAIL_TIME
,HANDLED_CALLS
,ADJUSTED_ACW_TIME
,AUTHORIZED_ACW_TIME
,ADJUSTED_HOLD_TIME
,ADJUSTED_NOT_READY_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,PAY_GROUP)
SELECT
 21                     --BAD_IMPORTS_NO  --'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATETIME
,W1.FF_FULL_NAME
,W1.FF_CLIENT_USER_ID
,W1.FF_USERNAME
,W1.FF_LOGIN_ID
,W1.FF_ACD_CALLS
,W1.FF_EXTN_IN_CALLS
,W1.FF_EXTN_OUT_CALLS
,W1.FF_STAFFED_TIME
,W1.FF_AGENT_RING_TIME
,W1.FF_IACD_TIME
,W1.FF_IACW_TIME
,W1.FF_IACW_OUT_TIME
,W1.FF_EXTN_IN_TIME
,W1.FF_EXTN_OUT_TIME
,W1.FF_HOLD_TIME
,W1.FF_IACD_AUX_OUT_TIME
,W1.FF_TOTAL_AUX_TIME
,W1.FF_IAUX_OUT_TIME
,W1.FF_AVAIL_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.ACD_CALLS
,W1.EXTN_IN_CALLS
,W1.EXTN_OUT_CALLS
,W1.STAFFED_TIME
,W1.AGENT_RING_TIME
,W1.IACD_TIME
,W1.IACW_TIME
,W1.IACW_OUT_TIME
,W1.EXTN_IN_TIME
,W1.EXTN_OUT_TIME
,W1.HOLD_TIME
,W1.IACD_AUX_OUT_TIME
,W1.TOTAL_AUX_TIME
,W1.IAUX_OUT_TIME
,W1.AVAIL_TIME
,W1.HANDLED_CALLS
,W1.ADJUSTED_ACW_TIME
,W1.AUTHORIZED_ACW_TIME
,W1.ADJUSTED_HOLD_TIME
,W1.ADJUSTED_NOT_READY_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR
,W1.PAY_GROUP
FROM
(	SELECT
	 [DATETIME]
	,FF_USERNAME
	,ROW_NUMBER() over (partition by [DATETIME], FF_USERNAME
                            order by [DATETIME], FF_USERNAME, STAFFED_TIME DESC) ROWNO
	FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1
) TNM
LEFT JOIN      WSOL_TB_IMPORTS_SABRE_INVOICING_1    W1   ON W1.[DATETIME]     = TNM.[DATETIME]
														AND W1.FF_USERNAME    = TNM.FF_USERNAME
WHERE TNM.ROWNO > 1
--======================================================================
--DELETE DUPLICATES:
--======================================================================
DELETE FROM TNM  
FROM
(	SELECT
	 [DATETIME]
	,FF_USERNAME
	,ROW_NUMBER() over (partition by [DATETIME], FF_USERNAME
                            order by [DATETIME], FF_USERNAME, STAFFED_TIME DESC) ROWNO
	FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1
) TNM
WHERE TNM.ROWNO > 1
--======================================================================

--===============================================
--POPULATE AIA AGENT MAPPING DATA
--===============================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 EMAIL              = ISNULL(IAM.EMAIL,'')
,SCHEDULER_ACL_NAME = CASE WHEN ISNULL(IAM.FF_RESOURCE,'') = 'Resource'		THEN 'Sabre Resource Agents'
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'VGR Resource'	THEN 'Sabre VGR Agents'
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'VGR Standard'	THEN 'Sabre VGR Standard Agents'
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'Vantage'		THEN 'Sabre Vantage Agents'
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = ''				THEN 'Sabre Standard Agents'					   
						   ELSE '' END	-- BLANK for 'Standard' OR 'Resource' if 'Resource'
,PAY_GROUP		    = ISNULL(IAM.PAY_GROUP,'')
--,RESOURCE_NAME		= ISNULL(IAM.RESOURCE_NAME,'')
--  SELECT * 
FROM            WSOL_TB_IMPORTS_SABRE_INVOICING_1        I
LEFT JOIN       WSOL_TB_IMPORTS_SABRE_AIA_AGENT_MAPPING  IAM  ON IAM.INVOICE_MAP_KEY = I.FF_USERNAME

--===============================================
--POPULATE ID EXTENSION
--===============================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 ID_EXT = CASE WHEN SCHEDULER_ACL_NAME  = 'Sabre Resource Agents'		THEN 'SBR'
			   WHEN SCHEDULER_ACL_NAME  = 'Sabre Standard Agents'		THEN 'SBA'
			   WHEN SCHEDULER_ACL_NAME  = 'Sabre VGR Agents'			THEN 'SBV'
			   WHEN SCHEDULER_ACL_NAME  = 'Sabre VGR Standard Agents'	THEN 'SVA'
			   WHEN SCHEDULER_ACL_NAME	= 'Sabre Vantage Agents'		THEN 'SBT'
			   ELSE '' END 

--====================================================================================================================================
--POPULATE CPROD TIME (READY + TALK + ACW)
--====================================================================================================================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 CPROD                   = CASE WHEN ID_EXT IN ('SBA','SVA','SBT') THEN
								   AVAIL_TIME + (AGENT_RING_TIME + IACD_TIME + EXTN_OUT_TIME + ADJUSTED_HOLD_TIME) + AUTHORIZED_ACW_TIME -- AS OF 6/1/15 PER PROGRAM MANAGEMENT
								WHEN ID_EXT IN ('SBR','SBV') THEN
								   AVAIL_TIME + (AGENT_RING_TIME + IACD_TIME + EXTN_OUT_TIME + ADJUSTED_HOLD_TIME) + ADJUSTED_ACW_TIME + ADJUSTED_NOT_READY_TIME -- ADJ NOT READY TIME INCLUDED AS OF 8/1/15 PER PROG MGMT
								ELSE 0.00 END

--  SELECT * FROM WSOL_TB_IMPORTS_SABRE_SD_INVOICE_GROUPS

--===============================================
--POPULATE INVOICE GROUPS DATA
--===============================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 AIR_DAY_TYPE = CASE WHEN IG.HAS_HOLIDAYS = 'Y' AND
						 (    ISNULL(IH.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) OR
						   ( ISNULL(IHA.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) AND ISNULL(IHA.ID_EXT,'') <> '' )
						 )
					  THEN 'H' ELSE 'S' END  --AS AIR_DAY_TYPE  --H=Holiday  --S=Standard
FROM            WSOL_TB_IMPORTS_SABRE_INVOICING_1				I
INNER JOIN      DATE_TIME										DT   ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY
LEFT JOIN       WSOL_TB_IMPORTS_SABRE_SD_INVOICE_GROUPS			IG   ON IG.ID_EXT              = I.ID_EXT
LEFT JOIN       WSOL_TB_IMPORTS_SABRE_SD_INVOICE_HOLIDAYS		IH   ON IH.HOLIDAY_DATE        = CAST(DT.CAL_DATE_STRING AS DATETIME)
LEFT JOIN       WSOL_TB_IMPORTS_SABRE_SD_INVOICE_HOLIDAYS_ADDL	IHA  ON IHA.HOLIDAY_DATE       = CAST(DT.CAL_DATE_STRING AS DATETIME)
															    AND		IHA.ID_EXT             = I.ID_EXT	

--  SELECT * FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1 WHERE AIR_DAY_TYPE = 'H'
--  SELECT * FROM WSOL_TB_IMPORTS_SABRE_INVOICING   WHERE AIR_DAY_TYPE = 'H'
--  SELECT * FROM WSOL_TB_IMPORTS_SABRE_SD_INVOICE_HOLIDAYS

--===============================================
--POPULATE ADDITIONAL INVOICE GROUPS DATA
--===============================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 AIR_ACW_FONT_COLOR             = 'Black'

,MIN_GUARANTEE_RATE             = ISNULL(IG.MIN_GUARANTEE_RATE,0)           --varies between scheduler acl names.
,MIN_GUARANTEE_TYPE             = ISNULL(IG.MIN_GUARANTEE_TYPE,'')          --varies between scheduler acl names.
,AUTHORIZED_TO_INVOICE_TYPE     = ISNULL(IG.AUTHORIZED_TO_INVOICE_TYPE,'')  --varies between scheduler acl names.

,HAS_HOLIDAYS    = IG.HAS_HOLIDAYS
,INCLUDE_IN_CAS  = IG.INCLUDE_IN_CAS
,READY_FOR_XML   = IG.READY_FOR_XML
,SHOW_ID_EXTS    = IG.SHOW_ID_EXTS
,RESOURCE_NAME   = I.FF_FULL_NAME
FROM            WSOL_TB_IMPORTS_SABRE_INVOICING_1        I
LEFT JOIN       WSOL_TB_IMPORTS_SABRE_SD_INVOICE_GROUPS  IG  ON IG.ID_EXT    = I.ID_EXT
												
--  SELECT * FROM WSOL_TB_IMPORTS_SABRE_SD_INVOICE_GROUPS
	
--===============================================
--SET INVOICE ID
--===============================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 INVOICE_ID         = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
FROM            WSOL_TB_IMPORTS_SABRE_INVOICING_1            AIA 
LEFT JOIN       WSOL_TB_IMPORTS_SABRE_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT

--===============================================
--CALCULATE MINIMUM GUARANTEE
--===============================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 MING = CASE WHEN ISNULL(ID_EXT,'') <> '' THEN 
				 CASE WHEN SCHEDULER_ACL_NAME = 'Sabre Resource Agents'		THEN (40.00 / 60.00) * CPROD
					  WHEN SCHEDULER_ACL_NAME = 'Sabre VGR Agents'			THEN (45.00 / 60.00) * CPROD
					  WHEN SCHEDULER_ACL_NAME = 'Sabre VGR Standard Agents'	THEN (39.00 / 60.00) * CPROD
					  WHEN SCHEDULER_ACL_NAME = 'Sabre Standard Agents'		THEN (39.00 / 60.00) * CPROD
					  WHEN SCHEDULER_ACL_NAME = 'Sabre Vantage Agents'		THEN (39.00 / 60.00) * CPROD END
			 ELSE 0.00 END

--===============================================
--CALCULATE AUTHORIZED TO INVOICE VALUE
--===============================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
 AUT2 = CASE WHEN ISNULL(ID_EXT,'') <> '' THEN 
				 CASE WHEN MING > (TOTAL_TALK) THEN MING 
					  ELSE        (TOTAL_TALK) END      --TOTAL_TALK = ADJUSTED_HOLD_TIME + EXTN_OUT_TIME + IACD_TIME
			 ELSE 0.00 END

--==========================================================
--UPDATED AUTHORIZED TO INVOICE VALUE FOR RESOURCE LEADERS
--==========================================================
--UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING_1 SET
-- AUT2 = STAFFED_TIME							-- AS OF 6/1/15 PER PROGRAM MANAGEMENT -- DISABLED AS OF 7/1/15 PER PROGRAM MANAGEMENT
--WHERE ID_EXT = 'SBR'

--====================================================	
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--====================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--Check #1:  ===================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1 )
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + '1) File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #2:  ===================================================================================================
--	SET @RCD_CNT  = (	SELECT COUNT(*) FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1  
--						WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--					)  
--	IF @RCD_CNT > 0 BEGIN
--		SET @MSG1 = @MSG1 + '2) Invalid DATETIME Intervals in SABRE INVOICING IMPORT File.  Import was Cancelled.  Nothing was Imported.   |   ' 
--		SET @ERR_CNT = @ERR_CNT + 1
--	END
--Check #3:  ===================================================================================================
--	SET @RCD_CNT  = (	SELECT COUNT(*) FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1  
--						WHERE ISNULL(FF_USERNAME,'') = ''
--					)  
--	IF @RCD_CNT > 0 BEGIN
--		SET @MSG1 = @MSG1 + '3) Blank USERNAME(s) in SABRE INVOICE IMPORT File exists.  Import was Cancelled.  Nothing was Imported.   |   ' 
--		SET @ERR_CNT = @ERR_CNT + 1
--	END
--Check #n:  ===================================================================================================
--	SET @MSG1 = @MSG1 + '2) Something not right with something.  Import was cancelled.  Nothing was Imported.     '
--	--SET @RCD_CNT = (	SELECT COUNT(*)
--	--					FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1
--	--					WHERE 'something' <> 'somethingelse'
--	--				  )  --If nothing imported in work table, don't need to return error.  That check is done in SSIS currently.

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	--SSIS reads YZ_TB_ERRORS_FOUND table where TENANT_KEY = 900704, and if record exists, outputs results/error_msg field in an email.
	INSERT INTO YZ_TB_ERRORS_FOUND
	(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'SABRE_INVOICING'	--SUB_GROUP_NAME
	,@MSG1				--ERROR_MSG
	--====================================
	GOTO EARLY_EXIT
	--====================================
END
ELSE BEGIN
	INSERT INTO YZ_TB_ERRORS_FOUND
		(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'SABRE_INVOICING'	--SUB_GROUP_NAME
	,''					--ERROR_MSG			--Never make this @MSG1 !!!  Must stay as ''.
	--Do NOT want to go to early exit here because data was good, according to 'checks'!  We want to import data into permanent table.
END

--=============================================
--UPDATED PERMANENT TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_SABRE_INVOICING SET
 FF_DATETIME				= W1.FF_DATETIME
,FF_FULL_NAME				= W1.FF_FULL_NAME
,FF_CLIENT_USER_ID			= W1.FF_CLIENT_USER_ID
--,FF_USERNAME				= W1.FF_USERNAME
,FF_LOGIN_ID				= W1.FF_LOGIN_ID
,FF_ACD_CALLS				= W1.FF_ACD_CALLS
,FF_EXTN_IN_CALLS			= W1.FF_EXTN_IN_CALLS
,FF_EXTN_OUT_CALLS			= W1.FF_EXTN_OUT_CALLS
,FF_STAFFED_TIME			= W1.FF_STAFFED_TIME
,FF_AGENT_RING_TIME			= W1.FF_AGENT_RING_TIME
,FF_IACD_TIME				= W1.FF_IACD_TIME
,FF_IACW_TIME				= W1.FF_IACW_TIME
,FF_IACW_OUT_TIME			= W1.FF_IACW_OUT_TIME
,FF_EXTN_IN_TIME			= W1.FF_EXTN_IN_TIME
,FF_EXTN_OUT_TIME			= W1.FF_EXTN_OUT_TIME
,FF_HOLD_TIME				= W1.FF_HOLD_TIME
,FF_IACD_AUX_OUT_TIME		= W1.FF_IACD_AUX_OUT_TIME
,FF_TOTAL_AUX_TIME			= W1.FF_TOTAL_AUX_TIME
,FF_IAUX_OUT_TIME			= W1.FF_IAUX_OUT_TIME
,FF_AVAIL_TIME				= W1.FF_AVAIL_TIME

,SEQNO_ADDED_TIME			= W1.SEQNO_ADDED_TIME
,SEQNO						= W1.SEQNO
,FTP_FILE_NAME				= W1.FTP_FILE_NAME

,[DATETIME]					= W1.[DATETIME]
,ACD_CALLS					= W1.ACD_CALLS
,EXTN_IN_CALLS				= W1.EXTN_IN_CALLS
,EXTN_OUT_CALLS				= W1.EXTN_OUT_CALLS
,STAFFED_TIME				= W1.STAFFED_TIME
,AGENT_RING_TIME			= W1.AGENT_RING_TIME
,IACD_TIME					= W1.IACD_TIME
,IACW_TIME					= W1.IACW_TIME
,IACW_OUT_TIME				= W1.IACW_OUT_TIME
,EXTN_IN_TIME				= W1.EXTN_IN_TIME
,EXTN_OUT_TIME				= W1.EXTN_OUT_TIME
,HOLD_TIME					= W1.HOLD_TIME
,IACD_AUX_OUT_TIME			= W1.IACD_AUX_OUT_TIME
,TOTAL_AUX_TIME				= W1.TOTAL_AUX_TIME
,IAUX_OUT_TIME				= W1.IAUX_OUT_TIME
,AVAIL_TIME					= W1.AVAIL_TIME
,HANDLED_CALLS				= W1.HANDLED_CALLS
,ADJUSTED_ACW_TIME			= W1.ADJUSTED_ACW_TIME
,AUTHORIZED_ACW_TIME		= W1.AUTHORIZED_ACW_TIME
,ADJUSTED_HOLD_TIME			= W1.ADJUSTED_HOLD_TIME
,ADJUSTED_NOT_READY_TIME	= W1.ADJUSTED_NOT_READY_TIME
,TOTAL_TALK					= W1.TOTAL_TALK
,CPROD						= W1.CPROD
,MING						= W1.MING
,AUT2						= W1.AUT2
,EMAIL						= W1.EMAIL
,ID_EXT						= W1.ID_EXT
,SCHEDULER_ACL_NAME			= W1.SCHEDULER_ACL_NAME
,PAY_GROUP					= W1.PAY_GROUP
--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE					= W1.CAL_DATE
,TENANT_KEY					= W1.TENANT_KEY
,AIR_DAY_TYPE				= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR			= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE			= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE			= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE	= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS				= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS				= W1.INCLUDE_IN_CAS
,READY_FOR_XML				= W1.READY_FOR_XML
,SHOW_ID_EXTS				= W1.SHOW_ID_EXTS
,INVOICE_ID					= W1.INVOICE_ID
,RESOURCE_NAME				= W1.RESOURCE_NAME
,AIRITKDUR					= W1.AIRITKDUR
,AIRIACDUR					= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME		= NULL
,WS_ROW_UPDATED_TIME		= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_SABRE_INVOICING_1  W1
INNER JOIN      WSOL_TB_IMPORTS_SABRE_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													  AND G.FF_USERNAME                    = W1.FF_USERNAME
----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_USERNAME                    = W1.FF_USERNAME

--=============================================
--INSERT INTO PERMANENT IMPORT TABLE: 
--=============================================
INSERT INTO WSOL_TB_IMPORTS_SABRE_INVOICING
(FF_DATETIME
,FF_FULL_NAME
,FF_CLIENT_USER_ID
,FF_USERNAME
,FF_LOGIN_ID
,FF_ACD_CALLS
,FF_EXTN_IN_CALLS
,FF_EXTN_OUT_CALLS
,FF_STAFFED_TIME
,FF_AGENT_RING_TIME
,FF_IACD_TIME
,FF_IACW_TIME
,FF_IACW_OUT_TIME
,FF_EXTN_IN_TIME
,FF_EXTN_OUT_TIME
,FF_HOLD_TIME
,FF_IACD_AUX_OUT_TIME
,FF_TOTAL_AUX_TIME
,FF_IAUX_OUT_TIME
,FF_AVAIL_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,ACD_CALLS
,EXTN_IN_CALLS
,EXTN_OUT_CALLS
,STAFFED_TIME
,AGENT_RING_TIME
,IACD_TIME
,IACW_TIME
,IACW_OUT_TIME
,EXTN_IN_TIME
,EXTN_OUT_TIME
,HOLD_TIME
,IACD_AUX_OUT_TIME
,TOTAL_AUX_TIME
,IAUX_OUT_TIME
,AVAIL_TIME
,HANDLED_CALLS
,ADJUSTED_ACW_TIME
,AUTHORIZED_ACW_TIME
,ADJUSTED_HOLD_TIME
,ADJUSTED_NOT_READY_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,PAY_GROUP
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W1.FF_DATETIME
,W1.FF_FULL_NAME
,W1.FF_CLIENT_USER_ID
,W1.FF_USERNAME
,W1.FF_LOGIN_ID
,W1.FF_ACD_CALLS
,W1.FF_EXTN_IN_CALLS
,W1.FF_EXTN_OUT_CALLS
,W1.FF_STAFFED_TIME
,W1.FF_AGENT_RING_TIME
,W1.FF_IACD_TIME
,W1.FF_IACW_TIME
,W1.FF_IACW_OUT_TIME
,W1.FF_EXTN_IN_TIME
,W1.FF_EXTN_OUT_TIME
,W1.FF_HOLD_TIME
,W1.FF_IACD_AUX_OUT_TIME
,W1.FF_TOTAL_AUX_TIME
,W1.FF_IAUX_OUT_TIME
,W1.FF_AVAIL_TIME

,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME

,W1.DATETIME
,W1.ACD_CALLS
,W1.EXTN_IN_CALLS
,W1.EXTN_OUT_CALLS
,W1.STAFFED_TIME
,W1.AGENT_RING_TIME
,W1.IACD_TIME
,W1.IACW_TIME
,W1.IACW_OUT_TIME
,W1.EXTN_IN_TIME
,W1.EXTN_OUT_TIME
,W1.HOLD_TIME
,W1.IACD_AUX_OUT_TIME
,W1.TOTAL_AUX_TIME
,W1.IAUX_OUT_TIME
,W1.AVAIL_TIME
,W1.HANDLED_CALLS
,W1.ADJUSTED_ACW_TIME
,W1.AUTHORIZED_ACW_TIME
,W1.ADJUSTED_HOLD_TIME
,W1.ADJUSTED_NOT_READY_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.PAY_GROUP
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_SABRE_INVOICING_1  W1

LEFT JOIN       WSOL_TB_IMPORTS_SABRE_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													  AND G.FF_USERNAME                    = W1.FF_USERNAME

WHERE (G.FF_USERNAME					IS NULL AND ISNULL(W1.FF_USERNAME,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )


--==================================
SET DATEFIRST 1  -- = Monday
--==================================

--===========================
IF OBJECT_ID('TEMPDB..#DT_EASY_WEEKS') IS NOT NULL BEGIN
   DROP TABLE #DT_EASY_WEEKS
END
CREATE TABLE #DT_EASY_WEEKS
(CAL_DATE_STRING      VARCHAR(10)
,CAL_WEEK_START_DATE  DATETIME
,CAL_WEEK_END_DATE    DATETIME
,PAY_CYCLE_CLOSURE_DATE DATETIME
)
INSERT INTO #DT_EASY_WEEKS
SELECT
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
FROM DATE_TIME DT
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
--WHERE DT.CAL_DATE >= CAST('06/01/2011' AS DATETIME) AND DT.CAL_DATE <  CAST('06/20/2011' AS DATETIME)
GROUP BY 
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
--===========================
UPDATE #DT_EASY_WEEKS SET CAL_WEEK_END_DATE = DATEADD(DD,6,CAL_WEEK_START_DATE)
--110713: WAS: 06/26/2011
UPDATE #DT_EASY_WEEKS SET
 PAY_CYCLE_CLOSURE_DATE = (CASE WHEN (DATEDIFF(DD,CAST('09/29/2013' AS DATETIME),CAL_WEEK_END_DATE) % 14) = 0 THEN
									CAL_WEEK_END_DATE
								ELSE
									DATEADD(DD,7,CAL_WEEK_END_DATE)
								END)
--SELECT * FROM #DT_EASY_WEEKS ORDER BY CAL_DATE_STRING

--==================================--Currently same structure as:  [YZ_TB_AGENT_INVOICE_AUTOMATION]
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA
END
CREATE TABLE #WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA   --Currently same structure as:  [YZ_TB_AGENT_INVOICE_AUTOMATION]
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](50) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[PAY_GROUP] [int] NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.FF_USERNAME  --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING            --[DATE]             
,DT.LABEL_HH24 + ':00'         --HOD_INTERVAL

,AIA.STAFFED_TIME              --AU_DK_LOGGED_IN_DURATION
,AIA.AVAIL_TIME                --AU_DK_AVAILABLE_DURATION

,AIA.AGENT_RING_TIME + AIA.TOTAL_TALK	--AIA.IACD_TIME + AIA.EXTN_OUT_TIME + AIA.ADJUSTED_HOLD_TIME    --AU_DK_TALK_DURATION
,AIA.IACD_TIME                 --AU_DK_IB_TALK_DURATION
,AIA.EXTN_OUT_TIME             --AU_DK_OB_TALK_DURATION

,CASE WHEN AIA.ID_EXT IN ('SBR','SBV')			THEN AIA.ADJUSTED_ACW_TIME + AIA.ADJUSTED_NOT_READY_TIME 
	  WHEN AIA.ID_EXT IN ('SBA','SVA','SBT')	THEN AIA.AUTHORIZED_ACW_TIME
	  ELSE 0.00 END         --AU_DK_CONVENTIONAL_ACW
,AIA.TOTAL_AUX_TIME            --AU_DK_NR_DURATION
,0                             --AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.ADJUSTED_NOT_READY_TIME   --AU_DK_ADJUSTED_NR_DURATION
,AIA.CPROD                     --AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.CPROD                     --AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS  

,0  --AU_DK_XFER_COUNT
,0  --AU_DK_HOLD_COUNT
,0  --AU_DK_CONFERENCE_COUNT
,0  --AU_DK_CONSULT_COUNT
,0  --AU_DK_PUP_COUNT

,AIA.HANDLED_CALLS             --AU_DK_OFFERED_COUNT
,AIA.HANDLED_CALLS             --AU_DK_HANDLED_COUNT        --DISCREPANCY:  P.H. SAYS HANDLED = ACD_CALLS + EXTN_IN_CALLS + EXTN_OUT_CALLS, 
,0							   --AIA.ACD_CALLS				   --+ AIA.EXTN_IN_CALLS   --AU_DK_IB_HANDLE_COUNT
,0							   --AIA.EXTN_IN_CALLS             --AU_DK_OB_HANDLE_COUNT                       YET SAYS AU_DK_OB_HANDLE_COUNT IS SUPPOSE TO BE EXTN_IN_CALLS?  
																		 --IF SO, THEN AU_DK_IB_HANDLE_COUNT SHOULD INCLUDE EXTN_IN_CALLS ???
,0   --AU_DK_RONA_COUNT
,0   --AU_DK_AWR_COUNT

,AIA.MING  --MINIMUM_GUARANTEE
,AIA.AUT2  --AUTHORIZED_TO_INVOICE

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID  --CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID 
,AIA.RESOURCE_NAME
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.PAY_GROUP
,dbo.getdate()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL       --	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
FROM            WSOL_TB_IMPORTS_SABRE_INVOICING_1            AIA 
--Only want to include valid id exts in _AIA table -- id exts that have ming and aut2 formulas and static defaults setup...:
INNER JOIN      WSOL_TB_IMPORTS_SABRE_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      WSOL_TB_IMPORTS_SABRE_SD_INVOICE_GROUPS      CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME									 DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS								 DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')
  AND (ISNULL(AIA.PAY_GROUP,'') = 0)

--=====================================
--UPDATE WSOL_TB_...UV_ANT_AIA TABLE:
--=====================================  --  SELECT TOP 100 * FROM WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA
UPDATE WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA SET
 [PLATFORM]                   = W1.[PLATFORM]
,[STATUS]                     = W1.[STATUS]
--,INVOICE_MAP_KEY              = W1.INVOICE_MAP_KEY
,FIELD_NAME                   = W1.FIELD_NAME
,SCHEDULER_PROJECT_ID         = W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME           = W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION             = W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID      = W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME    = W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID       = W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME     = W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID        = W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID = W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID       = W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY        = W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID            = W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID           = W1.HOLIDAY_INVOICE_ID
,HOLIDAY                      = W1.HOLIDAY
,FILE_FORMAT_OF_PUSH          = W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID = W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL                      = W1.NEW_ACL
,CURRENT_CATS                 = W1.CURRENT_CATS
,CATS_ID                      = W1.CATS_ID
,PATS_ID                      = W1.PATS_ID
,SMART_ELIGIBLE               = W1.SMART_ELIGIBLE
,SMART_TIER_1                 = W1.SMART_TIER_1
,SMART_TIER_2                 = W1.SMART_TIER_2
,SMART_TIER_3                 = W1.SMART_TIER_3
,INTERVAL                     = W1.INTERVAL
,[DATE]                       = W1.[DATE]
,HOD_INTERVAL                 = W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION     = W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION     = W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION          = W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION       = W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION       = W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW       = W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION            = W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT             = W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT             = W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT       = W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT          = W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT              = W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT          = W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT          = W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT        = W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT        = W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT             = W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT              = W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE            = W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE        = W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE             = W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE       = W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
,FTP_FILE_NAME = W1.FTP_FILE_NAME
,EMAIL         = W1.EMAIL

--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE                     = W1.CAL_DATE
,TENANT_KEY                   = W1.TENANT_KEY
,AIR_DAY_TYPE                 = W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR           = W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE           = W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE           = W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE   = W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS                 = W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS               = W1.INCLUDE_IN_CAS
,READY_FOR_XML                = W1.READY_FOR_XML
,SHOW_ID_EXTS                 = W1.SHOW_ID_EXTS
,INVOICE_ID                   = W1.INVOICE_ID
,RESOURCE_NAME                = W1.RESOURCE_NAME

,PAY_GROUP					  = W1.PAY_GROUP
,AIRITKDUR                    = W1.AIRITKDUR
,AIRIACDUR                    = W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME          = @WS_ROW_CREATED_TIME

FROM            #WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA   W1

INNER JOIN      WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													   AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
													   AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )

--================================================
--INSERT TMP TABLE FIELDS INTO WSOL_TB_... TABLE:
--================================================
INSERT INTO [WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.PAY_GROUP
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA   AIA
LEFT JOIN       WSOL_TB_IMPORTS_SABRE_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
													   AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
													   AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )


--==========================================================================================================================
--INSERT DATA INTO GLOBAL WORK TABLE FOR WA/SA
--==========================================================================================================================
--SELECT * FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_SABRE_WORK_HOURS_ALL') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_SABRE_WORK_HOURS_ALL
END
CREATE TABLE #WSOL_TB_IMPORTS_SABRE_WORK_HOURS_ALL
(	[TENANT_NAME] [varchar] (100) NOT NULL,
	[OFFICIAL_ACL_NAME] [varchar] (200) NOT NULL,
	[AGENT_NAME] [varchar] (200) NULL,
	[FIELD_MAP_ID] [varchar] (100) NOT NULL,
	[EMAIL] [varchar] (100) NULL,
	[LOGGED_IN_HOURS] [decimal] (10,2) NULL,
	[PRODUCTIVE_HOURS] [decimal] (10,2) NULL,
	[DATETIME] [datetime] NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[FTP_FILE_NAME] [varchar] (100) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL
)

INSERT INTO #WSOL_TB_IMPORTS_SABRE_WORK_HOURS_ALL
SELECT
 'SABRE'
,WT.OFFICIAL_ACL_NAME
,WT.AGENT_NAME
,WT.FIELD_MAP_ID
,WT.EMAIL
,WT.LOGGED_IN_HOURS
,WT.PRODUCTIVE_HOURS
,WT.DATETIME
,WT.STD_TENANT_START_DATE_TIME_KEY
,WT.FTP_FILE_NAME
,WT.WS_ROW_CREATED_TIME
FROM
(	SELECT
	 --TENANT_NAME
	 CASE WHEN W1.SCHEDULER_ACL_NAME = 'Sabre VGR Agents' THEN
			'Sabre Resource Agents'
		  ELSE W1.SCHEDULER_ACL_NAME END						AS OFFICIAL_ACL_NAME
	,W1.RESOURCE_NAME											AS AGENT_NAME
	,W1.FF_USERNAME												AS FIELD_MAP_ID
	,W1.EMAIL													AS [EMAIL]
	,(SUM(W1.STAFFED_TIME)/3600.00)								AS LOGGED_IN_HOURS
	,(SUM(W1.CPROD)/3600.00)										AS PRODUCTIVE_HOURS
	,CAST(CONVERT(VARCHAR(10), W1.[DATETIME], 111) AS DATETIME)	AS [DATETIME]
	,DT.DATE_TIME_DAY_KEY										AS STD_TENANT_START_DATE_TIME_KEY
	,W1.FTP_FILE_NAME											AS FTP_FILE_NAME
	,dbo.getdate()													AS WS_ROW_CREATED_TIME
	
	FROM WSOL_TB_IMPORTS_SABRE_INVOICING_1	W1
	INNER JOIN DATE_TIME					DT		ON DT.DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY

	GROUP BY
	 CASE WHEN W1.SCHEDULER_ACL_NAME = 'Sabre VGR Agents' THEN
			'Sabre Resource Agents'
		  ELSE W1.SCHEDULER_ACL_NAME END
	,W1.RESOURCE_NAME
	,W1.FF_USERNAME
	,W1.EMAIL
	,CAST(CONVERT(VARCHAR(10), W1.[DATETIME], 111) AS DATETIME)
	,DT.DATE_TIME_DAY_KEY
	,W1.FTP_FILE_NAME
) WT

UPDATE WSOL_TB_IMPORTS_WORK_HOURS_ALL SET
 TENANT_NAME					= WTT.TENANT_NAME
--,OFFICIAL_ACL_NAME			= WTT.OFFICIAL_ACL_NAME
,AGENT_NAME						= WTT.AGENT_NAME
--,FIELD_MAP_ID					= WTT.FIELD_MAP_ID
,[EMAIL]						= WTT.EMAIL
,LOGGED_IN_HOURS				= WTT.LOGGED_IN_HOURS
,PRODUCTIVE_HOURS				= WTT.PRODUCTIVE_HOURS
,[DATETIME]						= WTT.DATETIME
--,STD_TENANT_START_DATE_TIME_KEY	= WTT.STD_TENANT_START_DATE_TIME_KEY
,FTP_FILE_NAME					= WTT.FTP_FILE_NAME
--,WS_ROW_CREATED_TIME			= dbo.getdate()
,WS_ROW_UPDATED_TIME			= dbo.getdate()

FROM #WSOL_TB_IMPORTS_SABRE_WORK_HOURS_ALL WTT

INNER JOIN WSOL_TB_IMPORTS_WORK_HOURS_ALL WHR ON WHR.STD_TENANT_START_DATE_TIME_KEY = WTT.STD_TENANT_START_DATE_TIME_KEY
											 AND WHR.FIELD_MAP_ID					= WTT.FIELD_MAP_ID
											 AND WHR.OFFICIAL_ACL_NAME				= WTT.OFFICIAL_ACL_NAME

WHERE WHR.STD_TENANT_START_DATE_TIME_KEY	= WTT.STD_TENANT_START_DATE_TIME_KEY
  AND WHR.FIELD_MAP_ID						= WTT.FIELD_MAP_ID
  AND WHR.OFFICIAL_ACL_NAME					= WTT.OFFICIAL_ACL_NAME

INSERT INTO WSOL_TB_IMPORTS_WORK_HOURS_ALL
SELECT
 WTI.TENANT_NAME
,WTI.OFFICIAL_ACL_NAME
,WTI.AGENT_NAME
,WTI.FIELD_MAP_ID
,WTI.EMAIL
,WTI.LOGGED_IN_HOURS
,WTI.PRODUCTIVE_HOURS
,WTI.DATETIME
,WTI.STD_TENANT_START_DATE_TIME_KEY
,WTI.FTP_FILE_NAME
,WTI.WS_ROW_CREATED_TIME
,NULL
FROM #WSOL_TB_IMPORTS_SABRE_WORK_HOURS_ALL	WTI

LEFT JOIN WSOL_TB_IMPORTS_WORK_HOURS_ALL	WRK  ON WRK.STD_TENANT_START_DATE_TIME_KEY	= WTI.STD_TENANT_START_DATE_TIME_KEY
												AND WRK.FIELD_MAP_ID					= WTI.FIELD_MAP_ID
												AND WRK.OFFICIAL_ACL_NAME				= WTI.OFFICIAL_ACL_NAME

WHERE ( WRK.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(WTI.STD_TENANT_START_DATE_TIME_KEY,0 ) <> 0 )
  AND ( WRK.FIELD_MAP_ID					IS NULL AND ISNULL(WTI.FIELD_MAP_ID,'') <> '' )
  AND ( WRK.OFFICIAL_ACL_NAME				IS NULL AND ISNULL(WTI.OFFICIAL_ACL_NAME,'') <> '' )

--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_SABRE_Summary]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_SABRE_Summary]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_SABRE_Summary] '06/01/2014','06/07/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_SABRE_Summary] '06/07/2014','06/07/2014','','W'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

			IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly 
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--TO TEST:
		--DECLARE
		-- @DTM_BEG DATETIME
		--,@DTM_END DATETIME
		----SET @DTM_BEG = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_END = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_BEG = CAST('08/02/2012' AS DATETIME)
		----SET @DTM_END = CAST('08/02/2012' AS DATETIME)
		--SET @DTM_BEG = CAST('08/03/2012' AS DATETIME)
		--SET @DTM_END = CAST('08/03/2012' AS DATETIME)

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		--SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		--SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--07/06/2012 IS AN INVOICE FRIDAY.  SAME AS 05/23/2014.
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_SABRE_Summary') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_SABRE_Summary
END
CREATE TABLE #IMPORTS_SABRE_Summary
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_SABRE_Summary
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')       --AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') --AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')             --AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_SABRE_INVOICING  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA

--END  --IF @PSW...


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT      
,'White' AS BG_COLOR

FROM #IMPORTS_SABRE_Summary 

ORDER BY
-- CALL_DATETIME           
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT      


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_SABRE_SYNXIS_IMPORT_STATUS]...';


GO





CREATE PROCEDURE [dbo].[uspIMPORTS_SABRE_SYNXIS_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_SABRE_SYNXIS_IMPORT_STATUS] '06/01/2014','06/06/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_SABRE_SYNXIS_IMPORT_STATUS] '06/20/2014','06/30/2014','','W'

--===========================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--===========================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_SABRE_SYNXIS_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_SABRE_SYNXIS_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_SABRE_SYNXIS_IMPORT_STATUS
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_SABRE_SYNXIS_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0)															AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_SABRE_SYNXIS  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

---- AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA
--END  --IF @PSW...

--=================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=================================================================
--DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = @TENANT_KEY
----  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 106
--=================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

--CREATE CURSOR, POPULATE CURSOR FOR DATE RANGE, SPIN THROUGH EACH OF THE DAILY RECORDS, CONCATENATING TO STRING FOR EACH DATE MISSING.

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	
	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_SABRE_SYNXIS_IMPORT_STATUS   I   ON I.FILEDATETIME                   = DT.FILEDATETIME

WHERE ISNULL(I.RCD_CNT,0) = 0

  --AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)
  --AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
		SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

			SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 8:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
		END
	END
	ELSE BEGIN
		SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
		END
	END
	
END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--SABRE_SYNXIS:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM WSOL_TB_IMPORT_ERRORS_FOUND
							   WHERE TENANT_KEY = 900704 AND SUB_GROUP_NAME = 'SABRE_SYNXIS' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_SABRE_SYNXIS_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_SABRE_SYNXIS_Summary]...';


GO






CREATE PROCEDURE [dbo].[uspIMPORTS_SABRE_SYNXIS_Summary]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_SABRE_SYNXIS_Summary] '06/01/2014','06/07/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_SABRE_SYNXIS_Summary] '06/07/2014','06/07/2014','','W'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

			IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly 
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--TO TEST:
		--DECLARE
		-- @DTM_BEG DATETIME
		--,@DTM_END DATETIME
		----SET @DTM_BEG = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_END = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_BEG = CAST('08/02/2012' AS DATETIME)
		----SET @DTM_END = CAST('08/02/2012' AS DATETIME)
		--SET @DTM_BEG = CAST('08/03/2012' AS DATETIME)
		--SET @DTM_END = CAST('08/03/2012' AS DATETIME)

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		--SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		--SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--07/06/2012 IS AN INVOICE FRIDAY.  SAME AS 05/23/2014.
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_SABRE_SYNXIS_Summary') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_SABRE_SYNXIS_Summary
END
CREATE TABLE #IMPORTS_SABRE_SYNXIS_Summary
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_SABRE_SYNXIS_Summary
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')       --AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') --AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')             --AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_SABRE_SYNXIS  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA

--END  --IF @PSW...


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT      
,'White' AS BG_COLOR

FROM #IMPORTS_SABRE_SYNXIS_Summary 

ORDER BY
-- CALL_DATETIME           
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT      


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_SALESFORCE_INFORMATICA_WFM_IMPORT]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_SALESFORCE_INFORMATICA_WFM_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_SALESFORCE_INFORMATICA_WFM_IMPORT]

--  SELECT * FROM WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_1 ORDER BY [DATETIME] DESC

--=============================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY =       900999  --SALESFORCE
--=============================================
DELETE FROM YZ_TB_ERRORS_FOUND 
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = 'SALESFORCE_INFORMATICA_WFM'    --  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900999
--=============================================

--===================================================================================
--USING @WS_ROW_CREATED_TIME FOR ALL INSERTS WILL ALLOW ME TO DELETE SPECIFIC INSERT PROCESSES/FILES.  MOST IMPORTANT!!!  FOR ALL TABLES.
--  IN CASE OF EMERGENCY, CRACK GLASS.
--===================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.getdate()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===================================================================================

--======================================================================
--HANDLE COLUMN HEADER:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_SCHEDULER_ACL
,FF_FIELD_MAP_NAME
,FF_PROGRAM_ID
,FF_COMMON_TEAM_NAME
,FF_FIELD_MAP_ID
,FF_CLIENT_NAME
,FF_CLIENT_ID
,FF_JOBCOST_ID
,FF_SCHEDULED_TIME
,FF_CANCELLED_TIME
,FF_CONFIRMED_TIME
,FF_SCHEDULED_TIME_7
,FF_CANCELLED_TIME_7
,FF_CONFIRMED_TIME_7
,FF_SCHEDULED_TIME_30
,FF_CANCELLED_TIME_30
,FF_CONFIRMED_TIME_30
,FF_RECORD_FILE_DATE
,FF_AGENT_ID
,FF_FIRST_NAME
,FF_LAST_NAME
,FF_CORPORATE_NAME
,FF_EMAIL_ADDRESS
,FF_PASSWORD
,FF_CATS_STATUS
,FF_PRIMARY_PHONE
,FF_ALTERNATE_PHONE
,FF_MOBILE_PHONE
,FF_STREET_ADDRESS
,FF_CITY
,FF_STATE_PROVINCE
,FF_ZIP_POSTAL
,FF_MOBILE_TERMS
,FF_APPLICATION_DATE
,FF_LAST_APP_UPDATE
,FF_BIRTH_MONTH_DAY
,FF_L4_SSN
,FF_AIM_NAME
,FF_ID_AGENT
,FF_OS
,FF_DOWNLOAD_SPEED
,FF_UPLOAD_SPEED
,FF_INDIVIDUAL_W9
,FF_CORPORATE_W9
,FF_MARKETING_CODE
,FF_C_NAME
,[DATETIME]
,STD_TENANT_START_DATE_TIME_KEY
,APPLICATION_DATE
,NICKNAME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME)

SELECT
 24                     --BAD_IMPORTS_NO  --'Junk Record'
,'WFM'                  --BAD_IMPORTS_FILE_TYPE  --'WFM' FILE.
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_SCHEDULER_ACL
,W1.FF_FIELD_MAP_NAME
,W1.FF_PROGRAM_ID
,W1.FF_COMMON_TEAM_NAME
,W1.FF_FIELD_MAP_ID
,W1.FF_CLIENT_NAME
,W1.FF_CLIENT_ID
,W1.FF_JOBCOST_ID
,W1.FF_SCHEDULED_TIME
,W1.FF_CANCELLED_TIME
,W1.FF_CONFIRMED_TIME
,W1.FF_SCHEDULED_TIME_7
,W1.FF_CANCELLED_TIME_7
,W1.FF_CONFIRMED_TIME_7
,W1.FF_SCHEDULED_TIME_30
,W1.FF_CANCELLED_TIME_30
,W1.FF_CONFIRMED_TIME_30
,W1.FF_RECORD_FILE_DATE
,W1.FF_AGENT_ID
,W1.FF_FIRST_NAME
,W1.FF_LAST_NAME
,W1.FF_CORPORATE_NAME
,W1.FF_EMAIL_ADDRESS
,W1.FF_PASSWORD
,W1.FF_CATS_STATUS
,W1.FF_PRIMARY_PHONE
,W1.FF_ALTERNATE_PHONE
,W1.FF_MOBILE_PHONE
,W1.FF_STREET_ADDRESS
,W1.FF_CITY
,W1.FF_STATE_PROVINCE
,W1.FF_ZIP_POSTAL
,W1.FF_MOBILE_TERMS
,W1.FF_APPLICATION_DATE
,W1.FF_LAST_APP_UPDATE
,W1.FF_BIRTH_MONTH_DAY
,W1.FF_L4_SSN
,W1.FF_AIM_NAME
,W1.FF_ID_AGENT
,W1.FF_OS
,W1.FF_DOWNLOAD_SPEED
,W1.FF_UPLOAD_SPEED
,W1.FF_INDIVIDUAL_W9
,W1.FF_CORPORATE_W9
,W1.FF_MARKETING_CODE
,W1.FF_C_NAME
,W1.[DATETIME]
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.APPLICATION_DATE
,W1.NICKNAME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME

FROM           WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_1    W1
WHERE ISNULL(W1.FF_AGENT_ID,'') = 'Agent ID'

--======================================================================
--DELETE COLUMN HEADER AND JUNK RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_1
WHERE ISNULL(FF_AGENT_ID,'') = 'Agent ID'
--======================================================================

--=============================================
--UPDATE DATETIME
--=============================================
UPDATE WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_1 SET
 [DATETIME]			= CAST(LEFT(FF_RECORD_FILE_DATE, 10) AS DATETIME)
,APPLICATION_DATE	= CAST(LEFT(FF_APPLICATION_DATE, 10) AS DATETIME)

--======================================================================
UPDATE WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_1 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM            WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_1    I
INNER JOIN      DATE_TIME										DT   ON DT.CAL_DATE = I.[DATETIME]

--==============================================
--CREATE NICKNAME
--==============================================
UPDATE WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_1 SET
 NICKNAME = FF_FIRST_NAME + ' ' + LEFT(FF_LAST_NAME,1) + '. - WS Agent Since ' + CONVERT(CHAR(3), APPLICATION_DATE, 0) + '. ' + CONVERT(VARCHAR(4),DATEPART(YEAR,APPLICATION_DATE))

--======================================================================
--HANDLE INVALID RECORDS:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_SCHEDULER_ACL
,FF_FIELD_MAP_NAME
,FF_PROGRAM_ID
,FF_COMMON_TEAM_NAME
,FF_FIELD_MAP_ID
,FF_CLIENT_NAME
,FF_CLIENT_ID
,FF_JOBCOST_ID
,FF_SCHEDULED_TIME
,FF_CANCELLED_TIME
,FF_CONFIRMED_TIME
,FF_SCHEDULED_TIME_7
,FF_CANCELLED_TIME_7
,FF_CONFIRMED_TIME_7
,FF_SCHEDULED_TIME_30
,FF_CANCELLED_TIME_30
,FF_CONFIRMED_TIME_30
,FF_RECORD_FILE_DATE
,FF_AGENT_ID
,FF_FIRST_NAME
,FF_LAST_NAME
,FF_CORPORATE_NAME
,FF_EMAIL_ADDRESS
,FF_PASSWORD
,FF_CATS_STATUS
,FF_PRIMARY_PHONE
,FF_ALTERNATE_PHONE
,FF_MOBILE_PHONE
,FF_STREET_ADDRESS
,FF_CITY
,FF_STATE_PROVINCE
,FF_ZIP_POSTAL
,FF_MOBILE_TERMS
,FF_APPLICATION_DATE
,FF_LAST_APP_UPDATE
,FF_BIRTH_MONTH_DAY
,FF_L4_SSN
,FF_AIM_NAME
,FF_ID_AGENT
,FF_OS
,FF_DOWNLOAD_SPEED
,FF_UPLOAD_SPEED
,FF_INDIVIDUAL_W9
,FF_CORPORATE_W9
,FF_MARKETING_CODE
,FF_C_NAME
,[DATETIME]
,STD_TENANT_START_DATE_TIME_KEY
,APPLICATION_DATE
,NICKNAME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME)
SELECT
 24                     --BAD_IMPORTS_NO  --'Junk Record'
,'WFM'                  --BAD_IMPORTS_FILE_TYPE  --'WFM' FILE.
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_SCHEDULER_ACL
,W1.FF_FIELD_MAP_NAME
,W1.FF_PROGRAM_ID
,W1.FF_COMMON_TEAM_NAME
,W1.FF_FIELD_MAP_ID
,W1.FF_CLIENT_NAME
,W1.FF_CLIENT_ID
,W1.FF_JOBCOST_ID
,W1.FF_SCHEDULED_TIME
,W1.FF_CANCELLED_TIME
,W1.FF_CONFIRMED_TIME
,W1.FF_SCHEDULED_TIME_7
,W1.FF_CANCELLED_TIME_7
,W1.FF_CONFIRMED_TIME_7
,W1.FF_SCHEDULED_TIME_30
,W1.FF_CANCELLED_TIME_30
,W1.FF_CONFIRMED_TIME_30
,W1.FF_RECORD_FILE_DATE
,W1.FF_AGENT_ID
,W1.FF_FIRST_NAME
,W1.FF_LAST_NAME
,W1.FF_CORPORATE_NAME
,W1.FF_EMAIL_ADDRESS
,W1.FF_PASSWORD
,W1.FF_CATS_STATUS
,W1.FF_PRIMARY_PHONE
,W1.FF_ALTERNATE_PHONE
,W1.FF_MOBILE_PHONE
,W1.FF_STREET_ADDRESS
,W1.FF_CITY
,W1.FF_STATE_PROVINCE
,W1.FF_ZIP_POSTAL
,W1.FF_MOBILE_TERMS
,W1.FF_APPLICATION_DATE
,W1.FF_LAST_APP_UPDATE
,W1.FF_BIRTH_MONTH_DAY
,W1.FF_L4_SSN
,W1.FF_AIM_NAME
,W1.FF_ID_AGENT
,W1.FF_OS
,W1.FF_DOWNLOAD_SPEED
,W1.FF_UPLOAD_SPEED
,W1.FF_INDIVIDUAL_W9
,W1.FF_CORPORATE_W9
,W1.FF_MARKETING_CODE
,W1.FF_C_NAME
,W1.[DATETIME]
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.APPLICATION_DATE
,W1.NICKNAME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
FROM           WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_1    W1
WHERE ISNULL(W1.FF_AGENT_ID,'') = ''

--======================================================================
--DELETE COLUMN HEADER AND JUNK RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_1
WHERE ISNULL(FF_AGENT_ID,'') = ''
--======================================================================

--======================================================================
--HANDLE INVALID DATE/TIME RECORDS:  ( [DATETIME] is joined with DATE_TIME table by cal_date.  If [DATETIME] is not an exact 15 minute interval, issue.)
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_SCHEDULER_ACL
,FF_FIELD_MAP_NAME
,FF_PROGRAM_ID
,FF_COMMON_TEAM_NAME
,FF_FIELD_MAP_ID
,FF_CLIENT_NAME
,FF_CLIENT_ID
,FF_JOBCOST_ID
,FF_SCHEDULED_TIME
,FF_CANCELLED_TIME
,FF_CONFIRMED_TIME
,FF_SCHEDULED_TIME_7
,FF_CANCELLED_TIME_7
,FF_CONFIRMED_TIME_7
,FF_SCHEDULED_TIME_30
,FF_CANCELLED_TIME_30
,FF_CONFIRMED_TIME_30
,FF_RECORD_FILE_DATE
,FF_AGENT_ID
,FF_FIRST_NAME
,FF_LAST_NAME
,FF_CORPORATE_NAME
,FF_EMAIL_ADDRESS
,FF_PASSWORD
,FF_CATS_STATUS
,FF_PRIMARY_PHONE
,FF_ALTERNATE_PHONE
,FF_MOBILE_PHONE
,FF_STREET_ADDRESS
,FF_CITY
,FF_STATE_PROVINCE
,FF_ZIP_POSTAL
,FF_MOBILE_TERMS
,FF_APPLICATION_DATE
,FF_LAST_APP_UPDATE
,FF_BIRTH_MONTH_DAY
,FF_L4_SSN
,FF_AIM_NAME
,FF_ID_AGENT
,FF_OS
,FF_DOWNLOAD_SPEED
,FF_UPLOAD_SPEED
,FF_INDIVIDUAL_W9
,FF_CORPORATE_W9
,FF_MARKETING_CODE
,FF_C_NAME
,[DATETIME]
,STD_TENANT_START_DATE_TIME_KEY
,APPLICATION_DATE
,NICKNAME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME)
SELECT
 26                     --BAD_IMPORTS_NO  --'Invalid Date/Time'
,'WFM'                  --BAD_IMPORTS_FILE_TYPE  --'WFM' FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_SCHEDULER_ACL
,W1.FF_FIELD_MAP_NAME
,W1.FF_PROGRAM_ID
,W1.FF_COMMON_TEAM_NAME
,W1.FF_FIELD_MAP_ID
,W1.FF_CLIENT_NAME
,W1.FF_CLIENT_ID
,W1.FF_JOBCOST_ID
,W1.FF_SCHEDULED_TIME
,W1.FF_CANCELLED_TIME
,W1.FF_CONFIRMED_TIME
,W1.FF_SCHEDULED_TIME_7
,W1.FF_CANCELLED_TIME_7
,W1.FF_CONFIRMED_TIME_7
,W1.FF_SCHEDULED_TIME_30
,W1.FF_CANCELLED_TIME_30
,W1.FF_CONFIRMED_TIME_30
,W1.FF_RECORD_FILE_DATE
,W1.FF_AGENT_ID
,W1.FF_FIRST_NAME
,W1.FF_LAST_NAME
,W1.FF_CORPORATE_NAME
,W1.FF_EMAIL_ADDRESS
,W1.FF_PASSWORD
,W1.FF_CATS_STATUS
,W1.FF_PRIMARY_PHONE
,W1.FF_ALTERNATE_PHONE
,W1.FF_MOBILE_PHONE
,W1.FF_STREET_ADDRESS
,W1.FF_CITY
,W1.FF_STATE_PROVINCE
,W1.FF_ZIP_POSTAL
,W1.FF_MOBILE_TERMS
,W1.FF_APPLICATION_DATE
,W1.FF_LAST_APP_UPDATE
,W1.FF_BIRTH_MONTH_DAY
,W1.FF_L4_SSN
,W1.FF_AIM_NAME
,W1.FF_ID_AGENT
,W1.FF_OS
,W1.FF_DOWNLOAD_SPEED
,W1.FF_UPLOAD_SPEED
,W1.FF_INDIVIDUAL_W9
,W1.FF_CORPORATE_W9
,W1.FF_MARKETING_CODE
,W1.FF_C_NAME
,W1.[DATETIME]
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.APPLICATION_DATE
,W1.NICKNAME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
FROM           WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_1    W1
WHERE ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================
--DELETE INVALID DATE/TIME RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_1
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================

--======================================================================
--HANDLE DUPLICATES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_SCHEDULER_ACL
,FF_FIELD_MAP_NAME
,FF_PROGRAM_ID
,FF_COMMON_TEAM_NAME
,FF_FIELD_MAP_ID
,FF_CLIENT_NAME
,FF_CLIENT_ID
,FF_JOBCOST_ID
,FF_SCHEDULED_TIME
,FF_CANCELLED_TIME
,FF_CONFIRMED_TIME
,FF_SCHEDULED_TIME_7
,FF_CANCELLED_TIME_7
,FF_CONFIRMED_TIME_7
,FF_SCHEDULED_TIME_30
,FF_CANCELLED_TIME_30
,FF_CONFIRMED_TIME_30
,FF_RECORD_FILE_DATE
,FF_AGENT_ID
,FF_FIRST_NAME
,FF_LAST_NAME
,FF_CORPORATE_NAME
,FF_EMAIL_ADDRESS
,FF_PASSWORD
,FF_CATS_STATUS
,FF_PRIMARY_PHONE
,FF_ALTERNATE_PHONE
,FF_MOBILE_PHONE
,FF_STREET_ADDRESS
,FF_CITY
,FF_STATE_PROVINCE
,FF_ZIP_POSTAL
,FF_MOBILE_TERMS
,FF_APPLICATION_DATE
,FF_LAST_APP_UPDATE
,FF_BIRTH_MONTH_DAY
,FF_L4_SSN
,FF_AIM_NAME
,FF_ID_AGENT
,FF_OS
,FF_DOWNLOAD_SPEED
,FF_UPLOAD_SPEED
,FF_INDIVIDUAL_W9
,FF_CORPORATE_W9
,FF_MARKETING_CODE
,FF_C_NAME
,[DATETIME]
,STD_TENANT_START_DATE_TIME_KEY
,APPLICATION_DATE
,NICKNAME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME)
SELECT
 21                     --BAD_IMPORTS_NO  --'DUPLICATE'
,'WFM'                  --BAD_IMPORTS_FILE_TYPE  --'WFM' FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_SCHEDULER_ACL
,W1.FF_FIELD_MAP_NAME
,W1.FF_PROGRAM_ID
,W1.FF_COMMON_TEAM_NAME
,W1.FF_FIELD_MAP_ID
,W1.FF_CLIENT_NAME
,W1.FF_CLIENT_ID
,W1.FF_JOBCOST_ID
,W1.FF_SCHEDULED_TIME
,W1.FF_CANCELLED_TIME
,W1.FF_CONFIRMED_TIME
,W1.FF_SCHEDULED_TIME_7
,W1.FF_CANCELLED_TIME_7
,W1.FF_CONFIRMED_TIME_7
,W1.FF_SCHEDULED_TIME_30
,W1.FF_CANCELLED_TIME_30
,W1.FF_CONFIRMED_TIME_30
,W1.FF_RECORD_FILE_DATE
,W1.FF_AGENT_ID
,W1.FF_FIRST_NAME
,W1.FF_LAST_NAME
,W1.FF_CORPORATE_NAME
,W1.FF_EMAIL_ADDRESS
,W1.FF_PASSWORD
,W1.FF_CATS_STATUS
,W1.FF_PRIMARY_PHONE
,W1.FF_ALTERNATE_PHONE
,W1.FF_MOBILE_PHONE
,W1.FF_STREET_ADDRESS
,W1.FF_CITY
,W1.FF_STATE_PROVINCE
,W1.FF_ZIP_POSTAL
,W1.FF_MOBILE_TERMS
,W1.FF_APPLICATION_DATE
,W1.FF_LAST_APP_UPDATE
,W1.FF_BIRTH_MONTH_DAY
,W1.FF_L4_SSN
,W1.FF_AIM_NAME
,W1.FF_ID_AGENT
,W1.FF_OS
,W1.FF_DOWNLOAD_SPEED
,W1.FF_UPLOAD_SPEED
,W1.FF_INDIVIDUAL_W9
,W1.FF_CORPORATE_W9
,W1.FF_MARKETING_CODE
,W1.FF_C_NAME
,W1.[DATETIME]
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.APPLICATION_DATE
,W1.NICKNAME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
FROM
(	SELECT
	 [DATETIME]
	,FF_SCHEDULER_ACL
	,FF_FIELD_MAP_NAME
	,FF_PROGRAM_ID
	,FF_COMMON_TEAM_NAME
	,FF_FIELD_MAP_ID
	,FF_CLIENT_ID
	,FF_AGENT_ID
	,ROW_NUMBER() over (partition by [DATETIME], FF_SCHEDULER_ACL, FF_FIELD_MAP_NAME, FF_PROGRAM_ID, FF_COMMON_TEAM_NAME, FF_FIELD_MAP_ID, FF_CLIENT_ID, FF_AGENT_ID
                            order by [DATETIME], FF_AGENT_ID, FF_PROGRAM_ID DESC) ROWNO
	FROM WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_1
) TNM
LEFT JOIN      WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_1    W1	ON	W1.[DATETIME]			=	TNM.[DATETIME]
																	AND W1.FF_SCHEDULER_ACL		=	TNM.FF_SCHEDULER_ACL
																	AND W1.FF_FIELD_MAP_NAME	=	TNM.FF_FIELD_MAP_NAME
																	AND W1.FF_PROGRAM_ID		=	TNM.FF_PROGRAM_ID
																	AND W1.FF_COMMON_TEAM_NAME	=	TNM.FF_COMMON_TEAM_NAME
																	AND W1.FF_FIELD_MAP_ID		=	TNM.FF_FIELD_MAP_ID
																	AND W1.FF_CLIENT_ID			=	TNM.FF_CLIENT_ID
																	AND W1.FF_AGENT_ID			=	TNM.FF_AGENT_ID
WHERE TNM.ROWNO > 1

--======================================================================
--DELETE DUPLICATES:
--======================================================================
DELETE FROM TNM  
FROM
(	SELECT
	 [DATETIME]
	,FF_SCHEDULER_ACL
	,FF_FIELD_MAP_NAME
	,FF_PROGRAM_ID
	,FF_COMMON_TEAM_NAME
	,FF_FIELD_MAP_ID
	,FF_CLIENT_ID
	,FF_AGENT_ID
	,ROW_NUMBER() over (partition by [DATETIME], FF_SCHEDULER_ACL, FF_FIELD_MAP_NAME, FF_PROGRAM_ID, FF_COMMON_TEAM_NAME, FF_FIELD_MAP_ID, FF_CLIENT_ID, FF_AGENT_ID
                            order by [DATETIME], FF_AGENT_ID, FF_PROGRAM_ID DESC) ROWNO
	FROM WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_1
) TNM
WHERE TNM.ROWNO > 1
--======================================================================

--=============================================	--Hopefully generic enough for all Tenant SSIS to use!
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=============================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--SQL won't insert special characters!!!  + CHAR(9)  --CHAR(10) + CHAR(13)
--Check #1:  ===================================================================================================I DON'T THINK THEY ARE PUTTING DUD FILES ON FTP.
	SET @RCD_CNT = (	SELECT COUNT(*) FROM WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_1 )
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + '1) File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	--SSIS reads yz_tb_errors_found table where tenant_key = 900543, and if record exists, outputs results/error_msg field in an email.
	INSERT INTO YZ_TB_ERRORS_FOUND
	(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY					--TENANT_KEY
	,'SALESFORCE-INFORMATICA-WFM'	--SUB_GROUP_NAME
	,@MSG1							--ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	
	--=============================================
	--Have to return a record for SSIS, no matter what, otherwise the f thing needs it's mommy:  Can't figure out how to get SSIS to work otherwise!!!

	INSERT INTO YZ_TB_ERRORS_FOUND
		(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY					--TENANT_KEY
	,'SALESFORCE-INFORMATICA-WFM'	--SUB_GROUP_NAME
	,''								--ERROR_MSG  --Never make this @MSG1 !!!  Must stay as ''.
	--Do NOT want to got to early exit here because data was good, according to 'checks'!  We want to import data into permanent table.
END

--=============================================
--INSERT INTO PERMANENT IMPORT TABLE: 
--=============================================
INSERT INTO WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM
(SCHEDULER_ACL
,FIELD_MAP_NAME
,PROGRAM_ID
,COMMON_TEAM_NAME
,FIELD_MAP_ID
,CLIENT_NAME
,CLIENT_ID
,JOBCOST_ID
,SCHEDULED_TIME
,CANCELLED_TIME
,CONFIRMED_TIME
,SCHEDULED_TIME_7
,CANCELLED_TIME_7
,CONFIRMED_TIME_7
,SCHEDULED_TIME_30
,CANCELLED_TIME_30
,CONFIRMED_TIME_30
,RECORD_FILE_DATE
,AGENT_ID
,FIRST_NAME
,LAST_NAME
,CORPORATE_NAME
,EMAIL_ADDRESS
,[PASSWORD]
,CATS_STATUS
,PRIMARY_PHONE
,ALTERNATE_PHONE
,MOBILE_PHONE
,STREET_ADDRESS
,CITY
,STATE_PROVINCE
,ZIP_POSTAL
,MOBILE_TERMS
,APPLICATION_DATE
,LAST_APP_UPDATE
,BIRTH_MONTH_DAY
,L4_SSN
,AIM_NAME
,ID_AGENT
,OS
,DOWNLOAD_SPEED
,UPLOAD_SPEED
,INDIVIDUAL_W9
,CORPORATE_W9
,MARKETING_CODE
,CATS_PROFILE_NAME
,NICKNAME
,STD_TENANT_START_DATE_TIME_KEY
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 ISNULL(W1.FF_SCHEDULER_ACL,'')					AS SCHEDULER_ACL
,ISNULL(W1.FF_FIELD_MAP_NAME,'')				AS FIELD_MAP_NAME
,ISNULL(CAST(W1.FF_PROGRAM_ID AS INT),0)		AS PROGRAM_ID
,ISNULL(W1.FF_COMMON_TEAM_NAME,'')				AS COMMON_TEAM_NAME
,ISNULL(W1.FF_FIELD_MAP_ID,'')					AS FIELD_MAP_ID
,ISNULL(W1.FF_CLIENT_NAME,'')					AS CLIENT_NAME
,ISNULL(CAST(W1.FF_CLIENT_ID AS INT),0)			AS CLIENT_ID
,ISNULL(W1.FF_JOBCOST_ID,'')					AS JOBCOST_ID
,ISNULL(CAST(W1.FF_SCHEDULED_TIME AS INT),0)	AS SCHEDULED_TIME
,ISNULL(CAST(W1.FF_CANCELLED_TIME AS INT),0)	AS CANCELLED_TIME
,ISNULL(CAST(W1.FF_CONFIRMED_TIME AS INT),0)	AS CONFIRMED_TIME
,ISNULL(CAST(W1.FF_SCHEDULED_TIME_7 AS INT),0)	AS SCHEDULED_TIME_7
,ISNULL(CAST(W1.FF_CANCELLED_TIME_7 AS INT),0)	AS CANCELLED_TIME_7
,ISNULL(CAST(W1.FF_CONFIRMED_TIME_7 AS INT),0)	AS CONFIRMED_TIME_7
,ISNULL(CAST(W1.FF_SCHEDULED_TIME_30 AS INT),0)	AS SCHEDULED_TIME_30
,ISNULL(CAST(W1.FF_CANCELLED_TIME_30 AS INT),0)	AS CANCELLED_TIME_30
,ISNULL(CAST(W1.FF_CONFIRMED_TIME_30 AS INT),0) AS CONFIRMED_TIME_30
,[DATETIME]										AS RECORD_FILE_DATE
,ISNULL(W1.FF_AGENT_ID,'')						AS AGENT_ID
,ISNULL(W1.FF_FIRST_NAME,'')					AS FIRST_NAME
,ISNULL(W1.FF_LAST_NAME,'')						AS LAST_NAME
,NULLIF(W1.FF_CORPORATE_NAME,'0')				AS CORPORATE_NAME
,ISNULL(W1.FF_EMAIL_ADDRESS,'')					AS EMAIL_ADDRESS
,ISNULL(W1.FF_PASSWORD,'')						AS [PASSWORD]
,ISNULL(W1.FF_CATS_STATUS,'')					AS CATS_STATUS
,ISNULL(W1.FF_PRIMARY_PHONE,'')					AS PRIMARY_PHONE
,ISNULL(W1.FF_ALTERNATE_PHONE,'')				AS ALTERNATE_PHONE
,ISNULL(W1.FF_MOBILE_PHONE,'')					AS MOBILE_PHONE
,ISNULL(W1.FF_STREET_ADDRESS,'')				AS STREET_ADDRESS
,ISNULL(W1.FF_CITY,'')							AS CITY
,ISNULL(W1.FF_STATE_PROVINCE,'')				AS STATE_PROVINCE
,ISNULL(W1.FF_ZIP_POSTAL,'')					AS ZIP_POSTAL
,ISNULL(CAST(W1.FF_MOBILE_TERMS AS INT),0)		AS MOBILE_TERMS
,W1.APPLICATION_DATE							AS APPLICATION_DATE
,CAST(LEFT(FF_LAST_APP_UPDATE, 10) AS DATETIME)	AS LAST_APP_UPDATE
,ISNULL(W1.FF_BIRTH_MONTH_DAY,'00/00')			AS BIRHT_MONTH_DAY
,ISNULL(W1.FF_L4_SSN,'0000')					AS L4_SSN
,ISNULL(W1.FF_AIM_NAME,'')						AS AIM_NAME
,ISNULL(W1.FF_ID_AGENT,'')						AS ID_AGENT
,ISNULL(W1.FF_OS,'')							AS OS
,ISNULL(CAST(W1.FF_DOWNLOAD_SPEED AS INT),0)	AS DOWNLOAD_SPEED
,ISNULL(CAST(W1.FF_UPLOAD_SPEED   AS INT),0)	AS UPLOAD_SPEED
,ISNULL(CAST(W1.FF_INDIVIDUAL_W9  AS INT),0)	AS INDIVIDUAL_W9
,ISNULL(CAST(W1.FF_CORPORATE_W9	  AS INT),0)	AS CORPORATE_W9
,ISNULL(CAST(W1.FF_MARKETING_CODE AS INT),0)	AS MARKETING_CODE
,ISNULL(W1.FF_C_NAME,'')						AS CATS_PROFILE_NAME
,W1.NICKNAME									AS NICKNAME

,W1.STD_TENANT_START_DATE_TIME_KEY				AS STD_TENANT_START_DATE_TIME_KEY
,W1.SEQNO_ADDED_TIME							AS SEQNO_ADDED_TIME
,W1.SEQNO										AS SEQNO
,W1.FTP_FILE_NAME								AS FTP_FILE_NAME

,@WS_ROW_CREATED_TIME							AS WS_ROW_CREATED_TIME
,NULL											AS WS_ROW_UPDATED_TIME

FROM            WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_1  W1

LEFT JOIN       WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM    G		 ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
																	AND G.PROGRAM_ID                     = W1.FF_PROGRAM_ID
																	AND G.AGENT_ID						 = W1.FF_AGENT_ID

WHERE (G.AGENT_ID						 IS NULL AND ISNULL(W1.FF_AGENT_ID,'') <> '' )
  AND (G.PROGRAM_ID                      IS NULL AND ISNULL(W1.FF_PROGRAM_ID,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY  IS NULL AND ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )

--=============================================
EARLY_EXIT:
--===========================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_SALESFORCE_INFORMATICA_WFM_IMPORT_STATUS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_SALESFORCE_INFORMATICA_WFM_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_SALESFORCE_INFORMATICA_WFM_IMPORT_STATUS] '06/01/2014','06/06/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_SALESFORCE_INFORMATICA_WFM_IMPORT_STATUS] '06/20/2014','06/30/2014','','W'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- @DATE_BEG already starting at yesterday's date.
		SET @DTM_BEG = CASE WHEN DATEPART(DW,@DTM_BEG) = 7 THEN @DTM_BEG
							ELSE DATEADD(DD,-(DATEPART(DW,@DTM_BEG)),@DTM_BEG) END	-- SET START DATE TO PAST SUNDAY	-- SET START DATE TO PAST SUNDAY
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_SALESFORCE_INFORMATICA_WFM_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_SALESFORCE_INFORMATICA_WFM_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_SALESFORCE_INFORMATICA_WFM_IMPORT_STATUS
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_SALESFORCE_INFORMATICA_WFM_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'') AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0) AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		--,C.FTP_FILE_NAME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

---- AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME  --CAST(CONVERT(VARCHAR(10),C.FILEDATETIME,101) AS DATETIME) AS FILEDATETIME		 DT.CAL_DATE --AS FILEDATETIME  --CAST(CONVERT(VARCHAR(10),C.FILEDATETIME,101) AS DATETIME) AS FILEDATETIME
		--,C.FTP_FILE_NAME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
		,C.WS_ROW_CREATED_TIME
	) UA
--END  --IF @PSW...

--=============================================	--Hopefully generic enough for all Tenant SSIS to use!
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=============================================
--DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = @TENANT_KEY
----  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900999
--=======================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT
	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

	GROUP BY
	-- REPLACE(CONVERT(VARCHAR(10),ISNULL(DT.CAL_DATE,'1/1/1900'),101),'/',' . ')
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_SALESFORCE_INFORMATICA_WFM_IMPORT_STATUS   I   ON I.FILEDATETIME                   = DT.FILEDATETIME

WHERE ISNULL(I.RCD_CNT,0) = 0

--	AND DT.CAL_DAY_NUM_IN_WEEK <> 1  -- DATALOT AGENTS DO NOT WORK ON SUNDAYS

--  AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

--  EXECUTE [dbo].[uspIMPORTS_SALESFORCE_INFORMATICA_WFM_IMPORT_STATUS] '06/20/2014','06/30/2014','','W'  --WILL BE RUNNING ON A FRI., BUT DATES PASSED IN WILL BE YESTERDAY/THU..

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''

IF @RPT_TYPE IN ('M','W') BEGIN

	SET @MSG1 = ''

	BEGIN
		SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
		END
	END
	
END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--DATALOT:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM YZ_TB_ERRORS_FOUND
							   WHERE TENANT_KEY = 900999 AND SUB_GROUP_NAME = 'SALESFORCE-INFORMATICA-WFM' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_SALESFORCE_INFORMATICA_WFM_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_SALESFORCE_INFORMATICA_WFM_INVALID_RECORDS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_SALESFORCE_INFORMATICA_WFM_INVALID_RECORDS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_SALESFORCE_INFORMATICA_WFM_INVALID_RECORDS] '10/25/2013','11/17/2013','900999','SALESFORCE_INFORMATICA_WFM','','R'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- @DATE_BEG already starting at yesterday's date.
		SET @DTM_BEG = CASE WHEN DATEPART(DW,@DTM_BEG) = 7 THEN @DTM_BEG
							ELSE DATEADD(DD,-(DATEPART(DW,@DTM_BEG)),@DTM_BEG) END	-- SET START DATE TO PAST SUNDAY
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--===================================================================
-- CREATE TMP TABLE
--===================================================================

IF OBJECT_ID('TEMPDB..#IMPORTS_SALESFORCE_INFORMATICA_WFM_INVALID_RECORDS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_SALESFORCE_INFORMATICA_WFM_INVALID_RECORDS
END
CREATE TABLE #IMPORTS_SALESFORCE_INFORMATICA_WFM_INVALID_RECORDS
(FILEDATETIME          VARCHAR(50)
,FTP_FILE_NAME         VARCHAR(100)
,WS_ROW_CREATED_TIME   DATETIME
,FIRST_NAME			   VARCHAR(50)
,LAST_NAME			   VARCHAR(50)
,EMAIL_ADDRESS	       VARCHAR(100)
,ERROR_CODE		       VARCHAR(10)
,ERROR_REASON		   VARCHAR(100)
,RCD_CNT               INT
)
INSERT INTO #IMPORTS_SALESFORCE_INFORMATICA_WFM_INVALID_RECORDS
SELECT
 DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
,I.WS_ROW_CREATED_TIME
,I.FF_FIRST_NAME		AS FIRST_NAME
,I.FF_LAST_NAME			AS LAST_NAME
,I.FF_EMAIL_ADDRESS		AS EMAIL_ADDRESS
,I.BAD_IMPORTS_NO		AS ERROR_CODE
,NULL					AS ERROR_REASON
,COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
FROM            WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM_BAD	 I   
INNER JOIN      DATE_TIME										DT   ON DT.DATE_TIME_KEY        = I.STD_TENANT_START_DATE_TIME_KEY
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND I.FF_FIRST_NAME <> 'First Name'	-- NOT INCLUDING HEADER RECORDS
GROUP BY
 DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
,I.WS_ROW_CREATED_TIME
,I.FF_FIRST_NAME
,I.FF_LAST_NAME
,I.FF_EMAIL_ADDRESS
,I.BAD_IMPORTS_NO

--==================================
UPDATE #IMPORTS_SALESFORCE_INFORMATICA_WFM_INVALID_RECORDS SET
 FILEDATETIME = REPLACE(CONVERT(VARCHAR(10),ISNULL(FILEDATETIME,'1/1/1900'),102),'/',' . ')
,ERROR_REASON = CASE WHEN ERROR_CODE = 21 THEN 'DUPLICATE RECORD'
					 WHEN ERROR_CODE = 24 THEN 'NO AGENT ID'
					 WHEN ERROR_CODE = 26 THEN 'INVALID DATE/TIME'
					 ELSE 'UNKNOWN ERROR' END

--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_SALESFORCE_INFORMATICA_WFM_INVALID_RECORDS)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_SALESFORCE_INFORMATICA_WFM_INVALID_RECORDS
	SELECT
	 ''  --DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
	,''  --I.FTP_FILE_NAME
	,dbo.getdate()  --I.WS_ROW_CREATED_TIME
	,''  --I.FF_FIRST_NAME		AS FIRST_NAME
	,''  --I.FF_LAST_NAME		AS LAST_NAME
	,''  --I.FF_EMAIL_ADDRESS	AS EMAIL_ADDRESS
	,''	 --I.BAD_IMPORTS_NO		AS ERROR_CODE
	,''	 --						AS ERROR_REASON
	,0   --COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
END
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RCD_CNT = 0 BEGIN  --@RCD_CNT WILL BE 0 STILL, EVEN THOUGH ONE BLANK RECORD WAS ADDED...
	SET @MSG1 = @MSG1 + 'There are invalid records.'
END
ELSE BEGIN
	SET @MSG1 = @MSG1 + 'The list below is the list of invalid records and the reason for which they are invalid.'  + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
END

--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_SALESFORCE_INFORMATICA_WFM_INVALID_RECORDS

ORDER BY
 FIRST_NAME
,LAST_NAME
,FTP_FILE_NAME

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_SALESFORCE_INFORMATICA_WFM_Summary]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_SALESFORCE_INFORMATICA_WFM_Summary]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_SALESFORCE_INFORMATICA_WFM_Summary] '06/01/2014','06/07/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_SALESFORCE_INFORMATICA_WFM_Summary] '06/07/2014','06/07/2014','','W'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- @DATE_BEG already starting at yesterday's date.
		SET @DTM_BEG = CASE WHEN DATEPART(DW,@DTM_BEG) = 7 THEN @DTM_BEG
							ELSE DATEADD(DD,-(DATEPART(DW,@DTM_BEG)),@DTM_BEG) END	-- SET START DATE TO PAST SUNDAY
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_SALESFORCE_INFORMATICA_WFM_Summary') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_SALESFORCE_INFORMATICA_WFM_Summary
END
CREATE TABLE #IMPORTS_SALESFORCE_INFORMATICA_WFM_Summary
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_SALESFORCE_INFORMATICA_WFM_Summary
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')       --AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') --AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')             --AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		--,C.FTP_FILE_NAME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		--,C.FTP_FILE_NAME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
		,C.WS_ROW_CREATED_TIME
		--UNION ALL  --UUUUUUUUUUNNNNNNNNNNIIIIIIIIIIOOOOOOOOOONNNNNNNNNN
	) UA

--END  --IF @PSW...


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           

,CST_ROW_CREATED_TIME

,RCD_CNT      

--,CASE WHEN DATEDIFF(HH,CALL_DATETIME,CST_ROW_CREATED_TIME) > 35 THEN 'Pink' ELSE 'White' END AS BG_COLOR
,'White' AS BG_COLOR

FROM #IMPORTS_SALESFORCE_INFORMATICA_WFM_Summary 

ORDER BY
-- CALL_DATETIME           
 FTP_FILE_NAME
,FILEDATETIME        

,CST_ROW_CREATED_TIME
   
,RCD_CNT      


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_SCHEDULE_IMPORT_STATUS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_SCHEDULE_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_SCHEDULE_IMPORT_STATUS] '12/01/2016','12/12/2016','','R'
--  EXECUTE [dbo].[uspIMPORTS_SCHEDULE_IMPORT_STATUS] '12/01/2016','12/12/2016','','W'

--=================================================================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--=================================================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- @DATE_BEG already starting at yesterday's date.
		SET @DTM_BEG = CASE WHEN DATEPART(DW,@DTM_BEG) = 7 THEN @DTM_BEG
							ELSE DATEADD(DD,-(DATEPART(DW,@DTM_BEG)),@DTM_BEG) END	-- SET START DATE TO PAST SUNDAY	-- SET START DATE TO PAST SUNDAY
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_SCHEDULE_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_SCHEDULE_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_SCHEDULE_IMPORT_STATUS
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_SCHEDULE_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'') AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0) AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --BACK TO ORIGINAL FTP FILE NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_DAILY_SCHEDULE  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

---- AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA
--END  --IF @PSW...

--=================================================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=================================================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT
	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_SCHEDULE_IMPORT_STATUS   I   ON I.FILEDATETIME = DT.FILEDATETIME

WHERE ISNULL(I.RCD_CNT,0) = 0

--	AND DT.CAL_DAY_NUM_IN_WEEK <> 1  -- DATALOT AGENTS DO NOT WORK ON SUNDAYS

--  AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''

IF @RPT_TYPE IN ('M','W') BEGIN

	SET @MSG1 = ''

	BEGIN
		SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
		END
	END
	
END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--DATALOT:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM YZ_TB_ERRORS_FOUND
							   WHERE TENANT_KEY = 900555 AND SUB_GROUP_NAME = 'WSOL_SCHEDULE' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_SCHEDULE_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_SCHEDULE_MISSING_MAP_KEYS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_SCHEDULE_MISSING_MAP_KEYS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_SCHEDULE_MISSING_MAP_KEYS] '12/01/2016','12/12/2016','900555','WSOL_SCHEDULE','','W'

--==========================================================================================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==========================================================================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- @DATE_BEG already starting at yesterday's date.
		SET @DTM_BEG = CASE WHEN DATEPART(DW,@DTM_BEG) = 7 THEN @DTM_BEG
							ELSE DATEADD(DD,-(DATEPART(DW,@DTM_BEG)),@DTM_BEG) END	-- SET START DATE TO PAST SUNDAY
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--===================================================================
-- CREATE TMP TABLE
--===================================================================
--SELECT * FROM WSOL_TB_IMPORTS_DAILY_SCHEDULE_1

IF OBJECT_ID('TEMPDB..#IMPORTS_SCHEDULE_MISSING_MAP_KEYS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_SCHEDULE_MISSING_MAP_KEYS
END
CREATE TABLE #IMPORTS_SCHEDULE_MISSING_MAP_KEYS
(FILEDATETIME          VARCHAR(50)
,FTP_FILE_NAME         VARCHAR(100)
,SEQNO_ADDED_TIME	   DATETIME
,OFFICIAL_ACL_NAME	   VARCHAR(100)
,[ROLE]				   VARCHAR(50)
,FIELD_MAP_ID	       VARCHAR(100)
,EMAIL_ADDRESS	       VARCHAR(150)
,AGENT_NAME			   VARCHAR(150)
,RCD_CNT               INT
)
INSERT INTO #IMPORTS_SCHEDULE_MISSING_MAP_KEYS
SELECT
 DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME
,I.SEQNO_ADDED_TIME
,I.FF_OFFICIAL_ACL_NAME	AS OFFICIAL_ACL_NAME
,I.FF_ROLE				AS [ROLE]
,I.FF_FIELD_MAP_ID		AS FIELD_MAP_ID
,I.FF_EMAIL				AS EMAIL_ADDRESS
,I.FF_AGENT_NAME		AS AGENT_NAME
,COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
FROM            WSOL_TB_IMPORTS_DAILY_SCHEDULE_1	I   
INNER JOIN      DATE_TIME							DT   ON DT.DATE_TIME_KEY = I.STD_TENANT_START_DATE_TIME_KEY
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND I.FF_FIELD_MAP_ID = '99999'	-- RECORDS WITH NO INVOICE MAP KEY
  AND I.FF_OFFICIAL_ACL_NAME <> 'getaroom.com Standard Agents'	--GAR STANDARD AGENTS ARE NOT FIELD MAPPED
GROUP BY
 DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
,REPLACE(I.FTP_FILE_NAME,'N3w_','')
,I.SEQNO_ADDED_TIME
,I.FF_OFFICIAL_ACL_NAME
,I.FF_ROLE
,I.FF_FIELD_MAP_ID
,I.FF_EMAIL
,I.FF_AGENT_NAME


--===========================================================================================================
UPDATE #IMPORTS_SCHEDULE_MISSING_MAP_KEYS SET
 FILEDATETIME = REPLACE(CONVERT(VARCHAR(10),ISNULL(FILEDATETIME,'1/1/1900'),102),'/',' . ')
--===========================================================================================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_SCHEDULE_MISSING_MAP_KEYS)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_SCHEDULE_MISSING_MAP_KEYS
	SELECT
	 ''  --DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
	,''  --I.FTP_FILE_NAME
	,dbo.getdate()  --I.SEQNO_ADDED_TIME
	,''  --I.FF_OFFICIAL_ACL_NAME	AS OFFICIAL_ACL_NAME
	,''  --I.FF_ROLE				AS [ROLE]
	,''  --I.FF_FIELD_MAP_ID		AS FIELD_MAP_ID
	,''	 --I.FF_EMAIL				AS EMAIL_ADDRESS
	,''	 --I.FF_AGENT_NAME			AS AGENT_NAME
	,0   --COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
END
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RCD_CNT = 0 BEGIN  --@RCD_CNT WILL BE 0 STILL, EVEN THOUGH ONE BLANK RECORD WAS ADDED...
	SET @MSG1 = @MSG1 + 'There are NO invalid records.'
END
ELSE BEGIN
	SET @MSG1 = @MSG1 + 'The list below is the list of records with missing Field Map IDs.'  + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
END

--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_SCHEDULE_MISSING_MAP_KEYS

ORDER BY
 OFFICIAL_ACL_NAME
,AGENT_NAME
,FTP_FILE_NAME

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_SCHEDULE_Summary]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_SCHEDULE_Summary]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_SCHEDULE_Summary] '12/01/2016','12/12/2016','','R'
--  EXECUTE [dbo].[uspIMPORTS_SCHEDULE_Summary] '12/01/2016','12/12/2016','','W'

--=================================================================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--=================================================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- @DATE_BEG already starting at yesterday's date.
		SET @DTM_BEG = CASE WHEN DATEPART(DW,@DTM_BEG) = 7 THEN @DTM_BEG
							ELSE DATEADD(DD,-(DATEPART(DW,@DTM_BEG)),@DTM_BEG) END	-- SET START DATE TO PAST SUNDAY
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_SCHEDULE_Summary') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_SCHEDULE_Summary
END
CREATE TABLE #IMPORTS_SCHEDULE_Summary
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_SCHEDULE_Summary
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')       --AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') --AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')             --AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --BACK TO ORIGINAL FTP FILE NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_DAILY_SCHEDULE  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA

--END  --IF @PSW...


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT      
,'White' AS BG_COLOR

FROM #IMPORTS_SCHEDULE_Summary 

ORDER BY     
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT      


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_STUBHUB_AGENT_INVOICING]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_STUBHUB_AGENT_INVOICING]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300) --Hid. Def=' '
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'  MANual,SUBscription
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='INV'
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='INV'  
AS
SET NOCOUNT ON    

--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_AGENT_INVOICING] '05/23/2014','06/05/2014','0','0','0','0','HR','Y','SS','NM','Y','4','MAN','INV','INV'

--@TIME_INTERVAL:  Can only show invoicing report at hour level or higher !!!

--Durations in FTP FILE are in seconds.  So, this report can pull by secs, mins, and hrs now.

--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_GROUPS
--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA
    
--TMP:  FOR RUNNING SQL JOBS FOR PREVIOUS DAYS:  
--SET @DATE_BEG = '05/23/2014'
--SET @DATE_END = '06/05/2014'

--==================================--SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) 
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) -- + 1
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
END
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

DECLARE
 @MTD_BEG AS DATETIME
,@MTD_END AS DATETIME  --,@YTD_BEG AS DATETIME--,@YTD_END AS DATETIME
SET @MTD_BEG = CAST(CAST(DATEPART(mm,@DTM_BEG) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)
SET @MTD_END = @DTM_END  --SET @YTD_BEG = CAST('01/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)  --THINK _BEG MAKES MORE SENSE THAN _END.--SET @YTD_END = @DTM_END
--==================================
	--                                                         MD=Month with daily totals.   MR=Month, NO Daily totals.
	--                                                         DR=Date Range, NO daily totals.  
	--                                                           The 'M' in MD,MR needed, to know that month is wanted, so @MTD_BEG and @MTD_END can be set correctly...
	--     @DLY_ AND @MTD_ ARE USED TO DETERMINE WHAT DAYS TO SHOW IN THE DIFFERENT ROWS OF DATA.

--@EXECUTIONER FROM SUBSCRIPTION WILL PASS IN 'MR' OR 'MD'.  OTHERWISE WILL BE 'DY' OR 'DR' WHEN MANUAL.

IF @TIME_INTERVAL IN ('MR','MD') BEGIN  --MONTH DETERMINED BY @DTM_BEG.
	SET @DTM_BEG = @MTD_BEG
	SET @DTM_END = @MTD_END
END

--==================================
--SET AMOUNT TO DIVIDE BY:
--==================================
DECLARE @DS DECIMAL(10,2)  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.00     --DIVIDE SECONDS BY 1  TO GET SAME, SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
    SET @DS = 60.00    --DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
    SET @DS = 3600.00  --DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_STUBHUB_AGENT_INVOICING') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_STUBHUB_AGENT_INVOICING
END
CREATE TABLE #IMPORTS_STUBHUB_AGENT_INVOICING
(TENANT_NAME            VARCHAR(50)
,ID_EXT                 VARCHAR(3)
,SCHEDULER_ACL_NAME     VARCHAR(100)  
,EMPLOYEE_ID            VARCHAR(50)   
,STD_TENANT_START_DATE_TIME_KEY INT
,RESOURCE_NAME          VARCHAR(100)

,AIR_DAY_TYPE           varchar(1)
,AIR_ACW_FONT_COLOR     varchar(50)
,MIN_GUARANTEE_RATE     decimal(6,3)
,MIN_GUARANTEE_TYPE     varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE varchar(50)
,HAS_HOLIDAYS           varchar(1)
,INCLUDE_IN_CAS         varchar(1)
,READY_FOR_XML          varchar(1)
,SHOW_ID_EXTS           varchar(1)
,
[LOGGED_IN_TIME] [int] NULL,
[READY_TIME] [int] NULL,
[NOT_READY_TIME] [int] NULL,
[CALLS_ACCEPTED] [int] NULL,
[RING_TIME] [int] NULL,
[TALK_TIME] [int] NULL,
[HOLD_TIME] [int] NULL,
[WRAP_TIME] [int] NULL,
[CONSULT_TIME] [int] NULL,
[HANDLE_TIME] [int] NULL,
[TOTAL_TALK] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MING] [decimal](10, 2) NULL,
[AUT2] [decimal](10, 2) NULL,
)

INSERT INTO #IMPORTS_STUBHUB_AGENT_INVOICING
SELECT
 'STUBHUB'  --T.TENANT_NAME
,''  --UAA.ACD_ID_EXTENSION
,UAA.SCHEDULER_ACL_NAME
,UAA.EMPLOYEE_ID 
,UAA.STD_TENANT_START_DATE_TIME_KEY
,UAA.RESOURCE_NAME

,(ISNULL(UAA.AIR_DAY_TYPE,''))           --AS AIR_DAY_TYPE
,(ISNULL(UAA.AIR_ACW_FONT_COLOR,''))     --AS AIR_ACW_FONT_COLOR
,(ISNULL(UAA.MIN_GUARANTEE_RATE,0.000))  --AS MIN_GUARANTEE_RATE
,(ISNULL(UAA.MIN_GUARANTEE_TYPE,''))     --AS MIN_GUARANTEE_TYPE
,(ISNULL(UAA.AUTHORIZED_TO_INVOICE_TYPE,'')) --AS AUTHORIZED_TO_INVOICE_TYPE
,(ISNULL(UAA.HAS_HOLIDAYS,''))           --AS HAS_HOLIDAYS
,(ISNULL(UAA.INCLUDE_IN_CAS,''))         --AS INCLUDE_IN_CAS
,(ISNULL(UAA.READY_FOR_XML,''))          --AS READY_FOR_XML
,(ISNULL(UAA.SHOW_ID_EXTS,''))           --AS SHOW_ID_EXTS

,(ISNULL(UAA.LOGGED_IN_TIME,0))
,(ISNULL(UAA.READY_TIME,0))
,(ISNULL(UAA.NOT_READY_TIME,0))
,(ISNULL(UAA.CALLS_ACCEPTED,0))
,(ISNULL(UAA.RING_TIME,0))
,(ISNULL(UAA.TALK_TIME,0))
,(ISNULL(UAA.HOLD_TIME,0))
,(ISNULL(UAA.WRAP_TIME,0))
,(ISNULL(UAA.CONSULT_TIME,0))
,(ISNULL(UAA.HANDLE_TIME,0))
,(ISNULL(UAA.TOTAL_TALK,0))
,(ISNULL(UAA.CPROD,0))
,(ISNULL(UAA.MING,0))
,(ISNULL(UAA.AUT2,0))

--DATASOURCES FOR DURATION FIELDS, IN SECONDS, IN HOUR INTERVALS:
--    GROUPED JUST ENOUGH TO BE ABLE TO JOIN DATASOURCES TOGETHER, AND AT MOST BASIC INTERVAL!
FROM
(	SELECT	
	-- UA.TENANT_KEY
	 ''									AS ACD_ID_EXTENSION
	,UA.INVOICE_ID					    AS SCHEDULER_ACL_NAME
	,UA.FF_USER_NAME					AS EMPLOYEE_ID 
	,UA.STD_TENANT_START_DATE_TIME_KEY
	--,MAX(UA.FF_AGENT_NAME)				AS RESOURCE_NAME  -- USED TO PULL AGENTS THAT ARE NOT MAPPED
	,UA.RESOURCE_NAME	                AS RESOURCE_NAME
	,MAX(UA.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,'BLACK'                            AS AIR_ACW_FONT_COLOR
	,0									AS MIN_GUARANTEE_RATE
	,''									AS MIN_GUARANTEE_TYPE
	,''									AS AUTHORIZED_TO_INVOICE_TYPE
	,'Y'								AS HAS_HOLIDAYS
	,''									AS INCLUDE_IN_CAS
	,''									AS READY_FOR_XML
	,''									AS SHOW_ID_EXTS

	,SUM(ISNULL(UA.LOGGED_IN_TIME,0))	AS LOGGED_IN_TIME
	,SUM(ISNULL(UA.READY_TIME,0))		AS READY_TIME
	,SUM(ISNULL(UA.NOT_READY_TIME,0))	AS NOT_READY_TIME
	,SUM(ISNULL(UA.CALLS_ACCEPTED,0))	AS CALLS_ACCEPTED
	,SUM(ISNULL(UA.RING_TIME,0))		AS RING_TIME
	,SUM(ISNULL(UA.TALK_TIME,0))		AS TALK_TIME
	,SUM(ISNULL(UA.HOLD_TIME,0))		AS HOLD_TIME
	,SUM(ISNULL(UA.WRAP_TIME,0))		AS WRAP_TIME
	,SUM(ISNULL(UA.CONSULT_TIME,0))		AS CONSULT_TIME
	,SUM(ISNULL(UA.HANDLE_TIME,0))		AS HANDLE_TIME
	,SUM(ISNULL(UA.TOTAL_TALK,0))		AS TOTAL_TALK
	,SUM(ISNULL(UA.CPROD,0))			AS CPROD
	,SUM(ISNULL(UA.MING,0))				AS MING
	,SUM(ISNULL(UA.AUT2,0))				AS AUT2
	
	--  SELECT *
	FROM            YZ_TB_IMPORTS_STUBHUB_INVOICING      UA
	INNER JOIN      DATE_TIME                            DT    ON DT.DATE_TIME_KEY                   = UA.STD_TENANT_START_DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
	  -- AND ISNULL(UA.RESOURCE_NAME,'') <> ''	-- FILTER OUT AGENTS WITH NO AIA AGENT MAPPING
	  -- AND ISNULL(UA.RESOURCE_NAME,'') = ''	--USED TO PULL AGENTS THAT ARE NOT MAPPED
	GROUP BY 
	 UA.INVOICE_ID
	,UA.FF_USER_NAME
	,UA.RESOURCE_NAME
	,UA.STD_TENANT_START_DATE_TIME_KEY
) UAA

--==============================================================
-- CREATE TEMPORARY TABLE TO RETURN RESULTS
--==============================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_STUBHUB_AGENT_INVOICING_RTN') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_STUBHUB_AGENT_INVOICING_RTN
END
CREATE TABLE #IMPORTS_STUBHUB_AGENT_INVOICING_RTN
(GRPNO                 INT
,TENANT_NAME           VARCHAR(50)
,ID_EXT                VARCHAR(3)
,SCHEDULER_ACL_NAME    VARCHAR(100)
,EMPLOYEE_ID           VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,CAL_YEAR_MONTH_NUM    VARCHAR(10)
,DATE_INTERVAL         VARCHAR(50)
,TIME_INTERVAL         VARCHAR(10)

,AIR_DAY_TYPE          varchar(1)
,AIR_ACW_FONT_COLOR    varchar(50)
,MIN_GUARANTEE_RATE    decimal(6,3)
,MIN_GUARANTEE_TYPE    varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE varchar(50)
,HAS_HOLIDAYS          varchar(1)
,INCLUDE_IN_CAS        varchar(1)
,READY_FOR_XML         varchar(1)
,SHOW_ID_EXTS          varchar(1)

,AIR_HOLIDAY_IN        VARCHAR(1)
,ALL_AUTHORIZED_TIME   DECIMAL(10,2)

,
[LOGGED_IN_TIME] [decimal](10, 2) NULL,
[READY_TIME] [decimal](10, 2) NULL,
[NOT_READY_TIME] [decimal](10, 2) NULL,
[CALLS_ACCEPTED] [int] NULL,
[RING_TIME] [decimal](10, 2) NULL,
[TALK_TIME] [decimal](10, 2) NULL,
[HOLD_TIME] [decimal](10, 2) NULL,
[WRAP_TIME] [decimal](10, 2) NULL,
[CONSULT_TIME] [decimal](10, 2) NULL,
[HANDLE_TIME] [decimal](10, 2) NULL,
[TOTAL_TALK] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MING] [decimal](10, 2) NULL,
[AUT2] [decimal](10, 2) NULL,
)

--==================================
-- POPULATE TEMPORARY TABLE
--==================================
INSERT INTO #IMPORTS_STUBHUB_AGENT_INVOICING_RTN
SELECT
 20								--AS GRPNO  
,ISNULL(GG.TENANT_NAME       ,'') AS TENANT_NAME
,ISNULL(GG.ID_EXT            ,'') AS ID_EXT
,ISNULL(GG.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
,ISNULL(GG.EMPLOYEE_ID       ,'') AS EMPLOYEE_ID
,ISNULL(GG.RESOURCE_NAME     ,'') AS RESOURCE_NAME
,ISNULL(GG.CAL_YEAR_MONTH_NUM,'') AS CAL_YEAR_MONTH_NUM
,ISNULL(GG.DI                ,'') AS DI
,ISNULL(GG.TI                ,'') AS TI

,(GG.AIR_DAY_TYPE)                AS AIR_DAY_TYPE
,(GG.AIR_ACW_FONT_COLOR)          AS AIR_ACW_FONT_COLOR
,(GG.MIN_GUARANTEE_RATE)          AS MIN_GUARANTEE_RATE
,(GG.MIN_GUARANTEE_TYPE)          AS MIN_GUARANTEE_TYPE
,(GG.AUTHORIZED_TO_INVOICE_TYPE)  AS AUTHORIZED_TO_INVOICE_TYPE
,(GG.HAS_HOLIDAYS)                AS HAS_HOLIDAYS
,(GG.INCLUDE_IN_CAS)              AS INCLUDE_IN_CAS
,(GG.READY_FOR_XML)               AS READY_FOR_XML
,(GG.SHOW_ID_EXTS)                AS SHOW_ID_EXTS

,'' --AS AIR_HOLIDAY_IN
,0  --AS ALL_AUTHORIZED_TIME

,CAST((ISNULL(GG.LOGGED_IN_TIME	,0)) / @DS AS DECIMAL(10,2))		AS LOGGED_IN_TIME
,CAST((ISNULL(GG.READY_TIME		,0)) / @DS AS DECIMAL(10,2))		AS READY_TIME
,CAST((ISNULL(GG.NOT_READY_TIME	,0)) / @DS AS DECIMAL(10,2))		AS NOT_READY_TIME

,(ISNULL(GG.CALLS_ACCEPTED		,0))								AS CALLS_ACCEPTED

,CAST((ISNULL(GG.RING_TIME		,0)) / @DS AS DECIMAL(10,2))		AS RING_TIME
,CAST((ISNULL(GG.TALK_TIME		,0)) / @DS AS DECIMAL(10,2))		AS TALK_TIME
,CAST((ISNULL(GG.HOLD_TIME		,0)) / @DS AS DECIMAL(10,2))		AS HOLD_TIME
,CAST((ISNULL(GG.WRAP_TIME		,0)) / @DS AS DECIMAL(10,2))		AS WRAP_TIME
,CAST((ISNULL(GG.CONSULT_TIME	,0)) / @DS AS DECIMAL(10,2))		AS CONSULT_TIME
,CAST((ISNULL(GG.HANDLE_TIME	,0)) / @DS AS DECIMAL(10,2))		AS HANDLE_TIME
,CAST((ISNULL(GG.TOTAL_TALK		,0)) / @DS AS DECIMAL(10,2))		AS TOTAL_TALK
,CAST((ISNULL(GG.CPROD			,0)) / @DS AS DECIMAL(10,2))		AS CPROD
,CAST((ISNULL(GG.MING			,0)) / @DS AS DECIMAL(10,2))		AS MING
,CAST((ISNULL(GG.AUT2			,0)) / @DS AS DECIMAL(10,2))		AS AUT2


FROM  -- GG STARTS HERE:
(	SELECT
	 ISNULL(SW.TENANT_NAME,'')        AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  AS EMPLOYEE_ID
	,ISNULL(SW.RESOURCE_NAME,'')      AS RESOURCE_NAME

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) AS TI

	,MAX(SW.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,MAX(SW.AIR_ACW_FONT_COLOR)         AS AIR_ACW_FONT_COLOR
	,MAX(SW.MIN_GUARANTEE_RATE)         AS MIN_GUARANTEE_RATE
	,MAX(SW.MIN_GUARANTEE_TYPE)         AS MIN_GUARANTEE_TYPE
	,MAX(SW.AUTHORIZED_TO_INVOICE_TYPE) AS AUTHORIZED_TO_INVOICE_TYPE
	,MAX(SW.HAS_HOLIDAYS)               AS HAS_HOLIDAYS
	,MAX(SW.INCLUDE_IN_CAS)             AS INCLUDE_IN_CAS
	,MAX(SW.READY_FOR_XML)              AS READY_FOR_XML
	,MAX(SW.SHOW_ID_EXTS)               AS SHOW_ID_EXTS

	,SUM(ISNULL(SW.LOGGED_IN_TIME	,0))	AS LOGGED_IN_TIME
	,SUM(ISNULL(SW.READY_TIME		,0))	AS READY_TIME
	,SUM(ISNULL(SW.NOT_READY_TIME	,0))	AS NOT_READY_TIME
	,SUM(ISNULL(SW.CALLS_ACCEPTED	,0))	AS CALLS_ACCEPTED
	,SUM(ISNULL(SW.RING_TIME		,0))	AS RING_TIME
	,SUM(ISNULL(SW.TALK_TIME		,0))	AS TALK_TIME
	,SUM(ISNULL(SW.HOLD_TIME		,0))	AS HOLD_TIME
	,SUM(ISNULL(SW.WRAP_TIME		,0))	AS WRAP_TIME
	,SUM(ISNULL(SW.CONSULT_TIME		,0))	AS CONSULT_TIME
	,SUM(ISNULL(SW.HANDLE_TIME		,0))	AS HANDLE_TIME
	,SUM(ISNULL(SW.TOTAL_TALK		,0))	AS TOTAL_TALK
	,SUM(ISNULL(SW.CPROD			,0))	AS CPROD
	,SUM(ISNULL(SW.MING				,0))	AS MING
	,SUM(ISNULL(SW.AUT2				,0))	AS AUT2
	
	FROM            #IMPORTS_STUBHUB_AGENT_INVOICING	SW
	INNER JOIN      DATE_TIME							DT   ON DT.DATE_TIME_KEY              = SW.STD_TENANT_START_DATE_TIME_KEY
													 
	--WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END		  --AND (@TENANT_KEY   IN ('0','') OR SW.TENANT_KEY   = CAST(@TENANT_KEY AS INT) )

	GROUP BY 
	 ISNULL(SW.TENANT_NAME,'')        --AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             --AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') --AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  --AS EMPLOYEE_ID
	,ISNULL(SW.RESOURCE_NAME,'')	  --AS RESOURCE_NAME

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) --AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) --AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) --AS TI

	--,(ISNULL(SW.FF_AGENT_NAME,''))         --AS FF_AGENT_NAME
	--,(ISNULL(SW.FF_USER_NAME,''))          --AS FF_USER_NAME

) GG

--==================================
--IS A HOLIDAY DATE IN THE MIX:
--==================================
DECLARE @HOLIDAY_IN VARCHAR(1)
SET @HOLIDAY_IN = 'N'
DECLARE @I INT
SET @I = (SELECT COUNT(*) FROM #IMPORTS_STUBHUB_AGENT_INVOICING_RTN WHERE AIR_DAY_TYPE = 'H')  --  AND INCLUDE_IN_CAS = 'Y')
IF @I > 0 BEGIN
	SET @HOLIDAY_IN = 'Y'
END
--==================================
UPDATE #IMPORTS_STUBHUB_AGENT_INVOICING_RTN SET
 AIR_HOLIDAY_IN = @HOLIDAY_IN

--======================================================
--UPDATE TOTALS LINE ON REPORT FOR STANDARD AND HOLIDAY:
--======================================================
UPDATE #IMPORTS_STUBHUB_AGENT_INVOICING_RTN SET
 ALL_AUTHORIZED_TIME = ISNULL(LOJ.ALL_AUTHORIZED_TIME,0.0)
FROM #IMPORTS_STUBHUB_AGENT_INVOICING_RTN TA
LEFT OUTER JOIN
(	SELECT
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,RESOURCE_NAME
	,AIR_DAY_TYPE
	,SUM(AUT2) AS ALL_AUTHORIZED_TIME
	FROM #IMPORTS_STUBHUB_AGENT_INVOICING_RTN 
	GROUP BY 
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,RESOURCE_NAME --EMPLOYEE_ID
	,AIR_DAY_TYPE
) LOJ ON LOJ.SCHEDULER_ACL_NAME = TA.SCHEDULER_ACL_NAME
	 AND LOJ.EMPLOYEE_ID        = TA.EMPLOYEE_ID
	 AND LOJ.RESOURCE_NAME		= TA.RESOURCE_NAME
	 AND LOJ.AIR_DAY_TYPE       = TA.AIR_DAY_TYPE

--==================================
--RETURN DATA
--==================================
--==================================
--POPULATE TABLE READ BY SSIS TO GET END DATE OF DATA REPORT/FILE HAS BEEN RUN FOR:
--==================================
INSERT INTO YZ_TB_FILENAMES_FOR_SSIS
(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
SELECT
 'uspIMPORTS_STUBHUB_AGENT_INVOICING'  --SQL_JOB_NAME
,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,111),'/','')   --FILENM   YYYYMMDD_...
,dbo.getdate()  --CST_ROW_CREATED_TIME

--=====================================
--RETURN DATASET:
--=====================================
SELECT 
 CASE WHEN @DUR_IN = 'SS' THEN '' ELSE 'F' END AS DUR_FORMAT
,CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
,V.*

FROM      #IMPORTS_STUBHUB_AGENT_INVOICING_RTN  V

ORDER BY 
 V.GRPNO
,V.SCHEDULER_ACL_NAME
,V.RESOURCE_NAME
,V.EMPLOYEE_ID
,V.CAL_YEAR_MONTH_NUM
,V.DATE_INTERVAL
,V.TIME_INTERVAL  --SINCE IN MILITARY TIME!




--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_STUBHUB_AIA_AGENT_MAPPING_IMPORT]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_STUBHUB_AIA_AGENT_MAPPING_IMPORT]
AS
SET NOCOUNT ON  -- EXECUTE [dbo].[uspIMPORTS_STUBHUB_AIA_AGENT_MAPPING_IMPORT]

--  DELETE FROM YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_1

--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_1

--Data Loading FTP Pathway
--  FTP server   = ftp.workingsol.com
--  FTP Username = global_imports
--  FTP Password = Welcome2013
--  FTP Pathway  = /AIA/STUBHUB/AIA_AGENT_MAPPING

--USES YZ_TB_ERRORS_FOUND.  NOT TOTALLY INDEPENDANT OF OTHER CLIENTS/TENANTS...

--=============================================  --COPY AND REPLACE THESE VARIABLES WHEN CREATING NEW USP FROM THIS USP.
DECLARE
 @TENANT_KEY      INT
,@SUB_GROUP_NAME  VARCHAR(50)
SET @TENANT_KEY     =       900703  --STUBHUB    --will begin with 900+ for external tenants.  the '900' is Not part of yz_tb_tenant_key in YZ_TB_TENANTS table.
SET @SUB_GROUP_NAME = 'STUBHUB_AIA_AGENT_MAPPING'
--=============================================
--WHEN RUNNING MANUALLY DURING TESTING:DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900703  AND SUB_GROUP_NAME = 'STUBHUB_AIA_AGENT_MAPPING'
DELETE FROM YZ_TB_ERRORS_FOUND 
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = @SUB_GROUP_NAME  --'STUBHUB_AIA_AGENT_MAPPING'    --  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900703
--=============================================
--WHEN RUNNING MANUALLY DURING TESTING:DELETE FROM YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_ERRORS WHERE TENANT_KEY = 900703  AND IMPORT_SUB_GROUP_NAME = 'STUBHUB_AIA_AGENT_MAPPING'
DELETE FROM YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_ERRORS
WHERE IMPORT_SUB_GROUP_NAME = @SUB_GROUP_NAME  --'STUBHUB_AIA_AGENT_MAPPING' --SELECT * FROM YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_ERRORS WHERE TENANT_KEY = 900703
--=============================================

--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_1

--=============================================
--CLEANUP WORK (_1) TABLE:
--=============================================
DELETE FROM YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_1 
WHERE ( ISNULL(INVOICE_MAP_KEY,'') = '' )
   OR ( ISNULL(RESOURCE_NAME,'') = '' )

--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_1

--=================================================================================
--  THE ELIMINATION OF THE 'SPECIAL CHARACTER' !!!
--  This ' ' is a special character!! and maybe just a cocky space!!!
--  Hightlight it and do ctl+f, on suspected data, you'll see it isn't a space !
--=================================================================================
UPDATE YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_1 SET
 RESOURCE_NAME            = RTRIM(LTRIM(REPLACE(ISNULL(RESOURCE_NAME,''),' ',' ')))
,[EMAIL]                  = RTRIM(LTRIM(REPLACE(ISNULL([EMAIL],''),' ',' ')))
,INVOICE_MAP_KEY          = RTRIM(LTRIM(REPLACE(ISNULL(INVOICE_MAP_KEY,''),' ',' ')))    
,FF_RESOURCE              = RTRIM(LTRIM(REPLACE(ISNULL(FF_RESOURCE,''),' ',' ')))
,PAY_GROUP				  = RTRIM(LTRIM(REPLACE(ISNULL(PAY_GROUP,''),' ',' ')))

--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_1
--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_ERRORS

--======================================================================
--PROCESS DUPLICATES:
--======================================================================
INSERT INTO YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_ERRORS
(RESOURCE_NAME
,EMAIL
,INVOICE_MAP_KEY
,FF_RESOURCE
,PAY_GROUP
,FTP_FILE_NAME
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG
)
SELECT
 W1.RESOURCE_NAME
,W1.[EMAIL]
,W1.INVOICE_MAP_KEY
,W1.FF_RESOURCE
,W1.PAY_GROUP
,W1.FTP_FILE_NAME
,dbo.getdate()        --WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'STUBHUB_AIA_AGENT_MAPPING'  --IMPORT_SUB_GROUP_NAME
,'DUP'            --ERROR_TAG
,'The User Name exists more than once in the agent mapping file.'  --ERROR_MSG
--  SELECT *  
FROM YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_1  W1
INNER JOIN
(	SELECT
	 INVOICE_MAP_KEY
	,ROW_NUMBER() over (partition by INVOICE_MAP_KEY
                            order by INVOICE_MAP_KEY) ROWNO
	FROM YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_1
) TNM  ON TNM.INVOICE_MAP_KEY = W1.INVOICE_MAP_KEY

LEFT OUTER JOIN YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_ERRORS AME   ON AME.INVOICE_MAP_KEY = W1.INVOICE_MAP_KEY

WHERE TNM.ROWNO > 1   

  AND ISNULL(AME.ERROR_TAG,'') = ''   --THE JOIN TO AME AND THIS LINE IS NOT REALLY NECESSARY SINCE THIS IS FIRST INSERTS INTO AME.!!!

----=============================================
----DELETE DUPLICATES FROM WORK (_1) TABLE:
----  THERE IS NO WAY TO KNOW WHICH DUPLICATE SHOULD BE KEPT AND WHICH SHOULD BE DELETED, SO THEY BOTH GET DELETED AND PM CAN CORRECT AND SO ON...
----=============================================
--DON'T NEED TO DO DELETES, BECAUSE THE RECORDS NEEDING TO BE DELETED EXIST IN THE MAPPING ERRORS TABLE.
--  THE MAPPING ERRORS TABLE CAN BE USED BELOW WHEN DOING THE INSERT INTO THE PERMANENT TABLE, SO THAT THE BAD RECORDS IN THE WORK TABLE DON'T GET INSERTED.
--===============================================

--=============================================	--Hopefully generic enough for all Tenant SSIS to use!
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=============================================
--WHEN RUNNING MANUALLY DURING TESTING:INSERT INTO YZ_TB_ERRORS_FOUND SELECT 900703,'STUBHUB_AIA_AGENT_MAPPING',''              
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--SQL won't insert special characters!!!  + CHAR(9)  --CHAR(10) + CHAR(13)
--Check #1:  ===================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_1)
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + '1) File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #2:  ===================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_1
					WHERE ISNUMERIC(PAY_GROUP) = 0)
	IF @RCD_CNT > 1 BEGIN
		SET @MSG1 = @MSG1 + '2) The Pay Group value specified is not valid.  The Pay Group must be an integer value.   |   '
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #3:  ===================================================================================================
	SET @RCD_CNT = (SELECT COUNT(8) FROM YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_1
					WHERE ISNULL(FF_RESOURCE,'') NOT IN ('','Priority','Resource','FC','Spanish','LH'))
	IF @RCD_CNT > 1 BEGIN
		SET @MSG1 = @MSG1 + '3) The Resource value specified is not valid.  The value should be blank, Priority, FC, Spanish, LH, or Resource.   |   '
		SET @ERR_CNT = @ERR_CNT + 1
	END

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	--SSIS reads yz_tb_errors_found table where tenant_key = 900703, and if record exists, outputs results/error_msg field in an email.
	INSERT INTO YZ_TB_ERRORS_FOUND
	(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY      --TENANT_KEY
	,@SUB_GROUP_NAME  --'STUBHUB_AIA_AGENT_MAPPING'   --SUB_GROUP_NAME
	,@MSG1            --ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	INSERT INTO YZ_TB_ERRORS_FOUND
		(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY      --TENANT_KEY
	,@SUB_GROUP_NAME  --'STUBHUB_AIA_AGENT_MAPPING'   --SUB_GROUP_NAME
	,''               --ERROR_MSG  --Never make this @MSG1 !!!  Must stay as ''.
	--Do NOT want to got to early exit here because data was good, according to 'checks'!  We want to import data into permanent table.
END
--IN SSIS, WOULD SELECT FROM TABLE WHERE TENANT_KEY = 900703 AND STORE IN SSIS VARIABLE.  IF VARIABLE NOT EMPTY, WILL SEND EMAIL AND END SSIS...
--=============================================

--======================================================================
--PROCESS BAD SCHEDULER_ACL_NAME VALUES:
--======================================================================
INSERT INTO YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_ERRORS
(RESOURCE_NAME
,EMAIL
,INVOICE_MAP_KEY
,FF_RESOURCE
,PAY_GROUP
,FTP_FILE_NAME
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG
)
SELECT
 W1.RESOURCE_NAME
,W1.[EMAIL]
,W1.INVOICE_MAP_KEY
,W1.FF_RESOURCE
,W1.PAY_GROUP
,W1.FTP_FILE_NAME
,dbo.getdate()        --WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'STUBHUB_AIA_AGENT_MAPPING'  --IMPORT_SUB_GROUP_NAME
,'SAN'            --ERROR_TAG
,'The Resource Identifier is invalid or is missing in AIA Agent Mapping file.'  --ERROR_MSG
--  SELECT *  
FROM            YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_1           W1
LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_ERRORS     AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
WHERE ISNULL(W1.FF_RESOURCE,'') NOT IN ('','Resource','Priority','FC','Spanish','LH')	--Resource, Priority, FC (French Canadian), Spanish, LH (Local Help), or blank, 
  AND ISNULL(AME.ERROR_TAG,'') = ''														--where blank becomes 'Standard Agent','Resource' becomes 'Resource Agent', 'FC" becomes 'French Canadian Agent',
																						--'LH' becomes "Local Help Resource Agent', and 'Priority' becomes 'Priority Agent'.

--======================================================================
--PROCESS MISSING PAY GROUP VALUES:
--======================================================================
INSERT INTO YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_ERRORS
(RESOURCE_NAME
,EMAIL
,INVOICE_MAP_KEY
,FF_RESOURCE
,PAY_GROUP
,FTP_FILE_NAME
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG
)
SELECT
 W1.RESOURCE_NAME
,W1.[EMAIL]
,W1.INVOICE_MAP_KEY
,W1.FF_RESOURCE
,W1.PAY_GROUP
,W1.FTP_FILE_NAME
,dbo.getdate()        --WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'STUBHUB_AIA_AGENT_MAPPING'  --IMPORT_SUB_GROUP_NAME
,'PAY'            --ERROR_TAG
,'The PAY GROUP is missing or invalid in the AIA Agent Mapping file.'  --ERROR_MSG
--  SELECT *  
FROM            YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_1           W1
LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_ERRORS     AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
WHERE   (ISNULL(W1.PAY_GROUP,'') = ''  -- Currently 0 is original pay contract
      OR ISNUMERIC(W1.PAY_GROUP) = 0)
  AND ISNULL(AME.ERROR_TAG,'') = ''

--=============================================
--DELETE RECORDS WITH INVALID SCHEDULER_ACL_NAME(S):
--=============================================
--DON'T NEED TO DO DELETES, BECAUSE THE RECORDS NEEDING TO BE DELETED EXIST IN THE MAPPING ERRORS TABLE.
--  THE MAPPING ERRORS TABLE CAN BE USED BELOW WHEN DOING THE INSERT INTO THE PERMANENT TABLE, SO THAT THE BAD RECORDS IN THE WORK TABLE DON'T GET INSERTED.
--=============================================


--!!! UPDATING """PERMANENT""" TABLE HERE: !!!
--=============================================
--UPDATE PERMANENT TABLE WITH WORK TABLE DATA WHERE TENANT_KEY AND INVOICE_MAP_KEY FIELDS/VALUES MATCH:
--=============================================
UPDATE YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING SET
 RESOURCE_NAME    = W1.RESOURCE_NAME
,[EMAIL]          = W1.[EMAIL]
,INVOICE_MAP_KEY  = W1.INVOICE_MAP_KEY
,FF_RESOURCE      = W1.FF_RESOURCE
,PAY_GROUP        = W1.PAY_GROUP
,FTP_FILE_NAME    = W1.FTP_FILE_NAME
--,WS_ROW_CREATED_TIME
,CST_ROW_UPDATED_TIME = dbo.getdate()
--  SELECT *
FROM            YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_1         W1
--INNER JOIN MUST BE HERE.  NEVER CHANGE!
INNER JOIN      YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING            G   ON G.INVOICE_MAP_KEY        = W1.INVOICE_MAP_KEY
LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_ERRORS   AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
--Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE ISNULL(AME.ERROR_TAG,'') = ''
  AND (   ( G.RESOURCE_NAME   <> W1.RESOURCE_NAME )
	   OR ( G.[EMAIL]         <> W1.[EMAIL] )
	   OR ( G.INVOICE_MAP_KEY <> W1.INVOICE_MAP_KEY )
	   OR ( G.FF_RESOURCE     <> W1.FF_RESOURCE )
       OR ( G.PAY_GROUP       <> W1.PAY_GROUP )
	  )

--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING
--!!! INSERTING INTO """PERMANENT""" TABLE HERE: !!!
--=========================================================
--INSERT "NEW" DATA FROM WORK TABLE INTO PERMANENT TABLE: 
--=========================================================
INSERT INTO YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING
(RESOURCE_NAME
,EMAIL
,INVOICE_MAP_KEY
,FF_RESOURCE
,PAY_GROUP
,FTP_FILE_NAME
,CST_ROW_CREATED_TIME
,CST_ROW_UPDATED_TIME
)
SELECT
 W1.RESOURCE_NAME    
,W1.[EMAIL]          
,W1.INVOICE_MAP_KEY  
,W1.FF_RESOURCE   
,W1.PAY_GROUP
,W1.FTP_FILE_NAME    
,dbo.getdate()        --WS_ROW_CREATED_TIME
,NULL             --WS_ROW_UPDATED_TIME

FROM            YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_1      W1
LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING        G     ON G.INVOICE_MAP_KEY        = W1.INVOICE_MAP_KEY
LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_ERRORS AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:
WHERE ( G.INVOICE_MAP_KEY IS NULL AND ISNULL(W1.INVOICE_MAP_KEY,'') <> '' )
  AND ISNULL(AME.ERROR_TAG,'') = ''

--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING    ORDER BY INVOICE_MAP_KEY 

--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_STUBHUB_AIA_AGENT_MAPPING_IMPORT_STATUS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_STUBHUB_AIA_AGENT_MAPPING_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHAT PROBLEMS THE RECENTLY IMPORTED AIA AGENT MAPPING FILE HAD DURING THE IMPORT/CLEANUP PROCESS.
--THIS USP IS DATA SOURCE FOR SRS GRID ON "AIA AGENT MAPPING" IMPORTS STATUS REPORT!!!

--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_AIA_AGENT_MAPPING_IMPORT_STATUS] '06/01/2014','06/10/2014','','R'

--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_ERRORS
--  SELECT * FROM YZ_TB_ERRORS_FOUND  --STILL NOT TOTALLY DEPENDANT BETWEEN OF OTHER CLIENTS/TENANTS.

--==================================
DECLARE 
 @TENANT_KEY      INT
,@SUB_GROUP_NAME  VARCHAR(50)
SET @TENANT_KEY     = 900703
SET @SUB_GROUP_NAME = 'STUBHUB_AIA_AGENT_MAPPING'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 
		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('09/27/2013' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('09/27/2013' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.




IF OBJECT_ID('TEMPDB..#IMPORTS_STUBHUB_AIA_AGENT_MAPPING_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_STUBHUB_AIA_AGENT_MAPPING_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_STUBHUB_AIA_AGENT_MAPPING_IMPORT_STATUS
(	[RESOURCE_NAME] [varchar](100) NULL,
	[EMAIL] [varchar](100) NULL,
	[INVOICE_MAP_KEY] [varchar](50) NOT NULL,
	[FF_RESOURCE] [varchar](50) NOT NULL,
	[PAY_GROUP] [varchar] (50) NULL,
	[FTP_FILE_NAME] [varchar](100) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[IMPORT_SUB_GROUP_NAME] [varchar](100) NULL,
	[ERROR_TAG] [varchar](50) NULL,
	[ERROR_MSG] [varchar](2500) NULL
)
INSERT INTO #IMPORTS_STUBHUB_AIA_AGENT_MAPPING_IMPORT_STATUS
SELECT
 RESOURCE_NAME
,[EMAIL]
,INVOICE_MAP_KEY
,FF_RESOURCE
,PAY_GROUP
--,FTP_FILE_NAME
,REPLACE(FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG

FROM            YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING_ERRORS     I   

--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_STUBHUB_AIA_AGENT_MAPPING_IMPORT_STATUS)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
--=============================================
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_STUBHUB_AIA_AGENT_MAPPING_IMPORT_STATUS
	SELECT
	 ''  --RESOURCE_NAME
	,''  --[EMAIL]
	,''  --INVOICE_MAP_KEY
	,''  --FF_RESOURCE
	,''  --PAY_GROUP
	,''  --FTP_FILE_NAME
	,dbo.getdate()  --WS_ROW_CREATED_TIME
	,''  --IMPORT_SUB_GROUP_NAME
	,''  --ERROR_TAG
	,''  --ERROR_MSG
END 
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RCD_CNT = 0 BEGIN  --IF @RCD_CNT = 0 HERE,IT ACTUALLY EQUALS THE ONE INSERTED STATING 'No Prolems.' IN ERROR_MSG.
	SET @MSG1 = @MSG1 + 'There were No StubHub AIA Agent Mapping Import Errors found.'
END
ELSE BEGIN
	--IF (DATEDIFF(DD,CAST('01/20/2012' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN 
	--IF (DATEDIFF(DD,CAST('09/27/2013' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
	IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
		--This is an Invoice Friday:
		IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN  --end date + 1 may not be today, so dbo.getdate() is checked...
			SET @MSG1 = 'Today, '
		END
		SET @MSG1 = @MSG1 + CONVERT(VARCHAR(10),@DTM_END,101) + ', is Invoice Friday. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	END
	SET @MSG1 = @MSG1 + 'The list below contains errors found during the process of importing the StubHub AIA Agent Mapping .csv file. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	SET @MSG1 = @MSG1 + 'Project Management will need to add, remove, or update agent information in their StubHub AIA Agent Mapping .csv/"living" documents '
	SET @MSG1 = @MSG1 + 'and copy them to the FTP directory in order for these agents to be invoiced through the Scheduler system. ' + CHAR(13) + CHAR(10)

	--This put directly in report at bottom, in new table, with different font size...:
	--SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Please forward any questions or problems with this notification to dthola@wslive.com.  Thanks.'
END

IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF @RCD_CNT = 0 BEGIN
		SET @MSG1 = @MSG1 + 'There were No StubHub AIA Agent Mapping Import Errors Found.'
	END
	ELSE BEGIN
		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
			SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Publishing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		END

		SET @MSG1 = @MSG1 + 'The list below contains errors found during the process of importing the StubHub AIA Agent Mapping .csv file. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
		SET @MSG1 = @MSG1 + 'Project Management will need to add, remove, or update agent information in their StubHub AIA Agent Mapping .csv/"living" documents '
		SET @MSG1 = @MSG1 + 'and copy them to the FTP directory in order for these agents to be invoiced through the Scheduler system. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	END
END
--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)

	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM YZ_TB_ERRORS_FOUND 
							   WHERE TENANT_KEY = @TENANT_KEY AND SUB_GROUP_NAME = @SUB_GROUP_NAME )
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some problems were noticed during the StubHub AIA Agent Mapping import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'And any in list below.'
	END
END



--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_STUBHUB_AIA_AGENT_MAPPING_IMPORT_STATUS 

ORDER BY
 INVOICE_MAP_KEY

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_STUBHUB_AIA_AGENT_MAPPING_MISSING_AGENTS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_STUBHUB_AIA_AGENT_MAPPING_MISSING_AGENTS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHICH INVOICE_MAP_KEY VALUES EXIST IN THE ACTIVITY FILES, BUT NOT IN THE AIA_AGENT_MAPPING .CSV FILES.
--            NO MATCHES BETWEEN ACTIVITY AND AGENT MAPPING.  WHEN NO MATCHES, THEN NO 'SCHEDULER' INVOICING.
--THIS USP IS DATA SOURCE FOR SRS GRID ON "ACTIVITY IMPORTS" STATUS REPORT!!!

--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_AIA_AGENT_MAPPING_MISSING_AGENTS] '10/25/2013','11/17/2013','900703','STUBHUB_AIA_AGENT_MAPPING','','B'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 
		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.




IF OBJECT_ID('TEMPDB..#IMPORTS_STUBHUB_AIA_AGENT_MAPPING_MISSING_AGENTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_STUBHUB_AIA_AGENT_MAPPING_MISSING_AGENTS
END
CREATE TABLE #IMPORTS_STUBHUB_AIA_AGENT_MAPPING_MISSING_AGENTS
(FILEDATETIME          VARCHAR(50)
,FTP_FILE_NAME         VARCHAR(100)
,WS_ROW_CREATED_TIME   DATETIME
,INVOICE_MAP_KEY       VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,RCD_CNT               INT
)
INSERT INTO #IMPORTS_STUBHUB_AIA_AGENT_MAPPING_MISSING_AGENTS
SELECT
 DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
--,I.FTP_FILE_NAME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
,I.WS_ROW_CREATED_TIME
,I.FF_USER_NAME  AS INVOICE_MAP_KEY
,I.FF_AGENT_NAME AS RESOURCE_NAME
,COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
FROM            YZ_TB_IMPORTS_STUBHUB_INVOICING               I   
LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING   IAM  ON IAM.INVOICE_MAP_KEY     = I.FF_USER_NAME
INNER JOIN      DATE_TIME                                 DT   ON DT.DATE_TIME_KEY        = I.STD_TENANT_START_DATE_TIME_KEY
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(IAM.INVOICE_MAP_KEY,'') = '' OR ISNULL(I.RESOURCE_NAME,'') = '')
  AND ISNULL(I.FF_USER_NAME,'') NOT IN ('dadenio','kermurray','kgrady','shmeadows','sleblanc','srockov','jerobison','allandry','chgerding','esapienza','cberman') -- EXCLUDE EDUCATION LEADERS
GROUP BY
 DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
--,I.FTP_FILE_NAME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
,I.WS_ROW_CREATED_TIME
,I.FF_USER_NAME
,I.FF_AGENT_NAME

--==================================
UPDATE #IMPORTS_STUBHUB_AIA_AGENT_MAPPING_MISSING_AGENTS SET
 FILEDATETIME = REPLACE(CONVERT(VARCHAR(10),ISNULL(FILEDATETIME,'1/1/1900'),102),'/',' . ')

--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_STUBHUB_AIA_AGENT_MAPPING_MISSING_AGENTS)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_STUBHUB_AIA_AGENT_MAPPING_MISSING_AGENTS
	SELECT
	 ''  --DT.CAL_DATE_STRING  --CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
	,''  --I.FTP_FILE_NAME
	,dbo.getdate()  --I.WS_ROW_CREATED_TIME
	,''  --I.FF_USER_NAME   AS INVOICE_MAP_KEY
	,''  --I.FF_AGENT__NAME AS RESOURCE_NAME
	,0   --COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
END
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RCD_CNT = 0 BEGIN  --@RCD_CNT WILL BE 0 STILL, EVEN THOUGH ONE BLANK RECORD WAS ADDED...
	SET @MSG1 = @MSG1 + 'There are No Missing AIA Agent Mappings.'
END
ELSE BEGIN
	--IF (DATEDIFF(DD,CAST('01/20/2012' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN 
	--IF (DATEDIFF(DD,CAST('09/27/2013' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
	IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
		--This is an Invoice Friday:
		IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN  --end date + 1 may not be today, so dbo.getdate() is checked...
			SET @MSG1 = 'Today, '
		END
		SET @MSG1 = @MSG1 + CONVERT(VARCHAR(10),@DTM_END,101) + ', is Invoice Friday. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	END
	SET @MSG1 = @MSG1 + 'The list below contains Invoice Map Key values for agents that are associated to activity for the report date range, but ' 
	SET @MSG1 = @MSG1 + 'do not exist in the AIA Agent Mapping file. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

	SET @MSG1 = @MSG1 + 'Agents in this list will not be invoiced (for activity dates showing), unless a special request is created and received '
	SET @MSG1 = @MSG1 + 'in plenty of time before invoicing begins.  The programmer will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	SET @MSG1 = @MSG1 + 'Also, Project Management may need to add or update agent information in their AIA Agent Mapping .csv/"living" documents '
	SET @MSG1 = @MSG1 + 'and copy it to the FTP directory before Programming can update agents correctly. ' + CHAR(13) + CHAR(10)

	--This put directly in report at bottom, in new table, with different font size...:
	--SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Please forward any questions or problems with this notification to dthola@wslive.com.  Thanks.'
END

IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''
	
	IF @RCD_CNT = 0 BEGIN
		SET @MSG1 = @MSG1 + 'There are NO missing AIA agent mappings!'
	END
	ELSE BEGIN
		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
			SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Publishing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		END
		SET @MSG1 = @MSG1 + 'The list below contains Invoice Map Key values for agents that are associated with activity for the report date range, but ' + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + 'who have not been added to or have incorrect values in the AIA Agent Mapping File. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

		SET @MSG1 = @MSG1 + 'Agents who are on this list will not be invoiced (for activity dates shown), unless a special request is made and received '
		SET @MSG1 = @MSG1 + 'with plenty of time before the automated invoice process begins.  The analyst will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

		SET @MSG1 = @MSG1 + 'Also, Project Management may need to add or update agent information in their AIA Agent Mapping CSV file and upload it '
		SET @MSG1 = @MSG1 + 'to the appropriate FTP directory before the Analyst can correctly update agent data. ' + CHAR(13) + CHAR(10)
	END

END

--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_STUBHUB_AIA_AGENT_MAPPING_MISSING_AGENTS 

ORDER BY
 INVOICE_MAP_KEY
,FTP_FILE_NAME

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_STUBHUB_AIA_XML]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_STUBHUB_AIA_XML]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300)
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'-Manual - when users run report - what SRS reports are defaulted to.  MAN means use date range that user specified.  The exception is when a report is defined with PTD/YTD and MTD rows in it.
                                  --         'SUB'-Subscription - what SRS subscriptions are defaulted to.  SUB means set date range @vars based on @TIME_INTERVAL. (since date range in SRS Subscription can't be set correctly)
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='AIA'-Agent Invoice Automation - what Sergey uses for/in Scheduler...
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='XML'-AIA RPT (DETAIL) (XML FILE/EXPORT),
AS
SET NOCOUNT ON

SET @TENANT_KEY = 900703  --STUBHUB --used below for file name !!! in ssis !!

--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)  
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 0,101) AS DATETIME)  
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) + 1
END

--IF @EXECUTIONER = 'MAN', DON'T CHANGE DATES -- THE REPORT IS BEING RAN MANUALLY, AND THE DATE RANGE WANTED BY THE USER IS BEING SET MANUALLY.

IF @EXECUTIONER = 'NEW' BEGIN -- NEW BI-MONTHLY PAYMENT CYCLE 1ST AND 16TH OF EACH MONTH
	IF @TIME_INTERVAL = 'W14' BEGIN
		IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate() - 1)) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
			END
		END		
		ELSE IF DAY(dbo.getdate()) = 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) < 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
	END
END

--=========================================================================================
--FORMAT 'MULTIPLES' "IN THAT" VALUES:  (Referring to CHARINDEX(search for this, in that))
--=========================================================================================
SET @ID_EXT          = ',' + LTRIM(RTRIM(@ID_EXT)) + ','
SET @SCHEDULER_GROUP = ',' + LTRIM(RTRIM(@SCHEDULER_GROUP)) + ','
 

--==================================
--SET AMOUNT TO DIVIDE BY:
--================================== 60.0 OR 60.00 MAKES NO DIFFERENCE.
DECLARE @DS DECIMAL(10,2)  --INT  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.0       --DIVIDE SECONDS BY 1 TO GET SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
	SET @DS = 60.0    --DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
	SET @DS = 3600.0  --DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
IF @RPT_TYPE_GRP = 'AIA' BEGIN

	--POPULATES XML REPORT.  SRS SUBSCRIPTION EXPORTS TO XML.  SSIS RENAMES AND MOVES XML FILE TO FTP.  SERGEY PICKS UP FILE?
	--  SERGEY IS SUPPOSEDLY DIRECTLY CONNECTED WITH YZ_TB_AGENT_INVOICE_AUTOMATION TABLE IN INFOMART ALSO.
	--    SO WHY THE XML FILE NEEDS TO BE CREATED ALSO, IS WONDER?

	IF @RPT_TYPE = 'XML' BEGIN  --AIA REPORT  --EXACTLY WHAT IS IN XML FILE AND/OR AIA TABLE.
		--==================================		--CREATE TMP TABLE:
		IF OBJECT_ID('TEMPDB..#IMPORTS_STUBHUB_AIA_XML') IS NOT NULL BEGIN
		   DROP TABLE #IMPORTS_STUBHUB_AIA_XML
		END
		CREATE TABLE #IMPORTS_STUBHUB_AIA_XML
		([PLATFORM]                   VARCHAR(50)
		,[STATUS]                     VARCHAR(50) 
		,INVOICE_MAP_KEY              VARCHAR(50) 
		,FIELD_NAME                   VARCHAR(50) 
		,SCHEDULER_PROJECT_ID         VARCHAR(50) 
		,SCHEDULER_ACL_NAME           VARCHAR(50) 
		,ACD_ID_EXTENSION             VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_ID      VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_NAME    VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_ID       VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_NAME     VARCHAR(50) 
		,PRIMARY_PROJECT_MANAGER_ID   VARCHAR(500) 
		,DIRECTOR_OF_PROJECT_MANAGEMENT_ID VARCHAR(500) 
		,AGENT_TECHNOLOGY_MANAGER_ID  VARCHAR(500) 
		,CONTRACTOR_SUPPORT_PATHWAY   VARCHAR(500) 
		,INVOICE_SYSTEM_ID            VARCHAR(50) 
		,HOLIDAY_INVOICE_ID           VARCHAR(50) 
		,HOLIDAY                      VARCHAR(50) 
		,FILE_FORMAT_OF_PUSH          VARCHAR(50) 
		,AGENT_PREPARATION_INVOICE_ID VARCHAR(50) 
		,NEW_ACL                      VARCHAR(50) 
		,CURRENT_CATS                 VARCHAR(50) 
		,CATS_ID                      VARCHAR(50) 
		,PATS_ID                      VARCHAR(50) 
		,SMART_ELIGIBLE               VARCHAR(50) 
		,SMART_TIER_1                 VARCHAR(50) 
		,SMART_TIER_2                 VARCHAR(50) 
		,SMART_TIER_3                 VARCHAR(50) 
		,INTERVAL                     VARCHAR(50) 
		,DATE                         VARCHAR(50) 
		,HOD_INTERVAL                 VARCHAR(50) 
		,AU_DK_LOGGED_IN_DURATION     DECIMAL(10,2)  --INT 
		,AU_DK_AVAILABLE_DURATION     DECIMAL(10,2)  --INT 
		,AU_DK_TALK_DURATION          DECIMAL(10,2)  --INT 
		,AU_DK_IB_TALK_DURATION       DECIMAL(10,2)  --INT 
		,AU_DK_OB_TALK_DURATION       DECIMAL(10,2)  --INT 
		,AU_DK_CONVENTIONAL_ACW       DECIMAL(10,2)  --INT 
		,AU_DK_NR_DURATION            DECIMAL(10,2)  --INT 
		,AU_DK_PSEUDO_PRODUCTIVE_DURATION   DECIMAL(10,2)  --INT 
		,AU_DK_ADJUSTED_NR_DURATION         DECIMAL(10,2)  --INT 
		,AU_DK_TOTAL_PRODUCTIVE_DURATION    DECIMAL(10,2)  --INT 
		,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS DECIMAL(10,2)  --INT 
		,AU_DK_XFER_COUNT             INT 
		,AU_DK_HOLD_COUNT             INT 
		,AU_DK_CONFERENCE_COUNT       INT 
		,AU_DK_CONSULT_COUNT          INT 
		,AU_DK_PUP_COUNT              INT 
		,AU_DK_OFFERED_COUNT          INT 
		,AU_DK_HANDLED_COUNT          INT 
		,AU_DK_IB_HANDLE_COUNT        INT 
		,AU_DK_OB_HANDLE_COUNT        INT 
		,AU_DK_RONA_COUNT             INT 
		,AU_DK_AWR_COUNT              INT 
		,MINIMUM_GUARANTEE            DECIMAL(10,2) 
		,AUTHORIZED_TO_INVOICE        DECIMAL(10,2) 
		,WEEK_ENDING_DATE             VARCHAR(50) 
		,PAY_CYCLE_CLOSURE_DATE       VARCHAR(50) 
		,CAL_DATE                     DATETIME
		,TENANT_KEY                   INT 
		,INVOICE_ID                   VARCHAR(50) 
		,CST_ROW_CREATED_TIME         DATETIME
		)
		--==================================		
		-- INSERT INTO TEMP TABLE
		--==================================
		INSERT INTO #IMPORTS_STUBHUB_AIA_XML
		SELECT --AIA.*
		 AIA.[PLATFORM]
		,AIA.[STATUS]                       
		,AIA.INVOICE_MAP_KEY              
		,AIA.FIELD_NAME                   
		,AIA.SCHEDULER_PROJECT_ID         
		,AIA.SCHEDULER_ACL_NAME           
		,AIA.ACD_ID_EXTENSION             
		,AIA.OFFICIAL_WSOL_CLIENT_ID      
		,AIA.OFFICIAL_WSOL_CLIENT_NAME    
		,AIA.OFFICIAL_ACD_CLIENT_ID       
		,AIA.OFFICIAL_ACD_CLIENT_NAME     
		,AIA.PRIMARY_PROJECT_MANAGER_ID   
		,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID 
		,AIA.AGENT_TECHNOLOGY_MANAGER_ID  
		,AIA.CONTRACTOR_SUPPORT_PATHWAY   
		,AIA.INVOICE_SYSTEM_ID            
		,AIA.HOLIDAY_INVOICE_ID           
		,AIA.HOLIDAY                      
		,AIA.FILE_FORMAT_OF_PUSH          
		,AIA.AGENT_PREPARATION_INVOICE_ID 
		,AIA.NEW_ACL                      
		,AIA.CURRENT_CATS                 
		,AIA.CATS_ID                      
		,AIA.PATS_ID                      
		,AIA.SMART_ELIGIBLE               
		,AIA.SMART_TIER_1                 
		,AIA.SMART_TIER_2                 
		,AIA.SMART_TIER_3                 
		,AIA.INTERVAL                     
		,AIA.DATE                         
		,AIA.HOD_INTERVAL                 
		,CAST( ( 1.0 * (AIA.AU_DK_LOGGED_IN_DURATION) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_LOGGED_IN_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_AVAILABLE_DURATION) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_AVAILABLE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_TALK_DURATION) )      / @DS AS DECIMAL(10,2)) --AS AU_DK_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_IB_TALK_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_IB_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_OB_TALK_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_OB_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_CONVENTIONAL_ACW) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_CONVENTIONAL_ACW
		,CAST( ( 1.0 * (AIA.AU_DK_NR_DURATION) )        / @DS AS DECIMAL(10,2)) --AS AU_DK_NR_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_PSEUDO_PRODUCTIVE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_ADJUSTED_NR_DURATION) )         / @DS AS DECIMAL(10,2)) --AS AU_DK_ADJUSTED_NR_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION) )    / @DS AS DECIMAL(10,2)) --AS AU_DK_TOTAL_PRODUCTIVE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
		,(AIA.AU_DK_XFER_COUNT)         --AS AU_DK_XFER_COUNT
		,(AIA.AU_DK_HOLD_COUNT)         --AS AU_DK_HOLD_COUNT
		,(AIA.AU_DK_CONFERENCE_COUNT)   --AS AU_DK_CONFERENCE_COUNT
		,(AIA.AU_DK_CONSULT_COUNT)      --AS AU_DK_CONSULT_COUNT
		,(AIA.AU_DK_PUP_COUNT)          --AS AU_DK_PUP_COUNT
		,(AIA.AU_DK_OFFERED_COUNT)      --AS AU_DK_OFFERED_COUNT
		,(AIA.AU_DK_HANDLED_COUNT)      --AS AU_DK_HANDLED_COUNT
		,(AIA.AU_DK_IB_HANDLE_COUNT)    --AS AU_DK_IB_HANDLE_COUNT
		,(AIA.AU_DK_OB_HANDLE_COUNT)    --AS AU_DK_OB_HANDLE_COUNT
		,(AIA.AU_DK_RONA_COUNT)         --AS AU_DK_RONA_COUNT
		,(AIA.AU_DK_AWR_COUNT)          --AS AU_DK_AWR_COUNT
		,CAST( ( 1.0 * (AIA.MINIMUM_GUARANTEE) )     / @DS AS DECIMAL(10,2)) --AS MINIMUM_GUARANTEE
		,CAST( ( 1.0 * (AIA.AUTHORIZED_TO_INVOICE) ) / @DS AS DECIMAL(10,2)) --AS AUTHORIZED_TO_INVOICE
		,AIA.WEEK_ENDING_DATE             
		,AIA.PAY_CYCLE_CLOSURE_DATE       
		,AIA.CAL_DATE                     
		,AIA.TENANT_KEY                   
		,AIA.INVOICE_ID                   
		,AIA.WS_ROW_CREATED_TIME         

		--  SELECT *
		FROM            YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA         AIA
		INNER JOIN      DATE_TIME                            DT    ON DT.DATE_TIME_KEY      = AIA.STD_TENANT_START_DATE_TIME_KEY
		
		WHERE ( DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END )
		  AND AIA.STATUS = 'Active'
		  AND ( (ISNULL(AIA.READY_FOR_XML,'') = 'Y')	--<----Maintain this field, and the AIA will populate the XML correctly every time!!!!!!!!!
				OR (@ID_EXT = 'Y') )					--<----In Test Mode (ignore what ready_for_xml is set to).
		  AND ( ISNULL(AIA.INVOICE_ID,'') <> '' )		--<----INSURANCE, IN CASE BLANK ID EXTENSION SLIPS THROUGH
		  AND ( ISNULL(AIA.RESOURCE_NAME,'') <> '')		--<----INSURANCE, FILTER OUT THOSE NOT IN AIA AGENT MAPPING SINCE INVOICE_ID IS JUST FF_USER_NAME FROM IMPORT FILE

		ORDER BY 
		 AIA.OFFICIAL_ACD_CLIENT_NAME
		--,AIA.SCHEDULER_ACL_NAME
		,AIA.INVOICE_ID

		,AIA.ACD_ID_EXTENSION     
		,AIA.INVOICE_MAP_KEY
		,AIA.DATE
		,AIA.HOD_INTERVAL


		--==================================!!!--INSERT RECORD FOR REPORT SO SSIS KNOWS DATE OF DATA IN DATASET:
		--Have to include 'D??' or 'W??' because SRS Subscriptions are being ran at about same time in one sql job step.
		--  If one subscription takes longer than the other, the wrong date will get used/pulled from the YZ_TB_FILENAMES_FOR_SSIS in the ssis. and so on.
		IF CHARINDEX('D',@TIME_INTERVAL) > 0 BEGIN
			INSERT INTO YZ_TB_FILENAMES_FOR_SSIS
			(
			SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
			SELECT  --FOR THE .XML FILES FOR EACH DATE:
			 'iNetAIA_' + LTRIM(RTRIM(@TIME_INTERVAL))  --'iNetAIA_D09' for internal wsinet tenants 9 days from current date.  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.getdate()  --CST_ROW_CREATED_TIME
		END
		ELSE BEGIN  --'W' MEANING NEED TO PASS/POPULATE WITH DATE RANGE, LIKE 'MMDDYY_MMDDYY'. -- FOR GAR AND NW.
			INSERT INTO YZ_TB_FILENAMES_FOR_SSIS
						(
			SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
			SELECT  --FOR GETAROOM AND NINE_WEST:    --old:-- 'AGENT_INVOICE_AIA_XML'  --SQL_JOB_NAME 
			 'iNetAIA_' + LTRIM(RTRIM(@TIME_INTERVAL)) + '_' + REPLACE(LTRIM(RTRIM(CAST(@TENANT_KEY AS VARCHAR(10)))),',','')  --'iNetAIA_W14_900595' for GAR  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_BEG,1),'/','') + '_' + REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.getdate()  --CST_ROW_CREATED_TIME
		END
		--  SELECT * FROM YZ_TB_FILENAMES_FOR_SSIS ORDER BY CST_ROW_CREATED_TIME DESC

		--==================================!!!--RETURN DATASET TO REPORT:
		SELECT *
		FROM #IMPORTS_STUBHUB_AIA_XML
		ORDER BY 
		 OFFICIAL_ACD_CLIENT_NAME
		--,SCHEDULER_ACL_NAME
		,INVOICE_ID

		,ACD_ID_EXTENSION     
		,INVOICE_MAP_KEY
		,DATE
		,HOD_INTERVAL
	END  --AIA_XML



END  --IF @RPT_TYPE_GRP = 'AIA'


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
--==================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_STUBHUB_CHAT_INVOICING_IMPORT_STATUS]...';


GO


CREATE PROCEDURE [dbo].[uspIMPORTS_STUBHUB_CHAT_INVOICING_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_CHAT_INVOICING_IMPORT_STATUS] '06/01/2014','06/06/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_CHAT_INVOICING_IMPORT_STATUS] '06/20/2014','06/30/2014','','W'

--===========================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--===========================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_STUBHUB_CHAT_INVOICING_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_STUBHUB_CHAT_INVOICING_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_STUBHUB_CHAT_INVOICING_IMPORT_STATUS
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_STUBHUB_CHAT_INVOICING_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0)															AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_STUBHUB_CHAT_INVOICING  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

---- AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA
--END  --IF @PSW...

--=================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=================================================================
--DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = @TENANT_KEY
----  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 106
--=================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

--CREATE CURSOR, POPULATE CURSOR FOR DATE RANGE, SPIN THROUGH EACH OF THE DAILY RECORDS, CONCATENATING TO STRING FOR EACH DATE MISSING.

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	
	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_STUBHUB_CHAT_INVOICING_IMPORT_STATUS   I   ON I.FILEDATETIME                   = DT.FILEDATETIME

WHERE ISNULL(I.RCD_CNT,0) = 0

  --AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)
  --AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
		SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

			SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 8:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
		END
	END
	ELSE BEGIN
		SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
		END
	END
	
END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--STUBHUB_CHAT_INVOICING:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM WSOL_TB_IMPORT_ERRORS_FOUND
							   WHERE TENANT_KEY = 900703 AND SUB_GROUP_NAME = 'STUBHUB_CHAT_INVOICING' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_STUBHUB_CHAT_INVOICING_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_STUBHUB_CHAT_INVOICING_Summary]...';


GO



CREATE PROCEDURE [dbo].[uspIMPORTS_STUBHUB_CHAT_INVOICING_Summary]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_CHAT_INVOICING_Summary] '06/01/2014','06/07/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_CHAT_INVOICING_Summary] '06/07/2014','06/07/2014','','W'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

			IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly 
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--TO TEST:
		--DECLARE
		-- @DTM_BEG DATETIME
		--,@DTM_END DATETIME
		----SET @DTM_BEG = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_END = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_BEG = CAST('08/02/2012' AS DATETIME)
		----SET @DTM_END = CAST('08/02/2012' AS DATETIME)
		--SET @DTM_BEG = CAST('08/03/2012' AS DATETIME)
		--SET @DTM_END = CAST('08/03/2012' AS DATETIME)

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		--SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		--SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--07/06/2012 IS AN INVOICE FRIDAY.  SAME AS 05/23/2014.
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_STUBHUB_CHAT_INVOICING_Summary') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_STUBHUB_CHAT_INVOICING_Summary
END
CREATE TABLE #IMPORTS_STUBHUB_CHAT_INVOICING_Summary
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_STUBHUB_CHAT_INVOICING_Summary
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')       --AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') --AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')             --AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_STUBHUB_CHAT_INVOICING  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA

--END  --IF @PSW...


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT      
,'White' AS BG_COLOR

FROM #IMPORTS_STUBHUB_CHAT_INVOICING_Summary 

ORDER BY
-- CALL_DATETIME           
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT      


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_STUBHUB_CHAT_PERFORMANCE_IMPORT_STATUS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_STUBHUB_CHAT_PERFORMANCE_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_CHAT_PERFORMANCE_IMPORT_STATUS] '06/01/2014','06/06/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_CHAT_PERFORMANCE_IMPORT_STATUS] '06/20/2014','06/30/2014','','W'

--===========================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--===========================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_STUBHUB_CHAT_PERFORMANCE_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_STUBHUB_CHAT_PERFORMANCE_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_STUBHUB_CHAT_PERFORMANCE_IMPORT_STATUS
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_STUBHUB_CHAT_PERFORMANCE_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0)															AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_STUBHUB_CHAT_PERFORMANCE  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

---- AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA
--END  --IF @PSW...

--=================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=================================================================
--DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = @TENANT_KEY
----  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 106
--=================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

--CREATE CURSOR, POPULATE CURSOR FOR DATE RANGE, SPIN THROUGH EACH OF THE DAILY RECORDS, CONCATENATING TO STRING FOR EACH DATE MISSING.

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	
	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_STUBHUB_CHAT_PERFORMANCE_IMPORT_STATUS   I   ON I.FILEDATETIME                   = DT.FILEDATETIME

WHERE ISNULL(I.RCD_CNT,0) = 0

  --AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)
  --AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
		SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

			SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 8:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
		END
	END
	ELSE BEGIN
		SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
		END
	END
	
END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--STUBHUB_CHAT_PERFORMANCE:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM YZ_TB_ERRORS_FOUND
							   WHERE TENANT_KEY = 900703 AND SUB_GROUP_NAME = 'STUBHUB_CHAT' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_STUBHUB_CHAT_PERFORMANCE_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_STUBHUB_CHAT_PERFORMANCE_Summary]...';


GO


CREATE PROCEDURE [dbo].[uspIMPORTS_STUBHUB_CHAT_PERFORMANCE_Summary]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_CHAT_PERFORMANCE_Summary] '06/01/2014','06/07/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_CHAT_PERFORMANCE_Summary] '06/07/2014','06/07/2014','','W'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

			IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly 
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--TO TEST:
		--DECLARE
		-- @DTM_BEG DATETIME
		--,@DTM_END DATETIME
		----SET @DTM_BEG = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_END = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_BEG = CAST('08/02/2012' AS DATETIME)
		----SET @DTM_END = CAST('08/02/2012' AS DATETIME)
		--SET @DTM_BEG = CAST('08/03/2012' AS DATETIME)
		--SET @DTM_END = CAST('08/03/2012' AS DATETIME)

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		--SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		--SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--07/06/2012 IS AN INVOICE FRIDAY.  SAME AS 05/23/2014.
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_STUBHUB_CHAT_PERFORMANCE_Summary') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_STUBHUB_CHAT_PERFORMANCE_Summary
END
CREATE TABLE #IMPORTS_STUBHUB_CHAT_PERFORMANCE_Summary
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_STUBHUB_CHAT_PERFORMANCE_Summary
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')       --AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') --AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')             --AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_STUBHUB_CHAT_PERFORMANCE  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA

--END  --IF @PSW...


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT      
,'White' AS BG_COLOR

FROM #IMPORTS_STUBHUB_CHAT_PERFORMANCE_Summary 

ORDER BY
-- CALL_DATETIME           
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT      


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_STUBHUB_IMPORT_STATUS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_STUBHUB_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_IMPORT_STATUS] '06/01/2014','06/06/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_IMPORT_STATUS] '06/20/2014','06/30/2014','','W'  --WILL BE RUNNING ON A FRI., BUT DATES PASSED IN WILL BE YESTERDAY/THU..

--!*** Weekend dates are not being checked, included in selects !!!  Has to be changed when they decide they want! ***!

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_STUBHUB_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_STUBHUB_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_STUBHUB_IMPORT_STATUS
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
    INSERT INTO #IMPORTS_STUBHUB_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'') AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0) AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME  --CAST(CONVERT(VARCHAR(10),C.FILEDATETIME,101) AS DATETIME) AS FILEDATETIME
		--,C.FTP_FILE_NAME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		--SELECT TOP 100 *

		FROM            YZ_TB_IMPORTS_STUBHUB_INVOICING   C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

---- AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME  --CAST(CONVERT(VARCHAR(10),C.FILEDATETIME,101) AS DATETIME) AS FILEDATETIME		 DT.CAL_DATE --AS FILEDATETIME  --CAST(CONVERT(VARCHAR(10),C.FILEDATETIME,101) AS DATETIME) AS FILEDATETIME
		--,C.FTP_FILE_NAME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
		,C.WS_ROW_CREATED_TIME
		--UNION ALL  --UUUUUUUUUUNNNNNNNNNNIIIIIIIIIIOOOOOOOOOONNNNNNNNNN
	) UA

--=============================================	--Hopefully generic enough for all Tenant SSIS to use!
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=============================================
--DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = @TENANT_KEY
----  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900703
--=======================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''
--Check #1:  ===================================================================================================
--DECLARE
-- @DTM_BEG AS DATETIME
--,@DTM_END AS DATETIME              --Don't change '07/06/2012' !!!
--SET @DTM_BEG = (DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 14)
--SET @DTM_END = (DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) -  1) + 1

--  SELECT TOP 10 * FROM DATE_TIME  --CAL_DAY_NAME  'Sunday'  'Saturday'    CAL_DAY_NUM_IN_WEEK  1=Sunday   7=Saturday

--CREATE CURSOR, POPULATE CURSOR FOR 2 WEEK DATE RANGE, SPIN THROUGH EACH OF 14 RECORDS, CONCATENATING TO STRING FOR EACH DATE MISSING.

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	--SELECT REPLACE(CONVERT(VARCHAR(10),ISNULL(DT.CAL_DATE,'1/1/1900'),101),'/',' . ') AS FILEDATETIME
	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

----FOR 'WEEKEND' CODE/FILTER:!!!
--LEFT JOIN YZ_TB_IMPORTS_STUBHUB_INVOICING  C ON   C.STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)

	GROUP BY
	-- REPLACE(CONVERT(VARCHAR(10),ISNULL(DT.CAL_DATE,'1/1/1900'),101),'/',' . ')
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_STUBHUB_IMPORT_STATUS   I   ON I.FILEDATETIME                   = DT.FILEDATETIME

--LEFT JOIN       DATE_TIME                    DT2 ON CONVERT(VARCHAR(10),DT2.CAL_DATE,101) = CONVERT(VARCHAR(10),DT.FILEDATETIME,101)
----FOR 'WEEKEND' CODE/FILTER:!!!
--LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_INVOICING  C   ON C.STD_TENANT_START_DATE_TIME_KEY = DT2.DATE_TIME_KEY

----WHERE ISNULL(I.FTP_FILE_NAME,'') = ''  -- ISNULL(I.FILEDATETIME,'1.1.1900') = ''
WHERE ISNULL(I.RCD_CNT,0) = 0

--	AND DT.CAL_DAY_NUM_IN_WEEK <> 1  -- DATALOT AGENTS DO NOT WORK ON SUNDAYS

--  AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_IMPORT_STATUS] '06/20/2014','06/30/2014','','W'  --WILL BE RUNNING ON A FRI., BUT DATES PASSED IN WILL BE YESTERDAY/THU..

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
--This code is ran at 10:30am each day, and again at 11:00am on Invoice Fridays, or similar schedule:
--IF (DATEDIFF(DD,CAST('01/20/2012' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN 
--IF (DATEDIFF(DD,CAST('09/27/2013' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14) = 0 BEGIN 
	--This is an Invoice Friday:
	IF (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),dbo.getdate()) % 14) = 0 BEGIN  --end date + 1 may not be today, so dbo.getdate() is checked...
		SET @MSG1 = 'Today, '
	END
	SET @MSG1 = @MSG1 + CONVERT(VARCHAR(10),@DTM_END,101) + ', is Invoice Friday. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
	--IF LEN(REPLACE(REPLACE(@MSG1,',',''),' ','')) > 2 BEGIN
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + 'Imported file(s) for the past 2 weeks show the following date(s) might still be ' + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + '  missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
		SET @MSG1 = @MSG1 + 'Invoicing processes begin at 11:59am, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + 'Any missing import files not on ftp by 11:59am, will Not be included in Today''s invoicing.' + CHAR(10) + CHAR(13)
	END
	ELSE BEGIN
		SET @MSG1 = @MSG1 + 'ALL date(s) appear to be imported.    Thank you.' + CHAR(10) + CHAR(13)
	END
END
ELSE BEGIN  --This is Not an Invoice Friday:
	SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
	--IF LEN(REPLACE(REPLACE(@MSG1,',',''),' ','')) > 2 BEGIN
	IF @RCD_CNT > 0 BEGIN
		SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
	END
	ELSE BEGIN
		SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent.' + CHAR(10) + CHAR(13)
	END
END

IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
		SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Publishing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

			SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 9:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
		END
	END
	ELSE BEGIN
		SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
		END
	END
	
END
--This put directly in report at bottom, in new table, with different font size...:
--SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Please forward any questions or problems with this notification to dthola@wslive.com.  Thanks.'

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--STUBHUB:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM YZ_TB_ERRORS_FOUND
							   WHERE TENANT_KEY = 900703 AND SUB_GROUP_NAME = 'STUBHUB_INVOICING' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_STUBHUB_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_STUBHUB_INVOICING_IMPORT]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_STUBHUB_INVOICING_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_INVOICING_IMPORT]

--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1 ORDER BY [DATETIME] DESC

--	Durations in file are in minutes.  Data will be stored in minutes and later converted to seconds for XML push. !!!

--=============================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY =       900703  --STUBHUB
--=============================================
DELETE FROM YZ_TB_ERRORS_FOUND 
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = 'STUBHUB_INVOICING'    --  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900703
--=============================================

--===================================================================================
--USING @WS_ROW_CREATED_TIME FOR ALL INSERTS WILL ALLOW ME TO DELETE SPECIFIC INSERT PROCESSES/FILES.  MOST IMPORTANT!!!  FOR ALL TABLES.
--  IN CASE OF EMERGENCY, CRACK GLASS.
--===================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.getdate()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===================================================================================

--======================================================================
--HANDLE COLUMN HEADER AND INVALID (ACTIVE TIME = WRAP TIME) RECORDS:
--======================================================================
INSERT INTO YZ_TB_IMPORTS_STUBHUB_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT_NAME
,FF_USER_NAME
,FF_HOUR
,FF_ACTIVE_TIME
,FF_READY_TIME
,FF_NOT_READY_TIME
,FF_ACCEPTED
,FF_INVITE_TIME
,FF_ENGAGE_TIME
,FF_HOLD_TIME
,FF_WRAP_TIME
,FF_CONSULT_RECEIVED_TIME
,FF_TALK_TIME
,FF_HANDLE_TIME
,FF_MINIMUM_GUARANTEE
,FF_AUTHORIZED_TO_INVOICE
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,LOGGED_IN_TIME
,READY_TIME
,NOT_READY_TIME
,CALLS_ACCEPTED
,RING_TIME
,TALK_TIME
,HOLD_TIME
,WRAP_TIME
,CONSULT_TIME
,TALK_HOLD_COLSULT_TIME
,HANDLE_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,PAY_GROUP
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR)

SELECT
 24                     --BAD_IMPORTS_NO  --'Junk Record'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE.
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_AGENT_NAME
,W1.FF_USER_NAME
,W1.FF_HOUR
,W1.FF_ACTIVE_TIME
,W1.FF_READY_TIME
,W1.FF_NOT_READY_TIME
,W1.FF_ACCEPTED
,W1.FF_INVITE_TIME
,W1.FF_ENGAGE_TIME
,W1.FF_HOLD_TIME
,W1.FF_WRAP_TIME
,W1.FF_CONSULT_RECEIVED_TIME
,W1.FF_TALK_TIME
,W1.FF_HANDLE_TIME
,W1.FF_MINIMUM_GUARANTEE
,W1.FF_AUTHORIZED_TO_INVOICE
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.LOGGED_IN_TIME
,W1.READY_TIME
,W1.NOT_READY_TIME
,W1.CALLS_ACCEPTED
,W1.RING_TIME
,W1.TALK_TIME
,W1.HOLD_TIME
,W1.WRAP_TIME
,W1.CONSULT_TIME
,W1.TALK_HOLD_CONSULT_TIME
,W1.HANDLE_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.PAY_GROUP
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR

FROM           YZ_TB_IMPORTS_STUBHUB_INVOICING_1    W1
WHERE ISNULL(W1.FF_AGENT_NAME, '') IN ('Agent Name','')
   OR ISNULL(W1.FF_ACTIVE_TIME, 0)  = ISNULL(W1.FF_WRAP_TIME, 0)

--======================================================================
--DELETE COLUMN HEADER AND JUNK RECORDS;
--======================================================================
DELETE FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1
WHERE ISNULL(FF_AGENT_NAME, '') IN ('Agent Name','')
   OR ISNULL(FF_ACTIVE_TIME, 0)  = ISNULL(FF_WRAP_TIME, 0)
--======================================================================

--=============================================================================
--DELETE RECORDS FOR CONFIRMED STUBHUB EMPLOYEES
--=============================================================================
INSERT INTO YZ_TB_IMPORTS_STUBHUB_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT_NAME
,FF_USER_NAME
,FF_HOUR
,FF_ACTIVE_TIME
,FF_READY_TIME
,FF_NOT_READY_TIME
,FF_ACCEPTED
,FF_INVITE_TIME
,FF_ENGAGE_TIME
,FF_HOLD_TIME
,FF_WRAP_TIME
,FF_CONSULT_RECEIVED_TIME
,FF_TALK_TIME
,FF_HANDLE_TIME
,FF_MINIMUM_GUARANTEE
,FF_AUTHORIZED_TO_INVOICE
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,LOGGED_IN_TIME
,READY_TIME
,NOT_READY_TIME
,CALLS_ACCEPTED
,RING_TIME
,TALK_TIME
,HOLD_TIME
,WRAP_TIME
,CONSULT_TIME
,TALK_HOLD_COLSULT_TIME
,HANDLE_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,PAY_GROUP
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR)

SELECT
 99						--BAD_IMPORTS_NO			--Client Employee
,'ACT'					--BAD_IMPORTS_FILE_TYPE		--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME	--WS_ROW_CREATED_TIME		
,W1.FF_AGENT_NAME
,W1.FF_USER_NAME
,W1.FF_HOUR
,W1.FF_ACTIVE_TIME
,W1.FF_READY_TIME
,W1.FF_NOT_READY_TIME
,W1.FF_ACCEPTED
,W1.FF_INVITE_TIME
,W1.FF_ENGAGE_TIME
,W1.FF_HOLD_TIME
,W1.FF_WRAP_TIME
,W1.FF_CONSULT_RECEIVED_TIME
,W1.FF_TALK_TIME
,W1.FF_HANDLE_TIME
,W1.FF_MINIMUM_GUARANTEE
,W1.FF_AUTHORIZED_TO_INVOICE
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.LOGGED_IN_TIME
,W1.READY_TIME
,W1.NOT_READY_TIME
,W1.CALLS_ACCEPTED
,W1.RING_TIME
,W1.TALK_TIME
,W1.HOLD_TIME
,W1.WRAP_TIME
,W1.CONSULT_TIME
,W1.TALK_HOLD_CONSULT_TIME
,W1.HANDLE_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.PAY_GROUP
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR

FROM	YZ_TB_IMPORTS_STUBHUB_INVOICING_1	W1
WHERE ISNULL(W1.FF_USER_NAME,'') IN ('cberman','throberts')

--=============================================================================
--DELETE STUBHUB EMPLOYEE RECORDS
--=============================================================================
DELETE FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1
WHERE ISNULL(FF_USER_NAME,'') IN ('cberman','throberts')
--=============================================================================

--=============================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_1) TABLE THAT WEREN'T IN IMPORTED FILE:
--=============================================================================
UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING_1 SET
 [DATETIME]			= CAST(FF_HOUR + ':00:00' AS DATETIME)
,HOUR_INTERVAL		= RIGHT(FF_HOUR, 2)
,LOGGED_IN_TIME		= CAST(ISNULL(FLOOR(FF_ACTIVE_TIME),			0) AS INT)
,READY_TIME			= CAST(ISNULL(FLOOR(FF_READY_TIME),				0) AS INT)
,NOT_READY_TIME		= CAST(ISNULL(FLOOR(FF_NOT_READY_TIME),			0) AS INT)
,CALLS_ACCEPTED		= CAST(ISNULL(FLOOR(FF_ACCEPTED),				0) AS INT)
,RING_TIME			= CAST(ISNULL(FLOOR(FF_INVITE_TIME),			0) AS INT)
,TALK_TIME			= CAST(ISNULL(FLOOR(FF_ENGAGE_TIME),			0) AS INT)
,HOLD_TIME			= CAST(ISNULL(FLOOR(FF_HOLD_TIME),				0) AS INT)
,WRAP_TIME			= CAST(ISNULL(FLOOR(FF_WRAP_TIME),				0) AS INT)
,CONSULT_TIME		= CAST(ISNULL(FLOOR(FF_CONSULT_RECEIVED_TIME),	0) AS INT)
,HANDLE_TIME		= CAST(ISNULL(FLOOR(FF_HANDLE_TIME),			0) AS INT)
,TOTAL_TALK			= ISNULL(FF_TALK_TIME,							0) -- DIFFERS FROM TALK_TIME OR FF_ENGAGE_TIME
,TENANT_KEY			= @TENANT_KEY  --NOT REALLY NECESSARY.


--======================================================================
--Need when populating tmp DEW table for insert into _AIA table.
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME

SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN([DATETIME]) FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX([DATETIME]) FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1))  
--======================================================================

--======================================================================
-- POPULATE THE DATETIME KEY
--======================================================================
UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING_1 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM            YZ_TB_IMPORTS_STUBHUB_INVOICING_1    I
INNER JOIN      DATE_TIME							DT   ON DT.CAL_DATE = I.[DATETIME]

--===============================================
-- POPULATE TALK_HOLD_CONSULT_TIME
--===============================================
UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING_1 SET
 TALK_HOLD_CONSULT_TIME = TALK_TIME + HOLD_TIME + CONSULT_TIME

--===============================================
--CALCULATE CPROD
--===============================================
UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING_1 SET
 CPROD = READY_TIME + TALK_TIME + HOLD_TIME + WRAP_TIME + CONSULT_TIME

--======================================================================
--HANDLE INVALID DATE/TIME RECORDS:
--======================================================================
INSERT INTO YZ_TB_IMPORTS_STUBHUB_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT_NAME
,FF_USER_NAME
,FF_HOUR
,FF_ACTIVE_TIME
,FF_READY_TIME
,FF_NOT_READY_TIME
,FF_ACCEPTED
,FF_INVITE_TIME
,FF_ENGAGE_TIME
,FF_HOLD_TIME
,FF_WRAP_TIME
,FF_CONSULT_RECEIVED_TIME
,FF_TALK_TIME
,FF_HANDLE_TIME
,FF_MINIMUM_GUARANTEE
,FF_AUTHORIZED_TO_INVOICE
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,LOGGED_IN_TIME
,READY_TIME
,NOT_READY_TIME
,CALLS_ACCEPTED
,RING_TIME
,TALK_TIME
,HOLD_TIME
,WRAP_TIME
,CONSULT_TIME
,TALK_HOLD_COLSULT_TIME
,HANDLE_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,PAY_GROUP
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR)

SELECT
 26                     --BAD_IMPORTS_NO  --'Invalid Date/Time'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_AGENT_NAME
,W1.FF_USER_NAME
,W1.FF_HOUR
,W1.FF_ACTIVE_TIME
,W1.FF_READY_TIME
,W1.FF_NOT_READY_TIME
,W1.FF_ACCEPTED
,W1.FF_INVITE_TIME
,W1.FF_ENGAGE_TIME
,W1.FF_HOLD_TIME
,W1.FF_WRAP_TIME
,W1.FF_CONSULT_RECEIVED_TIME
,W1.FF_TALK_TIME
,W1.FF_HANDLE_TIME
,W1.FF_MINIMUM_GUARANTEE
,W1.FF_AUTHORIZED_TO_INVOICE
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.LOGGED_IN_TIME
,W1.READY_TIME
,W1.NOT_READY_TIME
,W1.CALLS_ACCEPTED
,W1.RING_TIME
,W1.TALK_TIME
,W1.HOLD_TIME
,W1.WRAP_TIME
,W1.CONSULT_TIME
,W1.TALK_HOLD_CONSULT_TIME
,W1.HANDLE_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.PAY_GROUP
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR

FROM           YZ_TB_IMPORTS_STUBHUB_INVOICING_1    W1
WHERE ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================
--DELETE INVALID DATE/TIME RECORDS;
--======================================================================
DELETE FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================


--======================================================================
--HANDLE DUPLICATES:
--======================================================================
INSERT INTO YZ_TB_IMPORTS_STUBHUB_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT_NAME
,FF_USER_NAME
,FF_HOUR
,FF_ACTIVE_TIME
,FF_READY_TIME
,FF_NOT_READY_TIME
,FF_ACCEPTED
,FF_INVITE_TIME
,FF_ENGAGE_TIME
,FF_HOLD_TIME
,FF_WRAP_TIME
,FF_CONSULT_RECEIVED_TIME
,FF_TALK_TIME
,FF_HANDLE_TIME
,FF_MINIMUM_GUARANTEE
,FF_AUTHORIZED_TO_INVOICE
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,LOGGED_IN_TIME
,READY_TIME
,NOT_READY_TIME
,CALLS_ACCEPTED
,RING_TIME
,TALK_TIME
,HOLD_TIME
,WRAP_TIME
,CONSULT_TIME
,TALK_HOLD_COLSULT_TIME
,HANDLE_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,PAY_GROUP
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR)

SELECT
 21                     --BAD_IMPORTS_NO  --'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_AGENT_NAME
,W1.FF_USER_NAME
,W1.FF_HOUR
,W1.FF_ACTIVE_TIME
,W1.FF_READY_TIME
,W1.FF_NOT_READY_TIME
,W1.FF_ACCEPTED
,W1.FF_INVITE_TIME
,W1.FF_ENGAGE_TIME
,W1.FF_HOLD_TIME
,W1.FF_WRAP_TIME
,W1.FF_CONSULT_RECEIVED_TIME
,W1.FF_TALK_TIME
,W1.FF_HANDLE_TIME
,W1.FF_MINIMUM_GUARANTEE
,W1.FF_AUTHORIZED_TO_INVOICE
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.LOGGED_IN_TIME
,W1.READY_TIME
,W1.NOT_READY_TIME
,W1.CALLS_ACCEPTED
,W1.RING_TIME
,W1.TALK_TIME
,W1.HOLD_TIME
,W1.WRAP_TIME
,W1.CONSULT_TIME
,W1.TALK_HOLD_CONSULT_TIME
,W1.HANDLE_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.PAY_GROUP
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR

FROM
(	SELECT
	 [DATETIME]
	,FF_AGENT_NAME
	,FF_USER_NAME
	,ROW_NUMBER() over (partition by [DATETIME], FF_AGENT_NAME, FF_USER_NAME
                            order by [DATETIME], FF_AGENT_NAME, FF_USER_NAME, LOGGED_IN_TIME DESC) ROWNO
	FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1
) TNM
LEFT JOIN      YZ_TB_IMPORTS_STUBHUB_INVOICING_1    W1   ON W1.[DATETIME]		= TNM.[DATETIME]
														AND W1.FF_AGENT_NAME	= TNM.FF_AGENT_NAME
														AND W1.FF_USER_NAME		= TNM.FF_USER_NAME
WHERE TNM.ROWNO > 1

--======================================================================
--DELETE DUPLICATES:
--======================================================================
DELETE FROM TNM  
FROM
(	SELECT
	 [DATETIME]
	,FF_AGENT_NAME
	,FF_USER_NAME
	,ROW_NUMBER() over (partition by [DATETIME], FF_AGENT_NAME, FF_USER_NAME
                            order by [DATETIME], FF_AGENT_NAME, FF_USER_NAME, LOGGED_IN_TIME DESC) ROWNO
	FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1
) TNM
WHERE TNM.ROWNO > 1
--======================================================================

--===============================================
-- UPDATE FIELDS FROM AGENT MAPPING
--===============================================
UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING_1 SET
 ID_EXT =			  CASE WHEN ISNULL(IAM.FF_RESOURCE,'') = 'Priority'	THEN 'SHP'	-- StubHub Priority Agents
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'Resource'	THEN 'SHR'	-- StubHub Resource Agents
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'FC'		THEN 'SHB'	-- StubHub FC Standard Agents  CHANGED TO: StubHub Selling/Sold Agents Effective 8/26/16 Then back to StubHub FC Standard Agents on 9/1/2016
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'Spanish'	THEN 'SHS'	-- StubHub Spanish Standard Agents		--EFFECTIVE 6/1/2016
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'LH'		THEN 'SHL'	-- StubHub Local Help Resource Agents	--EFFECTVIE 5/23/2017
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = ''			THEN 'SHA'	-- StubHub Standard Agents
					  ELSE '' END
,EMAIL              = ISNULL(IAM.EMAIL,'')
,SCHEDULER_ACL_NAME = CASE WHEN ISNULL(IAM.FF_RESOURCE,'') = 'Priority'	THEN 'StubHub Priority Agents'
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'Resource'	THEN 'StubHub Resource Agents'
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'FC'		THEN 'StubHub FC Standard Agents'
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'Spanish'	THEN 'StubHub Spanish Standard Agents'				--EFFECTIVE 6/1/2016
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'LH'		THEN 'StubHub Local Help Resource Agents'			--EFFECTIVE 5/23/2017
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = ''			THEN 'Stubhub Standard Agents'
					  ELSE '' END
,PAY_GROUP		    = ISNULL(IAM.PAY_GROUP,'')
,RESOURCE_NAME		= ISNULL(IAM.RESOURCE_NAME,'')
--  SELECT * 
FROM            YZ_TB_IMPORTS_STUBHUB_INVOICING_1        I
LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING  IAM  ON IAM.INVOICE_MAP_KEY  =  I.FF_USER_NAME

--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1
--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_GROUPS


--===============================================
UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING_1 SET     -- SELECT
 AIR_DAY_TYPE = CASE WHEN IG.HAS_HOLIDAYS = 'Y' AND
						 (    ISNULL(IH.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) OR
						   ( ISNULL(IHA.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) AND ISNULL(IHA.ID_EXT,'') <> '' )
						 )
					  THEN 'H' ELSE 'S' END  --AS AIR_DAY_TYPE  --H=Holiday  --S=Standard
FROM            YZ_TB_IMPORTS_STUBHUB_INVOICING_1               I
INNER JOIN      DATE_TIME										DT   ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY
LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_GROUPS         IG   ON IG.ID_EXT              = I.ID_EXT
LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_HOLIDAYS       IH   ON IH.HOLIDAY_DATE        = CAST(DT.CAL_DATE_STRING AS DATETIME)
LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_HOLIDAYS_ADDL  IHA  ON IHA.HOLIDAY_DATE       = CAST(DT.CAL_DATE_STRING AS DATETIME)
															    AND		IHA.ID_EXT             = I.ID_EXT	

--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1 WHERE AIR_DAY_TYPE = 'H'
--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_INVOICING   WHERE AIR_DAY_TYPE = 'H'
--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_HOLIDAYS

--===============================================
UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING_1 SET
 AIR_ACW_FONT_COLOR             = 'Black'

,MIN_GUARANTEE_RATE             = ISNULL(IG.MIN_GUARANTEE_RATE,0)           --varies between scheduler acl names.
,MIN_GUARANTEE_TYPE             = ISNULL(IG.MIN_GUARANTEE_TYPE,'')          --varies between scheduler acl names.
,AUTHORIZED_TO_INVOICE_TYPE     = ISNULL(IG.AUTHORIZED_TO_INVOICE_TYPE,'')  --varies between scheduler acl names.

,HAS_HOLIDAYS    = IG.HAS_HOLIDAYS
,INCLUDE_IN_CAS  = IG.INCLUDE_IN_CAS
,READY_FOR_XML   = IG.READY_FOR_XML
,SHOW_ID_EXTS    = IG.SHOW_ID_EXTS
FROM            YZ_TB_IMPORTS_STUBHUB_INVOICING_1        I
LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_GROUPS  IG  ON IG.ID_EXT    = I.ID_EXT
												
--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_GROUPS
	
--===============================================
UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING_1 SET
 INVOICE_ID = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
FROM          YZ_TB_IMPORTS_STUBHUB_INVOICING_1            AIA 
LEFT JOIN     YZ_TB_IMPORTS_STUBHUB_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT

--===============================================  --YOU WANT TO CHANGE THIS, BUT DON'T !!!!!!!  INVOICE GROUPS POPULATED, IT COULD BE CHANGED TO USE...

--=============================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=============================================================
--  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900703
--=============================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--SQL won't insert special characters!!!  + CHAR(9)  --CHAR(10) + CHAR(13)
--Check #1:  ===================================================================================================
	SET @RCD_CNT = (	SELECT COUNT(*) FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1 )
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + '1) File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #2:  ===================================================================================================
--	SET @RCD_CNT  = (	SELECT COUNT(*) FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1  
--						WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--					)  
--	IF @RCD_CNT > 0 BEGIN
--		SET @MSG1 = @MSG1 + '2) Invalid DATETIME Intervals in STUBHUB INVOICING IMPORT File.  Import was Cancelled.  Nothing was Imported.   |   ' 
--		SET @ERR_CNT = @ERR_CNT + 1
--	END
--Check #n:  ===================================================================================================
--	SET @MSG1 = @MSG1 + '2) Something not right with something.  Import was cancelled.  Nothing was Imported.     '
--	--SET @RCD_CNT = (	SELECT COUNT(*)
--	--					FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1
--	--					WHERE 'something' <> 'somethingelse'
--	--				  )  --If nothing imported in work table, don't need to return error.  That check is done in SSIS currently.


--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	--SSIS reads YZ_TB_ERRORS_FOUND table where TENANT_KEY = 900703, and if record exists, outputs results/error_msg field in an email.
	INSERT INTO YZ_TB_ERRORS_FOUND
	(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY     --TENANT_KEY
	,'STUBHUB_INVOICING' --SUB_GROUP_NAME
	,@MSG1           --ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	INSERT INTO YZ_TB_ERRORS_FOUND
		(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY     --TENANT_KEY
	,'STUBHUB_INVOICING' --SUB_GROUP_NAME
	,''              --ERROR_MSG  --Never make this @MSG1 !!!  Must stay as ''.
	--Do NOT want to got to early exit here because data was good, according to 'checks'!  We want to import data into permanent table.
END

--===============================================
-- CALCULATE MINIMUM GUARANTEE
--===============================================

UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING_1 SET
 MING = CASE WHEN ISNULL(ID_EXT,'') = 'SHA' THEN (40.00 / 60.00) * CPROD
			 WHEN ISNULL(ID_EXT,'') = 'SHP' THEN (40.00 / 60.00) * CPROD
			 WHEN ISNULL(ID_EXT,'') = 'SHB' THEN (40.00 / 60.00) * CPROD
			 WHEN ISNULL(ID_EXT,'') = 'SHS' THEN (40.00 / 60.00) * CPROD
			 WHEN ISNULL(ID_EXT,'') = 'SHR' THEN LOGGED_IN_TIME				-- AUT2 WILL BE LOGGED IN TIME
			 WHEN ISNULL(ID_EXT,'') = 'SHL' THEN LOGGED_IN_TIME				-- AUT2 WILL BE LOGGED IN TIME
			 ELSE 0.00 END

--===============================================
-- CALCULATE AUTHORIZED TO INVOICE
--===============================================
UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING_1 SET
 AUT2 = CASE WHEN ISNULL(ID_EXT,'') IN ('SHA','SHP','SHB','SHS') THEN 
				CASE WHEN MING > (TOTAL_TALK) THEN MING 
					 ELSE        (TOTAL_TALK) END      --TOTAL_TALK = TALK_TIME + HOLD_TIME + CONSULT_TIME + MIN(WRAP_TIME, CALLS_ACCEPTED * 180(seconds)) 
			 WHEN ISNULL(ID_EXT,'') IN ('SHR','SHL') THEN LOGGED_IN_TIME
			 ELSE 0.00 END

--=============================================
-- INSERT DATA INTO PERMANENT TABLE (UPDATE)
--=============================================
UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING SET
 FF_AGENT_NAME				= W1.FF_AGENT_NAME
--,FF_USER_NAME				= W1.FF_USER_NAME
,FF_HOUR					= W1.FF_HOUR
,FF_ACTIVE_TIME				= W1.FF_ACTIVE_TIME
,FF_READY_TIME				= W1.FF_READY_TIME
,FF_NOT_READY_TIME			= W1.FF_NOT_READY_TIME
,FF_ACCEPTED				= W1.FF_ACCEPTED
,FF_INVITE_TIME				= W1.FF_INVITE_TIME
,FF_ENGAGE_TIME				= W1.FF_ENGAGE_TIME
,FF_HOLD_TIME				= W1.FF_HOLD_TIME
,FF_WRAP_TIME				= W1.FF_WRAP_TIME
,FF_CONSULT_RECEIVED_TIME	= W1.FF_CONSULT_RECEIVED_TIME
,FF_TALK_TIME				= W1.FF_TALK_TIME
,FF_HANDLE_TIME				= W1.FF_HANDLE_TIME
,FF_MINIMUM_GUARANTEE		= W1.FF_MINIMUM_GUARANTEE
,FF_AUTHORIZED_TO_INVOICE	= W1.FF_AUTHORIZED_TO_INVOICE

,SEQNO_ADDED_TIME			= W1.SEQNO_ADDED_TIME
,SEQNO						= W1.SEQNO
,FTP_FILE_NAME				= W1.FTP_FILE_NAME

,[DATETIME]					= W1.[DATETIME]
,HOUR_INTERVAL				= W1.HOUR_INTERVAL
,LOGGED_IN_TIME				= W1.LOGGED_IN_TIME
,READY_TIME					= W1.READY_TIME
,NOT_READY_TIME				= W1.NOT_READY_TIME
,CALLS_ACCEPTED				= W1.CALLS_ACCEPTED
,RING_TIME					= W1.RING_TIME
,TALK_TIME					= W1.TALK_TIME
,HOLD_TIME					= W1.HOLD_TIME
,WRAP_TIME					= W1.WRAP_TIME
,CONSULT_TIME				= W1.CONSULT_TIME
,TALK_HOLD_CONSULT_TIME		= W1.TALK_HOLD_CONSULT_TIME
,HANDLE_TIME				= W1.HANDLE_TIME
,TOTAL_TALK					= W1.TOTAL_TALK
,CPROD						= W1.CPROD
,MING						= W1.MING
,AUT2						= W1.AUT2
,EMAIL						= W1.EMAIL
--,ID_EXT						= W1.ID_EXT
,SCHEDULER_ACL_NAME			= W1.SCHEDULER_ACL_NAME
,PAY_GROUP					= W1.PAY_GROUP
--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE					= W1.CAL_DATE
,TENANT_KEY					= W1.TENANT_KEY
,AIR_DAY_TYPE				= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR			= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE			= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE			= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE = W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS				= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS				= W1.INCLUDE_IN_CAS
,READY_FOR_XML				= W1.READY_FOR_XML
,SHOW_ID_EXTS				= W1.SHOW_ID_EXTS
,INVOICE_ID					= W1.INVOICE_ID
,RESOURCE_NAME				= W1.RESOURCE_NAME
,AIRITKDUR					= W1.AIRITKDUR
,AIRIACDUR					= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME		= NULL
,WS_ROW_UPDATED_TIME		= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            YZ_TB_IMPORTS_STUBHUB_INVOICING_1  W1
----INNER JOIN SHOULD TAKE CARE OF MOST OF THE WORRY IN THE WHERE CLAUSE...
INNER JOIN      YZ_TB_IMPORTS_STUBHUB_INVOICING    G	 ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
														AND G.FF_USER_NAME					 = W1.FF_USER_NAME
														AND G.ID_EXT						 = W1.ID_EXT

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_USER_NAME                   = W1.FF_USER_NAME
  AND G.ID_EXT						   = W1.ID_EXT
--IF I DO UPDATE NO MATTER WHAT, THEN I CAN SEE WHEN SAME DATA EXISTED IN MULTIPLE FILES!!!  PLUS ASSUMING LAST ON FTP IS WHAT THEY WANT.


--=============================================
-- INSERT DATA INTO PERMANENT TABLE (NEW) 
--=============================================
INSERT INTO YZ_TB_IMPORTS_STUBHUB_INVOICING
(FF_AGENT_NAME
,FF_USER_NAME
,FF_HOUR
,FF_ACTIVE_TIME
,FF_READY_TIME
,FF_NOT_READY_TIME
,FF_ACCEPTED
,FF_INVITE_TIME
,FF_ENGAGE_TIME
,FF_HOLD_TIME
,FF_WRAP_TIME
,FF_CONSULT_RECEIVED_TIME
,FF_TALK_TIME
,FF_HANDLE_TIME
,FF_MINIMUM_GUARANTEE
,FF_AUTHORIZED_TO_INVOICE
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,LOGGED_IN_TIME
,READY_TIME
,NOT_READY_TIME
,CALLS_ACCEPTED
,RING_TIME
,TALK_TIME
,HOLD_TIME
,WRAP_TIME
,CONSULT_TIME
,TALK_HOLD_CONSULT_TIME
,HANDLE_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,PAY_GROUP
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W1.FF_AGENT_NAME
,W1.FF_USER_NAME
,W1.FF_HOUR
,W1.FF_ACTIVE_TIME
,W1.FF_READY_TIME
,W1.FF_NOT_READY_TIME
,W1.FF_ACCEPTED
,W1.FF_INVITE_TIME
,W1.FF_ENGAGE_TIME
,W1.FF_HOLD_TIME
,W1.FF_WRAP_TIME
,W1.FF_CONSULT_RECEIVED_TIME
,W1.FF_TALK_TIME
,W1.FF_HANDLE_TIME
,W1.FF_MINIMUM_GUARANTEE
,W1.FF_AUTHORIZED_TO_INVOICE

,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME

,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.LOGGED_IN_TIME
,W1.READY_TIME
,W1.NOT_READY_TIME
,W1.CALLS_ACCEPTED
,W1.RING_TIME
,W1.TALK_TIME
,W1.HOLD_TIME
,W1.WRAP_TIME
,W1.CONSULT_TIME
,W1.TALK_HOLD_CONSULT_TIME
,W1.HANDLE_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.PAY_GROUP
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            YZ_TB_IMPORTS_STUBHUB_INVOICING_1  W1

LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													  AND G.FF_USER_NAME                   = W1.FF_USER_NAME
													  AND G.ID_EXT						   = W1.ID_EXT

WHERE (G.FF_USER_NAME                      IS NULL AND ISNULL(W1.FF_USER_NAME,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY    IS NULL AND ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND (G.ID_EXT							   IS NULL AND ISNULL(W1.ID_EXT,'') <> '' )


--======================================================================================================================================
SET DATEFIRST 1  -- = Monday  --SELECT DATEPART(DW,dbo.getdate())  --SELECT @@DATEFIRST AS '1st Day', DATEPART(dw, dbo.getdate()) AS 'Today'
--======================================================================================================================================

--============================================================
IF OBJECT_ID('TEMPDB..#DT_EASY_WEEKS') IS NOT NULL BEGIN
   DROP TABLE #DT_EASY_WEEKS
END
CREATE TABLE #DT_EASY_WEEKS
(CAL_DATE_STRING      VARCHAR(10)
,CAL_WEEK_START_DATE  DATETIME
,CAL_WEEK_END_DATE    DATETIME
,PAY_CYCLE_CLOSURE_DATE DATETIME
)
INSERT INTO #DT_EASY_WEEKS
SELECT
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
FROM DATE_TIME DT
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
--WHERE DT.CAL_DATE >= CAST('06/01/2011' AS DATETIME) AND DT.CAL_DATE <  CAST('06/20/2011' AS DATETIME)
GROUP BY 
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
--===========================
UPDATE #DT_EASY_WEEKS SET CAL_WEEK_END_DATE = DATEADD(DD,6,CAL_WEEK_START_DATE)
--110713: WAS: 06/26/2011
UPDATE #DT_EASY_WEEKS SET
 PAY_CYCLE_CLOSURE_DATE = (CASE WHEN (DATEDIFF(DD,CAST('09/29/2013' AS DATETIME),CAL_WEEK_END_DATE) % 14) = 0 THEN
									CAL_WEEK_END_DATE
								ELSE
									DATEADD(DD,7,CAL_WEEK_END_DATE)
								END)
--SELECT * FROM #DT_EASY_WEEKS ORDER BY CAL_DATE_STRING

--=================================================================================
--CREATE TMP TABLE: Currently same structure as:  [YZ_TB_AGENT_INVOICE_AUTOMATION]
--=================================================================================
IF OBJECT_ID('TEMPDB..#YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA') IS NOT NULL BEGIN
   DROP TABLE #YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA
END
CREATE TABLE #YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](50) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[PAY_GROUP] [int] NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.FF_USER_NAME  --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING     --[DATE]             
,DT.LABEL_HH24 + ':00'  --HOD_INTERVAL

,ISNULL(AIA.LOGGED_IN_TIME, 0)			--AU_DK_LOGGED_IN_DURATION				
,ISNULL(AIA.READY_TIME, 0)				--AU_DK_AVAILABLE_DURATION				

,ISNULL(AIA.TALK_HOLD_CONSULT_TIME, 0)	--AIA.TALK_TIME + AIA.HOLD_TIME + AIA.CONSULT_TIME		--AU_DK_TALK_DURATION
,0										--AU_DK_IB_TALK_DURATION
,0										--AU_DK_OB_TALK_DURATION

,ISNULL(AIA.WRAP_TIME, 0)	   			--AU_DK_CONVENTIONAL_ACW
,ISNULL(AIA.NOT_READY_TIME, 0)			--AU_DK_NR_DURATION
,0										--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0										--AU_DK_ADJUSTED_NR_DURATION
,ISNULL(AIA.CPROD, 0)					--AU_DK_TOTAL_PRODUCTIVE_DURATION
,ISNULL(AIA.CPROD, 0)					--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS

,0  --AU_DK_XFER_COUNT
,0  --AU_DK_HOLD_COUNT
,0  --AU_DK_CONFERENCE_COUNT
,0  --AU_DK_CONSULT_COUNT
,0  --AU_DK_PUP_COUNT

,0  --AU_DK_OFFERED_COUNT
,0  --AU_DK_HANDLED_COUNT
,0  --AU_DK_IB_HANDLE_COUNT
,0  --AU_DK_OB_HANDLE_COUNT
						
,0   --AU_DK_RONA_COUNT
,0   --AU_DK_AWR_COUNT

,ISNULL(AIA.MING, 0) --MINIMUM_GUARANTEE
,ISNULL(AIA.AUT2, 0) --AUTHORIZED_TO_INVOICE

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID  --CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID 
,AIA.RESOURCE_NAME
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.PAY_GROUP
,dbo.getdate()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL       --	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
--SELECT * FROM YZ_TB_IMPORTS_STUBHUB_SD_AIA_STATIC_DEFAULTS ORDER BY OFFICIAL_WSOL_CLIENT_ID
--SELECT TOP 1000 *
FROM            YZ_TB_IMPORTS_STUBHUB_INVOICING_1            AIA 
--Only want to include valid id exts in _AIA table -- id exts that have ming and aut2 formulas and static defaults setup...:
INNER JOIN      YZ_TB_IMPORTS_STUBHUB_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_GROUPS      CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME                                DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS                           DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')
--AND (ISNULL(AIA.PAY_GROUP,'') = 0)  -- THIS CAN BE SET TO ONLY INCLUDE CERTAIN PAY GROUPS IN THE XML PUSH

--  INNER JOIN TO AIASD TABLE ENSURES ONLY RECORDS WITH VALID ID EXTENSIONS ARE PUT IN _AIA TABLE/XML REPORT/FILE...
--  SAME FOR INVOICE_GROUPS...

--  AGENT CAN'T BE IN THE SAME TIME INTERVAL MORE THAN ONCE, NO MATTER WHAT THEIR ID_EXT...
--  WE MAY HAVE MULTIPLE RECORDS OF AGENT IN SAME TIME INTERVAL DUE TO CARRY OVER INTO NEXT DAY'S FILE
--  MAY NEED TO RECALCULATE MING AND AUT2 WHEN GENERATING XML

--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_INVOICING WHERE ISNULL(ID_EXT,'') = ''


--==================================
--UPDATE YZ_TB_...UV_ANT_AIA TABLE:
--==================================  --  SELECT TOP 100 * FROM YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA
UPDATE YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA SET
 [PLATFORM]							= W1.[PLATFORM]
,[STATUS]							= W1.[STATUS]
--,INVOICE_MAP_KEY					= W1.INVOICE_MAP_KEY
,FIELD_NAME							= W1.FIELD_NAME
,SCHEDULER_PROJECT_ID				= W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME					= W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION					= W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID			= W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME			= W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID				= W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME			= W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID			= W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID	= W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID		= W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY			= W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID					= W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID					= W1.HOLIDAY_INVOICE_ID
,HOLIDAY							= W1.HOLIDAY
,FILE_FORMAT_OF_PUSH				= W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID		= W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL							= W1.NEW_ACL
,CURRENT_CATS						= W1.CURRENT_CATS
,CATS_ID							= W1.CATS_ID
,PATS_ID							= W1.PATS_ID
,SMART_ELIGIBLE						= W1.SMART_ELIGIBLE
,SMART_TIER_1						= W1.SMART_TIER_1
,SMART_TIER_2						= W1.SMART_TIER_2
,SMART_TIER_3						= W1.SMART_TIER_3
,INTERVAL							= W1.INTERVAL
,[DATE]								= W1.[DATE]
,HOD_INTERVAL						= W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION			= W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION			= W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION				= W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION				= W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION				= W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW				= W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION					= W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT					= W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT					= W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT				= W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT				= W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT					= W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT				= W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT				= W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT				= W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT				= W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT					= W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT					= W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE					= W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE				= W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE					= W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE				= W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:

,FTP_FILE_NAME						= W1.FTP_FILE_NAME
,EMAIL								= W1.EMAIL
--,STD_TENANT_START_DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W1.CAL_DATE
,TENANT_KEY							= W1.TENANT_KEY
,AIR_DAY_TYPE						= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE					= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE					= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W1.INCLUDE_IN_CAS
,READY_FOR_XML						= W1.READY_FOR_XML
,SHOW_ID_EXTS						= W1.SHOW_ID_EXTS
,INVOICE_ID							= W1.INVOICE_ID
,RESOURCE_NAME						= W1.RESOURCE_NAME

,PAY_GROUP							= W1.PAY_GROUP
,AIRITKDUR							= W1.AIRITKDUR
,AIRIACDUR							= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

FROM            #YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA   W1

INNER JOIN      YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													   AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
													   AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )


--================================================
--INSERT TMP TABLE FIELDS INTO YZ_TB_... TABLE:
--================================================
INSERT INTO [YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.PAY_GROUP
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA   AIA
LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA    UV	 ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
														AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
														AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )



--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_STUBHUB_NPS_IMPORT_STATUS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_STUBHUB_NPS_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_NPS_IMPORT_STATUS] '06/01/2014','06/06/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_NPS_IMPORT_STATUS] '06/20/2014','06/30/2014','','W'

--===========================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--===========================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_STUBHUB_NPS_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_STUBHUB_NPS_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_STUBHUB_NPS_IMPORT_STATUS
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_STUBHUB_NPS_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0)															AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_STUBHUB_NPS  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

---- AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA
--END  --IF @PSW...

--=================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=================================================================
--DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = @TENANT_KEY
----  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 106
--=================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

--CREATE CURSOR, POPULATE CURSOR FOR DATE RANGE, SPIN THROUGH EACH OF THE DAILY RECORDS, CONCATENATING TO STRING FOR EACH DATE MISSING.

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	
	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_STUBHUB_NPS_IMPORT_STATUS   I   ON I.FILEDATETIME                   = DT.FILEDATETIME

WHERE ISNULL(I.RCD_CNT,0) = 0

  --AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)
  --AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
		SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

			SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 8:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
		END
	END
	ELSE BEGIN
		SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
		END
	END
	
END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--STUBHUB_NPS:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM YZ_TB_ERRORS_FOUND
							   WHERE TENANT_KEY = 900703 AND SUB_GROUP_NAME = 'STUBHUB_NPS' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_STUBHUB_NPS_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_STUBHUB_NPS_Summary]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_STUBHUB_NPS_Summary]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_NPS_Summary] '06/01/2014','06/07/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_NPS_Summary] '06/07/2014','06/07/2014','','W'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

			IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly 
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--TO TEST:
		--DECLARE
		-- @DTM_BEG DATETIME
		--,@DTM_END DATETIME
		----SET @DTM_BEG = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_END = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_BEG = CAST('08/02/2012' AS DATETIME)
		----SET @DTM_END = CAST('08/02/2012' AS DATETIME)
		--SET @DTM_BEG = CAST('08/03/2012' AS DATETIME)
		--SET @DTM_END = CAST('08/03/2012' AS DATETIME)

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		--SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		--SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--07/06/2012 IS AN INVOICE FRIDAY.  SAME AS 05/23/2014.
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_STUBHUB_NPS_Summary') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_STUBHUB_NPS_Summary
END
CREATE TABLE #IMPORTS_STUBHUB_NPS_Summary
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_STUBHUB_NPS_Summary
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')       --AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') --AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')             --AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_STUBHUB_NPS  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA

--END  --IF @PSW...


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT      
,'White' AS BG_COLOR

FROM #IMPORTS_STUBHUB_NPS_Summary 

ORDER BY
-- CALL_DATETIME           
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT      


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_STUBHUB_QA_IMPORT_STATUS]...';


GO



CREATE PROCEDURE [dbo].[uspIMPORTS_STUBHUB_QA_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_QA_IMPORT_STATUS] '06/01/2014','06/06/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_QA_IMPORT_STATUS] '06/20/2014','06/30/2014','','W'

--===========================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--===========================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_STUBHUB_QA_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_STUBHUB_QA_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_STUBHUB_QA_IMPORT_STATUS
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_STUBHUB_QA_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0)															AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_STUBHUB_QA  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

---- AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA
--END  --IF @PSW...

--=================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=================================================================
--DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = @TENANT_KEY
----  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 106
--=================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

--CREATE CURSOR, POPULATE CURSOR FOR DATE RANGE, SPIN THROUGH EACH OF THE DAILY RECORDS, CONCATENATING TO STRING FOR EACH DATE MISSING.

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	
	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_STUBHUB_QA_IMPORT_STATUS   I   ON I.FILEDATETIME                   = DT.FILEDATETIME

WHERE ISNULL(I.RCD_CNT,0) = 0

  --AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)
  --AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
		SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

			SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 8:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
		END
	END
	ELSE BEGIN
		SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
		END
	END
	
END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--STUBHUB_QA:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM WSOL_TB_IMPORT_ERRORS_FOUND
							   WHERE TENANT_KEY = 900703 AND SUB_GROUP_NAME = 'STUBHUB_QA' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_STUBHUB_QA_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_STUBHUB_QA_Summary]...';


GO




CREATE PROCEDURE [dbo].[uspIMPORTS_STUBHUB_QA_Summary]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_QA_Summary] '06/01/2014','06/07/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_QA_Summary] '06/07/2014','06/07/2014','','W'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

			IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly 
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--TO TEST:
		--DECLARE
		-- @DTM_BEG DATETIME
		--,@DTM_END DATETIME
		----SET @DTM_BEG = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_END = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_BEG = CAST('08/02/2012' AS DATETIME)
		----SET @DTM_END = CAST('08/02/2012' AS DATETIME)
		--SET @DTM_BEG = CAST('08/03/2012' AS DATETIME)
		--SET @DTM_END = CAST('08/03/2012' AS DATETIME)

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		--SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		--SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--07/06/2012 IS AN INVOICE FRIDAY.  SAME AS 05/23/2014.
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_STUBHUB_QA_Summary') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_STUBHUB_QA_Summary
END
CREATE TABLE #IMPORTS_STUBHUB_QA_Summary
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_STUBHUB_QA_Summary
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')       --AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') --AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')             --AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_STUBHUB_QA  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA

--END  --IF @PSW...


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT      
,'White' AS BG_COLOR

FROM #IMPORTS_STUBHUB_QA_Summary 

ORDER BY
-- CALL_DATETIME           
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT      


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_STUBHUB_RAW_DATA_II_IMPORT_STATUS]...';


GO




CREATE PROCEDURE [dbo].[uspIMPORTS_STUBHUB_RAW_DATA_II_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_RAW_DATA_II_IMPORT_STATUS] '06/01/2014','06/06/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_RAW_DATA_II_IMPORT_STATUS] '06/20/2014','06/30/2014','','W'

--===========================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--===========================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_STUBHUB_RAW_DATA_II_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_STUBHUB_RAW_DATA_II_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_STUBHUB_RAW_DATA_II_IMPORT_STATUS
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_STUBHUB_RAW_DATA_II_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0)															AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_STUBHUB_RAW_DATA_II  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

---- AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA
--END  --IF @PSW...

--=================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=================================================================
--DELETE FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = @TENANT_KEY
----  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 106
--=================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

--CREATE CURSOR, POPULATE CURSOR FOR DATE RANGE, SPIN THROUGH EACH OF THE DAILY RECORDS, CONCATENATING TO STRING FOR EACH DATE MISSING.

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	
	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_STUBHUB_RAW_DATA_II_IMPORT_STATUS   I   ON I.FILEDATETIME                   = DT.FILEDATETIME

WHERE ISNULL(I.RCD_CNT,0) = 0

  --AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)
  --AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''

	IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
		SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

			SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
			SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 8:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
		END
	END
	ELSE BEGIN
		SET @MSG1 = 'Imported file(s) from ' 
		+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
		IF @RCD_CNT > 0 BEGIN
			SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
		END
		ELSE BEGIN
			SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
		END
	END
	
END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--STUBHUB_RAW_DATA_II:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM WSOL_TB_IMPORT_ERRORS_FOUND
							   WHERE TENANT_KEY = 900703 AND SUB_GROUP_NAME = 'STUBHUB_RAW_DATA_II' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_STUBHUB_RAW_DATA_II_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_STUBHUB_RAW_DATA_II_Summary]...';


GO





CREATE PROCEDURE [dbo].[uspIMPORTS_STUBHUB_RAW_DATA_II_Summary]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_RAW_DATA_II_Summary] '06/01/2014','06/07/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_RAW_DATA_II_Summary] '06/07/2014','06/07/2014','','W'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

			IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly 
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--TO TEST:
		--DECLARE
		-- @DTM_BEG DATETIME
		--,@DTM_END DATETIME
		----SET @DTM_BEG = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_END = CAST('07/25/2012' AS DATETIME)  
		----SET @DTM_BEG = CAST('08/02/2012' AS DATETIME)
		----SET @DTM_END = CAST('08/02/2012' AS DATETIME)
		--SET @DTM_BEG = CAST('08/03/2012' AS DATETIME)
		--SET @DTM_END = CAST('08/03/2012' AS DATETIME)

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		--SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		--SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--07/06/2012 IS AN INVOICE FRIDAY.  SAME AS 05/23/2014.
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_STUBHUB_RAW_DATA_II_Summary') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_STUBHUB_RAW_DATA_II_Summary
END
CREATE TABLE #IMPORTS_STUBHUB_RAW_DATA_II_Summary
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
--IF @PSW = 
    INSERT INTO #IMPORTS_STUBHUB_RAW_DATA_II_Summary
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')       --AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') --AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')             --AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_STUBHUB_RAW_DATA_II  C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA

--END  --IF @PSW...


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT      
,'White' AS BG_COLOR

FROM #IMPORTS_STUBHUB_RAW_DATA_II_Summary 

ORDER BY
-- CALL_DATETIME           
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT      


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_STUBHUB_Summary]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_STUBHUB_Summary]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_Summary] '06/01/2014','06/07/2014','','R'
--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_Summary] '06/07/2014','06/07/2014','','W'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

			IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly 
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('05/23/2014' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_STUBHUB_Summary') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_STUBHUB_Summary
END
CREATE TABLE #IMPORTS_STUBHUB_Summary
(FILEDATETIME          VARCHAR(20)
,FTP_FILE_NAME         VARCHAR(100)
,CST_ROW_CREATED_TIME  DATETIME
,RCD_CNT               INT
)

--==================================
--INSERT RECORDS INTO TMP TABLE:
--==================================
    INSERT INTO #IMPORTS_STUBHUB_Summary
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')       --AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') --AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')             --AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		--,C.FTP_FILE_NAME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
		,C.WS_ROW_CREATED_TIME
		,COUNT(*) AS RCD_CNT
		--  SELECT * 
		FROM            YZ_TB_IMPORTS_STUBHUB_INVOICING   C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		--,C.FTP_FILE_NAME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME  --It will confuse them if they see 'N3w_' in file name !!!
		,C.WS_ROW_CREATED_TIME
		--UNION ALL  --UUUUUUUUUUNNNNNNNNNNIIIIIIIIIIOOOOOOOOOONNNNNNNNNN
	) UA

--END  --IF @PSW...


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           

,CST_ROW_CREATED_TIME

,RCD_CNT      

--,CASE WHEN DATEDIFF(HH,CALL_DATETIME,CST_ROW_CREATED_TIME) > 35 THEN 'Pink' ELSE 'White' END AS BG_COLOR
,'White' AS BG_COLOR

FROM #IMPORTS_STUBHUB_Summary 

ORDER BY
-- CALL_DATETIME           
 FTP_FILE_NAME
,FILEDATETIME        

,CST_ROW_CREATED_TIME
   
,RCD_CNT      


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1







--SELECT (DATEDIFF(DD,CAST('07/05/2012' AS DATETIME),CAST('07/16/2012' AS DATETIME)) % 14)  --11
--SELECT (DATEDIFF(DD,CAST('07/05/2012' AS DATETIME),CAST('07/18/2012' AS DATETIME)) % 14)  --13
--
--SELECT (DATEDIFF(DD,CAST('07/19/2012' AS DATETIME),CAST('07/19/2012' AS DATETIME)) % 14)  --0
--SELECT (DATEDIFF(DD,CAST('07/19/2012' AS DATETIME),CAST('07/20/2012' AS DATETIME)) % 14)  --1
--SELECT (DATEDIFF(DD,CAST('07/19/2012' AS DATETIME),CAST('07/21/2012' AS DATETIME)) % 14)  --2
--SELECT (DATEDIFF(DD,CAST('07/19/2012' AS DATETIME),CAST('07/25/2012' AS DATETIME)) % 14)  --6
--SELECT (DATEDIFF(DD,CAST('07/19/2012' AS DATETIME),CAST('07/31/2012' AS DATETIME)) % 14)  --12
--SELECT (DATEDIFF(DD,CAST('07/19/2012' AS DATETIME),CAST('08/01/2012' AS DATETIME)) % 14)  --13
--
--SELECT (DATEDIFF(DD,CAST('07/19/2012' AS DATETIME),CAST('08/02/2012' AS DATETIME)) % 14)  --0
--SELECT (DATEDIFF(DD,CAST('07/19/2012' AS DATETIME),CAST('08/03/2012' AS DATETIME)) % 14)  --1
GO
PRINT N'Creating [dbo].[uspIMPORTS_VYNE_PATS_ACCESS_IMPORT]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_VYNE_PATS_ACCESS_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_VYNE_PATS_ACCESS_IMPORT]

--  SELECT * FROM WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_1

--====================================================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY = 100100
--====================================================================
DELETE FROM YZ_TB_ERRORS_FOUND 
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = 'VYNE_PATS_ACCESS'
--SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 100100


--===================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.getdate()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===================================================================================

--======================================================================
--HANDLE COLUMN HEADER AND JUNK RECORDS:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_OFFICIAL_ACL_FIRST_NAME
,FF_OFFICIAL_ACL_LAST_NAME
,FF_OFFICIAL_CORPORATE_NAME
,FF_AGENT_ID
,FF_IDENTIFICATION_NUMBER
,FF_OVERALL_CATS_STATUS_CODE
,FF_PRIMARY_PHONE
,FF_MOBILE_PHONE
,FF_MOBILE_TERMS
,FF_USERNAME
,FF_PASSWORD
,FF_PROGRAM
,FF_GROUP
,FF_PATS_ROSTER_NUMBER
,FF_TYPE_OF_PREP
,FF_TRAINER
,FF_START_DATE
,FF_END_DATE
,FF_COMPLETION_STATUS
,FF_REASON_CODE
,FF_DOB
,FF_SSN
,FF_PATS_ROSTER_STATUS
,FF_STREET_ADDRESS
,FF_CITY
,FF_STATE_PROVINCE
,FF_ZIP
,FF_COUNTRY
,FF_C_NAME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AGENT_FULL_NAME
,CORPORATE_NAME
,AGENT_ID
,ID_NUMBER
,CATS_STATUS_CODE
,PRIMARY_PHONE
,MOBILE_PHONE
,MOBILE_TERMS
,USERNAME
,[PASSWORD]
,[PROGRAM_NAME]
,[GROUP]
,PATS_ROSTER_NUMBER
,TYPE_OF_PREP
,TRAINER_NAME
,[START_DATE]
,END_DATE
,COMPLETION_STATUS
,REASON_CODE
,DOB
,LAST_4_SSN
,PATS_ROSTER_STATUS
,STREET_ADDRESS
,CITY
,STATE_PROVINCE
,ZIP
,COUNTRY
,CATS_PROFILE_NAME)

SELECT
 24                     --BAD_IMPORTS_NO			--'Junk Record'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE		--'ACT'IVITY FILE.
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME		--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_OFFICIAL_ACL_FIRST_NAME
,W1.FF_OFFICIAL_ACL_LAST_NAME
,W1.FF_OFFICIAL_CORPORATE_NAME
,W1.FF_AGENT_ID
,W1.FF_IDENTIFICATION_NUMBER
,W1.FF_OVERALL_CATS_STATUS_CODE
,W1.FF_PRIMARY_PHONE
,W1.FF_MOBILE_PHONE
,W1.FF_MOBILE_TERMS
,W1.FF_USERNAME
,W1.FF_PASSWORD
,W1.FF_PROGRAM
,W1.FF_GROUP
,W1.FF_PATS_ROSTER_NUMBER
,W1.FF_TYPE_OF_PREP
,W1.FF_TRAINER
,W1.FF_START_DATE
,W1.FF_END_DATE
,W1.FF_COMPLETION_STATUS
,W1.FF_REASON_CODE
,W1.FF_DOB
,W1.FF_SSN
,W1.FF_PATS_ROSTER_STATUS
,W1.FF_STREET_ADDRESS
,W1.FF_CITY
,W1.FF_STATE_PROVINCE
,W1.FF_ZIP
,W1.FF_COUNTRY
,W1.FF_C_NAME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AGENT_FULL_NAME
,W1.CORPORATE_NAME
,W1.AGENT_ID
,W1.ID_NUMBER
,W1.CATS_STATUS_CODE
,W1.PRIMARY_PHONE
,W1.MOBILE_PHONE
,W1.MOBILE_TERMS
,W1.USERNAME
,W1.[PASSWORD]
,W1.[PROGRAM_NAME]
,W1.[GROUP]
,W1.PATS_ROSTER_NUMBER
,W1.TYPE_OF_PREP
,W1.TRAINER_NAME
,W1.[START_DATE]
,W1.END_DATE
,W1.COMPLETION_STATUS
,W1.REASON_CODE
,W1.DOB
,W1.LAST_4_SSN
,W1.PATS_ROSTER_STATUS
,W1.STREET_ADDRESS
,W1.CITY
,W1.STATE_PROVINCE
,W1.ZIP
,W1.COUNTRY
,W1.CATS_PROFILE_NAME

FROM WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_1	W1
WHERE ISNULL(W1.FF_AGENT_ID,'') IN ('Agent ID')

--======================================================================
--DELETE COLUMN HEADER AND JUNK RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_1
WHERE ISNULL(FF_AGENT_ID,'') IN ('Agent ID')
--======================================================================


--=============================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_1) TABLE THAT WEREN'T IN IMPORTED FILE:
--=============================================================================
UPDATE WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_1 SET
 [DATETIME]				= CAST(SUBSTRING(FTP_FILE_NAME, CHARINDEX('.', FTP_FILE_NAME) - 8, 8) AS DATETIME)
,TENANT_KEY				= @TENANT_KEY
,AGENT_FULL_NAME		= ISNULL(FF_OFFICIAL_ACL_FIRST_NAME		,'') + ' ' + ISNULL(FF_OFFICIAL_ACL_LAST_NAME,'')
,CORPORATE_NAME			= ISNULL(FF_OFFICIAL_CORPORATE_NAME		,'')
,AGENT_ID				= ISNULL(FF_AGENT_ID					,'')
,ID_NUMBER				= ISNULL(FF_IDENTIFICATION_NUMBER		,'')
,CATS_STATUS_CODE		= ISNULL(FF_OVERALL_CATS_STATUS_CODE	,'')
,PRIMARY_PHONE			= ISNULL(FF_PRIMARY_PHONE				,'')
,MOBILE_PHONE			= ISNULL(FF_MOBILE_PHONE				,'')
,MOBILE_TERMS			= ISNULL(FF_MOBILE_TERMS				,'')
,USERNAME				= ISNULL(FF_USERNAME					,'')
,[PASSWORD]				= ISNULL(FF_PASSWORD					,'')
,[PROGRAM_NAME]			= ISNULL(FF_PROGRAM						,'')
,[GROUP]				= ISNULL(FF_GROUP						,'')
,PATS_ROSTER_NUMBER		= ISNULL(FF_PATS_ROSTER_NUMBER			,'')
,TYPE_OF_PREP			= ISNULL(FF_TYPE_OF_PREP				,'')
,TRAINER_NAME			= ISNULL(FF_TRAINER						,'')

,[START_DATE]			= CAST(ISNULL(FF_START_DATE	,'1900/01/01') AS DATETIME)
,[END_DATE]				= CAST(ISNULL(FF_END_DATE	,'1900,01,01') AS DATETIME)

,COMPLETION_STATUS		= ISNULL(FF_COMPLETION_STATUS			,'')
,REASON_CODE			= ISNULL(FF_REASON_CODE					,'')
,DOB					= ISNULL(FF_DOB							,'')
,LAST_4_SSN				= ISNULL(FF_SSN							,'')
,PATS_ROSTER_STATUS		= ISNULL(FF_PATS_ROSTER_STATUS			,'')
,STREET_ADDRESS			= ISNULL(FF_STREET_ADDRESS				,'')
,CITY					= ISNULL(FF_CITY						,'')
,STATE_PROVINCE			= ISNULL(FF_STATE_PROVINCE				,'')
,ZIP					= ISNULL(FF_ZIP							,'')
,COUNTRY				= ISNULL(FF_COUNTRY						,'')
,CATS_PROFILE_NAME		= ISNULL(FF_C_NAME						,'')


--======================================================================
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME

SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN([DATETIME]) FROM WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_1))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_1))  
--======================================================================

--======================================================================
UPDATE WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_1 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM            WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_1	I
INNER JOIN      DATE_TIME                          DT   ON DT.CAL_DATE = I.[DATETIME]


--======================================================================
--HANDLE INVALID DATE/TIME RECORDS:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_OFFICIAL_ACL_FIRST_NAME
,FF_OFFICIAL_ACL_LAST_NAME
,FF_OFFICIAL_CORPORATE_NAME
,FF_AGENT_ID
,FF_IDENTIFICATION_NUMBER
,FF_OVERALL_CATS_STATUS_CODE
,FF_PRIMARY_PHONE
,FF_MOBILE_PHONE
,FF_MOBILE_TERMS
,FF_USERNAME
,FF_PASSWORD
,FF_PROGRAM
,FF_GROUP
,FF_PATS_ROSTER_NUMBER
,FF_TYPE_OF_PREP
,FF_TRAINER
,FF_START_DATE
,FF_END_DATE
,FF_COMPLETION_STATUS
,FF_REASON_CODE
,FF_DOB
,FF_SSN
,FF_PATS_ROSTER_STATUS
,FF_STREET_ADDRESS
,FF_CITY
,FF_STATE_PROVINCE
,FF_ZIP
,FF_COUNTRY
,FF_C_NAME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AGENT_FULL_NAME
,CORPORATE_NAME
,AGENT_ID
,ID_NUMBER
,CATS_STATUS_CODE
,PRIMARY_PHONE
,MOBILE_PHONE
,MOBILE_TERMS
,USERNAME
,[PASSWORD]
,[PROGRAM_NAME]
,[GROUP]
,PATS_ROSTER_NUMBER
,TYPE_OF_PREP
,TRAINER_NAME
,[START_DATE]
,END_DATE
,COMPLETION_STATUS
,REASON_CODE
,DOB
,LAST_4_SSN
,PATS_ROSTER_STATUS
,STREET_ADDRESS
,CITY
,STATE_PROVINCE
,ZIP
,COUNTRY
,CATS_PROFILE_NAME)
SELECT
 26                     --BAD_IMPORTS_NO		--'Invalid Date/Time'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME	--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_OFFICIAL_ACL_FIRST_NAME
,W1.FF_OFFICIAL_ACL_LAST_NAME
,W1.FF_OFFICIAL_CORPORATE_NAME
,W1.FF_AGENT_ID
,W1.FF_IDENTIFICATION_NUMBER
,W1.FF_OVERALL_CATS_STATUS_CODE
,W1.FF_PRIMARY_PHONE
,W1.FF_MOBILE_PHONE
,W1.FF_MOBILE_TERMS
,W1.FF_USERNAME
,W1.FF_PASSWORD
,W1.FF_PROGRAM
,W1.FF_GROUP
,W1.FF_PATS_ROSTER_NUMBER
,W1.FF_TYPE_OF_PREP
,W1.FF_TRAINER
,W1.FF_START_DATE
,W1.FF_END_DATE
,W1.FF_COMPLETION_STATUS
,W1.FF_REASON_CODE
,W1.FF_DOB
,W1.FF_SSN
,W1.FF_PATS_ROSTER_STATUS
,W1.FF_STREET_ADDRESS
,W1.FF_CITY
,W1.FF_STATE_PROVINCE
,W1.FF_ZIP
,W1.FF_COUNTRY
,W1.FF_C_NAME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AGENT_FULL_NAME
,W1.CORPORATE_NAME
,W1.AGENT_ID
,W1.ID_NUMBER
,W1.CATS_STATUS_CODE
,W1.PRIMARY_PHONE
,W1.MOBILE_PHONE
,W1.MOBILE_TERMS
,W1.USERNAME
,W1.[PASSWORD]
,W1.[PROGRAM_NAME]
,W1.[GROUP]
,W1.PATS_ROSTER_NUMBER
,W1.TYPE_OF_PREP
,W1.TRAINER_NAME
,W1.[START_DATE]
,W1.END_DATE
,W1.COMPLETION_STATUS
,W1.REASON_CODE
,W1.DOB
,W1.LAST_4_SSN
,W1.PATS_ROSTER_STATUS
,W1.STREET_ADDRESS
,W1.CITY
,W1.STATE_PROVINCE
,W1.ZIP
,W1.COUNTRY
,W1.CATS_PROFILE_NAME
FROM WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_1    W1
WHERE ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================
--DELETE INVALID DATE/TIME RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_1
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================

--======================================================================
--HANDLE DUPLICATES:
--======================================================================
--INSERT INTO WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_BAD
--SELECT
-- 21                     --BAD_IMPORTS_NO		--'DUPLICATE'
--,'ACT'                  --BAD_IMPORTS_FILE_TYPE --'ACT'IVITY FILE
--,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME	--TEST:,dbo.getdate()  --,TNM.*
--,W1.*
--FROM
--(	SELECT
--	 [DATETIME]
--	,FF_AGENT_NAME
--	,FF_IDLE_CODE_NAME
--	,FTP_FILE_NAME
--	,ROW_NUMBER() over (partition by [DATETIME], FF_AGENT_NAME, FF_IDLE_CODE_NAME, FTP_FILE_NAME
--                            order by [DATETIME], FF_AGENT_NAME, FF_IDLE_CODE_NAME, FTP_FILE_NAME, LOGGED_IN_TIME DESC) ROWNO
--	FROM YZ_TB_IMPORTS_NWH_INVOICING_1
--) TNM
--LEFT JOIN      YZ_TB_IMPORTS_NWH_INVOICING_1    W1   ON W1.[DATETIME]		 = TNM.[DATETIME]
--													AND W1.FF_AGENT_NAME     = TNM.FF_AGENT_NAME
--													AND W1.FF_IDLE_CODE_NAME = TNM.FF_IDLE_CODE_NAME
--													AND W1.FTP_FILE_NAME	 = TNM.FTP_FILE_NAME
--WHERE TNM.ROWNO > 1

--======================================================================
--DELETE DUPLICATES:
--======================================================================
--DELETE FROM TNM  
--FROM
--(	SELECT
--	 [DATETIME]
--	,FF_AGENT_NAME
--	,FF_IDLE_CODE_NAME
--	,FTP_FILE_NAME
--	,ROW_NUMBER() over (partition by [DATETIME], FF_AGENT_NAME, FF_IDLE_CODE_NAME, FTP_FILE_NAME
--                            order by [DATETIME], FF_AGENT_NAME, FF_IDLE_CODE_NAME, FTP_FILE_NAME, LOGGED_IN_TIME DESC) ROWNO
--	FROM YZ_TB_IMPORTS_NWH_INVOICING_1
--) TNM
--WHERE TNM.ROWNO > 1
--======================================================================

--=============================================================
--	CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=============================================================
--  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 100100
--=============================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''

--Check #1:  ===================================================================================================
	SET @RCD_CNT = (	SELECT COUNT(*) FROM WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_1 )
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + '1) File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #2:  ===================================================================================================
--	SET @RCD_CNT  = (	SELECT COUNT(*) FROM WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_1  
--						WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--					)  
--	IF @RCD_CNT > 0 BEGIN
--		SET @MSG1 = @MSG1 + '2) Invalid DATETIME Intervals in VYNE PATS ACCESS IMPORT File.  Import was Cancelled.  Nothing was Imported.   |   ' 
--		SET @ERR_CNT = @ERR_CNT + 1
--	END
--Check #n:  ===================================================================================================
--	SET @MSG1 = @MSG1 + '2) Something not right with something.  Import was cancelled.  Nothing was Imported.     '
--	--SET @RCD_CNT = (	SELECT COUNT(*)
--	--					FROM WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_1
--	--					WHERE 'something' <> 'somethingelse'
--	--				  )  --If nothing imported in work table, don't need to return error.  That check is done in SSIS currently.

IF @ERR_CNT > 0 BEGIN
	--SSIS reads YZ_TB_ERRORS_FOUND table WHERE TENANT_KEY = 100100, and if record exists, outputs results/error_msg field in an email.
	INSERT INTO YZ_TB_ERRORS_FOUND
	(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'VYNE_PATS_ACCESS' --SUB_GROUP_NAME
	,@MSG1				--ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	INSERT INTO YZ_TB_ERRORS_FOUND
		(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY		--TENANT_KEY
	,'VYNE_PATS_ACCESS'	--SUB_GROUP_NAME
	,''					--ERROR_MSG  --Never make this @MSG1 !!!  Must stay as ''.
	--Do NOT want to got to early exit here because data was good, according to 'checks'!  We want to import data into permanent table.
END


--=============================================
-- INSERT DATA INTO PERMANENT TABLE (UPDATE)
--=============================================
UPDATE WSOL_TB_IMPORTS_VYNE_PATS_ACCESS SET
 FF_OFFICIAL_ACL_FIRST_NAME		= W1.FF_OFFICIAL_ACL_FIRST_NAME
,FF_OFFICIAL_ACL_LAST_NAME		= W1.FF_OFFICIAL_ACL_LAST_NAME
,FF_OFFICIAL_CORPORATE_NAME		= W1.FF_OFFICIAL_CORPORATE_NAME
,FF_AGENT_ID					= W1.FF_AGENT_ID
--,FF_IDENTIFICATION_NUMBER		= W1.FF_IDENTIFICATION_NUMBER
,FF_OVERALL_CATS_STATUS_CODE	= W1.FF_OVERALL_CATS_STATUS_CODE
,FF_PRIMARY_PHONE				= W1.FF_PRIMARY_PHONE
,FF_MOBILE_PHONE				= W1.FF_MOBILE_PHONE
,FF_MOBILE_TERMS				= W1.FF_MOBILE_TERMS
,FF_USERNAME					= W1.FF_USERNAME
,FF_PASSWORD					= W1.FF_PASSWORD
--,FF_PROGRAM						= W1.FF_PROGRAM
,FF_GROUP						= W1.FF_GROUP
--,FF_PATS_ROSTER_NUMBER			= W1.FF_PATS_ROSTER_NUMBER
,FF_TYPE_OF_PREP				= W1.FF_TYPE_OF_PREP
,FF_TRAINER						= W1.FF_TRAINER
,FF_START_DATE					= W1.FF_START_DATE
,FF_END_DATE					= W1.FF_END_DATE
,FF_COMPLETION_STATUS			= W1.FF_COMPLETION_STATUS
,FF_REASON_CODE					= W1.FF_REASON_CODE
,FF_DOB							= W1.FF_DOB
,FF_SSN							= W1.FF_SSN
,FF_PATS_ROSTER_STATUS			= W1.FF_PATS_ROSTER_STATUS
,FF_STREET_ADDRESS				= W1.FF_STREET_ADDRESS
,FF_CITY						= W1.FF_CITY
,FF_STATE_PROVINCE				= W1.FF_STATE_PROVINCE
,FF_ZIP							= W1.FF_ZIP
,FF_COUNTRY						= W1.FF_COUNTRY
,FF_C_NAME						= W1.FF_C_NAME

,SEQNO_ADDED_TIME				= W1.SEQNO_ADDED_TIME
,SEQNO							= W1.SEQNO
,FTP_FILE_NAME					= W1.FTP_FILE_NAME

,[DATETIME]						= W1.[DATETIME]
,STD_TENANT_START_DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE						= W1.CAL_DATE
,TENANT_KEY						= W1.TENANT_KEY

,AGENT_FULL_NAME				= W1.AGENT_FULL_NAME
,CORPORATE_NAME					= W1.CORPORATE_NAME
,AGENT_ID						= W1.AGENT_ID
,ID_NUMBER						= W1.ID_NUMBER
,CATS_STATUS_CODE				= W1.CATS_STATUS_CODE
,PRIMARY_PHONE					= W1.PRIMARY_PHONE
,MOBILE_PHONE					= W1.MOBILE_PHONE
,MOBILE_TERMS					= W1.MOBILE_TERMS
,USERNAME						= W1.USERNAME
,[PASSWORD]						= W1.[PASSWORD]
,[PROGRAM_NAME]					= W1.[PROGRAM_NAME]
,[GROUP]						= W1.[GROUP]
,PATS_ROSTER_NUMBER				= W1.PATS_ROSTER_NUMBER
,TYPE_OF_PREP					= W1.TYPE_OF_PREP
,TRAINER_NAME					= W1.TRAINER_NAME
,[START_DATE]					= W1.[START_DATE]
,[END_DATE]						= W1.[END_DATE]
,COMPLETION_STATUS				= W1.COMPLETION_STATUS
,REASON_CODE					= W1.REASON_CODE
,DOB							= W1.DOB
,LAST_4_SSN						= W1.LAST_4_SSN
,PATS_ROSTER_STATUS				= W1.PATS_ROSTER_STATUS
,STREET_ADDRESS					= W1.STREET_ADDRESS
,CITY							= W1.CITY
,STATE_PROVINCE					= W1.STATE_PROVINCE
,ZIP							= W1.ZIP
,COUNTRY						= W1.COUNTRY
,CATS_PROFILE_NAME				= W1.CATS_PROFILE_NAME
,NICKNAME						= W1.FF_OFFICIAL_ACL_FIRST_NAME + ' ' + LEFT(W1.FF_OFFICIAL_ACL_LAST_NAME,1)
								  + '. - WS Agent Since ' + CONVERT(CHAR(3), W1.[START_DATE], 0) + '. ' + CONVERT(VARCHAR(4),DATEPART(YEAR,W1.[START_DATE]))

--,WS_ROW_CREATED_TIME			= NULL
,WS_ROW_UPDATED_TIME			= @WS_ROW_CREATED_TIME

--  SELECT *
FROM			WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_1	W1

INNER JOIN		WSOL_TB_IMPORTS_VYNE_PATS_ACCESS	G   ON G.FF_IDENTIFICATION_NUMBER	= W1.FF_IDENTIFICATION_NUMBER
													   AND G.FF_PROGRAM					= W1.FF_PROGRAM
													   AND G.FF_PATS_ROSTER_NUMBER		= W1.FF_PATS_ROSTER_NUMBER

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.FF_IDENTIFICATION_NUMBER	= W1.FF_IDENTIFICATION_NUMBER
  AND G.FF_PROGRAM					= W1.FF_PROGRAM
  AND G.FF_PATS_ROSTER_NUMBER		= W1.FF_PATS_ROSTER_NUMBER


--=============================================
-- INSERT DATA INTO PERMANENT TABLE (NEW) 
--=============================================
INSERT INTO WSOL_TB_IMPORTS_VYNE_PATS_ACCESS
(FF_OFFICIAL_ACL_FIRST_NAME
,FF_OFFICIAL_ACL_LAST_NAME
,FF_OFFICIAL_CORPORATE_NAME
,FF_AGENT_ID
,FF_IDENTIFICATION_NUMBER
,FF_OVERALL_CATS_STATUS_CODE
,FF_PRIMARY_PHONE
,FF_MOBILE_PHONE
,FF_MOBILE_TERMS
,FF_USERNAME
,FF_PASSWORD
,FF_PROGRAM
,FF_GROUP
,FF_PATS_ROSTER_NUMBER
,FF_TYPE_OF_PREP
,FF_TRAINER
,FF_START_DATE
,FF_END_DATE
,FF_COMPLETION_STATUS
,FF_REASON_CODE
,FF_DOB
,FF_SSN
,FF_PATS_ROSTER_STATUS
,FF_STREET_ADDRESS
,FF_CITY
,FF_STATE_PROVINCE
,FF_ZIP
,FF_COUNTRY
,FF_C_NAME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AGENT_FULL_NAME
,CORPORATE_NAME
,AGENT_ID
,ID_NUMBER
,CATS_STATUS_CODE
,PRIMARY_PHONE
,MOBILE_PHONE
,MOBILE_TERMS
,USERNAME
,[PASSWORD]
,[PROGRAM_NAME]
,[GROUP]
,PATS_ROSTER_NUMBER
,TYPE_OF_PREP
,TRAINER_NAME
,[START_DATE]
,END_DATE
,COMPLETION_STATUS
,REASON_CODE
,DOB
,LAST_4_SSN
,PATS_ROSTER_STATUS
,STREET_ADDRESS
,CITY
,STATE_PROVINCE
,ZIP
,COUNTRY
,CATS_PROFILE_NAME
,NICKNAME
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W1.FF_OFFICIAL_ACL_FIRST_NAME
,W1.FF_OFFICIAL_ACL_LAST_NAME
,W1.FF_OFFICIAL_CORPORATE_NAME
,W1.FF_AGENT_ID
,W1.FF_IDENTIFICATION_NUMBER
,W1.FF_OVERALL_CATS_STATUS_CODE
,W1.FF_PRIMARY_PHONE
,W1.FF_MOBILE_PHONE
,W1.FF_MOBILE_TERMS
,W1.FF_USERNAME
,W1.FF_PASSWORD
,W1.FF_PROGRAM
,W1.FF_GROUP
,W1.FF_PATS_ROSTER_NUMBER
,W1.FF_TYPE_OF_PREP
,W1.FF_TRAINER
,W1.FF_START_DATE
,W1.FF_END_DATE
,W1.FF_COMPLETION_STATUS
,W1.FF_REASON_CODE
,W1.FF_DOB
,W1.FF_SSN
,W1.FF_PATS_ROSTER_STATUS
,W1.FF_STREET_ADDRESS
,W1.FF_CITY
,W1.FF_STATE_PROVINCE
,W1.FF_ZIP
,W1.FF_COUNTRY
,W1.FF_C_NAME

,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME

,W1.[DATETIME]
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AGENT_FULL_NAME
,W1.CORPORATE_NAME
,W1.AGENT_ID
,W1.ID_NUMBER
,W1.CATS_STATUS_CODE
,W1.PRIMARY_PHONE
,W1.MOBILE_PHONE
,W1.MOBILE_TERMS
,W1.USERNAME
,W1.PASSWORD
,W1.[PROGRAM_NAME]
,W1.[GROUP]
,W1.PATS_ROSTER_NUMBER
,W1.TYPE_OF_PREP
,W1.TRAINER_NAME
,W1.[START_DATE]
,W1.[END_DATE]
,W1.COMPLETION_STATUS
,W1.REASON_CODE
,W1.DOB
,W1.LAST_4_SSN
,W1.PATS_ROSTER_STATUS
,W1.STREET_ADDRESS
,W1.CITY
,W1.STATE_PROVINCE
,W1.ZIP
,W1.COUNTRY
,W1.CATS_PROFILE_NAME
,W1.FF_OFFICIAL_ACL_FIRST_NAME + ' ' + LEFT(W1.FF_OFFICIAL_ACL_LAST_NAME,1)
 + '. - WS Agent Since ' + CONVERT(CHAR(3), W1.[START_DATE], 0) + '. ' + CONVERT(VARCHAR(4),DATEPART(YEAR,W1.[START_DATE]))
,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM		WSOL_TB_IMPORTS_VYNE_PATS_ACCESS_1	W1

LEFT JOIN	WSOL_TB_IMPORTS_VYNE_PATS_ACCESS	G	ON G.FF_IDENTIFICATION_NUMBER	= W1.FF_IDENTIFICATION_NUMBER
												   AND G.FF_PROGRAM					= W1.FF_PROGRAM
												   AND G.FF_PATS_ROSTER_NUMBER		= W1.FF_PATS_ROSTER_NUMBER

WHERE (G.FF_IDENTIFICATION_NUMBER	IS NULL AND ISNULL(W1.FF_IDENTIFICATION_NUMBER	,'') <> '' )
  AND (G.FF_PROGRAM					IS NULL AND ISNULL(W1.FF_PROGRAM				,'') <> '' )
  AND (G.FF_PATS_ROSTER_NUMBER		IS NULL AND ISNULL(W1.FF_PATS_ROSTER_NUMBER		,'') <> '' )

--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_WV_AIA_AGENT_MAPPING_IMPORT]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_WV_AIA_AGENT_MAPPING_IMPORT]
AS
SET NOCOUNT ON  -- EXECUTE [dbo].[uspIMPORTS_WV_AIA_AGENT_MAPPING_IMPORT]

--  DELETE FROM WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_1

--  SELECT * FROM WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_1

--  Data Loading FTP Pathway
--  FTP server   = sftp.workingsol.com
--  FTP Username = WorldVentures
--  FTP Password = Welcome2016!
--  FTP Pathway  = /World_Ventures/AIA_AGENT_MAPPING

--  USES WSOL_TB_IMPORT_ERRORS_FOUND.  NOT TOTALLY INDEPENDANT OF OTHER CLIENTS/TENANTS...

--=================================================================================================
DECLARE
 @TENANT_KEY      INT
,@SUB_GROUP_NAME  VARCHAR(50)
SET @TENANT_KEY		= 900902  --WORLD VENTURES
SET @SUB_GROUP_NAME = 'WORLD_VENTURES_AIA_AGENT_MAPPING'
--===========================================================================================================================================================================================
--WHEN RUNNING MANUALLY DURING TESTING:DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 900902  AND SUB_GROUP_NAME = 'WORLD_VENTURES_AIA_AGENT_MAPPING'
DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = @SUB_GROUP_NAME  --'WORLD_VENTURES_AIA_AGENT_MAPPING'    --  SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 900902
--===========================================================================================================================================================================================
--WHEN RUNNING MANUALLY DURING TESTING:DELETE FROM WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_ERRORS WHERE TENANT_KEY = 900900  AND IMPORT_SUB_GROUP_NAME = 'WESTERN_DENTAL_AIA_AGENT_MAPPING'
DELETE FROM WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_ERRORS
WHERE IMPORT_SUB_GROUP_NAME = @SUB_GROUP_NAME  --'WORLD_VENTURES_AIA_AGENT_MAPPING' --SELECT * FROM WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_ERRORS WHERE TENANT_KEY = 900902
--===========================================================================================================================================================================================
UPDATE WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_1 SET
 INVOICE_MAP_KEY	= RTRIM(LTRIM(REPLACE(ISNULL(INVOICE_MAP_KEY,''),' ',' ')))
,FF_EMAIL_MAP_KEY	= RTRIM(LTRIM(REPLACE(ISNULL(FF_EMAIL_MAP_KEY,''),' ',' ')))    
,FF_EMAIL_ADDRESS	= RTRIM(LTRIM(REPLACE(ISNULL(FF_EMAIL_ADDRESS,''),' ',' ')))
,FF_INVOICE_GROUP	= RTRIM(LTRIM(REPLACE(ISNULL(FF_INVOICE_GROUP,''),' ',' ')))
,FF_PAY_GROUP		= RTRIM(LTRIM(REPLACE(ISNULL(FF_PAY_GROUP,''),' ',' ')))
						  
--  SELECT * FROM WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_ERRORS
--======================================================================
--PROCESS DUPLICATES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_ERRORS
SELECT
 W1.RESOURCE_NAME
,W1.INVOICE_MAP_KEY
,w1.FF_EMAIL_MAP_KEY
,W1.FF_EMAIL_ADDRESS
,W1.FF_INVOICE_GROUP
,W1.FF_PAY_GROUP
,W1.FTP_FILE_NAME
,dbo.getdate()																		--WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'WORLD_VENTURES_AIA_AGENT_MAPPING'							--IMPORT_SUB_GROUP_NAME
,'DUP'																			--ERROR_TAG
,'The World Ventures Agent ID exists more than once in the agent mapping file.'	--ERROR_MSG
--  SELECT *  
FROM WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_1  W1
INNER JOIN
(	SELECT
	 INVOICE_MAP_KEY
	,ROW_NUMBER() over (partition by INVOICE_MAP_KEY
                            order by INVOICE_MAP_KEY) ROWNO
	FROM WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_1
) TNM  ON TNM.INVOICE_MAP_KEY = W1.INVOICE_MAP_KEY

LEFT OUTER JOIN WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_ERRORS AME   ON AME.INVOICE_MAP_KEY = W1.INVOICE_MAP_KEY

WHERE TNM.ROWNO > 1   

  AND ISNULL(AME.ERROR_TAG,'') = ''

--===============================================
--CHECK FOR BAD DATA FOUND IN IMPORT .CSV FILES:
--===============================================
--WHEN RUNNING MANUALLY DURING TESTING:INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND SELECT 900902,'WORLD_VENTURES_AIA_AGENT_MAPPING',''              
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--SQL won't insert special characters!!!  + CHAR(9)  --CHAR(10) + CHAR(13)
--Check #1:  ===================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_1)
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + '1) File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	--SSIS reads WSOL_TB_IMPORT_ERRORS_FOUND table where TENANT_KEY = 900900, and if record exists, outputs results/error_msg field in an email.
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	SELECT 
	 @TENANT_KEY											--TENANT_KEY
	,@SUB_GROUP_NAME  --'WESTERN_DENTAL_AIA_AGENT_MAPPING'	--SUB_GROUP_NAME
	,@MSG1													--ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	--=============================================
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	SELECT 
	 @TENANT_KEY											--TENANT_KEY
	,@SUB_GROUP_NAME  --'WESTERN_DENTAL_AIA_AGENT_MAPPING'	--SUB_GROUP_NAME
	,''														--ERROR_MSG			--NEVER SET THIS TO @MSG1 !!!  MUST BE ''.
END

--======================================================================
--PROCESS BAD INVOICE GROUP VALUES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_ERRORS
SELECT
 W1.RESOURCE_NAME
,W1.INVOICE_MAP_KEY
,W1.FF_EMAIL_MAP_KEY
,W1.FF_EMAIL_ADDRESS
,W1.FF_INVOICE_GROUP
,W1.FF_PAY_GROUP
,W1.FTP_FILE_NAME
,dbo.getdate()																	--WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'WORLD_VENTURES_AIA_AGENT_MAPPING'						--IMPORT_SUB_GROUP_NAME
,'IIG'																		--ERROR_TAG --INVALID INVOICE GROUP
,'The RESOURCE identifier found in the AIA Agent Mapping file is invalid.'	--ERROR_MSG
--  SELECT *  
FROM            WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_1			W1

LEFT JOIN       WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_ERRORS		AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
WHERE ISNULL(W1.FF_INVOICE_GROUP,'') NOT IN ('','Resource','Nesting','Spanish')

  AND ISNULL(AME.ERROR_TAG,'') = ''

--======================================================================
--PROCESS MISSING INVOICE MAP KEY VALUES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_ERRORS
SELECT
 W1.RESOURCE_NAME
,W1.INVOICE_MAP_KEY
,W1.FF_EMAIL_MAP_KEY
,W1.FF_EMAIL_ADDRESS
,W1.FF_INVOICE_GROUP
,W1.FF_PAY_GROUP
,W1.FTP_FILE_NAME
,dbo.getdate()														--WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'WORLD_VENTURES_AIA_AGENT_MAPPING'				--IMPORT_SUB_GROUP_NAME
,'MAP'																--ERROR_TAG
,'The INVOICE MAP KEY is missing in the AIA Agent Mapping file.'	--ERROR_MSG
--  SELECT *  
FROM            WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_1			W1

LEFT JOIN       WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_ERRORS		AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
WHERE ISNULL(W1.INVOICE_MAP_KEY,'') = ''  -- CURRENTLY SET TO CISCO AGENT ID

  AND ISNULL(AME.ERROR_TAG,'') = ''

--======================================================================
--PROCESS MISSING EMAIL MAP KEY VALUES:
--======================================================================
INSERT INTO WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_ERRORS
SELECT
 W1.RESOURCE_NAME
,W1.INVOICE_MAP_KEY
,W1.FF_EMAIL_MAP_KEY
,W1.FF_EMAIL_ADDRESS
,W1.FF_INVOICE_GROUP
,W1.FF_PAY_GROUP
,W1.FTP_FILE_NAME
,dbo.getdate()													--WS_ROW_CREATED_TIME
,@SUB_GROUP_NAME  --,'WORLD_VENTURES_AIA_AGENT_MAPPING'			--IMPORT_SUB_GROUP_NAME
,'EMP'															--ERROR_TAG
,'The EMAIL MAP KEY is missing in the AIA Agent Mapping file.'	--ERROR_MSG
--  SELECT *  
FROM            WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_1			W1

LEFT JOIN       WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_ERRORS		AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
WHERE ISNULL(W1.FF_EMAIL_MAP_KEY,'') = ''  

  AND ISNULL(AME.ERROR_TAG,'') = ''

-- SELECT * FROM WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING ORDER BY RESOURCE_NAME
--!!! UPDATING """PERMANENT""" TABLE HERE: !!!
--=======================================================================================================
--UPDATE PERMANENT TABLE WITH WORK TABLE DATA WHERE TENANT_KEY AND INVOICE_MAP_KEY FIELDS/VALUES MATCH:
--=======================================================================================================
UPDATE WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING SET
 RESOURCE_NAME			= W1.RESOURCE_NAME
,INVOICE_MAP_KEY		= W1.INVOICE_MAP_KEY
,EMAIL_MAP_KEY			= W1.FF_EMAIL_MAP_KEY
,[EMAIL]				= W1.FF_EMAIL_ADDRESS
,INVOICE_GROUP			= W1.FF_INVOICE_GROUP
,PAY_GROUP				= W1.FF_PAY_GROUP
,FTP_FILE_NAME			= W1.FTP_FILE_NAME
--,WS_ROW_CREATED_TIME
,CST_ROW_UPDATED_TIME	= dbo.getdate()
--  SELECT *
FROM            WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_1			W1
--INNER JOIN MUST BE HERE.  NEVER CHANGE!
INNER JOIN      WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING			G     ON G.INVOICE_MAP_KEY        = W1.INVOICE_MAP_KEY
LEFT JOIN       WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_ERRORS		AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY
--Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE ISNULL(AME.ERROR_TAG,'') = ''
  AND (   ( G.RESOURCE_NAME		<> W1.RESOURCE_NAME )
	   OR ( G.EMAIL_MAP_KEY		<> W1.FF_EMAIL_MAP_KEY )
	   OR ( G.[EMAIL]			<> W1.FF_EMAIL_ADDRESS )
	   --OR ( G.INVOICE_MAP_KEY	<> W1.INVOICE_MAP_KEY )
	   OR ( G.INVOICE_GROUP		<> W1.FF_INVOICE_GROUP )
	   OR ( G.PAY_GROUP			<> W1.FF_PAY_GROUP )
	  )

--  SELECT * FROM WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING
--!!! INSERTING INTO """PERMANENT""" TABLE HERE: !!!
--========================================================
--INSERT "NEW" DATA FROM WORK TABLE INTO PERMANENT TABLE: 
--========================================================
INSERT INTO WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING
SELECT
 W1.RESOURCE_NAME  
,W1.INVOICE_MAP_KEY
,W1.FF_EMAIL_MAP_KEY
,W1.FF_EMAIL_ADDRESS
,W1.FF_INVOICE_GROUP
,W1.FF_PAY_GROUP
,W1.FTP_FILE_NAME
,dbo.getdate()        --WS_ROW_CREATED_TIME
,NULL             --WS_ROW_UPDATED_TIME

FROM            WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_1			W1
LEFT JOIN       WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING			G     ON G.INVOICE_MAP_KEY        = W1.INVOICE_MAP_KEY
LEFT JOIN       WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_ERRORS		AME   ON AME.INVOICE_MAP_KEY      = W1.INVOICE_MAP_KEY

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:
WHERE ( G.INVOICE_MAP_KEY IS NULL AND ISNULL(W1.INVOICE_MAP_KEY,'') <> '' )

  AND ISNULL(AME.ERROR_TAG,'') = ''

--  SELECT * FROM WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING    ORDER BY INVOICE_MAP_KEY 

--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_WV_AIA_AGENT_MAPPING_IMPORT_STATUS]...';


GO
CREATE PROCEDURE [dbo].[uspIMPORTS_WV_AIA_AGENT_MAPPING_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--	PURPOSE:  SHOW WHAT PROBLEMS THE RECENTLY IMPORTED AIA AGENT MAPPING FILE HAD DURING THE IMPORT/CLEANUP PROCESS.
--	THIS USP IS DATA SOURCE FOR SSRS GRID ON "AIA AGENT MAPPING" IMPORTS STATUS REPORT!!!

--  EXECUTE [dbo].[uspIMPORTS_WV_AIA_AGENT_MAPPING_IMPORT_STATUS] '06/01/2017','06/08/2017','','B'

--  SELECT * FROM WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_ERRORS
--  SELECT * FROM YZ_TB_ERRORS_FOUND

--===================================================================================================================================================
DECLARE 
 @TENANT_KEY      INT
,@SUB_GROUP_NAME  VARCHAR(50)
SET @TENANT_KEY     = 900902
SET @SUB_GROUP_NAME = 'WORLD_VENTURES_AIA_AGENT_MAPPING'

--===================================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--===================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME

IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
			--Dates passed in are for previous day:
	IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
	END
	ELSE IF DAY(dbo.getdate()) = 1 BEGIN
		IF MONTH(dbo.getdate()) = 1 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
	END
	ELSE BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
	END
	
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

END

ELSE BEGIN  --DAILY - Run report for YESTERDAY, 1 Day Only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- @DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
END

SET @DTM_END = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--===========================================================================================================
-- CREATE TEMP TABLE
--===========================================================================================================

IF OBJECT_ID('TEMPDB..#IMPORTS_WV_AIA_AGENT_MAPPING_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_WV_AIA_AGENT_MAPPING_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_WV_AIA_AGENT_MAPPING_IMPORT_STATUS
(	[RESOURCE_NAME] [varchar](100) NULL,
	[INVOICE_MAP_KEY] [varchar](50) NOT NULL,
	[EMAIL_MAP_KEY] [varchar](50) NULL,
	[EMAIL] [varchar](100) NULL,
	[INVOICE_GROUP] [varchar](50) NOT NULL,
	[PAY_GROUP] [varchar] (50) NULL,
	[FTP_FILE_NAME] [varchar](100) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[IMPORT_SUB_GROUP_NAME] [varchar](100) NULL,
	[ERROR_TAG] [varchar](50) NULL,
	[ERROR_MSG] [varchar](2500) NULL
)
INSERT INTO #IMPORTS_WV_AIA_AGENT_MAPPING_IMPORT_STATUS
SELECT
 RESOURCE_NAME
,INVOICE_MAP_KEY
,EMAIL_MAP_KEY
,[EMAIL]
,INVOICE_GROUP
,PAY_GROUP
--,FTP_FILE_NAME
,REPLACE(FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME
,WS_ROW_CREATED_TIME
,IMPORT_SUB_GROUP_NAME
,ERROR_TAG
,ERROR_MSG

-- SELECT *
FROM WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING_ERRORS		I   

--=================================================================================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_WV_AIA_AGENT_MAPPING_IMPORT_STATUS)
--=================================================================================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
--=================================================================================================
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_WV_AIA_AGENT_MAPPING_IMPORT_STATUS
	SELECT
	 ''				--RESOURCE_NAME
	,''				--INVOICE_MAP_KEY
	,''				--EMAIL_MAP_KEY
	,''				--[EMAIL]
	,''				--INVOICE_GROUP
	,''				--PAY_GROUP
	,''				--FTP_FILE_NAME
	,DBO.GETDATE()	--WS_ROW_CREATED_TIME
	,''				--IMPORT_SUB_GROUP_NAME
	,''				--ERROR_TAG
	,''				--ERROR_MSG
END 

--====================================================================================================================================================================================================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''

IF @RCD_CNT = 0 BEGIN  --IF @RCD_CNT = 0 HERE,IT ACTUALLY EQUALS THE ONE INSERTED STATING 'No Prolems.' IN ERROR_MSG.
	SET @MSG1 = @MSG1 + 'There were NO World Ventures AIA Agent Mapping Import ERRORS found.'
END

ELSE BEGIN

IF @RPT_TYPE = 'B' BEGIN

	IF DAY(DBO.GETDATE()) = 16 OR DAY(DBO.GETDATE()) = 1 BEGIN
		SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
	END

	SET @MSG1 = @MSG1 + 'The list below contains errors found during the process of importing the World Ventures AIA Agent Mapping .csv file. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	SET @MSG1 = @MSG1 + 'Project Management will need to add, remove, or update agent information in their World Ventures AIA Agent Mapping .csv document '
	SET @MSG1 = @MSG1 + 'and upload the updated file to the SFTP directory in order for these agents to be invoiced through the Agent Invoice Automation system. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)
	END
END
--====================================================================================================================================================================================================================

DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),DBO.GETDATE(),101) + ' 10:30:00' AS DATETIME)
IF DBO.GETDATE() >  @TODAY_1030 AND DBO.GETDATE() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If DBO.GETDATE() after 10:30AM and before 11:00AM, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)

	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM YZ_TB_ERRORS_FOUND 
							   WHERE TENANT_KEY = @TENANT_KEY AND SUB_GROUP_NAME = @SUB_GROUP_NAME )
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'	--WSOL DANGER RED

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some problems were encountered during the World Ventures AIA Agent Mapping import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'And any in list below.'
	END
END


--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_WV_AIA_AGENT_MAPPING_IMPORT_STATUS 

ORDER BY
 INVOICE_MAP_KEY

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_WV_AIA_AGENT_MAPPING_MISSING_AGENTS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_WV_AIA_AGENT_MAPPING_MISSING_AGENTS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHICH INVOICE_MAP_KEY VALUES EXIST IN THE ACTIVITY FILES, BUT NOT IN THE AIA_AGENT_MAPPING .CSV FILES.
--          NO MATCHES BETWEEN ACTIVITY AND AGENT MAPPING.  WHEN NO MATCHES, THEN NO 'SCHEDULER' INVOICING.
--THIS USP IS DATA SOURCE FOR SRS GRID ON "ACTIVITY IMPORTS" STATUS REPORT!!!

--EXECUTE [dbo].[uspIMPORTS_WV_AIA_AGENT_MAPPING_MISSING_AGENTS] '11/01/2016','11/15/2016','','B'

--========================================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--========================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME

IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.


--===================================================================================================
--CREATE AND POPULATE TMP TABLE
--===================================================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_WV_AIA_AGENT_MAPPING_MISSING_AGENTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_WV_AIA_AGENT_MAPPING_MISSING_AGENTS
END
CREATE TABLE #IMPORTS_WV_AIA_AGENT_MAPPING_MISSING_AGENTS
(FILEDATETIME          VARCHAR(50)
,FTP_FILE_NAME         VARCHAR(100)
,WS_ROW_CREATED_TIME   DATETIME
,INVOICE_MAP_KEY       VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,RCD_CNT               INT
)
INSERT INTO #IMPORTS_WV_AIA_AGENT_MAPPING_MISSING_AGENTS
SELECT
 DT.CAL_DATE_STRING					AS FILEDATETIME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME
,I.WS_ROW_CREATED_TIME
,I.FF_AGENT_NAME					AS INVOICE_MAP_KEY
,I.RESOURCE_NAME					AS RESOURCE_NAME
,COUNT(*)							AS RCD_CNT
--SELECT *
FROM            WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING	I   
LEFT JOIN       WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING	IAM  ON IAM.INVOICE_MAP_KEY     = I.FF_AGENT_NAME
INNER JOIN      DATE_TIME								DT   ON DT.DATE_TIME_KEY        = I.STD_TENANT_START_DATE_TIME_KEY
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND ISNULL(IAM.INVOICE_MAP_KEY,'') = ''
  AND ISNULL(I.FF_AGENT_NAME,'') NOT IN ('Mullins, Ed','Man, Edwin','Strater, Kasandra') -- EXCLUDE EDUCATION LEADERS
GROUP BY
 DT.CAL_DATE_STRING
,REPLACE(I.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME
,I.WS_ROW_CREATED_TIME
,I.FF_AGENT_NAME					--AS INVOICE_MAP_KEY
,I.RESOURCE_NAME					--AS RESOURCE_NAME

--==================================
UPDATE #IMPORTS_WV_AIA_AGENT_MAPPING_MISSING_AGENTS SET
 FILEDATETIME = REPLACE(CONVERT(VARCHAR(10),ISNULL(FILEDATETIME,'1/1/1900'),102),'/',' . ')

--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_WV_AIA_AGENT_MAPPING_MISSING_AGENTS)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_WV_AIA_AGENT_MAPPING_MISSING_AGENTS
	SELECT
	 ''			--DT.CAL_DATE_STRING
	,''			--I.FTP_FILE_NAME
	,dbo.getdate()  --I.WS_ROW_CREATED_TIME
	,''			--I.FF_AGENT_ID   AS INVOICE_MAP_KEY
	,''			--I.FF_AGENT_NAME AS RESOURCE_NAME
	,0			--COUNT(*)  --AS RCD_CNT    --  SELECT *   --  SELECT TOP 100 *
END
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RCD_CNT = 0 
	BEGIN  --@RCD_CNT WILL BE 0 STILL, EVEN THOUGH ONE BLANK RECORD WAS ADDED...
		SET @MSG1 = @MSG1 + 'There are NO Missing AIA Agent Mappings.'
	END
ELSE
	BEGIN
		IF @RPT_TYPE = 'B'
			BEGIN
				SET @MSG1 = ''
	
				IF @RCD_CNT = 0
					BEGIN
						SET @MSG1 = @MSG1 + 'There are NO missing AIA agent mappings!'
					END
				ELSE
					BEGIN
						IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1
							BEGIN
								SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
							END
		
								SET @MSG1 = @MSG1 + 'The list below contains Invoice Map Key values for agents that are associated with activity for the report date range, but ' + CHAR(10) + CHAR(13)
								SET @MSG1 = @MSG1 + 'who have not been added to or have incorrect values in the AIA Agent Mapping File. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

								SET @MSG1 = @MSG1 + 'Agents who are on this list will not be invoiced (for activity dates shown), unless a special request is made and received '
								SET @MSG1 = @MSG1 + 'with plenty of time before the automated invoice process begins.  The analyst will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

								SET @MSG1 = @MSG1 + 'Also, Project Management may need to add or update agent information in their AIA Agent Mapping CSV file and upload it '
								SET @MSG1 = @MSG1 + 'to the appropriate FTP directory before the Analyst can correctly update agent data. ' + CHAR(13) + CHAR(10)
					END

			END
	END

--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_WV_AIA_AGENT_MAPPING_MISSING_AGENTS 

ORDER BY
 INVOICE_MAP_KEY
,FTP_FILE_NAME

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_WV_AIA_XML]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_WV_AIA_XML]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300)
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='DY'  DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'-Manual - when users run report - what SRS reports are defaulted to.  MAN means use date range that user specified.  The exception is when a report is defined with PTD/YTD and MTD rows in it.
                                  --         'SUB'-Subscription - what SRS subscriptions are defaulted to.  SUB means set date range @vars based on @TIME_INTERVAL. (since date range in SRS Subscription can't be set correctly)
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='AIA'-Agent Invoice Automation - what Sergey uses for/in Scheduler...
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='XML'-AIA RPT (DETAIL) (XML FILE/EXPORT),
AS
SET NOCOUNT ON

SET @TENANT_KEY = 900902  --WORLD VENTURES

--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)  
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 0,101) AS DATETIME)  
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) + 1
END

--IF @EXECUTIONER = 'MAN', DON'T CHANGE DATES -- THE REPORT IS BEING RAN MANUALLY, AND THE DATE RANGE WANTED BY THE USER IS BEING SET MANUALLY.

IF @EXECUTIONER = 'NEW' BEGIN -- NEW BI-MONTHLY PAYMENT CYCLE 1ST AND 16TH OF EACH MONTH
	IF @TIME_INTERVAL = 'W14' BEGIN
		IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate() - 1)) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
			END
		END		
		ELSE IF DAY(dbo.getdate()) = 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) < 16 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
		ELSE BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())))
		END
	END
END

--=========================================================================================
--FORMAT 'MULTIPLES' "IN THAT" VALUES:  (Referring to CHARINDEX(search for this, in that))
--=========================================================================================
SET @ID_EXT          = ',' + LTRIM(RTRIM(@ID_EXT)) + ','
SET @SCHEDULER_GROUP = ',' + LTRIM(RTRIM(@SCHEDULER_GROUP)) + ','
 

--==================================
--SET AMOUNT TO DIVIDE BY:
--==================================
DECLARE @DS DECIMAL(10,2)  --INT  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.0       --DIVIDE SECONDS BY 1 TO GET SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
	SET @DS = 60.0		--DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
	SET @DS = 3600.0	--DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
IF @RPT_TYPE_GRP = 'AIA' BEGIN

	--POPULATES XML REPORT.  SRS SUBSCRIPTION EXPORTS TO XML.  SSIS RENAMES AND MOVES XML FILE TO FTP.  SERGEY PICKS UP FILE
	
	IF @RPT_TYPE = 'XML' BEGIN  --AIA REPORT  --EXACTLY WHAT IS IN XML FILE AND/OR AIA TABLE.
		--==================================		--CREATE TMP TABLE:
		IF OBJECT_ID('TEMPDB..#IMPORTS_WV_AIA_XML') IS NOT NULL BEGIN
		   DROP TABLE #IMPORTS_WV_AIA_XML
		END
		CREATE TABLE #IMPORTS_WV_AIA_XML
		([PLATFORM]                   VARCHAR(50)
		,[STATUS]                     VARCHAR(50) 
		,INVOICE_MAP_KEY              VARCHAR(50) 
		,FIELD_NAME                   VARCHAR(50) 
		,SCHEDULER_PROJECT_ID         VARCHAR(50) 
		,SCHEDULER_ACL_NAME           VARCHAR(50) 
		,ACD_ID_EXTENSION             VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_ID      VARCHAR(50) 
		,OFFICIAL_WSOL_CLIENT_NAME    VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_ID       VARCHAR(50) 
		,OFFICIAL_ACD_CLIENT_NAME     VARCHAR(50) 
		,PRIMARY_PROJECT_MANAGER_ID   VARCHAR(500) 
		,DIRECTOR_OF_PROJECT_MANAGEMENT_ID VARCHAR(500) 
		,AGENT_TECHNOLOGY_MANAGER_ID  VARCHAR(500) 
		,CONTRACTOR_SUPPORT_PATHWAY   VARCHAR(500) 
		,INVOICE_SYSTEM_ID            VARCHAR(50) 
		,HOLIDAY_INVOICE_ID           VARCHAR(50) 
		,HOLIDAY                      VARCHAR(50) 
		,FILE_FORMAT_OF_PUSH          VARCHAR(50) 
		,AGENT_PREPARATION_INVOICE_ID VARCHAR(50) 
		,NEW_ACL                      VARCHAR(50) 
		,CURRENT_CATS                 VARCHAR(50) 
		,CATS_ID                      VARCHAR(50) 
		,PATS_ID                      VARCHAR(50) 
		,SMART_ELIGIBLE               VARCHAR(50) 
		,SMART_TIER_1                 VARCHAR(50) 
		,SMART_TIER_2                 VARCHAR(50) 
		,SMART_TIER_3                 VARCHAR(50) 
		,INTERVAL                     VARCHAR(50) 
		,DATE                         VARCHAR(50) 
		,HOD_INTERVAL                 VARCHAR(50) 
		,AU_DK_LOGGED_IN_DURATION     DECIMAL(10,2)  --INT 
		,AU_DK_AVAILABLE_DURATION     DECIMAL(10,2)  --INT 
		,AU_DK_TALK_DURATION          DECIMAL(10,2)  --INT 
		,AU_DK_IB_TALK_DURATION       DECIMAL(10,2)  --INT 
		,AU_DK_OB_TALK_DURATION       DECIMAL(10,2)  --INT 
		,AU_DK_CONVENTIONAL_ACW       DECIMAL(10,2)  --INT 
		,AU_DK_NR_DURATION            DECIMAL(10,2)  --INT 
		,AU_DK_PSEUDO_PRODUCTIVE_DURATION   DECIMAL(10,2)  --INT 
		,AU_DK_ADJUSTED_NR_DURATION         DECIMAL(10,2)  --INT 
		,AU_DK_TOTAL_PRODUCTIVE_DURATION    DECIMAL(10,2)  --INT 
		,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS DECIMAL(10,2)  --INT 
		,AU_DK_XFER_COUNT             INT 
		,AU_DK_HOLD_COUNT             INT 
		,AU_DK_CONFERENCE_COUNT       INT 
		,AU_DK_CONSULT_COUNT          INT 
		,AU_DK_PUP_COUNT              INT 
		,AU_DK_OFFERED_COUNT          INT 
		,AU_DK_HANDLED_COUNT          INT 
		,AU_DK_IB_HANDLE_COUNT        INT 
		,AU_DK_OB_HANDLE_COUNT        INT 
		,AU_DK_RONA_COUNT             INT 
		,AU_DK_AWR_COUNT              INT 
		,MINIMUM_GUARANTEE            DECIMAL(10,2) 
		,AUTHORIZED_TO_INVOICE        DECIMAL(10,2) 
		,WEEK_ENDING_DATE             VARCHAR(50) 
		,PAY_CYCLE_CLOSURE_DATE       VARCHAR(50) 
		,CAL_DATE                     DATETIME
		,TENANT_KEY                   INT 
		,INVOICE_ID                   VARCHAR(50) 
		,CST_ROW_CREATED_TIME         DATETIME
		)
		--==================================		
		-- INSERT INTO TEMP TABLE
		--==================================
		INSERT INTO #IMPORTS_WV_AIA_XML
		SELECT --AIA.*
		 AIA.[PLATFORM]
		,AIA.[STATUS]                       
		,AIA.INVOICE_MAP_KEY              
		,AIA.FIELD_NAME                   
		,AIA.SCHEDULER_PROJECT_ID         
		,AIA.SCHEDULER_ACL_NAME           
		,AIA.ACD_ID_EXTENSION             
		,AIA.OFFICIAL_WSOL_CLIENT_ID      
		,AIA.OFFICIAL_WSOL_CLIENT_NAME    
		,AIA.OFFICIAL_ACD_CLIENT_ID       
		,AIA.OFFICIAL_ACD_CLIENT_NAME     
		,AIA.PRIMARY_PROJECT_MANAGER_ID   
		,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID 
		,AIA.AGENT_TECHNOLOGY_MANAGER_ID  
		,AIA.CONTRACTOR_SUPPORT_PATHWAY   
		,AIA.INVOICE_SYSTEM_ID            
		,AIA.HOLIDAY_INVOICE_ID           
		,AIA.HOLIDAY                      
		,AIA.FILE_FORMAT_OF_PUSH          
		,AIA.AGENT_PREPARATION_INVOICE_ID 
		,AIA.NEW_ACL                      
		,AIA.CURRENT_CATS                 
		,AIA.CATS_ID                      
		,AIA.PATS_ID                      
		,AIA.SMART_ELIGIBLE               
		,AIA.SMART_TIER_1                 
		,AIA.SMART_TIER_2                 
		,AIA.SMART_TIER_3                 
		,AIA.INTERVAL                     
		,AIA.DATE                         
		,AIA.HOD_INTERVAL                 
		,CAST( ( 1.0 * (AIA.AU_DK_LOGGED_IN_DURATION) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_LOGGED_IN_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_AVAILABLE_DURATION) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_AVAILABLE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_TALK_DURATION) )      / @DS AS DECIMAL(10,2)) --AS AU_DK_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_IB_TALK_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_IB_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_OB_TALK_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_OB_TALK_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_CONVENTIONAL_ACW) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_CONVENTIONAL_ACW
		,CAST( ( 1.0 * (AIA.AU_DK_NR_DURATION) )        / @DS AS DECIMAL(10,2)) --AS AU_DK_NR_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION) )   / @DS AS DECIMAL(10,2)) --AS AU_DK_PSEUDO_PRODUCTIVE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_ADJUSTED_NR_DURATION) )         / @DS AS DECIMAL(10,2)) --AS AU_DK_ADJUSTED_NR_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION) )    / @DS AS DECIMAL(10,2)) --AS AU_DK_TOTAL_PRODUCTIVE_DURATION
		,CAST( ( 1.0 * (AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS) ) / @DS AS DECIMAL(10,2)) --AS AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
		,(AIA.AU_DK_XFER_COUNT)         --AS AU_DK_XFER_COUNT
		,(AIA.AU_DK_HOLD_COUNT)         --AS AU_DK_HOLD_COUNT
		,(AIA.AU_DK_CONFERENCE_COUNT)   --AS AU_DK_CONFERENCE_COUNT
		,(AIA.AU_DK_CONSULT_COUNT)      --AS AU_DK_CONSULT_COUNT
		,(AIA.AU_DK_PUP_COUNT)          --AS AU_DK_PUP_COUNT
		,(AIA.AU_DK_OFFERED_COUNT)      --AS AU_DK_OFFERED_COUNT
		,(AIA.AU_DK_HANDLED_COUNT)      --AS AU_DK_HANDLED_COUNT
		,(AIA.AU_DK_IB_HANDLE_COUNT)    --AS AU_DK_IB_HANDLE_COUNT
		,(AIA.AU_DK_OB_HANDLE_COUNT)    --AS AU_DK_OB_HANDLE_COUNT
		,(AIA.AU_DK_RONA_COUNT)         --AS AU_DK_RONA_COUNT
		,(AIA.AU_DK_AWR_COUNT)          --AS AU_DK_AWR_COUNT
		,CAST( ( 1.0 * (AIA.MINIMUM_GUARANTEE) )     / @DS AS DECIMAL(10,2)) --AS MINIMUM_GUARANTEE
		,CAST( ( 1.0 * (AIA.AUTHORIZED_TO_INVOICE) ) / @DS AS DECIMAL(10,2)) --AS AUTHORIZED_TO_INVOICE
		,AIA.WEEK_ENDING_DATE             
		,AIA.PAY_CYCLE_CLOSURE_DATE       
		,AIA.CAL_DATE                     
		,AIA.TENANT_KEY                   
		,AIA.INVOICE_ID                   
		,AIA.WS_ROW_CREATED_TIME         

		--  SELECT *
		FROM            WSOL_TB_IMPORTS_WV_UV_ANT_AIA	AIA
		INNER JOIN      DATE_TIME						DT		ON DT.DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
		
		WHERE ( DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END )
		  AND AIA.STATUS = 'Active'
		  AND ( (ISNULL(AIA.READY_FOR_XML,'') = 'Y')	--<----Maintain this field, and the AIA will populate the XML correctly every time!!!!!!!!!
				OR (@ID_EXT = 'Y') )					--<----In Test Mode (ignore what ready_for_xml is set to).
		  AND ( ISNULL(AIA.INVOICE_ID,'') <> '' )		--<----INSURANCE, IN CASE BLANK ID EXTENSION SLIPS THROUGH
--		  AND ( ISNULL(AIA.RESOURCE_NAME,'') <> '')		--<----INSURANCE, FILTER OUT THOSE NOT IN AIA AGENT MAPPING SINCE INVOICE_ID IS JUST FF_USER_NAME FROM IMPORT FILE

		ORDER BY 
		 AIA.OFFICIAL_ACD_CLIENT_NAME
		--,AIA.SCHEDULER_ACL_NAME
		,AIA.INVOICE_ID

		,AIA.ACD_ID_EXTENSION     
		,AIA.INVOICE_MAP_KEY
		,AIA.DATE
		,AIA.HOD_INTERVAL


		--==================================!!!--INSERT RECORD FOR REPORT SO SSIS KNOWS DATE OF DATA IN DATASET:
		--Have to include 'D??' or 'W??' because SRS Subscriptions are being ran at about same time in one sql job step.
		--  If one subscription takes longer than the other, the wrong date will get used/pulled from the YZ_TB_FILENAMES_FOR_SSIS in the ssis. and so on.
		IF CHARINDEX('D',@TIME_INTERVAL) > 0 BEGIN
			INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
			(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
			SELECT  --FOR THE .XML FILES FOR EACH DATE:
			 'iNetAIA_' + LTRIM(RTRIM(@TIME_INTERVAL))  --'iNetAIA_D09' for internal wsinet tenants 9 days from current date.  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.getdate()  --CST_ROW_CREATED_TIME
		END
		ELSE BEGIN  --'W' MEANING NEED TO PASS/POPULATE WITH DATE RANGE, LIKE 'MMDDYY_MMDDYY'. -- FOR GAR AND NW.
			INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
						(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
			SELECT  --FOR GETAROOM AND NINE_WEST:    --old:-- 'AGENT_INVOICE_AIA_XML'  --SQL_JOB_NAME 
			 'iNetAIA_' + LTRIM(RTRIM(@TIME_INTERVAL)) + '_' + REPLACE(LTRIM(RTRIM(CAST(@TENANT_KEY AS VARCHAR(10)))),',','')  --'iNetAIA_W14_900595' for GAR  --SQL_JOB_NAME
			,REPLACE(CONVERT(VARCHAR(10),@DTM_BEG,1),'/','') + '_' + REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,1),'/','')  --INCLUDE FOR INTRADAY REPORTS:  + '_' + REPLACE(CONVERT(VARCHAR(10),dbo.getdate(),108),':','') --+ '.xls'  --FILENM
			,dbo.getdate()  --CST_ROW_CREATED_TIME
		END
		--  SELECT * FROM WSOL_TB_FILENAMES_FOR_SSIS ORDER BY CST_ROW_CREATED_TIME DESC

		--==================================!!!--RETURN DATASET TO REPORT:
		SELECT *
		FROM #IMPORTS_WV_AIA_XML
		ORDER BY 
		 OFFICIAL_ACD_CLIENT_NAME
		--,SCHEDULER_ACL_NAME
		,INVOICE_ID

		,ACD_ID_EXTENSION     
		,INVOICE_MAP_KEY
		,DATE
		,HOD_INTERVAL
	END  --AIA_XML



END  --IF @RPT_TYPE_GRP = 'AIA'


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
--==================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_WV_EMAIL_RESOLVED_WEEKLY_AGENT_MAPPING_MISSING_AGENTS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_WV_EMAIL_RESOLVED_WEEKLY_AGENT_MAPPING_MISSING_AGENTS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHICH INVOICE_MAP_KEY VALUES EXIST IN THE ACTIVITY FILES, BUT NOT IN THE AIA_AGENT_MAPPING .CSV FILES.
--          NO MATCHES BETWEEN ACTIVITY AND AGENT MAPPING.
--THIS USP IS DATA SOURCE FOR SRS GRID ON "ACTIVITY IMPORTS" STATUS REPORT!!!

--EXECUTE [dbo].[uspIMPORTS_WV_EMAIL_RESOLVED_WEEKLY_AGENT_MAPPING_MISSING_AGENTS] '07/16/2017','07/31/2017','','B'

--========================================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--========================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME

IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.


--===================================================================================================
--CREATE AND POPULATE TMP TABLE
--===================================================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_AGENT_MAPPING_MISSING_AGENTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_AGENT_MAPPING_MISSING_AGENTS
END
CREATE TABLE #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_AGENT_MAPPING_MISSING_AGENTS
(FILEDATETIME          VARCHAR(50)
,FTP_FILE_NAME         VARCHAR(100)
,WS_ROW_CREATED_TIME   DATETIME
,EMAIL_MAP_KEY	       VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,RCD_CNT               INT
)
INSERT INTO #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_AGENT_MAPPING_MISSING_AGENTS
SELECT
 DT.CAL_DATE_STRING					AS FILEDATETIME
,REPLACE(I.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME
,I.WS_ROW_CREATED_TIME
,I.RESOURCE_NAME					AS EMAIL_MAP_KEY
,I.FF_OWNER							AS RESOURCE_NAME
,COUNT(*)							AS RCD_CNT
--SELECT *
FROM            WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY	I   
LEFT JOIN       WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING	IAM  ON IAM.EMAIL_MAP_KEY     = I.RESOURCE_NAME
INNER JOIN      DATE_TIME								DT   ON DT.DATE_TIME_KEY      = I.STD_TENANT_START_DATE_TIME_KEY
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND ISNULL(IAM.EMAIL_MAP_KEY,'') = ''
--  AND ISNULL(I.FF_AGENT_NAME,'') NOT IN ('Katie Aguirre') -- EXCLUDE EDUCATION LEADERS
GROUP BY
 DT.CAL_DATE_STRING
,REPLACE(I.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME
,I.WS_ROW_CREATED_TIME
,I.RESOURCE_NAME					--AS EMAIL_MAP_KEY
,I.FF_OWNER							--AS RESOURCE_NAME

--==================================
UPDATE #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_AGENT_MAPPING_MISSING_AGENTS SET
 FILEDATETIME = REPLACE(CONVERT(VARCHAR(10),ISNULL(FILEDATETIME,'1/1/1900'),102),'/',' . ')

--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_AGENT_MAPPING_MISSING_AGENTS)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		--<<< WSOL GREEN SUCCESS
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	--<<< WSOL RED DANGER
END
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_AGENT_MAPPING_MISSING_AGENTS
	SELECT
	 ''				--DT.CAL_DATE_STRING
	,''				--I.FTP_FILE_NAME
	,DBO.GETDATE()  --I.WS_ROW_CREATED_TIME
	,''				--I.RESOURCE_NAME		AS EMAIL_MAP_KEY
	,''				--I.FF_OWNER			AS RESOURCE_NAME
	,0				--COUNT(*)				AS RCD_CNT
END
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RCD_CNT = 0 
	BEGIN  --@RCD_CNT WILL BE 0 STILL, EVEN THOUGH ONE BLANK RECORD WAS ADDED...
		SET @MSG1 = @MSG1 + 'There are NO Missing EMAIL Agent Mappings.'
	END
ELSE
	BEGIN
		IF @RPT_TYPE = 'B'
			BEGIN
				SET @MSG1 = ''
	
				IF @RCD_CNT = 0
					BEGIN
						SET @MSG1 = @MSG1 + 'There are NO missing EMAIL Agent Mappings!'
					END
				ELSE
					BEGIN
						IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1
							BEGIN
								SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
							END
		
								SET @MSG1 = @MSG1 + 'The list below contains Email Map Key values for agents that are associated with activity for the report date range, but ' + CHAR(10) + CHAR(13)
								SET @MSG1 = @MSG1 + 'who have not been added to or have incorrect values in the AIA Agent Mapping File. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

								SET @MSG1 = @MSG1 + 'Agents who are on this list will not have email statistics (for activity dates shown), unless a special request is made to '
								SET @MSG1 = @MSG1 + 'correct these errors.  The analyst will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

								SET @MSG1 = @MSG1 + 'Also, Project Management may need to add or update agent information in their AIA Agent Mapping CSV file and upload it '
								SET @MSG1 = @MSG1 + 'to the appropriate SFTP directory before the analyst can correctly update agent data. ' + CHAR(13) + CHAR(10)
					END

			END
	END

--==================================
--RETURN DATA:
--==================================
SELECT 
 *
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_AGENT_MAPPING_MISSING_AGENTS 

ORDER BY
 EMAIL_MAP_KEY
,FTP_FILE_NAME

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_WV_EMAIL_RESOLVED_WEEKLY_IMPORT]...';


GO


CREATE PROCEDURE [dbo].[uspIMPORTS_WV_EMAIL_RESOLVED_WEEKLY_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_WV_EMAIL_RESOLVED_WEEKLY_IMPORT]

--  SELECT * FROM WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_1

--===================================================================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY = 900902  --WORLD VENTURES
--===================================================================================
DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND
WHERE TENANT_KEY		= @TENANT_KEY
  AND SUB_GROUP_NAME	= 'WORLD_VENTURES_EMAIL'
  --  SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 900902
--===================================================================================

--=========================================================================================================
--  USING @WS_ROW_CREATED_TIME FOR ALL INSERTS WILL ALLOW ME TO DELETE SPECIFIC INSERT PROCESSES/FILES.
--  IN CASE OF EMERGENCY, BREAK GLASS.
--=========================================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.getdate()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===================================================================================

--===================================================================================
--HANDLE COLUMN HEADER AND JUNK RECORDS:
--===================================================================================

		--<<<<< HEADER ROWS REMOVED AT IMPORT TIME >>>>>--

INSERT INTO WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_BAD
SELECT
 'NWS'					--BAD_IMPORTS_CODE		--'N'on 'W'orking 'S'olutions Record
,'ACT'					--BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME	--WS_ROW_CREATED_TIME
,W1.FF_CASE_NUMBER
,W1.FF_CREATED_ON
,W1.FF_MODIFIED_ON
,W1.FF_CASE_TITLE
,W1.FF_ORIGIN
,W1.FF_STATUS
,W1.FF_OWNER
,W1.FF_SITE
,W1.FF_MANAGER
,W1.FF_ACCOUNT_NUMBER
,W1.FF_ADDRESS_1_COUNTRY_REGION
,W1.FF_NAME_QUEUE_ASSIGNED
,W1.FF_DISPOSITION_1
,W1.FF_DISPOSITION_2
,W1.FF_DISPOSITION_3
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.CREATED_DATETIME
,W1.CREATED_DATE
,W1.CREATED_HOUR
,W1.MODIFIED_DATETIME
,W1.MODIFIED_DATE
,W1.MODIFIED_HOUR
,W1.INVOICE_MAP_KEY
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.TENANT_KEY
,W1.RESOURCE_NAME
FROM		WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_1	W1
WHERE ISNULL(W1.FF_SITE,'') <> 'WSOL-Remote'

--======================================================================
--DELETE COLUMN HEADER AND JUNK RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_1
WHERE ISNULL(FF_SITE,'') <> 'WSOL-Remote'

--===================================================================================
--HANDLE NON-EMAIL RECORDS:
--===================================================================================
INSERT INTO WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_BAD
SELECT
 'NEM'					--BAD_IMPORTS_CODE		--'N'on 'EM'ail Record
,'ACT'					--BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME	--WS_ROW_CREATED_TIME
,W1.FF_CASE_NUMBER
,W1.FF_CREATED_ON
,W1.FF_MODIFIED_ON
,W1.FF_CASE_TITLE
,W1.FF_ORIGIN
,W1.FF_STATUS
,W1.FF_OWNER
,W1.FF_SITE
,W1.FF_MANAGER
,W1.FF_ACCOUNT_NUMBER
,W1.FF_ADDRESS_1_COUNTRY_REGION
,W1.FF_NAME_QUEUE_ASSIGNED
,W1.FF_DISPOSITION_1
,W1.FF_DISPOSITION_2
,W1.FF_DISPOSITION_3
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.CREATED_DATETIME
,W1.CREATED_DATE
,W1.CREATED_HOUR
,W1.MODIFIED_DATETIME
,W1.MODIFIED_DATE
,W1.MODIFIED_HOUR
,W1.INVOICE_MAP_KEY
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.TENANT_KEY
,W1.RESOURCE_NAME
FROM		WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_1	W1
WHERE ISNULL(W1.FF_ORIGIN,'') <> 'Email'

--======================================================================
--DELETE COLUMN HEADER AND JUNK RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_1
WHERE ISNULL(FF_ORIGIN,'') <> 'Email'

--===================================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_1) TABLE THAT WEREN'T IN IMPORTED FILE:
--===================================================================================
UPDATE WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_1 SET
 CREATED_DATETIME			= CAST(FF_CREATED_ON AS DATETIME)
,CREATED_DATE				= CAST(CONVERT(VARCHAR(10), CAST(FF_CREATED_ON AS DATETIME), 111) AS DATETIME)
,CREATED_HOUR				= CAST(CONVERT(VARCHAR(10), CAST(FF_CREATED_ON AS DATETIME), 111) + ' ' + CONVERT(VARCHAR(2), DATEPART(HH,CAST(FF_CREATED_ON AS DATETIME))) + ':00:00' AS DATETIME)
,MODIFIED_DATETIME			= CAST(FF_MODIFIED_ON AS DATETIME)
,MODIFIED_DATE				= CAST(CONVERT(VARCHAR(10), CAST(FF_MODIFIED_ON AS DATETIME), 111) AS DATETIME)
,MODIFIED_HOUR				= CAST(CONVERT(VARCHAR(10), CAST(FF_MODIFIED_ON AS DATETIME), 111) + ' ' + CONVERT(VARCHAR(2), DATEPART(HH,CAST(FF_MODIFIED_ON AS DATETIME))) + ':00:00' AS DATETIME)
,RESOURCE_NAME				= CONCAT(SUBSTRING(FF_OWNER, CHARINDEX(' ',FF_OWNER) + 1, LEN(FF_OWNER) - CHARINDEX(' ',FF_OWNER)),', ',LEFT(FF_OWNER,CHARINDEX(' ',FF_OWNER) - 1))
,TENANT_KEY					= @TENANT_KEY

--===================================================================================================
-- UPDATE DATETIME KEY
--===================================================================================================
UPDATE WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_1 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM		WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_1	I
INNER JOIN	DATE_TIME									DT	ON DT.CAL_DATE = I.[MODIFIED_HOUR]

--===============================================
--HANDLE INVALID DATE/TIME RECORDS:
--===============================================
INSERT INTO WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_BAD
SELECT
 'DTM'					--BAD_IMPORTS_CODE		--'Invalid Date/Time'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_CASE_NUMBER
,W1.FF_CREATED_ON
,W1.FF_MODIFIED_ON
,W1.FF_CASE_TITLE
,W1.FF_ORIGIN
,W1.FF_STATUS
,W1.FF_OWNER
,W1.FF_SITE
,W1.FF_MANAGER
,W1.FF_ACCOUNT_NUMBER
,W1.FF_ADDRESS_1_COUNTRY_REGION
,W1.FF_NAME_QUEUE_ASSIGNED
,W1.FF_DISPOSITION_1
,W1.FF_DISPOSITION_2
,W1.FF_DISPOSITION_3
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.CREATED_DATETIME
,W1.CREATED_DATE
,W1.CREATED_HOUR
,W1.MODIFIED_DATETIME
,W1.MODIFIED_DATE
,W1.MODIFIED_HOUR
,W1.INVOICE_MAP_KEY
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.TENANT_KEY
,W1.RESOURCE_NAME
-- SELECT *
FROM           WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_1    W1
WHERE ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) = 0

--======================================================================
--DELETE INVALID DATE/TIME RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_1
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================

--===========================================================================================================
--HANDLE DUPLICATES:
--===========================================================================================================
INSERT INTO WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_BAD
SELECT
 'DUP'					--BAD_IMPORTS_CODE		--'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_CASE_NUMBER
,W1.FF_CREATED_ON
,W1.FF_MODIFIED_ON
,W1.FF_CASE_TITLE
,W1.FF_ORIGIN
,W1.FF_STATUS
,W1.FF_OWNER
,W1.FF_SITE
,W1.FF_MANAGER
,W1.FF_ACCOUNT_NUMBER
,W1.FF_ADDRESS_1_COUNTRY_REGION
,W1.FF_NAME_QUEUE_ASSIGNED
,W1.FF_DISPOSITION_1
,W1.FF_DISPOSITION_2
,W1.FF_DISPOSITION_3
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.CREATED_DATETIME
,W1.CREATED_DATE
,W1.CREATED_HOUR
,W1.MODIFIED_DATETIME
,W1.MODIFIED_DATE
,W1.MODIFIED_HOUR
,W1.INVOICE_MAP_KEY
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.TENANT_KEY
,W1.RESOURCE_NAME

FROM
(	SELECT
	 FF_CASE_NUMBER
	,FF_CREATED_ON
	,FF_MODIFIED_ON
	,FF_STATUS
	,FF_OWNER
	,FF_MANAGER
	,FF_ACCOUNT_NUMBER
	,FF_ADDRESS_1_COUNTRY_REGION
	,FF_NAME_QUEUE_ASSIGNED
	,ROW_NUMBER() over (partition by FF_CASE_NUMBER, FF_CREATED_ON, FF_MODIFIED_ON, FF_STATUS, FF_OWNER, FF_MANAGER, FF_ACCOUNT_NUMBER, FF_ADDRESS_1_COUNTRY_REGION, FF_NAME_QUEUE_ASSIGNED
                            order by FF_CASE_NUMBER, FF_CREATED_ON, FF_MODIFIED_ON, FF_STATUS, FF_OWNER, FF_MANAGER, FF_ACCOUNT_NUMBER, FF_ADDRESS_1_COUNTRY_REGION, FF_NAME_QUEUE_ASSIGNED, FF_DISPOSITION_1 DESC) ROWNO
	FROM WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_1
) TNM
LEFT JOIN      WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_1	W1   ON W1.FF_CASE_NUMBER				= TNM.FF_CASE_NUMBER
																AND W1.FF_CREATED_ON				= TNM.FF_CREATED_ON
																AND W1.FF_MODIFIED_ON				= TNM.FF_MODIFIED_ON
																AND W1.FF_STATUS					= TNM.FF_STATUS
																AND W1.FF_OWNER						= TNM.FF_OWNER
																AND W1.FF_MANAGER					= TNM.FF_MANAGER
																AND W1.FF_ACCOUNT_NUMBER			= TNM.FF_ACCOUNT_NUMBER
																AND W1.FF_ADDRESS_1_COUNTRY_REGION	= TNM.FF_ADDRESS_1_COUNTRY_REGION
																AND W1.FF_NAME_QUEUE_ASSIGNED		= TNM.FF_NAME_QUEUE_ASSIGNED
WHERE TNM.ROWNO > 1

--===========================================================================================================
--DELETE DUPLICATES:
--===========================================================================================================
DELETE FROM TNM
FROM
(	SELECT
	 FF_CASE_NUMBER
	,FF_CREATED_ON
	,FF_MODIFIED_ON
	,FF_STATUS
	,FF_OWNER
	,FF_MANAGER
	,FF_ACCOUNT_NUMBER
	,FF_ADDRESS_1_COUNTRY_REGION
	,FF_NAME_QUEUE_ASSIGNED
	,ROW_NUMBER() over (partition by FF_CASE_NUMBER, FF_CREATED_ON, FF_MODIFIED_ON, FF_STATUS, FF_OWNER, FF_MANAGER, FF_ACCOUNT_NUMBER, FF_ADDRESS_1_COUNTRY_REGION, FF_NAME_QUEUE_ASSIGNED
                            order by FF_CASE_NUMBER, FF_CREATED_ON, FF_MODIFIED_ON, FF_STATUS, FF_OWNER, FF_MANAGER, FF_ACCOUNT_NUMBER, FF_ADDRESS_1_COUNTRY_REGION, FF_NAME_QUEUE_ASSIGNED, FF_DISPOSITION_1 DESC) ROWNO
	FROM WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_1
) TNM
WHERE TNM.ROWNO > 1
--===========================================================================================================

--===========================================================================================================
--UPDATE FIELDS FROM MAPPING DATA
--===========================================================================================================
UPDATE WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_1 SET
 INVOICE_MAP_KEY = ISNULL(IAM.INVOICE_MAP_KEY,'')
 --SELECT *
 FROM            WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_1	I
 LEFT JOIN       WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING		IAM  ON IAM.EMAIL_MAP_KEY = I.RESOURCE_NAME

--SELECT * FROM WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING

--======================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .CSV FILES:
--======================================================================
--SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 900902
--======================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--Check #1:  ===================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_1)
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + 'ERROR!  File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	SELECT 
	 @TENANT_KEY				--TENANT_KEY
	,'WORLD_VENTURES_EMAIL'		--SUB_GROUP_NAME
	,@MSG1						--ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	--MUST RETURN AT LEAST ONE RECORD TO SSIS
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	SELECT 
	 @TENANT_KEY				--TENANT_KEY
	,'WORLD_VENTURES_EMAIL'	--SUB_GROUP_NAME
	,''							--ERROR_MSG
END

--=============================================
--	UPDATE PERMANENT TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY SET
-- FF_CASE_NUMBER					= W1.FF_CASE_NUMBER
--,FF_CREATED_ON					= W1.FF_CREATED_ON
--,FF_MODIFIED_ON					= W1.FF_MODIFIED_ON
 FF_CASE_TITLE						= W1.FF_CASE_TITLE
,FF_ORIGIN							= W1.FF_ORIGIN
--,FF_STATUS						= W1.FF_STATUS
--,FF_OWNER							= W1.FF_OWNER
,FF_SITE							= W1.FF_SITE
--,FF_MANAGER						= W1.FF_MANAGER
,FF_ACCOUNT_NUMBER				= W1.FF_ACCOUNT_NUMBER
,FF_ADDRESS_1_COUNTRY_REGION		= W1.FF_ADDRESS_1_COUNTRY_REGION
--,FF_NAME_QUEUE_ASSIGNED			= W1.FF_NAME_QUEUE_ASSIGNED
,FF_DISPOSITION_1					= W1.FF_DISPOSITION_1
,FF_DISPOSITION_2					= W1.FF_DISPOSITION_2
,FF_DISPOSITION_3					= W1.FF_DISPOSITION_3

,SEQNO_ADDED_TIME					= W1.SEQNO_ADDED_TIME
,SEQNO								= W1.SEQNO
,FTP_FILE_NAME						= W1.FTP_FILE_NAME

,CREATED_DATETIME					= W1.CREATED_DATETIME
,CREATED_DATE						= W1.CREATED_DATE
,CREATED_HOUR						= W1.CREATED_HOUR
,MODIFIED_DATETIME					= W1.MODIFIED_DATETIME
,MODIFIED_DATE						= W1.MODIFIED_DATE
,MODIFIED_HOUR						= W1.MODIFIED_HOUR
,INVOICE_MAP_KEY					= W1.INVOICE_MAP_KEY
,STD_TENANT_START_DATE_TIME_KEY		= W1.STD_TENANT_START_DATE_TIME_KEY
,TENANT_KEY							= W1.TENANT_KEY
,RESOURCE_NAME						= W1.RESOURCE_NAME
--,WS_ROW_CREATED_TIME				= NULL
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_1  W1
INNER JOIN      WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY    G   ON  G.FF_CASE_NUMBER			= W1.FF_CASE_NUMBER
																AND G.FF_CREATED_ON				= W1.FF_CREATED_ON
																AND G.FF_MODIFIED_ON			= W1.FF_MODIFIED_ON
																AND G.FF_STATUS					= W1.FF_STATUS
																AND G.FF_OWNER					= W1.FF_OWNER
																AND G.FF_MANAGER				= W1.FF_MANAGER
																AND G.FF_NAME_QUEUE_ASSIGNED	= W1.FF_NAME_QUEUE_ASSIGNED


-- WHERE PERMANENT TABLE KEY FIELDS MATCH WORK TABLE KEY FIELDS - UPDATE NON-KEY FIELDS!
WHERE G.FF_CASE_NUMBER			= W1.FF_CASE_NUMBER
  AND G.FF_CREATED_ON			= W1.FF_CREATED_ON
  AND G.FF_MODIFIED_ON			= W1.FF_MODIFIED_ON
  AND G.FF_STATUS				= W1.FF_STATUS
  AND G.FF_OWNER				= W1.FF_OWNER
  AND G.FF_MANAGER				= W1.FF_MANAGER
  AND G.FF_NAME_QUEUE_ASSIGNED	= W1.FF_NAME_QUEUE_ASSIGNED

--=============================================
--INSERT INTO PERMANENT IMPORT TABLE: 
--=============================================
INSERT INTO WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY
(FF_CASE_NUMBER
,FF_CREATED_ON
,FF_MODIFIED_ON
,FF_CASE_TITLE
,FF_ORIGIN
,FF_STATUS
,FF_OWNER
,FF_SITE
,FF_MANAGER
,FF_ACCOUNT_NUMBER
,FF_ADDRESS_1_COUNTRY_REGION
,FF_NAME_QUEUE_ASSIGNED
,FF_DISPOSITION_1
,FF_DISPOSITION_2
,FF_DISPOSITION_3
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,CREATED_DATETIME
,CREATED_DATE
,CREATED_HOUR
,MODIFIED_DATETIME
,MODIFIED_DATE
,MODIFIED_HOUR
,INVOICE_MAP_KEY
,STD_TENANT_START_DATE_TIME_KEY
,TENANT_KEY
,RESOURCE_NAME
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W1.FF_CASE_NUMBER
,W1.FF_CREATED_ON
,W1.FF_MODIFIED_ON
,W1.FF_CASE_TITLE
,W1.FF_ORIGIN
,W1.FF_STATUS
,W1.FF_OWNER
,W1.FF_SITE
,W1.FF_MANAGER
,W1.FF_ACCOUNT_NUMBER
,W1.FF_ADDRESS_1_COUNTRY_REGION
,W1.FF_NAME_QUEUE_ASSIGNED
,W1.FF_DISPOSITION_1
,W1.FF_DISPOSITION_2
,W1.FF_DISPOSITION_3

,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME

,W1.CREATED_DATETIME
,W1.CREATED_DATE
,W1.CREATED_HOUR
,W1.MODIFIED_DATETIME
,W1.MODIFIED_DATE
,W1.MODIFIED_HOUR
,W1.INVOICE_MAP_KEY
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.TENANT_KEY
,W1.RESOURCE_NAME

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_1  W1

LEFT JOIN       WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY    G   ON  G.FF_CASE_NUMBER			= W1.FF_CASE_NUMBER
																AND G.FF_CREATED_ON				= W1.FF_CREATED_ON
																AND G.FF_MODIFIED_ON			= W1.FF_MODIFIED_ON
																AND G.FF_STATUS					= W1.FF_STATUS
																AND G.FF_OWNER					= W1.FF_OWNER
																AND G.FF_MANAGER				= W1.FF_MANAGER
																AND G.FF_NAME_QUEUE_ASSIGNED	= W1.FF_NAME_QUEUE_ASSIGNED

WHERE (G.FF_CASE_NUMBER			IS NULL AND ISNULL(W1.FF_CASE_NUMBER		,'') <> '' )
  AND (G.FF_CREATED_ON			IS NULL AND ISNULL(W1.FF_CREATED_ON			,'') <> '' )
  AND (G.FF_MODIFIED_ON			IS NULL AND ISNULL(W1.FF_MODIFIED_ON		,'') <> '' )
  AND (G.FF_STATUS				IS NULL AND ISNULL(W1.FF_STATUS				,'') <> '' )
  AND (G.FF_OWNER				IS NULL AND ISNULL(W1.FF_OWNER				,'') <> '' )
  AND (G.FF_MANAGER				IS NULL AND ISNULL(W1.FF_MANAGER			,'') <> '' )
  AND (G.FF_NAME_QUEUE_ASSIGNED	IS NULL AND ISNULL(W1.FF_NAME_QUEUE_ASSIGNED,'') <> '' )
--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_WV_EMAIL_RESOLVED_WEEKLY_IMPORT_STATUS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_WV_EMAIL_RESOLVED_WEEKLY_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_WV_EMAIL_RESOLVED_WEEKLY_IMPORT_STATUS] '07/01/2017','07/17/2017','','B'

--========================================
-- SET DATE VARIABLES
--========================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE 
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE 
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--=========================================================================
--CREATE TMP TABLE:
--=========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_IMPORT_STATUS
(FILEDATETIME			VARCHAR(20)
,FTP_FILE_NAME			VARCHAR(100)
,CST_ROW_CREATED_TIME	DATETIME
,RCD_CNT				INT
)

--========================================================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================================================
    INSERT INTO #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0)															AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY	C

		INNER JOIN      DATE_TIME									DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
--		AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )  --<<<<< USE IF YOU WANT TO IGNORE WEEKENDS

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME)
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')
		,C.WS_ROW_CREATED_TIME
	) UA

--================================================================================
--CREATE CURSOR TO CHECK FOR MISSING DATES
--================================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1)

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_IMPORT_STATUS   I   ON I.FILEDATETIME = DT.FILEDATETIME

WHERE ISNULL(I.RCD_CNT,0) = 0
--  AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)  -- WORLD VENTURES AGENTS WORKING EMAIL ON WEEKENDS
--  AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		--<<< WSOL GREEN SUCCESS
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	--<<< WSOL RED DANGER
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B'
	BEGIN

		SET @MSG1 = ''

		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1
			BEGIN
				SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
				IF @RCD_CNT > 0
					BEGIN
						SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
						SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

						SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
						SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 9:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
					END
				ELSE
					BEGIN
						SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
					END
			END
		ELSE 
			BEGIN
				SET @MSG1 = 'Imported file(s) from ' 
					+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
				
				IF @RCD_CNT > 0
					BEGIN
						SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
					END
				ELSE
					BEGIN
						SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
					END
			END
	
	END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--WESTERN DENTAL:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM WSOL_TB_IMPORT_ERRORS_FOUND
							   WHERE TENANT_KEY = 900902 AND SUB_GROUP_NAME = 'WORLD_VENTURES_EMAIL' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'	--<<< WSOL RED DANGER

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_WV_IMPORT_EMAIL_RESOLVED_WEEKLY_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_WV_EMAIL_RESOLVED_WEEKLY_IMPORT_STATUS_MISSING_DATA]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_WV_EMAIL_RESOLVED_WEEKLY_IMPORT_STATUS_MISSING_DATA]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_WV_EMAIL_RESOLVED_WEEKLY_IMPORT_STATUS_MISSING_DATA] '07/16/2017','07/31/2017','','B'

--==============================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==============================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME

IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE 
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--========================================================================
--CREATE TMP TABLE:
--========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_IMPORT_STATUS_MISSING_DATA') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_IMPORT_STATUS_MISSING_DATA
END
CREATE TABLE #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_IMPORT_STATUS_MISSING_DATA
(FILEDATETIME			VARCHAR(20)
,FTP_FILE_NAME			VARCHAR(100)
,CST_ROW_CREATED_TIME	DATETIME
,RCD_CNT				INT
)

--========================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================
    INSERT INTO #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_IMPORT_STATUS_MISSING_DATA
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													--AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												--AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')															--AS RCD_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY	C

		INNER JOIN      DATE_TIME									DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT
,'White' AS BG_COLOR

FROM #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_IMPORT_STATUS_MISSING_DATA

ORDER BY
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_WV_EMAIL_RESOLVED_WEEKLY_REPORTS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_WV_EMAIL_RESOLVED_WEEKLY_REPORTS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300) --Hid. Def=' '
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'  MANual,SUBscription
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='INV'
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='INV'  
AS
SET NOCOUNT ON    

--  EXECUTE [dbo].[uspIMPORTS_WV_EMAIL_RESOLVED_WEEKLY_REPORTS] '09/21/2017','09/21/2017','0','0','0','0','HR','Y','MM','NM','Y','4','MAN','INV','INV'

--	@TIME_INTERVAL:  Can show invoicing data at hourly, daily, or higher level !!!

--	Durations in FTP FILE are in seconds.  Therefore, reporting may be in seconds, minutes, or hours.

--  SELECT * FROM WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING
--  SELECT * FROM WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY


--========================================================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) 
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) -- + 1
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
END
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

DECLARE
 @MTD_BEG AS DATETIME
,@MTD_END AS DATETIME  --,@YTD_BEG AS DATETIME--,@YTD_END AS DATETIME
SET @MTD_BEG = CAST(CAST(DATEPART(mm,@DTM_BEG) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)
SET @MTD_END = @DTM_END  

IF @TIME_INTERVAL IN ('MR','MD') BEGIN  --MONTH DETERMINED BY @DTM_BEG.
	SET @DTM_BEG = @MTD_BEG
	SET @DTM_END = @MTD_END
END

--==================================
--SET AMOUNT TO DIVIDE BY:
--==================================
DECLARE @DS DECIMAL(10,2)  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.00     --DIVIDE SECONDS BY 1  TO GET SAME, SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
    SET @DS = 60.00    --DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
    SET @DS = 3600.00  --DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
--CREATE EMAIL TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_WV_EMAIL_DATA') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_WV_EMAIL_DATA
END
CREATE TABLE #IMPORTS_WV_EMAIL_DATA
(AGENT_NAME						VARCHAR(100)
,MODIFIED_HOUR					DATETIME
,INVOICE_MAP_KEY				VARCHAR(100)
,STD_TENANT_START_DATE_TIME_KEY	INT
,MODIFIED_EMAIL_COUNT			INT
)

INSERT INTO #IMPORTS_WV_EMAIL_DATA
SELECT
 EMA.AGENT_NAME
,EMA.MODIFIED_HOUR
,EMA.INVOICE_MAP_KEY
,EMA.STD_TENANT_START_DATE_TIME_KEY
,EMA.MODIFIED_EMAIL_COUNT

FROM
(	SELECT	
	 ERW.FF_OWNER							AS AGENT_NAME
	,ERW.MODIFIED_HOUR						AS MODIFIED_HOUR
	,ERW.INVOICE_MAP_KEY				    AS INVOICE_MAP_KEY
	,ERW.STD_TENANT_START_DATE_TIME_KEY		AS STD_TENANT_START_DATE_TIME_KEY
	,COUNT(ERW.FF_OWNER)		            AS MODIFIED_EMAIL_COUNT
	--  SELECT *
	FROM            WSOL_TB_IMPORTS_WV_EMAIL_RESOLVED_WEEKLY	ERW
	INNER JOIN      DATE_TIME									DT	ON DT.DATE_TIME_KEY = ERW.STD_TENANT_START_DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
		
	GROUP BY 
	 ERW.FF_OWNER
	,ERW.MODIFIED_HOUR
	,ERW.INVOICE_MAP_KEY
	,ERW.STD_TENANT_START_DATE_TIME_KEY
) EMA
--SELECT * FROM #IMPORTS_WV_EMAIL_DATA ORDER BY AGENT_NAME

--==================================
--CREATE EMAIL TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_WV_WORK_DATA') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_WV_WORK_DATA
END
CREATE TABLE #IMPORTS_WV_WORK_DATA
(AGENT_NAME						VARCHAR(100)
,INVOICE_MAP_KEY				VARCHAR(100)
,[DATETIME]						DATETIME
,STD_TENANT_START_DATE_TIME_KEY	INT
,LOGIN_TIME						DECIMAL(10,2)
,AVAILABLE_TIME					DECIMAL(10,2)
,UNAVAILABLE_EMAIL_TIME			DECIMAL(10,2)
,UNAVAILABLE_SUPERVISOR_TIME	DECIMAL(10,2)
,UNAVAILABLE_TIME_MINUS_ACW		DECIMAL(10,2)
,TALK_TIME						DECIMAL(10,2)
,HOLD_TIME						DECIMAL(10,2)
,ACW_TIME						DECIMAL(10,2)
,TRUE_OUTBOUND_TALK_TIME		DECIMAL(10,2)
,TOTAL_TALK						DECIMAL(10,2)
,CPROD							DECIMAL(10,2)
,MING							DECIMAL(10,2)
,AUT2							DECIMAL(10,2)
)
INSERT INTO #IMPORTS_WV_WORK_DATA
SELECT
 WRK.AGENT_NAME
,WRK.INVOICE_MAP_KEY
,WRK.[DATETIME]
,WRK.STD_TENANT_START_DATE_TIME_KEY
,WRK.LOGIN_TIME
,WRK.AVAILABLE_TIME
,WRK.UNAVAILABLE_EMAIL_TIME
,WRK.UNAVAILABLE_SUPERVISOR_TIME
,WRK.UNAVAILABLE_TIME_MINUS_ACW
,WRK.TALK_TIME
,WRK.HOLD_TIME
,WRK.ACW_TIME
,WRK.TRUE_OUTBOUND_TALK_TIME
,WRK.TOTAL_TALK
,WRK.CPROD
,WRK.MING
,WRK.AUT2
FROM
(	SELECT	
	 INV.RESOURCE_NAME									AS AGENT_NAME
	,INV.FF_AGENT_NAME									AS INVOICE_MAP_KEY
	,INV.[DATETIME]										AS [DATETIME]
	,INV.STD_TENANT_START_DATE_TIME_KEY					AS STD_TENANT_START_DATE_TIME_KEY
	,SUM(ISNULL(INV.LOGIN_TIME					,0.00)) AS LOGIN_TIME
	,SUM(ISNULL(INV.AVAILABLE_TIME				,0.00)) AS AVAILABLE_TIME
	,SUM(ISNULL(INV.UNAVAILABLE_EMAIL_TIME		,0.00)) AS UNAVAILABLE_EMAIL_TIME
	,SUM(ISNULL(INV.UNAVAILABLE_SUPERVISOR_TIME	,0.00)) AS UNAVAILABLE_SUPERVISOR_TIME
	,SUM(ISNULL(INV.UNAVAILABLE_TIME_MINUS_ACW	,0.00)) AS UNAVAILABLE_TIME_MINUS_ACW
	,SUM(ISNULL(INV.TALK_TIME					,0.00)) AS TALK_TIME
	,SUM(ISNULL(INV.HOLD_TIME					,0.00)) AS HOLD_TIME
	,SUM(ISNULL(INV.ACW_TIME					,0.00)) AS ACW_TIME
	,SUM(ISNULL(INV.TRUE_OUTBOUND_TALK_TIME		,0.00)) AS TRUE_OUTBOUND_TALK_TIME
	,SUM(ISNULL(INV.TOTAL_TALK					,0.00)) AS TOTAL_TALK
	,SUM(ISNULL(INV.CPROD						,0.00)) AS CPROD
	,SUM(ISNULL(INV.MING						,0.00)) AS MING
	,SUM(ISNULL(INV.AUT2						,0.00)) AS AUT2
	--  SELECT *
	FROM            WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING	INV
	INNER JOIN      DATE_TIME								DT	ON DT.DATE_TIME_KEY = INV.STD_TENANT_START_DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
		
	GROUP BY
	 INV.RESOURCE_NAME 
	,INV.FF_AGENT_NAME
	,INV.[DATETIME]
	,INV.STD_TENANT_START_DATE_TIME_KEY
) WRK
--SELECT * FROM #IMPORTS_WV_WORK_DATA ORDER BY INVOICE_MAP_KEY
--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_REPORTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_REPORTS
END
CREATE TABLE #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_REPORTS
(--ID_EXT							VARCHAR(3)
--,SCHEDULER_ACL_NAME				VARCHAR(100)  
 EMPLOYEE_ID					VARCHAR(50)
,STD_TENANT_START_DATE_TIME_KEY INT
,MODIFIED_HOUR					DATETIME
,RESOURCE_NAME					VARCHAR(100)
,
[LOGIN_TIME] [decimal](10, 2) NULL,
[AVAILABLE_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_EMAIL_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_SUPERVISOR_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_TIME_MINUS_ACW] [decimal](10, 2) NULL,
[TALK_TIME] [decimal](10, 2) NULL,
[HOLD_TIME] [decimal](10, 2) NULL,
[ACW_TIME] [decimal](10, 2) NULL,
[TRUE_OUTBOUND_TALK_TIME] [decimal](10, 2) NULL,
[TOTAL_TALK] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MING] [decimal](10, 2) NULL,
[AUT2] [decimal](10, 2) NULL,

 MODIFIED_EMAIL_COUNT			INT
,UNAVAILABLE_EMAIL_TIME_SECS	DECIMAL(10,2)
,EMAILS_PER_HOUR				DECIMAL(10,2)
)

INSERT INTO #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_REPORTS
SELECT
-- UAA.ACD_ID_EXTENSION
--,UAA.SCHEDULER_ACL_NAME
 UAA.EMPLOYEE_ID
,UAA.STD_TENANT_START_DATE_TIME_KEY
,UAA.MODIFIED_HOUR
,UAA.RESOURCE_NAME

,(ISNULL(UAA.LOGIN_TIME					,0.00))
,(ISNULL(UAA.AVAILABLE_TIME				,0.00))
,(ISNULL(UAA.UNAVAILABLE_EMAIL_TIME		,0.00))
,(ISNULL(UAA.UNAVAILABLE_SUPERVISOR_TIME,0.00))
,(ISNULL(UAA.UNAVAILABLE_TIME_MINUS_ACW	,0.00))
,(ISNULL(UAA.TALK_TIME					,0.00))
,(ISNULL(UAA.HOLD_TIME					,0.00))
,(ISNULL(UAA.ACW_TIME					,0.00))
,(ISNULL(UAA.TRUE_OUTBOUND_TALK_TIME	,0.00))
,(ISNULL(UAA.TOTAL_TALK					,0.00))
,(ISNULL(UAA.CPROD						,0.00))
,(ISNULL(UAA.MING						,0.00))
,(ISNULL(UAA.AUT2						,0.00))

,(ISNULL(UAA.MODIFIED_EMAIL_COUNT		,0	 ))
,(ISNULL(UAA.UNAVAILABLE_EMAIL_TIME_SECS,0.00))
,(ISNULL(UAA.EMAILS_PER_HOUR			,0.00))

--DATASOURCES FOR DURATION FIELDS, IN SECONDS, IN HOUR INTERVALS:
--SELECT * FROM WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING

FROM
(	SELECT	
	-- UA.ID_EXT							AS ACD_ID_EXTENSION
	--,UA.INVOICE_ID					    AS SCHEDULER_ACL_NAME
	 ISNULL(UA.INVOICE_MAP_KEY					,ED.AGENT_NAME)						AS EMPLOYEE_ID 
	,ISNULL(UA.STD_TENANT_START_DATE_TIME_KEY	,ED.STD_TENANT_START_DATE_TIME_KEY)	AS STD_TENANT_START_DATE_TIME_KEY
	,DT.CAL_DATE																	AS MODIFIED_HOUR
	,ISNULL(MAX(UA.AGENT_NAME)					,MAX(ED.AGENT_NAME))			    AS RESOURCE_NAME

	,SUM(ISNULL(UA.LOGIN_TIME					,0.00))	AS LOGIN_TIME
	,SUM(ISNULL(UA.AVAILABLE_TIME				,0.00))	AS AVAILABLE_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_EMAIL_TIME		,0.00))	AS UNAVAILABLE_EMAIL_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_SUPERVISOR_TIME	,0.00)) AS UNAVAILABLE_SUPERVISOR_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_TIME_MINUS_ACW	,0.00))	AS UNAVAILABLE_TIME_MINUS_ACW
	,SUM(ISNULL(UA.TALK_TIME					,0.00))	AS TALK_TIME
	,SUM(ISNULL(UA.HOLD_TIME					,0.00))	AS HOLD_TIME
	,SUM(ISNULL(UA.ACW_TIME						,0.00))	AS ACW_TIME
	,SUM(ISNULL(UA.TRUE_OUTBOUND_TALK_TIME		,0.00))	AS TRUE_OUTBOUND_TALK_TIME
	,SUM(ISNULL(UA.TOTAL_TALK					,0.00))	AS TOTAL_TALK
	,SUM(ISNULL(UA.CPROD						,0.00))	AS CPROD
	,SUM(ISNULL(UA.MING							,0.00))	AS MING
	,SUM(ISNULL(UA.AUT2							,0.00))	AS AUT2
	
	,SUM(ISNULL(ED.MODIFIED_EMAIL_COUNT			,0   )) AS MODIFIED_EMAIL_COUNT
	,SUM(ISNULL(UA.UNAVAILABLE_EMAIL_TIME		,0.00)) AS UNAVAILABLE_EMAIL_TIME_SECS
	,CASE WHEN SUM(ISNULL(UA.UNAVAILABLE_EMAIL_TIME,0.00)) > 0 THEN
			(SUM(ISNULL(ED.MODIFIED_EMAIL_COUNT,0)) / SUM(ISNULL(UA.UNAVAILABLE_EMAIL_TIME,0.00))) * 3600.00
		  ELSE 0.00
	 END												AS EMAILS_PER_HOUR
	--  SELECT *
	FROM				#IMPORTS_WV_WORK_DATA			UA
	FULL OUTER  JOIN	#IMPORTS_WV_EMAIL_DATA			ED	ON ED.INVOICE_MAP_KEY					= UA.INVOICE_MAP_KEY
														   AND ED.STD_TENANT_START_DATE_TIME_KEY	= UA.STD_TENANT_START_DATE_TIME_KEY 
	INNER JOIN      DATE_TIME							DT	ON DT.DATE_TIME_KEY						= ISNULL(UA.STD_TENANT_START_DATE_TIME_KEY	,ED.STD_TENANT_START_DATE_TIME_KEY)
	

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
		
	GROUP BY
	-- UA.ID_EXT
	--,UA.INVOICE_ID
	 ISNULL(UA.INVOICE_MAP_KEY					,ED.AGENT_NAME)
	,ISNULL(UA.STD_TENANT_START_DATE_TIME_KEY	,ED.STD_TENANT_START_DATE_TIME_KEY)
	,DT.CAL_DATE
) UAA

--==============================================================
-- CREATE TEMPORARY TABLE TO RETURN RESULTS
--==============================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_REPORTS_RTN') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_REPORTS_RTN
END
CREATE TABLE #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_REPORTS_RTN
(GRPNO                 INT
--,ID_EXT                VARCHAR(3)
--,SCHEDULER_ACL_NAME    VARCHAR(100)
,EMPLOYEE_ID           VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,CAL_YEAR_MONTH_NUM    VARCHAR(10)
,DATE_INTERVAL         VARCHAR(50)
,TIME_INTERVAL         VARCHAR(10)
,
[LOGIN_TIME] [decimal](10, 2) NULL,
[AVAILABLE_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_EMAIL_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_SUPERVISOR_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_TIME_MINUS_ACW] [decimal](10, 2) NULL,
[TALK_TIME] [decimal](10, 2) NULL,
[HOLD_TIME] [decimal](10, 2) NULL,
[ACW_TIME] [decimal](10, 2) NULL,
[TRUE_OUTBOUND_TALK_TIME] [decimal](10, 2) NULL,
[TOTAL_TALK] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MING] [decimal](10, 2) NULL,
[AUT2] [decimal](10, 2) NULL,

 MODIFIED_EMAIL_COUNT			INT
,EMAILS_PER_HOUR				DECIMAL(10,2)
,UNAVAILABLE_EMAIL_TIME_SECS	DECIMAL(10,2)
,TOTAL_EMAILS_PER_HOUR			DECIMAL(10,2)
)

--==================================
-- POPULATE TEMPORARY TABLE
--==================================
INSERT INTO #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_REPORTS_RTN
SELECT
 20								--AS GRPNO  
--,ISNULL(GG.ID_EXT            ,'') AS ID_EXT
--,ISNULL(GG.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
,ISNULL(GG.EMPLOYEE_ID       ,'') AS EMPLOYEE_ID
,ISNULL(GG.RESOURCE_NAME     ,'') AS RESOURCE_NAME
,ISNULL(GG.CAL_YEAR_MONTH_NUM,'') AS CAL_YEAR_MONTH_NUM
,ISNULL(GG.DI                ,'') AS DI
,ISNULL(GG.TI                ,'') AS TI

,CAST((ISNULL(GG.LOGIN_TIME					,0.00)) / @DS AS DECIMAL(10,2))	AS LOGIN_TIME
,CAST((ISNULL(GG.AVAILABLE_TIME				,0.00)) / @DS AS DECIMAL(10,2))	AS AVAILABLE_TIME
,CAST((ISNULL(GG.UNAVAILABLE_EMAIL_TIME		,0.00)) / @DS AS DECIMAL(10,2))	AS UNAVAILABLE_EMAIL_TIME
,CAST((ISNULL(GG.UNAVAILABLE_SUPERVISOR_TIME,0.00)) / @DS AS DECIMAL(10,2))	AS UNAVAILABLE_SUPERVISOR_TIME
,CAST((ISNULL(GG.UNAVAILABLE_TIME_MINUS_ACW	,0.00)) / @DS AS DECIMAL(10,2))	AS UNAVAILABLE_TIME_MINUS_ACW
,CAST((ISNULL(GG.TALK_TIME					,0.00)) / @DS AS DECIMAL(10,2))	AS TALK_TIME
,CAST((ISNULL(GG.HOLD_TIME					,0.00)) / @DS AS DECIMAL(10,2))	AS HOLD_TIME
,CAST((ISNULL(GG.ACW_TIME					,0.00)) / @DS AS DECIMAL(10,2))	AS ACW_TIME
,CAST((ISNULL(GG.TRUE_OUTBOUND_TALK_TIME	,0.00)) / @DS AS DECIMAL(10,2))	AS TRUE_OUTBOUND_TALK_TIME
,CAST((ISNULL(GG.TOTAL_TALK					,0.00)) / @DS AS DECIMAL(10,2))	AS TOTAL_TALK
,CAST((ISNULL(GG.CPROD						,0.00)) / @DS AS DECIMAL(10,2))	AS CPROD
,CAST((ISNULL(GG.MING						,0.00)) / @DS AS DECIMAL(10,2))	AS MING
,CAST((ISNULL(GG.AUT2						,0.00)) / @DS AS DECIMAL(10,2))	AS AUT2

,ISNULL(GG.MODIFIED_EMAIL_COUNT				,0)							AS MODIFIED_EMAIL_COUNT
,ISNULL(GG.EMAILS_PER_HOUR					,0.00)						AS EMAILS_PER_HOUR
,CAST(ISNULL(GG.UNAVAILABLE_EMAIL_TIME_SECS	,0.00) AS DECIMAL(10,2))	AS UNAVAILABLE_EMAIL_TIME_SECS
,ISNULL(GG.TOTAL_EMAILS_PER_HOUR			,0.00)						AS TOTAL_EMAILS_PER_HOUR

FROM  -- GG STARTS HERE:
(	SELECT
	-- ISNULL(SW.ID_EXT,'')             AS ID_EXT
	--,ISNULL(SW.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
	 ISNULL(SW.EMPLOYEE_ID,'')		  AS EMPLOYEE_ID
	,MAX(RESOURCE_NAME)               AS RESOURCE_NAME

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) AS TI

	,SUM(ISNULL(SW.LOGIN_TIME					,0.00))	AS LOGIN_TIME
	,SUM(ISNULL(SW.AVAILABLE_TIME				,0.00))	AS AVAILABLE_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_EMAIL_TIME		,0.00))	AS UNAVAILABLE_EMAIL_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_SUPERVISOR_TIME	,0.00))	AS UNAVAILABLE_SUPERVISOR_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_TIME_MINUS_ACW	,0.00))	AS UNAVAILABLE_TIME_MINUS_ACW
	,SUM(ISNULL(SW.TALK_TIME					,0.00))	AS TALK_TIME
	,SUM(ISNULL(SW.HOLD_TIME					,0.00))	AS HOLD_TIME
	,SUM(ISNULL(SW.ACW_TIME						,0.00))	AS ACW_TIME
	,SUM(ISNULL(SW.TRUE_OUTBOUND_TALK_TIME		,0.00))	AS TRUE_OUTBOUND_TALK_TIME
	,SUM(ISNULL(SW.TOTAL_TALK					,0.00))	AS TOTAL_TALK
	,SUM(ISNULL(SW.CPROD						,0.00))	AS CPROD
	,SUM(ISNULL(SW.MING							,0.00))	AS MING
	,SUM(ISNULL(SW.AUT2							,0.00))	AS AUT2

	,SUM(ISNULL(SW.MODIFIED_EMAIL_COUNT			,0   )) AS MODIFIED_EMAIL_COUNT
	,SUM(ISNULL(SW.EMAILS_PER_HOUR				,0.00))	AS EMAILS_PER_HOUR
	,SUM(ISNULL(SW.UNAVAILABLE_EMAIL_TIME_SECS	,0.00)) AS UNAVAILABLE_EMAIL_TIME_SECS
	,0.00												AS TOTAL_EMAILS_PER_HOUR  --<<<<< VALUE CALCULATED BELOW
	
	FROM            #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_REPORTS	SW
	INNER JOIN      DATE_TIME									DT   ON DT.DATE_TIME_KEY = SW.STD_TENANT_START_DATE_TIME_KEY
													 
	--WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END		  --AND (@TENANT_KEY   IN ('0','') OR SW.TENANT_KEY   = CAST(@TENANT_KEY AS INT) )

	GROUP BY 
	-- ISNULL(SW.ID_EXT,'')             --AS ID_EXT
	--,ISNULL(SW.SCHEDULER_ACL_NAME,'') --AS SCHEDULER_ACL_NAME
	 ISNULL(SW.EMPLOYEE_ID,'')		  --AS EMPLOYEE_ID

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) --AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) --AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) --AS TI

	--,(ISNULL(SW.FF_AGENT_NAME,''))         --AS FF_AGENT_NAME
	--,(ISNULL(SW.FF_USER_NAME,''))          --AS FF_USER_NAME

) GG

--==================================
--RETURN DATA
--==================================

--======================================================
--UPDATE TOTAL EMAILS PER HOUR:
--======================================================
UPDATE #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_REPORTS_RTN SET
 TOTAL_EMAILS_PER_HOUR = ISNULL(LOJ.TOTAL_EMAILS_PER_HOUR,0.00)
FROM #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_REPORTS_RTN TA
LEFT OUTER JOIN
(	SELECT
	 EMPLOYEE_ID
	,CASE WHEN SUM(UNAVAILABLE_EMAIL_TIME_SECS) > 0 THEN 
		   (SUM(MODIFIED_EMAIL_COUNT) / SUM(UNAVAILABLE_EMAIL_TIME_SECS)) * 3600.00
		  ELSE 0.00
	 END AS TOTAL_EMAILS_PER_HOUR
	FROM #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_REPORTS_RTN 
	GROUP BY 
	 EMPLOYEE_ID
) LOJ ON LOJ.EMPLOYEE_ID = TA.EMPLOYEE_ID
	 
--==================================
--POPULATE TABLE READ BY SSIS TO GET END DATE OF DATA REPORT/FILE HAS BEEN RUN FOR:
--==================================
INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
SELECT
 'uspIMPORTS_WV_EMAIL_RESOLVED_WEEKLY_REPORTS'				--SQL_JOB_NAME
,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,111),'/','')  --FILENM   YYYYMMDD_...
,dbo.getdate()  --CST_ROW_CREATED_TIME

--=====================================
--RETURN DATASET:
--=====================================
SELECT 
 CASE WHEN @DUR_IN = 'SS' THEN '' ELSE 'F' END AS DUR_FORMAT
,CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
,V.*

FROM      #IMPORTS_WV_EMAIL_RESOLVED_WEEKLY_REPORTS_RTN  V

ORDER BY 
 V.GRPNO
--,V.SCHEDULER_ACL_NAME
,V.RESOURCE_NAME
,V.EMPLOYEE_ID
,V.CAL_YEAR_MONTH_NUM
,V.DATE_INTERVAL
,V.TIME_INTERVAL  --SINCE IN MILITARY TIME!




--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_WV_IMPORT_STATUS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_WV_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_WV_IMPORT_STATUS] '11/16/2016','11/30/2016','','B'

--========================================
-- SET DATE VARIABLES
--========================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE 
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE 
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--=========================================================================
--CREATE TMP TABLE:
--=========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_WV_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_WV_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_WV_IMPORT_STATUS
(FILEDATETIME			VARCHAR(20)
,FTP_FILE_NAME			VARCHAR(100)
,CST_ROW_CREATED_TIME	DATETIME
,RCD_CNT				INT
,INT_CNT				INT
)

--========================================================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================================================
    INSERT INTO #IMPORTS_WV_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'') AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0) AS RCD_CNT
	,ISNULL(UA.INT_CNT,0) AS INT_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		,COUNT(DISTINCT C.HOUR_INTERVAL)						AS INT_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING   C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
--		AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )  -- USE IF YOU WANT TO IGNORE WEEKENDS

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME)
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')
		,C.WS_ROW_CREATED_TIME
	) UA

--================================================================================
--CREATE CURSOR TO CHECK FOR MISSING DATES
--================================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

--FOR 'WEEKEND' CODE/FILTER:!!!
--LEFT JOIN WSOL_TB_IMPORTS_WV_INVOICING  C ON   C.STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1)

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_WV_IMPORT_STATUS   I   ON I.FILEDATETIME = DT.FILEDATETIME

--LEFT JOIN       DATE_TIME                    DT2 ON CONVERT(VARCHAR(10),DT2.CAL_DATE,101) = CONVERT(VARCHAR(10),DT.FILEDATETIME,101)
--FOR 'WEEKEND' CODE/FILTER:!!!
--LEFT JOIN       WSOL_TB_IMPORTS_WV_INVOICING  C   ON C.STD_TENANT_START_DATE_TIME_KEY = DT2.DATE_TIME_KEY

--WHERE ISNULL(I.FTP_FILE_NAME,'') = ''  -- ISNULL(I.FILEDATETIME,'1.1.1900') = ''

WHERE ISNULL(I.RCD_CNT,0) = 0
--  AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)  -- WORLD VENTURES AGENTS WORKING EMAIL ON WEEKENDS
--  AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B'
	BEGIN

		SET @MSG1 = ''

		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1
			BEGIN
				SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
				IF @RCD_CNT > 0
					BEGIN
						SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
						SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

						SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
						SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 9:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
					END
				ELSE
					BEGIN
						SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
					END
			END
		ELSE 
			BEGIN
				SET @MSG1 = 'Imported file(s) from ' 
					+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
				
				IF @RCD_CNT > 0
					BEGIN
						SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
					END
				ELSE
					BEGIN
						SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
					END
			END
	
	END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--WESTERN DENTAL:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM WSOL_TB_IMPORT_ERRORS_FOUND
							   WHERE TENANT_KEY = 900902 AND SUB_GROUP_NAME = 'WORLD_VENTURES_INVOICING' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_WV_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_WV_IMPORT_STATUS_MISSING_DATA]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_WV_IMPORT_STATUS_MISSING_DATA]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_WV_IMPORT_STATUS_MISSING_DATA] '11/01/2016','11/30/2016','','B'

--==============================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==============================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME

IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE 
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--========================================================================
--CREATE TMP TABLE:
--========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_WV_IMPORT_STATUS_MISSING_DATA') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_WV_IMPORT_STATUS_MISSING_DATA
END
CREATE TABLE #IMPORTS_WV_IMPORT_STATUS_MISSING_DATA
(FILEDATETIME			VARCHAR(20)
,FTP_FILE_NAME			VARCHAR(100)
,CST_ROW_CREATED_TIME	DATETIME
,RCD_CNT				INT
,INT_CNT				INT
)

--========================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================
    INSERT INTO #IMPORTS_WV_IMPORT_STATUS_MISSING_DATA
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													--AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												--AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')															--AS RCD_CNT
	,ISNULL(UA.INT_CNT,'')															--AS INT_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		,COUNT(DISTINCT C.HOUR_INTERVAL)						AS INT_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING   C

		INNER JOIN      DATE_TIME                      DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT
,INT_CNT     
,'White' AS BG_COLOR

FROM #IMPORTS_WV_IMPORT_STATUS_MISSING_DATA

ORDER BY
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT
,INT_CNT   


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_WV_INCONTACT_AGENT_INVOICING_REPORTS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_WV_INCONTACT_AGENT_INVOICING_REPORTS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@SCHEDULER_GROUP    VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300) --Hid. Def=' '
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'  MANual,SUBscription
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='INV'
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='INV'  
AS
SET NOCOUNT ON    

--  EXECUTE [dbo].[uspIMPORTS_WV_INCONTACT_AGENT_INVOICING_DETAIL] '11/16/2016','11/30/2016','0','0','0','0','HR','Y','SS','NM','Y','4','MAN','INV','INV'

--	@TIME_INTERVAL:  Can show invoicing report at hourly, daily level, or higher !!!

--	Durations in FTP FILE are in seconds.  Therefore, reporting may be in seconds, minutes, or hours.

--  SELECT * FROM WSOL_TB_IMPORTS_WV_SD_INVOICE_GROUPS
--  SELECT * FROM WSOL_TB_IMPORTS_WV_UV_ANT_AIA


--========================================================================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) 
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) -- + 1
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
END
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

DECLARE
 @MTD_BEG AS DATETIME
,@MTD_END AS DATETIME  --,@YTD_BEG AS DATETIME--,@YTD_END AS DATETIME
SET @MTD_BEG = CAST(CAST(DATEPART(mm,@DTM_BEG) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)
SET @MTD_END = @DTM_END  

IF @TIME_INTERVAL IN ('MR','MD') BEGIN  --MONTH DETERMINED BY @DTM_BEG.
	SET @DTM_BEG = @MTD_BEG
	SET @DTM_END = @MTD_END
END

--==================================
--SET AMOUNT TO DIVIDE BY:
--==================================
DECLARE @DS DECIMAL(10,2)  --SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.00     --DIVIDE SECONDS BY 1  TO GET SAME, SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
    SET @DS = 60.00    --DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
    SET @DS = 3600.00  --DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_WV_INCONTACT_AGENT_INVOICING_REPORTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_WV_INCONTACT_AGENT_INVOICING_REPORTS
END
CREATE TABLE #IMPORTS_WV_INCONTACT_AGENT_INVOICING_REPORTS
(TENANT_NAME            VARCHAR(50)
,ID_EXT                 VARCHAR(3)
,SCHEDULER_ACL_NAME     VARCHAR(100)  
,EMPLOYEE_ID            VARCHAR(50)
,STD_TENANT_START_DATE_TIME_KEY INT
,RESOURCE_NAME          VARCHAR(100)

,AIR_DAY_TYPE           varchar(1)
,AIR_ACW_FONT_COLOR     varchar(50)
,MIN_GUARANTEE_MINUTES  decimal(6,3)
,MIN_GUARANTEE_TYPE     varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE varchar(50)
,HAS_HOLIDAYS           varchar(1)
,INCLUDE_IN_CAS         varchar(1)
,READY_FOR_XML          varchar(1)
,SHOW_ID_EXTS           varchar(1)
,
[LOGIN_TIME] [decimal](10, 2) NULL,
[AVAILABLE_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_EMAIL_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_SUPERVISOR_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_SYSTEM_PENDING_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_HELD_PARTY_ABANDONED_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_MANUAL_OUTBOUND_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_NON_BILLABLE_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_TIME_MINUS_ACW] [decimal](10, 2) NULL,
[TALK_TIME] [decimal](10, 2) NULL,
[HOLD_TIME] [decimal](10, 2) NULL,
[ACW_TIME] [decimal](10, 2) NULL,
[CONSULT_TIME] [decimal](10, 2) NULL,
[TRUE_OUTBOUND_TALK_TIME] [decimal](10, 2) NULL,
[TOTAL_TALK] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MING] [decimal](10, 2) NULL,
[AUT2] [decimal](10, 2) NULL,
)

INSERT INTO #IMPORTS_WV_INCONTACT_AGENT_INVOICING_REPORTS
SELECT
 'WORLD VENTURES'	--T.TENANT_NAME
,''					--UAA.ACD_ID_EXTENSION
,UAA.SCHEDULER_ACL_NAME
,UAA.EMPLOYEE_ID
,UAA.STD_TENANT_START_DATE_TIME_KEY
,UAA.RESOURCE_NAME

,(ISNULL(UAA.AIR_DAY_TYPE,''))					--AS AIR_DAY_TYPE
,(ISNULL(UAA.AIR_ACW_FONT_COLOR,''))			--AS AIR_ACW_FONT_COLOR
,(ISNULL(UAA.MIN_GUARANTEE_MINUTES,0.000))		--AS MIN_GUARANTEE_MINUTES
,(ISNULL(UAA.MIN_GUARANTEE_TYPE,''))			--AS MIN_GUARANTEE_TYPE
,(ISNULL(UAA.AUTHORIZED_TO_INVOICE_TYPE,''))	--AS AUTHORIZED_TO_INVOICE_TYPE
,(ISNULL(UAA.HAS_HOLIDAYS,''))					--AS HAS_HOLIDAYS
,(ISNULL(UAA.INCLUDE_IN_CAS,''))				--AS INCLUDE_IN_CAS
,(ISNULL(UAA.READY_FOR_XML,''))					--AS READY_FOR_XML
,(ISNULL(UAA.SHOW_ID_EXTS,''))					--AS SHOW_ID_EXTS

,(ISNULL(UAA.LOGIN_TIME								,0.00))
,(ISNULL(UAA.AVAILABLE_TIME							,0.00))
,(ISNULL(UAA.UNAVAILABLE_EMAIL_TIME					,0.00))
,(ISNULL(UAA.UNAVAILABLE_SUPERVISOR_TIME			,0.00))
,(ISNULL(UAA.UNAVAILABLE_SYSTEM_PENDING_TIME		,0.00))
,(ISNULL(UAA.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME	,0.00))
,(ISNULL(UAA.UNAVAILABLE_MANUAL_OUTBOUND_TIME		,0.00))
,(ISNULL(UAA.UNAVAILABLE_NON_BILLABLE_TIME			,0.00))
,(ISNULL(UAA.UNAVAILABLE_TIME_MINUS_ACW				,0.00))
,(ISNULL(UAA.TALK_TIME								,0.00))
,(ISNULL(UAA.HOLD_TIME								,0.00))
,(ISNULL(UAA.ACW_TIME								,0.00))
,(ISNULL(UAA.CONSULT_TIME							,0.00))
,(ISNULL(UAA.TRUE_OUTBOUND_TALK_TIME				,0.00))
,(ISNULL(UAA.TOTAL_TALK								,0.00))
,(ISNULL(UAA.CPROD									,0.00))
,(ISNULL(UAA.MING									,0.00))
,(ISNULL(UAA.AUT2									,0.00))

--DATASOURCES FOR DURATION FIELDS, IN SECONDS, IN HOUR INTERVALS:
--SELECT * FROM WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING

FROM
(	SELECT	
	-- UA.TENANT_KEY
	 ''									AS ACD_ID_EXTENSION
	,UA.INVOICE_ID					    AS SCHEDULER_ACL_NAME
	,UA.FF_AGENT_NAME					AS EMPLOYEE_ID 
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,MAX(UA.RESOURCE_NAME)              AS RESOURCE_NAME
	,MAX(UA.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,'BLACK'                            AS AIR_ACW_FONT_COLOR
	,0									AS MIN_GUARANTEE_MINUTES
	,''									AS MIN_GUARANTEE_TYPE
	,''									AS AUTHORIZED_TO_INVOICE_TYPE
	,'Y'								AS HAS_HOLIDAYS
	,''									AS INCLUDE_IN_CAS
	,''									AS READY_FOR_XML
	,''									AS SHOW_ID_EXTS

	,SUM(ISNULL(UA.LOGIN_TIME							,0.00))	AS LOGIN_TIME
	,SUM(ISNULL(UA.AVAILABLE_TIME						,0.00))	AS AVAILABLE_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_EMAIL_TIME				,0.00))	AS UNAVAILABLE_EMAIL_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_SUPERVISOR_TIME			,0.00)) AS UNAVAILABLE_SUPERVISOR_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_SYSTEM_PENDING_TIME		,0.00)) AS UNAVAILABLE_SYSTEM_PENDING_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME,0.00)) AS UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_MANUAL_OUTBOUND_TIME		,0.00)) AS UNAVAILABLE_MANUAL_OUTBOUND_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_NON_BILLABLE_TIME		,0.00)) AS UNAVAILABLE_NON_BILLABLE_TIME
	,SUM(ISNULL(UA.UNAVAILABLE_TIME_MINUS_ACW			,0.00))	AS UNAVAILABLE_TIME_MINUS_ACW
	,SUM(ISNULL(UA.TALK_TIME							,0.00))	AS TALK_TIME
	,SUM(ISNULL(UA.HOLD_TIME							,0.00))	AS HOLD_TIME
	,SUM(ISNULL(UA.ACW_TIME								,0.00))	AS ACW_TIME
	,SUM(ISNULL(UA.CONSULT_TIME							,0.00)) AS CONSULT_TIME
	,SUM(ISNULL(UA.TRUE_OUTBOUND_TALK_TIME				,0.00))	AS TRUE_OUTBOUND_TALK_TIME
	,SUM(ISNULL(UA.TOTAL_TALK							,0.00))	AS TOTAL_TALK
	,SUM(ISNULL(UA.CPROD								,0.00))	AS CPROD
	,SUM(ISNULL(UA.MING									,0.00))	AS MING
	,SUM(ISNULL(UA.AUT2									,0.00))	AS AUT2
	
	--  SELECT *
	FROM            WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING	UA
	INNER JOIN      DATE_TIME								DT	ON DT.DATE_TIME_KEY = UA.STD_TENANT_START_DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
		
	GROUP BY 
	 UA.INVOICE_ID
	,UA.FF_AGENT_NAME
	,UA.STD_TENANT_START_DATE_TIME_KEY
) UAA

--==============================================================
-- CREATE TEMPORARY TABLE TO RETURN RESULTS
--==============================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_WV_INCONTACT_AGENT_INVOICING_REPORTS_RTN') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_WV_INCONTACT_AGENT_INVOICING_REPORTS_RTN
END
CREATE TABLE #IMPORTS_WV_INCONTACT_AGENT_INVOICING_REPORTS_RTN
(GRPNO                 INT
,TENANT_NAME           VARCHAR(50)
,ID_EXT                VARCHAR(3)
,SCHEDULER_ACL_NAME    VARCHAR(100)
,EMPLOYEE_ID           VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,CAL_YEAR_MONTH_NUM    VARCHAR(10)
,DATE_INTERVAL         VARCHAR(50)
,TIME_INTERVAL         VARCHAR(10)

,AIR_DAY_TYPE				varchar(1)
,AIR_ACW_FONT_COLOR			varchar(50)
,MIN_GUARANTEE_MINUTES		decimal(6,3)
,MIN_GUARANTEE_TYPE			varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE	varchar(50)
,HAS_HOLIDAYS				varchar(1)
,INCLUDE_IN_CAS				varchar(1)
,READY_FOR_XML				varchar(1)
,SHOW_ID_EXTS				varchar(1)

,AIR_HOLIDAY_IN				VARCHAR(1)
,ALL_AUTHORIZED_TIME		DECIMAL(10,2)

,
[LOGIN_TIME] [decimal](10, 2) NULL,
[AVAILABLE_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_EMAIL_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_SUPERVISOR_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_SYSTEM_PENDING_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_HELD_PARTY_ABANDONED_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_MANUAL_OUTBOUND_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_NON_BILLABLE_TIME] [decimal](10, 2) NULL,
[UNAVAILABLE_TIME_MINUS_ACW] [decimal](10, 2) NULL,
[TALK_TIME] [decimal](10, 2) NULL,
[HOLD_TIME] [decimal](10, 2) NULL,
[ACW_TIME] [decimal](10, 2) NULL,
[CONSULT_TIME] [decimal](10, 2) NULL,
[TRUE_OUTBOUND_TALK_TIME] [decimal](10, 2) NULL,
[TOTAL_TALK] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MING] [decimal](10, 2) NULL,
[AUT2] [decimal](10, 2) NULL,
)

--==================================
-- POPULATE TEMPORARY TABLE
--==================================
INSERT INTO #IMPORTS_WV_INCONTACT_AGENT_INVOICING_REPORTS_RTN
SELECT
 20								--AS GRPNO  
,ISNULL(GG.TENANT_NAME       ,'') AS TENANT_NAME
,ISNULL(GG.ID_EXT            ,'') AS ID_EXT
,ISNULL(GG.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
,ISNULL(GG.EMPLOYEE_ID       ,'') AS EMPLOYEE_ID
,ISNULL(GG.RESOURCE_NAME     ,'') AS RESOURCE_NAME
,ISNULL(GG.CAL_YEAR_MONTH_NUM,'') AS CAL_YEAR_MONTH_NUM
,ISNULL(GG.DI                ,'') AS DI
,ISNULL(GG.TI                ,'') AS TI

,(GG.AIR_DAY_TYPE)                AS AIR_DAY_TYPE
,(GG.AIR_ACW_FONT_COLOR)          AS AIR_ACW_FONT_COLOR
,(GG.MIN_GUARANTEE_MINUTES)       AS MIN_GUARANTEE_MINUTES
,(GG.MIN_GUARANTEE_TYPE)          AS MIN_GUARANTEE_TYPE
,(GG.AUTHORIZED_TO_INVOICE_TYPE)  AS AUTHORIZED_TO_INVOICE_TYPE
,(GG.HAS_HOLIDAYS)                AS HAS_HOLIDAYS
,(GG.INCLUDE_IN_CAS)              AS INCLUDE_IN_CAS
,(GG.READY_FOR_XML)               AS READY_FOR_XML
,(GG.SHOW_ID_EXTS)                AS SHOW_ID_EXTS

,'' --AS AIR_HOLIDAY_IN
,0  --AS ALL_AUTHORIZED_TIME

,CAST((ISNULL(GG.LOGIN_TIME								,0.00)) / @DS AS DECIMAL(10,2))	AS LOGIN_TIME
,CAST((ISNULL(GG.AVAILABLE_TIME							,0.00)) / @DS AS DECIMAL(10,2))	AS AVAILABLE_TIME
,CAST((ISNULL(GG.UNAVAILABLE_EMAIL_TIME					,0.00)) / @DS AS DECIMAL(10,2))	AS UNAVAILABLE_EMAIL_TIME
,CAST((ISNULL(GG.UNAVAILABLE_SUPERVISOR_TIME			,0.00)) / @DS AS DECIMAL(10,2))	AS UNAVAILABLE_SUPERVISOR_TIME
,CAST((ISNULL(GG.UNAVAILABLE_SYSTEM_PENDING_TIME		,0.00)) / @DS AS DECIMAL(10,2)) AS UNAVAILABLE_SYSTEM_PENDING_TIME
,CAST((ISNULL(GG.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME	,0.00)) / @DS AS DECIMAL(10,2)) AS UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,CAST((ISNULL(GG.UNAVAILABLE_MANUAL_OUTBOUND_TIME		,0.00)) / @DS AS DECIMAL(10,2)) AS UNAVAILABLE_MANUAL_OUTBOUND_TIME
,CAST((ISNULL(GG.UNAVAILABLE_NON_BILLABLE_TIME			,0.00)) / @DS AS DECIMAL(10,2))	AS UNAVAILABLE_NON_BILLABLE_TIME
,CAST((ISNULL(GG.UNAVAILABLE_TIME_MINUS_ACW				,0.00)) / @DS AS DECIMAL(10,2))	AS UNAVAILABLE_TIME_MINUS_ACW
,CAST((ISNULL(GG.TALK_TIME								,0.00)) / @DS AS DECIMAL(10,2))	AS TALK_TIME
,CAST((ISNULL(GG.HOLD_TIME								,0.00)) / @DS AS DECIMAL(10,2))	AS HOLD_TIME
,CAST((ISNULL(GG.ACW_TIME								,0.00)) / @DS AS DECIMAL(10,2))	AS ACW_TIME
,CAST((ISNULL(GG.CONSULT_TIME							,0.00)) / @DS AS DECIMAL(10,2)) AS CONSULT_TIME
,CAST((ISNULL(GG.TRUE_OUTBOUND_TALK_TIME				,0.00)) / @DS AS DECIMAL(10,2))	AS TRUE_OUTBOUND_TALK_TIME
,CAST((ISNULL(GG.TOTAL_TALK								,0.00)) / @DS AS DECIMAL(10,2))	AS TOTAL_TALK
,CAST((ISNULL(GG.CPROD									,0.00)) / @DS AS DECIMAL(10,2))	AS CPROD
,CAST((ISNULL(GG.MING									,0.00)) / @DS AS DECIMAL(10,2))	AS MING
,CAST((ISNULL(GG.AUT2									,0.00)) / @DS AS DECIMAL(10,2))	AS AUT2


FROM  -- GG STARTS HERE:
(	SELECT
	 ISNULL(SW.TENANT_NAME,'')        AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  AS EMPLOYEE_ID
	,MAX(RESOURCE_NAME)               AS RESOURCE_NAME

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) AS TI

	,MAX(SW.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,MAX(SW.AIR_ACW_FONT_COLOR)         AS AIR_ACW_FONT_COLOR
	,MAX(SW.MIN_GUARANTEE_MINUTES)      AS MIN_GUARANTEE_MINUTES
	,MAX(SW.MIN_GUARANTEE_TYPE)         AS MIN_GUARANTEE_TYPE
	,MAX(SW.AUTHORIZED_TO_INVOICE_TYPE) AS AUTHORIZED_TO_INVOICE_TYPE
	,MAX(SW.HAS_HOLIDAYS)               AS HAS_HOLIDAYS
	,MAX(SW.INCLUDE_IN_CAS)             AS INCLUDE_IN_CAS
	,MAX(SW.READY_FOR_XML)              AS READY_FOR_XML
	,MAX(SW.SHOW_ID_EXTS)               AS SHOW_ID_EXTS

	,SUM(ISNULL(SW.LOGIN_TIME							,0.00))	AS LOGIN_TIME
	,SUM(ISNULL(SW.AVAILABLE_TIME						,0.00))	AS AVAILABLE_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_EMAIL_TIME				,0.00))	AS UNAVAILABLE_EMAIL_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_SUPERVISOR_TIME			,0.00))	AS UNAVAILABLE_SUPERVISOR_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_SYSTEM_PENDING_TIME		,0.00)) AS UNAVAILABLE_SYSTEM_PENDING_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME,0.00)) AS UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_MANUAL_OUTBOUND_TIME		,0.00)) AS UNAVAILABLE_MANUAL_OUTBOUND_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_NON_BILLABLE_TIME		,0.00))	AS UNAVAILABLE_NON_BILLABLE_TIME
	,SUM(ISNULL(SW.UNAVAILABLE_TIME_MINUS_ACW			,0.00))	AS UNAVAILABLE_TIME_MINUS_ACW
	,SUM(ISNULL(SW.TALK_TIME							,0.00))	AS TALK_TIME
	,SUM(ISNULL(SW.HOLD_TIME							,0.00))	AS HOLD_TIME
	,SUM(ISNULL(SW.ACW_TIME								,0.00))	AS ACW_TIME
	,SUM(ISNULL(SW.CONSULT_TIME							,0.00)) AS CONSULT_TIME
	,SUM(ISNULL(SW.TRUE_OUTBOUND_TALK_TIME				,0.00))	AS TRUE_OUTBOUND_TALK_TIME
	,SUM(ISNULL(SW.TOTAL_TALK							,0.00))	AS TOTAL_TALK
	,SUM(ISNULL(SW.CPROD								,0.00))	AS CPROD
	,SUM(ISNULL(SW.MING									,0.00))	AS MING
	,SUM(ISNULL(SW.AUT2									,0.00))	AS AUT2
	
	FROM            #IMPORTS_WV_INCONTACT_AGENT_INVOICING_REPORTS	SW
	INNER JOIN      DATE_TIME										DT   ON DT.DATE_TIME_KEY = SW.STD_TENANT_START_DATE_TIME_KEY
													 
	--WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END		  --AND (@TENANT_KEY   IN ('0','') OR SW.TENANT_KEY   = CAST(@TENANT_KEY AS INT) )

	GROUP BY 
	 ISNULL(SW.TENANT_NAME,'')        --AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             --AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') --AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  --AS EMPLOYEE_ID

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) --AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) --AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) --AS TI

	--,(ISNULL(SW.FF_AGENT_NAME,''))         --AS FF_AGENT_NAME
	--,(ISNULL(SW.FF_USER_NAME,''))          --AS FF_USER_NAME

) GG

--==================================
--IS A HOLIDAY DATE IN THE MIX:
--==================================
DECLARE @HOLIDAY_IN VARCHAR(1)
SET @HOLIDAY_IN = 'N'
DECLARE @I INT
SET @I = (SELECT COUNT(*) FROM #IMPORTS_WV_INCONTACT_AGENT_INVOICING_REPORTS_RTN WHERE AIR_DAY_TYPE = 'H')  --  AND INCLUDE_IN_CAS = 'Y')
IF @I > 0 BEGIN
	SET @HOLIDAY_IN = 'Y'
END
--==================================
UPDATE #IMPORTS_WV_INCONTACT_AGENT_INVOICING_REPORTS_RTN SET
 AIR_HOLIDAY_IN = @HOLIDAY_IN

--======================================================
--UPDATE TOTALS LINE ON REPORT FOR STANDARD AND HOLIDAY:
--======================================================
UPDATE #IMPORTS_WV_INCONTACT_AGENT_INVOICING_REPORTS_RTN SET
 ALL_AUTHORIZED_TIME = ISNULL(LOJ.ALL_AUTHORIZED_TIME,0.0)
FROM #IMPORTS_WV_INCONTACT_AGENT_INVOICING_REPORTS_RTN TA
LEFT OUTER JOIN
(	SELECT
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
	,SUM(AUT2) AS ALL_AUTHORIZED_TIME
	FROM #IMPORTS_WV_INCONTACT_AGENT_INVOICING_REPORTS_RTN 
	GROUP BY 
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
) LOJ ON LOJ.SCHEDULER_ACL_NAME = TA.SCHEDULER_ACL_NAME
	 AND LOJ.EMPLOYEE_ID        = TA.EMPLOYEE_ID
	 --AND LOJ.RESOURCE_NAME		= TA.RESOURCE_NAME
	 AND LOJ.AIR_DAY_TYPE       = TA.AIR_DAY_TYPE

--==================================
--RETURN DATA
--==================================
--==================================
--POPULATE TABLE READ BY SSIS TO GET END DATE OF DATA REPORT/FILE HAS BEEN RUN FOR:
--==================================
INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
SELECT
 'uspIMPORTS_WV_INCONTACT_AGENT_INVOICING_REPORTS'				--SQL_JOB_NAME
,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,111),'/','')  --FILENM   YYYYMMDD_...
,dbo.getdate()  --CST_ROW_CREATED_TIME

--=====================================
--RETURN DATASET:
--=====================================
SELECT 
 CASE WHEN @DUR_IN = 'SS' THEN '' ELSE 'F' END AS DUR_FORMAT
,CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
,V.*

FROM      #IMPORTS_WV_INCONTACT_AGENT_INVOICING_REPORTS_RTN  V

ORDER BY 
 V.GRPNO
,V.SCHEDULER_ACL_NAME
,V.RESOURCE_NAME
,V.EMPLOYEE_ID
,V.CAL_YEAR_MONTH_NUM
,V.DATE_INTERVAL
,V.TIME_INTERVAL  --SINCE IN MILITARY TIME!




--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_WV_INCONTACT_INVOICING_IMPORT]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_WV_INCONTACT_INVOICING_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_WV_INCONTACT_INVOICING_IMPORT]

--  SELECT * FROM WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1

--	Durations in the data file are in seconds in 30 minute intervals
--  Reporting available in seconds, minutes, and hours.

--===================================================================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY = 900902  --WORLD VENTURES
--===================================================================================
DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND
WHERE TENANT_KEY		= @TENANT_KEY
  AND SUB_GROUP_NAME	= 'WORLD_VENTURES_INVOICING'
  --  SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 900902
--===================================================================================

--=========================================================================================================
--  USING @WS_ROW_CREATED_TIME FOR ALL INSERTS WILL ALLOW ME TO DELETE SPECIFIC INSERT PROCESSES/FILES.
--  IN CASE OF EMERGENCY, BREAK GLASS.
--=========================================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.getdate()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===================================================================================

--===================================================================================
--HANDLE COLUMN HEADER AND JUNK RECORDS:
--===================================================================================

		--<<<<< HEADER ROWS REMOVED AT IMPORT TIME >>>>>--

--======================================================================
--DELETE COLUMN HEADER AND JUNK RECORDS;
--======================================================================

--===================================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_1) TABLE THAT WEREN'T IN IMPORTED FILE:
--===================================================================================
UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1 SET
 [DATETIME]					= CAST(CONVERT(VARCHAR(10), FF_DATE) + ' ' + CONVERT(VARCHAR(2), LEFT(FF_INTERVAL_30_MINUTES,2)) + ':00:00' AS DATETIME)
,HOUR_INTERVAL				= CONVERT(VARCHAR(2), LEFT(FF_INTERVAL_30_MINUTES,2))
,AGENT_NAME					= ISNULL(FF_AGENT_NAME		,'')
,UNAVAILABLE_CODE			= ISNULL(FF_UNAVAILABLE_CODE,'')
,SKILL_NAME					= ISNULL(FF_SKILL_NAME		,'')
,TEAM_NAME					= ISNULL(FF_TEAM_NAME		,'')
,LOGIN_TIME					= CAST(ISNULL(NULLIF(FF_LOGIN_TIME					,''),'0.00') AS DECIMAL(10,2))
,AVAILABLE_TIME				= CAST(ISNULL(NULLIF(FF_AVAILABLE_TIME				,''),'0.00') AS DECIMAL(10,2)) 
,UNAVAILABLE_TIME_MINUS_ACW	= CAST(ISNULL(NULLIF(FF_UNAVAILABLE_TIME_MINUS_ACW	,''),'0.00') AS DECIMAL(10,2))
,HOLD_TIME					= CAST(ISNULL(NULLIF(FF_HOLD_TIME					,''),'0.00') AS DECIMAL(10,2))
,ACW_TIME					= CAST(ISNULL(NULLIF(FF_ACW_TIME					,''),'0.00') AS DECIMAL(10,2))
,CONSULT_TIME				= CAST(ISNULL(NULLIF(FF_CONSULT_TIME				,''),'0.00') AS DECIMAL(10,2))
,TALK_TIME					= CASE WHEN FF_SKILL_NAME = 'CS_Manual_OB' 
									THEN 0.00 
								   ELSE CAST(ISNULL(NULLIF(FF_TALK_TIME			,''),'0.00') AS DECIMAL(10,2))
							  END
,TENANT_KEY					= @TENANT_KEY

UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1 SET
 UNAVAILABLE_EMAIL_TIME				= CASE WHEN UNAVAILABLE_CODE = 'Email'					THEN UNAVAILABLE_TIME_MINUS_ACW ELSE 0.00 END
,UNAVAILABLE_NON_BILLABLE_TIME		= CASE WHEN UNAVAILABLE_CODE = 'Non-Billable Standby'	THEN UNAVAILABLE_TIME_MINUS_ACW ELSE 0.00 END
,UNAVAILABLE_SUPERVISOR_TIME		= CASE WHEN UNAVAILABLE_CODE = 'Supervisor Standby'		THEN UNAVAILABLE_TIME_MINUS_ACW ELSE 0.00 END

,UNAVAILABLE_SYSTEM_PENDING_TIME	= CASE WHEN UNAVAILABLE_CODE IN ( 'CallbackPending'
																	 ,'InboundPending'
																	 ,'OutboundPending'
																	 ,'PromisePending'
																	 ,'TransferPending'
																	 ,'ConsultPending'
																	)						THEN UNAVAILABLE_TIME_MINUS_ACW ELSE 0.00 END

,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME	= CASE WHEN UNAVAILABLE_CODE = 'HeldPartyAbandoned'	THEN UNAVAILABLE_TIME_MINUS_ACW ELSE 0.00 END
,UNAVAILABLE_MANUAL_OUTBOUND_TIME		= CASE WHEN UNAVAILABLE_CODE = 'Manual Outbound'	THEN UNAVAILABLE_TIME_MINUS_ACW ELSE 0.00 END

UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1 SET
 UNAVAILABLE_TIME_MINUS_ACW	= UNAVAILABLE_TIME_MINUS_ACW - UNAVAILABLE_EMAIL_TIME - UNAVAILABLE_NON_BILLABLE_TIME - UNAVAILABLE_SUPERVISOR_TIME -
							  UNAVAILABLE_SYSTEM_PENDING_TIME - UNAVAILABLE_HELD_PARTY_ABANDONED_TIME - UNAVAILABLE_MANUAL_OUTBOUND_TIME

--SELECT DISTINCT(FF_UNAVAILABLE_CODE) FROM WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_0_AUDIT

--===================================================================================================
-- UPDATE DATETIME KEY
--===================================================================================================
UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM		WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1	I
INNER JOIN	DATE_TIME									DT	ON DT.CAL_DATE = I.[DATETIME]

--===============================================
--HANDLE INVALID DATE/TIME RECORDS:
--===============================================
INSERT INTO WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_BAD
SELECT
 'DTM'					--BAD_IMPORTS_CODE		--'Invalid Date/Time'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_UNAVAILABLE_CODE
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_LOGIN_TIME
,W1.FF_AVAILABLE_TIME
,W1.FF_UNAVAILABLE_TIME_MINUS_ACW
,W1.FF_TALK_TIME
,W1.FF_HOLD_TIME
,W1.FF_ACW_TIME
,W1.FF_CONSULT_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.UNAVAILABLE_CODE
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.LOGIN_TIME
,W1.AVAILABLE_TIME
,W1.UNAVAILABLE_EMAIL_TIME
,W1.UNAVAILABLE_SUPERVISOR_TIME
,W1.UNAVAILABLE_SYSTEM_PENDING_TIME
,W1.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,W1.UNAVAILABLE_MANUAL_OUTBOUND_TIME
,W1.UNAVAILABLE_NON_BILLABLE_TIME
,W1.UNAVAILABLE_TIME_MINUS_ACW
,W1.TALK_TIME
,W1.HOLD_TIME
,W1.ACW_TIME
,W1.CONSULT_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR
,W1.PAY_GROUP

FROM           WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1    W1
WHERE ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) = 0

--======================================================================
--DELETE INVALID DATE/TIME RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================

--===========================================================================================================
--HANDLE DUPLICATES:
--===========================================================================================================
INSERT INTO WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_BAD
SELECT
 'DUP'					--BAD_IMPORTS_CODE		--'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_UNAVAILABLE_CODE
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_LOGIN_TIME
,W1.FF_AVAILABLE_TIME
,W1.FF_UNAVAILABLE_TIME_MINUS_ACW
,W1.FF_TALK_TIME
,W1.FF_HOLD_TIME
,W1.FF_ACW_TIME
,W1.FF_CONSULT_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.UNAVAILABLE_CODE
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.LOGIN_TIME
,W1.AVAILABLE_TIME
,W1.UNAVAILABLE_EMAIL_TIME
,W1.UNAVAILABLE_SUPERVISOR_TIME
,W1.UNAVAILABLE_SYSTEM_PENDING_TIME
,W1.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,W1.UNAVAILABLE_MANUAL_OUTBOUND_TIME
,W1.UNAVAILABLE_NON_BILLABLE_TIME
,W1.UNAVAILABLE_TIME_MINUS_ACW
,W1.TALK_TIME
,W1.HOLD_TIME
,W1.ACW_TIME
,W1.CONSULT_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_MINUTES
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR
,W1.PAY_GROUP

FROM
(	SELECT
	 FF_DATE
	,FF_INTERVAL_30_MINUTES
	,FF_AGENT_NAME
	,FF_UNAVAILABLE_CODE
	,FF_SKILL_NAME
	,FF_TEAM_NAME
	,ROW_NUMBER() over (partition by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_UNAVAILABLE_CODE, FF_SKILL_NAME, FF_TEAM_NAME
                            order by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_UNAVAILABLE_CODE, FF_SKILL_NAME, FF_TEAM_NAME, LOGIN_TIME DESC) ROWNO
	FROM WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1
) TNM
LEFT JOIN      WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1	W1   ON W1.FF_DATE					= TNM.FF_DATE
															AND W1.FF_INTERVAL_30_MINUTES	= TNM.FF_INTERVAL_30_MINUTES
															AND W1.FF_AGENT_NAME			= TNM.FF_AGENT_NAME
															AND W1.FF_UNAVAILABLE_CODE		= TNM.FF_UNAVAILABLE_CODE
															AND W1.FF_SKILL_NAME			= TNM.FF_SKILL_NAME
															AND W1.FF_TEAM_NAME				= TNM.FF_TEAM_NAME
WHERE TNM.ROWNO > 1

--===========================================================================================================
--DELETE DUPLICATES:
--===========================================================================================================
DELETE FROM TNM
FROM
(	SELECT
	 FF_DATE
	,FF_INTERVAL_30_MINUTES
	,FF_AGENT_NAME
	,FF_UNAVAILABLE_CODE
	,FF_SKILL_NAME
	,FF_TEAM_NAME
	,ROW_NUMBER() over (partition by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_UNAVAILABLE_CODE, FF_SKILL_NAME, FF_TEAM_NAME
                            order by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_UNAVAILABLE_CODE, FF_SKILL_NAME, FF_TEAM_NAME, LOGIN_TIME DESC) ROWNO
	FROM WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1
) TNM
WHERE TNM.ROWNO > 1
--===========================================================================================================

--===========================================================================================================
--UPDATE FIELDS FROM MAPPING DATA AND ADDITIONAL INVOICE FIELDS
--===========================================================================================================
UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1 SET
  EMAIL			= ISNULL(IAM.EMAIL,'')
 ,ID_EXT		= CASE WHEN IAM.INVOICE_GROUP = 'Resource'	THEN 'WVR'
					   WHEN IAM.INVOICE_GROUP = 'Spanish'	THEN 'WVB'
					   WHEN IAM.INVOICE_GROUP = ''			THEN 'WVS'
					   ELSE '' END
 ,PAY_GROUP		= ISNULL(IAM.PAY_GROUP,'')
 --SELECT *
 FROM            WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1	I
 LEFT JOIN       WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING		IAM  ON IAM.INVOICE_MAP_KEY = I.FF_AGENT_NAME

--SELECT * FROM WSOL_TB_IMPORTS_WV_AIA_AGENT_MAPPING

UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1 SET
 ID_EXT	= CASE WHEN FF_UNAVAILABLE_CODE = 'Email' AND ID_EXT IN ('WVS') THEN 'WVE' ELSE ID_EXT END

--===========================================================================================================
-- NO LONGER LIMITED BY SKILL - EFFECTIVE 06/08/2017 PER BRANDON MOLINA

--UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1 SET
-- ID_EXT = CASE WHEN ID_EXT = 'WVB' AND RIGHT(FF_SKILL_NAME,4) <> 'Span' THEN 'WVS'
--			   WHEN ID_EXT = 'WVB' AND RIGHT(FF_SKILL_NAME,4) =  'Span' THEN 'WVB'
--			   ELSE ID_EXT END
--===========================================================================================================

UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1 SET	-- SELECT
  AIR_DAY_TYPE = CASE WHEN IG.HAS_HOLIDAYS = 'Y' AND
						 (    ISNULL(IH.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) OR
						   ( ISNULL(IHA.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) AND ISNULL(IHA.ID_EXT,'') <> '' )
						 )
					  THEN 'H' ELSE 'S' END  --AS AIR_DAY_TYPE  --H=Holiday  --S=Standard
 FROM            WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1		I
 INNER JOIN      DATE_TIME										DT	ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY
 LEFT JOIN       WSOL_TB_IMPORTS_WV_SD_INVOICE_GROUPS			IG	ON IG.ID_EXT              = I.ID_EXT
 LEFT JOIN       WSOL_TB_IMPORTS_WV_SD_INVOICE_HOLIDAYS			IH	ON IH.HOLIDAY_DATE        = CAST(DT.CAL_DATE_STRING AS DATETIME)
 LEFT JOIN       WSOL_TB_IMPORTS_WV_SD_INVOICE_HOLIDAYS_ADDL	IHA ON IHA.HOLIDAY_DATE       = CAST(DT.CAL_DATE_STRING AS DATETIME)
																   AND IHA.ID_EXT             = I.ID_EXT


UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1 SET
 AIR_ACW_FONT_COLOR             = 'Black'
,MIN_GUARANTEE_MINUTES          = ISNULL(IG.MIN_GUARANTEE_MINUTES,0)        --varies between scheduler acl names.
,MIN_GUARANTEE_TYPE             = ISNULL(IG.MIN_GUARANTEE_TYPE,'')          --varies between scheduler acl names.
,AUTHORIZED_TO_INVOICE_TYPE     = ISNULL(IG.AUTHORIZED_TO_INVOICE_TYPE,'')  --varies between scheduler acl names.

,HAS_HOLIDAYS    = IG.HAS_HOLIDAYS
,INCLUDE_IN_CAS  = IG.INCLUDE_IN_CAS
,READY_FOR_XML   = IG.READY_FOR_XML
,SHOW_ID_EXTS    = IG.SHOW_ID_EXTS
FROM            WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1	I
LEFT JOIN       WSOL_TB_IMPORTS_WV_SD_INVOICE_GROUPS		IG  ON IG.ID_EXT    = I.ID_EXT
												

UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1 SET
 INVOICE_ID         = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
,SCHEDULER_ACL_NAME = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
FROM            WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1	AIA 
LEFT JOIN       WSOL_TB_IMPORTS_WV_SD_AIA_STATIC_DEFAULTS	AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
 
UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1 SET
 RESOURCE_NAME = RIGHT(FF_AGENT_NAME, LEN(FF_AGENT_NAME) - CHARINDEX(',', FF_AGENT_NAME) - 1) + ' ' + LEFT(FF_AGENT_NAME, CHARINDEX(',', FF_AGENT_NAME) -1)

--======================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .CSV FILES:
--======================================================================
--SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 900902
--======================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--Check #1:  ===================================================================================================
	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1)
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + 'ERROR!  File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	SELECT 
	 @TENANT_KEY				--TENANT_KEY
	,'WORLD_VENTURES_INVOICING'	--SUB_GROUP_NAME
	,@MSG1						--ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	--MUST RETURN AT LEAST ONE RECORD TO SSIS
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	SELECT 
	 @TENANT_KEY				--TENANT_KEY
	,'WORLD_VENTURES_INVOICING'	--SUB_GROUP_NAME
	,''							--ERROR_MSG
END

--===========================================================
--GROUP DATA BY HOURLY INTERVALS
--===========================================================
DELETE FROM WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2

INSERT INTO WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2
SELECT
 W1.FF_DATE
,NULL	--FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,NULL	--FF_UNAVAILABLE_CODE
,NULL	--FF_SKILL_NAME
,MAX(W1.TEAM_NAME)
,SUM(CAST(ISNULL(NULLIF(W1.FF_LOGIN_TIME				,''),0)	AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_AVAILABLE_TIME			,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_UNAVAILABLE_TIME_MINUS_ACW,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_TALK_TIME					,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_HOLD_TIME					,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_ACW_TIME					,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_CONSULT_TIME				,''),0) AS DECIMAL(10,2)))

,W1.SEQNO_ADDED_TIME
,MAX(W1.SEQNO)
,W1.FTP_FILE_NAME

,W1.[DATETIME]
,W1.HOUR_INTERVAL
,MAX(W1.AGENT_NAME)
,NULL						--UNAVAILABLE_CODE
,NULL						--SKILL_NAME
,MAX(W1.TEAM_NAME)
,SUM(ISNULL(W1.LOGIN_TIME							,0.00))
,SUM(ISNULL(W1.AVAILABLE_TIME						,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_EMAIL_TIME				,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_SUPERVISOR_TIME			,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_SYSTEM_PENDING_TIME		,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_MANUAL_OUTBOUND_TIME		,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_NON_BILLABLE_TIME		,0.00))
,SUM(ISNULL(W1.UNAVAILABLE_TIME_MINUS_ACW			,0.00))
,SUM(ISNULL(W1.TALK_TIME							,0.00))
,SUM(ISNULL(W1.HOLD_TIME							,0.00))
,SUM(ISNULL(W1.ACW_TIME								,0.00))
,SUM(ISNULL(W1.CONSULT_TIME							,0.00))
,SUM(ISNULL(W1.TRUE_OUTBOUND_TALK_TIME				,0.00))
,SUM(ISNULL(W1.TOTAL_TALK							,0.00)) --WILL BE CALCULATED WHEN TRUE OUTBOUND TALK DATA IS IMPORTED
,SUM(ISNULL(W1.CPROD								,0.00)) --WILL BE CALCULATED WHEN TRUE OUTBOUND TALK DATA IS IMPORTED
,SUM(ISNULL(W1.MING									,0.00))	--WILL BE CALCULATED WHEN TRUE OUTBOUND TALK DATA IS IMPORTED
,SUM(ISNULL(W1.AUT2									,0.00))	--WILL BE CALCULATED WHEN TRUE OUTBOUND TALK DATA IS IMPORTED
,MAX(W1.EMAIL)
,W1.ID_EXT
,MAX(W1.SCHEDULER_ACL_NAME)
,W1.STD_TENANT_START_DATE_TIME_KEY
,MAX(W1.CAL_DATE)
,900902
,MAX(W1.AIR_DAY_TYPE)
,MAX(W1.AIR_ACW_FONT_COLOR)
,MAX(W1.MIN_GUARANTEE_MINUTES)
,MAX(W1.MIN_GUARANTEE_TYPE)
,MAX(W1.AUTHORIZED_TO_INVOICE_TYPE)
,MAX(W1.HAS_HOLIDAYS)
,MAX(W1.INCLUDE_IN_CAS)
,MAX(W1.READY_FOR_XML)
,MAX(W1.SHOW_ID_EXTS)
,W1.INVOICE_ID
,MAX(W1.RESOURCE_NAME)
,SUM(ISNULL(W1.AIRITKDUR,0))
,SUM(ISNULL(W1.AIRIACDUR,0))
,W1.PAY_GROUP

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_1  W1

LEFT JOIN       WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2   G	ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
															   AND G.FF_AGENT_NAME                  = W1.FF_AGENT_NAME
--															   AND G.ID_EXT							= W1.ID_EXT

WHERE (G.FF_AGENT_NAME                     IS NULL AND ISNULL(W1.FF_AGENT_NAME,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	   IS NULL AND ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
--  AND (G.ID_EXT							   IS NULL AND ISNULL(W1.ID_EXT,'') <> '' )

GROUP BY
 W1.FF_DATE
,W1.FF_AGENT_NAME
,W1.SEQNO_ADDED_TIME
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.ID_EXT
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.INVOICE_ID
,W1.PAY_GROUP

ORDER BY
 W1.FF_AGENT_NAME
,W1.[DATETIME]

--=============================================
EARLY_EXIT:
--=============================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_WV_INCONTACT_OB_INVOICING_IMPORT]...';


GO


CREATE PROCEDURE [dbo].[uspIMPORTS_WV_INCONTACT_OB_INVOICING_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_WV_INCONTACT_OB_INVOICING_IMPORT]

--  SELECT * FROM WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_1

--	Durations in the data file are in seconds in 30 minute intervals
--  Reporting available in seconds, minutes, and hours.

--===================================================================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY = 900902  --WORLD VENTURES
--===================================================================================
DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND
WHERE TENANT_KEY		= @TENANT_KEY
  AND SUB_GROUP_NAME	= 'WORLD_VENTURES_INVOICING_OUTBOUND'
  --  SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 900902
--===================================================================================

--=========================================================================================================
--  USING @WS_ROW_CREATED_TIME FOR ALL INSERTS WILL ALLOW ME TO DELETE SPECIFIC INSERT PROCESSES/FILES.
--  IN CASE OF EMERGENCY, BREAK GLASS.
--=========================================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.getdate()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===================================================================================

--===================================================================================
--HANDLE COLUMN HEADER AND JUNK RECORDS:
--===================================================================================

		--<<<<< HEADER ROWS REMOVED AT IMPORT TIME >>>>>--

--======================================================================
--DELETE COLUMN HEADER AND JUNK RECORDS;
--======================================================================

--===================================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_1) TABLE THAT WEREN'T IN IMPORTED FILE:
--===================================================================================
UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_1 SET
 [DATETIME]		= CAST(CONVERT(VARCHAR(10), FF_DATE) + ' ' + CONVERT(VARCHAR(2), LEFT(FF_INTERVAL_30_MINUTES,2)) + ':00:00' AS DATETIME)
,HOUR_INTERVAL	= CONVERT(VARCHAR(2), LEFT(FF_INTERVAL_30_MINUTES,2))
,AGENT_NAME		= ISNULL(FF_AGENT_NAME,'')
,SKILL_NAME		= ISNULL(FF_SKILL_NAME,'')
,TEAM_NAME		= ISNULL(FF_TEAM_NAME ,'')
,TALK_TIME		= CAST(ISNULL(NULLIF(FF_TALK_TIME	,''),'0.00') AS DECIMAL(10,2))
,ACW_TIME		= CAST(ISNULL(NULLIF(FF_ACW_TIME	,''),'0.00') AS DECIMAL(10,2))
,HOLD_TIME		= CAST(ISNULL(NULLIF(FF_HOLD_TIME	,''),'0.00') AS DECIMAL(10,2))

--======================================================================
--POPULATE TRUE OUTBOUND TALK TIME VALUE
--======================================================================
UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_1 SET
 TRUE_OUTBOUND_TALK_TIME = CASE WHEN FF_CONTACT_ID = FF_MASTER_CONTACT_ID
									THEN TALK_TIME 
								ELSE 0.00
						   END

--===================================================================================================
-- UPDATE DATETIME KEY
--===================================================================================================
UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_1 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM		WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_1	I
INNER JOIN	DATE_TIME									DT	ON DT.CAL_DATE = I.[DATETIME]

--===============================================
--HANDLE INVALID DATE/TIME RECORDS:
--===============================================
INSERT INTO WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_BAD
(
BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_CONTACT_ID
,FF_MASTER_CONTACT_ID
,FF_TALK_TIME
,FF_ACW_TIME
,FF_HOLD_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,DATETIME
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,TALK_TIME
,ACW_TIME
,HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME
,STD_TENANT_START_DATE_TIME_KEY)
SELECT
 'DTM'					--BAD_IMPORTS_CODE		--'Invalid Date/Time'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_CONTACT_ID
,W1.FF_MASTER_CONTACT_ID
,W1.FF_TALK_TIME
,W1.FF_ACW_TIME
,W1.FF_HOLD_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.DATETIME
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.TALK_TIME
,W1.ACW_TIME
,W1.HOLD_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.STD_TENANT_START_DATE_TIME_KEY
FROM           WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_1    W1
WHERE ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) = 0

--======================================================================
--DELETE INVALID DATE/TIME RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_1
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================

--===========================================================================================================
--HANDLE DUPLICATES:
--===========================================================================================================
INSERT INTO WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_BAD
(
BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_CONTACT_ID
,FF_MASTER_CONTACT_ID
,FF_TALK_TIME
,FF_ACW_TIME
,FF_HOLD_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,DATETIME
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,TALK_TIME
,ACW_TIME
,HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME
,STD_TENANT_START_DATE_TIME_KEY)
SELECT
 'DUP'					--BAD_IMPORTS_CODE		--'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_CONTACT_ID
,W1.FF_MASTER_CONTACT_ID
,W1.FF_TALK_TIME
,W1.FF_ACW_TIME
,W1.FF_HOLD_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.DATETIME
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.TALK_TIME
,W1.ACW_TIME
,W1.HOLD_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.STD_TENANT_START_DATE_TIME_KEY
FROM
(	SELECT
	 FF_DATE
	,FF_INTERVAL_30_MINUTES
	,FF_AGENT_NAME
	,FF_SKILL_NAME
	,FF_TEAM_NAME
	,FF_CONTACT_ID
	,FF_MASTER_CONTACT_ID
	,FF_TALK_TIME
	,ROW_NUMBER() over (partition by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_SKILL_NAME, FF_TEAM_NAME, FF_CONTACT_ID, FF_MASTER_CONTACT_ID, FF_TALK_TIME
                            order by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_SKILL_NAME, FF_TEAM_NAME, FF_CONTACT_ID, FF_MASTER_CONTACT_ID, TALK_TIME DESC) ROWNO
	FROM WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_1
) TNM
LEFT JOIN      WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_1	W1   ON W1.FF_DATE					= TNM.FF_DATE
																AND W1.FF_INTERVAL_30_MINUTES	= TNM.FF_INTERVAL_30_MINUTES
																AND W1.FF_AGENT_NAME			= TNM.FF_AGENT_NAME
																AND W1.FF_SKILL_NAME			= TNM.FF_SKILL_NAME
																AND W1.FF_TEAM_NAME				= TNM.FF_TEAM_NAME
																AND W1.FF_CONTACT_ID			= TNM.FF_CONTACT_ID
																AND W1.FF_MASTER_CONTACT_ID		= TNM.FF_MASTER_CONTACT_ID
																AND W1.FF_TALK_TIME				= TNM.FF_TALK_TIME
WHERE TNM.ROWNO > 1

--===========================================================================================================
--DELETE DUPLICATES:
--===========================================================================================================
DELETE FROM TNM
FROM
(	SELECT
	 FF_DATE
	,FF_INTERVAL_30_MINUTES
	,FF_AGENT_NAME
	,FF_SKILL_NAME
	,FF_TEAM_NAME
	,FF_CONTACT_ID
	,FF_MASTER_CONTACT_ID
	,FF_TALK_TIME
	,ROW_NUMBER() over (partition by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_SKILL_NAME, FF_TEAM_NAME, FF_CONTACT_ID, FF_MASTER_CONTACT_ID, FF_TALK_TIME
                            order by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_SKILL_NAME, FF_TEAM_NAME, FF_CONTACT_ID, FF_MASTER_CONTACT_ID, TALK_TIME DESC) ROWNO
	FROM WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_1
) TNM
WHERE TNM.ROWNO > 1
--===========================================================================================================

--======================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .CSV FILES:
--======================================================================
--SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 900902
--======================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--Check #1:  ===================================================================================================
--	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_1)
--	IF @RCD_CNT < 1 BEGIN
--		SET @MSG1 = @MSG1 + 'ERROR!  File Import Failed.  No Records Were/Could Be Imported.   |   ' 
--		SET @ERR_CNT = @ERR_CNT + 1
--	END

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	(
	TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY							--TENANT_KEY
	,'WORLD_VENTURES_INVOICING_OUTBOUND'	--SUB_GROUP_NAME
	,@MSG1									--ERROR_MSG
	--===========================
--	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	--MUST RETURN AT LEAST ONE RECORD TO SSIS
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	(
	TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY							--TENANT_KEY
	,'WORLD_VENTURES_INVOICING_OUTBOUND'	--SUB_GROUP_NAME
	,''										--ERROR_MSG
END

--===========================================================
--GROUP DATA BY HOURLY INTERVALS
--===========================================================
DELETE FROM WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_2

INSERT INTO WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_2
(
FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_CONTACT_ID
,FF_MASTER_CONTACT_ID
,FF_TALK_TIME
,FF_ACW_TIME
,FF_HOLD_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,TALK_TIME
,ACW_TIME
,HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME
,STD_TENANT_START_DATE_TIME_KEY
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W1.FF_DATE
,NULL	--FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,NULL	--FF_SKILL_NAME
,MAX(W1.FF_TEAM_NAME)
,NULL	--FF_CONTACT_ID
,NULL	--FF_MASTER_CONTACT_ID
,SUM(CAST(ISNULL(NULLIF(W1.FF_TALK_TIME	,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_ACW_TIME	,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_HOLD_TIME	,''),0) AS DECIMAL(10,2)))

,W1.SEQNO_ADDED_TIME
,MAX(W1.SEQNO)
,W1.FTP_FILE_NAME

,W1.[DATETIME]
,W1.HOUR_INTERVAL
,MAX(W1.AGENT_NAME)
,NULL						--SKILL_NAME
,W1.TEAM_NAME
,SUM(ISNULL(W1.TALK_TIME					,0.00))
,SUM(ISNULL(W1.ACW_TIME						,0.00))
,SUM(ISNULL(W1.HOLD_TIME					,0.00))
,SUM(ISNULL(W1.TRUE_OUTBOUND_TALK_TIME		,0.00))
,W1.STD_TENANT_START_DATE_TIME_KEY

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_1  W1

LEFT JOIN       WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_2   G	 ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
																AND G.FF_AGENT_NAME                  = W1.FF_AGENT_NAME
																AND G.TEAM_NAME						 = W1.TEAM_NAME

WHERE (G.FF_AGENT_NAME						IS NULL AND ISNULL(W1.FF_AGENT_NAME,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY		IS NULL AND ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND (G.TEAM_NAME							IS NULL AND ISNULL(W1.TEAM_NAME,'') <> '' )

GROUP BY
 W1.FF_DATE
,W1.FF_AGENT_NAME
,W1.TEAM_NAME
,W1.SEQNO_ADDED_TIME
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.STD_TENANT_START_DATE_TIME_KEY

ORDER BY
 W1.FF_AGENT_NAME
,W1.TEAM_NAME
,W1.[DATETIME]

--=============================================
--UPDATE PERMANENT OUTBOUND TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING SET
 FF_DATE							= W2.FF_DATE
,FF_INTERVAL_30_MINUTES				= W2.FF_INTERVAL_30_MINUTES
--,FF_AGENT_NAME					= W2.FF_AGENT_NAME
,FF_SKILL_NAME						= W2.FF_SKILL_NAME
,FF_TEAM_NAME						= W2.FF_TEAM_NAME
,FF_CONTACT_ID						= W2.FF_CONTACT_ID
,FF_MASTER_CONTACT_ID				= W2.FF_MASTER_CONTACT_ID
,FF_TALK_TIME						= W2.FF_TALK_TIME
,FF_ACW_TIME						= W2.FF_ACW_TIME
,FF_HOLD_TIME						= W2.FF_HOLD_TIME

,SEQNO_ADDED_TIME					= W2.SEQNO_ADDED_TIME
,SEQNO								= W2.SEQNO
--,FTP_FILE_NAME					= W2.FTP_FILE_NAME

,[DATETIME]							= W2.[DATETIME]
,HOUR_INTERVAL						= W2.HOUR_INTERVAL
,AGENT_NAME							= W2.AGENT_NAME
,SKILL_NAME							= W2.SKILL_NAME
--,TEAM_NAME						= W2.TEAM_NAME
,TALK_TIME							= W2.TALK_TIME
,ACW_TIME							= W2.ACW_TIME
,HOLD_TIME							= W2.HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME			= W2.TRUE_OUTBOUND_TALK_TIME
--,STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
--,WS_ROW_CREATED_TIME				= NULL
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_2  W2
INNER JOIN      WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
																AND G.FF_AGENT_NAME						= W2.FF_AGENT_NAME
																AND G.TEAM_NAME							= W2.TEAM_NAME
																AND G.FTP_FILE_NAME						= W2.FTP_FILE_NAME

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
  AND G.TEAM_NAME					   = W2.TEAM_NAME
  AND G.FTP_FILE_NAME				   = W2.FTP_FILE_NAME

--=============================================
--INSERT INTO PERMANENT OUTBOUND IMPORT TABLE: 
--=============================================
INSERT INTO WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING
(
FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_CONTACT_ID
,FF_MASTER_CONTACT_ID
,FF_TALK_TIME
,FF_ACW_TIME
,FF_HOLD_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,TALK_TIME
,ACW_TIME
,HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME
,STD_TENANT_START_DATE_TIME_KEY
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W2.FF_DATE
,W2.FF_INTERVAL_30_MINUTES
,W2.FF_AGENT_NAME
,W2.FF_SKILL_NAME
,W2.FF_TEAM_NAME
,W2.FF_CONTACT_ID
,W2.FF_MASTER_CONTACT_ID
,W2.FF_TALK_TIME
,W2.FF_ACW_TIME
,W2.FF_HOLD_TIME

,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME

,W2.[DATETIME]
,W2.HOUR_INTERVAL
,W2.AGENT_NAME
,W2.SKILL_NAME
,W2.TEAM_NAME
,W2.TALK_TIME
,W2.ACW_TIME
,W2.HOLD_TIME
,W2.TRUE_OUTBOUND_TALK_TIME
,W2.STD_TENANT_START_DATE_TIME_KEY

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_2  W2

LEFT JOIN       WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING    G  ON G.STD_TENANT_START_DATE_TIME_KEY	 = W2.STD_TENANT_START_DATE_TIME_KEY
																AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
																AND G.TEAM_NAME						 = W2.TEAM_NAME
																AND G.FTP_FILE_NAME					 = W2.FTP_FILE_NAME

WHERE (G.FF_AGENT_NAME					IS NULL AND ISNULL(W2.FF_AGENT_NAME,'') <> '' )
  AND (G.TEAM_NAME						IS NULL AND ISNULL(W2.TEAM_NAME, '') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W2.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND (G.FTP_FILE_NAME					IS NULL AND ISNULL(W2.FTP_FILE_NAME,'') <> '' )


--SELECT * FROM WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_2
--SELECT * FROM WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2

--=============================================
--UPDATE INVOICE WORK TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2 SET
 TRUE_OUTBOUND_TALK_TIME		= W2.TRUE_OUTBOUND_TALK_TIME
,WS_ROW_UPDATED_TIME			= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_2  W2
INNER JOIN      WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2	 G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
																AND G.FF_AGENT_NAME						= W2.FF_AGENT_NAME
																--AND G.TEAM_NAME							= W2.TEAM_NAME

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
  --AND G.TEAM_NAME					   = W2.TEAM_NAME

--SELECT * FROM WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2
--=============================================
--INSERT INTO INVOICE WORK TABLE:					--NOT REALLY NECESSARY SINCE THERE SHOULDN'T BE ANY OUTBOUND DATA WITHOUT LOGIN DATA
--=============================================
INSERT INTO WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2
(
FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_UNAVAILABLE_CODE
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_LOGIN_TIME
,FF_AVAILABLE_TIME
,FF_UNAVAILABLE_TIME_MINUS_ACW
,FF_TALK_TIME
,FF_HOLD_TIME
,FF_ACW_TIME
,FF_CONSULT_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,UNAVAILABLE_CODE
,SKILL_NAME
,TEAM_NAME
,LOGIN_TIME
,AVAILABLE_TIME
,UNAVAILABLE_EMAIL_TIME
,UNAVAILABLE_SUPERVISOR_TIME
,UNAVAILABLE_SYSTEM_PENDING_TIME
,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,UNAVAILABLE_MANUAL_OUTBOUND_TIME
,UNAVAILABLE_NON_BILLABLE_TIME
,UNAVAILABLE_TIME_MINUS_ACW
,TALK_TIME
,HOLD_TIME
,ACW_TIME
,CONSULT_TIME
,TRUE_OUTBOUND_TALK_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,PAY_GROUP
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W2.FF_DATE
,NULL									--W2.FF_INTERVAL_30_MINUTES
,W2.FF_AGENT_NAME
,NULL									--W2.FF_UNAVAILABLE_CODE
,NULL									--W2.FF_SKILL_NAME
,W2.FF_TEAM_NAME
,NULL									--W2.FF_LOGIN_TIME
,NULL									--W2.FF_AVAILABLE_TIME
,NULL									--W2.FF_UNAVAILABLE_TIME_MINUS_ACW
,NULL									--W2.FF_TALK_TIME
,NULL									--W2.FF_HOLD_TIME
,NULL									--W2.FF_ACW_TIME
,NULL									--W2.FF_CONSULT_TIME

,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME

,W2.[DATETIME]
,W2.HOUR_INTERVAL
,W2.AGENT_NAME
,NULL									--W2.UNAVAILABLE_CODE
,W2.SKILL_NAME
,W2.TEAM_NAME
,NULL									--W2.LOGIN_TIME
,NULL									--W2.AVAILABLE_TIME
,NULL									--W2.UNAVAILABLE_EMAIL_TIME
,NULL									--W2.UNAVAILABLE_SUPERVISOR_TIME
,NULL									--W2.UNAVAILABLE_SYSTEM_PENDING_TIME
,NULL									--W2.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,NULL									--W2.UNAVAILABLE_MANUAL_OUTBOUND_TIME
,NULL									--W2.UNAVAILABLE_NON_BILLABLE_TIME
,NULL									--W2.UNAVAILABLE_TIME_MINUS_ACW
,NULL									--W2.TALK_TIME
,NULL									--W2.HOLD_TIME
,NULL									--W2.ACW_TIME
,NULL									--W2.CONSULT_TIME
,W2.TRUE_OUTBOUND_TALK_TIME
,NULL									--W2.TOTAL_TALK
,NULL									--W2.CPROD
,NULL									--W2.MING
,NULL									--W2.AUT2
,NULL									--W2.EMAIL
,NULL									--W2.ID_EXT
,NULL									--W2.SCHEDULER_ACL_NAME
,W2.STD_TENANT_START_DATE_TIME_KEY
,NULL									--W2.CAL_DATE
,NULL									--W2.TENANT_KEY
,NULL									--W2.AIR_DAY_TYPE
,NULL									--W2.AIR_ACW_FONT_COLOR
,NULL									--W2.MIN_GUARANTEE_MINUTES
,NULL									--W2.MIN_GUARANTEE_TYPE
,NULL									--W2.AUTHORIZED_TO_INVOICE_TYPE
,NULL									--W2.HAS_HOLIDAYS
,NULL									--W2.INCLUDE_IN_CAS
,NULL									--W2.READY_FOR_XML
,NULL									--W2.SHOW_ID_EXTS
,NULL									--W2.INVOICE_ID
,NULL									--W2.RESOURCE_NAME
,NULL									--W2.AIRITKDUR
,NULL									--W2.AIRIACDUR
,NULL									--W2.PAY_GROUP

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING_2  W2

LEFT JOIN       WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2  G   ON G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
															 AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
															 --AND G.TEAM_NAME					  = W2.TEAM_NAME

WHERE (G.FF_AGENT_NAME					IS NULL AND ISNULL(W2.FF_AGENT_NAME,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W2.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  --AND (G.TEAM_NAME						IS NULL AND ISNULL(W2.TEAM_NAME,'') <> '' )

--SELECT * FROM WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2
--======================================================================
--UPDATE TOTAL TALK VALUE
--======================================================================
UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2 SET
 TRUE_OUTBOUND_TALK_TIME = 0.00
WHERE ID_EXT = 'WVE'

UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2 SET
 TOTAL_TALK = TALK_TIME + TRUE_OUTBOUND_TALK_TIME

--================================================================================================================================================================================================
--UPDATE CPROD TIME (AVAILABLE + TOTAL TALK + ACW_TIME)	-- ACW_TIME ADDED EFFECTIVE 03/16/2017 PER PROGRAM MGMT. 
--================================================================================================================================================================================================
UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2 SET
 CPROD = CASE WHEN ID_EXT = 'WVR' THEN AVAILABLE_TIME + TOTAL_TALK + UNAVAILABLE_EMAIL_TIME + UNAVAILABLE_SYSTEM_PENDING_TIME + UNAVAILABLE_HELD_PARTY_ABANDONED_TIME +
									   UNAVAILABLE_MANUAL_OUTBOUND_TIME + ACW_TIME + UNAVAILABLE_SUPERVISOR_TIME + UNAVAILABLE_NON_BILLABLE_TIME

			  WHEN ID_EXT = 'WVB' THEN AVAILABLE_TIME + TOTAL_TALK + UNAVAILABLE_EMAIL_TIME + UNAVAILABLE_SYSTEM_PENDING_TIME + UNAVAILABLE_HELD_PARTY_ABANDONED_TIME +
									   UNAVAILABLE_MANUAL_OUTBOUND_TIME + ACW_TIME	-- EFFECTIVE 06/08/2017 PER BRANDON MOLINA

			  WHEN ID_EXT = 'WVE' THEN UNAVAILABLE_EMAIL_TIME

			  ELSE					   AVAILABLE_TIME + TOTAL_TALK + UNAVAILABLE_SYSTEM_PENDING_TIME + UNAVAILABLE_HELD_PARTY_ABANDONED_TIME + UNAVAILABLE_MANUAL_OUTBOUND_TIME + ACW_TIME
		 END

--================================================================================================================================================================================================
--UPDATE CPROD TIME FOR RESOURCE AGENTS TO INCLUDE CONSULT TIME (IF MISSING) -- EFFECTIVE 12/16/2017
--================================================================================================================================================================================================
UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2 SET
 TOTAL_TALK = CASE WHEN ID_EXT = 'WVR' THEN
					CASE WHEN LOGIN_TIME > (CPROD + UNAVAILABLE_TIME_MINUS_ACW) THEN
							CASE WHEN (CPROD + UNAVAILABLE_TIME_MINUS_ACW + CONSULT_TIME) > LOGIN_TIME THEN
								   TOTAL_TALK + (CONSULT_TIME - ((CPROD + UNAVAILABLE_TIME_MINUS_ACW + CONSULT_TIME) - LOGIN_TIME))
								 ELSE TOTAL_TALK + CONSULT_TIME END
						 ELSE TOTAL_TALK END
				   ELSE TOTAL_TALK END

UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2 SET
 CPROD = CASE WHEN ID_EXT = 'WVR' THEN
				CASE WHEN LOGIN_TIME > (CPROD + UNAVAILABLE_TIME_MINUS_ACW) THEN
						CPROD + CONSULT_TIME
					 ELSE CPROD END
			  ELSE CPROD END

UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2 SET
 CPROD = CASE WHEN ID_EXT = 'WVR' THEN
				CASE WHEN (CPROD + UNAVAILABLE_TIME_MINUS_ACW) > LOGIN_TIME THEN
						LOGIN_TIME
					 ELSE CPROD END
			  ELSE CPROD END

--====================================================
-- CALCULATE MINIMUM GUARANTEE VALUE
--====================================================
UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2 SET
 MING = CPROD

--====================================================
--CALCULATE AUTHORIZED TO INVOICE VALUE
--====================================================
UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2 SET
 AUT2 = CPROD

--SELECT * FROM WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING

--=============================================
--UPDATE PERMANENT TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING SET
 FF_DATE								= W2.FF_DATE
,FF_INTERVAL_30_MINUTES					= W2.FF_INTERVAL_30_MINUTES
--,FF_AGENT_NAME						= W2.FF_AGENT_NAME
,FF_UNAVAILABLE_CODE					= W2.UNAVAILABLE_CODE
,FF_SKILL_NAME							= W2.FF_SKILL_NAME
,FF_TEAM_NAME							= W2.FF_TEAM_NAME
,FF_LOGIN_TIME							= W2.FF_LOGIN_TIME
,FF_AVAILABLE_TIME						= W2.FF_AVAILABLE_TIME
,FF_UNAVAILABLE_TIME_MINUS_ACW			= W2.FF_UNAVAILABLE_TIME_MINUS_ACW
,FF_TALK_TIME							= W2.FF_TALK_TIME
,FF_HOLD_TIME							= W2.FF_HOLD_TIME
,FF_ACW_TIME							= W2.FF_ACW_TIME
,FF_CONSULT_TIME						= W2.FF_CONSULT_TIME

,SEQNO_ADDED_TIME						= W2.SEQNO_ADDED_TIME
,SEQNO									= W2.SEQNO
--,FTP_FILE_NAME						= W2.FTP_FILE_NAME

,[DATETIME]								= W2.[DATETIME]
,HOUR_INTERVAL							= W2.HOUR_INTERVAL
,AGENT_NAME								= W2.AGENT_NAME
,UNAVAILABLE_CODE						= W2.UNAVAILABLE_CODE
,SKILL_NAME								= W2.SKILL_NAME
,TEAM_NAME								= W2.TEAM_NAME
,LOGIN_TIME								= W2.LOGIN_TIME
,AVAILABLE_TIME							= W2.AVAILABLE_TIME
,UNAVAILABLE_EMAIL_TIME					= W2.UNAVAILABLE_EMAIL_TIME
,UNAVAILABLE_SUPERVISOR_TIME			= W2.UNAVAILABLE_SUPERVISOR_TIME
,UNAVAILABLE_SYSTEM_PENDING_TIME		= W2.UNAVAILABLE_SYSTEM_PENDING_TIME
,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME	= W2.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,UNAVAILABLE_MANUAL_OUTBOUND_TIME		= W2.UNAVAILABLE_MANUAL_OUTBOUND_TIME
,UNAVAILABLE_NON_BILLABLE_TIME			= W2.UNAVAILABLE_NON_BILLABLE_TIME
,UNAVAILABLE_TIME_MINUS_ACW				= W2.UNAVAILABLE_TIME_MINUS_ACW
,TALK_TIME								= W2.TALK_TIME
,HOLD_TIME								= W2.HOLD_TIME
,ACW_TIME								= W2.ACW_TIME
,CONSULT_TIME							= W2.CONSULT_TIME
,TRUE_OUTBOUND_TALK_TIME				= W2.TRUE_OUTBOUND_TALK_TIME
,TOTAL_TALK								= W2.TOTAL_TALK
,CPROD									= W2.CPROD
,MING									= W2.MING
,AUT2									= W2.AUT2
,EMAIL									= W2.EMAIL
--,ID_EXT								= W2.ID_EXT
,SCHEDULER_ACL_NAME						= W2.SCHEDULER_ACL_NAME
--,STD_TENANT_START_DATE_TIME_KEY		= W2.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE								= W2.CAL_DATE
,TENANT_KEY								= W2.TENANT_KEY
,AIR_DAY_TYPE							= W2.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR						= W2.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES					= W2.MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE						= W2.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE				= W2.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS							= W2.HAS_HOLIDAYS
,INCLUDE_IN_CAS							= W2.INCLUDE_IN_CAS
,READY_FOR_XML							= W2.READY_FOR_XML
,SHOW_ID_EXTS							= W2.SHOW_ID_EXTS
,INVOICE_ID								= W2.INVOICE_ID
,RESOURCE_NAME							= W2.RESOURCE_NAME
,AIRITKDUR								= W2.AIRITKDUR
,AIRIACDUR								= W2.AIRIACDUR
,PAY_GROUP								= W2.PAY_GROUP
--,WS_ROW_CREATED_TIME					= NULL
,WS_ROW_UPDATED_TIME					= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2  W2
INNER JOIN      WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
															 AND G.FF_AGENT_NAME					= W2.FF_AGENT_NAME
															 AND G.FTP_FILE_NAME					= W2.FTP_FILE_NAME
															 AND G.ID_EXT							= W2.ID_EXT

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
  AND G.FTP_FILE_NAME				   = W2.FTP_FILE_NAME
  AND G.ID_EXT						   = W2.ID_EXT

--=============================================
--INSERT INTO PERMANENT IMPORT TABLE: 
--=============================================
INSERT INTO WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING
(FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_UNAVAILABLE_CODE
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_LOGIN_TIME
,FF_AVAILABLE_TIME
,FF_UNAVAILABLE_TIME_MINUS_ACW
,FF_TALK_TIME
,FF_HOLD_TIME
,FF_ACW_TIME
,FF_CONSULT_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,UNAVAILABLE_CODE
,SKILL_NAME
,TEAM_NAME
,LOGIN_TIME
,AVAILABLE_TIME
,UNAVAILABLE_EMAIL_TIME
,UNAVAILABLE_SUPERVISOR_TIME
,UNAVAILABLE_SYSTEM_PENDING_TIME
,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,UNAVAILABLE_MANUAL_OUTBOUND_TIME
,UNAVAILABLE_NON_BILLABLE_TIME
,UNAVAILABLE_TIME_MINUS_ACW
,TALK_TIME
,HOLD_TIME
,ACW_TIME
,CONSULT_TIME
,TRUE_OUTBOUND_TALK_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,PAY_GROUP
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W2.FF_DATE
,W2.FF_INTERVAL_30_MINUTES
,W2.FF_AGENT_NAME
,W2.UNAVAILABLE_CODE
,W2.FF_SKILL_NAME
,W2.FF_TEAM_NAME
,W2.FF_LOGIN_TIME
,W2.FF_AVAILABLE_TIME
,W2.FF_UNAVAILABLE_TIME_MINUS_ACW
,W2.FF_TALK_TIME
,W2.FF_HOLD_TIME
,W2.FF_ACW_TIME
,W2.FF_CONSULT_TIME

,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME

,W2.[DATETIME]
,W2.HOUR_INTERVAL
,W2.AGENT_NAME
,W2.UNAVAILABLE_CODE
,W2.SKILL_NAME
,W2.TEAM_NAME
,W2.LOGIN_TIME
,W2.AVAILABLE_TIME
,W2.UNAVAILABLE_EMAIL_TIME
,W2.UNAVAILABLE_SUPERVISOR_TIME
,W2.UNAVAILABLE_SYSTEM_PENDING_TIME
,W2.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,W2.UNAVAILABLE_MANUAL_OUTBOUND_TIME
,W2.UNAVAILABLE_NON_BILLABLE_TIME
,W2.UNAVAILABLE_TIME_MINUS_ACW
,W2.TALK_TIME
,W2.HOLD_TIME
,W2.ACW_TIME
,W2.CONSULT_TIME
,W2.TRUE_OUTBOUND_TALK_TIME
,W2.TOTAL_TALK
,W2.CPROD
,W2.MING
,W2.AUT2
,W2.EMAIL
,W2.ID_EXT
,W2.SCHEDULER_ACL_NAME
,W2.STD_TENANT_START_DATE_TIME_KEY
,W2.CAL_DATE
,W2.TENANT_KEY
,W2.AIR_DAY_TYPE
,W2.AIR_ACW_FONT_COLOR
,W2.MIN_GUARANTEE_MINUTES
,W2.MIN_GUARANTEE_TYPE
,W2.AUTHORIZED_TO_INVOICE_TYPE
,W2.HAS_HOLIDAYS
,W2.INCLUDE_IN_CAS
,W2.READY_FOR_XML
,W2.SHOW_ID_EXTS
,W2.INVOICE_ID
,W2.RESOURCE_NAME
,W2.AIRITKDUR
,W2.AIRIACDUR
,W2.PAY_GROUP

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2  W2

LEFT JOIN       WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
															 AND G.FF_AGENT_NAME					= W2.FF_AGENT_NAME
															 AND G.FTP_FILE_NAME					= W2.FTP_FILE_NAME
															 AND G.ID_EXT							= W2.ID_EXT

WHERE (G.FF_AGENT_NAME					IS NULL AND ISNULL(W2.FF_AGENT_NAME,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W2.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND (G.FTP_FILE_NAME					IS NULL AND ISNULL(W2.FTP_FILE_NAME,'') <> '' )
--  AND (G.ID_EXT							IS NULL AND ISNULL(W2.ID_EXT,'') <> '' )


--==================================
SET DATEFIRST 1  -- = Monday
--==================================

--=============================================================================================
--Need when populating tmp DEW table for insert into _AIA table.
--=============================================================================================
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME

SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN([DATETIME]) FROM WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2))  
--=============================================================================================

--===========================
IF OBJECT_ID('TEMPDB..#DT_EASY_WEEKS') IS NOT NULL BEGIN
   DROP TABLE #DT_EASY_WEEKS
END
CREATE TABLE #DT_EASY_WEEKS
(CAL_DATE_STRING      VARCHAR(10)
,CAL_WEEK_START_DATE  DATETIME
,CAL_WEEK_END_DATE    DATETIME
,PAY_CYCLE_CLOSURE_DATE DATETIME
)
INSERT INTO #DT_EASY_WEEKS
SELECT
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
FROM DATE_TIME DT
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
--WHERE DT.CAL_DATE >= CAST('06/01/2011' AS DATETIME) AND DT.CAL_DATE <  CAST('06/20/2011' AS DATETIME)
GROUP BY 
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
--===========================
UPDATE #DT_EASY_WEEKS SET CAL_WEEK_END_DATE = DATEADD(DD,6,CAL_WEEK_START_DATE)
--110713: WAS: 06/26/2011
UPDATE #DT_EASY_WEEKS SET
 PAY_CYCLE_CLOSURE_DATE = (CASE WHEN (DATEDIFF(DD,CAST('09/29/2013' AS DATETIME),CAL_WEEK_END_DATE) % 14) = 0 THEN
									CAL_WEEK_END_DATE
								ELSE
									DATEADD(DD,7,CAL_WEEK_END_DATE)
								END)
--SELECT * FROM #DT_EASY_WEEKS ORDER BY CAL_DATE_STRING


--=======================================================================================
--CREATE TMP TABLE:	Same structure as:  [YZ_TB_AGENT_INVOICE_AUTOMATION]
--=======================================================================================
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_WV_UV_ANT_AIA') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_WV_UV_ANT_AIA
END
CREATE TABLE #WSOL_TB_IMPORTS_WV_UV_ANT_AIA
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](50) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #WSOL_TB_IMPORTS_WV_UV_ANT_AIA
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.FF_AGENT_NAME --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING				--[DATE]             
,DT.LABEL_HH24 + ':00'			--HOD_INTERVAL

,AIA.LOGIN_TIME					--AU_DK_LOGGED_IN_DURATION
,AIA.AVAILABLE_TIME				--AU_DK_AVAILABLE_DURATION

,AIA.TOTAL_TALK					--AIA.TALK_TIME + AIA.TRUE_OUTBOUND_TALK_TIME    --AU_DK_TALK_DURATION
,AIA.TALK_TIME					--AU_DK_IB_TALK_DURATION
,AIA.TRUE_OUTBOUND_TALK_TIME	--AU_DK_OB_TALK_DURATION

,AIA.ACW_TIME					--AU_DK_CONVENTIONAL_ACW
,AIA.UNAVAILABLE_TIME_MINUS_ACW	+ AIA.UNAVAILABLE_EMAIL_TIME + AIA.UNAVAILABLE_SUPERVISOR_TIME + AIA.UNAVAILABLE_SYSTEM_PENDING_TIME + 
 AIA.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME + AIA.UNAVAILABLE_MANUAL_OUTBOUND_TIME +  AIA.UNAVAILABLE_NON_BILLABLE_TIME	--AU_DK_NR_DURATION
,0	--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0	--AU_DK_ADJUSTED_NR_DURATION
,AIA.CPROD						--AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.CPROD						--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS  

,0	--AU_DK_XFER_COUNT
,0  --AU_DK_HOLD_COUNT
,0  --AU_DK_CONFERENCE_COUNT
,0  --AU_DK_CONSULT_COUNT
,0  --AU_DK_PUP_COUNT

,0	--AU_DK_OFFERED_COUNT
,0	--AU_DK_HANDLED_COUNT
,0	--AU_DK_IB_HANDLE_COUNT
,0	--AU_DK_OB_HANDLE_COUNT
																
,0  --AU_DK_RONA_COUNT
,0  --AU_DK_AWR_COUNT

,AIA.MING  --MINIMUM_GUARANTEE
,AIA.AUT2  --AUTHORIZED_TO_INVOICE

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_MINUTES										--MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID  --CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID 
,AIA.RESOURCE_NAME
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,dbo.getdate()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL       --	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
FROM            WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_2	AIA 
--ONLY WANT TO INCLUDE VALID ID_EXTs IN AIA TABLE -- ID_EXTs TAHT HAVE MING AND AUT2 VALUES
INNER JOIN      WSOL_TB_IMPORTS_WV_SD_AIA_STATIC_DEFAULTS	AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      WSOL_TB_IMPORTS_WV_SD_INVOICE_GROUPS		CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME									DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS								DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')

--=====================================
--UPDATE WSOL_TB_...UV_ANT_AIA TABLE:
--=====================================
--SELECT TOP 100 * FROM WSOL_TB_IMPORTS_WV_UV_ANT_AIA
UPDATE WSOL_TB_IMPORTS_WV_UV_ANT_AIA SET
 [PLATFORM]							= W1.[PLATFORM]
,[STATUS]							= W1.[STATUS]
--,INVOICE_MAP_KEY					= W1.INVOICE_MAP_KEY
,FIELD_NAME							= W1.FIELD_NAME
,SCHEDULER_PROJECT_ID				= W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME					= W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION					= W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID			= W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME			= W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID				= W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME			= W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID			= W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID	= W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID		= W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY			= W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID					= W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID					= W1.HOLIDAY_INVOICE_ID
,HOLIDAY							= W1.HOLIDAY
,FILE_FORMAT_OF_PUSH				= W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID		= W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL							= W1.NEW_ACL
,CURRENT_CATS						= W1.CURRENT_CATS
,CATS_ID							= W1.CATS_ID
,PATS_ID							= W1.PATS_ID
,SMART_ELIGIBLE						= W1.SMART_ELIGIBLE
,SMART_TIER_1						= W1.SMART_TIER_1
,SMART_TIER_2						= W1.SMART_TIER_2
,SMART_TIER_3						= W1.SMART_TIER_3
,INTERVAL							= W1.INTERVAL
,[DATE]								= W1.[DATE]
,HOD_INTERVAL						= W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION			= W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION			= W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION				= W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION				= W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION				= W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW				= W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION					= W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT					= W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT					= W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT				= W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT				= W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT					= W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT				= W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT				= W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT				= W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT				= W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT					= W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT					= W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE					= W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE				= W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE					= W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE				= W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
--,FTP_FILE_NAME					= W1.FTP_FILE_NAME
,EMAIL								= W1.EMAIL

--,STD_TENANT_START_DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W1.CAL_DATE
,TENANT_KEY							= W1.TENANT_KEY
,AIR_DAY_TYPE						= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE					= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE					= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W1.INCLUDE_IN_CAS
,READY_FOR_XML						= W1.READY_FOR_XML
,SHOW_ID_EXTS						= W1.SHOW_ID_EXTS
,INVOICE_ID							= W1.INVOICE_ID
,RESOURCE_NAME						= W1.RESOURCE_NAME

,AIRITKDUR							= W1.AIRITKDUR
,AIRIACDUR							= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

FROM            #WSOL_TB_IMPORTS_WV_UV_ANT_AIA   W1

INNER JOIN      WSOL_TB_IMPORTS_WV_UV_ANT_AIA    UV   ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													 AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
													 AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY
													 AND UV.FTP_FILE_NAME				   = W1.FTP_FILE_NAME

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )
  AND ( UV.FTP_FILE_NAME				  = W1.FTP_FILE_NAME )

--================================================
--INSERT TMP TABLE FIELDS INTO WSOL_TB_... TABLE:
--================================================
INSERT INTO [WSOL_TB_IMPORTS_WV_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #WSOL_TB_IMPORTS_WV_UV_ANT_AIA   AIA
LEFT JOIN       WSOL_TB_IMPORTS_WV_UV_ANT_AIA    UV   ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
													 AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
													 AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY
													 AND UV.FTP_FILE_NAME				   = AIA.FTP_FILE_NAME

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )
  AND ( UV.FTP_FILE_NAME				  IS NULL AND ISNULL(AIA.FTP_FILE_NAME,'') <> '' )

--====================================================
EARLY_EXIT:
--====================================================
GO
PRINT N'Creating [dbo].[uspIMPORTS_WV_INCONTACT_UNRECOGNIZED_UNAVAILABLE_CODES]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_WV_INCONTACT_UNRECOGNIZED_UNAVAILABLE_CODES]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON
--PURPOSE:  SHOW WHICH UNAVAILABLE CODE VALUES EXIST IN THE iNContact REPORTS, BUT ARE NOT CURRENTLY RECOGNIZED DURING IMPORT.

--THIS USP IS DATA SOURCE FOR SRS GRID ON "ACTIVITY IMPORTS" STATUS REPORT!!!

--  EXECUTE [dbo].[uspIMPORTS_WV_INCONTACT_UNRECOGNIZED_UNAVAILABLE_CODES] '11/16/2017','11/30/2017','4','B'

--==================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @DATE_BEG < '01/01/1901' OR @RPT_TYPE = 'M' BEGIN     
			--dates passed in are for previous day:
		    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
			--IF DATEDIFF(dd,@DTM_END,dbo.getdate()) > 6 BEGIN  --IF RPT DATE > 6 DAYS FROM CURRENT DATE THEN:
				SET @DTM_END      = CAST(CAST(DATEPART(mm  ,@DTM_BEG - 0) AS VARCHAR(2)) 
		                      + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG - 0) AS VARCHAR(4)) AS DATETIME)    -- - 0 Will need to change when days previous is more than 1 day...
				SET @DTM_END = DATEADD(mm,1,@DTM_END) 
				--Subtract one day from 1st day of current date, which gives us last day of previous month:
				SET @DTM_END      = DATEADD(dd,-1,@DTM_END)
				--Get 1st day of previous month from previous end date value:
				SET @DTM_BEG      = CAST(DATEPART(mm,@DTM_END) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_END) AS VARCHAR(4))

				IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
					SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
				END
END
ELSE BEGIN  --Remember:  'From' and 'To' dates are 1 day previous to yesterday.
	IF @RPT_TYPE = 'W' BEGIN  --Weekly - Run report for 7 days from current day to current day.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) -- - 13  --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below. 

		--!!! 07/06/12 IS A FRIDAY.!!! IT IS THE BASE.  0 - 13 IS RETURNED BY DATEDIFF(...) % 14.  RAN FOR PREVIOUS, PREVIOUS FRI. TO THU. AND PREVIOUS FRI. TO THU..
		SET @DTM_BEG = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 14
		SET @DTM_END = DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),@DTM_END) % 14),@DTM_END) - 1  -- + 1    (1 ADDED BELOW)
		--SELECT @DTM_BEG, @DTM_END
		IF @DTM_END >  dbo.getdate() - 1 BEGIN  --dbo.getdate() -1 IS GOING TO ALSO INCLUDE SOME TIME AFTER MIDNIGHT.  THIS IS CORRECT !
			SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME)
		END

		--WHEN RAN ON FRI, 01/04/13, THE RESULTS RETURNS:  2012.12.21 - 2013.01.03    --FRI-THU   CORRECT!!!
		--SELECT CONVERT(VARCHAR(10),(DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 14),102) + ' - ' +
		--       CONVERT(VARCHAR(10),(DATEADD(DD,14 - (DATEDIFF(DD,CAST('07/06/2012' AS DATETIME),dbo.getdate()-1) % 14),dbo.getdate()-1) - 1),102)
	END
	ELSE IF @RPT_TYPE = 'B' BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		ELSE IF DAY(dbo.getdate()) = 1 BEGIN
			IF MONTH(dbo.getdate()) = 1 BEGIN
				SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
			END
			ELSE BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
	ELSE BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END
END
SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--SELECT DISTINCT(FF_UNAVAILABLE_CODE) FROM WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_0_AUDIT


IF OBJECT_ID('TEMPDB..#IMPORTS_WV_INCONTACT_UNRECOGNIZED_UNAVAILABLE_CODES') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_WV_INCONTACT_UNRECOGNIZED_UNAVAILABLE_CODES
END
CREATE TABLE #IMPORTS_WV_INCONTACT_UNRECOGNIZED_UNAVAILABLE_CODES
(FILEDATETIME          VARCHAR(50)
,FTP_FILE_NAME         VARCHAR(100)
,WS_ROW_CREATED_TIME   DATETIME
,UNAVAILABLE_CODE      VARCHAR(500)
,RCD_CNT               INT
)
INSERT INTO #IMPORTS_WV_INCONTACT_UNRECOGNIZED_UNAVAILABLE_CODES
SELECT
 B.FF_DATE
,REPLACE(B.FTP_FILE_NAME,'N3w_','') AS FTP_FILE_NAME
,B.SEQNO_ADDED_TIME					AS WS_ROW_CREATED_TIME
,B.FF_UNAVAILABLE_CODE				AS UNAVAILABLE_CODE
,COUNT(*)						  --AS RCD_CNT
--SELECT *
FROM            WSOL_TB_IMPORTS_WV_INCONTACT_INVOICING_0_AUDIT	B
WHERE CAST(B.FF_DATE AS DATETIME) >= @DTM_BEG AND CAST(B.FF_DATE AS DATETIME) <  @DTM_END
  AND ISNULL(B.FF_UNAVAILABLE_CODE,'') NOT IN ( ''
											   ,'Break'
											   ,'Email'
											   ,'Wrap UP'
											   ,'Coaching'
											   ,'Lunch'
											   ,'Manual Outbound'
											   ,'HeldPartyAbandoned'
											   ,'Meeting'
											   ,'Non-Billable Standby'
											   ,'Refused'
											   ,'Project'
											   ,'Research'
											   ,'Supervisor Standby'
											   ,'Training'
											   ,'CallbackPending'
											   ,'InboundPending'
											   ,'OutboundPending'
											   ,'PromisePending'
											   ,'ConsultPending'
											   ,'TransferPending'
											  )
  --AND (ISNULL(B.FF_AGENT_NAME,'') NOT IN ('Joshua Miller','Lynne Rochel','Jessica Sharp','Karen Ritter','Emily Beauchamp'))	-- FILTER OUT WSOL EMPLOYEES
GROUP BY
 B.FF_DATE
,REPLACE(B.FTP_FILE_NAME,'N3w_','') --AS FTP_FILE_NAME
,B.SEQNO_ADDED_TIME					--AS WS_ROW_CREATED_TIME
,B.FF_UNAVAILABLE_CODE				--AS UNAVAILABLE_CODE

--==================================
UPDATE #IMPORTS_WV_INCONTACT_UNRECOGNIZED_UNAVAILABLE_CODES SET
 FILEDATETIME = REPLACE(CONVERT(VARCHAR(10),ISNULL(FILEDATETIME,'1/1/1900'),102),'/',' . ')


--=============================================
DECLARE
 @RCD_CNT  INT
SET @RCD_CNT  = 0 
SET @RCD_CNT = (SELECT COUNT(*) FROM #IMPORTS_WV_INCONTACT_UNRECOGNIZED_UNAVAILABLE_CODES)
--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END
IF @RCD_CNT = 0 BEGIN
	INSERT INTO #IMPORTS_WV_INCONTACT_UNRECOGNIZED_UNAVAILABLE_CODES
	SELECT
	 ''				--FILEDATETIME
	,''				--FTP_FILE_NAME
	,dbo.GETDATE()  --WS_ROW_CREATED_TIME
	,''				--UNAVAILABLE_CODE
	,0				--RCD_CNT
END
--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B' BEGIN

	SET @MSG1 = ''
	
	IF @RCD_CNT = 0 BEGIN
		SET @MSG1 = @MSG1 + 'There are NO UNRECOGNIZED UNAVAILABLE CODE records!'
	END
	ELSE BEGIN
		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1 BEGIN
			SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.GETDATE(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		END
		SET @MSG1 = @MSG1 + 'The list below contains UNAVAILABE CODE values for agents that are associated with activity for the report date range, but ' + CHAR(10) + CHAR(13)
		SET @MSG1 = @MSG1 + 'these UNAVAILABLE CODES have not been identified as productive or non-productive. ' + CHAR(13) + CHAR(10) + CHAR(13) + CHAR(10)

		SET @MSG1 = @MSG1 + 'UNAVAILABLE CODES that are on this list will not be included as part of agent invoice statistics (for activity dates shown), unless a special request is made and received '
		SET @MSG1 = @MSG1 + 'with plenty of time before the automated invoice process begins.  The analyst will need to manually update the system when this scenario occurs. ' + CHAR(13) + CHAR(10)
	END

END

--==================================
--RETURN DATA:
--==================================
SELECT 
*
,@MSG1       AS MSG1        
,@BG_COLOR   AS BG_COLOR    

FROM #IMPORTS_WV_INCONTACT_UNRECOGNIZED_UNAVAILABLE_CODES

ORDER BY
 FILEDATETIME
,UNAVAILABLE_CODE



--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_WV_OB_IMPORT_STATUS]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_WV_OB_IMPORT_STATUS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_WV_OB_IMPORT_STATUS] '11/16/2016','11/30/2016','','B'

--========================================
-- SET DATE VARIABLES
--========================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME
IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run for 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE 
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE 
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--=========================================================================
--CREATE TMP TABLE:
--=========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_WV_OB_IMPORT_STATUS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_WV_OB_IMPORT_STATUS
END
CREATE TABLE #IMPORTS_WV_OB_IMPORT_STATUS
(FILEDATETIME			VARCHAR(20)
,FTP_FILE_NAME			VARCHAR(100)
,CST_ROW_CREATED_TIME	DATETIME
,RCD_CNT				INT
,INT_CNT				INT
)

--========================================================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================================================
    INSERT INTO #IMPORTS_WV_OB_IMPORT_STATUS
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'') AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'') AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,0) AS RCD_CNT
	,ISNULL(UA.INT_CNT,0) AS INT_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		,COUNT(DISTINCT C.HOUR_INTERVAL)						AS INT_CNT
		--SELECT TOP 100 *

		FROM            WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING   C

		INNER JOIN      DATE_TIME                         DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY
		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
--		AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )  -- USE IF YOU WANT TO IGNORE WEEKENDS

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME)
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')
		,C.WS_ROW_CREATED_TIME
	) UA

--================================================================================
--CREATE CURSOR TO CHECK FOR MISSING DATES
--================================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MISS_DT_STR VARCHAR(2500)
,@FILEDATETIME VARCHAR(20)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MISS_DT_STR  = ''
SET @FILEDATETIME = ''

DECLARE crsT CURSOR FOR
SELECT DT.FILEDATETIME
FROM
(	SELECT
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
	FROM DATE_TIME DT

--FOR 'WEEKEND' CODE/FILTER:!!!
--LEFT JOIN WSOL_TB_IMPORTS_WV_INVOICING  C ON   C.STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

--AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )
--AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1)

	GROUP BY
	 REPLACE(CONVERT(VARCHAR(10),DT.CAL_DATE,102),'.',' . ') --AS FILEDATETIME
	,DT.CAL_DAY_NUM_IN_WEEK
) DT 
LEFT OUTER JOIN #IMPORTS_WV_OB_IMPORT_STATUS   I   ON I.FILEDATETIME = DT.FILEDATETIME

--LEFT JOIN       DATE_TIME                    DT2 ON CONVERT(VARCHAR(10),DT2.CAL_DATE,101) = CONVERT(VARCHAR(10),DT.FILEDATETIME,101)
--FOR 'WEEKEND' CODE/FILTER:!!!
--LEFT JOIN       WSOL_TB_IMPORTS_WV_INVOICING  C   ON C.STD_TENANT_START_DATE_TIME_KEY = DT2.DATE_TIME_KEY

--WHERE ISNULL(I.FTP_FILE_NAME,'') = ''  -- ISNULL(I.FILEDATETIME,'1.1.1900') = ''

WHERE ISNULL(I.RCD_CNT,0) = 0
  AND DT.CAL_DAY_NUM_IN_WEEK NOT IN (1,7)  -- WORLD VENTURES AGENTS ONLY WORKING EMAIL ON WEEKENDS - NOT OUTBOUND VOICE TIME
--  AND ( CHARINDEX('Weekend',C.INVOICE_ID) < 1 )

ORDER BY 
 DT.FILEDATETIME

OPEN crsT
FETCH NEXT FROM crsT INTO @FILEDATETIME
WHILE @@FETCH_STATUS = 0 BEGIN
	SET @RCD_CNT = @RCD_CNT + 1 

    SET @MISS_DT_STR = @MISS_DT_STR + REPLACE(@FILEDATETIME,' . ','/') + ', '
    --===============================
    FETCH NEXT FROM crsT INTO @FILEDATETIME
END
CLOSE crsT
DEALLOCATE crsT

--=============================================
SET @MISS_DT_STR = REPLACE(@MISS_DT_STR,'/','.')
IF LEN(@MISS_DT_STR) > 5 BEGIN
	SET @MISS_DT_STR = '(' + REPLACE(@MISS_DT_STR,', ','), (')
	SET @MISS_DT_STR = LEFT(@MISS_DT_STR,LEN(@MISS_DT_STR) - 3)  --TO REMOVE THE ENDING, ', ('
END

--=============================================
DECLARE @BG_COLOR VARCHAR(25)
SET @BG_COLOR = '#4CB748'		-- WSOL SUCCESS GREEN
IF @RCD_CNT > 0 BEGIN
	SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED
END

--=============================================
DECLARE @MSG1 VARCHAR(2500)
SET @MSG1 = ''
IF @RPT_TYPE = 'B'
	BEGIN

		SET @MSG1 = ''

		IF DAY(dbo.getdate()) = 16 OR DAY(dbo.getdate()) = 1
			BEGIN
				SET @MSG1 = 'Today, ' + CONVERT(VARCHAR(10),dbo.getdate(),101) + ', is Invoice Processing Day. ' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
		
				IF @RCD_CNT > 0
					BEGIN
						SET @MSG1 = @MSG1 + 'Imported file(s) for the current invoice period show that the following date(s) might still be ' + CHAR(10) + CHAR(13)
						SET @MSG1 = @MSG1 + ' missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)

						SET @MSG1 = @MSG1 + 'The automated invoicing processes begins at 9:59AM CST, today.' + CHAR(10) + CHAR(13) + CHAR(10) + CHAR(13)
						SET @MSG1 = @MSG1 + 'Any missing import files not on the FTP server by 9:30AM CST will NOT be included in this period''s invoice data.' + CHAR(10) + CHAR(13)
					END
				ELSE
					BEGIN
						SET @MSG1 = @MSG1 + 'ALL date(s) appear to have been imported.   Thank you!' + CHAR(10) + CHAR(13)
					END
			END
		ELSE 
			BEGIN
				SET @MSG1 = 'Imported file(s) from ' 
					+ CONVERT(VARCHAR(10),@DTM_BEG,101) + ' to ' + CONVERT(VARCHAR(10),@DTM_END - 1,101) + ' ' 
				
				IF @RCD_CNT > 0
					BEGIN
						SET @MSG1 = @MSG1 + 'show the following date(s) might still be missing:  ' + @MISS_DT_STR + CHAR(10) + CHAR(13)  
					END
				ELSE
					BEGIN
						SET @MSG1 = @MSG1 + 'show no missing date(s).    Excellent!' + CHAR(10) + CHAR(13)
					END
			END
	
	END

--=============================================
DECLARE @IMPORT_ERRORS_MSG VARCHAR(2500)
DECLARE @TODAY_1030 DATETIME
SET @TODAY_1030 = CAST(CONVERT(VARCHAR(10),dbo.getdate(),101) + ' 10:30:00' AS DATETIME)
IF dbo.getdate() >  @TODAY_1030 AND dbo.getdate() <  DATEADD(mi,30,@TODAY_1030) BEGIN
	--Can only do this if the Import process/job/usp was executed within the last 15 minutes !!!!!!:
	--If dbo.getdate() after 10:30am and before 11:00am, then can do this:  (Import sql job runs every 15 minutes from 6:00am - 6:01pm.)
--WESTERN DENTAL:
	SET @IMPORT_ERRORS_MSG = ( SELECT TOP 1 ERROR_MSG FROM WSOL_TB_IMPORT_ERRORS_FOUND
							   WHERE TENANT_KEY = 900902 AND SUB_GROUP_NAME = 'WORLD_VENTURES_INVOICING_OUTBOUND' )  --<-- DO NOT CHANGE THIS !!!!!
	IF LEN(LTRIM(RTRIM(@IMPORT_ERRORS_MSG))) > 0 BEGIN

		SET @BG_COLOR = '#D6323A'	-- WSOL DANGER RED

		SET @MSG1 = @MSG1 + CHAR(10) + CHAR(13) + 'Some errors were noticed during the import process.  They are:  '  + CHAR(10) + CHAR(13)
			+ '      ' + @IMPORT_ERRORS_MSG + CHAR(10) + CHAR(13)
	END
END

--==================================
--RETURN DATA:
--==================================

SELECT 
 @MSG1     AS MSG1
,@BG_COLOR AS BG_COLOR

--FROM #IMPORTS_WV_OB_IMPORT_STATUS 


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspIMPORTS_WV_OB_IMPORT_STATUS_MISSING_DATA]...';


GO

CREATE PROCEDURE [dbo].[uspIMPORTS_WV_OB_IMPORT_STATUS_MISSING_DATA]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@PSW                VARCHAR(10)  --IGNORED.  JUST THERE TO KEEP REPORT FROM RUNNING IMMEDIATELY AFTER SELECTED.
,@RPT_TYPE           VARCHAR(3)  
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_WV_OB_IMPORT_STATUS_MISSING_DATA] '11/01/2016','11/30/2016','','B'

--==============================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==============================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
,@DTM_END_M1 AS DATETIME

IF @RPT_TYPE = 'B'
	BEGIN -- Bi-Monthly - Run 1-15 or 16-EOM
		IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		ELSE IF DAY(dbo.getdate()) = 1
			BEGIN
				IF MONTH(dbo.getdate()) = 1
					BEGIN
						SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
					END
				ELSE 
					BEGIN
						SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
					END
			END
		ELSE
			BEGIN
				SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
			END
		
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)

	END
ELSE
	BEGIN  --Daily - Run report for yesterday, 1 day only.
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)      --@DATE_BEG already starting at yesterday's date.
		SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1 --done below.
	END

SET @DTM_END_M1 = @DTM_END      --FOR WEEKLY DATE FIELD.
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

--========================================================================
--CREATE TMP TABLE:
--========================================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_WV_OB_IMPORT_STATUS_MISSING_DATA') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_WV_OB_IMPORT_STATUS_MISSING_DATA
END
CREATE TABLE #IMPORTS_WV_OB_IMPORT_STATUS_MISSING_DATA
(FILEDATETIME			VARCHAR(20)
,FTP_FILE_NAME			VARCHAR(100)
,CST_ROW_CREATED_TIME	DATETIME
,RCD_CNT				INT
,INT_CNT				INT
)

--========================================================================
--INSERT RECORDS INTO TMP TABLE:
--========================================================================
    INSERT INTO #IMPORTS_WV_OB_IMPORT_STATUS_MISSING_DATA
	SELECT 
	 REPLACE(CONVERT(VARCHAR(10),ISNULL(UA.FILEDATETIME,'1/1/1900'),102),'.',' . ') --AS FILEDATETIME
	,ISNULL(UA.FTP_FILE_NAME,'')													--AS FTP_FILE_NAME
	,ISNULL(UA.WS_ROW_CREATED_TIME,'')												--AS CST_ROW_CREATED_TIME
	,ISNULL(UA.RCD_CNT,'')															--AS RCD_CNT
	,ISNULL(UA.INT_CNT,'')															--AS INT_CNT
	FROM
	(	SELECT
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
		,COUNT(*)												AS RCD_CNT
		,COUNT(DISTINCT C.HOUR_INTERVAL)						AS INT_CNT
		--  SELECT * 
		FROM            WSOL_TB_IMPORTS_WV_INCONTACT_OB_INVOICING   C

		INNER JOIN      DATE_TIME									DT  ON DT.DATE_TIME_KEY = C.STD_TENANT_START_DATE_TIME_KEY

		WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END

		GROUP BY
		 CAST(CONVERT(VARCHAR(10),DT.CAL_DATE,101) AS DATETIME) --AS FILEDATETIME
		,REPLACE(C.FTP_FILE_NAME,'N3w_','')						--AS FTP_FILE_NAME
		,C.WS_ROW_CREATED_TIME
	) UA


--==================================
--RETURN DATA:
--==================================

SELECT 
 FTP_FILE_NAME
,FILEDATETIME           
,CST_ROW_CREATED_TIME
,RCD_CNT
,INT_CNT      
,'White' AS BG_COLOR

FROM #IMPORTS_WV_OB_IMPORT_STATUS_MISSING_DATA

ORDER BY
 FTP_FILE_NAME
,FILEDATETIME        
,CST_ROW_CREATED_TIME
,RCD_CNT
,INT_CNT      


--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1
GO
PRINT N'Creating [dbo].[uspWSOL_DATALOT_SCORECARD]...';


GO

CREATE PROCEDURE [dbo].[uspWSOL_DATALOT_SCORECARD]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME

AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspWSOL_DATALOT_SCORECARD] '04/01/2016'

DECLARE
 @DTM_BEG	AS DATETIME
,@DTM_END	AS DATETIME
,@DTM_TEMP	AS DATETIME

SET @DTM_TEMP = CAST('2016/04/16' AS DATETIME)

SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 

--	IF DAY(@DTM_BEG) = 1 BEGIN
--		SET @DTM_END = DATEADD(DD, 14, @DTM_BEG)
--	END
--	ELSE BEGIN
--		SET @DTM_END = DATEADD(DD,-16,DATEADD(MM, 1, @DTM_BEG))
--	END

SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
SET @DTM_END = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.


IF OBJECT_ID('TEMPDB..#WSOL_DATALOT_SCORECARD') IS NOT NULL BEGIN
	DROP TABLE #WSOL_DATALOT_SCORECARD
END
CREATE TABLE #WSOL_DATALOT_SCORECARD
(FF_DATE					VARCHAR(50)
,FF_AGENT_ID				VARCHAR(50)
,ONLINE_TIME				DECIMAL(10,2)
,CONNECTED_TIME				DECIMAL(10,2)
,WRAP_TIME					DECIMAL(10,2)
,WAITING_TIME				DECIMAL(10,2)
,THREE_MIN_TRANSFERS		INT
,INBOUND_CALLS				INT
,OUTBOUND_CALLS				INT
,WRAP_ADJ_TIME				DECIMAL(10,2)
,TOTAL_TRANSFERS			INT
,AUTHORIZED_WRAP			DECIMAL(10,2)
,AUTHORIZED_MINUTES			DECIMAL(10,2)
,BASE_3_MINUTE_TRANSFER		DECIMAL(10,2)
,[3_MINUTE_TRANSFER_BONUS]	DECIMAL(10,2)
,ELIGIBLE_FOR_XFER_BONUS	VARCHAR(1)
,ACTUAL_XFER_BONUS_PAY		DECIMAL(10,2)
,[DATETIME]					DATETIME
,ID_EXT						VARCHAR(3)
)

INSERT INTO #WSOL_DATALOT_SCORECARD
SELECT
 AIA.FF_DATE
,AIA.FF_AGENT_ID
,AIA.ONLINE_TIME
,AIA.CONNECTED_TIME
,AIA.WRAP_TIME
,AIA.WAITING_TIME
,AIA.THREE_MIN_TRANSFERS
,AIA.INBOUND_CALLS
,AIA.OUTBOUND_CALLS
,AIA.WRAP_ADJ_TIME
,AIA.TOTAL_TRANSFERS
,AIA.AUTHORIZED_WRAP
,AIA.AUTHORIZED_MINUTES
,AIA.BASE_3_MINUTE_TRANSFER
,AIA.[3_MINUTE_TRANSFER_BONUS]
,AIA.ELIGIBLE_FOR_XFER_BONUS
,NULL AS ACTUAL_XFER_BONUS_PAY
,AIA.[DATETIME]
,AIA.ID_EXT

FROM YZ_TB_IMPORTS_DATALOT_INVOICING	AIA

WHERE [DATETIME] >= @DTM_BEG AND [DATETIME] <= @DTM_END


IF OBJECT_ID('TEMPDB..#WSOL_DATALOT_SCORECARD_XFER_BONUS') IS NOT NULL BEGIN
   DROP TABLE #WSOL_DATALOT_SCORECARD_XFER_BONUS
END
CREATE TABLE #WSOL_DATALOT_SCORECARD_XFER_BONUS
(INVOICE_MAP_KEY				VARCHAR(50)
,LOGGED_IN_HOURS				DECIMAL(10,3)
,THREE_MINUTE_XFERS				INT
,THREE_MINUTE_XFERS_PER_HOUR	DECIMAL(10,3)
,ELIGIBLE_FOR_XFER_BONUS		VARCHAR(1)
,ID_EXTENSION					VARCHAR(3)
)

INSERT INTO #WSOL_DATALOT_SCORECARD_XFER_BONUS
SELECT
 AIA.FF_AGENT_ID																														AS INVOICE_MAP_KEY
,CASE WHEN @DTM_END = @DTM_TEMP THEN
		SUM(ISNULL(AIA.ONLINE_TIME,0.00)) / 60.00
	  ELSE
		(SUM(ISNULL(AIA.ONLINE_TIME,0.00)) + SUM(ISNULL(AIA.WRAP_ADJ_TIME,0.00))) / 60.00
	  END																																AS LOGGED_IN_HOURS
,SUM(ISNULL(AIA.THREE_MIN_TRANSFERS,0))																									AS THREE_MINUTE_XFERS
,CASE WHEN @DTM_END = @DTM_TEMP THEN
		SUM(ISNULL(AIA.THREE_MIN_TRANSFERS,0)) / (SUM(ISNULL(AIA.ONLINE_TIME,0.00) / 60.00))
	  ELSE
		SUM(ISNULL(AIA.THREE_MIN_TRANSFERS,0)) / ((SUM(ISNULL(AIA.ONLINE_TIME,0.00)) + SUM(ISNULL(AIA.WRAP_ADJ_TIME,0.00))) / 60.00)
	  END																																AS THREE_MINUTE_XFERS_PER_HOUR
,MAX(AIA.ELIGIBLE_FOR_XFER_BONUS)																										AS ELIGIBLE_FOR_XFER_BONUS
,AIA.ID_EXT																																AS ID_EXTENSION

FROM YZ_TB_IMPORTS_DATALOT_INVOICING	AIA

WHERE [DATETIME] >= @DTM_BEG AND [DATETIME] <= @DTM_END

GROUP BY
 AIA.FF_AGENT_ID
,AIA.ID_EXT

/*
UPDATE #WSOL_DATALOT_SCORECARD_XFER_BONUS SET
 ELIGIBLE_FOR_XFER_BONUS	= CASE WHEN THREE_MINUTE_XFERS_PER_HOUR >= 6 THEN 'Y'
								   ELSE 'N' END
*/

--SELECT * FROM #WSOL_DATALOT_SCORECARD_XFER_BONUS

UPDATE #WSOL_DATALOT_SCORECARD SET
 ELIGIBLE_FOR_XFER_BONUS = XFER.ELIGIBLE_FOR_XFER_BONUS
FROM		#WSOL_DATALOT_SCORECARD SCR
LEFT JOIN	#WSOL_DATALOT_SCORECARD_XFER_BONUS XFER	ON XFER.INVOICE_MAP_KEY = SCR.FF_AGENT_ID
												   AND XFER.ID_EXTENSION	= SCR.ID_EXT

UPDATE #WSOL_DATALOT_SCORECARD SET
 ACTUAL_XFER_BONUS_PAY = CASE WHEN ELIGIBLE_FOR_XFER_BONUS = 'Y' THEN
								[3_MINUTE_TRANSFER_BONUS]
							  ELSE 0.00 END

--SELECT * FROM #WSOL_DATALOT_SCORECARD

SELECT
 ID.FF_DATE						AS FF_DATE
,SUM(ID.ONLINE_MINS)			AS ONLINE_MINS
,SUM(ID.CONNECTED_MINS)			AS CONNECTED_MINS
,SUM(ID.WRAP_MINS)				AS WRAP_MINS
,SUM(ID.WAITING_MINS)			AS WAITING_MINS
,SUM(ID.SUCCESSFUL_XFERS)		AS SUCCESSFUL_XFERS
,SUM(ID.INBOUNDS)				AS INBOUNDS
,SUM(ID.OUTBOUNDS)				AS OUTBOUNDS
,SUM(ID.WRAP_ADJ)				AS WRAP_ADJ
,SUM(ID.TOTAL_XFERS)			AS TOTAL_XFERS
,SUM(ID.AUTH_WRAP)				AS AUTH_WRAP
,SUM(ID.STD_BILLABLE_XFERS)		AS STD_BILLABLE_XFERS
,SUM(ID.RES_BILLABLE_XFERS)		AS RES_BILLABLE_XFERS
,SUM(ID.STD_MINS)				AS STD_MINS
,SUM(ID.RES_MINS)				AS RES_MINS
,SUM(ID.STD_CONNECTED_MINS)		AS STD_CONNECTED_MINS
,SUM(ID.RES_CONNECTED_MINS)		AS RES_CONNECTED_MINS
,SUM(ID.STD_WRAP_MINS)			AS STD_WRAP_MINS
,SUM(ID.RES_WRAP_MINS)			AS RES_WRAP_MINS
,SUM(ID.STD_TOTAL_ONLINE)		AS STD_TOTAL_ONLINE
,SUM(ID.RES_TOTAL_ONLINE)		AS RES_TOTAL_ONLINE
,SUM(ID.TOTAL_BASE_XFER_PAY)	AS TOTAL_BASE_XFER_PAY
,SUM(ID.TOTAL_XFER_BONUS_PAY)	AS TOTAL_XFER_BONUS_PAY
,SUM(ID.ACTUAL_XFER_BONUS_PAY)	AS ACTUAL_XFER_BONUS_PAY
--,MAX(ID.ID_EXT)			    AS ID_EXT
FROM (SELECT 
       FF_DATE AS FF_DATE
      ,SUM(ISNULL(ONLINE_TIME				,0.00)) AS ONLINE_MINS
      ,SUM(ISNULL(CONNECTED_TIME			,0.00)) AS CONNECTED_MINS
      ,SUM(ISNULL(WRAP_TIME					,0.00)) AS WRAP_MINS
      ,SUM(ISNULL(WAITING_TIME				,0.00)) AS WAITING_MINS
      ,SUM(ISNULL(THREE_MIN_TRANSFERS		,0))	AS SUCCESSFUL_XFERS	--FF_3_MIN_XFERS EFFECTIVE 8/1/15
      ,SUM(ISNULL(INBOUND_CALLS				,0))	AS INBOUNDS
      ,SUM(ISNULL(OUTBOUND_CALLS			,0))	AS OUTBOUNDS
      ,SUM(ISNULL(WRAP_ADJ_TIME				,0.00)) AS WRAP_ADJ
      ,SUM(ISNULL(TOTAL_TRANSFERS			,0))	AS TOTAL_XFERS
      ,SUM(ISNULL(AUTHORIZED_WRAP			,0.00)) AS AUTH_WRAP
	  ,CASE WHEN ID_EXT IN ('DLS','DLP') THEN SUM(ISNULL(THREE_MIN_TRANSFERS	,0	 )) ELSE 0 END AS STD_BILLABLE_XFERS	-- FF_3_MIN_XFERS EFFECTIVE 8/1/15
	  ,CASE WHEN ID_EXT  =  'DLR'		 THEN SUM(ISNULL(THREE_MIN_TRANSFERS	,0   )) ELSE 0 END AS RES_BILLABLE_XFERS	-- FF_3_MIN_XFERS EFFECTIVE 8/1/15
      ,CASE WHEN ID_EXT IN ('DLS','DLP') THEN SUM(ISNULL(AUTHORIZED_MINUTES		,0.00)) ELSE 0 END AS STD_MINS
      ,CASE WHEN ID_EXT  =  'DLR'		 THEN SUM(ISNULL(AUTHORIZED_MINUTES		,0.00)) ELSE 0 END AS RES_MINS
      ,CASE WHEN ID_EXT IN ('DLS','DLP') THEN SUM(ISNULL(CONNECTED_TIME			,0.00)) ELSE 0 END AS STD_CONNECTED_MINS
	  ,CASE WHEN ID_EXT  =  'DLR'		 THEN SUM(ISNULL(CONNECTED_TIME			,0.00)) ELSE 0 END AS RES_CONNECTED_MINS
	  ,CASE WHEN ID_EXT IN ('DLS','DLP') THEN SUM(ISNULL(WRAP_TIME				,0.00)) ELSE 0 END AS STD_WRAP_MINS
	  ,CASE WHEN ID_EXT  =  'DLR'		 THEN SUM(ISNULL(WRAP_TIME				,0.00)) ELSE 0 END AS RES_WRAP_MINS
	  ,CASE WHEN ID_EXT IN ('DLS','DLP') THEN SUM(ISNULL(ONLINE_TIME			,0.00)) + SUM(ISNULL(WRAP_ADJ_TIME ,0.00)) ELSE 0 END AS STD_TOTAL_ONLINE
	  ,CASE WHEN ID_EXT  =  'DLR'		 THEN SUM(ISNULL(ONLINE_TIME			,0.00)) + SUM(ISNULL(WRAP_ADJ_TIME ,0.00)) ELSE 0 END AS RES_TOTAL_ONLINE
	  ,SUM(ISNULL(BASE_3_MINUTE_TRANSFER	,0.00))	AS TOTAL_BASE_XFER_PAY
	  ,SUM(ISNULL([3_MINUTE_TRANSFER_BONUS]	,0.00))	AS TOTAL_XFER_BONUS_PAY
	  ,SUM(ISNULL(ACTUAL_XFER_BONUS_PAY		,0.00))	AS ACTUAL_XFER_BONUS_PAY
      ,ISNULL(ID_EXT,'') AS ID_EXT
--     FROM YZ_TB_IMPORTS_DATALOT_INVOICING 
	 FROM #WSOL_DATALOT_SCORECARD
--	 WHERE [DATETIME] >= @DTM_BEG AND [DATETIME] <= @DTM_END
     GROUP BY FF_DATE, ID_EXT) ID GROUP BY FF_DATE
--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1

--SELECT * FROM YZ_TB_IMPORTS_DATALOT_INVOICING ORDER BY WS_ROW_CREATED_TIME DESC
GO
PRINT N'Creating [dbo].[usp_SQL_JOBS]...';


GO

CREATE PROCEDURE [dbo].[usp_SQL_JOBS]
 @DATE_BEG        DATETIME  
,@DATE_END        DATETIME  
,@TENANT_KEY      VARCHAR(10)  --'0' FOR ALL.  MOST LIKELY NOT NEEDED.
,@SUB_NAME        VARCHAR(100) --'RUN_THIS_FRIDAY'...
,@JOB_NAME        VARCHAR(100) --'YZ_...'
,@CUST_ID		  INT          --1,2,3...  NOT LIKELY USED MUCH.
,@TYPE_MSC        VARCHAR(10)  --'H'OURLY, 'D'AILY...  FOR FUTURE NEEDS.
AS
SET NOCOUNT ON  

--To check if Invoicing will run this week:
--  EXECUTE [dbo].[usp_SQL_JOBS] '01/01/1900','01/01/1900','0','RUN_THIS_FRIDAY','YZ_Invoice_WSOL_Regular_Create_Files','',''

--  EXECUTE [dbo].[usp_SQL_JOBS] '01/01/1900','01/01/1900','0','DID_HOURLY_ETL_FINISH_RECENTLY','YZ_WSINET_Every_5_Minute_Tasks','',''

--	EXECUTE [dbo].[usp_SQL_JOBS] '01/01/1900','01/01/1900','160','CHECK_IMPORT_STATUS','','','B'

--==============================================================
SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
--==============================================================
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME

IF @DATE_BEG < '01/01/1901' OR @TYPE_MSC = 'B' BEGIN     
			--Dates passed in are for previous day:
	IF DAY(dbo.getdate()) > 1 AND DAY(dbo.getdate()) <= 16 BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/01/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
	END
	ELSE IF DAY(dbo.getdate()) = 1 BEGIN
		IF MONTH(dbo.getdate()) = 1 BEGIN
			SET @DTM_BEG = CONVERT(DATETIME,CONVERT(VARCHAR(6),'12/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate())-1))
		END
		ELSE BEGIN
			SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())-1) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
		END
	END
	ELSE BEGIN
		SET @DTM_BEG = CAST(CONVERT(VARCHAR(10), (CONVERT(VARCHAR(2),MONTH(dbo.getdate())) + CONVERT(VARCHAR(4),'/16/') + CONVERT(VARCHAR(4),YEAR(dbo.getdate()))),101) AS DATETIME)
	END
	
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),DBO.GETDATE(),101) AS DATETIME)

END

ELSE BEGIN  --DAILY - Run report for YESTERDAY, 1 Day ONLY.
	SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME)     -- @DATE_BEG already starting at yesterday's date.
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME)		-- + 1 --Done Below.
END

SET @DTM_END    = @DTM_END - 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS SUBTRACTED SO THAT YESTERDAY IS PASSED.


--===============================================
-- SUB = RUN_1ST_AND_16TH
--===============================================
IF @SUB_NAME = 'RUN_1ST_AND_16TH' BEGIN
	--Run remaining Steps, but only if this is the 1st or the 16th of the month and invoicing/reports/files are to be created?
	--There is no "Every Other Friday" schedule option in SQL Job Scheduling Tab!!!
	IF DAY(dbo.getdate()) = 1 OR DAY(dbo.getdate()) = 16 BEGIN
		RETURN 0
	END
	ELSE BEGIN
		RAISERROR('Not the required date to run AIA Jobs.', 16, 127)
	    --RETURN -100
	END
END  --END SUB

--===============================================
-- SUB = CHECK_IMPORT_STATUS
--===============================================
IF @SUB_NAME = 'CHECK_IMPORT_STATUS' BEGIN

DECLARE @CUST_NAME VARCHAR(100)
SET @CUST_NAME = ''

IF @TENANT_KEY = '900901' BEGIN -- HUMACH

	IF OBJECT_ID('TEMPDB..#CHECK_HUMACH_IMPORT_STATUS') IS NOT NULL BEGIN
		DROP TABLE #CHECK_HUMACH_IMPORT_STATUS
	END
	CREATE TABLE #CHECK_HUMACH_IMPORT_STATUS
	( MSG1				VARCHAR(2500)
	 ,BG_COLOR          VARCHAR(25)
	 ,CUSTOMER_NAME		VARCHAR(150)
	 ,CUSTOMER_ID		VARCHAR(10)
	)

	IF @TENANT_KEY = '900901' BEGIN			-- HUMACH
		IF @CUST_ID = '190' BEGIN			-- i9 SPORTS
			INSERT INTO #CHECK_HUMACH_IMPORT_STATUS EXEC DBO.[uspIMPORTS_HUMACH_IMPORT_STATUS]	@DTM_BEG,@DTM_END,'','B',@CUST_ID;
			SET @CUST_NAME = 'i9 SPORTS'
		END
		ELSE IF @CUST_ID = '177' BEGIN		-- ASURION
			INSERT INTO #CHECK_HUMACH_IMPORT_STATUS EXEC DBO.[uspIMPORTS_HUMACH_IMPORT_STATUS]	@DTM_BEG,@DTM_END,'','B',@CUST_ID;
			SET @CUST_NAME = 'ASURION'
		END
	END

END

IF @TENANT_KEY = '900905' BEGIN -- BRIGHT_PATTERN

	IF OBJECT_ID('TEMPDB..#CHECK_BRIGHT_PATTERN_IMPORT_STATUS') IS NOT NULL BEGIN
		DROP TABLE #CHECK_BRIGHT_PATTERN_IMPORT_STATUS
	END
	CREATE TABLE #CHECK_BRIGHT_PATTERN_IMPORT_STATUS
	( MSG1				VARCHAR(2500)
	 ,BG_COLOR          VARCHAR(25)
	 ,CUSTOMER_NAME		VARCHAR(150)
	 ,CUSTOMER_ID		VARCHAR(10)
	)

	IF @TENANT_KEY = '900905' BEGIN			-- BRIGHT_PATTERN
		IF @CUST_ID = '190' BEGIN			-- i9 SPORTS
			INSERT INTO #CHECK_BRIGHT_PATTERN_IMPORT_STATUS EXEC DBO.[uspIMPORTS_BRIGHT_PATTERN_IMPORT_STATUS]	@DTM_BEG,@DTM_END,'','B',@CUST_ID;
			SET @CUST_NAME = 'i9 SPORTS'
		END
		ELSE IF @CUST_ID = '177' BEGIN		-- ASURION
			INSERT INTO #CHECK_BRIGHT_PATTERN_IMPORT_STATUS EXEC DBO.[uspIMPORTS_BRIGHT_PATTERN_IMPORT_STATUS]	@DTM_BEG,@DTM_END,'','B',@CUST_ID;
			SET @CUST_NAME = 'ASURION'
		END
	END

END

ELSE BEGIN

	IF OBJECT_ID('TEMPDB..#CHECK_IMPORT_STATUS') IS NOT NULL BEGIN
		DROP TABLE #CHECK_IMPORT_STATUS
	END
	CREATE TABLE #CHECK_IMPORT_STATUS
	( MSG1				VARCHAR(2500)
	 ,BG_COLOR          VARCHAR(25)
	)
	
	IF @TENANT_KEY = '900626' BEGIN			-- APFM
		INSERT INTO #CHECK_IMPORT_STATUS EXEC DBO.[uspIMPORTS_APFM_IMPORT_STATUS]						@DTM_BEG,@DTM_END,'','B';
		SET @CUST_NAME = 'APFM'
	END
	ELSE IF @TENANT_KEY = '900902' BEGIN	-- WORLD VENTURES
		INSERT INTO #CHECK_IMPORT_STATUS EXEC DBO.[uspIMPORTS_WV_IMPORT_STATUS]							@DTM_BEG,@DTM_END,'','B';
		SET @CUST_NAME = 'WORLD VENTURES'
	END
	ELSE IF @TENANT_KEY = '900700' BEGIN	-- DATALOT
		INSERT INTO #CHECK_IMPORT_STATUS EXEC DBO.[uspIMPORTS_DATALOT_IMPORT_STATUS]					@DTM_BEG,@DTM_END,'','B';
		SET @CUST_NAME = 'DATALOT'
	END
	ELSE IF @TENANT_KEY = '900705' BEGIN	-- GAR
		INSERT INTO #CHECK_IMPORT_STATUS EXEC DBO.[uspIMPORTS_GAR_IMPORT_STATUS]						@DTM_BEG,@DTM_END,'','B';
		SET @CUST_NAME = 'GAR'
	END
	ELSE IF @TENANT_KEY = '900903' BEGIN	-- GENERAL ASSEMBLY
		INSERT INTO #CHECK_IMPORT_STATUS EXEC DBO.[uspIMPORTS_GA_IMPORT_STATUS]							@DTM_BEG,@DTM_END,'','B';
		SET @CUST_NAME = 'GENERAL ASSEMBLY'
	END
	ELSE IF @TENANT_KEY = '160'	   BEGIN	-- MONAT GLOBAL
		INSERT INTO #CHECK_IMPORT_STATUS EXEC DBO.[uspIMPORTS_MONAT_IMPORT_STATUS]						@DTM_BEG,@DTM_END,'','B';
		SET @CUST_NAME = 'MONAT'
	END
	ELSE IF @TENANT_KEY = '106'	   BEGIN	-- EGENCIA
		INSERT INTO #CHECK_IMPORT_STATUS EXEC DBO.[uspIMPORTS_EGENCIA_IMPORT_STATUS]					@DTM_BEG,@DTM_END,'','B';
		SET @CUST_NAME = 'EGENCIA'
	END
	ELSE IF @TENANT_KEY = '900704' BEGIN	-- SABRE
		INSERT INTO #CHECK_IMPORT_STATUS EXEC DBO.[uspIMPORTS_SABRE_IMPORT_STATUS]						@DTM_BEG,@DTM_END,'','B';
		SET @CUST_NAME = 'SABRE'
	END
	ELSE IF @TENANT_KEY = '900703' BEGIN	-- STUBHUB
		INSERT INTO #CHECK_IMPORT_STATUS EXEC DBO.[uspIMPORTS_STUBHUB_IMPORT_STATUS]					@DTM_BEG,@DTM_END,'','B';
		SET @CUST_NAME = 'STUBHUB'
	END
	ELSE IF @TENANT_KEY = '900999' BEGIN	-- SALESFORCE
		SET @DTM_BEG = DATEADD(dd,-1,CAST(CONVERT(VARCHAR(10),DBO.GETDATE(),101) AS DATETIME))
		INSERT INTO #CHECK_IMPORT_STATUS EXEC DBO.[uspIMPORTS_SALESFORCE_INFORMATICA_WFM_IMPORT_STATUS]	@DTM_BEG,@DTM_END,'','W';
		SET @CUST_NAME = 'SALESFORCE'
	END
	ELSE IF @TENANT_KEY = '900555' BEGIN	-- DAILY SCHEDULED HOURS
		SET @DTM_BEG = DATEADD(dd,-1,CAST(CONVERT(VARCHAR(10),DBO.GETDATE(),101) AS DATETIME))
		INSERT INTO #CHECK_IMPORT_STATUS EXEC DBO.[uspIMPORTS_SCHEDULE_IMPORT_STATUS]					@DTM_BEG,@DTM_END,'','W';
		SET @CUST_NAME = 'SCHEDULE'
	END
END
	
	DECLARE @COLOR_RESULT VARCHAR(25)

	IF @TENANT_KEY = '900901' BEGIN
		SELECT @COLOR_RESULT = BG_COLOR
		  FROM #CHECK_HUMACH_IMPORT_STATUS
	END
	IF @TENANT_KEY = '900905' BEGIN
		SELECT @COLOR_RESULT = BG_COLOR
		  FROM #CHECK_BRIGHT_PATTERN_IMPORT_STATUS
	END
	ELSE BEGIN
		SELECT @COLOR_RESULT = BG_COLOR
		  FROM #CHECK_IMPORT_STATUS
	END

	DECLARE @ERROR_MSG VARCHAR(100)
	SET @ERROR_MSG = ''
	SET @ERROR_MSG = 'NO MISSING DATA - ' + @CUST_NAME

	IF (@COLOR_RESULT IN ('RED','#D6323A')) BEGIN
		RETURN 0
	END
	ELSE BEGIN
		RAISERROR(@ERROR_MSG,16, 127)
		--RETURN 100
	END

END	--END SUB
GO
PRINT N'Creating [dbo].[WSOL_VW_CATS_IDS].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[41] 4[20] 2[9] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "WSOL_TB_IMPORTS_SALESFORCE_INFORMATICA_WFM"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 280
               Right = 306
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 9
         Width = 284
         Width = 3855
         Width = 1500
         Width = 1500
         Width = 2280
         Width = 1500
         Width = 3000
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 12
         Column = 1440
         Alias = 900
         Table = 4815
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'WSOL_VW_CATS_IDS';


GO
PRINT N'Creating [dbo].[WSOL_VW_CATS_IDS].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 1, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'WSOL_VW_CATS_IDS';


GO
PRINT N'Creating [dbo].[WSOL_VW_IMPORTS_SALESFORCE_INFORMATICA_WFM].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[29] 4[17] 2[27] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "T"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 261
               Right = 306
            End
            DisplayFlags = 280
            TopColumn = 0
         End
         Begin Table = "TM"
            Begin Extent = 
               Top = 6
               Left = 344
               Bottom = 84
               Right = 495
            End
            DisplayFlags = 280
            TopColumn = 0
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 19
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 2220
         Alias = 1995
         Table = 1170
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'WSOL_VW_IMPORTS_SALESFORCE_INFORMATICA_WFM';


GO
PRINT N'Creating [dbo].[WSOL_VW_IMPORTS_SALESFORCE_INFORMATICA_WFM].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 1, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'WSOL_VW_IMPORTS_SALESFORCE_INFORMATICA_WFM';


GO
PRINT N'Creating [dbo].[WSOL_VW_IMPORTS_VYNE_PATS_ACCESS].[MS_DiagramPane1]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPane1', @value = N'[0E232FF0-B466-11cf-A24F-00AA00A3EFFF, 1.00]
Begin DesignProperties = 
   Begin PaneConfigurations = 
      Begin PaneConfiguration = 0
         NumPanes = 4
         Configuration = "(H (1[42] 4[20] 2[14] 3) )"
      End
      Begin PaneConfiguration = 1
         NumPanes = 3
         Configuration = "(H (1 [50] 4 [25] 3))"
      End
      Begin PaneConfiguration = 2
         NumPanes = 3
         Configuration = "(H (1 [50] 2 [25] 3))"
      End
      Begin PaneConfiguration = 3
         NumPanes = 3
         Configuration = "(H (4 [30] 2 [40] 3))"
      End
      Begin PaneConfiguration = 4
         NumPanes = 2
         Configuration = "(H (1 [56] 3))"
      End
      Begin PaneConfiguration = 5
         NumPanes = 2
         Configuration = "(H (2 [66] 3))"
      End
      Begin PaneConfiguration = 6
         NumPanes = 2
         Configuration = "(H (4 [50] 3))"
      End
      Begin PaneConfiguration = 7
         NumPanes = 1
         Configuration = "(V (3))"
      End
      Begin PaneConfiguration = 8
         NumPanes = 3
         Configuration = "(H (1[56] 4[18] 2) )"
      End
      Begin PaneConfiguration = 9
         NumPanes = 2
         Configuration = "(H (1 [75] 4))"
      End
      Begin PaneConfiguration = 10
         NumPanes = 2
         Configuration = "(H (1[66] 2) )"
      End
      Begin PaneConfiguration = 11
         NumPanes = 2
         Configuration = "(H (4 [60] 2))"
      End
      Begin PaneConfiguration = 12
         NumPanes = 1
         Configuration = "(H (1) )"
      End
      Begin PaneConfiguration = 13
         NumPanes = 1
         Configuration = "(V (4))"
      End
      Begin PaneConfiguration = 14
         NumPanes = 1
         Configuration = "(V (2))"
      End
      ActivePaneConfig = 0
   End
   Begin DiagramPane = 
      Begin Origin = 
         Top = 0
         Left = 0
      End
      Begin Tables = 
         Begin Table = "WSOL_TB_IMPORTS_VYNE_PATS_ACCESS"
            Begin Extent = 
               Top = 6
               Left = 38
               Bottom = 299
               Right = 306
            End
            DisplayFlags = 280
            TopColumn = 49
         End
      End
   End
   Begin SQLPane = 
   End
   Begin DataPane = 
      Begin ParameterDefaults = ""
      End
      Begin ColumnWidths = 32
         Width = 284
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1905
         Width = 1500
         Width = 1500
         Width = 1500
         Width = 1500
      End
   End
   Begin CriteriaPane = 
      Begin ColumnWidths = 11
         Column = 6825
         Alias = 2805
         Table = 2850
         Output = 720
         Append = 1400
         NewValue = 1170
         SortType = 1350
         SortOrder = 1410
         GroupBy = 1350
         Filter = 1350
         Or = 1350
         Or = 1350
         Or = 1350
      End
   End
End
', @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'WSOL_VW_IMPORTS_VYNE_PATS_ACCESS';


GO
PRINT N'Creating [dbo].[WSOL_VW_IMPORTS_VYNE_PATS_ACCESS].[MS_DiagramPaneCount]...';


GO
EXECUTE sp_addextendedproperty @name = N'MS_DiagramPaneCount', @value = 1, @level0type = N'SCHEMA', @level0name = N'dbo', @level1type = N'VIEW', @level1name = N'WSOL_VW_IMPORTS_VYNE_PATS_ACCESS';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/

INSERT INTO david (name) SELECT 'David'
GO

GO
PRINT N'Update complete.';


GO
