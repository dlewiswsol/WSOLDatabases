

CREATE PROCEDURE [dbo].[uspIMPORTS_MONAT_IC_OB_INVOICING_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_MONAT_IC_OB_INVOICING_IMPORT]

--  SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1

--	Durations in the data file are in seconds in 30 minute intervals
--  Reporting available in seconds, minutes, and hours.

--===================================================================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY = 160  --MONAT GLOBAL
--===================================================================================
DELETE FROM WSOL_TB_IMPORT_ERRORS_FOUND
WHERE TENANT_KEY		= @TENANT_KEY
  AND SUB_GROUP_NAME	= 'MONAT_INVOICING_OUTBOUND'
  --  SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 160
--===================================================================================

--=========================================================================================================
--  USING @WS_ROW_CREATED_TIME FOR ALL INSERTS WILL ALLOW ME TO DELETE SPECIFIC INSERT PROCESSES/FILES.
--  IN CASE OF EMERGENCY, BREAK GLASS.
--=========================================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.GETDATE()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===================================================================================

--===================================================================================
--HANDLE COLUMN HEADER AND JUNK RECORDS:
--===================================================================================

		--<<<<< HEADER ROWS REMOVED AT IMPORT TIME >>>>>--

--======================================================================
--DELETE COLUMN HEADER AND JUNK RECORDS;
--======================================================================

--===================================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_1) TABLE THAT WEREN'T IN IMPORTED FILE:
--===================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1 SET
 [DATETIME]		= CAST(CONVERT(VARCHAR(10), FF_DATE) + ' ' + CONVERT(VARCHAR(2), LEFT(FF_INTERVAL_30_MINUTES,2)) + ':00:00' AS DATETIME)
,HOUR_INTERVAL	= CONVERT(VARCHAR(2), LEFT(FF_INTERVAL_30_MINUTES,2))
,AGENT_NAME		= ISNULL(FF_AGENT_NAME,'')
,SKILL_NAME		= ISNULL(FF_SKILL_NAME,'')
,TEAM_NAME		= ISNULL(FF_TEAM_NAME ,'')
,TALK_TIME		= CAST(ISNULL(NULLIF(FF_TALK_TIME	,''),'0.00') AS DECIMAL(10,2))
,ACW_TIME		= CAST(ISNULL(NULLIF(FF_ACW_TIME	,''),'0.00') AS DECIMAL(10,2))
,HOLD_TIME		= CAST(ISNULL(NULLIF(FF_HOLD_TIME	,''),'0.00') AS DECIMAL(10,2))

--======================================================================
--POPULATE TRUE OUTBOUND TALK TIME VALUE
--======================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1 SET
 TRUE_OUTBOUND_TALK_TIME = CASE WHEN FF_CONTACT_ID = FF_MASTER_CONTACT_ID
									THEN TALK_TIME 
								ELSE 0.00
						   END

--===================================================================================================
-- UPDATE DATETIME KEY
--===================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM		WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1	I
INNER JOIN	DATE_TIME									DT	ON DT.CAL_DATE = I.[DATETIME]

--===============================================
--HANDLE INVALID DATE/TIME RECORDS:
--===============================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_CONTACT_ID
,FF_MASTER_CONTACT_ID
,FF_TALK_TIME
,FF_ACW_TIME
,FF_HOLD_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,TALK_TIME
,ACW_TIME
,HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME
,STD_TENANT_START_DATE_TIME_KEY)
SELECT
 'DTM'					--BAD_IMPORTS_CODE		--'Invalid Date/Time'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_CONTACT_ID
,W1.FF_MASTER_CONTACT_ID
,W1.FF_TALK_TIME
,W1.FF_ACW_TIME
,W1.FF_HOLD_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.TALK_TIME
,W1.ACW_TIME
,W1.HOLD_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.STD_TENANT_START_DATE_TIME_KEY
FROM           WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1    W1
WHERE ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) = 0

--======================================================================
--DELETE INVALID DATE/TIME RECORDS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================

--SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1

--===========================================================================================================
--HANDLE DUPLICATES:
--===========================================================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_CONTACT_ID
,FF_MASTER_CONTACT_ID
,FF_TALK_TIME
,FF_ACW_TIME
,FF_HOLD_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,TALK_TIME
,ACW_TIME
,HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME
,STD_TENANT_START_DATE_TIME_KEY)
SELECT
 'DUP'					--BAD_IMPORTS_CODE		--'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_CONTACT_ID
,W1.FF_MASTER_CONTACT_ID
,W1.FF_TALK_TIME
,W1.FF_ACW_TIME
,W1.FF_HOLD_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.TALK_TIME
,W1.ACW_TIME
,W1.HOLD_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.STD_TENANT_START_DATE_TIME_KEY
FROM
(	SELECT
	 FF_DATE
	,FF_INTERVAL_30_MINUTES
	,FF_AGENT_NAME
	,FF_SKILL_NAME
	,FF_TEAM_NAME
	,FF_CONTACT_ID
	,FF_MASTER_CONTACT_ID
	,FF_TALK_TIME
	,ROW_NUMBER() over (partition by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_SKILL_NAME, FF_TEAM_NAME, FF_CONTACT_ID, FF_MASTER_CONTACT_ID, FF_TALK_TIME
                            order by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_SKILL_NAME, FF_TEAM_NAME, FF_CONTACT_ID, FF_MASTER_CONTACT_ID, TALK_TIME DESC) ROWNO
	FROM WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1
) TNM
LEFT JOIN      WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1	W1   ON W1.FF_DATE					= TNM.FF_DATE
															AND W1.FF_INTERVAL_30_MINUTES	= TNM.FF_INTERVAL_30_MINUTES
															AND W1.FF_AGENT_NAME			= TNM.FF_AGENT_NAME
															AND W1.FF_SKILL_NAME			= TNM.FF_SKILL_NAME
															AND W1.FF_TEAM_NAME				= TNM.FF_TEAM_NAME
															AND W1.FF_CONTACT_ID			= TNM.FF_CONTACT_ID
															AND W1.FF_MASTER_CONTACT_ID		= TNM.FF_MASTER_CONTACT_ID
															AND W1.FF_TALK_TIME				= TNM.FF_TALK_TIME
WHERE TNM.ROWNO > 1

--===========================================================================================================
--DELETE DUPLICATES:
--===========================================================================================================
DELETE FROM TNM
FROM
(	SELECT
	 FF_DATE
	,FF_INTERVAL_30_MINUTES
	,FF_AGENT_NAME
	,FF_SKILL_NAME
	,FF_TEAM_NAME
	,FF_CONTACT_ID
	,FF_MASTER_CONTACT_ID
	,FF_TALK_TIME
	,ROW_NUMBER() over (partition by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_SKILL_NAME, FF_TEAM_NAME, FF_CONTACT_ID, FF_MASTER_CONTACT_ID, FF_TALK_TIME
                            order by FF_DATE, FF_INTERVAL_30_MINUTES, FF_AGENT_NAME, FF_SKILL_NAME, FF_TEAM_NAME, FF_CONTACT_ID, FF_MASTER_CONTACT_ID, TALK_TIME DESC) ROWNO
	FROM WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1
) TNM
WHERE TNM.ROWNO > 1
--===========================================================================================================

--===========================================================================================================
--REMOVE RECORDS THAT FALL OUTSIDE OF BUSINESS HOURS (07:00 - 00:00 CST):
--===========================================================================================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_BAD
(
 BAD_IMPORTS_CODE
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_CONTACT_ID
,FF_MASTER_CONTACT_ID
,FF_TALK_TIME
,FF_ACW_TIME
,FF_HOLD_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,TALK_TIME
,ACW_TIME
,HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME
,STD_TENANT_START_DATE_TIME_KEY)
SELECT
 'OBH'					--BAD_IMPORTS_CODE		--'O'utside 'B'usiness 'H'ours
,'ACT'                  --BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W1.FF_DATE
,W1.FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,W1.FF_SKILL_NAME
,W1.FF_TEAM_NAME
,W1.FF_CONTACT_ID
,W1.FF_MASTER_CONTACT_ID
,W1.FF_TALK_TIME
,W1.FF_ACW_TIME
,W1.FF_HOLD_TIME
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.AGENT_NAME
,W1.SKILL_NAME
,W1.TEAM_NAME
,W1.TALK_TIME
,W1.ACW_TIME
,W1.HOLD_TIME
,W1.TRUE_OUTBOUND_TALK_TIME
,W1.STD_TENANT_START_DATE_TIME_KEY
--SELECT *
FROM           WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1    W1
WHERE W1.HOUR_INTERVAL IN (0,1,2,3,4,5,6)

--======================================================================
--DELETE RECORDS THAT OUR OUTSIDE OF BUSINESS HOURS;
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1
WHERE HOUR_INTERVAL IN (0,1,2,3,4,5,6)
--======================================================================

--======================================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .CSV FILES:
--======================================================================
--SELECT * FROM WSOL_TB_IMPORT_ERRORS_FOUND WHERE TENANT_KEY = 160
--======================================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--Check #1:  ===================================================================================================
--	SET @RCD_CNT = (SELECT COUNT(*) FROM WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1)
--	IF @RCD_CNT < 1 BEGIN
--		SET @MSG1 = @MSG1 + 'ERROR!  File Import Failed.  No Records Were/Could Be Imported.   |   ' 
--		SET @ERR_CNT = @ERR_CNT + 1
--	END

--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	(
	 TENANT_KEY
	,SUB_GROUP_NAME
	,ERROR_MSG)
	SELECT 
	 @TENANT_KEY					--TENANT_KEY
	,'MONAT_INVOICING_OUTBOUND'	--SUB_GROUP_NAME
	,@MSG1						--ERROR_MSG
	--===========================
--	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	--MUST RETURN AT LEAST ONE RECORD TO SSIS
	INSERT INTO WSOL_TB_IMPORT_ERRORS_FOUND
	(
 	 TENANT_KEY
	,SUB_GROUP_NAME
	,ERROR_MSG)
	SELECT 
	 @TENANT_KEY				--TENANT_KEY
	,'MONAT_INVOICING_OUTBOUND'	--SUB_GROUP_NAME
	,''							--ERROR_MSG
END

--===========================================================
--GROUP DATA BY HOURLY INTERVALS
--===========================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_2

INSERT INTO WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_2
(
 FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_CONTACT_ID
,FF_MASTER_CONTACT_ID
,FF_TALK_TIME
,FF_ACW_TIME
,FF_HOLD_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,TALK_TIME
,ACW_TIME
,HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME
,STD_TENANT_START_DATE_TIME_KEY
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W1.FF_DATE
,NULL	--FF_INTERVAL_30_MINUTES
,W1.FF_AGENT_NAME
,NULL	--FF_SKILL_NAME
,MAX(W1.FF_TEAM_NAME)
,NULL	--FF_CONTACT_ID
,NULL	--FF_MASTER_CONTACT_ID
,SUM(CAST(ISNULL(NULLIF(W1.FF_TALK_TIME	,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_ACW_TIME	,''),0) AS DECIMAL(10,2)))
,SUM(CAST(ISNULL(NULLIF(W1.FF_HOLD_TIME	,''),0) AS DECIMAL(10,2)))

,W1.SEQNO_ADDED_TIME
,MIN(W1.SEQNO)
,W1.FTP_FILE_NAME

,W1.[DATETIME]
,W1.HOUR_INTERVAL
,MAX(W1.AGENT_NAME)
,NULL						--SKILL_NAME
,W1.TEAM_NAME
,SUM(ISNULL(W1.TALK_TIME					,0.00))
,SUM(ISNULL(W1.ACW_TIME						,0.00))
,SUM(ISNULL(W1.HOLD_TIME					,0.00))
,SUM(ISNULL(W1.TRUE_OUTBOUND_TALK_TIME		,0.00))
,W1.STD_TENANT_START_DATE_TIME_KEY

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_1  W1

LEFT JOIN       WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_2   G	 ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
															AND G.FF_AGENT_NAME                  = W1.FF_AGENT_NAME
															AND G.TEAM_NAME						 = W1.TEAM_NAME

WHERE (G.FF_AGENT_NAME						IS NULL AND ISNULL(W1.FF_AGENT_NAME,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY		IS NULL AND ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND (G.TEAM_NAME							IS NULL AND ISNULL(W1.TEAM_NAME,'') <> '' )

GROUP BY
 W1.FF_DATE
,W1.FF_AGENT_NAME
,W1.TEAM_NAME
,W1.SEQNO_ADDED_TIME
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.STD_TENANT_START_DATE_TIME_KEY

ORDER BY
 W1.FF_AGENT_NAME
,W1.TEAM_NAME
,W1.[DATETIME]

--=============================================
--UPDATE PERMANENT OUTBOUND TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING SET
 FF_DATE							= W2.FF_DATE
,FF_INTERVAL_30_MINUTES				= W2.FF_INTERVAL_30_MINUTES
--,FF_AGENT_NAME					= W2.FF_AGENT_NAME
,FF_SKILL_NAME						= W2.FF_SKILL_NAME
,FF_TEAM_NAME						= W2.FF_TEAM_NAME
,FF_CONTACT_ID						= W2.FF_CONTACT_ID
,FF_MASTER_CONTACT_ID				= W2.FF_MASTER_CONTACT_ID
,FF_TALK_TIME						= W2.FF_TALK_TIME
,FF_ACW_TIME						= W2.FF_ACW_TIME
,FF_HOLD_TIME						= W2.FF_HOLD_TIME

,SEQNO_ADDED_TIME					= W2.SEQNO_ADDED_TIME
,SEQNO								= W2.SEQNO
--,FTP_FILE_NAME					= W2.FTP_FILE_NAME

,[DATETIME]							= W2.[DATETIME]
,HOUR_INTERVAL						= W2.HOUR_INTERVAL
,AGENT_NAME							= W2.AGENT_NAME
,SKILL_NAME							= W2.SKILL_NAME
--,TEAM_NAME						= W2.TEAM_NAME
,TALK_TIME							= W2.TALK_TIME
,ACW_TIME							= W2.ACW_TIME
,HOLD_TIME							= W2.HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME			= W2.TRUE_OUTBOUND_TALK_TIME
--,STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
--,WS_ROW_CREATED_TIME				= NULL
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_2  W2
INNER JOIN      WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
															AND G.FF_AGENT_NAME						= W2.FF_AGENT_NAME
															AND G.TEAM_NAME							= W2.TEAM_NAME
															AND G.FTP_FILE_NAME						= W2.FTP_FILE_NAME

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
  AND G.TEAM_NAME					   = W2.TEAM_NAME
  AND G.FTP_FILE_NAME				   = W2.FTP_FILE_NAME

--=============================================
--INSERT INTO PERMANENT OUTBOUND IMPORT TABLE: 
--=============================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING
(
 FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_CONTACT_ID
,FF_MASTER_CONTACT_ID
,FF_TALK_TIME
,FF_ACW_TIME
,FF_HOLD_TIME
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,SKILL_NAME
,TEAM_NAME
,TALK_TIME
,ACW_TIME
,HOLD_TIME
,TRUE_OUTBOUND_TALK_TIME
,STD_TENANT_START_DATE_TIME_KEY
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W2.FF_DATE
,W2.FF_INTERVAL_30_MINUTES
,W2.FF_AGENT_NAME
,W2.FF_SKILL_NAME
,W2.FF_TEAM_NAME
,W2.FF_CONTACT_ID
,W2.FF_MASTER_CONTACT_ID
,W2.FF_TALK_TIME
,W2.FF_ACW_TIME
,W2.FF_HOLD_TIME

,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME

,W2.[DATETIME]
,W2.HOUR_INTERVAL
,W2.AGENT_NAME
,W2.SKILL_NAME
,W2.TEAM_NAME
,W2.TALK_TIME
,W2.ACW_TIME
,W2.HOLD_TIME
,W2.TRUE_OUTBOUND_TALK_TIME
,W2.STD_TENANT_START_DATE_TIME_KEY

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_2  W2

LEFT JOIN       WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING    G  ON G.STD_TENANT_START_DATE_TIME_KEY	 = W2.STD_TENANT_START_DATE_TIME_KEY
															AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
															AND G.TEAM_NAME						 = W2.TEAM_NAME
															AND G.FTP_FILE_NAME					 = W2.FTP_FILE_NAME

WHERE (G.FF_AGENT_NAME					IS NULL AND ISNULL(W2.FF_AGENT_NAME,'') <> '' )
  AND (G.TEAM_NAME						IS NULL AND ISNULL(W2.TEAM_NAME, '') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W2.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND (G.FTP_FILE_NAME					IS NULL AND ISNULL(W2.FTP_FILE_NAME,'') <> '' )


--SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_2
--SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2

--=============================================
--UPDATE INVOICE WORK TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2 SET
 TRUE_OUTBOUND_TALK_TIME		= W2.TRUE_OUTBOUND_TALK_TIME
,WS_ROW_UPDATED_TIME			= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_2  W2
INNER JOIN      WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2	 G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
															AND G.FF_AGENT_NAME						= W2.FF_AGENT_NAME
															--AND G.TEAM_NAME							= W2.TEAM_NAME

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
  --AND G.TEAM_NAME					   = W2.TEAM_NAME

--SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2
--=============================================
--INSERT INTO INVOICE WORK TABLE:					--NOT REALLY NECESSARY SINCE THERE SHOULDN'T BE ANY OUTBOUND DATA WITHOUT LOGIN DATA
--=============================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2
(
 FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_UNAVAILABLE_CODE
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_LOGIN_TIME
,FF_AVAILABLE_TIME
,FF_UNAVAILABLE_TIME_MINUS_ACW
,FF_TALK_TIME
,FF_HOLD_TIME
,FF_ACW_TIME
,FF_HELD_PARTY_ABANDONS
,FF_INBOUND_HANDLED
,FF_OUTBOUND_HANDLED
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,UNAVAILABLE_CODE
,SKILL_NAME
,TEAM_NAME
,INBOUND_HANDLED_COUNT
,OUTBOUND_HANDLED_COUNT
,TOTAL_CALL_COUNT
,HELD_PARTY_ABANDON_COUNT
,LOGIN_TIME
,AVAILABLE_TIME
,UNAVAILABLE_EMAIL_TIME
,UNAVAILABLE_WSOL_EMAIL_TIME
,UNAVAILABLE_FLOOR_SUPPORT_TIME
,UNAVAILABLE_SPECIAL_PROJECT_TIME
,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,UNAVAILABLE_IT_SYS_ISSUE_TIME
,UNAVAILABLE_IDLE_TIME
,UNAVAILABLE_REFUSED_TIME
,UNAVAILABLE_SYSTEM_PENDING_TIME
,UNAVAILABLE_OUTBOUND_CALL_TIME
,UNAVAILABLE_TIME_MINUS_ACW
,TALK_TIME
,HOLD_TIME
,ACW_TIME
,AUTHORIZED_ACW_TIME
,TRUE_OUTBOUND_TALK_TIME
,TOTAL_TALK
,HANDLE_TIME
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,PAY_GROUP
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W2.FF_DATE
,NULL									--W2.FF_INTERVAL_30_MINUTES
,W2.FF_AGENT_NAME
,NULL									--W2.FF_UNAVAILABLE_CODE
,NULL									--W2.FF_SKILL_NAME
,W2.FF_TEAM_NAME
,NULL									--W2.FF_LOGIN_TIME
,NULL									--W2.FF_AVAILABLE_TIME
,NULL									--W2.FF_UNAVAILABLE_TIME_MINUS_ACW
,NULL									--W2.FF_TALK_TIME
,NULL									--W2.FF_HOLD_TIME
,NULL									--W2.FF_ACW_TIME
,NULL									--W2.FF_HELD_PARTY_ABANDONS
,NULL									--W2.FF_INBOUND_HANDLED
,NULL									--W2.FF_OUTBOUND_HANDLED

,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME

,W2.[DATETIME]
,W2.HOUR_INTERVAL
,W2.AGENT_NAME
,NULL									--W2.UNAVAILABLE_CODE
,W2.SKILL_NAME
,W2.TEAM_NAME
,NULL									--W2.INBOUND_HANDLED_COUNT
,NULL									--W2.OUTBOUND_HANDLED_COUNT
,NULL									--W2.TOTAL_CALL_COUNT
,NULL									--W2.HELD_PARTY_ABANDON_COUNT
,NULL									--W2.LOGIN_TIME
,NULL									--W2.AVAILABLE_TIME
,NULL									--W2.UNAVAILABLE_EMAIL_TIME
,NULL									--W2.UNAVAILABLE_WSOL_EMAIL_TIME
,NULL									--W2.UNAVAILABLE_FLOOR_SUPPORT_TIME
,NULL									--W2.UNAVAILABLE_SPECIAL_PROJECT_TIME
,NULL									--W2.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,NULL									--W2.UNAVAILABLE_IT_SYS_ISSUE_TIME
,NULL									--W2.UNAVAILABLE_IDLE_TIME
,NULL									--W2.UNAVAILABLE_REFUSED_TIME
,NULL									--W2.UNAVAILABLE_SYSTEM_PENDING_TIME
,NULL									--W2.UNAVAILABLE_OUTBOUND_CALL_TIME
,NULL									--W2.UNAVAILABLE_TIME_MINUS_ACW
,NULL									--W2.TALK_TIME
,NULL									--W2.HOLD_TIME
,NULL									--W2.ACW_TIME
,NULL									--W2.AUTHORIZED_ACW_TIME
,W2.TRUE_OUTBOUND_TALK_TIME
,NULL									--W2.TOTAL_TALK
,NULL									--W2.HANDLE_TIME
,NULL									--W2.CPROD
,NULL									--W2.MINIMUM_GUARANTEE
,NULL									--W2.AUTHORIZED_TO_INVOICE
,NULL									--W2.EMAIL
,NULL									--W2.ID_EXT
,NULL									--W2.SCHEDULER_ACL_NAME
,W2.STD_TENANT_START_DATE_TIME_KEY
,NULL									--W2.CAL_DATE
,NULL									--W2.TENANT_KEY
,NULL									--W2.AIR_DAY_TYPE
,NULL									--W2.AIR_ACW_FONT_COLOR
,NULL									--W2.MIN_GUARANTEE_MINUTES
,NULL									--W2.MIN_GUARANTEE_TYPE
,NULL									--W2.AUTHORIZED_TO_INVOICE_TYPE
,NULL									--W2.HAS_HOLIDAYS
,NULL									--W2.INCLUDE_IN_CAS
,NULL									--W2.READY_FOR_XML
,NULL									--W2.SHOW_ID_EXTS
,NULL									--W2.INVOICE_ID
,NULL									--W2.RESOURCE_NAME
,NULL									--W2.AIRITKDUR
,NULL									--W2.AIRIACDUR
,NULL									--W2.PAY_GROUP

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_MONAT_IC_OB_INVOICING_2  W2

LEFT JOIN       WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2  G   ON G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
														 AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
														 --AND G.TEAM_NAME					  = W2.TEAM_NAME

WHERE (G.FF_AGENT_NAME					IS NULL AND ISNULL(W2.FF_AGENT_NAME,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W2.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  --AND (G.TEAM_NAME						IS NULL AND ISNULL(W2.TEAM_NAME,'') <> '' )

--SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2


--======================================================================
--UPDATE TOTAL TALK VALUE
--======================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2 SET
 TOTAL_TALK = TALK_TIME + TRUE_OUTBOUND_TALK_TIME

 --======================================================================================
 --CALCULATE AUTHORIZED ACW TIME VALUE
 --======================================================================================
 UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2 SET
  AUTHORIZED_ACW_TIME = CASE WHEN (TOTAL_CALL_COUNT * 300.00) > ACW_TIME THEN ACW_TIME
							 ELSE (TOTAL_CALL_COUNT * 300.00)	-- 5 MINS PER CALL
						END

--=======================================================================================
--REMOVE RECORDS WHERE LOGIN_TIME = ACW_TIME
--=======================================================================================
--SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2 WHERE LOGIN_TIME = ACW_TIME
INSERT INTO WSOL_TB_IMPORTS_MONAT_IC_INVOICING_BAD
SELECT
 'ACW'					--BAD_IMPORTS_CODE		--LOGIN_TIME = 'ACW'_TIME
,'ACT'                  --BAD_IMPORTS_FILE_TYPE	--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME
,W2.FF_DATE
,W2.FF_INTERVAL_30_MINUTES
,W2.FF_AGENT_NAME
,W2.FF_UNAVAILABLE_CODE
,W2.FF_SKILL_NAME
,W2.FF_TEAM_NAME
,W2.FF_LOGIN_TIME
,W2.FF_AVAILABLE_TIME
,W2.FF_UNAVAILABLE_TIME_MINUS_ACW
,W2.FF_TALK_TIME
,W2.FF_HOLD_TIME
,W2.FF_ACW_TIME
,W2.FF_HELD_PARTY_ABANDONS
,W2.FF_INBOUND_HANDLED
,W2.FF_OUTBOUND_HANDLED
,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME
,W2.[DATETIME]
,W2.HOUR_INTERVAL
,W2.AGENT_NAME
,W2.UNAVAILABLE_CODE
,W2.SKILL_NAME
,W2.TEAM_NAME
,W2.INBOUND_HANDLED_COUNT
,W2.OUTBOUND_HANDLED_COUNT
,W2.TOTAL_CALL_COUNT
,W2.HELD_PARTY_ABANDON_COUNT
,W2.LOGIN_TIME
,W2.AVAILABLE_TIME
,W2.UNAVAILABLE_EMAIL_TIME
,W2.UNAVAILABLE_WSOL_EMAIL_TIME
,W2.UNAVAILABLE_FLOOR_SUPPORT_TIME
,W2.UNAVAILABLE_SPECIAL_PROJECT_TIME
,W2.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,W2.UNAVAILABLE_IT_SYS_ISSUE_TIME
,W2.UNAVAILABLE_IDLE_TIME
,W2.UNAVAILABLE_REFUSED_TIME
,W2.UNAVAILABLE_SYSTEM_PENDING_TIME
,W2.UNAVAILABLE_OUTBOUND_CALL_TIME
,W2.UNAVAILABLE_TIME_MINUS_ACW
,W2.TALK_TIME
,W2.HOLD_TIME
,W2.ACW_TIME
,W2.AUTHORIZED_ACW_TIME
,W2.TRUE_OUTBOUND_TALK_TIME
,W2.TOTAL_TALK
,W2.HANDLE_TIME
,W2.CPROD
,W2.MINIMUM_GUARANTEE
,W2.AUTHORIZED_TO_INVOICE
,W2.EMAIL
,W2.ID_EXT
,W2.SCHEDULER_ACL_NAME
,W2.STD_TENANT_START_DATE_TIME_KEY
,W2.CAL_DATE
,W2.TENANT_KEY
,W2.AIR_DAY_TYPE
,W2.AIR_ACW_FONT_COLOR
,W2.MIN_GUARANTEE_MINUTES
,W2.MIN_GUARANTEE_TYPE
,W2.AUTHORIZED_TO_INVOICE_TYPE
,W2.HAS_HOLIDAYS
,W2.INCLUDE_IN_CAS
,W2.READY_FOR_XML
,W2.SHOW_ID_EXTS
,W2.INVOICE_ID
,W2.RESOURCE_NAME
,W2.AIRITKDUR
,W2.AIRIACDUR
,W2.PAY_GROUP
--SELECT *
FROM           WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2    W2
WHERE W2.LOGIN_TIME = W2.ACW_TIME

--======================================================================
--DELETE RECORDS WHERE LOGIN_TIME = ACW_TIME
--======================================================================
DELETE FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2
WHERE LOGIN_TIME = ACW_TIME
--======================================================================

--======================================================================
--CALCULATE HANDLE_TIME VALUE
--======================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2 SET
 HANDLE_TIME = TOTAL_TALK + ACW_TIME

--===================================================================================================================================================
--UPDATE CPROD TIME (AVAILABLE + TOTAL TALK + AUTHORIZED_ACW_TIME + BILLABLE_UNAVAILABLE_TIME)
--===================================================================================================================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2 SET
 CPROD = CASE WHEN ID_EXT = 'MRA' THEN AVAILABLE_TIME + TOTAL_TALK + AUTHORIZED_ACW_TIME + UNAVAILABLE_EMAIL_TIME + UNAVAILABLE_WSOL_EMAIL_TIME + UNAVAILABLE_SPECIAL_PROJECT_TIME +
									   UNAVAILABLE_HELD_PARTY_ABANDONED_TIME + UNAVAILABLE_IT_SYS_ISSUE_TIME + UNAVAILABLE_SYSTEM_PENDING_TIME + UNAVAILABLE_OUTBOUND_CALL_TIME + UNAVAILABLE_FLOOR_SUPPORT_TIME

			  ELSE					   AVAILABLE_TIME + TOTAL_TALK + AUTHORIZED_ACW_TIME + UNAVAILABLE_EMAIL_TIME + UNAVAILABLE_WSOL_EMAIL_TIME + UNAVAILABLE_SPECIAL_PROJECT_TIME +
									   UNAVAILABLE_HELD_PARTY_ABANDONED_TIME + UNAVAILABLE_IT_SYS_ISSUE_TIME + UNAVAILABLE_SYSTEM_PENDING_TIME + UNAVAILABLE_OUTBOUND_CALL_TIME
		 END

--====================================================
-- CALCULATE MINIMUM GUARANTEE VALUE
--====================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2 SET
 MINIMUM_GUARANTEE = CPROD

--====================================================
--CALCULATE AUTHORIZED TO INVOICE VALUE
--====================================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2 SET
 AUTHORIZED_TO_INVOICE = CPROD

--SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2 WHERE AUTHORIZED_TO_INVOICE > 3600.00
--SELECT * FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING

--=============================================
--UPDATE PERMANENT TABLE
--=============================================
UPDATE WSOL_TB_IMPORTS_MONAT_IC_INVOICING SET
 FF_DATE								= W2.FF_DATE
,FF_INTERVAL_30_MINUTES					= W2.FF_INTERVAL_30_MINUTES
--,FF_AGENT_NAME						= W2.FF_AGENT_NAME
,FF_UNAVAILABLE_CODE					= W2.UNAVAILABLE_CODE
,FF_SKILL_NAME							= W2.FF_SKILL_NAME
,FF_TEAM_NAME							= W2.FF_TEAM_NAME
,FF_LOGIN_TIME							= W2.FF_LOGIN_TIME
,FF_AVAILABLE_TIME						= W2.FF_AVAILABLE_TIME
,FF_UNAVAILABLE_TIME_MINUS_ACW			= W2.FF_UNAVAILABLE_TIME_MINUS_ACW
,FF_TALK_TIME							= W2.FF_TALK_TIME
,FF_HOLD_TIME							= W2.FF_HOLD_TIME
,FF_ACW_TIME							= W2.FF_ACW_TIME
,FF_HELD_PARTY_ABANDONS					= W2.FF_HELD_PARTY_ABANDONS
,FF_INBOUND_HANDLED						= W2.FF_INBOUND_HANDLED
,FF_OUTBOUND_HANDLED					= W2.FF_OUTBOUND_HANDLED

,SEQNO_ADDED_TIME						= W2.SEQNO_ADDED_TIME
,SEQNO									= W2.SEQNO
--,FTP_FILE_NAME						= W2.FTP_FILE_NAME

,[DATETIME]								= W2.[DATETIME]
,HOUR_INTERVAL							= W2.HOUR_INTERVAL
,AGENT_NAME								= W2.AGENT_NAME
,UNAVAILABLE_CODE						= W2.UNAVAILABLE_CODE
,SKILL_NAME								= W2.SKILL_NAME
,TEAM_NAME								= W2.TEAM_NAME
,INBOUND_HANDLED_COUNT					= W2.INBOUND_HANDLED_COUNT
,OUTBOUND_HANDLED_COUNT					= W2.OUTBOUND_HANDLED_COUNT
,TOTAL_CALL_COUNT						= W2.TOTAL_CALL_COUNT
,HELD_PARTY_ABANDON_COUNT				= W2.HELD_PARTY_ABANDON_COUNT
,LOGIN_TIME								= W2.LOGIN_TIME
,AVAILABLE_TIME							= W2.AVAILABLE_TIME
,UNAVAILABLE_EMAIL_TIME					= W2.UNAVAILABLE_EMAIL_TIME
,UNAVAILABLE_WSOL_EMAIL_TIME			= W2.UNAVAILABLE_WSOL_EMAIL_TIME
,UNAVAILABLE_FLOOR_SUPPORT_TIME			= W2.UNAVAILABLE_FLOOR_SUPPORT_TIME
,UNAVAILABLE_SPECIAL_PROJECT_TIME		= W2.UNAVAILABLE_SPECIAL_PROJECT_TIME
,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME	= W2.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,UNAVAILABLE_IT_SYS_ISSUE_TIME			= W2.UNAVAILABLE_IT_SYS_ISSUE_TIME
,UNAVAILABLE_IDLE_TIME					= W2.UNAVAILABLE_IDLE_TIME
,UNAVAILABLE_REFUSED_TIME				= W2.UNAVAILABLE_REFUSED_TIME
,UNAVAILABLE_SYSTEM_PENDING_TIME		= W2.UNAVAILABLE_SYSTEM_PENDING_TIME
,UNAVAILABLE_OUTBOUND_CALL_TIME			= W2.UNAVAILABLE_OUTBOUND_CALL_TIME
,UNAVAILABLE_TIME_MINUS_ACW				= W2.UNAVAILABLE_TIME_MINUS_ACW
,TALK_TIME								= W2.TALK_TIME
,HOLD_TIME								= W2.HOLD_TIME
,ACW_TIME								= W2.ACW_TIME
,AUTHORIZED_ACW_TIME					= W2.AUTHORIZED_ACW_TIME
,TRUE_OUTBOUND_TALK_TIME				= W2.TRUE_OUTBOUND_TALK_TIME
,TOTAL_TALK								= W2.TOTAL_TALK
,HANDLE_TIME							= W2.HANDLE_TIME
,CPROD									= W2.CPROD
,MINIMUM_GUARANTEE						= W2.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE					= W2.AUTHORIZED_TO_INVOICE
,EMAIL									= W2.EMAIL
--,ID_EXT								= W2.ID_EXT
,SCHEDULER_ACL_NAME						= W2.SCHEDULER_ACL_NAME
--,STD_TENANT_START_DATE_TIME_KEY		= W2.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE								= W2.CAL_DATE
,TENANT_KEY								= W2.TENANT_KEY
,AIR_DAY_TYPE							= W2.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR						= W2.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES					= W2.MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE						= W2.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE				= W2.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS							= W2.HAS_HOLIDAYS
,INCLUDE_IN_CAS							= W2.INCLUDE_IN_CAS
,READY_FOR_XML							= W2.READY_FOR_XML
,SHOW_ID_EXTS							= W2.SHOW_ID_EXTS
,INVOICE_ID								= W2.INVOICE_ID
,RESOURCE_NAME							= W2.RESOURCE_NAME
,AIRITKDUR								= W2.AIRITKDUR
,AIRIACDUR								= W2.AIRIACDUR
,PAY_GROUP								= W2.PAY_GROUP
--,WS_ROW_CREATED_TIME					= NULL
,WS_ROW_UPDATED_TIME					= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2  W2
INNER JOIN      WSOL_TB_IMPORTS_MONAT_IC_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
														 AND G.FF_AGENT_NAME					= W2.FF_AGENT_NAME
														 AND G.FTP_FILE_NAME					= W2.FTP_FILE_NAME
														 AND G.ID_EXT							= W2.ID_EXT

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY = W2.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_AGENT_NAME                  = W2.FF_AGENT_NAME
  AND G.FTP_FILE_NAME				   = W2.FTP_FILE_NAME
  AND G.ID_EXT						   = W2.ID_EXT

--=============================================
--INSERT INTO PERMANENT IMPORT TABLE: 
--=============================================
INSERT INTO WSOL_TB_IMPORTS_MONAT_IC_INVOICING
(
 FF_DATE
,FF_INTERVAL_30_MINUTES
,FF_AGENT_NAME
,FF_UNAVAILABLE_CODE
,FF_SKILL_NAME
,FF_TEAM_NAME
,FF_LOGIN_TIME
,FF_AVAILABLE_TIME
,FF_UNAVAILABLE_TIME_MINUS_ACW
,FF_TALK_TIME
,FF_HOLD_TIME
,FF_ACW_TIME
,FF_HELD_PARTY_ABANDONS
,FF_INBOUND_HANDLED
,FF_OUTBOUND_HANDLED
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,AGENT_NAME
,UNAVAILABLE_CODE
,SKILL_NAME
,TEAM_NAME
,INBOUND_HANDLED_COUNT
,OUTBOUND_HANDLED_COUNT
,TOTAL_CALL_COUNT
,HELD_PARTY_ABANDON_COUNT
,LOGIN_TIME
,AVAILABLE_TIME
,UNAVAILABLE_EMAIL_TIME
,UNAVAILABLE_WSOL_EMAIL_TIME
,UNAVAILABLE_FLOOR_SUPPORT_TIME
,UNAVAILABLE_SPECIAL_PROJECT_TIME
,UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,UNAVAILABLE_IT_SYS_ISSUE_TIME
,UNAVAILABLE_IDLE_TIME
,UNAVAILABLE_REFUSED_TIME
,UNAVAILABLE_SYSTEM_PENDING_TIME
,UNAVAILABLE_OUTBOUND_CALL_TIME
,UNAVAILABLE_TIME_MINUS_ACW
,TALK_TIME
,HOLD_TIME
,ACW_TIME
,AUTHORIZED_ACW_TIME
,TRUE_OUTBOUND_TALK_TIME
,TOTAL_TALK
,HANDLE_TIME
,CPROD
,MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_MINUTES
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,PAY_GROUP
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W2.FF_DATE
,W2.FF_INTERVAL_30_MINUTES
,W2.FF_AGENT_NAME
,W2.UNAVAILABLE_CODE
,W2.FF_SKILL_NAME
,W2.FF_TEAM_NAME
,W2.FF_LOGIN_TIME
,W2.FF_AVAILABLE_TIME
,W2.FF_UNAVAILABLE_TIME_MINUS_ACW
,W2.FF_TALK_TIME
,W2.FF_HOLD_TIME
,W2.FF_ACW_TIME
,W2.FF_HELD_PARTY_ABANDONS
,W2.FF_INBOUND_HANDLED
,W2.FF_OUTBOUND_HANDLED

,W2.SEQNO_ADDED_TIME
,W2.SEQNO
,W2.FTP_FILE_NAME

,W2.[DATETIME]
,W2.HOUR_INTERVAL
,W2.AGENT_NAME
,W2.UNAVAILABLE_CODE
,W2.SKILL_NAME
,W2.TEAM_NAME
,W2.INBOUND_HANDLED_COUNT
,W2.OUTBOUND_HANDLED_COUNT
,W2.TOTAL_CALL_COUNT
,W2.HELD_PARTY_ABANDON_COUNT
,W2.LOGIN_TIME
,W2.AVAILABLE_TIME
,W2.UNAVAILABLE_EMAIL_TIME
,W2.UNAVAILABLE_WSOL_EMAIL_TIME
,W2.UNAVAILABLE_FLOOR_SUPPORT_TIME
,W2.UNAVAILABLE_SPECIAL_PROJECT_TIME
,W2.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME
,W2.UNAVAILABLE_IT_SYS_ISSUE_TIME
,W2.UNAVAILABLE_IDLE_TIME
,W2.UNAVAILABLE_REFUSED_TIME
,W2.UNAVAILABLE_SYSTEM_PENDING_TIME
,W2.UNAVAILABLE_OUTBOUND_CALL_TIME
,W2.UNAVAILABLE_TIME_MINUS_ACW
,W2.TALK_TIME
,W2.HOLD_TIME
,W2.ACW_TIME
,W2.AUTHORIZED_ACW_TIME
,W2.TRUE_OUTBOUND_TALK_TIME
,W2.TOTAL_TALK
,W2.HANDLE_TIME
,W2.CPROD
,W2.MINIMUM_GUARANTEE
,W2.AUTHORIZED_TO_INVOICE
,W2.EMAIL
,W2.ID_EXT
,W2.SCHEDULER_ACL_NAME
,W2.STD_TENANT_START_DATE_TIME_KEY
,W2.CAL_DATE
,W2.TENANT_KEY
,W2.AIR_DAY_TYPE
,W2.AIR_ACW_FONT_COLOR
,W2.MIN_GUARANTEE_MINUTES
,W2.MIN_GUARANTEE_TYPE
,W2.AUTHORIZED_TO_INVOICE_TYPE
,W2.HAS_HOLIDAYS
,W2.INCLUDE_IN_CAS
,W2.READY_FOR_XML
,W2.SHOW_ID_EXTS
,W2.INVOICE_ID
,W2.RESOURCE_NAME
,W2.AIRITKDUR
,W2.AIRIACDUR
,W2.PAY_GROUP

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2  W2

LEFT JOIN       WSOL_TB_IMPORTS_MONAT_IC_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY	= W2.STD_TENANT_START_DATE_TIME_KEY
														 AND G.FF_AGENT_NAME					= W2.FF_AGENT_NAME
														 AND G.FTP_FILE_NAME					= W2.FTP_FILE_NAME
														 AND G.ID_EXT							= W2.ID_EXT

WHERE (G.FF_AGENT_NAME					IS NULL AND ISNULL(W2.FF_AGENT_NAME,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY	IS NULL AND ISNULL(W2.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND (G.FTP_FILE_NAME					IS NULL AND ISNULL(W2.FTP_FILE_NAME,'') <> '' )
--  AND (G.ID_EXT							IS NULL AND ISNULL(W2.ID_EXT,'') <> '' )


--==================================
SET DATEFIRST 1  -- = Monday
--==================================

--=============================================================================================
--Need when populating tmp DEW table for insert into _AIA table.
--=============================================================================================
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME

SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN([DATETIME]) FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX([DATETIME]) FROM WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2))  
--=============================================================================================

--===========================
IF OBJECT_ID('TEMPDB..#DT_EASY_WEEKS') IS NOT NULL BEGIN
   DROP TABLE #DT_EASY_WEEKS
END
CREATE TABLE #DT_EASY_WEEKS
(CAL_DATE_STRING      VARCHAR(10)
,CAL_WEEK_START_DATE  DATETIME
,CAL_WEEK_END_DATE    DATETIME
,PAY_CYCLE_CLOSURE_DATE DATETIME
)
INSERT INTO #DT_EASY_WEEKS
SELECT
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
FROM DATE_TIME DT
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
--WHERE DT.CAL_DATE >= CAST('06/01/2011' AS DATETIME) AND DT.CAL_DATE <  CAST('06/20/2011' AS DATETIME)
GROUP BY 
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
--===========================
UPDATE #DT_EASY_WEEKS SET CAL_WEEK_END_DATE = DATEADD(DD,6,CAL_WEEK_START_DATE)
--110713: WAS: 06/26/2011
UPDATE #DT_EASY_WEEKS SET
 PAY_CYCLE_CLOSURE_DATE = (CASE WHEN (DATEDIFF(DD,CAST('09/29/2013' AS DATETIME),CAL_WEEK_END_DATE) % 14) = 0 THEN
									CAL_WEEK_END_DATE
								ELSE
									DATEADD(DD,7,CAL_WEEK_END_DATE)
								END)
--SELECT * FROM #DT_EASY_WEEKS ORDER BY CAL_DATE_STRING


--=======================================================================================
--CREATE TMP TABLE:	Same structure as:  [YZ_TB_AGENT_INVOICE_AUTOMATION]
--=======================================================================================
IF OBJECT_ID('TEMPDB..#WSOL_TB_IMPORTS_MONAT_IC_UV_ANT_AIA') IS NOT NULL BEGIN
   DROP TABLE #WSOL_TB_IMPORTS_MONAT_IC_UV_ANT_AIA
END
CREATE TABLE #WSOL_TB_IMPORTS_MONAT_IC_UV_ANT_AIA
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](100) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](100) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #WSOL_TB_IMPORTS_MONAT_IC_UV_ANT_AIA
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.FF_AGENT_NAME --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING				--[DATE]             
,DT.LABEL_HH24 + ':00'			--HOD_INTERVAL

,AIA.LOGIN_TIME					--AU_DK_LOGGED_IN_DURATION
,AIA.AVAILABLE_TIME				--AU_DK_AVAILABLE_DURATION

,AIA.TOTAL_TALK					--AIA.TALK_TIME + AIA.TRUE_OUTBOUND_TALK_TIME    --AU_DK_TALK_DURATION
,AIA.TALK_TIME					--AU_DK_IB_TALK_DURATION
,AIA.TRUE_OUTBOUND_TALK_TIME	--AU_DK_OB_TALK_DURATION

,AIA.AUTHORIZED_ACW_TIME		--AU_DK_CONVENTIONAL_ACW
,AIA.UNAVAILABLE_TIME_MINUS_ACW	   + AIA.UNAVAILABLE_EMAIL_TIME + AIA.UNAVAILABLE_WSOL_EMAIL_TIME + AIA.UNAVAILABLE_FLOOR_SUPPORT_TIME  + AIA.UNAVAILABLE_SPECIAL_PROJECT_TIME + AIA.UNAVAILABLE_HELD_PARTY_ABANDONED_TIME +
 AIA.UNAVAILABLE_IT_SYS_ISSUE_TIME + AIA.UNAVAILABLE_IDLE_TIME  + AIA.UNAVAILABLE_REFUSED_TIME	  + AIA.UNAVAILABLE_SYSTEM_PENDING_TIME + AIA.UNAVAILABLE_OUTBOUND_CALL_TIME	--AU_DK_NR_DURATION
,0	--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0	--AU_DK_ADJUSTED_NR_DURATION
,AIA.CPROD						--AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.CPROD						--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS  

,0	--AU_DK_XFER_COUNT
,0  --AU_DK_HOLD_COUNT
,0  --AU_DK_CONFERENCE_COUNT
,0  --AU_DK_CONSULT_COUNT
,0  --AU_DK_PUP_COUNT

,0	--AU_DK_OFFERED_COUNT
,AIA.TOTAL_CALL_COUNT			--AU_DK_HANDLED_COUNT
,AIA.INBOUND_HANDLED_COUNT		--AU_DK_IB_HANDLE_COUNT
,AIA.OUTBOUND_HANDLED_COUNT		--AU_DK_OB_HANDLE_COUNT
																
,0  --AU_DK_RONA_COUNT
,0  --AU_DK_AWR_COUNT

,AIA.MINIMUM_GUARANTEE		--MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE  --AUTHORIZED_TO_INVOICE

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_MINUTES										--MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID  --CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID 
,AIA.RESOURCE_NAME
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,dbo.GETDATE()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL			--	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
FROM            WSOL_TB_IMPORTS_MONAT_IC_INVOICING_2			AIA 
--ONLY WANT TO INCLUDE VALID ID_EXTs IN AIA TABLE -- ID_EXTs TAHT HAVE MING AND AUT2 VALUES
INNER JOIN      WSOL_TB_IMPORTS_MONAT_SD_AIA_STATIC_DEFAULTS	AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      WSOL_TB_IMPORTS_MONAT_SD_INVOICE_GROUPS			CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME									DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS								DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')
  AND AIA.AUTHORIZED_TO_INVOICE <> 0.00											--<<<<<---- FILTER OUT RECORDS WHERE AUTHORIZED TIME = 0.00


--=====================================
--UPDATE WSOL_TB_...UV_ANT_AIA TABLE:
--=====================================
--SELECT TOP 100 * FROM WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA
UPDATE WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA SET
 [PLATFORM]							= W1.[PLATFORM]
,[STATUS]							= W1.[STATUS]
--,INVOICE_MAP_KEY					= W1.INVOICE_MAP_KEY
,FIELD_NAME							= W1.FIELD_NAME
,SCHEDULER_PROJECT_ID				= W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME					= W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION					= W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID			= W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME			= W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID				= W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME			= W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID			= W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID	= W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID		= W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY			= W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID					= W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID					= W1.HOLIDAY_INVOICE_ID
,HOLIDAY							= W1.HOLIDAY
,FILE_FORMAT_OF_PUSH				= W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID		= W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL							= W1.NEW_ACL
,CURRENT_CATS						= W1.CURRENT_CATS
,CATS_ID							= W1.CATS_ID
,PATS_ID							= W1.PATS_ID
,SMART_ELIGIBLE						= W1.SMART_ELIGIBLE
,SMART_TIER_1						= W1.SMART_TIER_1
,SMART_TIER_2						= W1.SMART_TIER_2
,SMART_TIER_3						= W1.SMART_TIER_3
,INTERVAL							= W1.INTERVAL
,[DATE]								= W1.[DATE]
,HOD_INTERVAL						= W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION			= W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION			= W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION				= W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION				= W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION				= W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW				= W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION					= W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT					= W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT					= W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT				= W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT				= W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT					= W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT				= W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT				= W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT				= W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT				= W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT					= W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT					= W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE					= W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE				= W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE					= W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE				= W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:
--,FTP_FILE_NAME					= W1.FTP_FILE_NAME
,EMAIL								= W1.EMAIL

--,STD_TENANT_START_DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W1.CAL_DATE
,TENANT_KEY							= W1.TENANT_KEY
,AIR_DAY_TYPE						= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE					= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE					= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W1.INCLUDE_IN_CAS
,READY_FOR_XML						= W1.READY_FOR_XML
,SHOW_ID_EXTS						= W1.SHOW_ID_EXTS
,INVOICE_ID							= W1.INVOICE_ID
,RESOURCE_NAME						= W1.RESOURCE_NAME

,AIRITKDUR							= W1.AIRITKDUR
,AIRIACDUR							= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

FROM            #WSOL_TB_IMPORTS_MONAT_IC_UV_ANT_AIA	W1

INNER JOIN      WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA	    UV   ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
															AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
															AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY
															AND UV.FTP_FILE_NAME				   = W1.FTP_FILE_NAME

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )
  AND ( UV.FTP_FILE_NAME				  = W1.FTP_FILE_NAME )

--================================================
--INSERT TMP TABLE FIELDS INTO WSOL_TB_... TABLE:
--================================================
INSERT INTO [WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #WSOL_TB_IMPORTS_MONAT_IC_UV_ANT_AIA   AIA
LEFT JOIN       WSOL_TB_IMPORTS_MONAT_UV_ANT_AIA	   UV   ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
														   AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
														   AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY
														   AND UV.FTP_FILE_NAME				   = AIA.FTP_FILE_NAME

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )
  AND ( UV.FTP_FILE_NAME				  IS NULL AND ISNULL(AIA.FTP_FILE_NAME,'') <> '' )

--====================================================
EARLY_EXIT:
--====================================================