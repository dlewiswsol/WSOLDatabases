
CREATE PROCEDURE [dbo].[uspIMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS]
 @DATE_BEG           DATETIME
,@DATE_END           DATETIME
,@TENANT_KEY         VARCHAR(150) --No multiples even though filter below is setup for multiples.
,@CUSTOMER_ID		 VARCHAR(150) --
,@INVOICE_GROUP      VARCHAR(150) --Hid. Def=' '
,@ID_EXT             VARCHAR(300) --Hid. Def=' '
,@RESOURCE_KEY       VARCHAR(10)  --Hid. Def='0'
,@TIME_INTERVAL      VARCHAR(10)  --Hid. Def='HR'  HR,DY,DR   FOR SUB: MD(Month by Day),MR(Month Range)  15 and 30 not possible !!!!
,@SHOW_RESOURCE      VARCHAR(1)   --Hid. Def='Y'
,@DUR_IN             VARCHAR(2)   --Hid. Def='MM' 
,@RESOURCE_FORMAT    VARCHAR(2)   --Hid. Def='NM' --'NM'=NAME + (employee id),  'ID'=ID
,@SHOW_HOLIDAY       VARCHAR(1)   --Hid. Def='N'
,@PSW                VARCHAR(10)  --Hid. Def='NONE'
,@EXECUTIONER        VARCHAR(3)   --Hid. Def='MAN'  MANual,SUBscription
,@RPT_TYPE_GRP       VARCHAR(3)   --Hid. Def='INV'
,@RPT_TYPE           VARCHAR(3)   --Hid. Def='INV'  
AS
SET NOCOUNT ON    

--  EXECUTE [dbo].[uspIMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS] '10/16/2017','10/31/2017','0','0','0','0','0','HR','Y','SS','NM','Y','4','MAN','INV','INV'

--  @TIME_INTERVAL:  Can only show invoicing report at hour level or higher !!!

--  Durations in data feed are in HH:MM:SS.

--  SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_SD_INVOICE_GROUPS
--  SELECT * FROM WSOL_TB_IMPORTS_BRIGHT_PATTERN_UV_ANT_AIA
    
--TMP:  FOR RUNNING SQL JOBS FOR PREVIOUS DAYS:  
--SET @DATE_BEG = '05/23/2014'
--SET @DATE_END = '06/05/2014'

--==================================--SET DATEFIRST 1  --1=MONDAY  7=SUNDAY  --DW = M,T,W,T,F,S,S
DECLARE
 @DTM_BEG AS DATETIME
,@DTM_END AS DATETIME
IF @DATE_BEG < '01/01/1901' BEGIN     
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) 
	SET @DTM_END = CAST(CONVERT(VARCHAR(10),dbo.getdate() - 1,101) AS DATETIME) -- + 1
END
ELSE BEGIN
    SET @DTM_BEG = CAST(CONVERT(VARCHAR(10),@DATE_BEG,101) AS DATETIME) 
    SET @DTM_END = CAST(CONVERT(VARCHAR(10),@DATE_END,101) AS DATETIME) -- + 1
END
SET @DTM_END    = @DTM_END + 1  --EVERYTHING ABOVE, @DTM_END IS FOR EXACT DATE RANGE NEEDED. ONE IS ADDED SO WHERE CLAUSE " < @DTM_END" WORKS.

DECLARE
 @MTD_BEG AS DATETIME
,@MTD_END AS DATETIME  --,@YTD_BEG AS DATETIME--,@YTD_END AS DATETIME
SET @MTD_BEG = CAST(CAST(DATEPART(mm,@DTM_BEG) AS VARCHAR(2)) + '/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)
SET @MTD_END = @DTM_END  --SET @YTD_BEG = CAST('01/01/' + CAST(DATEPART(yyyy,@DTM_BEG) AS VARCHAR(4)) AS DATETIME)  

IF @TIME_INTERVAL IN ('MR','MD') BEGIN  --MONTH DETERMINED BY @DTM_BEG.
	SET @DTM_BEG = @MTD_BEG
	SET @DTM_END = @MTD_END
END

--========================================================
--SET ID EXTENSIONS
--========================================================
SET @CUSTOMER_ID	= ',' + LTRIM(RTRIM(@CUSTOMER_ID)) + ','
SET @INVOICE_GROUP	= ',' + LTRIM(RTRIM(REPLACE(@INVOICE_GROUP,'NO INVOICE GROUP',''))) + ','


--==================================
--SET AMOUNT TO DIVIDE BY:
--==================================
DECLARE @DS DECIMAL(10,2)  -- SECONDS TO DIVIDE BY.
IF @DUR_IN = 'SS' BEGIN
    SET @DS = 1.00			--DIVIDE SECONDS BY 1 TO GET SECONDS.
END
IF @DUR_IN = 'MM' BEGIN
    SET @DS = 60.00			--DIVIDE SECONDS BY 60 TO GET MINUTES.
END
IF @DUR_IN = 'HH' BEGIN
    SET @DS = 3600.00		--DIVIDE SECONDS BY 3600 TO GET HOURS.
END

--==================================
--CREATE TMP TABLE:
--==================================
IF OBJECT_ID('TEMPDB..#IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS
END
CREATE TABLE #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS
(TENANT_NAME            VARCHAR(50)
,ID_EXT                 VARCHAR(3)
,SCHEDULER_ACL_NAME     VARCHAR(100)  
,EMPLOYEE_ID            VARCHAR(50)   
,STD_TENANT_START_DATE_TIME_KEY INT
,RESOURCE_NAME          VARCHAR(100)

,AIR_DAY_TYPE           varchar(1)
,AIR_ACW_FONT_COLOR     varchar(50)
,MIN_GUARANTEE_MINUTES  decimal(6,3)
,MIN_GUARANTEE_TYPE     varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE varchar(50)
,HAS_HOLIDAYS           varchar(1)
,INCLUDE_IN_CAS         varchar(1)
,READY_FOR_XML          varchar(1)
,SHOW_ID_EXTS           varchar(1)
,
[INBOUND_CALLS] [int] NULL,
[OUTBOUND_CALLS] [int] NULL,
[TOTAL_CALLS] [int] NULL,
[LOGGED_IN_TIME] [decimal](10, 2) NULL,
[READY_TIME] [decimal](10, 2) NULL,
[INBOUND_VOICE_TIME] [decimal](10, 2) NULL,
[OUTBOUND_VOICE_TIME] [decimal](10, 2) NULL,
[ACW_VOICE_TIME] [decimal](10, 2) NULL,
[NOT_READY_TIME] [decimal](10, 2) NULL,
[NOT_READY_BREAK_TIME] [decimal](10, 2) NULL,
[NOT_READY_NO_ANSWER_TIME] [decimal](10, 2) NULL,
[SUPERVISION_TIME] [decimal](10, 2) NULL,
[UNKNOWN_TIME] [decimal](10, 2) NULL,
[TOTAL_TALK_TIME] [decimal](10, 2) NULL,
[TOTAL_NOT_READY_TIME] [decimal](10, 2) NULL,
[AUTHORIZED_ACW_TIME] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
[AUTHORIZED] [decimal](10, 2) NULL,
)

INSERT INTO #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS
SELECT
 UAA.TENANT_NAME
,UAA.ID_EXT
,UAA.SCHEDULER_ACL_NAME
,UAA.EMPLOYEE_ID 
,UAA.STD_TENANT_START_DATE_TIME_KEY
,UAA.RESOURCE_NAME

,(ISNULL(UAA.AIR_DAY_TYPE,''))				--AS AIR_DAY_TYPE
,(ISNULL(UAA.AIR_ACW_FONT_COLOR,''))		--AS AIR_ACW_FONT_COLOR
,(ISNULL(UAA.MIN_GUARANTEE_MINUTES,0.000))	--AS MIN_GUARANTEE_MINUTES
,(ISNULL(UAA.MIN_GUARANTEE_TYPE,''))		--AS MIN_GUARANTEE_TYPE
,(ISNULL(UAA.AUTHORIZED_TO_INVOICE_TYPE,''))--AS AUTHORIZED_TO_INVOICE_TYPE
,(ISNULL(UAA.HAS_HOLIDAYS,''))				--AS HAS_HOLIDAYS
,(ISNULL(UAA.INCLUDE_IN_CAS,''))			--AS INCLUDE_IN_CAS
,(ISNULL(UAA.READY_FOR_XML,''))				--AS READY_FOR_XML
,(ISNULL(UAA.SHOW_ID_EXTS,''))				--AS SHOW_ID_EXTS

,(ISNULL(UAA.INBOUND_CALLS				,0))
,(ISNULL(UAA.OUTBOUND_CALLS				,0))
,(ISNULL(UAA.TOTAL_CALLS				,0))

,(ISNULL(UAA.LOGGED_IN_TIME				,0.00))
,(ISNULL(UAA.READY_TIME					,0.00))
,(ISNULL(UAA.INBOUND_VOICE_TIME			,0.00))
,(ISNULL(UAA.OUTBOUND_VOICE_TIME		,0.00))
,(ISNULL(UAA.ACW_VOICE_TIME				,0.00))
,(ISNULL(UAA.NOT_READY_TIME				,0.00))
,(ISNULL(UAA.NOT_READY_BREAK_TIME		,0.00))
,(ISNULL(UAA.NOT_READY_NO_ANSWER_TIME	,0.00))
,(ISNULL(UAA.SUPERVISION_TIME			,0.00))
,(ISNULL(UAA.UNKNOWN_TIME				,0.00))
,(ISNULL(UAA.TOTAL_TALK_TIME			,0.00))
,(ISNULL(UAA.TOTAL_NOT_READY_TIME		,0.00))
,(ISNULL(UAA.AUTHORIZED_ACW_TIME		,0.00))
,(ISNULL(UAA.CPROD						,0.00))
,(ISNULL(UAA.MINIMUM_GUARANTEE			,0.00))
,(ISNULL(UAA.AUTHORIZED					,0.00))

--	DATASOURCES FOR DURATION FIELDS, IN SECONDS, IN HOUR INTERVALS:
--	GROUPED JUST ENOUGH TO BE ABLE TO JOIN DATASOURCES TOGETHER, AND AT MOST BASIC INTERVAL!
FROM
(	SELECT	
	 UA.FF_TEAM							AS TENANT_NAME
	,UA.ID_EXT							AS ID_EXT
	,UA.INVOICE_ID					    AS SCHEDULER_ACL_NAME
	,UA.EMPLOYEE_ID						AS EMPLOYEE_ID 
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,MAX(UA.RESOURCE_NAME)              AS RESOURCE_NAME
	,MAX(UA.AIR_DAY_TYPE)               AS AIR_DAY_TYPE
	,'BLACK'                            AS AIR_ACW_FONT_COLOR
	,0									AS MIN_GUARANTEE_MINUTES
	,''									AS MIN_GUARANTEE_TYPE
	,''									AS AUTHORIZED_TO_INVOICE_TYPE
	,'Y'								AS HAS_HOLIDAYS
	,''									AS INCLUDE_IN_CAS
	,''									AS READY_FOR_XML
	,''									AS SHOW_ID_EXTS

	,SUM(ISNULL(UA.INBOUND_CALLS			,0)) AS INBOUND_CALLS
	,SUM(ISNULL(UA.OUTBOUND_CALLS			,0)) AS OUTBOUND_CALLS
	,SUM(ISNULL(UA.TOTAL_CALLS				,0)) AS TOTAL_CALLS

	,SUM(ISNULL(UA.LOGGED_IN_TIME			,0.00)) AS LOGGED_IN_TIME
	,SUM(ISNULL(UA.READY_TIME				,0.00)) AS READY_TIME
	,SUM(ISNULL(UA.INBOUND_VOICE_TIME		,0.00)) AS INBOUND_VOICE_TIME
	,SUM(ISNULL(UA.OUTBOUND_VOICE_TIME		,0.00)) AS OUTBOUND_VOICE_TIME
	,SUM(ISNULL(UA.ACW_VOICE_TIME			,0.00)) AS ACW_VOICE_TIME
	,SUM(ISNULL(UA.NOT_READY_TIME			,0.00)) AS NOT_READY_TIME
	,SUM(ISNULL(UA.NOT_READY_BREAK_TIME		,0.00)) AS NOT_READY_BREAK_TIME
	,SUM(ISNULL(UA.NOT_READY_NO_ANSWER_TIME	,0.00)) AS NOT_READY_NO_ANSWER_TIME
	,SUM(ISNULL(UA.SUPERVISION_TIME			,0.00)) AS SUPERVISION_TIME
	,SUM(ISNULL(UA.UNKNOWN_TIME				,0.00)) AS UNKNOWN_TIME
	,SUM(ISNULL(UA.TOTAL_TALK_TIME			,0.00)) AS TOTAL_TALK_TIME
	,SUM(ISNULL(UA.TOTAL_NOT_READY_TIME		,0.00)) AS TOTAL_NOT_READY_TIME
	,SUM(ISNULL(UA.AUTHORIZED_ACW_TIME		,0.00)) AS AUTHORIZED_ACW_TIME
	,SUM(ISNULL(UA.CPROD					,0.00)) AS CPROD
	,SUM(ISNULL(UA.MINIMUM_GUARANTEE		,0.00)) AS MINIMUM_GUARANTEE
	,SUM(ISNULL(UA.AUTHORIZED				,0.00)) AS AUTHORIZED

	--  SELECT *
	FROM			WSOL_TB_IMPORTS_BRIGHT_PATTERN_INVOICING	UA
	INNER JOIN		DATE_TIME									DT    ON DT.DATE_TIME_KEY = UA.STD_TENANT_START_DATE_TIME_KEY

	WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
	  AND (@CUSTOMER_ID	  IN (',0,',',,') OR CHARINDEX(',' + RTRIM(UA.TENANT_KEY) + ',',@CUSTOMER_ID) > 0)
	  AND (@INVOICE_GROUP IN (',0,') OR CHARINDEX(',' + RTRIM(UA.INVOICE_ID) + ',',@INVOICE_GROUP) > 0) 
		
	GROUP BY
	 UA.ID_EXT 
	,UA.FF_TEAM
	,UA.INVOICE_ID
	,UA.STD_TENANT_START_DATE_TIME_KEY
	,UA.EMPLOYEE_ID
) UAA

--==============================================================
--==============================================================
IF OBJECT_ID('TEMPDB..#IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS_RTN') IS NOT NULL BEGIN
   DROP TABLE #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS_RTN
END
CREATE TABLE #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS_RTN
(GRPNO                 INT
,TENANT_NAME           VARCHAR(50)
,ID_EXT                VARCHAR(3)
,SCHEDULER_ACL_NAME    VARCHAR(100)
,EMPLOYEE_ID           VARCHAR(50)
,RESOURCE_NAME         VARCHAR(100)
,CAL_YEAR_MONTH_NUM    VARCHAR(10)
,DATE_INTERVAL         VARCHAR(50)
,TIME_INTERVAL         VARCHAR(10)

,AIR_DAY_TYPE          varchar(1)
,AIR_ACW_FONT_COLOR    varchar(50)
,MIN_GUARANTEE_MINUTES decimal(6,3)
,MIN_GUARANTEE_TYPE    varchar(50)
,AUTHORIZED_TO_INVOICE_TYPE varchar(50)
,HAS_HOLIDAYS          varchar(1)
,INCLUDE_IN_CAS        varchar(1)
,READY_FOR_XML         varchar(1)
,SHOW_ID_EXTS          varchar(1)

,AIR_HOLIDAY_IN        VARCHAR(1)
,ALL_AUTHORIZED_TIME   DECIMAL(10,2)

,
[INBOUND_CALLS] [int] NULL,
[OUTBOUND_CALLS] [int] NULL,
[TOTAL_CALLS] [int] NULL,
[LOGGED_IN_TIME] [decimal](10, 2) NULL,
[READY_TIME] [decimal](10, 2) NULL,
[INBOUND_VOICE_TIME] [decimal](10, 2) NULL,
[OUTBOUND_VOICE_TIME] [decimal](10, 2) NULL,
[ACW_VOICE_TIME] [decimal](10, 2) NULL,
[NOT_READY_TIME] [decimal](10, 2) NULL,
[NOT_READY_BREAK_TIME] [decimal](10, 2) NULL,
[NOT_READY_NO_ANSWER_TIME] [decimal](10, 2) NULL,
[SUPERVISION_TIME] [decimal](10, 2) NULL,
[UNKNOWN_TIME] [decimal](10, 2) NULL,
[TOTAL_TALK_TIME] [decimal](10, 2) NULL,
[TOTAL_NOT_READY_TIME] [decimal](10, 2) NULL,
[AUTHORIZED_ACW_TIME] [decimal](10, 2) NULL,
[CPROD] [decimal](10, 2) NULL,
[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
[AUTHORIZED] [decimal](10, 2) NULL,
)
--==================================


--==================================
INSERT INTO #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS_RTN
SELECT
 20								--AS GRPNO  
,ISNULL(GG.TENANT_NAME       ,'') AS TENANT_NAME
,ISNULL(GG.ID_EXT            ,'') AS ID_EXT
,ISNULL(GG.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
,ISNULL(GG.EMPLOYEE_ID       ,'') AS EMPLOYEE_ID
,ISNULL(GG.RESOURCE_NAME     ,'') AS RESOURCE_NAME
,ISNULL(GG.CAL_YEAR_MONTH_NUM,'') AS CAL_YEAR_MONTH_NUM
,ISNULL(GG.DI                ,'') AS DI
,ISNULL(GG.TI                ,'') AS TI

,(GG.AIR_DAY_TYPE)                AS AIR_DAY_TYPE
,(GG.AIR_ACW_FONT_COLOR)          AS AIR_ACW_FONT_COLOR
,(GG.MIN_GUARANTEE_MINUTES)       AS MIN_GUARANTEE_MINUTES
,(GG.MIN_GUARANTEE_TYPE)          AS MIN_GUARANTEE_TYPE
,(GG.AUTHORIZED_TO_INVOICE_TYPE)  AS AUTHORIZED_TO_INVOICE_TYPE
,(GG.HAS_HOLIDAYS)                AS HAS_HOLIDAYS
,(GG.INCLUDE_IN_CAS)              AS INCLUDE_IN_CAS
,(GG.READY_FOR_XML)               AS READY_FOR_XML
,(GG.SHOW_ID_EXTS)                AS SHOW_ID_EXTS

,'' --AS AIR_HOLIDAY_IN
,0  --AS ALL_AUTHORIZED_TIME

,ISNULL(GG.INBOUND_CALLS					,0)	AS INBOUND_CALLS
,ISNULL(GG.OUTBOUND_CALLS					,0) AS OUTBOUND_CALLS
,ISNULL(GG.TOTAL_CALLS						,0) AS TOTAL_CALLS

,CAST((ISNULL(GG.LOGGED_IN_TIME				,0.00)) / @DS AS DECIMAL(10,2)) AS LOGGED_IN_TIME
,CAST((ISNULL(GG.READY_TIME					,0.00)) / @DS AS DECIMAL(10,2)) AS READY_TIME
,CAST((ISNULL(GG.INBOUND_VOICE_TIME			,0.00)) / @DS AS DECIMAL(10,2)) AS INBOUND_VOICE_TIME
,CAST((ISNULL(GG.OUTBOUND_VOICE_TIME		,0.00)) / @DS AS DECIMAL(10,2)) AS OUTBOUND_VOICE_TIME
,CAST((ISNULL(GG.ACW_VOICE_TIME				,0.00)) / @DS AS DECIMAL(10,2)) AS ACW_VOICE_TIME
,CAST((ISNULL(GG.NOT_READY_TIME				,0.00)) / @DS AS DECIMAL(10,2)) AS NOT_READY_TIME
,CAST((ISNULL(GG.NOT_READY_BREAK_TIME		,0.00)) / @DS AS DECIMAL(10,2)) AS NOT_READY_BREAK_TIME
,CAST((ISNULL(GG.NOT_READY_NO_ANSWER_TIME	,0.00)) / @DS AS DECIMAL(10,2)) AS NOT_READY_NO_ANSWER_TIME
,CAST((ISNULL(GG.SUPERVISION_TIME			,0.00)) / @DS AS DECIMAL(10,2)) AS SUPERVISION_TIME
,CAST((ISNULL(GG.UNKNOWN_TIME				,0.00)) / @DS AS DECIMAL(10,2)) AS UNKNOWN_TIME
,CAST((ISNULL(GG.TOTAL_TALK_TIME			,0.00)) / @DS AS DECIMAL(10,2)) AS TOTAL_TALK_TIME
,CAST((ISNULL(GG.TOTAL_NOT_READY_TIME		,0.00)) / @DS AS DECIMAL(10,2)) AS TOTAL_NOT_READY_TIME
,CAST((ISNULL(GG.AUTHORIZED_ACW_TIME		,0.00)) / @DS AS DECIMAL(10,2)) AS AUTHORIZED_ACW_TIME
,CAST((ISNULL(GG.CPROD						,0.00)) / @DS AS DECIMAL(10,2)) AS CPROD
,CAST((ISNULL(GG.MINIMUM_GUARANTEE			,0.00)) / @DS AS DECIMAL(10,2)) AS MINIMUM_GUARANTEE
,CAST((ISNULL(GG.AUTHORIZED					,0.00)) / @DS AS DECIMAL(10,2)) AS AUTHORIZED

FROM  -- GG STARTS HERE:
(	SELECT
	 ISNULL(SW.TENANT_NAME,'')        AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  AS EMPLOYEE_ID
	,MAX(RESOURCE_NAME)               AS RESOURCE_NAME

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) AS TI

	,MAX(SW.AIR_DAY_TYPE)					AS AIR_DAY_TYPE
	,MAX(SW.AIR_ACW_FONT_COLOR)				AS AIR_ACW_FONT_COLOR
	,MAX(SW.MIN_GUARANTEE_MINUTES)			AS MIN_GUARANTEE_MINUTES
	,MAX(SW.MIN_GUARANTEE_TYPE)				AS MIN_GUARANTEE_TYPE
	,MAX(SW.AUTHORIZED_TO_INVOICE_TYPE)		AS AUTHORIZED_TO_INVOICE_TYPE
	,MAX(SW.HAS_HOLIDAYS)					AS HAS_HOLIDAYS
	,MAX(SW.INCLUDE_IN_CAS)					AS INCLUDE_IN_CAS
	,MAX(SW.READY_FOR_XML)					AS READY_FOR_XML
	,MAX(SW.SHOW_ID_EXTS)					AS SHOW_ID_EXTS

	,SUM(ISNULL(SW.INBOUND_CALLS			,0))	AS INBOUND_CALLS
	,SUM(ISNULL(SW.OUTBOUND_CALLS			,0))	AS OUTBOUND_CALLS
	,SUM(ISNULL(SW.TOTAL_CALLS				,0))	AS TOTAL_CALLS
	
	,SUM(ISNULL(SW.LOGGED_IN_TIME			,0.00)) AS LOGGED_IN_TIME
	,SUM(ISNULL(SW.READY_TIME				,0.00)) AS READY_TIME
	,SUM(ISNULL(SW.INBOUND_VOICE_TIME		,0.00)) AS INBOUND_VOICE_TIME
	,SUM(ISNULL(SW.OUTBOUND_VOICE_TIME		,0.00)) AS OUTBOUND_VOICE_TIME
	,SUM(ISNULL(SW.ACW_VOICE_TIME			,0.00)) AS ACW_VOICE_TIME
	,SUM(ISNULL(SW.NOT_READY_TIME			,0.00)) AS NOT_READY_TIME
	,SUM(ISNULL(SW.NOT_READY_BREAK_TIME		,0.00)) AS NOT_READY_BREAK_TIME
	,SUM(ISNULL(SW.NOT_READY_NO_ANSWER_TIME	,0.00)) AS NOT_READY_NO_ANSWER_TIME
	,SUM(ISNULL(SW.SUPERVISION_TIME			,0.00)) AS SUPERVISION_TIME
	,SUM(ISNULL(SW.UNKNOWN_TIME				,0.00)) AS UNKNOWN_TIME
	,SUM(ISNULL(SW.TOTAL_TALK_TIME			,0.00)) AS TOTAL_TALK_TIME
	,SUM(ISNULL(SW.TOTAL_NOT_READY_TIME		,0.00)) AS TOTAL_NOT_READY_TIME
	,SUM(ISNULL(SW.AUTHORIZED_ACW_TIME		,0.00))	AS AUTHORIZED_ACW_TIME
	,SUM(ISNULL(SW.CPROD					,0.00)) AS CPROD
	,SUM(ISNULL(SW.MINIMUM_GUARANTEE		,0.00)) AS MINIMUM_GUARANTEE
	,SUM(ISNULL(SW.AUTHORIZED				,0.00)) AS AUTHORIZED
	
	FROM			#IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS		SW
	INNER JOIN		DATE_TIME											DT	ON DT.DATE_TIME_KEY = SW.STD_TENANT_START_DATE_TIME_KEY
													 
	--WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END		  --AND (@TENANT_KEY   IN ('0','') OR SW.TENANT_KEY   = CAST(@TENANT_KEY AS INT) )

	GROUP BY 
	 ISNULL(SW.TENANT_NAME,'')        --AS TENANT_NAME
	,ISNULL(SW.ID_EXT,'')             --AS ID_EXT
	,ISNULL(SW.SCHEDULER_ACL_NAME,'') --AS SCHEDULER_ACL_NAME
	,ISNULL(SW.EMPLOYEE_ID,'')		  --AS EMPLOYEE_ID

	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN DT.CAL_YEAR_MONTH_NUM ELSE '' END ) --AS CAL_YEAR_MONTH_NUM
	,(CASE WHEN @TIME_INTERVAL IN ('MR') THEN LEFT(DT.CAL_MONTH_NAME,3) + ' ' + DT.CAL_YEAR_STRING
		   WHEN @TIME_INTERVAL IN ('DR') THEN ''  ELSE DT.CAL_DATE_STRING END ) --AS DI
	,(CASE --WHEN @TIME_INTERVAL = '15' THEN DT.LABEL_HH24 + ':' + DT.LABEL_MI
		   --WHEN @TIME_INTERVAL = '30' THEN DT.LABEL_HH24 + ':' + DT.LABEL_30MI
		   WHEN @TIME_INTERVAL = 'HR' THEN DT.LABEL_HH24 ELSE '' END ) --AS TI
) GG

--==================================
--IS A HOLIDAY DATE IN THE MIX:
--==================================
DECLARE @HOLIDAY_IN VARCHAR(1)
SET @HOLIDAY_IN = 'N'
DECLARE @I INT
SET @I = (SELECT COUNT(*) FROM #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS_RTN WHERE AIR_DAY_TYPE = 'H')  --  AND INCLUDE_IN_CAS = 'Y')
IF @I > 0 BEGIN
	SET @HOLIDAY_IN = 'Y'
END
--==================================
UPDATE #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS_RTN SET
 AIR_HOLIDAY_IN = @HOLIDAY_IN

--=========================================================
--UPDATE TOTALS LINE ON REPORT FOR STANDARD AND HOLIDAY:
--=========================================================
UPDATE #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS_RTN SET
 ALL_AUTHORIZED_TIME = ISNULL(LOJ.ALL_AUTHORIZED_TIME,0.0)
FROM #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS_RTN TA
LEFT OUTER JOIN
(	SELECT
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
	,SUM(AUTHORIZED) AS ALL_AUTHORIZED_TIME
	FROM #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS_RTN 
	GROUP BY 
	 SCHEDULER_ACL_NAME
	,EMPLOYEE_ID
	,AIR_DAY_TYPE
) LOJ ON LOJ.SCHEDULER_ACL_NAME = TA.SCHEDULER_ACL_NAME
	 AND LOJ.EMPLOYEE_ID        = TA.EMPLOYEE_ID
	 AND LOJ.AIR_DAY_TYPE       = TA.AIR_DAY_TYPE

--==================================
--RETURN DATA
--==================================
--=======================================================================================
--POPULATE TABLE READ BY SSIS TO GET END DATE OF DATA REPORT/FILE HAS BEEN RUN FOR:
--=======================================================================================
INSERT INTO WSOL_TB_FILENAMES_FOR_SSIS
(SQL_JOB_NAME
,FILENM
,CST_ROW_CREATED_TIME)
SELECT
 'uspIMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS'			--SQL_JOB_NAME
,REPLACE(CONVERT(VARCHAR(10),@DTM_END - 1,111),'/','')			--FILENM   YYYYMMDD_...
,dbo.GETDATE()  --CST_ROW_CREATED_TIME

--=====================================
--RETURN DATASET:
--=====================================
SELECT 
 CASE WHEN @DUR_IN = 'SS' THEN '' ELSE 'F' END AS DUR_FORMAT
,CONVERT(VARCHAR(10),@DTM_BEG,101) + '-' + CONVERT(VARCHAR(10),@DTM_END - 1,101)  AS DATE_RANGE
,V.*

FROM      #IMPORTS_BRIGHT_PATTERN_AGENT_INVOICING_REPORTS_RTN  V

ORDER BY 
 V.GRPNO
,V.SCHEDULER_ACL_NAME
,V.EMPLOYEE_ID
,V.CAL_YEAR_MONTH_NUM
,V.DATE_INTERVAL
,V.TIME_INTERVAL  --SINCE IN MILITARY TIME!

--===============================
EARLY_EXIT:
--===============================
--IMPOSSIBLE:  SELECT 1/0    POSSIBLE:  SELECT 0/1