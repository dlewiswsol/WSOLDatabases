CREATE PROCEDURE [dbo].[uspIMPORTS_STUBHUB_INVOICING_IMPORT]
AS
SET NOCOUNT ON

--  EXECUTE [dbo].[uspIMPORTS_STUBHUB_INVOICING_IMPORT]

--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1 ORDER BY [DATETIME] DESC

--	Durations in file are in minutes.  Data will be stored in minutes and later converted to seconds for XML push. !!!

--=============================================
DECLARE @TENANT_KEY INT
SET @TENANT_KEY =       900703  --STUBHUB
--=============================================
DELETE FROM YZ_TB_ERRORS_FOUND 
WHERE TENANT_KEY = @TENANT_KEY
  AND SUB_GROUP_NAME = 'STUBHUB_INVOICING'    --  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900703
--=============================================

--===================================================================================
--USING @WS_ROW_CREATED_TIME FOR ALL INSERTS WILL ALLOW ME TO DELETE SPECIFIC INSERT PROCESSES/FILES.  MOST IMPORTANT!!!  FOR ALL TABLES.
--  IN CASE OF EMERGENCY, CRACK GLASS.
--===================================================================================
DECLARE @WS_ROW_CREATED_TIME AS DATETIME
SET @WS_ROW_CREATED_TIME = dbo.getdate()  --CLOSE ENOUGH TO ACTUAL INSERT TIME!
--===================================================================================

--======================================================================
--HANDLE COLUMN HEADER AND INVALID (ACTIVE TIME = WRAP TIME) RECORDS:
--======================================================================
INSERT INTO YZ_TB_IMPORTS_STUBHUB_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT_NAME
,FF_USER_NAME
,FF_HOUR
,FF_ACTIVE_TIME
,FF_READY_TIME
,FF_NOT_READY_TIME
,FF_ACCEPTED
,FF_INVITE_TIME
,FF_ENGAGE_TIME
,FF_HOLD_TIME
,FF_WRAP_TIME
,FF_CONSULT_RECEIVED_TIME
,FF_TALK_TIME
,FF_HANDLE_TIME
,FF_MINIMUM_GUARANTEE
,FF_AUTHORIZED_TO_INVOICE
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,LOGGED_IN_TIME
,READY_TIME
,NOT_READY_TIME
,CALLS_ACCEPTED
,RING_TIME
,TALK_TIME
,HOLD_TIME
,WRAP_TIME
,CONSULT_TIME
,TALK_HOLD_COLSULT_TIME
,HANDLE_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,PAY_GROUP
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR)

SELECT
 24                     --BAD_IMPORTS_NO  --'Junk Record'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE.
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_AGENT_NAME
,W1.FF_USER_NAME
,W1.FF_HOUR
,W1.FF_ACTIVE_TIME
,W1.FF_READY_TIME
,W1.FF_NOT_READY_TIME
,W1.FF_ACCEPTED
,W1.FF_INVITE_TIME
,W1.FF_ENGAGE_TIME
,W1.FF_HOLD_TIME
,W1.FF_WRAP_TIME
,W1.FF_CONSULT_RECEIVED_TIME
,W1.FF_TALK_TIME
,W1.FF_HANDLE_TIME
,W1.FF_MINIMUM_GUARANTEE
,W1.FF_AUTHORIZED_TO_INVOICE
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.LOGGED_IN_TIME
,W1.READY_TIME
,W1.NOT_READY_TIME
,W1.CALLS_ACCEPTED
,W1.RING_TIME
,W1.TALK_TIME
,W1.HOLD_TIME
,W1.WRAP_TIME
,W1.CONSULT_TIME
,W1.TALK_HOLD_CONSULT_TIME
,W1.HANDLE_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.PAY_GROUP
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR

FROM           YZ_TB_IMPORTS_STUBHUB_INVOICING_1    W1
WHERE ISNULL(W1.FF_AGENT_NAME, '') IN ('Agent Name','')
   OR ISNULL(W1.FF_ACTIVE_TIME, 0)  = ISNULL(W1.FF_WRAP_TIME, 0)

--======================================================================
--DELETE COLUMN HEADER AND JUNK RECORDS;
--======================================================================
DELETE FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1
WHERE ISNULL(FF_AGENT_NAME, '') IN ('Agent Name','')
   OR ISNULL(FF_ACTIVE_TIME, 0)  = ISNULL(FF_WRAP_TIME, 0)
--======================================================================

--=============================================================================
--DELETE RECORDS FOR CONFIRMED STUBHUB EMPLOYEES
--=============================================================================
INSERT INTO YZ_TB_IMPORTS_STUBHUB_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT_NAME
,FF_USER_NAME
,FF_HOUR
,FF_ACTIVE_TIME
,FF_READY_TIME
,FF_NOT_READY_TIME
,FF_ACCEPTED
,FF_INVITE_TIME
,FF_ENGAGE_TIME
,FF_HOLD_TIME
,FF_WRAP_TIME
,FF_CONSULT_RECEIVED_TIME
,FF_TALK_TIME
,FF_HANDLE_TIME
,FF_MINIMUM_GUARANTEE
,FF_AUTHORIZED_TO_INVOICE
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,LOGGED_IN_TIME
,READY_TIME
,NOT_READY_TIME
,CALLS_ACCEPTED
,RING_TIME
,TALK_TIME
,HOLD_TIME
,WRAP_TIME
,CONSULT_TIME
,TALK_HOLD_COLSULT_TIME
,HANDLE_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,PAY_GROUP
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR)

SELECT
 99						--BAD_IMPORTS_NO			--Client Employee
,'ACT'					--BAD_IMPORTS_FILE_TYPE		--'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME	--WS_ROW_CREATED_TIME		
,W1.FF_AGENT_NAME
,W1.FF_USER_NAME
,W1.FF_HOUR
,W1.FF_ACTIVE_TIME
,W1.FF_READY_TIME
,W1.FF_NOT_READY_TIME
,W1.FF_ACCEPTED
,W1.FF_INVITE_TIME
,W1.FF_ENGAGE_TIME
,W1.FF_HOLD_TIME
,W1.FF_WRAP_TIME
,W1.FF_CONSULT_RECEIVED_TIME
,W1.FF_TALK_TIME
,W1.FF_HANDLE_TIME
,W1.FF_MINIMUM_GUARANTEE
,W1.FF_AUTHORIZED_TO_INVOICE
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.LOGGED_IN_TIME
,W1.READY_TIME
,W1.NOT_READY_TIME
,W1.CALLS_ACCEPTED
,W1.RING_TIME
,W1.TALK_TIME
,W1.HOLD_TIME
,W1.WRAP_TIME
,W1.CONSULT_TIME
,W1.TALK_HOLD_CONSULT_TIME
,W1.HANDLE_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.PAY_GROUP
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR

FROM	YZ_TB_IMPORTS_STUBHUB_INVOICING_1	W1
WHERE ISNULL(W1.FF_USER_NAME,'') IN ('cberman','throberts')

--=============================================================================
--DELETE STUBHUB EMPLOYEE RECORDS
--=============================================================================
DELETE FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1
WHERE ISNULL(FF_USER_NAME,'') IN ('cberman','throberts')
--=============================================================================

--=============================================================================
--POPULATE ADDITIONAL FIELDS IN WORK (_1) TABLE THAT WEREN'T IN IMPORTED FILE:
--=============================================================================
UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING_1 SET
 [DATETIME]			= CAST(FF_HOUR + ':00:00' AS DATETIME)
,HOUR_INTERVAL		= RIGHT(FF_HOUR, 2)
,LOGGED_IN_TIME		= CAST(ISNULL(FLOOR(FF_ACTIVE_TIME),			0) AS INT)
,READY_TIME			= CAST(ISNULL(FLOOR(FF_READY_TIME),				0) AS INT)
,NOT_READY_TIME		= CAST(ISNULL(FLOOR(FF_NOT_READY_TIME),			0) AS INT)
,CALLS_ACCEPTED		= CAST(ISNULL(FLOOR(FF_ACCEPTED),				0) AS INT)
,RING_TIME			= CAST(ISNULL(FLOOR(FF_INVITE_TIME),			0) AS INT)
,TALK_TIME			= CAST(ISNULL(FLOOR(FF_ENGAGE_TIME),			0) AS INT)
,HOLD_TIME			= CAST(ISNULL(FLOOR(FF_HOLD_TIME),				0) AS INT)
,WRAP_TIME			= CAST(ISNULL(FLOOR(FF_WRAP_TIME),				0) AS INT)
,CONSULT_TIME		= CAST(ISNULL(FLOOR(FF_CONSULT_RECEIVED_TIME),	0) AS INT)
,HANDLE_TIME		= CAST(ISNULL(FLOOR(FF_HANDLE_TIME),			0) AS INT)
,TOTAL_TALK			= ISNULL(FF_TALK_TIME,							0) -- DIFFERS FROM TALK_TIME OR FF_ENGAGE_TIME
,TENANT_KEY			= @TENANT_KEY  --NOT REALLY NECESSARY.


--======================================================================
--Need when populating tmp DEW table for insert into _AIA table.
DECLARE 
 @DTM_BEG  DATETIME
,@DTM_END  DATETIME

SET @DTM_BEG = DATEADD(hh,-2,(SELECT MIN([DATETIME]) FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1))
SET @DTM_END = DATEADD(hh, 2,(SELECT MAX([DATETIME]) FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1))  
--======================================================================

--======================================================================
-- POPULATE THE DATETIME KEY
--======================================================================
UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING_1 SET
 STD_TENANT_START_DATE_TIME_KEY = DT.DATE_TIME_KEY
FROM            YZ_TB_IMPORTS_STUBHUB_INVOICING_1    I
INNER JOIN      DATE_TIME							DT   ON DT.CAL_DATE = I.[DATETIME]

--===============================================
-- POPULATE TALK_HOLD_CONSULT_TIME
--===============================================
UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING_1 SET
 TALK_HOLD_CONSULT_TIME = TALK_TIME + HOLD_TIME + CONSULT_TIME

--===============================================
--CALCULATE CPROD
--===============================================
UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING_1 SET
 CPROD = READY_TIME + TALK_TIME + HOLD_TIME + WRAP_TIME + CONSULT_TIME

--======================================================================
--HANDLE INVALID DATE/TIME RECORDS:
--======================================================================
INSERT INTO YZ_TB_IMPORTS_STUBHUB_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT_NAME
,FF_USER_NAME
,FF_HOUR
,FF_ACTIVE_TIME
,FF_READY_TIME
,FF_NOT_READY_TIME
,FF_ACCEPTED
,FF_INVITE_TIME
,FF_ENGAGE_TIME
,FF_HOLD_TIME
,FF_WRAP_TIME
,FF_CONSULT_RECEIVED_TIME
,FF_TALK_TIME
,FF_HANDLE_TIME
,FF_MINIMUM_GUARANTEE
,FF_AUTHORIZED_TO_INVOICE
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,LOGGED_IN_TIME
,READY_TIME
,NOT_READY_TIME
,CALLS_ACCEPTED
,RING_TIME
,TALK_TIME
,HOLD_TIME
,WRAP_TIME
,CONSULT_TIME
,TALK_HOLD_COLSULT_TIME
,HANDLE_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,PAY_GROUP
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR)

SELECT
 26                     --BAD_IMPORTS_NO  --'Invalid Date/Time'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_AGENT_NAME
,W1.FF_USER_NAME
,W1.FF_HOUR
,W1.FF_ACTIVE_TIME
,W1.FF_READY_TIME
,W1.FF_NOT_READY_TIME
,W1.FF_ACCEPTED
,W1.FF_INVITE_TIME
,W1.FF_ENGAGE_TIME
,W1.FF_HOLD_TIME
,W1.FF_WRAP_TIME
,W1.FF_CONSULT_RECEIVED_TIME
,W1.FF_TALK_TIME
,W1.FF_HANDLE_TIME
,W1.FF_MINIMUM_GUARANTEE
,W1.FF_AUTHORIZED_TO_INVOICE
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.LOGGED_IN_TIME
,W1.READY_TIME
,W1.NOT_READY_TIME
,W1.CALLS_ACCEPTED
,W1.RING_TIME
,W1.TALK_TIME
,W1.HOLD_TIME
,W1.WRAP_TIME
,W1.CONSULT_TIME
,W1.TALK_HOLD_CONSULT_TIME
,W1.HANDLE_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.PAY_GROUP
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR

FROM           YZ_TB_IMPORTS_STUBHUB_INVOICING_1    W1
WHERE ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================
--DELETE INVALID DATE/TIME RECORDS;
--======================================================================
DELETE FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1
WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--======================================================================


--======================================================================
--HANDLE DUPLICATES:
--======================================================================
INSERT INTO YZ_TB_IMPORTS_STUBHUB_INVOICING_BAD
(BAD_IMPORTS_NO
,BAD_IMPORTS_FILE_TYPE
,WS_ROW_CREATED_TIME
,FF_AGENT_NAME
,FF_USER_NAME
,FF_HOUR
,FF_ACTIVE_TIME
,FF_READY_TIME
,FF_NOT_READY_TIME
,FF_ACCEPTED
,FF_INVITE_TIME
,FF_ENGAGE_TIME
,FF_HOLD_TIME
,FF_WRAP_TIME
,FF_CONSULT_RECEIVED_TIME
,FF_TALK_TIME
,FF_HANDLE_TIME
,FF_MINIMUM_GUARANTEE
,FF_AUTHORIZED_TO_INVOICE
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,LOGGED_IN_TIME
,READY_TIME
,NOT_READY_TIME
,CALLS_ACCEPTED
,RING_TIME
,TALK_TIME
,HOLD_TIME
,WRAP_TIME
,CONSULT_TIME
,TALK_HOLD_COLSULT_TIME
,HANDLE_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,PAY_GROUP
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR)

SELECT
 21                     --BAD_IMPORTS_NO  --'DUPLICATE'
,'ACT'                  --BAD_IMPORTS_FILE_TYPE  --'ACT'IVITY FILE
,@WS_ROW_CREATED_TIME   --WS_ROW_CREATED_TIME--TEST:,dbo.getdate()  --,TNM.*
,W1.FF_AGENT_NAME
,W1.FF_USER_NAME
,W1.FF_HOUR
,W1.FF_ACTIVE_TIME
,W1.FF_READY_TIME
,W1.FF_NOT_READY_TIME
,W1.FF_ACCEPTED
,W1.FF_INVITE_TIME
,W1.FF_ENGAGE_TIME
,W1.FF_HOLD_TIME
,W1.FF_WRAP_TIME
,W1.FF_CONSULT_RECEIVED_TIME
,W1.FF_TALK_TIME
,W1.FF_HANDLE_TIME
,W1.FF_MINIMUM_GUARANTEE
,W1.FF_AUTHORIZED_TO_INVOICE
,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME
,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.LOGGED_IN_TIME
,W1.READY_TIME
,W1.NOT_READY_TIME
,W1.CALLS_ACCEPTED
,W1.RING_TIME
,W1.TALK_TIME
,W1.HOLD_TIME
,W1.WRAP_TIME
,W1.CONSULT_TIME
,W1.TALK_HOLD_CONSULT_TIME
,W1.HANDLE_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.PAY_GROUP
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR

FROM
(	SELECT
	 [DATETIME]
	,FF_AGENT_NAME
	,FF_USER_NAME
	,ROW_NUMBER() over (partition by [DATETIME], FF_AGENT_NAME, FF_USER_NAME
                            order by [DATETIME], FF_AGENT_NAME, FF_USER_NAME, LOGGED_IN_TIME DESC) ROWNO
	FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1
) TNM
LEFT JOIN      YZ_TB_IMPORTS_STUBHUB_INVOICING_1    W1   ON W1.[DATETIME]		= TNM.[DATETIME]
														AND W1.FF_AGENT_NAME	= TNM.FF_AGENT_NAME
														AND W1.FF_USER_NAME		= TNM.FF_USER_NAME
WHERE TNM.ROWNO > 1

--======================================================================
--DELETE DUPLICATES:
--======================================================================
DELETE FROM TNM  
FROM
(	SELECT
	 [DATETIME]
	,FF_AGENT_NAME
	,FF_USER_NAME
	,ROW_NUMBER() over (partition by [DATETIME], FF_AGENT_NAME, FF_USER_NAME
                            order by [DATETIME], FF_AGENT_NAME, FF_USER_NAME, LOGGED_IN_TIME DESC) ROWNO
	FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1
) TNM
WHERE TNM.ROWNO > 1
--======================================================================

--===============================================
-- UPDATE FIELDS FROM AGENT MAPPING
--===============================================
UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING_1 SET
 ID_EXT =			  CASE WHEN ISNULL(IAM.FF_RESOURCE,'') = 'Priority'	THEN 'SHP'	-- StubHub Priority Agents
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'Resource'	THEN 'SHR'	-- StubHub Resource Agents
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'FC'		THEN 'SHB'	-- StubHub FC Standard Agents  CHANGED TO: StubHub Selling/Sold Agents Effective 8/26/16 Then back to StubHub FC Standard Agents on 9/1/2016
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'Spanish'	THEN 'SHS'	-- StubHub Spanish Standard Agents		--EFFECTIVE 6/1/2016
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'LH'		THEN 'SHL'	-- StubHub Local Help Resource Agents	--EFFECTVIE 5/23/2017
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = ''			THEN 'SHA'	-- StubHub Standard Agents
					  ELSE '' END
,EMAIL              = ISNULL(IAM.EMAIL,'')
,SCHEDULER_ACL_NAME = CASE WHEN ISNULL(IAM.FF_RESOURCE,'') = 'Priority'	THEN 'StubHub Priority Agents'
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'Resource'	THEN 'StubHub Resource Agents'
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'FC'		THEN 'StubHub FC Standard Agents'
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'Spanish'	THEN 'StubHub Spanish Standard Agents'				--EFFECTIVE 6/1/2016
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = 'LH'		THEN 'StubHub Local Help Resource Agents'			--EFFECTIVE 5/23/2017
						   WHEN ISNULL(IAM.FF_RESOURCE,'') = ''			THEN 'Stubhub Standard Agents'
					  ELSE '' END
,PAY_GROUP		    = ISNULL(IAM.PAY_GROUP,'')
,RESOURCE_NAME		= ISNULL(IAM.RESOURCE_NAME,'')
--  SELECT * 
FROM            YZ_TB_IMPORTS_STUBHUB_INVOICING_1        I
LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_AIA_AGENT_MAPPING  IAM  ON IAM.INVOICE_MAP_KEY  =  I.FF_USER_NAME

--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1
--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_GROUPS


--===============================================
UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING_1 SET     -- SELECT
 AIR_DAY_TYPE = CASE WHEN IG.HAS_HOLIDAYS = 'Y' AND
						 (    ISNULL(IH.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) OR
						   ( ISNULL(IHA.HOLIDAY_DATE,'1/1/1900') > CAST('1/1/1901' AS DATETIME) AND ISNULL(IHA.ID_EXT,'') <> '' )
						 )
					  THEN 'H' ELSE 'S' END  --AS AIR_DAY_TYPE  --H=Holiday  --S=Standard
FROM            YZ_TB_IMPORTS_STUBHUB_INVOICING_1               I
INNER JOIN      DATE_TIME										DT   ON DT.DATE_TIME_KEY       = I.STD_TENANT_START_DATE_TIME_KEY
LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_GROUPS         IG   ON IG.ID_EXT              = I.ID_EXT
LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_HOLIDAYS       IH   ON IH.HOLIDAY_DATE        = CAST(DT.CAL_DATE_STRING AS DATETIME)
LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_HOLIDAYS_ADDL  IHA  ON IHA.HOLIDAY_DATE       = CAST(DT.CAL_DATE_STRING AS DATETIME)
															    AND		IHA.ID_EXT             = I.ID_EXT	

--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1 WHERE AIR_DAY_TYPE = 'H'
--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_INVOICING   WHERE AIR_DAY_TYPE = 'H'
--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_HOLIDAYS

--===============================================
UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING_1 SET
 AIR_ACW_FONT_COLOR             = 'Black'

,MIN_GUARANTEE_RATE             = ISNULL(IG.MIN_GUARANTEE_RATE,0)           --varies between scheduler acl names.
,MIN_GUARANTEE_TYPE             = ISNULL(IG.MIN_GUARANTEE_TYPE,'')          --varies between scheduler acl names.
,AUTHORIZED_TO_INVOICE_TYPE     = ISNULL(IG.AUTHORIZED_TO_INVOICE_TYPE,'')  --varies between scheduler acl names.

,HAS_HOLIDAYS    = IG.HAS_HOLIDAYS
,INCLUDE_IN_CAS  = IG.INCLUDE_IN_CAS
,READY_FOR_XML   = IG.READY_FOR_XML
,SHOW_ID_EXTS    = IG.SHOW_ID_EXTS
FROM            YZ_TB_IMPORTS_STUBHUB_INVOICING_1        I
LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_GROUPS  IG  ON IG.ID_EXT    = I.ID_EXT
												
--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_GROUPS
	
--===============================================
UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING_1 SET
 INVOICE_ID = CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END
FROM          YZ_TB_IMPORTS_STUBHUB_INVOICING_1            AIA 
LEFT JOIN     YZ_TB_IMPORTS_STUBHUB_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT

--===============================================  --YOU WANT TO CHANGE THIS, BUT DON'T !!!!!!!  INVOICE GROUPS POPULATED, IT COULD BE CHANGED TO USE...

--=============================================================
--CHECK FOR BAD DATA FOUND IN IMPORT .TXT FILES:
--=============================================================
--  SELECT * FROM YZ_TB_ERRORS_FOUND WHERE TENANT_KEY = 900703
--=============================================================
DECLARE
 @ERR_CNT  INT
,@RCD_CNT  INT
,@MSG1     VARCHAR(2500)
SET @ERR_CNT  = 0 
SET @RCD_CNT  = 0 
SET @MSG1     = ''
--SQL won't insert special characters!!!  + CHAR(9)  --CHAR(10) + CHAR(13)
--Check #1:  ===================================================================================================
	SET @RCD_CNT = (	SELECT COUNT(*) FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1 )
	IF @RCD_CNT < 1 BEGIN
		SET @MSG1 = @MSG1 + '1) File Import Failed.  No Records Were/Could Be Imported.   |   ' 
		SET @ERR_CNT = @ERR_CNT + 1
	END
--Check #2:  ===================================================================================================
--	SET @RCD_CNT  = (	SELECT COUNT(*) FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1  
--						WHERE ISNULL(STD_TENANT_START_DATE_TIME_KEY,0) = 0
--					)  
--	IF @RCD_CNT > 0 BEGIN
--		SET @MSG1 = @MSG1 + '2) Invalid DATETIME Intervals in STUBHUB INVOICING IMPORT File.  Import was Cancelled.  Nothing was Imported.   |   ' 
--		SET @ERR_CNT = @ERR_CNT + 1
--	END
--Check #n:  ===================================================================================================
--	SET @MSG1 = @MSG1 + '2) Something not right with something.  Import was cancelled.  Nothing was Imported.     '
--	--SET @RCD_CNT = (	SELECT COUNT(*)
--	--					FROM YZ_TB_IMPORTS_STUBHUB_INVOICING_1
--	--					WHERE 'something' <> 'somethingelse'
--	--				  )  --If nothing imported in work table, don't need to return error.  That check is done in SSIS currently.


--=============================== INSERT INTO PERMANENT TABLE (No errors) OR SKIP AND GO TO END (Errors):
IF @ERR_CNT > 0 BEGIN
	--SSIS reads YZ_TB_ERRORS_FOUND table where TENANT_KEY = 900703, and if record exists, outputs results/error_msg field in an email.
	INSERT INTO YZ_TB_ERRORS_FOUND
	(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY     --TENANT_KEY
	,'STUBHUB_INVOICING' --SUB_GROUP_NAME
	,@MSG1           --ERROR_MSG
	--===========================
	GOTO EARLY_EXIT
	--===========================
END
ELSE BEGIN
	INSERT INTO YZ_TB_ERRORS_FOUND
		(TENANT_KEY
,SUB_GROUP_NAME
,ERROR_MSG)
	SELECT 
	 @TENANT_KEY     --TENANT_KEY
	,'STUBHUB_INVOICING' --SUB_GROUP_NAME
	,''              --ERROR_MSG  --Never make this @MSG1 !!!  Must stay as ''.
	--Do NOT want to got to early exit here because data was good, according to 'checks'!  We want to import data into permanent table.
END

--===============================================
-- CALCULATE MINIMUM GUARANTEE
--===============================================

UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING_1 SET
 MING = CASE WHEN ISNULL(ID_EXT,'') = 'SHA' THEN (40.00 / 60.00) * CPROD
			 WHEN ISNULL(ID_EXT,'') = 'SHP' THEN (40.00 / 60.00) * CPROD
			 WHEN ISNULL(ID_EXT,'') = 'SHB' THEN (40.00 / 60.00) * CPROD
			 WHEN ISNULL(ID_EXT,'') = 'SHS' THEN (40.00 / 60.00) * CPROD
			 WHEN ISNULL(ID_EXT,'') = 'SHR' THEN LOGGED_IN_TIME				-- AUT2 WILL BE LOGGED IN TIME
			 WHEN ISNULL(ID_EXT,'') = 'SHL' THEN LOGGED_IN_TIME				-- AUT2 WILL BE LOGGED IN TIME
			 ELSE 0.00 END

--===============================================
-- CALCULATE AUTHORIZED TO INVOICE
--===============================================
UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING_1 SET
 AUT2 = CASE WHEN ISNULL(ID_EXT,'') IN ('SHA','SHP','SHB','SHS') THEN 
				CASE WHEN MING > (TOTAL_TALK) THEN MING 
					 ELSE        (TOTAL_TALK) END      --TOTAL_TALK = TALK_TIME + HOLD_TIME + CONSULT_TIME + MIN(WRAP_TIME, CALLS_ACCEPTED * 180(seconds)) 
			 WHEN ISNULL(ID_EXT,'') IN ('SHR','SHL') THEN LOGGED_IN_TIME
			 ELSE 0.00 END

--=============================================
-- INSERT DATA INTO PERMANENT TABLE (UPDATE)
--=============================================
UPDATE YZ_TB_IMPORTS_STUBHUB_INVOICING SET
 FF_AGENT_NAME				= W1.FF_AGENT_NAME
--,FF_USER_NAME				= W1.FF_USER_NAME
,FF_HOUR					= W1.FF_HOUR
,FF_ACTIVE_TIME				= W1.FF_ACTIVE_TIME
,FF_READY_TIME				= W1.FF_READY_TIME
,FF_NOT_READY_TIME			= W1.FF_NOT_READY_TIME
,FF_ACCEPTED				= W1.FF_ACCEPTED
,FF_INVITE_TIME				= W1.FF_INVITE_TIME
,FF_ENGAGE_TIME				= W1.FF_ENGAGE_TIME
,FF_HOLD_TIME				= W1.FF_HOLD_TIME
,FF_WRAP_TIME				= W1.FF_WRAP_TIME
,FF_CONSULT_RECEIVED_TIME	= W1.FF_CONSULT_RECEIVED_TIME
,FF_TALK_TIME				= W1.FF_TALK_TIME
,FF_HANDLE_TIME				= W1.FF_HANDLE_TIME
,FF_MINIMUM_GUARANTEE		= W1.FF_MINIMUM_GUARANTEE
,FF_AUTHORIZED_TO_INVOICE	= W1.FF_AUTHORIZED_TO_INVOICE

,SEQNO_ADDED_TIME			= W1.SEQNO_ADDED_TIME
,SEQNO						= W1.SEQNO
,FTP_FILE_NAME				= W1.FTP_FILE_NAME

,[DATETIME]					= W1.[DATETIME]
,HOUR_INTERVAL				= W1.HOUR_INTERVAL
,LOGGED_IN_TIME				= W1.LOGGED_IN_TIME
,READY_TIME					= W1.READY_TIME
,NOT_READY_TIME				= W1.NOT_READY_TIME
,CALLS_ACCEPTED				= W1.CALLS_ACCEPTED
,RING_TIME					= W1.RING_TIME
,TALK_TIME					= W1.TALK_TIME
,HOLD_TIME					= W1.HOLD_TIME
,WRAP_TIME					= W1.WRAP_TIME
,CONSULT_TIME				= W1.CONSULT_TIME
,TALK_HOLD_CONSULT_TIME		= W1.TALK_HOLD_CONSULT_TIME
,HANDLE_TIME				= W1.HANDLE_TIME
,TOTAL_TALK					= W1.TOTAL_TALK
,CPROD						= W1.CPROD
,MING						= W1.MING
,AUT2						= W1.AUT2
,EMAIL						= W1.EMAIL
--,ID_EXT						= W1.ID_EXT
,SCHEDULER_ACL_NAME			= W1.SCHEDULER_ACL_NAME
,PAY_GROUP					= W1.PAY_GROUP
--,STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE					= W1.CAL_DATE
,TENANT_KEY					= W1.TENANT_KEY
,AIR_DAY_TYPE				= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR			= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE			= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE			= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE = W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS				= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS				= W1.INCLUDE_IN_CAS
,READY_FOR_XML				= W1.READY_FOR_XML
,SHOW_ID_EXTS				= W1.SHOW_ID_EXTS
,INVOICE_ID					= W1.INVOICE_ID
,RESOURCE_NAME				= W1.RESOURCE_NAME
,AIRITKDUR					= W1.AIRITKDUR
,AIRIACDUR					= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME		= NULL
,WS_ROW_UPDATED_TIME		= @WS_ROW_CREATED_TIME

--  SELECT *
FROM            YZ_TB_IMPORTS_STUBHUB_INVOICING_1  W1
----INNER JOIN SHOULD TAKE CARE OF MOST OF THE WORRY IN THE WHERE CLAUSE...
INNER JOIN      YZ_TB_IMPORTS_STUBHUB_INVOICING    G	 ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
														AND G.FF_USER_NAME					 = W1.FF_USER_NAME
														AND G.ID_EXT						 = W1.ID_EXT

----Where Permanent table key fields match Work table key fields - then we want to update non-key fields!!!:
WHERE G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
  AND G.FF_USER_NAME                   = W1.FF_USER_NAME
  AND G.ID_EXT						   = W1.ID_EXT
--IF I DO UPDATE NO MATTER WHAT, THEN I CAN SEE WHEN SAME DATA EXISTED IN MULTIPLE FILES!!!  PLUS ASSUMING LAST ON FTP IS WHAT THEY WANT.


--=============================================
-- INSERT DATA INTO PERMANENT TABLE (NEW) 
--=============================================
INSERT INTO YZ_TB_IMPORTS_STUBHUB_INVOICING
(FF_AGENT_NAME
,FF_USER_NAME
,FF_HOUR
,FF_ACTIVE_TIME
,FF_READY_TIME
,FF_NOT_READY_TIME
,FF_ACCEPTED
,FF_INVITE_TIME
,FF_ENGAGE_TIME
,FF_HOLD_TIME
,FF_WRAP_TIME
,FF_CONSULT_RECEIVED_TIME
,FF_TALK_TIME
,FF_HANDLE_TIME
,FF_MINIMUM_GUARANTEE
,FF_AUTHORIZED_TO_INVOICE
,SEQNO_ADDED_TIME
,SEQNO
,FTP_FILE_NAME
,[DATETIME]
,HOUR_INTERVAL
,LOGGED_IN_TIME
,READY_TIME
,NOT_READY_TIME
,CALLS_ACCEPTED
,RING_TIME
,TALK_TIME
,HOLD_TIME
,WRAP_TIME
,CONSULT_TIME
,TALK_HOLD_CONSULT_TIME
,HANDLE_TIME
,TOTAL_TALK
,CPROD
,MING
,AUT2
,EMAIL
,ID_EXT
,SCHEDULER_ACL_NAME
,PAY_GROUP
,STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE
,TENANT_KEY
,AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS
,INCLUDE_IN_CAS
,READY_FOR_XML
,SHOW_ID_EXTS
,INVOICE_ID
,RESOURCE_NAME
,AIRITKDUR
,AIRIACDUR
,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME
)
SELECT
 W1.FF_AGENT_NAME
,W1.FF_USER_NAME
,W1.FF_HOUR
,W1.FF_ACTIVE_TIME
,W1.FF_READY_TIME
,W1.FF_NOT_READY_TIME
,W1.FF_ACCEPTED
,W1.FF_INVITE_TIME
,W1.FF_ENGAGE_TIME
,W1.FF_HOLD_TIME
,W1.FF_WRAP_TIME
,W1.FF_CONSULT_RECEIVED_TIME
,W1.FF_TALK_TIME
,W1.FF_HANDLE_TIME
,W1.FF_MINIMUM_GUARANTEE
,W1.FF_AUTHORIZED_TO_INVOICE

,W1.SEQNO_ADDED_TIME
,W1.SEQNO
,W1.FTP_FILE_NAME

,W1.[DATETIME]
,W1.HOUR_INTERVAL
,W1.LOGGED_IN_TIME
,W1.READY_TIME
,W1.NOT_READY_TIME
,W1.CALLS_ACCEPTED
,W1.RING_TIME
,W1.TALK_TIME
,W1.HOLD_TIME
,W1.WRAP_TIME
,W1.CONSULT_TIME
,W1.TALK_HOLD_CONSULT_TIME
,W1.HANDLE_TIME
,W1.TOTAL_TALK
,W1.CPROD
,W1.MING
,W1.AUT2
,W1.EMAIL
,W1.ID_EXT
,W1.SCHEDULER_ACL_NAME
,W1.PAY_GROUP
,W1.STD_TENANT_START_DATE_TIME_KEY
,W1.CAL_DATE
,W1.TENANT_KEY
,W1.AIR_DAY_TYPE
,W1.AIR_ACW_FONT_COLOR
,W1.MIN_GUARANTEE_RATE
,W1.MIN_GUARANTEE_TYPE
,W1.AUTHORIZED_TO_INVOICE_TYPE
,W1.HAS_HOLIDAYS
,W1.INCLUDE_IN_CAS
,W1.READY_FOR_XML
,W1.SHOW_ID_EXTS
,W1.INVOICE_ID
,W1.RESOURCE_NAME
,W1.AIRITKDUR
,W1.AIRIACDUR

,@WS_ROW_CREATED_TIME    --[WS_ROW_CREATED_TIME] [datetime] NOT NULL,
,NULL                    --[WS_ROW_UPDATED_TIME] [datetime] NULL,

FROM            YZ_TB_IMPORTS_STUBHUB_INVOICING_1  W1

LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_INVOICING    G   ON G.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													  AND G.FF_USER_NAME                   = W1.FF_USER_NAME
													  AND G.ID_EXT						   = W1.ID_EXT

WHERE (G.FF_USER_NAME                      IS NULL AND ISNULL(W1.FF_USER_NAME,'') <> '' )
  AND (G.STD_TENANT_START_DATE_TIME_KEY    IS NULL AND ISNULL(W1.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND (G.ID_EXT							   IS NULL AND ISNULL(W1.ID_EXT,'') <> '' )


--======================================================================================================================================
SET DATEFIRST 1  -- = Monday  --SELECT DATEPART(DW,dbo.getdate())  --SELECT @@DATEFIRST AS '1st Day', DATEPART(dw, dbo.getdate()) AS 'Today'
--======================================================================================================================================

--============================================================
IF OBJECT_ID('TEMPDB..#DT_EASY_WEEKS') IS NOT NULL BEGIN
   DROP TABLE #DT_EASY_WEEKS
END
CREATE TABLE #DT_EASY_WEEKS
(CAL_DATE_STRING      VARCHAR(10)
,CAL_WEEK_START_DATE  DATETIME
,CAL_WEEK_END_DATE    DATETIME
,PAY_CYCLE_CLOSURE_DATE DATETIME
)
INSERT INTO #DT_EASY_WEEKS
SELECT
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
FROM DATE_TIME DT
WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
--WHERE DT.CAL_DATE >= CAST('06/01/2011' AS DATETIME) AND DT.CAL_DATE <  CAST('06/20/2011' AS DATETIME)
GROUP BY 
 DT.CAL_DATE_STRING
,CASE WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 1 THEN CAST(DT.CAL_DATE_STRING AS DATETIME)
	  WHEN DATEPART(DW,CAST(DT.CAL_DATE_STRING AS DATETIME)) = 7 THEN DATEADD(DD,-6,CAST(DT.CAL_DATE_STRING AS DATETIME))
	  ELSE DATEADD(DD,1,DT.CAL_WEEK_START_DATE) END
,DT.CAL_DATE_STRING
,DT.CAL_DATE_STRING  --PAY_CYCLE_CLOSURE_DATE
--===========================
UPDATE #DT_EASY_WEEKS SET CAL_WEEK_END_DATE = DATEADD(DD,6,CAL_WEEK_START_DATE)
--110713: WAS: 06/26/2011
UPDATE #DT_EASY_WEEKS SET
 PAY_CYCLE_CLOSURE_DATE = (CASE WHEN (DATEDIFF(DD,CAST('09/29/2013' AS DATETIME),CAL_WEEK_END_DATE) % 14) = 0 THEN
									CAL_WEEK_END_DATE
								ELSE
									DATEADD(DD,7,CAL_WEEK_END_DATE)
								END)
--SELECT * FROM #DT_EASY_WEEKS ORDER BY CAL_DATE_STRING

--=================================================================================
--CREATE TMP TABLE: Currently same structure as:  [YZ_TB_AGENT_INVOICE_AUTOMATION]
--=================================================================================
IF OBJECT_ID('TEMPDB..#YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA') IS NOT NULL BEGIN
   DROP TABLE #YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA
END
CREATE TABLE #YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA
(	[PLATFORM] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[STATUS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_MAP_KEY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[FIELD_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_PROJECT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SCHEDULER_ACL_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[ACD_ID_EXTENSION] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[OFFICIAL_WSOL_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_WSOL_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[OFFICIAL_ACD_CLIENT_NAME] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NOT NULL,
	[PRIMARY_PROJECT_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DIRECTOR_OF_PROJECT_MANAGEMENT_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_TECHNOLOGY_MANAGER_ID] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CONTRACTOR_SUPPORT_PATHWAY] [varchar](500) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INVOICE_SYSTEM_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOLIDAY] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[FILE_FORMAT_OF_PUSH] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AGENT_PREPARATION_INVOICE_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[NEW_ACL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CURRENT_CATS] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[CATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PATS_ID] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_ELIGIBLE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_1] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_2] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[SMART_TIER_3] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[HOD_INTERVAL] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[AU_DK_LOGGED_IN_DURATION] [decimal](10, 2) NULL,
	[AU_DK_AVAILABLE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_IB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_OB_TALK_DURATION] [decimal](10, 2) NULL,
	[AU_DK_CONVENTIONAL_ACW] [decimal](10, 2) NULL,
	[AU_DK_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_PSEUDO_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_ADJUSTED_NR_DURATION] [decimal](10, 2) NULL,
	[AU_DK_TOTAL_PRODUCTIVE_DURATION] [decimal](10, 2) NULL,
	[AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS] [decimal](10, 2) NULL,
	[AU_DK_XFER_COUNT] [int] NULL,
	[AU_DK_HOLD_COUNT] [int] NULL,
	[AU_DK_CONFERENCE_COUNT] [int] NULL,
	[AU_DK_CONSULT_COUNT] [int] NULL,
	[AU_DK_PUP_COUNT] [int] NULL,
	[AU_DK_OFFERED_COUNT] [int] NULL,
	[AU_DK_HANDLED_COUNT] [int] NULL,
	[AU_DK_IB_HANDLE_COUNT] [int] NULL,
	[AU_DK_OB_HANDLE_COUNT] [int] NULL,
	[AU_DK_RONA_COUNT] [int] NULL,
	[AU_DK_AWR_COUNT] [int] NULL,
	[MINIMUM_GUARANTEE] [decimal](10, 2) NULL,
	[AUTHORIZED_TO_INVOICE] [decimal](10, 2) NULL,
	[WEEK_ENDING_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,
	[PAY_CYCLE_CLOSURE_DATE] [varchar](50) COLLATE SQL_Latin1_General_CP1_CI_AS NULL,

	[FTP_FILE_NAME] [varchar](100) NOT NULL,
	[EMAIL] [varchar](100)  NULL,
	[STD_TENANT_START_DATE_TIME_KEY] [int] NOT NULL,
	[CAL_DATE] [datetime] NULL,
	[TENANT_KEY] [int] NOT NULL,
	[AIR_DAY_TYPE] [varchar](1) NOT NULL,
	[AIR_ACW_FONT_COLOR] [varchar](50) NULL,
	[MIN_GUARANTEE_RATE] [decimal](6, 3) NULL,
	[MIN_GUARANTEE_TYPE] [varchar](50) NULL,
	[AUTHORIZED_TO_INVOICE_TYPE] [varchar](50) NULL,
	[HAS_HOLIDAYS] [varchar](1) NULL,
	[INCLUDE_IN_CAS] [varchar](1) NULL,
	[READY_FOR_XML] [varchar](1) NULL,
	[SHOW_ID_EXTS] [varchar](1) NULL,
	[INVOICE_ID] [varchar](50) NULL,
	[RESOURCE_NAME] [varchar](100) NULL,
	[AIRITKDUR] [decimal](10, 2) NULL,
	[AIRIACDUR] [decimal](10, 2) NULL,
	[PAY_GROUP] [int] NULL,
	[WS_ROW_CREATED_TIME] [datetime] NULL,
	[WS_ROW_UPDATED_TIME] [datetime] NULL

)
INSERT INTO #YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA
SELECT 
 AIASD.[PLATFORM]
,AIASD.[STATUS]    
,AIA.FF_USER_NAME  --INVOICE_MAP_KEY
,AIASD.FIELD_NAME
,AIASD.SCHEDULER_PROJECT_ID
,AIASD.SCHEDULER_ACL_NAME
,AIASD.ACD_ID_EXTENSION
,AIASD.OFFICIAL_WSOL_CLIENT_ID
,AIASD.OFFICIAL_WSOL_CLIENT_NAME
,AIASD.OFFICIAL_ACD_CLIENT_ID
,AIASD.OFFICIAL_ACD_CLIENT_NAME
,AIASD.PRIMARY_PROJECT_MANAGER_ID
,AIASD.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIASD.AGENT_TECHNOLOGY_MANAGER_ID
,AIASD.CONTRACTOR_SUPPORT_PATHWAY
,AIASD.INVOICE_SYSTEM_ID
,AIASD.HOLIDAY_INVOICE_ID
,CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN 'Yes' ELSE 'No' END  AS HOLIDAY   --AIR_DAY_TYPE:  'H'=Holiday  'S'=Standard (not holiday)
,AIASD.FILE_FORMAT_OF_PUSH
,AIASD.AGENT_PREPARATION_INVOICE_ID
,AIASD.NEW_ACL
,AIASD.CURRENT_CATS
,AIASD.CATS_ID
,AIASD.PATS_ID
,AIASD.SMART_ELIGIBLE
,AIASD.SMART_TIER_1
,AIASD.SMART_TIER_2
,AIASD.SMART_TIER_3
,AIASD.INTERVAL
,DT.CAL_DATE_STRING     --[DATE]             
,DT.LABEL_HH24 + ':00'  --HOD_INTERVAL

,ISNULL(AIA.LOGGED_IN_TIME, 0)			--AU_DK_LOGGED_IN_DURATION				
,ISNULL(AIA.READY_TIME, 0)				--AU_DK_AVAILABLE_DURATION				

,ISNULL(AIA.TALK_HOLD_CONSULT_TIME, 0)	--AIA.TALK_TIME + AIA.HOLD_TIME + AIA.CONSULT_TIME		--AU_DK_TALK_DURATION
,0										--AU_DK_IB_TALK_DURATION
,0										--AU_DK_OB_TALK_DURATION

,ISNULL(AIA.WRAP_TIME, 0)	   			--AU_DK_CONVENTIONAL_ACW
,ISNULL(AIA.NOT_READY_TIME, 0)			--AU_DK_NR_DURATION
,0										--AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,0										--AU_DK_ADJUSTED_NR_DURATION
,ISNULL(AIA.CPROD, 0)					--AU_DK_TOTAL_PRODUCTIVE_DURATION
,ISNULL(AIA.CPROD, 0)					--AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS

,0  --AU_DK_XFER_COUNT
,0  --AU_DK_HOLD_COUNT
,0  --AU_DK_CONFERENCE_COUNT
,0  --AU_DK_CONSULT_COUNT
,0  --AU_DK_PUP_COUNT

,0  --AU_DK_OFFERED_COUNT
,0  --AU_DK_HANDLED_COUNT
,0  --AU_DK_IB_HANDLE_COUNT
,0  --AU_DK_OB_HANDLE_COUNT
						
,0   --AU_DK_RONA_COUNT
,0   --AU_DK_AWR_COUNT

,ISNULL(AIA.MING, 0) --MINIMUM_GUARANTEE
,ISNULL(AIA.AUT2, 0) --AUTHORIZED_TO_INVOICE

,CONVERT(VARCHAR(10),DEW.CAL_WEEK_END_DATE,101)      --AS WEEK_ENDING_DATE       --EVERY SUNDAY.--,AIA.WEEK_ENDING_DATE             --HAVE TO CALCULATE !!!!!!!!!!!
,CONVERT(VARCHAR(10),DEW.PAY_CYCLE_CLOSURE_DATE,101) --AS PAY_CYCLE_CLOSURE_DATE --EVERY OTHER SUNDAY, FROM A STARTING SUNDAY OF 10/31/11.--,AIA.PAY_CYCLE_CLOSURE_DATE       --HAVE TO CALCULATE !!!!!!!!!!!

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,DT.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID  --CASE WHEN AIA.AIR_DAY_TYPE = 'H' THEN AIASD.HOLIDAY_INVOICE_ID ELSE AIASD.INVOICE_SYSTEM_ID END  --AS INVOICE_ID 
,AIA.RESOURCE_NAME
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.PAY_GROUP
,dbo.getdate()  --	[WS_ROW_CREATED_TIME] [datetime] NULL,
,NULL       --	[WS_ROW_UPDATED_TIME] [datetime] NULL
	
--SELECT * FROM YZ_TB_IMPORTS_STUBHUB_SD_AIA_STATIC_DEFAULTS ORDER BY OFFICIAL_WSOL_CLIENT_ID
--SELECT TOP 1000 *
FROM            YZ_TB_IMPORTS_STUBHUB_INVOICING_1            AIA 
--Only want to include valid id exts in _AIA table -- id exts that have ming and aut2 formulas and static defaults setup...:
INNER JOIN      YZ_TB_IMPORTS_STUBHUB_SD_AIA_STATIC_DEFAULTS AIASD ON AIASD.ACD_ID_EXTENSION = AIA.ID_EXT
INNER JOIN      YZ_TB_IMPORTS_STUBHUB_SD_INVOICE_GROUPS      CASG  ON CASG.ID_EXT            = AIASD.ACD_ID_EXTENSION	

INNER JOIN      DATE_TIME                                DT    ON DT.DATE_TIME_KEY       = AIA.STD_TENANT_START_DATE_TIME_KEY

LEFT JOIN       #DT_EASY_WEEKS                           DEW   ON DEW.CAL_DATE_STRING    = DT.CAL_DATE_STRING

WHERE DT.CAL_DATE >= @DTM_BEG AND DT.CAL_DATE <  @DTM_END
  AND (ISNULL(AIASD.ACD_ID_EXTENSION,'') <> '')
--AND (ISNULL(AIA.PAY_GROUP,'') = 0)  -- THIS CAN BE SET TO ONLY INCLUDE CERTAIN PAY GROUPS IN THE XML PUSH

--  INNER JOIN TO AIASD TABLE ENSURES ONLY RECORDS WITH VALID ID EXTENSIONS ARE PUT IN _AIA TABLE/XML REPORT/FILE...
--  SAME FOR INVOICE_GROUPS...

--  AGENT CAN'T BE IN THE SAME TIME INTERVAL MORE THAN ONCE, NO MATTER WHAT THEIR ID_EXT...
--  WE MAY HAVE MULTIPLE RECORDS OF AGENT IN SAME TIME INTERVAL DUE TO CARRY OVER INTO NEXT DAY'S FILE
--  MAY NEED TO RECALCULATE MING AND AUT2 WHEN GENERATING XML

--  SELECT * FROM YZ_TB_IMPORTS_STUBHUB_INVOICING WHERE ISNULL(ID_EXT,'') = ''


--==================================
--UPDATE YZ_TB_...UV_ANT_AIA TABLE:
--==================================  --  SELECT TOP 100 * FROM YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA
UPDATE YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA SET
 [PLATFORM]							= W1.[PLATFORM]
,[STATUS]							= W1.[STATUS]
--,INVOICE_MAP_KEY					= W1.INVOICE_MAP_KEY
,FIELD_NAME							= W1.FIELD_NAME
,SCHEDULER_PROJECT_ID				= W1.SCHEDULER_PROJECT_ID
,SCHEDULER_ACL_NAME					= W1.SCHEDULER_ACL_NAME
--,ACD_ID_EXTENSION					= W1.ACD_ID_EXTENSION
,OFFICIAL_WSOL_CLIENT_ID			= W1.OFFICIAL_WSOL_CLIENT_ID
,OFFICIAL_WSOL_CLIENT_NAME			= W1.OFFICIAL_WSOL_CLIENT_NAME
,OFFICIAL_ACD_CLIENT_ID				= W1.OFFICIAL_ACD_CLIENT_ID
,OFFICIAL_ACD_CLIENT_NAME			= W1.OFFICIAL_ACD_CLIENT_NAME
,PRIMARY_PROJECT_MANAGER_ID			= W1.PRIMARY_PROJECT_MANAGER_ID
,DIRECTOR_OF_PROJECT_MANAGEMENT_ID	= W1.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AGENT_TECHNOLOGY_MANAGER_ID		= W1.AGENT_TECHNOLOGY_MANAGER_ID
,CONTRACTOR_SUPPORT_PATHWAY			= W1.CONTRACTOR_SUPPORT_PATHWAY
,INVOICE_SYSTEM_ID					= W1.INVOICE_SYSTEM_ID
,HOLIDAY_INVOICE_ID					= W1.HOLIDAY_INVOICE_ID
,HOLIDAY							= W1.HOLIDAY
,FILE_FORMAT_OF_PUSH				= W1.FILE_FORMAT_OF_PUSH
,AGENT_PREPARATION_INVOICE_ID		= W1.AGENT_PREPARATION_INVOICE_ID
,NEW_ACL							= W1.NEW_ACL
,CURRENT_CATS						= W1.CURRENT_CATS
,CATS_ID							= W1.CATS_ID
,PATS_ID							= W1.PATS_ID
,SMART_ELIGIBLE						= W1.SMART_ELIGIBLE
,SMART_TIER_1						= W1.SMART_TIER_1
,SMART_TIER_2						= W1.SMART_TIER_2
,SMART_TIER_3						= W1.SMART_TIER_3
,INTERVAL							= W1.INTERVAL
,[DATE]								= W1.[DATE]
,HOD_INTERVAL						= W1.HOD_INTERVAL
,AU_DK_LOGGED_IN_DURATION			= W1.AU_DK_LOGGED_IN_DURATION
,AU_DK_AVAILABLE_DURATION			= W1.AU_DK_AVAILABLE_DURATION
,AU_DK_TALK_DURATION				= W1.AU_DK_TALK_DURATION
,AU_DK_IB_TALK_DURATION				= W1.AU_DK_IB_TALK_DURATION
,AU_DK_OB_TALK_DURATION				= W1.AU_DK_OB_TALK_DURATION
,AU_DK_CONVENTIONAL_ACW				= W1.AU_DK_CONVENTIONAL_ACW
,AU_DK_NR_DURATION					= W1.AU_DK_NR_DURATION
,AU_DK_PSEUDO_PRODUCTIVE_DURATION   = W1.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AU_DK_ADJUSTED_NR_DURATION         = W1.AU_DK_ADJUSTED_NR_DURATION
,AU_DK_TOTAL_PRODUCTIVE_DURATION    = W1.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS = W1.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AU_DK_XFER_COUNT					= W1.AU_DK_XFER_COUNT
,AU_DK_HOLD_COUNT					= W1.AU_DK_HOLD_COUNT
,AU_DK_CONFERENCE_COUNT				= W1.AU_DK_CONFERENCE_COUNT
,AU_DK_CONSULT_COUNT				= W1.AU_DK_CONSULT_COUNT
,AU_DK_PUP_COUNT					= W1.AU_DK_PUP_COUNT
,AU_DK_OFFERED_COUNT				= W1.AU_DK_OFFERED_COUNT
,AU_DK_HANDLED_COUNT				= W1.AU_DK_HANDLED_COUNT
,AU_DK_IB_HANDLE_COUNT				= W1.AU_DK_IB_HANDLE_COUNT
,AU_DK_OB_HANDLE_COUNT				= W1.AU_DK_OB_HANDLE_COUNT
,AU_DK_RONA_COUNT					= W1.AU_DK_RONA_COUNT
,AU_DK_AWR_COUNT					= W1.AU_DK_AWR_COUNT
,MINIMUM_GUARANTEE					= W1.MINIMUM_GUARANTEE
,AUTHORIZED_TO_INVOICE				= W1.AUTHORIZED_TO_INVOICE
,WEEK_ENDING_DATE					= W1.WEEK_ENDING_DATE
,PAY_CYCLE_CLOSURE_DATE				= W1.PAY_CYCLE_CLOSURE_DATE

--FIELDS ABOVE ARE IN XML FILE.   FIELDS BELOW ARE NOT IN XML FILE!!!:

,FTP_FILE_NAME						= W1.FTP_FILE_NAME
,EMAIL								= W1.EMAIL
--,STD_TENANT_START_DATE_TIME_KEY	= W1.STD_TENANT_START_DATE_TIME_KEY
,CAL_DATE							= W1.CAL_DATE
,TENANT_KEY							= W1.TENANT_KEY
,AIR_DAY_TYPE						= W1.AIR_DAY_TYPE
,AIR_ACW_FONT_COLOR					= W1.AIR_ACW_FONT_COLOR
,MIN_GUARANTEE_RATE					= W1.MIN_GUARANTEE_RATE
,MIN_GUARANTEE_TYPE					= W1.MIN_GUARANTEE_TYPE
,AUTHORIZED_TO_INVOICE_TYPE			= W1.AUTHORIZED_TO_INVOICE_TYPE
,HAS_HOLIDAYS						= W1.HAS_HOLIDAYS
,INCLUDE_IN_CAS						= W1.INCLUDE_IN_CAS
,READY_FOR_XML						= W1.READY_FOR_XML
,SHOW_ID_EXTS						= W1.SHOW_ID_EXTS
,INVOICE_ID							= W1.INVOICE_ID
,RESOURCE_NAME						= W1.RESOURCE_NAME

,PAY_GROUP							= W1.PAY_GROUP
,AIRITKDUR							= W1.AIRITKDUR
,AIRIACDUR							= W1.AIRIACDUR

--,WS_ROW_CREATED_TIME
,WS_ROW_UPDATED_TIME				= @WS_ROW_CREATED_TIME

FROM            #YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA   W1

INNER JOIN      YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA    UV  ON UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY
													   AND UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION
													   AND UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY = W1.STD_TENANT_START_DATE_TIME_KEY )
  AND ( UV.ACD_ID_EXTENSION               = W1.ACD_ID_EXTENSION )
  AND ( UV.INVOICE_MAP_KEY                = W1.INVOICE_MAP_KEY )


--================================================
--INSERT TMP TABLE FIELDS INTO YZ_TB_... TABLE:
--================================================
INSERT INTO [YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA]
SELECT 
 AIA.[PLATFORM]
,AIA.[STATUS]
,AIA.INVOICE_MAP_KEY
,AIA.FIELD_NAME
,AIA.SCHEDULER_PROJECT_ID
,AIA.SCHEDULER_ACL_NAME
,AIA.ACD_ID_EXTENSION
,AIA.OFFICIAL_WSOL_CLIENT_ID
,AIA.OFFICIAL_WSOL_CLIENT_NAME
,AIA.OFFICIAL_ACD_CLIENT_ID
,AIA.OFFICIAL_ACD_CLIENT_NAME
,AIA.PRIMARY_PROJECT_MANAGER_ID
,AIA.DIRECTOR_OF_PROJECT_MANAGEMENT_ID
,AIA.AGENT_TECHNOLOGY_MANAGER_ID
,AIA.CONTRACTOR_SUPPORT_PATHWAY
,AIA.INVOICE_SYSTEM_ID
,AIA.HOLIDAY_INVOICE_ID
,AIA.HOLIDAY
,AIA.FILE_FORMAT_OF_PUSH
,AIA.AGENT_PREPARATION_INVOICE_ID
,AIA.NEW_ACL
,AIA.CURRENT_CATS
,AIA.CATS_ID
,AIA.PATS_ID
,AIA.SMART_ELIGIBLE
,AIA.SMART_TIER_1
,AIA.SMART_TIER_2
,AIA.SMART_TIER_3
,AIA.INTERVAL
,AIA.[DATE]
,AIA.HOD_INTERVAL
,AIA.AU_DK_LOGGED_IN_DURATION
,AIA.AU_DK_AVAILABLE_DURATION
,AIA.AU_DK_TALK_DURATION
,AIA.AU_DK_IB_TALK_DURATION
,AIA.AU_DK_OB_TALK_DURATION
,AIA.AU_DK_CONVENTIONAL_ACW
,AIA.AU_DK_NR_DURATION
,AIA.AU_DK_PSEUDO_PRODUCTIVE_DURATION
,AIA.AU_DK_ADJUSTED_NR_DURATION
,AIA.AU_DK_TOTAL_PRODUCTIVE_DURATION
,AIA.AU_DK_WPSEUDO_PRODUCTIVE_DURATIONS
,AIA.AU_DK_XFER_COUNT
,AIA.AU_DK_HOLD_COUNT
,AIA.AU_DK_CONFERENCE_COUNT
,AIA.AU_DK_CONSULT_COUNT
,AIA.AU_DK_PUP_COUNT
,AIA.AU_DK_OFFERED_COUNT
,AIA.AU_DK_HANDLED_COUNT
,AIA.AU_DK_IB_HANDLE_COUNT
,AIA.AU_DK_OB_HANDLE_COUNT
,AIA.AU_DK_RONA_COUNT
,AIA.AU_DK_AWR_COUNT
,AIA.MINIMUM_GUARANTEE
,AIA.AUTHORIZED_TO_INVOICE
,AIA.WEEK_ENDING_DATE
,AIA.PAY_CYCLE_CLOSURE_DATE

,AIA.FTP_FILE_NAME
,AIA.EMAIL
,AIA.STD_TENANT_START_DATE_TIME_KEY
,AIA.CAL_DATE
,AIA.TENANT_KEY
,AIA.AIR_DAY_TYPE
,AIA.AIR_ACW_FONT_COLOR
,AIA.MIN_GUARANTEE_RATE
,AIA.MIN_GUARANTEE_TYPE
,AIA.AUTHORIZED_TO_INVOICE_TYPE
,AIA.HAS_HOLIDAYS
,AIA.INCLUDE_IN_CAS
,AIA.READY_FOR_XML
,AIA.SHOW_ID_EXTS
,AIA.INVOICE_ID
,AIA.RESOURCE_NAME
,AIA.PAY_GROUP
,AIA.AIRITKDUR
,AIA.AIRIACDUR
,AIA.WS_ROW_CREATED_TIME
,AIA.WS_ROW_UPDATED_TIME

--Where Permanent table is Null and Work table is not Null - then we want to add the data!!!:

FROM            #YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA   AIA
LEFT JOIN       YZ_TB_IMPORTS_STUBHUB_UV_ANT_AIA    UV	 ON UV.STD_TENANT_START_DATE_TIME_KEY = AIA.STD_TENANT_START_DATE_TIME_KEY
														AND UV.ACD_ID_EXTENSION               = AIA.ACD_ID_EXTENSION
														AND UV.INVOICE_MAP_KEY                = AIA.INVOICE_MAP_KEY

WHERE ( UV.STD_TENANT_START_DATE_TIME_KEY IS NULL AND ISNULL(AIA.STD_TENANT_START_DATE_TIME_KEY,0) <> 0 )
  AND ( UV.ACD_ID_EXTENSION               IS NULL AND ISNULL(AIA.ACD_ID_EXTENSION,'') <> '' )
  AND ( UV.INVOICE_MAP_KEY                IS NULL AND ISNULL(AIA.INVOICE_MAP_KEY,'') <> '' )



--=============================================
EARLY_EXIT:
--=============================================